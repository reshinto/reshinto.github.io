"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[98831],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(r),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},74961:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=r(83117),a=(r(67294),r(3905));const i={},s="REpresentational State Transfer (REST)",o={unversionedId:"interviewPrep/system_design/25ApiDesign/rest",id:"interviewPrep/system_design/25ApiDesign/rest",title:"REpresentational State Transfer (REST)",description:"- refers to a group of software architecture design constraints that bring about efficient, reliable, and scalable systems",source:"@site/docs/interviewPrep/system_design/25ApiDesign/rest.md",sourceDirName:"interviewPrep/system_design/25ApiDesign",slug:"/interviewPrep/system_design/25ApiDesign/rest",permalink:"/docs/interviewPrep/system_design/25ApiDesign/rest",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/system_design/25ApiDesign/rest.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"API design outline during an interview",permalink:"/docs/interviewPrep/system_design/25ApiDesign/example/"},next:{title:"OSI (Open System Interconnection) Model",permalink:"/docs/interviewPrep/system_design/OSI_model"}},l={},c=[{value:"6 constraints of REST",id:"6-constraints-of-rest",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"representational-state-transfer-rest"},"REpresentational State Transfer (REST)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"refers to a group of software architecture design constraints that bring about efficient, reliable, and scalable systems")),(0,a.kt)("h2",{id:"6-constraints-of-rest"},"6 constraints of REST"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"if a web-based API meets these 6 constraints, it can be considered a RESTful API")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Client-server architecture",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"the client manages user interface concerns while the server manages data storage concerns",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"this allows a highly portable system where 1 REST server can serve multiple clients"))),(0,a.kt)("li",{parentName:"ul"},"have a complete separation between the content and its presentation and interaction"))),(0,a.kt)("li",{parentName:"ol"},"Statelessness",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"no client context or information (state) can be stored on the server between requests"),(0,a.kt)("li",{parentName:"ul"},"the client is responsible for keeping track of its own session state"),(0,a.kt)("li",{parentName:"ul"},"all requests sent from a client must be self-contained and complete"),(0,a.kt)("li",{parentName:"ul"},"if the client's session state is relevant, it must be sent along with a request"),(0,a.kt)("li",{parentName:"ul"},"if the server needs to store the state, it must pass it on to a database or similar service for a specific time"))),(0,a.kt)("li",{parentName:"ol"},"Cacheability",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"all REST responses must be clearly marked as cacheable or not cacheable"))),(0,a.kt)("li",{parentName:"ol"},"Layered system",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"the client cannot know, and shouldn't care, whether it's connected directly to the server or to an intermediary like a CDN or mirror",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"ensures scalability and helps with security"))))),(0,a.kt)("li",{parentName:"ol"},"Code on demand",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"servers are allowed to transfer executable code like JavaScript and compiled components to clients"),(0,a.kt)("li",{parentName:"ul"},"less commonly used of REST"))),(0,a.kt)("li",{parentName:"ol"},"Uniform interface",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Resource identification in request",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"the URI request must specify what resource it is looking for and what format the response should use"))),(0,a.kt)("li",{parentName:"ol"},"Resource manipulation through representations",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"once a client has a representation of a resource, it can modify or delate the resource"))),(0,a.kt)("li",{parentName:"ol"},"Self-descriptive messages",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"a uniform interface must issue self-descriptive messages for both sending and receiving REST data"),(0,a.kt)("li",{parentName:"ul"},"each representation must describe its own data format"))),(0,a.kt)("li",{parentName:"ol"},"Hypermedia as the engine of application state",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"a uniform interface must use hypermedia as the engine of application state"),(0,a.kt)("li",{parentName:"ul"},"once a client has access to a REST service, it should be able to discover all available resources and methods through the hyperlinks provided")))))))}u.isMDXComponent=!0}}]);