"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[95112],{3905:(e,n,a)=>{a.d(n,{Zo:()=>m,kt:()=>c});var t=a(67294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=t.createContext({}),u=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},m=function(e){var n=u(e.components);return t.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=u(a),c=i,g=p["".concat(o,".").concat(c)]||p[c]||d[c]||l;return a?t.createElement(g,r(r({ref:n},m),{},{components:a})):t.createElement(g,r({ref:n},m))}));function c(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var u=2;u<l;u++)r[u]=a[u];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},20740:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var t=a(83117),i=(a(67294),a(3905));const l={},r="Meaning Variable Names",s={unversionedId:"interviewPrep/design_principles/meaningfulVariableNames/readme",id:"interviewPrep/design_principles/meaningfulVariableNames/readme",title:"Meaning Variable Names",description:"- One of the most difficult things while coding is naming things (variables, functions, and classes)",source:"@site/docs/interviewPrep/design_principles/meaningfulVariableNames/readme.md",sourceDirName:"interviewPrep/design_principles/meaningfulVariableNames",slug:"/interviewPrep/design_principles/meaningfulVariableNames/",permalink:"/docs/interviewPrep/design_principles/meaningfulVariableNames/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/meaningfulVariableNames/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Designing Good Functions",permalink:"/docs/interviewPrep/design_principles/designingGoodFunctions/"},next:{title:"Introduction",permalink:"/docs/interviewPrep/system_design/01Introduction/"}},o={},u=[{value:"Use Intention-Revealing Names",id:"use-intention-revealing-names",level:2},{value:"Bad examples",id:"bad-examples",level:3},{value:"Good Examples",id:"good-examples",level:3},{value:"Name Functions as Verbs",id:"name-functions-as-verbs",level:2},{value:"Name Classes as Nouns",id:"name-classes-as-nouns",level:2},{value:"Use Meaningful Distinction",id:"use-meaningful-distinction",level:2},{value:"Number-series",id:"number-series",level:3},{value:"Noise words",id:"noise-words",level:3},{value:"Use Pronounceable Names",id:"use-pronounceable-names",level:2},{value:"Bad Example",id:"bad-example",level:3},{value:"Good Example",id:"good-example",level:3},{value:"Use Searchable Names",id:"use-searchable-names",level:2},{value:"Avoid magic numbers",id:"avoid-magic-numbers",level:3},{value:"Bad Example",id:"bad-example-1",level:4},{value:"Good Example",id:"good-example-1",level:4},{value:"Avoid short names",id:"avoid-short-names",level:3},{value:"Avoid Encodings",id:"avoid-encodings",level:2},{value:"Bad Example",id:"bad-example-2",level:2}],m={toc:u};function d(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"meaning-variable-names"},"Meaning Variable Names"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"One of the most difficult things while coding is naming things (variables, functions, and classes)"),(0,i.kt)("li",{parentName:"ul"},"Most people go ahead with single or double letter variable names like A, v, d, mp, etc when they start coding",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Most people use generic variable names like flag, value, map, arr, etc"),(0,i.kt)("li",{parentName:"ul"},"These variable names might be easy to write but it makes the code difficult to read and makes debugging more time-consuming"))),(0,i.kt)("li",{parentName:"ul"},"Follow these rules to create meaningful variables, functions, and classes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Use Intention-Revealing Names"),(0,i.kt)("li",{parentName:"ul"},"Name Functions as Verbs"),(0,i.kt)("li",{parentName:"ul"},"Name Classes as Nouns"),(0,i.kt)("li",{parentName:"ul"},"Use Meaningful Distinction"),(0,i.kt)("li",{parentName:"ul"},"Use Pronounceable Names"),(0,i.kt)("li",{parentName:"ul"},"Use Searchable Names"),(0,i.kt)("li",{parentName:"ul"},"Avoid Encodings")))),(0,i.kt)("h2",{id:"use-intention-revealing-names"},"Use Intention-Revealing Names"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The name of the variable, function, class, etc should be sufficient enough to understand its purpose",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"One should not have to read the whole code to figure out what a function does or what a class represents or to understand why a variable exists"))),(0,i.kt)("li",{parentName:"ul"},"The name should ideally not require a comment"),(0,i.kt)("li",{parentName:"ul"},"Writing descriptive variable names may look like it would take more time",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Once you start writing descriptive names, it would become pretty intuitive and would result in saving more time in terms of collaboration, maintenance, and readability")))),(0,i.kt)("h3",{id:"bad-examples"},"Bad examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"//This is bad\nint d;\nString[] arr;\nboolean flag;\n\n//This is bad\nint getAnswer(int a, int b) {\n}\n")),(0,i.kt)("h3",{id:"good-examples"},"Good Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"//This is good\nint courseDurationInDays;\nString[] chapterNames;\nboolean isCellVisited;\n\n//This is good\nint getSum(int firstNum, int secondNum) {\n}\n")),(0,i.kt)("h2",{id:"name-functions-as-verbs"},"Name Functions as Verbs"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Function names should be verbs or verb phrases that explain what the function does. Getters (Accessors) and Setters (Mutators) should start with get/set"),(0,i.kt)("li",{parentName:"ul"},"Function names should also be descriptive",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A long, descriptive name is better than using a comment to describe it"),(0,i.kt)("li",{parentName:"ul"},"A function name should be descriptive enough to understand the intent of that function"))),(0,i.kt)("li",{parentName:"ul"},"Ward\u2019s principle: You know you are working on clean code when each function turns out to be pretty much what you expected"),(0,i.kt)("li",{parentName:"ul"},"Be consistent in naming functions and use the same convention")),(0,i.kt)("h2",{id:"name-classes-as-nouns"},"Name Classes as Nouns"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Classes should have descriptive names such that it should be easy to understand their intent",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Classes should have nouns or noun phrases as names"),(0,i.kt)("li",{parentName:"ul"},"A class name should not be a verb")))),(0,i.kt)("h2",{id:"use-meaningful-distinction"},"Use Meaningful Distinction"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When two variables/functions/classes exist with similar names, make sure that there is a meaningful distinction between their names")),(0,i.kt)("h3",{id:"number-series"},"Number-series"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Number-series naming is a pretty bad way to name variables as it is difficult to distinguish between variables")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"int[] arr1;\nint[] arr2;\n")),(0,i.kt)("h3",{id:"noise-words"},"Noise words"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Noise words like ",(0,i.kt)("inlineCode",{parentName:"li"},"Data"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Value"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Info"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Variable"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Table"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Object"),", etc which are used as a suffix do not offer any meaningful distinction",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Noise words are redundant and should be avoided")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"String status;\nString statusValue;\n\nclass Product {\n}\n\nclass ProductInfo {\n}\n\ngetDistinctValue(int[] arr) {\n}\n\ngetDistinctValues(int[] arr) {\n}\n")),(0,i.kt)("h2",{id:"use-pronounceable-names"},"Use Pronounceable Names"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Using pronounceable names makes the code easy to read and discuss about",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Doing so allows discussing/explaining code in plain English")))),(0,i.kt)("h3",{id:"bad-example"},"Bad Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Date modDateYYMMDD;\n")),(0,i.kt)("h3",{id:"good-example"},"Good Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Date modificationTimestamp;\n")),(0,i.kt)("h2",{id:"use-searchable-names"},"Use Searchable Names"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In big codebases, you would have to search for variable/function/class names to find it",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Small names or constant values might make it difficult to search"),(0,i.kt)("li",{parentName:"ul"},"Proper names that make it easy to search make the code cleaner and easier to maintain")))),(0,i.kt)("h3",{id:"avoid-magic-numbers"},"Avoid magic numbers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create named constants instead of using numbers or other constant values where it is supposed to denote something")),(0,i.kt)("h4",{id:"bad-example-1"},"Bad Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"ParkingLot() {\n    int[] parkingSpots[100];\n}\n\nvoid printParkingSpots() {\n    for (int i = 0; i < 100; i++) {\n        System.out.println(parkingSpots[i]);\n    }\n}\n")),(0,i.kt)("h4",{id:"good-example-1"},"Good Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"final int NUMBER_OF_PARKING_SPOTS = 100;\n\nParkingLot() {\n    int[] parkingSpots[NUMBER_OF_PARKING_SPOTS];\n}\n\nvoid printParkingSpots() {\n    for (int i = 0; i < NUMBER_OF_PARKING_SPOTS; i++) {\n        System.out.println(parkingSpots[i]);\n    }\n}\n")),(0,i.kt)("h3",{id:"avoid-short-names"},"Avoid short names"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Smaller names should only be used in variables inside short functions (for temporary use) where it has no meaning/use outside the said function",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"However, it should be noted that the variable names can be small if the scope of the variable is very small given that it is sufficient to understand the intention")))),(0,i.kt)("h2",{id:"avoid-encodings"},"Avoid Encodings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Avoid using any unnecessary prefixes or suffixes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A variable/function/class name should not be unnecessarily prefixed/suffixed with type information or any other redundant information")))),(0,i.kt)("h2",{id:"bad-example-2"},"Bad Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"//String suffix ties the variable to the data type that makes it difficult to be changed later.\nString locationString;\n\n//The prefix I should be avoided for Interfaces\ninterface IEmployee {\n}\n")))}d.isMDXComponent=!0}}]);