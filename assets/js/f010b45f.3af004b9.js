"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[81393],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=o,h=u["".concat(s,".").concat(f)]||u[f]||d[f]||i;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},89957:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(83117),o=(n(67294),n(3905));const i={},a="Python Example",l={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/python/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/python",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Iterator/python/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/javascript/"},next:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/swift/"}},s={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"python-example"},"Python Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'"""\nIterator Design Pattern\n\nIntent: Lets you traverse elements of a collection without exposing its\nunderlying representation (list, stack, tree, etc.).\n"""\n\n\nfrom __future__ import annotations\nfrom collections.abc import Iterable, Iterator\nfrom typing import Any, List\n\n\n"""\nTo create an iterator in Python, there are two abstract classes from the built-\nin `collections` module - Iterable,Iterator. We need to implement the\n`__iter__()` method in the iterated object (collection), and the `__next__ ()`\nmethod in theiterator.\n"""\n\n\nclass AlphabeticalOrderIterator(Iterator):\n    """\n    Concrete Iterators implement various traversal algorithms. These classes\n    store the current traversal position at all times.\n    """\n\n    """\n    `_position` attribute stores the current traversal position. An iterator may\n    have a lot of other fields for storing iteration state, especially when it\n    is supposed to work with a particular kind of collection.\n    """\n    _position: int = None\n\n    """\n    This attribute indicates the traversal direction.\n    """\n    _reverse: bool = False\n\n    def __init__(self, collection: WordsCollection, reverse: bool = False) -> None:\n        self._collection = collection\n        self._reverse = reverse\n        self._position = -1 if reverse else 0\n\n    def __next__(self):\n        """\n        The __next__() method must return the next item in the sequence. On\n        reaching the end, and in subsequent calls, it must raise StopIteration.\n        """\n        try:\n            value = self._collection[self._position]\n            self._position += -1 if self._reverse else 1\n        except IndexError:\n            raise StopIteration()\n\n        return value\n\n\nclass WordsCollection(Iterable):\n    """\n    Concrete Collections provide one or several methods for retrieving fresh\n    iterator instances, compatible with the collection class.\n    """\n\n    def __init__(self, collection: List[Any] = []) -> None:\n        self._collection = collection\n\n    def __iter__(self) -> AlphabeticalOrderIterator:\n        """\n        The __iter__() method returns the iterator object itself, by default we\n        return the iterator in ascending order.\n        """\n        return AlphabeticalOrderIterator(self._collection)\n\n    def get_reverse_iterator(self) -> AlphabeticalOrderIterator:\n        return AlphabeticalOrderIterator(self._collection, True)\n\n    def add_item(self, item: Any):\n        self._collection.append(item)\n\n\nif __name__ == "__main__":\n    # The client code may or may not know about the Concrete Iterator or\n    # Collection classes, depending on the level of indirection you want to keep\n    # in your program.\n    collection = WordsCollection()\n    collection.add_item("First")\n    collection.add_item("Second")\n    collection.add_item("Third")\n\n    print("Straight traversal:")\n    print("\\n".join(collection))\n    print("")\n\n    print("Reverse traversal:")\n    print("\\n".join(collection.get_reverse_iterator()), end="")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Straight traversal:\nFirst\nSecond\nThird\n\nReverse traversal:\nThird\nSecond\nFirst\n")))}d.isMDXComponent=!0}}]);