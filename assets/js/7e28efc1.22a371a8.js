"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[43547],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>p});var n=t(67294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),u=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},m=function(e){var a=u(e.components);return n.createElement(s.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=u(t),p=i,h=c["".concat(s,".").concat(p)]||c[p]||d[p]||r;return t?n.createElement(h,l(l({ref:a},m),{},{components:t})):n.createElement(h,l({ref:a},m))}));function p(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=c;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},20099:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var n=t(83117),i=(t(67294),t(3905));const r={},l="Array",o={unversionedId:"interviewPrep/data_structures/07Array/readme",id:"interviewPrep/data_structures/07Array/readme",title:"Array",description:"- linear collection of data values that are accessible at numbered indices, starting at index 0",source:"@site/docs/interviewPrep/data_structures/07Array/readme.md",sourceDirName:"interviewPrep/data_structures/07Array",slug:"/interviewPrep/data_structures/07Array/",permalink:"/docs/interviewPrep/data_structures/07Array/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/data_structures/07Array/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Logarithm",permalink:"/docs/interviewPrep/data_structures/06Logarithm/"},next:{title:"Linked Lists",permalink:"/docs/interviewPrep/data_structures/08LinkedLists/"}},s={},u=[{value:"initializing an array: O(n) time and space",id:"initializing-an-array-on-time-and-space",level:3},{value:"traversing an array: O(n) time and O(1) space",id:"traversing-an-array-on-time-and-o1-space",level:3},{value:"copying the array: O(n) space and time",id:"copying-the-array-on-space-and-time",level:3},{value:"accessing a value at a given index: O(1) time and space",id:"accessing-a-value-at-a-given-index-o1-time-and-space",level:3},{value:"updating a value at a given index: O(1) time and space",id:"updating-a-value-at-a-given-index-o1-time-and-space",level:3},{value:"inserting a value at the beginning: O(n) time, O(1) space",id:"inserting-a-value-at-the-beginning-on-time-o1-space",level:3},{value:"inserting a value in the middle: O(n) time, O(1)space",id:"inserting-a-value-in-the-middle-on-time-o1space",level:3},{value:"inserting a value at the end:",id:"inserting-a-value-at-the-end",level:3},{value:"removing a value at the beginning: O(n) time, O(1) space",id:"removing-a-value-at-the-beginning-on-time-o1-space",level:3},{value:"removing a value in the middle: O(n) time, O(1) space",id:"removing-a-value-in-the-middle-on-time-o1-space",level:3},{value:"removing a value at the end: O(1) space and time",id:"removing-a-value-at-the-end-o1-space-and-time",level:3},{value:"Static array",id:"static-array",level:2},{value:"Dynamic array",id:"dynamic-array",level:2}],m={toc:u};function d(e){let{components:a,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"array"},"Array"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"linear collection of data values that are accessible at numbered indices, starting at index 0"),(0,i.kt)("li",{parentName:"ul"},"the following are an array's standard operations and their corresponding time complexities")),(0,i.kt)("h3",{id:"initializing-an-array-on-time-and-space"},"initializing an array: O(n) time and space"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"first specify a length N"),(0,i.kt)("li",{parentName:"ul"},"OS would then go to memory and find N multiplied by 8 memory slots (for a 64 bit OS) that are free and are back to back"),(0,i.kt)("li",{parentName:"ul"},"therefore, as N increases, the time it takes to initialize the array will also increase, the space will also increase depending on N")),(0,i.kt)("h3",{id:"traversing-an-array-on-time-and-o1-space"},"traversing an array: O(n) time and O(1) space"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"OS will traverse every memory slot (8 x N for a 64 bit integers)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"number of memory slots to traverse depends on N"),(0,i.kt)("li",{parentName:"ul"},"no additional space is required therefore space complexity is constant")))),(0,i.kt)("h3",{id:"copying-the-array-on-space-and-time"},"copying the array: O(n) space and time"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"OS will traverse the entire array"),(0,i.kt)("li",{parentName:"ul"},"then it will initialize a new array of the same length with the same values")),(0,i.kt)("h3",{id:"accessing-a-value-at-a-given-index-o1-time-and-space"},"accessing a value at a given index: O(1) time and space"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"what happens behind the hood is the Operating System is finding the memory address that starts the array",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"then it checks how many bytes or memory slot does 1 element take up",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"if it is 64 bit, it is 8 bytes"),(0,i.kt)("li",{parentName:"ul"},"the OS would then know that 1 element of an array will take 8 memory slots for a 64 bit OS"))),(0,i.kt)("li",{parentName:"ul"},"then it checks what index you specified and calculate the memory address"))),(0,i.kt)("li",{parentName:"ul"},"no memory is being used during this process therefore space complexity is constant")),(0,i.kt)("h3",{id:"updating-a-value-at-a-given-index-o1-time-and-space"},"updating a value at a given index: O(1) time and space"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"knows where the index is located as it does the same computation as to accessing the array"),(0,i.kt)("li",{parentName:"ul"},"then it swap old binary numbers with the new binary numbers"),(0,i.kt)("li",{parentName:"ul"},"therefore no new additional memory is being used")),(0,i.kt)("h3",{id:"inserting-a-value-at-the-beginning-on-time-o1-space"},"inserting a value at the beginning: O(n) time, O(1) space"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the old array will be copied, and then the OS will look for another memory location that has the new space required",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"this is because the memory slot that is after the end of the old array is not guaranteed to be free, therefore you can't shift or add new memory slots"))),(0,i.kt)("li",{parentName:"ul"},"space is constant because although creating new space is linear, it will also free up the old memory that was taken up by the old array")),(0,i.kt)("h3",{id:"inserting-a-value-in-the-middle-on-time-o1space"},"inserting a value in the middle: O(n) time, O(1)space"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"same concept as inserting a value at the beginning")),(0,i.kt)("h3",{id:"inserting-a-value-at-the-end"},"inserting a value at the end:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"amortized O(1) time, O(1) space when dealing with a dynamic array",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"because dynamic arrays are allocated almost double the memory size of what is actually required, adding new values to the end of the array only requires appending"),(0,i.kt)("li",{parentName:"ul"},"only when the array memory has been filled up, would the array be copied and given double the memory slots that is newly required",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"during this case, time complexity becomes O(n)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"however this can usually be ignored unless interviewer wants you to consider all cases"))))))),(0,i.kt)("li",{parentName:"ul"},"O(n) time, O(1) space when dealing with a static array",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"same concept as inserting a value at the beginning")))),(0,i.kt)("h3",{id:"removing-a-value-at-the-beginning-on-time-o1-space"},"removing a value at the beginning: O(n) time, O(1) space"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"time complexity is linear because you have to shift all of the affected elements"),(0,i.kt)("li",{parentName:"ul"},"space is constant because no additional space is being created")),(0,i.kt)("h3",{id:"removing-a-value-in-the-middle-on-time-o1-space"},"removing a value in the middle: O(n) time, O(1) space"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"similar to removing a value at the beginning")),(0,i.kt)("h3",{id:"removing-a-value-at-the-end-o1-space-and-time"},"removing a value at the end: O(1) space and time"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the only thing done is freeing up the space of the last element")),(0,i.kt)("h2",{id:"static-array"},"Static array"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"is an implementation of an array that allocates a fixed amount of memory to be used for storing the array's values",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"appending values to the array involves copying the entire array and allocating new memory for it, accounting for the extra space needed for the newly appended value"),(0,i.kt)("li",{parentName:"ul"},"this is linear-time operation")))),(0,i.kt)("h2",{id:"dynamic-array"},"Dynamic array"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"is an implementation of an array that preemptively allocates double the amount of memory needed to store the array's values",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"appending values to the array is a constant-time operation until the allocated memory is filled up",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the array is copied and double the memory is once again allocated for it"))),(0,i.kt)("li",{parentName:"ul"},"this implementation leads to an amortized constant-time insertion-at-end operation"))),(0,i.kt)("li",{parentName:"ul"},"a lot of popular programming languages like JavaScript and Python implements arrays as dynamic arrays"),(0,i.kt)("li",{parentName:"ul"},"in C++ and Java, dynamic arrays are respectively referred to as Vectors and ArrayLists")))}d.isMDXComponent=!0}}]);