"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[2086],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),b=o,h=d["".concat(i,".").concat(b)]||d[b]||p[b]||a;return n?r.createElement(h,c(c({ref:t},u),{},{components:n})):r.createElement(h,c({ref:t},u))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2118:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(83117),o=(n(67294),n(3905));const a={},c="C++ Example",s={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Proxy/cPlusPlus/readme",id:"interviewPrep/designPatterns/Structural_patterns/Proxy/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Proxy/cPlusPlus",slug:"/interviewPrep/designPatterns/Structural_patterns/Proxy/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Proxy",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/cSharp/"}},i={},l=[],u={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"c-example"},"C++ Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n/**\n * Proxy Design Pattern\n *\n * Intent: Provide a surrogate or placeholder for another object to control\n * access to the original object or to add other responsibilities.\n */\n/**\n * The Subject interface declares common operations for both RealSubject and the\n * Proxy. As long as the client works with RealSubject using this interface,\n * you\'ll be able to pass it a proxy instead of a real subject.\n */\nclass Subject {\n public:\n  virtual void Request() const = 0;\n};\n/**\n * The RealSubject contains some core business logic. Usually, RealSubjects are\n * capable of doing some useful work which may also be very slow or sensitive -\n * e.g. correcting input data. A Proxy can solve these issues without any\n * changes to the RealSubject\'s code.\n */\nclass RealSubject : public Subject {\n public:\n  void Request() const override {\n    std::cout << "RealSubject: Handling request.\\n";\n  }\n};\n/**\n * The Proxy has an interface identical to the RealSubject.\n */\nclass Proxy : public Subject {\n  /**\n   * @var RealSubject\n   */\n private:\n  RealSubject *real_subject_;\n\n  bool CheckAccess() const {\n    // Some real checks should go here.\n    std::cout << "Proxy: Checking access prior to firing a real request.\\n";\n    return true;\n  }\n  void LogAccess() const {\n    std::cout << "Proxy: Logging the time of request.\\n";\n  }\n\n  /**\n   * The Proxy maintains a reference to an object of the RealSubject class. It\n   * can be either lazy-loaded or passed to the Proxy by the client.\n   */\n public:\n  Proxy(RealSubject *real_subject) : real_subject_(new RealSubject(*real_subject)) {\n  }\n\n  ~Proxy() {\n    delete real_subject_;\n  }\n  /**\n   * The most common applications of the Proxy pattern are lazy loading,\n   * caching, controlling the access, logging, etc. A Proxy can perform one of\n   * these things and then, depending on the result, pass the execution to the\n   * same method in a linked RealSubject object.\n   */\n  void Request() const override {\n    if (this->CheckAccess()) {\n      this->real_subject_->Request();\n      this->LogAccess();\n    }\n  }\n};\n/**\n * The client code is supposed to work with all objects (both subjects and\n * proxies) via the Subject interface in order to support both real subjects and\n * proxies. In real life, however, clients mostly work with their real subjects\n * directly. In this case, to implement the pattern more easily, you can extend\n * your proxy from the real subject\'s class.\n */\nvoid ClientCode(const Subject &subject) {\n  // ...\n  subject.Request();\n  // ...\n}\n\nint main() {\n  std::cout << "Client: Executing the client code with a real subject:\\n";\n  RealSubject *real_subject = new RealSubject;\n  ClientCode(*real_subject);\n  std::cout << "\\n";\n  std::cout << "Client: Executing the same client code with a proxy:\\n";\n  Proxy *proxy = new Proxy(real_subject);\n  ClientCode(*proxy);\n\n  delete real_subject;\n  delete proxy;\n  return 0;\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Client: Executing the client code with a real subject:\nRealSubject: Handling request.\n\nClient: Executing the same client code with a proxy:\nProxy: Checking access prior to firing a real request.\nRealSubject: Handling request.\nProxy: Logging the time of request.\n")))}p.isMDXComponent=!0}}]);