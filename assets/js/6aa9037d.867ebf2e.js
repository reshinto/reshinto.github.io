"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[4592],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),h=o,v=p["".concat(s,".").concat(h)]||p[h]||d[h]||i;return t?r.createElement(v,a(a({ref:n},c),{},{components:t})):r.createElement(v,a({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5075:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=t(83117),o=(t(67294),t(3905));const i={},a="Insert Value Into Binary Search Tree",l={unversionedId:"interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/insertValueIntoBST",id:"interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/insertValueIntoBST",title:"Insert Value Into Binary Search Tree",description:"- supporting code",source:"@site/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/insertValueIntoBST.md",sourceDirName:"interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms",slug:"/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/insertValueIntoBST",permalink:"/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/insertValueIntoBST",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/insertValueIntoBST.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Binary Search",permalink:"/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/binarySearch"},next:{title:"Merge Sort",permalink:"/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/mergeSort"}},s={},u=[{value:"Iterative solution",id:"iterative-solution",level:2}],c={toc:u};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"insert-value-into-binary-search-tree"},"Insert Value Into Binary Search Tree"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"input: 108\n\noriginal BST:\n  100\n    120\n  110  140\n    115  150\n\nnew BST:\n  100\n       120\n   110    140\n 108 115    150\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"function insertNode(head, value) {\n  if (!head) {  // create and append new node with value\n    return new Node(value);\n  }\n  // if current value is larger than current tree node value, move to the right child\n  if (head.value < value) {\n    head.right = insertNode(head.right, value):\n  } else { // if current value is smaller than current tree node value, move to the left child\n    head.left = insertNode(head.left, value);\n  }\n  return head;\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"supporting code"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'class Node {\n  constructor(value) {\n    this.value = value;\n    this.right = null;\n    this.left = null;\n  }\n}\n\nfunction printLeaves(root) {\n  if (!root) {\n    console.log("null");\n  }\n\n  if (!root.left && !root.right) {\n    console.log(root.value);\n  }\n\n  if (root.left) {\n    printLeaves(root.left);\n  }\n  if (root.right) {\n    printLeaves(root.right);\n  }\n}\n')))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"input: 108\n\n  100\n    120\n  110  140\n    115  150\n\n|----------------------|\n| insertNode(100, 108) |\n|----------------------|\n\nsince 108 is more than 100\nmove 108 to bottom right leaf node\nand add insertNode with next node 120 to the stack\n|----------------------|\n| insertNode(120, 108) |\n| insertNode(100, 108) |\n|----------------------|\n\nsince 108 is less than 120\nmove 108 to bottom left leaf node\nand add insertNode with next node 110 to the stack\n|----------------------|\n| insertNode(110, 108) |\n| insertNode(120, 108) |\n| insertNode(100, 108) |\n|----------------------|\n\nsince 108 is less than 110\nmove 108 to bottom left leaf node\nand add insertNode with next node null to the stack\n|-----------------------|\n| insertNode(null, 108) |\n| insertNode(110, 108)  |\n| insertNode(120, 108)  |\n| insertNode(100, 108)  |\n|-----------------------|\n\nsince current node is null\ncreate a new node and set value as 108 and connects it to 110\n|-----------------------|\n| 108                   |\n| insertNode(110, 108)  |\n| insertNode(120, 108)  |\n| insertNode(100, 108)  |\n|-----------------------|\n\nreturn 110 and connect it to 120\n|-----------------------|\n| 110                   |\n| insertNode(120, 108)  |\n| insertNode(100, 108)  |\n|-----------------------|\n\nreturn 120 and connect it to 100\n|-----------------------|\n| 120                   |\n| insertNode(100, 108)  |\n|-----------------------|\n\nreturn 100\n|-----------------------|\n| 100                   |\n|-----------------------|\n\n  100\n       120\n   110    140\n 108 115    150\n")),(0,o.kt)("h2",{id:"iterative-solution"},"Iterative solution"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"function insertNode(head, value) {\n  const newNode = new Node(value);\n  if (!head) {\n    return newNode;\n  }\n  let currentNode = head;\n  while (currentNode) {\n    if (currentNode.value < value) {\n      if (!currentNode.right) {\n        currentNode.right = newNode;\n        break;\n      }\n      currentNode = currentNode.right;\n    } else {\n      if (!currentNode.left) {\n        currentNode.left = newNode;\n        break;\n      }\n      currentNode = currentNode.left;\n    }\n  }\n  return head;\n}\n")))}d.isMDXComponent=!0}}]);