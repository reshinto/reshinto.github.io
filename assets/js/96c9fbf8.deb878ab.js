"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[536],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(a),h=r,k=c["".concat(s,".").concat(h)]||c[h]||u[h]||o;return a?n.createElement(k,i(i({ref:t},m),{},{components:a})):n.createElement(k,i({ref:t},m))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},42908:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={},i="Network Protocols",l={unversionedId:"interviewPrep/system_design/04NetworkProtocols/readme",id:"interviewPrep/system_design/04NetworkProtocols/readme",title:"Network Protocols",description:"- IP packets, TCP headers, HTTP requests",source:"@site/docs/interviewPrep/system_design/04NetworkProtocols/readme.md",sourceDirName:"interviewPrep/system_design/04NetworkProtocols",slug:"/interviewPrep/system_design/04NetworkProtocols/",permalink:"/docs/interviewPrep/system_design/04NetworkProtocols/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/system_design/04NetworkProtocols/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Client-Server Model",permalink:"/docs/interviewPrep/system_design/03Client-ServerModel/"},next:{title:"TCP (Transmission Control Protocol) vs UDP (User Datagram Protocol)",permalink:"/docs/interviewPrep/system_design/04NetworkProtocols/TCPvsUDP"}},s={},p=[{value:"Protocol",id:"protocol",level:2},{value:"Key Terms",id:"key-terms",level:2},{value:"IP",id:"ip",level:3},{value:"TCP",id:"tcp",level:3},{value:"HTTP",id:"http",level:3},{value:"IP Packet",id:"ip-packet",level:3}],m={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"network-protocols"},"Network Protocols"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"IP packets, TCP headers, HTTP requests"),(0,r.kt)("li",{parentName:"ul"},"these low-level networking concepts are essential to understanding how machines in a system communicate with one another"),(0,r.kt)("li",{parentName:"ul"},"it will consists of messages that are gonna be sent and received by machines, clients, and servers over the network",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it contains",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the type of messages"),(0,r.kt)("li",{parentName:"ul"},"the format of the messages"),(0,r.kt)("li",{parentName:"ul"},"how they are structured"),(0,r.kt)("li",{parentName:"ul"},"the order of those messages if they have an order"),(0,r.kt)("li",{parentName:"ul"},"whether or not they should be some sort of response to a message if there should be"),(0,r.kt)("li",{parentName:"ul"},"what that response should look like"),(0,r.kt)("li",{parentName:"ul"},"whether or not there should be rules around when messages can be sent to one another")))))),(0,r.kt)("h2",{id:"protocol"},"Protocol"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it is an agreed upon set of rules for an interaction between 2 parties"),(0,r.kt)("li",{parentName:"ul"},"analogy example",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"when 2 people who vaguely know each other cross each other while walking down a hallway",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"typically, they will have some kind of exchange",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"chat with one another with small talk then say bye")))))))),(0,r.kt)("h2",{id:"key-terms"},"Key Terms"),(0,r.kt)("h3",{id:"ip"},"IP"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"stands for Internet Protocol"),(0,r.kt)("li",{parentName:"ul"},"the modern internet effectively runs on IP",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"meaning that when a machine or a client tries to interact with another machine or a server and it sends data to that other machine",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"that data is going to be sent in the form of IP Packet"))))),(0,r.kt)("li",{parentName:"ul"},"this network protocol outlines how almost all machine-to-machine communications should happen in the world"),(0,r.kt)("li",{parentName:"ul"},"other protocols like TCP, UDP and HTTP are built on top of IP"),(0,r.kt)("li",{parentName:"ul"},"IP has 2 versions",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"IPv4: most of the modern day internet uses"),(0,r.kt)("li",{parentName:"ul"},"IPv6: now being used more and more")))),(0,r.kt)("h3",{id:"tcp"},"TCP"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"stands for Transimission Control Protocol"),(0,r.kt)("li",{parentName:"ul"},"built on top of the Internet Protocol (IP)"),(0,r.kt)("li",{parentName:"ul"},"allows for ordered, reliable data delivery between machines over the public internet by creating a connection"),(0,r.kt)("li",{parentName:"ul"},"TCP is usually implemented in the kernel, which exposes sockets to applications that they can use to stream data through an open connection"),(0,r.kt)("li",{parentName:"ul"},"it is meant to send IP Packets in an ordered way, and in a reliable way guaranteeing that the IP Packets sent will be received by the destination",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"you will know if some packets keep failing from getting received and in the error free way",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this means that if the data sent was corrupted, you will know and will be able to resend those packets"))))),(0,r.kt)("li",{parentName:"ul"},"TCP is used in virtually all web applications and allows you to send arbitrarily long pieces of data to other machines"),(0,r.kt)("li",{parentName:"ul"},"TCP example",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"when a machine wants to communicate with another machine over TCP",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"when your browser wants to communicate with a website's servers",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"1st it will create a TCP connection with the destination computer / server through a handshake",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"handshake:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"is a special TCP interaction where 1 computer contacts the other by sending a packet or a few packets stating that it wants to connect with the other computer, the other computer will response and say ok"),(0,r.kt)("li",{parentName:"ul"},"the client that was trying to establish the connection will reresponds again and say that the the 2 computers are connected and there is an open connection"))))),(0,r.kt)("li",{parentName:"ul"},"once the connection is established, both machines can freely send data to one another",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"however, if one of the 2 machines doesn't send data in a given amount of period, the connection can be timed out"),(0,r.kt)("li",{parentName:"ul"},"if one of the machines wants to end the connection, it can do so be sending a special message to the other machine know about the ending of the connection"))))))))),(0,r.kt)("li",{parentName:"ul"},"summary: it is a more powerful and more functional wrapper around IP, but still lacks a robust framework that developers can use to ready define meaningful and easy to use communication channels for clients and servers in the system",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"HTTP solves this issue")))),(0,r.kt)("h3",{id:"http"},"HTTP"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the HyperText Transfer Protocol is a very common network protocol implemented on top of TCP"),(0,r.kt)("li",{parentName:"ul"},"follows the request response paradigm"),(0,r.kt)("li",{parentName:"ul"},"clients make HTTP requests, and servers respond with a response"),(0,r.kt)("li",{parentName:"ul"},"requests typically have the following schema",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'host: string (example: algoexpert.io)\nport: integer (example: 80 or 443)\nmethod: string (example: GET, PUT, POST, DELETE, OPTIONS or PATCH)\npath: string (example: /payments)\nheaders: pair list (example: "Content-Type" => "application/json")\nbody: opaque sequence of bytes\n')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"path: servers might have multiple paths for different services",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"clients will issue requests to these various paths",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"depending on the path, different business logic will occur"))))),(0,r.kt)("li",{parentName:"ul"},"headers: contain important meta-data about the request"))),(0,r.kt)("li",{parentName:"ul"},"responses typically have the following schema",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'status code: integer (example: 200, 401)\nheaders: pair list (example: "Content-Length" => 1238)\nbody: opaque sequence of bytes\n')))),(0,r.kt)("h3",{id:"ip-packet"},"IP Packet"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it is made up (stored in) of bytes"),(0,r.kt)("li",{parentName:"ul"},"sometimes more broadly referred to as just a (network) packet"),(0,r.kt)("li",{parentName:"ul"},"an IP Packet is effectively the smallest unit used to describe data being sent over IP from 1 machine to another"),(0,r.kt)("li",{parentName:"ul"},"asides from bytes, an IP Packet consists of 2 main sections:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"an IP header:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"contains the source and destination IP addresses as well as other information related to the network"),(0,r.kt)("li",{parentName:"ul"},"the total size of the packet"),(0,r.kt)("li",{parentName:"ul"},"the version of the IP packet is operating by"),(0,r.kt)("li",{parentName:"ul"},"header size is between 20 to 60 bytes"))),(0,r.kt)("li",{parentName:"ul"},"a payload: is just the data being sent over the network",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"contains a TCP header",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"contains the information about the ordering of packets"))),(0,r.kt)("li",{parentName:"ul"},"the rest will be the actual data portion"))))),(0,r.kt)("li",{parentName:"ul"},"IP Packet are limited in size",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"are only 2^16 bytes (65,536 bytes)"),(0,r.kt)("li",{parentName:"ul"},"only way to send more data is to use multiple IP Packets",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if multiple IP Packets are being sent from one machine to another and is only using IP",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"there is no way of guaranteeing that these packets are gonna be received",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"some of the packets might get lost over the network"))),(0,r.kt)("li",{parentName:"ul"},"there is no guarantee in the order in which those packets will be read or interpreted"))),(0,r.kt)("li",{parentName:"ul"},"TCP is required to solve this issue")))))))}u.isMDXComponent=!0}}]);