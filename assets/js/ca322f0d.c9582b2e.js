"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[43674],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=c(t),h=r,g=u["".concat(l,".").concat(h)]||u[h]||d[h]||i;return t?a.createElement(g,p(p({ref:n},s),{},{components:t})):a.createElement(g,p({ref:n},s))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,p=new Array(i);p[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,p[1]=o;for(var c=2;c<i;c++)p[c]=t[c];return a.createElement.apply(null,p)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},762:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=t(83117),r=(t(67294),t(3905));const i={},p="Java Example",o={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Composite/java/readme",id:"interviewPrep/designPatterns/Structural_patterns/Composite/java/readme",title:"Java Example",description:"- editor",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Composite/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Composite/java",slug:"/interviewPrep/designPatterns/Structural_patterns/Composite/java/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Composite/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Composite/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Composite/go/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Composite/javascript/"}},l={},c=[],s={toc:c};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"java-example"},"Java Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"editor"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"editor/ImageEditor.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.composite.example.editor;\n\nimport refactoring_guru.composite.example.shapes.CompoundShape;\nimport refactoring_guru.composite.example.shapes.Shape;\n\nimport javax.swing.*;\nimport javax.swing.border.Border;\nimport java.awt.*;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\n\npublic class ImageEditor {\n    private EditorCanvas canvas;\n    private CompoundShape allShapes = new CompoundShape();\n\n    public ImageEditor() {\n        canvas = new EditorCanvas();\n    }\n\n    public void loadShapes(Shape... shapes) {\n        allShapes.clear();\n        allShapes.add(shapes);\n        canvas.refresh();\n    }\n\n    private class EditorCanvas extends Canvas {\n        JFrame frame;\n\n        private static final int PADDING = 10;\n\n        EditorCanvas() {\n            createFrame();\n            refresh();\n            addMouseListener(new MouseAdapter() {\n                @Override\n                public void mousePressed(MouseEvent e) {\n                    allShapes.unSelect();\n                    allShapes.selectChildAt(e.getX(), e.getY());\n                    e.getComponent().repaint();\n                }\n            });\n        }\n\n        void createFrame() {\n            frame = new JFrame();\n            frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n            frame.setLocationRelativeTo(null);\n\n            JPanel contentPanel = new JPanel();\n            Border padding = BorderFactory.createEmptyBorder(PADDING, PADDING, PADDING, PADDING);\n            contentPanel.setBorder(padding);\n            frame.setContentPane(contentPanel);\n\n            frame.add(this);\n            frame.setVisible(true);\n            frame.getContentPane().setBackground(Color.LIGHT_GRAY);\n        }\n\n        public int getWidth() {\n            return allShapes.getX() + allShapes.getWidth() + PADDING;\n        }\n\n        public int getHeight() {\n            return allShapes.getY() + allShapes.getHeight() + PADDING;\n        }\n\n        void refresh() {\n            this.setSize(getWidth(), getHeight());\n            frame.pack();\n        }\n\n        public void paint(Graphics graphics) {\n            allShapes.paint(graphics);\n        }\n    }\n}\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/BaseShape.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.composite.example.shapes;\n\nimport java.awt.*;\n\nabstract class BaseShape implements Shape {\n    public int x;\n    public int y;\n    public Color color;\n    private boolean selected = false;\n\n    BaseShape(int x, int y, Color color) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n    }\n\n    @Override\n    public int getX() {\n        return x;\n    }\n\n    @Override\n    public int getY() {\n        return y;\n    }\n\n    @Override\n    public int getWidth() {\n        return 0;\n    }\n\n    @Override\n    public int getHeight() {\n        return 0;\n    }\n\n    @Override\n    public void move(int x, int y) {\n        this.x += x;\n        this.y += y;\n    }\n\n    @Override\n    public boolean isInsideBounds(int x, int y) {\n        return x > getX() && x < (getX() + getWidth()) &&\n                y > getY() && y < (getY() + getHeight());\n    }\n\n    @Override\n    public void select() {\n        selected = true;\n    }\n\n    @Override\n    public void unSelect() {\n        selected = false;\n    }\n\n    @Override\n    public boolean isSelected() {\n        return selected;\n    }\n\n    void enableSelectionStyle(Graphics graphics) {\n        graphics.setColor(Color.LIGHT_GRAY);\n\n        Graphics2D g2 = (Graphics2D) graphics;\n        float dash1[] = {2.0f};\n        g2.setStroke(new BasicStroke(1.0f,\n                BasicStroke.CAP_BUTT,\n                BasicStroke.JOIN_MITER,\n                2.0f, dash1, 0.0f));\n    }\n\n    void disableSelectionStyle(Graphics graphics) {\n        graphics.setColor(color);\n        Graphics2D g2 = (Graphics2D) graphics;\n        g2.setStroke(new BasicStroke());\n    }\n")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    @Override\n    public void paint(Graphics graphics) {\n        if (isSelected()) {\n            enableSelectionStyle(graphics);\n        }\n        else {\n            disableSelectionStyle(graphics);\n        }\n\n        // ...\n    }\n}\n```\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/Circle.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.composite.example.shapes;\n\nimport java.awt.*;\n\npublic class Circle extends BaseShape {\n    public int radius;\n\n    public Circle(int x, int y, int radius, Color color) {\n        super(x, y, color);\n        this.radius = radius;\n    }\n\n    @Override\n    public int getWidth() {\n        return radius * 2;\n    }\n\n    @Override\n    public int getHeight() {\n        return radius * 2;\n    }\n\n    public void paint(Graphics graphics) {\n        super.paint(graphics);\n        graphics.drawOval(x, y, getWidth() - 1, getHeight() - 1);\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/CompoundShape.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.composite.example.shapes;\n\nimport java.awt.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class CompoundShape extends BaseShape {\n    protected List<Shape> children = new ArrayList<>();\n\n    public CompoundShape(Shape... components) {\n        super(0, 0, Color.BLACK);\n        add(components);\n    }\n\n    public void add(Shape component) {\n        children.add(component);\n    }\n\n    public void add(Shape... components) {\n        children.addAll(Arrays.asList(components));\n    }\n\n    public void remove(Shape child) {\n        children.remove(child);\n    }\n\n    public void remove(Shape... components) {\n        children.removeAll(Arrays.asList(components));\n    }\n\n    public void clear() {\n        children.clear();\n    }\n\n    @Override\n    public int getX() {\n        if (children.size() == 0) {\n            return 0;\n        }\n        int x = children.get(0).getX();\n        for (Shape child : children) {\n            if (child.getX() < x) {\n                x = child.getX();\n            }\n        }\n        return x;\n    }\n\n    @Override\n    public int getY() {\n        if (children.size() == 0) {\n            return 0;\n        }\n        int y = children.get(0).getY();\n        for (Shape child : children) {\n            if (child.getY() < y) {\n                y = child.getY();\n            }\n        }\n        return y;\n    }\n\n    @Override\n    public int getWidth() {\n        int maxWidth = 0;\n        int x = getX();\n        for (Shape child : children) {\n            int childsRelativeX = child.getX() - x;\n            int childWidth = childsRelativeX + child.getWidth();\n            if (childWidth > maxWidth) {\n                maxWidth = childWidth;\n            }\n        }\n        return maxWidth;\n    }\n\n    @Override\n    public int getHeight() {\n        int maxHeight = 0;\n        int y = getY();\n        for (Shape child : children) {\n            int childsRelativeY = child.getY() - y;\n            int childHeight = childsRelativeY + child.getHeight();\n            if (childHeight > maxHeight) {\n                maxHeight = childHeight;\n            }\n        }\n        return maxHeight;\n    }\n\n    @Override\n    public void move(int x, int y) {\n        for (Shape child : children) {\n            child.move(x, y);\n        }\n    }\n\n    @Override\n    public boolean isInsideBounds(int x, int y) {\n        for (Shape child : children) {\n            if (child.isInsideBounds(x, y)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public void unSelect() {\n        super.unSelect();\n        for (Shape child : children) {\n            child.unSelect();\n        }\n    }\n\n    public boolean selectChildAt(int x, int y) {\n        for (Shape child : children) {\n            if (child.isInsideBounds(x, y)) {\n                child.select();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public void paint(Graphics graphics) {\n        if (isSelected()) {\n            enableSelectionStyle(graphics);\n            graphics.drawRect(getX() - 1, getY() - 1, getWidth() + 1, getHeight() + 1);\n            disableSelectionStyle(graphics);\n        }\n\n        for (refactoring_guru.composite.example.shapes.Shape child : children) {\n            child.paint(graphics);\n        }\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/Dot.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.composite.example.shapes;\n\nimport java.awt.*;\n\npublic class Dot extends BaseShape {\n    private final int DOT_SIZE = 3;\n\n    public Dot(int x, int y, Color color) {\n        super(x, y, color);\n    }\n\n    @Override\n    public int getWidth() {\n        return DOT_SIZE;\n    }\n\n    @Override\n    public int getHeight() {\n        return DOT_SIZE;\n    }\n\n    @Override\n    public void paint(Graphics graphics) {\n        super.paint(graphics);\n        graphics.fillRect(x - 1, y - 1, getWidth(), getHeight());\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/Rectangle.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.composite.example.shapes;\n\nimport java.awt.*;\n\npublic class Rectangle extends BaseShape {\n    public int width;\n    public int height;\n\n    public Rectangle(int x, int y, int width, int height, Color color) {\n        super(x, y, color);\n        this.width = width;\n        this.height = height;\n    }\n\n    @Override\n    public int getWidth() {\n        return width;\n    }\n\n    @Override\n    public int getHeight() {\n        return height;\n    }\n\n    @Override\n    public void paint(Graphics graphics) {\n        super.paint(graphics);\n        graphics.drawRect(x, y, getWidth() - 1, getHeight() - 1);\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/Shape.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.composite.example.shapes;\n\nimport java.awt.*;\n\npublic interface Shape {\n    int getX();\n    int getY();\n    int getWidth();\n    int getHeight();\n    void move(int x, int y);\n    boolean isInsideBounds(int x, int y);\n    void select();\n    void unSelect();\n    boolean isSelected();\n    void paint(Graphics graphics);\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Demo.java"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.composite.example;\n\nimport refactoring_guru.composite.example.editor.ImageEditor;\nimport refactoring_guru.composite.example.shapes.Circle;\nimport refactoring_guru.composite.example.shapes.CompoundShape;\nimport refactoring_guru.composite.example.shapes.Dot;\nimport refactoring_guru.composite.example.shapes.Rectangle;\n\nimport java.awt.*;\n\npublic class Demo {\n    public static void main(String[] args) {\n        ImageEditor editor = new ImageEditor();\n\n        editor.loadShapes(\n                new Circle(10, 10, 10, Color.BLUE),\n\n                new CompoundShape(\n                    new Circle(110, 110, 50, Color.RED),\n                    new Dot(160, 160, Color.RED)\n                ),\n\n                new CompoundShape(\n                        new Rectangle(250, 250, 100, 100, Color.GREEN),\n                        new Dot(240, 240, Color.GREEN),\n                        new Dot(240, 360, Color.GREEN),\n                        new Dot(360, 360, Color.GREEN),\n                        new Dot(360, 240, Color.GREEN)\n                )\n        );\n    }\n}\n")))}d.isMDXComponent=!0}}]);