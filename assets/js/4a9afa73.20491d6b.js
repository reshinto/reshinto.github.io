"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[60500],{3905:(e,t,i)=>{i.d(t,{Zo:()=>l,kt:()=>d});var n=i(67294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var u=n.createContext({}),m=function(e){var t=n.useContext(u),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},l=function(e){var t=m(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=m(i),d=r,f=p["".concat(u,".").concat(d)]||p[d]||c[d]||o;return i?n.createElement(f,a(a({ref:t},l),{},{components:i})):n.createElement(f,a({ref:t},l))}));function d(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var m=2;m<o;m++)a[m]=i[m];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}p.displayName="MDXCreateElement"},35531:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var n=i(83117),r=(i(67294),i(3905));const o={},a="Minimum Waiting Time",s={unversionedId:"interviewPrep/codingTests/easy/greedyAlgorithms/minimumWaitingTime",id:"interviewPrep/codingTests/easy/greedyAlgorithms/minimumWaitingTime",title:"Minimum Waiting Time",description:"You're given a non-empty array of positive integers representing the amounts",source:"@site/docs/interviewPrep/codingTests/easy/greedyAlgorithms/minimumWaitingTime.md",sourceDirName:"interviewPrep/codingTests/easy/greedyAlgorithms",slug:"/interviewPrep/codingTests/easy/greedyAlgorithms/minimumWaitingTime",permalink:"/docs/interviewPrep/codingTests/easy/greedyAlgorithms/minimumWaitingTime",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/codingTests/easy/greedyAlgorithms/minimumWaitingTime.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Class Photos",permalink:"/docs/interviewPrep/codingTests/easy/greedyAlgorithms/classPhotos"},next:{title:"Remove Duplicates From Linked List",permalink:"/docs/interviewPrep/codingTests/easy/linkedLists/removeDuplicatesFromLinkedList"}},u={},m=[],l={toc:m};function c(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"minimum-waiting-time"},"Minimum Waiting Time"),(0,r.kt)("p",null,"You're given a non-empty array of positive integers representing the amounts\nof time that specific queries take to execute. Only one query can be executed\nat a time, but the queries can be executed in any order."),(0,r.kt)("p",null,"A query's waiting time is defined as the amount of time that it must\nwait before its execution starts. In other words, if a query is executed\nsecond, then its waiting time is the duration of the first query; if a query\nis executed third, then its waiting time is the sum of the durations of the\nfirst two queries."),(0,r.kt)("p",null,"Write a function that returns the minimum amount of total waiting time for all\nof the queries. For example, if you're given the queries of durations\n",(0,r.kt)("inlineCode",{parentName:"p"},"[1, 4, 5]"),", then the total waiting time if the queries were\nexecuted in the order of ",(0,r.kt)("inlineCode",{parentName:"p"},"[5, 1, 4]"),"\nwould be\n",(0,r.kt)("inlineCode",{parentName:"p"},"(0) + (5) + (5 + 1) = 11"),". The first query of duration\n5 would be executed immediately, so its waiting time would be\n0, the second query of duration 1 would have to wait\n5 seconds (the duration of the first query) to be executed, and\nthe last query would have to wait the duration of the first two queries before\nbeing executed."),(0,r.kt)("p",null,"Note: you're allowed to mutate the input array."),(0,r.kt)("p",null,"Sample Input\n",(0,r.kt)("inlineCode",{parentName:"p"},"queries = [3, 2, 1, 2, 6]")),(0,r.kt)("p",null,"Sample Output\n17"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# solution 1\ndef minimumWaitingTime(queries):\n  # Write your code here.\n  queries.sort()\n  totalTime = 0\n  tempTime = 0\n  for i in range(len(queries) - 1):\n    tempTime += queries[i]\n    totalTime += tempTime\n  return totalTime\n\n\n# solution 2\ndef minimumWaitingTime(queries):\n  # Write your code here.\n  queries.sort()\n  totalTime = 0\n  for i,v in enumerate(queries):\n    totalTime += (len(queries) - (i+1)) * v\n  return totalTime\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function minimumWaitingTime(queries) {\n  // Write your code here.\n  queries.sort((a, b) => a - b);\n  let totalTime = 0;\n  for (let i = 0; i < queries.length; i++) {\n    totalTime += queries[i] * (queries.length - (i + 1));\n  }\n  return totalTime;\n}\n")))}c.isMDXComponent=!0}}]);