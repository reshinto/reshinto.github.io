"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[2005],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=o.createContext({}),p=function(e){var t=o.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(a.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),h=p(n),u=r,C=h["".concat(a,".").concat(u)]||h[u]||m[u]||i;return n?o.createElement(C,s(s({ref:t},l),{},{components:n})):o.createElement(C,s({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=h;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var p=2;p<i;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},34225:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const i={},s="C# Example",c={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/cSharp/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/cSharp",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Visitor/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/go/"}},a={},p=[],l={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"c-example"},"C# Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// Visitor Design Pattern\n//\n// Intent: Lets you separate algorithms from the objects on which they operate.\n\nusing System;\nusing System.Collections.Generic;\n\nnamespace RefactoringGuru.DesignPatterns.Visitor.Conceptual\n{\n    // The Component interface declares an `accept` method that should take the\n    // base visitor interface as an argument.\n    public interface IComponent\n    {\n        void Accept(IVisitor visitor);\n    }\n\n    // Each Concrete Component must implement the `Accept` method in such a way\n    // that it calls the visitor\'s method corresponding to the component\'s\n    // class.\n    public class ConcreteComponentA : IComponent\n    {\n        // Note that we\'re calling `VisitConcreteComponentA`, which matches the\n        // current class name. This way we let the visitor know the class of the\n        // component it works with.\n        public void Accept(IVisitor visitor)\n        {\n            visitor.VisitConcreteComponentA(this);\n        }\n\n        // Concrete Components may have special methods that don\'t exist in\n        // their base class or interface. The Visitor is still able to use these\n        // methods since it\'s aware of the component\'s concrete class.\n        public string ExclusiveMethodOfConcreteComponentA()\n        {\n            return "A";\n        }\n    }\n\n    public class ConcreteComponentB : IComponent\n    {\n        // Same here: VisitConcreteComponentB => ConcreteComponentB\n        public void Accept(IVisitor visitor)\n        {\n            visitor.VisitConcreteComponentB(this);\n        }\n\n        public string SpecialMethodOfConcreteComponentB()\n        {\n            return "B";\n        }\n    }\n\n    // The Visitor Interface declares a set of visiting methods that correspond\n    // to component classes. The signature of a visiting method allows the\n    // visitor to identify the exact class of the component that it\'s dealing\n    // with.\n    public interface IVisitor\n    {\n        void VisitConcreteComponentA(ConcreteComponentA element);\n\n        void VisitConcreteComponentB(ConcreteComponentB element);\n    }\n\n    // Concrete Visitors implement several versions of the same algorithm, which\n    // can work with all concrete component classes.\n    //\n    // You can experience the biggest benefit of the Visitor pattern when using\n    // it with a complex object structure, such as a Composite tree. In this\n    // case, it might be helpful to store some intermediate state of the\n    // algorithm while executing visitor\'s methods over various objects of the\n    // structure.\n    class ConcreteVisitor1 : IVisitor\n    {\n        public void VisitConcreteComponentA(ConcreteComponentA element)\n        {\n            Console.WriteLine(element.ExclusiveMethodOfConcreteComponentA() + " + ConcreteVisitor1");\n        }\n\n        public void VisitConcreteComponentB(ConcreteComponentB element)\n        {\n            Console.WriteLine(element.SpecialMethodOfConcreteComponentB() + " + ConcreteVisitor1");\n        }\n    }\n\n    class ConcreteVisitor2 : IVisitor\n    {\n        public void VisitConcreteComponentA(ConcreteComponentA element)\n        {\n            Console.WriteLine(element.ExclusiveMethodOfConcreteComponentA() + " + ConcreteVisitor2");\n        }\n\n        public void VisitConcreteComponentB(ConcreteComponentB element)\n        {\n            Console.WriteLine(element.SpecialMethodOfConcreteComponentB() + " + ConcreteVisitor2");\n        }\n    }\n\n    public class Client\n    {\n        // The client code can run visitor operations over any set of elements\n        // without figuring out their concrete classes. The accept operation\n        // directs a call to the appropriate operation in the visitor object.\n        public static void ClientCode(List<IComponent> components, IVisitor visitor)\n        {\n            foreach (var component in components)\n            {\n                component.Accept(visitor);\n            }\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            List<IComponent> components = new List<IComponent>\n            {\n                new ConcreteComponentA(),\n                new ConcreteComponentB()\n            };\n\n            Console.WriteLine("The client code works with all visitors via the base Visitor interface:");\n            var visitor1 = new ConcreteVisitor1();\n            Client.ClientCode(components,visitor1);\n\n            Console.WriteLine();\n\n            Console.WriteLine("It allows the same client code to work with different types of visitors:");\n            var visitor2 = new ConcreteVisitor2();\n            Client.ClientCode(components, visitor2);\n        }\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"The client code works with all visitors via the base Visitor interface:\nA + ConcreteVisitor1\nB + ConcreteVisitor1\n\nIt allows the same client code to work with different types of visitors:\nA + ConcreteVisitor2\nB + ConcreteVisitor2\n")))}m.isMDXComponent=!0}}]);