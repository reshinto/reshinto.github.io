"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[11809],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),f=l(n),h=r,d=f["".concat(c,".").concat(h)]||f[h]||u[h]||o;return n?a.createElement(d,s(s({ref:t},p),{},{components:n})):a.createElement(d,s({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},51577:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(83117),r=(n(67294),n(3905));const o={},s="Swift Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/State/swift/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/State/swift/readme",title:"Swift Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/State/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/State/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/State/swift/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/State/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/python/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/swift/example2"}},c={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"swift-example"},"Swift Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'/// State Design Pattern\n///\n/// Intent: Lets an object alter its behavior when its internal state changes.\n/// It appears as if the object changed its class.\n\nimport XCTest\n\n/// The Context defines the interface of interest to clients. It also maintains\n/// a reference to an instance of a State subclass, which represents the current\n/// state of the Context.\nclass Context {\n\n    /// A reference to the current state of the Context.\n    private var state: State\n\n    init(_ state: State) {\n        self.state = state\n        transitionTo(state: state)\n    }\n\n    /// The Context allows changing the State object at runtime.\n    func transitionTo(state: State) {\n        print("Context: Transition to " + String(describing: state))\n        self.state = state\n        self.state.update(context: self)\n    }\n\n    /// The Context delegates part of its behavior to the current State object.\n    func request1() {\n        state.handle1()\n    }\n\n    func request2() {\n        state.handle2()\n    }\n}\n\n/// The base State class declares methods that all Concrete State should\n/// implement and also provides a backreference to the Context object,\n/// associated with the State. This backreference can be used by States to\n/// transition the Context to another State.\nprotocol State: class {\n\n    func update(context: Context)\n\n    func handle1()\n    func handle2()\n}\n\nclass BaseState: State {\n\n    private(set) weak var context: Context?\n\n    func update(context: Context) {\n        self.context = context\n    }\n\n    func handle1() {}\n    func handle2() {}\n}\n\n/// Concrete States implement various behaviors, associated with a state of the\n/// Context.\nclass ConcreteStateA: BaseState {\n\n    override func handle1() {\n        print("ConcreteStateA handles request1.")\n        print("ConcreteStateA wants to change the state of the context.\\n")\n        context?.transitionTo(state: ConcreteStateB())\n    }\n\n    override func handle2() {\n        print("ConcreteStateA handles request2.\\n")\n    }\n}\n\nclass ConcreteStateB: BaseState {\n\n    override func handle1() {\n        print("ConcreteStateB handles request1.\\n")\n    }\n\n    override func handle2() {\n        print("ConcreteStateB handles request2.")\n        print("ConcreteStateB wants to change the state of the context.\\n")\n        context?.transitionTo(state: ConcreteStateA())\n    }\n}\n\n/// Let\'s see how it all works together.\nclass StateConceptual: XCTestCase {\n\n    func test() {\n        let context = Context(ConcreteStateA())\n        context.request1()\n        context.request2()\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Context: Transition to StateConceptual.ConcreteStateA\nConcreteStateA handles request1.\nConcreteStateA wants to change the state of the context.\n\nContext: Transition to StateConceptual.ConcreteStateB\nConcreteStateB handles request2.\nConcreteStateB wants to change the state of the context.\n\nContext: Transition to StateConceptual.ConcreteStateA\n")))}u.isMDXComponent=!0}}]);