"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[2407],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),h=p(n),u=r,v=h["".concat(c,".").concat(u)]||h[u]||m[u]||i;return n?o.createElement(v,s(s({ref:t},l),{},{components:n})):o.createElement(v,s({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=h;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var p=2;p<i;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},15032:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var o=n(83117),r=(n(67294),n(3905));const i={},s="JavaScript Example",a={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/javascript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/javascript/readme",title:"JavaScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/javascript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/javascript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Visitor/javascript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/javascript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/javascript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/java/"},next:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/python/"}},c={},p=[],l={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"javascript-example"},"JavaScript Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * The Component interface declares an `accept` method that should take the base\n * visitor interface as an argument.\n */\nclass Component {\n  accept(visitor) {}\n}\n\nmodule.exports = Component;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * The Visitor Interface declares a set of visiting methods that correspond to\n * component classes. The signature of a visiting method allows the visitor to\n * identify the exact class of the component that it's dealing with.\n */\nclass Visitor {\n  visitConcreteComponentA(element) {}\n\n  visitConcreteComponentB(element) {}\n}\n\nmodule.exports = Visitor;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const Component = require(\"./Component\");\n\n/**\n * Each Concrete Component must implement the `accept` method in such a way that\n * it calls the visitor's method corresponding to the component's class.\n */\nclass ConcreteComponentA extends Component {\n  /**\n   * Note that we're calling `visitConcreteComponentA`, which matches the\n   * current class name. This way we let the visitor know the class of the\n   * component it works with.\n   */\n  accept(visitor) {\n    visitor.visitConcreteComponentA(this);\n  }\n\n  /**\n   * Concrete Components may have special methods that don't exist in their\n   * base class or interface. The Visitor is still able to use these methods\n   * since it's aware of the component's concrete class.\n   */\n  exclusiveMethodOfConcreteComponentA() {\n    return \"A\";\n  }\n}\n\nmodule.exports = ConcreteComponentA;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const Component = require("./Component");\n\n/**\n * Each Concrete Component must implement the `accept` method in such a way that\n * it calls the visitor\'s method corresponding to the component\'s class.\n */\nclass ConcreteComponentB extends Component {\n  /**\n   * Same here: visitConcreteComponentB => ConcreteComponentB\n   */\n  accept(visitor) {\n    visitor.visitConcreteComponentB(this);\n  }\n\n  specialMethodOfConcreteComponentB() {\n    return "B";\n  }\n}\n\nmodule.exports = ConcreteComponentB;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const Visitor = require("./Visitor");\n\n/**\n * Concrete Visitors implement several versions of the same algorithm, which can\n * work with all concrete component classes.\n *\n * You can experience the biggest benefit of the Visitor pattern when using it\n * with a complex object structure, such as a Composite tree. In this case, it\n * might be helpful to store some intermediate state of the algorithm while\n * executing visitor\'s methods over various objects of the structure.\n */\nclass ConcreteVisitor1 extends Visitor {\n  visitConcreteComponentA(element) {\n    console.log(\n      `${element.exclusiveMethodOfConcreteComponentA()} + ConcreteVisitor1`\n    );\n  }\n\n  visitConcreteComponentB(element) {\n    console.log(\n      `${element.specialMethodOfConcreteComponentB()} + ConcreteVisitor1`\n    );\n  }\n}\n\nmodule.exports = ConcreteVisitor1;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const Visitor = require("./Visitor");\n\n/**\n * Concrete Visitors implement several versions of the same algorithm, which can\n * work with all concrete component classes.\n *\n * You can experience the biggest benefit of the Visitor pattern when using it\n * with a complex object structure, such as a Composite tree. In this case, it\n * might be helpful to store some intermediate state of the algorithm while\n * executing visitor\'s methods over various objects of the structure.\n */\nclass ConcreteVisitor2 extends Visitor {\n  visitConcreteComponentA(element) {\n    console.log(\n      `${element.exclusiveMethodOfConcreteComponentA()} + ConcreteVisitor2`\n    );\n  }\n\n  visitConcreteComponentB(element) {\n    console.log(\n      `${element.specialMethodOfConcreteComponentB()} + ConcreteVisitor2`\n    );\n  }\n}\n\nmodule.exports = ConcreteVisitor2;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * Visitor Design Pattern\n *\n * Intent: Lets you separate algorithms from the objects on which they operate.\n */\n\nconst ConcreteComponentA = require("./ConcreteComponentA");\nconst ConcreteComponentB = require("./ConcreteComponentB");\nconst ConcreteVisitor1 = require("./ConcreteVisitor1");\nconst ConcreteVisitor2 = require("./ConcreteVisitor2");\n\n/**\n * The client code can run visitor operations over any set of elements without\n * figuring out their concrete classes. The accept operation directs a call to\n * the appropriate operation in the visitor object.\n */\nfunction clientCode(components, visitor) {\n  // ...\n  for (const component of components) {\n    component.accept(visitor);\n  }\n  // ...\n}\n\nconst components = [new ConcreteComponentA(), new ConcreteComponentB()];\n\nconsole.log(\n  "The client code works with all visitors via the base Visitor interface:"\n);\nconst visitor1 = new ConcreteVisitor1();\nclientCode(components, visitor1);\nconsole.log("");\n\nconsole.log(\n  "It allows the same client code to work with different types of visitors:"\n);\nconst visitor2 = new ConcreteVisitor2();\nclientCode(components, visitor2);\n')))}m.isMDXComponent=!0}}]);