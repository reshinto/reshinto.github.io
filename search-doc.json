[{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"blog/mdx-blog-post","content":"Blog posts support Docusaurus Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. &lt;button onClick={() =&gt; alert(&quot;button clicked!&quot;)}&gt;Click me!&lt;/button&gt; Click me!","keywords":""},{"title":"Cypress Visual Testing Introduction","type":0,"sectionRef":"#","url":"blog/cypress-visual-testing-introduction","content":"","keywords":""},{"title":"Step 1: Create a new react app​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#step-1-create-a-new-react-app","content":"npx create-react-app demo-cypress --template typescript  yarn create react-app demo-cypress --template typescript  "},{"title":"Change directory​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#change-directory","content":"cd demo-cypress   "},{"title":"Step 2: Install cypress related modules​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#step-2-install-cypress-related-modules","content":"npm install cypress @cypress/react --save-dev  yarn add -D cypress @cypress/react  tested with &quot;@cypress/react&quot;: &quot;^6.0.0&quot;, &quot;cypress&quot;: &quot;^10.4.0&quot; "},{"title":"Step 3: Open Cypress​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#step-3-open-cypress","content":""},{"title":"If running the first time, you might need to verify first​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#if-running-the-first-time-you-might-need-to-verify-first","content":"npm run cypress verify  yarn run cypress verify  "},{"title":"Open cypress to setup configurations​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#open-cypress-to-setup-configurations","content":"npm run cypress open  yarn run cypress open   "},{"title":"Step 4: Click on Component Testing to setup basic configs​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#step-4-click-on-component-testing-to-setup-basic-configs","content":""},{"title":"Select frontend framework type​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#select-frontend-framework-type","content":" "},{"title":"Install dev dependencies​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#install-dev-dependencies","content":" "},{"title":"Auto generate configuration files​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#auto-generate-configuration-files","content":"  "},{"title":"Choose browser type​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#choose-browser-type","content":" "},{"title":"Step 5: Create new test file​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#step-5-create-new-test-file","content":" "},{"title":"Create test file with desired name​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#create-test-file-with-desired-name","content":" "},{"title":"New file will be auto generated​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#new-file-will-be-auto-generated","content":" "},{"title":"Run the test or create a new test file​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#run-the-test-or-create-a-new-test-file","content":" "},{"title":"Step 6: Modify the test file​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#step-6-modify-the-test-file","content":""},{"title":"Initial test code​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#initial-test-code","content":"describe(&quot;App.cy.tsx&quot;, () =&gt; { it(&quot;playground&quot;, () =&gt; { // cy.mount() }); });   "},{"title":"New passing sample test code​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#new-passing-sample-test-code","content":"import * as React from &quot;react&quot;; import App from &quot;../../src/App&quot;; import {mount} from &quot;@cypress/react&quot;; it(&quot;renders react app&quot;, () =&gt; { mount(&lt;App /&gt;); cy.contains(/learn react/i).should(&quot;be.visible&quot;); });   "},{"title":"Failing sample test code​","type":1,"pageTitle":"Cypress Visual Testing Introduction","url":"blog/cypress-visual-testing-introduction#failing-sample-test-code","content":"import * as React from &quot;react&quot;; import App from &quot;../../src/App&quot;; import {mount} from &quot;@cypress/react&quot;; it(&quot;renders react app&quot;, () =&gt; { mount(&lt;App /&gt;); cy.contains(/learn react not working/i).should(&quot;be.visible&quot;); });   "},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/documentation","content":"","keywords":""},{"title":"Socials​","type":1,"pageTitle":"Introduction","url":"docs/documentation#socials","content":" "},{"title":"My GitHub Statistics​","type":1,"pageTitle":"Introduction","url":"docs/documentation#my-github-statistics","content":" "},{"title":"Big O Notation","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/bigO","content":"","keywords":""},{"title":"common complexities and their Big O notations ordered from fastest to slowest​","type":1,"pageTitle":"Big O Notation","url":"docs/interviewPrep/algorithms_and_techniques/bigO#common-complexities-and-their-big-o-notations-ordered-from-fastest-to-slowest","content":" "},{"title":"Constant: O(1)​","type":1,"pageTitle":"Big O Notation","url":"docs/interviewPrep/algorithms_and_techniques/bigO#constant-o1","content":""},{"title":"Logarithmic: O(log n)​","type":1,"pageTitle":"Big O Notation","url":"docs/interviewPrep/algorithms_and_techniques/bigO#logarithmic-olog-n","content":""},{"title":"Linear: O(n)​","type":1,"pageTitle":"Big O Notation","url":"docs/interviewPrep/algorithms_and_techniques/bigO#linear-on","content":"do not join them together if the input value are from a different source O(n + m) "},{"title":"Log-linear: O(n log n)​","type":1,"pageTitle":"Big O Notation","url":"docs/interviewPrep/algorithms_and_techniques/bigO#log-linear-on-log-n","content":""},{"title":"Quadratic: O(n2)​","type":1,"pageTitle":"Big O Notation","url":"docs/interviewPrep/algorithms_and_techniques/bigO#quadratic-on2","content":"drop the smaller unit if the input value are from the same source O(n2 + n) = O(n2) do not drop the smaller unit if the input value are from a different sourceO(n2 + 2m) = O(n2 + m) "},{"title":"Cubic: O(n3)​","type":1,"pageTitle":"Big O Notation","url":"docs/interviewPrep/algorithms_and_techniques/bigO#cubic-on3","content":""},{"title":"Exponential: O(2n)​","type":1,"pageTitle":"Big O Notation","url":"docs/interviewPrep/algorithms_and_techniques/bigO#exponential-o2n","content":""},{"title":"Factorial: O(n!)​","type":1,"pageTitle":"Big O Notation","url":"docs/interviewPrep/algorithms_and_techniques/bigO#factorial-on","content":"4! = 4 3 2 * 1 = 24 "},{"title":"Binary Search","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/binarySearch","content":"","keywords":""},{"title":"Iterative solution​","type":1,"pageTitle":"Binary Search","url":"docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/binarySearch#iterative-solution","content":"function binarySearch(arr, findValue) { let leftIndex = 0; let rightIndex = arr.length - 1; while (leftIndex &lt;= rightIndex) { const midIndex = Math.floor((leftIndex + rightIndex) / 2); if (findValue === arr[midIndex]) return midIndex; if (findValue &lt; arr[midIndex]) { rightIndex = midIndex - 1; } else if (findValue &gt; arr[midIndex]) { leftIndex = midIndex + 1; } } return -1; }  "},{"title":"Divide & Conquer","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/","content":"","keywords":""},{"title":"algorithm​","type":1,"pageTitle":"Divide & Conquer","url":"docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/#algorithm","content":"The divide-and-conquer paradigm involves 3 steps at each level of the recursion Divide the problem into a number of subproblems that are smaller instances of the same problemConquer the subproblems by solving them recursively If the subproblem sizes are small enough, however, just solve the subproblems in a straightforward manner Combine the solutions to the subproblems into the solution for the original problem another method of explanation Divide problem into several smaller subproblems normally, the subproblems are similar to the original Conquer the subproblems by solving them recursively base case: solve small enough problems by brute force Combine the solutions to get a solution to the subproblems and finally a solution to the original problem Divide and Conquer algorithms are normally recursive "},{"title":"Insert Value Into Binary Search Tree","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/insertValueIntoBST","content":"","keywords":""},{"title":"Iterative solution​","type":1,"pageTitle":"Insert Value Into Binary Search Tree","url":"docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/insertValueIntoBST#iterative-solution","content":"function insertNode(head, value) { const newNode = new Node(value); if (!head) { return newNode; } let currentNode = head; while (currentNode) { if (currentNode.value &lt; value) { if (!currentNode.right) { currentNode.right = newNode; break; } currentNode = currentNode.right; } else { if (!currentNode.left) { currentNode.left = newNode; break; } currentNode = currentNode.left; } } return head; }  "},{"title":"Algorithms","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/","content":"","keywords":""},{"title":"Algorithm Characteristics​","type":1,"pageTitle":"Algorithms","url":"docs/interviewPrep/algorithms_and_techniques/#algorithm-characteristics","content":"Algorithms usually have a specific set of input values that it can work with to get a result For example, sorting algorithms take collections of data values and try to order them can also talk about the classification of an algorithm using a variety of criteria Some algorithms operate on their datasets sequentially, which means they are sequential in natureWhereas a parallel algorithm can split a dataset into smaller pieces and then work with each one at the same time The algorithm can be exact by producing a known predictable value it can also be approximate by trying to find an answer that may not be consistentFor example, a face recognition algorithm may not give the same answer every time with the same face Algorithms can be deterministic, where they perform each step with an exact solution it can be non-deterministic if they try to find a solution using consecutive guesses that become more accurate over time "},{"title":"Common Algorithms​","type":1,"pageTitle":"Algorithms","url":"docs/interviewPrep/algorithms_and_techniques/#common-algorithms","content":""},{"title":"Search Algorithms​","type":1,"pageTitle":"Algorithms","url":"docs/interviewPrep/algorithms_and_techniques/#search-algorithms","content":"it find specific data in structure for example, a substring within a string One of the most common types of algorithms you come across is search algorithms, which are used when you need to find a piece of data within a larger data structure For example, searching for a substring within a larger string, or perhaps searching for a file in a set of subfolder in the file system "},{"title":"Sorting Algorithms​","type":1,"pageTitle":"Algorithms","url":"docs/interviewPrep/algorithms_and_techniques/#sorting-algorithms","content":"Take a dataset and apply a sort to order itSorting algorithms are another very common type used when working with ordered datasets they take a dataset and put them in a specific order "},{"title":"Computational Algorithms​","type":1,"pageTitle":"Algorithms","url":"docs/interviewPrep/algorithms_and_techniques/#computational-algorithms","content":"Computational algorithms are used to get from one dataset to another example, calculating whether a given number is a prime number, or perhaps converting a temperature from one scale to another "},{"title":"Collection Algorithms​","type":1,"pageTitle":"Algorithms","url":"docs/interviewPrep/algorithms_and_techniques/#collection-algorithms","content":"Work with collections of data count specific items, navigate among data elements, filter out unwanted data etc. there are collection algorithms that involve manipulating or navigating between sets of data that are stored in a particular structure examples, counting the number of specific items, filtering out unwanted data, etc. "},{"title":"Algorithm Performance​","type":1,"pageTitle":"Algorithms","url":"docs/interviewPrep/algorithms_and_techniques/#algorithm-performance","content":"algorithms are designed to work with datasets and solve computational problems it is important to understand how to talk about the performance of an algorithmThis is an important factor in how you choose a particular algorithm for solving a computational problem, as well as understanding how your program will behave in different circumstances if we want to measure how the performance of an algorithm changes based on the size of the input dataset use the term called Big-O notation to describe the performance of an algorithm This notation format is used to describe how a particular algorithm works as the input data set grows over timethe reason the letter O is used is that the rate at which the complexity of an algorithm grows is also called order of operation It usually describes a worst-case scenario of how long it will take to complete a given operationit's important to note that many algorithms and data structures have more than one Big-O valueFor example, data structures can usually perform several types of operations, such as inserting or searching for values, each with its own order of operations "},{"title":"Correctness of Algorithm​","type":1,"pageTitle":"Algorithms","url":"docs/interviewPrep/algorithms_and_techniques/#correctness-of-algorithm","content":"An algorithm is considered correct if, at any admissible (for a given problem) input, it finishes its work and produces a result that meets the requirements of the problem In this case, the algorithm is said to solve the given computational problem An incorrect algorithm (for some input) may not stop at all or give an incorrect result but this does not mean that such algorithms are completely uselessIf errors are rare enough, or it is possible to control the frequency of errors, we may admit the use of incorrect algorithmsIt may be that initially we have a specific task with one data set, and we have compiled an algorithm Then some new data begins to arrive, there are not many of them, but with them the algorithm slows down significantlyBut since there is little such data so far, the algorithm is quite working "},{"title":"Analyzing Algorithm​","type":1,"pageTitle":"Algorithms","url":"docs/interviewPrep/algorithms_and_techniques/#analyzing-algorithm","content":"Analyzing an algorithm has come to mean predicting the resources that the algorithm requires Occasionally, resources such as memory, communication bandwidth, or computer hardware are of primary concern, but most often it is computational time that we want to measureGenerally, by analyzing several candidate algorithms for a problem, we can identify a most efficient oneSuch analysis may indicate more than one viable candidate, but we can often discard several inferior algorithms in the process Before we can analyze an algorithm, we must have a model of the implementation technology that we will use, including a model for the resources of that technology and their costs we will assume a generic one processor, random-access machine (RAM) model of computation as our implementation technology and understand that our algorithms will be implemented as computer programsIn the RAM model, instructions are executed one after another, with no concurrent operations "},{"title":"Dynamic Programming","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/","content":"","keywords":""},{"title":"examples​","type":1,"pageTitle":"Dynamic Programming","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/#examples","content":"canSum: Decision ProblemhowSum: Combination ProblembestSum: Optimization Problem "},{"title":"2 types of techniques​","type":1,"pageTitle":"Dynamic Programming","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/#2-types-of-techniques","content":""},{"title":"Memoization technique​","type":1,"pageTitle":"Dynamic Programming","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/#memoization-technique","content":"Store subproblems and reuse it when required "},{"title":"Strategies​","type":1,"pageTitle":"Dynamic Programming","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/#strategies","content":"try to think about the recursive functions in terms of a tree with the tree information, you can implement brute force then from there you can see where to optimize the brute force solution "},{"title":"Guidelines for solving dynamic programming problems using memoization strategy​","type":1,"pageTitle":"Dynamic Programming","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/#guidelines-for-solving-dynamic-programming-problems-using-memoization-strategy","content":"make it work visualize the problem as a treeimplement the tree using recursiontest it make it efficient add a memo object, key = input, value = return valueadd a base case to return memo valuesstore return values into the memo before returning "},{"title":"Tabulation technique​","type":1,"pageTitle":"Dynamic Programming","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/#tabulation-technique","content":""},{"title":"Strategies​","type":1,"pageTitle":"Dynamic Programming","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/#strategies-1","content":"instead of breaking a problem to multiple subproblems recursively, we do it iteratively by building a table, which is just an array create an array with 1 greater length than n input valueuse starting value of 0 for all elements if need to calculate a running sum[0, 0, 0] if n is 2 "},{"title":"Guidelines for solving dynamic programming problems using tabulation strategy​","type":1,"pageTitle":"Dynamic Programming","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/#guidelines-for-solving-dynamic-programming-problems-using-tabulation-strategy","content":"solution is already efficient and does not requires brute force visualize the problem as a tablesize the table based on the inputsinitialize the table with default valuesseed the trivial answer into the tableiterate through the tablefill further positions based on the current position "},{"title":"Missing Number","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/bitwise/missingNumber","content":"","keywords":""},{"title":"3 ways of solving this problem​","type":1,"pageTitle":"Missing Number","url":"docs/interviewPrep/algorithms_and_techniques/bitwise/missingNumber#3-ways-of-solving-this-problem","content":""},{"title":"XOR (simple, O(n) time and O(1) space)​","type":1,"pageTitle":"Missing Number","url":"docs/interviewPrep/algorithms_and_techniques/bitwise/missingNumber#xor-simple-on-time-and-o1-space","content":"A\tB\tresult0\t0\t0 0\t1\t1 1\t0\t1 1\t1\t0 function missingNum(nums) { const n = nums.length; let res = 0; for (let i = 0; i &lt; n; i++) { res ^= i ^ nums[i]; // xor number from range and xor number from array element value } res ^= n; // xor the last range value return res; }  input: [3, 0, 1] this will give the following: initial value ^ range value ^ array element value 0 ^ 0 ^ 3 | when res = 0, i = 0, nums[0] = 3 ^ 1 ^ 0 | when res = 3, i = 1, nums[0] = 0 ^ 2 ^ 1 | when res = 2, i = 2, nums[0] = 3 ^ 3 | when res = 1, n = 3 which is the same as 0 ^ 0 ^ 3 ^ 1 ^ 0 ^ 2 ^ 1 ^ 3 since A ^ A = 0, we can remove numbers that have 1 duplicate resulting in the following: initial: 0 ^ 0 ^ 3 ^ 1 ^ 0 ^ 2 ^ 1 ^ 3 step 1: 3 ^ 1 ^ 0 ^ 2 ^ 1 ^ 3 step 2: 1 ^ 0 ^ 2 ^ 1 step 3: 0 ^ 2 any value that xor with 0 gives you back that value (A ^ 0 = A) therefore, the missing number is 2  "},{"title":"SUM​","type":1,"pageTitle":"Missing Number","url":"docs/interviewPrep/algorithms_and_techniques/bitwise/missingNumber#sum","content":"formula: missing number = sum of numbers from range - sum of all actual numbers in array​ find total sum mathematical formula = (n * (n + 1)) / 2​ function missingNum(nums) { let sum = 0; for (let i = 0; i &lt; nums.length; i++) { sum += i - nums[i]; // adds number from range and minus number from array element value } sum += nums.length; // adds the last number from range return sum; }  "},{"title":"Binary Search (good only if array is already sorted)​","type":1,"pageTitle":"Missing Number","url":"docs/interviewPrep/algorithms_and_techniques/bitwise/missingNumber#binary-search-good-only-if-array-is-already-sorted","content":"function missingNum(nums) { let left = 0; let right = nums.length; let mid = Math.floor((left + right) / 2); while (left &lt; right) { mid = Math.floor((left + right) / 2); if (nums[mid] &gt; mid) { right = mid; } else { left = mid + 1; } } return left; }  input: [0, 1, 2, 3, 4, 5, 6, 7, 9] initial left is 0, right is 9, mid is 4 nums[4] is 4 and is not more than mid 4, therefore left is changed to 4 + 1 = 5 when left is 5, right is 9, mid is 7 nums[7] is 7 and is not more than mid 7, therefore left is changed to 7 + 1 = 8 when left is 8, right is 9, mid is 8 nums[8] is 9 and is more than mid 8, therefore right is 8 since left 8 is no longer less than right 8 return left value of 8 as it is the missing number  "},{"title":"Merge Sort","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/mergeSort","content":"","keywords":""},{"title":"Iterative solution​","type":1,"pageTitle":"Merge Sort","url":"docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/mergeSort#iterative-solution","content":"function mergeSort(data) { const endIndex = data.length - 1; // current size of subarrays to be merged // currSize varies from 1 to endIndex/2 // Merge subarrays in bottom up manner // First merge subarrays of size 1 to create sorted subarrays of size 2 // then merge subarrays of size 2 to create sorted subarrays of size 4 for (let currSize = 1; currSize &lt;= endIndex; currSize *= 2) { // starting index of different subarray to be merged for (let leftIndex = 0; leftIndex &lt; endIndex; leftIndex += 2 * currSize) { // Find ending point of left subarray // mid+1 is starting point of right const mid = Math.min(leftIndex + currSize - 1, endIndex); const rightEnd = Math.min(leftIndex + 2 * currSize - 1, endIndex); merge(data, leftIndex, mid, rightEnd); } } }  "},{"title":"Merge Two Sorted Linked Lists","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/mergeTwoSortedLinkedLists","content":"","keywords":""},{"title":"Iterative solution​","type":1,"pageTitle":"Merge Two Sorted Linked Lists","url":"docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/mergeTwoSortedLinkedLists#iterative-solution","content":"function sortedMerge(nodeA, nodeB) { let dummyNode = new Node(0); // a dummy first node to hang the result on let tail = dummyNode; // tail points to the last result node while (true) { if (!nodeA) { // use nodeB if nodeA runs out tail.next = nodeB; break; } if (!nodeB) { // use nodeA if nodeB runs out tail.next = nodeA; break; } // Compare data of 2 lists, append the smaller list into tail and advance the head to the next Node if (nodeA.value &lt;= nodeB.value) { tail.next = nodeA; nodeA = nodeA.next; } else { tail.next = nodeB; nodeB = nodeB.next; } tail = tail.next; // Advance the tail } return dummyNode.next; }  "},{"title":"Can Sum example","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/canSum","content":"","keywords":""},{"title":"Naive solution​","type":1,"pageTitle":"Can Sum example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/canSum#naive-solution","content":"time complexity is O(n^m), where m = target sum, n = numbers.lengthspace complexity is O(m) const canSum = (targetSum, numbers) =&gt; { if (targetSum === 0) return true; if (targetSum &lt; 0) return false; for (const num of numbers) { const remainder = targetSum - num; if (canSum(remainder, numbers)) { return true; } } return false; }; console.log(canSum(7, [2, 3])); // true console.log(canSum(7, [5, 3, 4, 7])); // true console.log(canSum(7, [2, 4])); // false console.log(canSum(8, [2, 3, 5])); // true console.log(canSum(300, [7, 14])); // false  "},{"title":"Memoization solution​","type":1,"pageTitle":"Can Sum example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/canSum#memoization-solution","content":"time complexity is O(n*m)space complexity is O(m) const canSum = (targetSum, numbers, memo = {}) =&gt; { if (targetSum in memo) return memo[targetSum]; if (targetSum === 0) return true; if (targetSum &lt; 0) return false; for (const num of numbers) { const remainder = targetSum - num; if (canSum(remainder, numbers, memo)) { memo[targetSum] = true; return true; } } memo[targetSum] = false; return false; }; console.log(canSum(7, [2, 3])); // true console.log(canSum(7, [5, 3, 4, 7])); // true console.log(canSum(7, [2, 4])); // false console.log(canSum(8, [2, 3, 5])); // true console.log(canSum(300, [7, 14])); // false  "},{"title":"Tabulation solution​","type":1,"pageTitle":"Can Sum example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/canSum#tabulation-solution","content":"canSum(7, [5, 3, 4]) -&gt; true m = targetSum n = numbers.length first create an array the size of the target sum + 1 index: 0 1 2 3 4 5 6 7 value: false false false false false false false false when targetSum is at 0, no sum is required to get 0, therefore return value should be true index: 0 1 2 3 4 5 6 7 value: true false false false false false false false look at the 1st element of the array [5, 3, 4] is 5 current index is 0 and value is true current index (0), can return 0 by not adding if current value is true, will always return true, thus 5 steps ahead of the current index, value can be changed to true index: 0 1 2 3 4 5 6 7 value: true false false false false true false false look at the 2nd element of the array [5, 3, 4] is 3 current index is 0 and value is true current index (0), can return 0 by not adding if current value is true, will always return true, thus 3 steps ahead of the current index, value can be changed to true index: 0 1 2 3 4 5 6 7 value: true false false true false true false false look at the 3rd element of the array [5, 3, 4] is 4 current index is 0 and value is true current index (0), can return 0 by not adding if current value is true, will always return true, thus 4 steps ahead of the current index, value can be changed to true index: 0 1 2 3 4 5 6 7 value: true false false true true true false false move current value to the next index look at the 1st element of the array [5, 3, 4] is 5 current index is 1 and value is false if current value is false, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: true false false true true true false false look at the 2nd element of the array [5, 3, 4] is 3 current index is 1 and value is false if current value is false, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: true false false true true true false false look at the 3rd element of the array [5, 3, 4] is 4 current index is 1 and value is false if current value is false, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: true false false true true true false false move current value to the next index look at the 1st element of the array [5, 3, 4] is 5 current index is 2 and value is false if current value is false, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: true false false true true true false false look at the 2nd element of the array [5, 3, 4] is 3 current index is 2 and value is false if current value is false, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: true false false true true true false false look at the 3rd element of the array [5, 3, 4] is 4 current index is 2 and value is false if current value is false, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: true false false true true true false false move current value to the next index look at the 1st element of the array [5, 3, 4] is 5 current index is 3 and value is true therefore this step can be skipped index: 0 1 2 3 4 5 6 7 value: true false false true true true false false look at the 2nd element of the array [5, 3, 4] is 3 current index is 3 and value is true if current value is true, will always return true, thus 3 steps ahead of the current index, value can be changed to true index: 0 1 2 3 4 5 6 7 value: true false false true true true true false look at the 3rd element of the array [5, 3, 4] is 4 current index is 3 and value is true if current value is true, will always return true, thus 4 steps ahead of the current index, value can be changed to true index: 0 1 2 3 4 5 6 7 value: true false false true true true true true the rest can be skipped since their values are all true  time complexity is O(n*m)space complexity is O(m) const canSum = (targetSum, numbers) =&gt; { const table = Array(targetSum + 1).fill(false); table[0] = true; for (let i = 0; i &lt;= targetSum; i++) { if (table[i]) { for (let num of numbers) { table[i + num] = true; } } } return table[targetSum]; }; console.log(canSum(7, [2, 3])); // true console.log(canSum(7, [5, 3, 4, 7])); // true console.log(canSum(7, [2, 4])); // false console.log(canSum(8, [2, 3, 5])); // true console.log(canSum(300, [7, 14])); // false  "},{"title":"Greedy Algorithm","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/","content":"","keywords":""},{"title":"Simple example​","type":1,"pageTitle":"Greedy Algorithm","url":"docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/#simple-example","content":""},{"title":"Problem​","type":1,"pageTitle":"Greedy Algorithm","url":"docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/#problem","content":"find the N numbers in the array that is equal to the largest sum const array = [3, 4, -1, 2, -3, 0]; const n = 4;  the greedy algorithm approach to solving this problem is to simply select the largest number at every single step until we've selected n numbers "},{"title":"Solution​","type":1,"pageTitle":"Greedy Algorithm","url":"docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/#solution","content":"select the largest number 4, then the next largest 3, then the next largest 2, then the next largest 0 this gives the result 4 + 3 + 2 + 0 = 10 "},{"title":"formal properties if true, greedy algorithm could be used to solve a problem​","type":1,"pageTitle":"Greedy Algorithm","url":"docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/#formal-properties-if-true-greedy-algorithm-could-be-used-to-solve-a-problem","content":""},{"title":"Greedy Choice Property​","type":1,"pageTitle":"Greedy Algorithm","url":"docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/#greedy-choice-property","content":"a global (overall) optimal solution can be reached by choosing the optimal choice at each stepgreedy algorithms work on problems for which it is true that every step, there is a choice that is optimal for the problem up to that step and after the last step, the algorithm produces the optimal solution of the complete problem "},{"title":"Optimal Substructure​","type":1,"pageTitle":"Greedy Algorithm","url":"docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/#optimal-substructure","content":"a problem has an optimal substructure if an optimal solution to the entire problem contains the optimal solutions to the sub-problems this means that every time a choice is made, one can treat that as a sub probleman optimal substructure exists if all of the sub problems allow you to solve the larger problem as a whole meaning if all of the solutions to these sub-problems combined allow you to have a full, optimal solution to the entire problem, then you can use the greedy algorithm "},{"title":"Greedy Algorithm application​","type":1,"pageTitle":"Greedy Algorithm","url":"docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/#greedy-algorithm-application","content":""},{"title":"Fractional Knapsack Problem​","type":1,"pageTitle":"Greedy Algorithm","url":"docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/#fractional-knapsack-problem","content":"this is a backpack that has the following design the goal is to fill the backpack with as much value as possible without going over it's capacityso how do we use a greedy algorithm to solve this problem? capacity = 25 Item Size Value 0 22 19 1 10 9 2 9 9 3 7 6  solution​ you can select a fractional amount of any of these items this means that, instead of selecting one of item 1, we can select e.g. half of item 1 instead first approach select item 3 total current capacity = 7 total current value = 6 select item 2 total current capacity = 7 + 9 = 16 total current value = 6 + 9 = 15 select item 1 (this fails) total current capacity = 7 + 9 + 10 = 26 total current value = 6 + 9 + 9 = 24 change to select 90% of item 1 total current capacity = 7 + 9 + (10 * 0.9) = 25 total current value = 6 + 9 + (9 * 0.9) = 23.1  second approach select item 0 total current capacity = 22 total current value = 19 select item 2 since it has the same value as item 1 but smaller in size (this fails) total current capacity = 22 + 9 = 31 total current value = 19 + 9 = 28 change to select 33% of item 1 total current capacity = 22 + (9 * 0.33) = 25 total current value = 19 + (9 * 0.33) = 22  the above 2 approaches does not give the most optimal choice, as there is a better solution for this case, which is to use best value to size ratio therefore the items with the best value over size ratio will the best item to select capacity = 25 Item Size Value Value/Size 0 22 19 0.8636 1 10 9 0.9 2 9 9 1 3 7 6 0.857  this shows that the best items to select goes in the following order 2, 1, 0, 3 this means that we should take as much as possible from the first selection onwards select item 2 (this is the best so take all of it) total current capacity = 9 total current value = 9 select item 1 (this is the 2nd best so take all of it) total current capacity = 9 + 10 = 19 total current value = 9 + 9 = 18 select item 0 (this is the 3rd best so take as much as possible, ~27%) total current capacity = 9 + 10 + (22 * 0.27) = 25 total current value = 9 + 9 + (19 * 0.27)= 23.13  "},{"title":"Knapsack Problem​","type":1,"pageTitle":"Greedy Algorithm","url":"docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/#knapsack-problem","content":"using of greedy algorithm for this example will fail​ use the same problem, however selecting a fractional amount of the item is no longer allowed capacity = 25 Item Size Value 0 22 19 1 10 9 2 9 9 3 7 6  using the best order approach in the previous example 2, 1, 0 select item 2 total current capacity = 9 total current value = 9 select item 1 total current capacity = 9 + 10 = 19 total current value = 9 + 9 = 18  the best answer should have been select item 0 total current capacity = 22 total current value = 19  for this case, using of dynamic programming might be a better solution than to using a greedy algorithm​ "},{"title":"Best Sum example","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/bestSum","content":"","keywords":""},{"title":"Naive solution​","type":1,"pageTitle":"Best Sum example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/bestSum#naive-solution","content":"time complexity is O((n^m) * m), where targetSum is m, and numbers array.length is nspace complexity is O(m * m), simplified to O(m^2), where memory is being stored for the recursion stack and the additional values stored const bestSum = (targetSum, numbers) =&gt; { if (targetSum === 0) return []; if (targetSum &lt; 0) return null; let shortestCombination = null; // space m for (const num of numbers) { // time n const remainder = targetSum - num; const remainderCombination = bestSum(remainder, numbers); // space m, time will follow targetSum with repeats giving n^m if (remainderCombination !== null) { const combination = [...remainderCombination, num]; // time m if ( shortestCombination === null || combination.length &lt; shortestCombination.length ) { shortestCombination = combination; } } } return shortestCombination; }; console.log(bestSum(7, [5, 3, 4, 7])); // [7] console.log(bestSum(8, [2, 3, 5])); // [3, 5] console.log(bestSum(8, [1, 4, 5])); // [4, 4] console.log(bestSum(100, [1, 2, 5, 25])); // [25, 25, 25, 25]  "},{"title":"Memoization solution​","type":1,"pageTitle":"Best Sum example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/bestSum#memoization-solution","content":"time complexity is O(n * m * m), simplified to O(n * m^2)space complexity is O(m * m), simplified to O(m^2) const bestSum = (targetSum, numbers, memo = {}) =&gt; { if (targetSum in memo) return memo[targetSum]; if (targetSum === 0) return []; if (targetSum &lt; 0) return null; let shortestCombination = null; // space m for (const num of numbers) { // time n const remainder = targetSum - num; const remainderCombination = bestSum(remainder, numbers, memo); // space m, time will follow targetSum without repeats giving m if (remainderCombination !== null) { const combination = [...remainderCombination, num]; // time m if ( shortestCombination === null || combination.length &lt; shortestCombination.length ) { shortestCombination = combination; } } } memo[targetSum] = shortestCombination; return shortestCombination; }; console.log(bestSum(7, [5, 3, 4, 7])); // [7] console.log(bestSum(8, [2, 3, 5])); // [3, 5] console.log(bestSum(8, [1, 4, 5])); // [4, 4] console.log(bestSum(100, [1, 2, 5, 25])); // [25, 25, 25, 25]  "},{"title":"Tabulation solution​","type":1,"pageTitle":"Best Sum example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/bestSum#tabulation-solution","content":"bestSum(8, [2, 3, 5]) m = targetSum n = numbers.length first create an array the size of the target sum + 1 index: 0 1 2 3 4 5 6 7 8 value: null null null null null null null null null when targetSum is at 0, no sum is required to get 0, therefore return value should be [] index: 0 1 2 3 4 5 6 7 8 value: [] null null null null null null null null look at the 1st element of the array [2, 3, 5] is 2 current index is 0 and value is [] current index 0, can return 0 by not adding at 2 steps ahead of the current index, value can be changed to the same as current value [] and appends the current element 2 into it resulting to [2] index: 0 1 2 3 4 5 6 7 8 value: [] null [2] null null null null null null look at the 2nd element of the array [2, 3, 5] is 3 current index is 0 and value is [] current index 0, can return 0 by not adding at 3 steps ahead of the current index, value can be changed to the same as current value [] and appends the current element 3 into it resulting to [3] index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] null null null null null look at the 3rd element of the array [2, 3, 5] is 5 current index is 0 and value is [] current index 0, can return 0 by not adding at 5 steps ahead of the current index, value can be changed to the same as current value [] and appends the current element 5 into it resulting to [5] index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] null [5] null null null move current value to the next index look at the 1st element of the array [2, 3, 5] is 2 current index is 1 and value is null if current value is null, nothing needs to be changed index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] null [5] null null null look at the 2nd element of the array [2, 3, 5] is 3 current index is 1 and value is null if current value is null, nothing needs to be changed index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] null [5] null null null look at the 3rd element of the array [2, 3, 5] is 5 current index is 1 and value is null if current value is null, nothing needs to be changed index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] null [5] null null null move current value to the next index look at the 1st element of the array [2, 3, 5] is 2 current index is 2 and value is [2] at 2 steps ahead of the current index, value can be copied from the current value [2] and append the current element 2 into it resulting to [2, 2] note that value at index 4 gets overwritten index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] [2, 2] [5] null null null look at the 2nd element of the array [2, 3, 5] is 3 current index is 2 and value is [2] at 3 steps ahead of the current index, value can be copied from the current value [2] and append the current element 3 into it resulting to [2, 3] however, since current index 2 + current element 3 giving index 5 already has a value, we would need to compare index 5 value of [5] with the new data [2, 3] to see which has the smallest array since the initial value at index 5 has a smaller array size, it does not get overwritten index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] [2, 2] [5] null null null look at the 3rd element of the array [2, 3, 5] is 5 current index is 2 and value is [2] at 5 steps ahead of the current index, value can be copied from the current value [2] and append the current element 5 into it resulting to [2, 2] note that value at index 7 gets overwritten index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] [2, 2] [5] null [2, 5] null move current value to the next index look at the 1st element of the array [2, 3, 5] is 2 current index is 3 and value is [3] at 2 steps ahead of the current index, value can be copied from the current value [3] and append the current element 2 into it resulting to [3, 2] however, since current index 3 + current element 2 giving index 5 already has a value, we would need to compare index 5 value of [5] with the new data [3, 2] to see which has the smallest array since the initial value at index 5 has a smaller array size, it does not get overwritten index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] [2, 2] [5] null [2, 5] null look at the 2nd element of the array [2, 3, 5] is 3 current index is 3 and value is [3] at 3 steps ahead of the current index, value can be copied from the current value [3] and append the current element 3 into it resulting to [3, 3] note that value at index 6 gets overwritten index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] [2, 2] [5] [3, 3] [2, 5] null look at the 3rd element of the array [2, 3, 5] is 5 current index is 3 and value is [3] at 5 steps ahead of the current index, value can be copied from the current value [3] and append the current element 5 into it resulting to [3, 5] note that value at index 8 gets overwritten index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] [2, 2] [5] [3, 3] [2, 5] [3, 5] we can stop here, but just for example purposes, we will continue we can continue the loop till the end and it would still provide the same valid answer move current value to the next index look at the 1st element of the array [2, 3, 5] is 2 current index is 4 and value is [2, 2] at 2 steps ahead of the current index, value can be copied from the current value [2, 2] and append the current element 2 into it resulting to [2, 2, 2] however, since current index 4 + current element 2 giving index 6 already has a value, we would need to compare index 6 value of [3, 3] with the new data [2, 2, 2] to see which has the smallest array since the initial value at index 6 has a smaller array size, it does not get overwritten index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] [2, 2] [5] [3, 3] [2, 5] [3, 5] look at the 2st element of the array [2, 3, 5] is 3 current index is 4 and value is [2, 2] at 3 steps ahead of the current index, value can be copied from the current value [2, 2] and append the current element 3 into it resulting to [2, 2, 3] however, since current index 4 + current element 3 giving index 7 already has a value, we would need to compare index 7 value of [2, 5] with the new data [2, 2, 3] to see which has the smallest array since the initial value at index 7 has a smaller array size, it does not get overwritten index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] [2, 2] [5] [3, 3] [2, 5] [3, 5] look at the 3rd element of the array [5, 3, 4] is 5 current index is 4 and value is [2, 2] at 5 steps ahead of the current index, it is out of range, nothing needs to be changed index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] [2, 2] [5] [3, 3] [2, 5] [3, 5] move current value to the next index look at the 1st element of the array [2, 3, 5] is 2 current index is 5 and value is [5] at 2 steps ahead of the current index, value can be copied from the current value [5, 2] and append the current element 2 into it resulting to [5, 2] however, since current index 5 + current element 2 giving index 7 already has a value, we would need to compare index 7 value of [2, 5] with the new data [5, 2] to see which has the smallest array since both has the same array size, it does not get overwritten index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] [2, 2] [5] [3, 3] [2, 5] [3, 5] look at the 2st element of the array [2, 3, 5] is 3 current index is 5 and value is [2, 2] at 3 steps ahead of the current index, value can be copied from the current value [5] and append the current element 3 into it resulting to [5, 3] however, since current index 5 + current element 3 giving index 8 already has a value, we would need to compare index 8 value of [3, 5] with the new data [5, 3] to see which has the smallest array since both has the same array size, it does not get overwritten index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] [2, 2] [5] [3, 3] [2, 5] [3, 5] look at the 3rd element of the array [5, 3, 4] is 5 current index is 5 and value is [5] at 5 steps ahead of the current index, it is out of range, nothing needs to be changed index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] [2, 2] [5] [3, 3] [2, 5] [3, 5] move current value to the next index look at the 1st element of the array [2, 3, 5] is 2 current index is 6 and value is [3, 3] at 2 steps ahead of the current index, value can be copied from the current value [3, 3] and append the current element 2 into it resulting to [3, 3, 2] however, since current index 6 + current element 2 giving index 8 already has a value, we would need to compare index 8 value of [3, 5] with the new data [3, 3, 2] to see which has the smallest array since the initial value at index 8 has a smaller array size, it does not get overwritten index: 0 1 2 3 4 5 6 7 8 value: [] null [2] [3] [2, 2] [5] [3, 3] [2, 5] [3, 5] the rest are out of range, thus nothing needs to be changed  time complexity is O(n * m^2)space complexity is O(m^2) const bestSum = (targetSum, numbers) =&gt; { const table = Array(targetSum + 1).fill(null); table[0] = []; for (let i = 0; i &lt;= targetSum; i++) { if (table[i] !== null) { for (const num of numbers) { const combination = [...table[i], num]; if (!table[i + num] || table[i + num].length &gt; combination.length) { table[i + num] = combination; } } } } return table[targetSum]; }; console.log(bestSum(7, [5, 3, 4, 7])); // [7] console.log(bestSum(8, [2, 3, 5])); // [3, 5] console.log(bestSum(8, [1, 4, 5])); // [4, 4] console.log(bestSum(100, [1, 2, 5, 25])); // [25, 25, 25, 25]  "},{"title":"Grid Traveler example","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/gridTraveler","content":"","keywords":""},{"title":"Naive solution​","type":1,"pageTitle":"Grid Traveler example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/gridTraveler#naive-solution","content":"time complexity is O(2^(n + m)), which is reduced to O(2^n)space complexity is O(n + m), which is reduced to O(n) const gridTraveler = (m, n) =&gt; { if (m === 1 &amp;&amp; n === 1) return 1; if (m === 0 || n === 0) return 0; return gridTraveler(m - 1, n) + gridTraveler(m, n - 1); }; console.log(gridTraveler(1, 1)); // 1 console.log(gridTraveler(2, 3)); // 3 console.log(gridTraveler(3, 2)); // 3 console.log(gridTraveler(3, 3)); // 6 console.log(gridTraveler(18, 18)); // 2333606220  "},{"title":"Memoization solution​","type":1,"pageTitle":"Grid Traveler example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/gridTraveler#memoization-solution","content":"time complexity is O(m * n)space complexity is O(n + m), which is reduced to O(n) const gridTraveler = (m, n, memo = {}) =&gt; { const key = `${m},${n}`; if (key in memo) return memo[key]; if (m === 1 &amp;&amp; n === 1) return 1; if (m === 0 || n === 0) return 0; memo[key] = gridTraveler(m - 1, n, memo) + gridTraveler(m, n - 1, memo); return memo[key]; }; console.log(gridTraveler(1, 1)); // 1 console.log(gridTraveler(2, 3)); // 3 console.log(gridTraveler(3, 2)); // 3 console.log(gridTraveler(3, 3)); // 6 console.log(gridTraveler(18, 18)); // 2333606220  "},{"title":"Tabulation solution​","type":1,"pageTitle":"Grid Traveler example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/gridTraveler#tabulation-solution","content":"gridTraveler(2, 3) -&gt; 3 start by forming a table 0 1 2 3 --------- 0 | | | | | --------- 1 | | | | | --------- 2 | | | | | --------- next set all initial values as 0 0 1 2 3 --------- 0 |0|0|0|0| --------- 1 |0|0|0|0| --------- 2 |0|0|0|0| --------- next set all value to 1 for index 1, 1 0 1 2 3 --------- 0 |0|0|0|0| --------- 1 |0|1|0|0| --------- 2 |0|0|0|0| --------- during iteration, when current index is at 1, 1, add current value to index 1, 2 on the right, and index 2, 1 on the bottom 0 1 2 3 --------- 0 |0|0|0|0| --------- 1 |0|1|1|0| --------- 2 |0|1|0|0| --------- follow the same step as before 0 1 2 3 --------- 0 |0|0|0|0| --------- 1 |0|1|1|1| --------- 2 |0|1|1|0| --------- follow the same step as before, except that index 4, 1 is out of range, thus ignore 0 1 2 3 --------- 0 |0|0|0|0| --------- 1 |0|1|1|1| --------- 2 |0|1|1|1| --------- follow the same step as before, except that index 0, 3 is out of range, thus ignore 0 1 2 3 --------- 0 |0|0|0|0| --------- 1 |0|1|1|1| --------- 2 |0|1|1|1| --------- follow the same step as before, except that index 1, 3 is out of range, thus ignore 0 1 2 3 --------- 0 |0|0|0|0| --------- 1 |0|1|1|1| --------- 2 |0|1|2|1| --------- follow the same step as before, except that index 2, 3 is out of range, thus ignore 0 1 2 3 --------- 0 |0|0|0|0| --------- 1 |0|1|1|1| --------- 2 |0|1|2|3| --------- complete, index 3, 3 and index 4, 2 is out of range, thus ignore 0 1 2 3 --------- 0 |0|0|0|0| --------- 1 |0|1|1|1| --------- 2 |0|1|2|3| ---------  time complexity is O(m * n)space complexity is O(n * m) const gridTraveler = (m, n) =&gt; { const table = Array(m + 1) .fill() .map(() =&gt; Array(n + 1).fill(0)); table[1][1] = 1; for (let i = 0; i &lt;= m; i++) { for (let j = 0; j &lt;= n; j++) { const current = table[i][j]; if (j + 1 &lt;= n) table[i][j + 1] += current; if (i + 1 &lt;= m) table[i + 1][j] += current; } } return table[m][n]; }; console.log(gridTraveler(1, 1)); // 1 console.log(gridTraveler(2, 3)); // 3 console.log(gridTraveler(3, 2)); // 3 console.log(gridTraveler(3, 3)); // 6 console.log(gridTraveler(18, 18)); // 2333606220  "},{"title":"Recursion","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/recursion/","content":"","keywords":""},{"title":"Strategy​","type":1,"pageTitle":"Recursion","url":"docs/interviewPrep/algorithms_and_techniques/recursion/#strategy","content":"Define the base case / stopping conditionDo some work to shrink the problem space "},{"title":"Pros & Cons of using Recursion​","type":1,"pageTitle":"Recursion","url":"docs/interviewPrep/algorithms_and_techniques/recursion/#pros--cons-of-using-recursion","content":"Pros\tConsbridges the gap between elegance and complexity\tslow due to CPU overhead reduces the need for complex loops and auxiliary data structures\tcan lead to out of memory errors / stack overflow exceptions can reduce time complexity easily with memoization\tcan be unnecessarily complex if poorly constructed works really well with recursive structures like trees and graphs\t "},{"title":"Call Stack​","type":1,"pageTitle":"Recursion","url":"docs/interviewPrep/algorithms_and_techniques/recursion/#call-stack","content":""},{"title":"Normal Call Stack without Recursion​","type":1,"pageTitle":"Recursion","url":"docs/interviewPrep/algorithms_and_techniques/recursion/#normal-call-stack-without-recursion","content":"a is dependent on b which is dependent on c function a() { return &quot;hello &quot; + b(); } function b() { return &quot;my &quot; + c(); } function c() { return &quot;friends.&quot;; }  the following is a call stack each row is a stack frame when function a is called, the return value is added to the call stack |----------------| | | | | | | | &quot;hello &quot; + b() | |----------------| the return value also calls function b, it gets added to the call stack |----------------| | | | | | &quot;my &quot; + c() | | &quot;hello &quot; + b() | |----------------| the return value also calls function c, it gets added to the call stack |----------------| | | | &quot;friends.&quot; | | &quot;my &quot; + c() | | &quot;hello &quot; + b() | |----------------| since return value for this has hit the base case, it will start executing by poping the top stack frame from the call stack return result: &quot;friends.&quot; |--------------------| | | | | | &quot;my &quot; + &quot;friends.&quot; | | &quot;hello &quot; + b() | |--------------------| return result: &quot;my friends.&quot; |--------------------------| | | | | | | | &quot;hello &quot; + &quot;my friends.&quot; | |--------------------------| return result: &quot;hello my friends.&quot; |--------------------------| | | | | | | | | |--------------------------|  "},{"title":"Call Stack with Recursion​","type":1,"pageTitle":"Recursion","url":"docs/interviewPrep/algorithms_and_techniques/recursion/#call-stack-with-recursion","content":"function a() { return a(); }   a() |--a()--| -&gt; stack overflow when we run out of memory | a() | | a() | |-------|  the above example illustrates why a base case is required to prevent a stack overflow situation a return value is important to do so "},{"title":"Decimal To Binary","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/recursion/decimalToBinary","content":"","keywords":""},{"title":"Iterative solution​","type":1,"pageTitle":"Decimal To Binary","url":"docs/interviewPrep/algorithms_and_techniques/recursion/decimalToBinary#iterative-solution","content":"function findBinary(decimal, result = &quot;&quot;) { if (decimal === 0) return result; while (decimal &gt; 0) { const remainder = decimal % 2; decimal = Math.floor(decimal / 2); result = remainder + result; } return result; }  "},{"title":"Fibonacci example","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/fibonacci","content":"","keywords":""},{"title":"Naive solution​","type":1,"pageTitle":"Fibonacci example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/fibonacci#naive-solution","content":"time complexity is O(2^n)space complexity is O(n) // if fib starts with 1 const fib = (n) =&gt; { if (n &lt;= 2) return 1; return fib(n - 1) + fib(n - 2); }; console.log(fib(6)); // 8 console.log(fib(7)); // 13 console.log(fib(8)); // 21 console.log(fib(50)); // 12,586,269,025, will take very long to compute  graph display of what goes behind the hood during `fib(7)` each number of 2 or 1 will return the value of 1 value both child will add up and be returned to the parent this goes on up the tree to give the final value of 13 7 / \\ 6 5 / \\ / \\ 5 4 4 3 / \\ / \\ / \\ / \\ 4 3 3 2 3 2 2 1 /\\ /\\ /\\ /\\ 3 2 2 1 2 1 2 1 /\\ 2 1  breaking down fibonacci time complexity this will return O(n) time complexitythis will also return O(n) space complexity as it has n times function calls added to the stack const foo = (n) =&gt; { if (n &lt;= 2) return; foo(n - 1); };  graph display when n is 5 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1  this will return O(n/2) time complexity which is the same as O(n) by removing the constantthis will also return O(n/2) space complexity as it has n/2 times function calls added to the stack becomes O(n) after removing the constant const bar = (n) =&gt; { if (n &lt;= 1) return; bar(n - 2); };  graph display when n is 5 5 -&gt; 3 -&gt; 1  this will return O(2^n) time complexity because at each level it would call the function 2 times from its parent nodethis will also return O(n) space complexity as it only has n level of function calls each time the function that has already been called would be removed, thus not contributing to the space complexity const dib = (n) =&gt; { if (n &lt;= 1) return; dib(n - 1); dib(n - 1); };  graph display when n is 5 which is also the number of levels for this case 5 1 / \\ 4 4 * 2 / \\ / \\ 3 3 3 3 * 2 / \\ / \\ / \\ / \\ 2 2 2 2 2 2 2 2 * 2 /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 * 2  this will return O(2^(n/2)) time complexity because at each level it would call the function 2 times from its parent node and it will reduce by 2 levels, so after simplifying it becomes O(2^n) this will also return O(n/2) space complexity as it only has n level of function calls and will also reduce by 2 level each time, so after simplifying it becomes O(n)the function that has already been called would be removed, thus not contributing to the space complexity const lib = (n) =&gt; { if (n &lt;= 1) return; lib(n - 2); lib(n - 2); };  graph display when n is 5 which is also the number of levels for this case 5 1 / \\ 3 3 * 2 / \\ / \\ 1 1 1 1 * 2  therefore the complexity of fib is time: O(dib) &lt;= O(fib) &lt;= O(lib) O(2^n) &lt;= O(???) &lt;= O(2^n) thus fib is also O(2^n) count the number of different ways to move through a 6x9 gridgiven a set of coins, how can we make 27 cents in the least number of coinsgiven a set of substrings, what are the possible ways to construct the string &quot;potentpot&quot; "},{"title":"Memoization solution​","type":1,"pageTitle":"Fibonacci example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/fibonacci#memoization-solution","content":"time complexity is O(2n), simplified to O(n)space complexity is O(n) // memoization // js object, keys will be arg to functoin, value will be the return value // if fib starts with 1 const fib = (n, memo = {}) =&gt; { if (n in memo) return memo[n]; if (n &lt;= 2) return 1; memo[n] = fib(n - 1, memo) + fib(n - 2, memo); return memo[n]; }; console.log(fib(6)); // 8 console.log(fib(7)); // 13 console.log(fib(8)); // 21 console.log(fib(50)); // 12,586,269,025, will take very fast to compute  // change to memo = {1: 0, 2: 1} if fib starts with 0 const fib = (n, memo = {1: 1, 2: 1}) =&gt; { if (n in memo) return memo[n]; memo[n] = fib(n - 1, memo) + fib(n - 2, memo); return memo[n]; };  graph display of what goes behind the hood during `fib(7)` with memoization values that has already been stored in the memo will be used and does not requires computation memo { 3: 2, 4: 3, 5: 5, 6: 8, 7, 13 } 7 / \\ 6 5 / \\ 5 4 / \\ 4 3 / \\ 3 2 / \\ 2 1  "},{"title":"Tabulation solution​","type":1,"pageTitle":"Fibonacci example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/fibonacci#tabulation-solution","content":"start index 1 value of 1 [0, 1, 0] if n is 2 fib(6) -&gt; 8 start current position at index 0 index: 0, 1, 2, 3, 4, 5, 6 value: 0, 1, 0, 0, 0, 0, 0 when current position is at index 0, value at index 1 and index 2 needs to add index 0 value results: index: 0, 1, 2, 3, 4, 5, 6 value: 0, 1+0, 0+0, 0, 0, 0, 0 _______________________________ current position at index 1 index: 0, 1, 2, 3, 4, 5, 6 value: 0, 1, 0, 0, 0, 0, 0 when current position is at index 1, value at index 2 and index 3 needs to add index 1 value results: index: 0, 1, 2, 3, 4, 5, 6 value: 0, 1, 0+1, 0+1, 0, 0, 0 _______________________________ current position at index 2 index: 0, 1, 2, 3, 4, 5, 6 value: 0, 1, 1, 1, 0, 0, 0 when current position is at index 2, value at index 3 and index 4 needs to add index 2 value results: index: 0, 1, 2, 3, 4, 5, 6 value: 0, 1, 1, 1+1, 0+1, 0, 0 _______________________________ current position at index 3 index: 0, 1, 2, 3, 4, 5, 6 value: 0, 1, 1, 2, 1, 0, 0 when current position is at index 3, value at index 4 and index 5 needs to add index 3 value results: index: 0, 1, 2, 3, 4, 5, 6 value: 0, 1, 1, 2, 1+2, 0+2, 0 _______________________________ current position at index 4 index: 0, 1, 2, 3, 4, 5, 6 value: 0, 1, 1, 2, 3, 2, 0 when current position is at index 4, value at index 5 and index 6 needs to add index 4 value results: index: 0, 1, 2, 3, 4, 5, 6 value: 0, 1, 1, 2, 3, 2+3, 0+3 _______________________________ current position at index 5 index: 0, 1, 2, 3, 4, 5, 6 value: 0, 1, 1, 2, 3, 5, 3 when current position is at index 5, value at index 6 needs to add index 5 value results: index: 0, 1, 2, 3, 4, 5, 6 value: 0, 1, 1, 2, 3, 5, 3+5  time complexity is O(n)space complexity is O(n) const fib = (n) =&gt; { const table = Array(n + 1).fill(0); // if fib starts with 1 table[1] = 1; // change to table[2] = 1; if fib starts with 0 for (let i = 0; i &lt; n; i++) { table[i + 1] += table[i]; if (i + 2 &lt;= n) { // not required in javascript table[i + 2] += table[i]; } } return table[n]; };  time complexity is O(n)space complexity is O(1) const fib = (n) =&gt; { const lastTwo = [0, 1]; let counter = 2; // if fib starts with 1 // change to let counter = 3; if fib starts with 0 while (counter &lt;= n) { const lastFibValue = lastTwo[0] + lastTwo[1]; lastTwo[0] = lastTwo[1]; lastTwo[1] = lastFibValue; counter++; } return lastTwo[1]; // if fib starts with 1 // change to return n &gt; 1 ? lastTwo[1] : lastTwo[0]; if fib starts with 0 };  "},{"title":"Can Construct example","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/canConstruct","content":"","keywords":""},{"title":"Naive solution​","type":1,"pageTitle":"Can Construct example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/canConstruct#naive-solution","content":"time complexity is O((n^m) * m)space complexity is O(m * m), simplified to O(m^2) const canConstruct = (target, wordBank) =&gt; { if (target === &quot;&quot;) return true; for (const word of wordBank) { // time n if (target.indexOf(word) === 0) { const suffix = target.slice(word.length); // time, space this copies an array which the worst case will be m times if (canConstruct(suffix, wordBank)) { // time ^m, n has to be recalled depending on m, space m return true; } } } return false; }; console.log(canConstruct(&quot;abcdef&quot;, [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;])); // true console.log( canConstruct(&quot;skateboard&quot;, [&quot;bo&quot;, &quot;rd&quot;, &quot;ate&quot;, &quot;t&quot;, &quot;ska&quot;, &quot;sk&quot;, &quot;boar&quot;]) ); // false console.log( canConstruct(&quot;enterapotentpot&quot;, [&quot;a&quot;, &quot;p&quot;, &quot;ent&quot;, &quot;enter&quot;, &quot;ot&quot;, &quot;o&quot;, &quot;t&quot;]) ); // true console.log( canConstruct(&quot;eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef&quot;, [ &quot;e&quot;, &quot;ee&quot;, &quot;eee&quot;, &quot;eeee&quot;, &quot;eeeee&quot;, &quot;eeeeee&quot;, ]) ); // false  "},{"title":"Memoization solution​","type":1,"pageTitle":"Can Construct example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/canConstruct#memoization-solution","content":"time complexity is O(n * m * m), simplified to O(n * m^2)space complexity is O(m * m), simplified to O(m^2) const canConstruct = (target, wordBank, memo = {}) =&gt; { if (target in memo) return memo[target]; // space m if (target === &quot;&quot;) return true; for (const word of wordBank) { // time n if (target.indexOf(word) === 0) { const suffix = target.slice(word.length); // time, space this copies an array which the worst case will be m times if (canConstruct(suffix, wordBank, memo)) { // time m, since no duplicate of n is being compute memo[target] = true; return true; } } } memo[target] = false; return false; }; console.log(canConstruct(&quot;abcdef&quot;, [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;])); // true console.log( canConstruct(&quot;skateboard&quot;, [&quot;bo&quot;, &quot;rd&quot;, &quot;ate&quot;, &quot;t&quot;, &quot;ska&quot;, &quot;sk&quot;, &quot;boar&quot;]) ); // false console.log( canConstruct(&quot;enterapotentpot&quot;, [&quot;a&quot;, &quot;p&quot;, &quot;ent&quot;, &quot;enter&quot;, &quot;ot&quot;, &quot;o&quot;, &quot;t&quot;]) ); // true console.log( canConstruct(&quot;eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef&quot;, [ &quot;e&quot;, &quot;ee&quot;, &quot;eee&quot;, &quot;eeee&quot;, &quot;eeeee&quot;, &quot;eeeeee&quot;, ]) ); // false  "},{"title":"Tabulation solution​","type":1,"pageTitle":"Can Construct example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/canConstruct#tabulation-solution","content":"canConstruct(&quot;abcdef&quot;, [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;]) -&gt; true m = target n = wordBank.length first create an array the size of the target.length + 1 set default value to be false index : 0 1 2 3 4 5 6 value : false false false false false false false Actual char: a b c d e f when target value is an empty string, no string concatenation is required to get &quot;&quot;, therefore return value should be true index : 0 1 2 3 4 5 6 value : true false false false false false false Actual char: a b c d e f look at the 1st element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;ab&quot; current index is 0, value is True, and actual char is &quot;a&quot; since first char of &quot;ab&quot; === actual char &quot;a&quot; we can look at &quot;ab&quot; char length 2 steps ahead of the current index, value can be changed to the same as current value true index : 0 1 2 3 4 5 6 value : true false true false false false false Actual char: a b c d e f look at the 2nd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;abc&quot; current index is 0, value is True, and actual char is &quot;a&quot; since first char of &quot;abc&quot; === actual char &quot;a&quot; we can look at &quot;abc&quot; char length 3 steps ahead of the current index, value can be changed to the same as current value true index : 0 1 2 3 4 5 6 value : true false true true false false false Actual char: a b c d e f look at the 3rd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;cd&quot; current index is 0, value is True, and actual char is &quot;a&quot; since first char of &quot;cd&quot; !== actual char &quot;a&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : true false true true false false false Actual char: a b c d e f look at the 4th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;def&quot; current index is 0, value is True, and actual char is &quot;a&quot; since first char of &quot;def&quot; !== actual char &quot;a&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : true false true true false false false Actual char: a b c d e f look at the 5th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;abcd&quot; current index is 0, value is True, and actual char is &quot;a&quot; since first char of &quot;abcd&quot; === actual char &quot;a&quot; we can look at &quot;abcd&quot; char length 4 steps ahead of the current index, value can be changed to the same as current value true index : 0 1 2 3 4 5 6 value : true false true true true false false Actual char: a b c d e f move current value to the next index look at the 1st element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;ab&quot; current index is 1, value is false, and actual char is &quot;b&quot; since value is false, we can skip the entire process and move to the next index index : 0 1 2 3 4 5 6 value : true false true true true false false Actual char: a b c d e f move current value to the next index look at the 1st element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;ab&quot; current index is 2, value is True, and actual char is &quot;c&quot; since first char of &quot;ab&quot; !== actual char &quot;c&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : true false true true true false false Actual char: a b c d e f look at the 2nd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;abc&quot; current index is 2, value is True, and actual char is &quot;c&quot; since first char of &quot;abc&quot; !== actual char &quot;c&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : true false true true true false false Actual char: a b c d e f look at the 3rd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;cd&quot; current index is 2, value is True, and actual char is &quot;c&quot; since first char of &quot;cd&quot; === actual char &quot;c&quot; we can look at &quot;cd&quot; char length 2 steps ahead of the current index, value can be changed to the same as current value true index : 0 1 2 3 4 5 6 value : true false true true true false false Actual char: a b c d e f look at the 4th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;def&quot; current index is 2, value is True, and actual char is &quot;c&quot; since first char of &quot;def&quot; !== actual char &quot;c&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : true false true true true false false Actual char: a b c d e f look at the 5th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;abcd&quot; current index is 2, value is True, and actual char is &quot;c&quot; since first char of &quot;abcd&quot; !== actual char &quot;c&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : true false true true true false false Actual char: a b c d e f move current value to the next index look at the 1st element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;ab&quot; current index is 3, value is True, and actual char is &quot;d&quot; since first char of &quot;ab&quot; !== actual char &quot;d&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : true false true true true false false Actual char: a b c d e f look at the 2nd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;abc&quot; current index is 3, value is True, and actual char is &quot;d&quot; since first char of &quot;abc&quot; !== actual char &quot;d&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : true false true true true false false Actual char: a b c d e f look at the 3rd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;cd&quot; current index is 3, value is True, and actual char is &quot;d&quot; since first char of &quot;cd&quot; !== actual char &quot;d&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : true false true true true false false Actual char: a b c d e f look at the 4th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;] is &quot;def&quot; current index is 3, value is True, and actual char is &quot;d&quot; since first char of &quot;def&quot; === actual char &quot;d&quot; we can look at &quot;def&quot; char length 3 steps ahead of the current index, value can be changed to the same as current value true index : 0 1 2 3 4 5 6 value : true false true true true false true Actual char: a b c d e f we can stop here, since nothing else will change  time complexity is O(n * m * m), simplified to O(n * m^2)space complexity is O(m) const canConstruct = (target, wordBank) =&gt; { const table = Array(target.length + 1).fill(false); // space m table[0] = true; for (let i = 0; i &lt;= target.length; i++) { // time m if (table[i]) { for (const word of wordBank) { // time n if (target.slice(i, i + word.length) === word) { // time m table[i + word.length] = true; } } } } return table[target.length]; }; console.log(canConstruct(&quot;abcdef&quot;, [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;])); // true console.log( canConstruct(&quot;skateboard&quot;, [&quot;bo&quot;, &quot;rd&quot;, &quot;ate&quot;, &quot;t&quot;, &quot;ska&quot;, &quot;sk&quot;, &quot;boar&quot;]) ); // false console.log( canConstruct(&quot;enterapotentpot&quot;, [&quot;a&quot;, &quot;p&quot;, &quot;ent&quot;, &quot;enter&quot;, &quot;ot&quot;, &quot;o&quot;, &quot;t&quot;]) ); // true console.log( canConstruct(&quot;eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef&quot;, [ &quot;e&quot;, &quot;ee&quot;, &quot;eee&quot;, &quot;eeee&quot;, &quot;eeeee&quot;, &quot;eeeeee&quot;, ]) ); // false  "},{"title":"How Sum example","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/howSum","content":"","keywords":""},{"title":"Naive solution​","type":1,"pageTitle":"How Sum example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/howSum#naive-solution","content":"time complexity is O((n^m) * m), where m = target sum, n = numbers.lengthspace complexity is O(m) const howSum = (targetSum, numbers) =&gt; { if (targetSum === 0) return []; if (targetSum &lt; 0) return null; for (const num of numbers) { const remainder = targetSum - num; const remainderResult = howSum(remainder, numbers); if (remainderResult !== null) { return [...remainderResult, num]; // this copies an array which the worst case will be m times } } return null; }; console.log(howSum(7, [2, 3])); // [3, 2, 2] console.log(howSum(7, [5, 3, 4, 7])); // [4, 3] console.log(howSum(7, [2, 4])); // null console.log(howSum(8, [2, 3, 5])); // [2, 2, 2, 2] console.log(howSum(300, [7, 14])); // null  "},{"title":"Memoization solution​","type":1,"pageTitle":"How Sum example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/howSum#memoization-solution","content":"time complexity is O(n * m * m), simplified to O(n * m^2)space complexity is O(m * m), simplified to O(m^2) const howSum = (targetSum, numbers, memo = {}) =&gt; { if (targetSum in memo) return memo[targetSum]; if (targetSum === 0) return []; if (targetSum &lt; 0) return null; for (const num of numbers) { const remainder = targetSum - num; const remainderResult = howSum(remainder, numbers, memo); if (remainderResult !== null) { memo[targetSum] = [...remainderResult, num]; // sometimes values for the key would be an array return memo[targetSum]; } } memo[targetSum] = null; return null; }; console.log(howSum(7, [2, 3])); // [3, 2, 2] console.log(howSum(7, [5, 3, 4, 7])); // [4, 3] console.log(howSum(7, [2, 4])); // null console.log(howSum(8, [2, 3, 5])); // [2, 2, 2, 2] console.log(howSum(300, [7, 14])); // null  "},{"title":"Tabulation solution​","type":1,"pageTitle":"How Sum example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/howSum#tabulation-solution","content":"howSum(7, [5, 3, 4]) -&gt; [4, 3] m = targetSum n = numbers.length first create an array the size of the target sum + 1 set default value to be null index: 0 1 2 3 4 5 6 7 value: null null null null null null null null when targetSum is at 0, no sum is required to get 0, therefore return value should be [] index: 0 1 2 3 4 5 6 7 value: [] null null null null null null null look at the 1st element of the array [5, 3, 4] is 5 current index is 0 and value is [] current index 0, can return 0 by not adding at 5 steps ahead of the current index, value can be changed to the same as current value [] and appends the current element 5 into it resulting to [5] index: 0 1 2 3 4 5 6 7 value: [] null null null null [5] null null look at the 2nd element of the array [5, 3, 4] is 3 current index is 0 and value is [] current index 0, can return 0 by not adding at 3 steps ahead of the current index, value can be copied from the current value [] and append the current element 3 into it resulting to [3] index: 0 1 2 3 4 5 6 7 value: [] null null [3] null [5] null null look at the 3rd element of the array [5, 3, 4] is 4 current index is 0 and value is [] current index 0, can return 0 by not adding at 4 steps ahead of the current index, value can be copied from the current value [] and append the current element 4 into it resulting to [4] index: 0 1 2 3 4 5 6 7 value: [] null null [3] [4] [5] null null move current value to the next index look at the 1st element of the array [5, 3, 4] is 5 current index is 1 and value is null if current value is null, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: [] null null [3] [4] [5] null null look at the 1st element of the array [5, 3, 4] is 3 current index is 1 and value is null if current value is null, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: [] null null [3] [4] [5] null null look at the 1st element of the array [5, 3, 4] is 4 current index is 1 and value is null if current value is null, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: [] null null [3] [4] [5] null null move current value to the next index look at the 1st element of the array [5, 3, 4] is 5 current index is 2 and value is null if current value is null, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: [] null null [3] [4] [5] null null look at the 1st element of the array [5, 3, 4] is 3 current index is 2 and value is null if current value is null, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: [] null null [3] [4] [5] null null look at the 1st element of the array [5, 3, 4] is 4 current index is 2 and value is null if current value is null, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: [] null null [3] [4] [5] null null move current value to the next index look at the 1st element of the array [5, 3, 4] is 5 current index is 3 and value is [3] at 5 steps ahead of the current index, it is out of range, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: [] null null [3] [4] [5] null null look at the 2nd element of the array [5, 3, 4] is 3 current index is 3 and value is [3] at 3 steps ahead of the current index, value can be copied from the current value [3] and append the current element 3 into it resulting to [3, 3] index: 0 1 2 3 4 5 6 7 value: [] null null [3] [4] [5] [3, 3] null look at the 3rd element of the array [5, 3, 4] is 4 current index is 3 and value is [3] at 4 steps ahead of the current index, value can be copied from the current value [3] and append the current element 4 into it resulting to [3, 4] index: 0 1 2 3 4 5 6 7 value: [] null null [3] [4] [5] [3, 3] [3, 4] we can stop here, but just for example purposes, we will continue 1 more step we can continue the loop till the end and it would still provide the same valid answer move current value to the next index look at the 1st element of the array [5, 3, 4] is 5 current index is 4 and value is [4] at 5 steps ahead of the current index, it is out of range, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: [] null null [3] [4] [5] [3, 3] [3, 4] look at the 2nd element of the array [5, 3, 4] is 3 current index is 4 and value is [4] at 3 steps ahead of the current index, value can be copied from the current value [4] and append the current element 3 into it resulting to [4, 3] note that value at index 7 gets overwritten index: 0 1 2 3 4 5 6 7 value: [] null null [3] [4] [5] [3, 3] [4, 3] look at the 3rd element of the array [5, 3, 4] is 4 current index is 4 and value is [4] at 4 steps ahead of the current index, it is out of range, nothing needs to be changed index: 0 1 2 3 4 5 6 7 value: [] null null [3] [4] [5] [3, 3] [4, 3]  time complexity is O(n * m * m), simplified to O(n * m^2)space complexity is O(m * m), simplified to O(m^2) const howSum = (targetSum, numbers) =&gt; { const table = Array(targetSum + 1).fill(null); // space: m table[0] = []; for (let i = 0; i &lt;= targetSum; i++) { // time: m if (table[i] !== null) { for (const num of numbers) { // time: n table[i + num] = [...table[i], num]; // time &amp; space: m } } } return table[targetSum]; }; console.log(howSum(7, [2, 3])); // [3, 2, 2] console.log(howSum(7, [5, 3, 4, 7])); // [4, 3] console.log(howSum(7, [2, 4])); // null console.log(howSum(8, [2, 3, 5])); // [2, 2, 2, 2] console.log(howSum(300, [7, 14])); // null  "},{"title":"Sum of natural numbers","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/recursion/sumOfNaturalNumbers","content":"","keywords":""},{"title":"Iterative solution​","type":1,"pageTitle":"Sum of natural numbers","url":"docs/interviewPrep/algorithms_and_techniques/recursion/sumOfNaturalNumbers#iterative-solution","content":"function recursiveSummation(inputNum) { let sum = 0; for (let i = 0; i &lt; inputNum; i++) { sum += inputNum - i; } return sum; }  "},{"title":"Palindrome","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/recursion/palindrome","content":"","keywords":""},{"title":"Iterative solution​","type":1,"pageTitle":"Palindrome","url":"docs/interviewPrep/algorithms_and_techniques/recursion/palindrome#iterative-solution","content":"function isPalindrome(input) { const midIndex = Math.ceil(input.length / 2); for (let i = 0; i &lt; midIndex; i++) { if (input[0 + i] !== input[input.length - 1 - i]) { return false; } } return true; }  "},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/recursion/reverseString/java","content":"","keywords":""},{"title":"Recursion​","type":1,"pageTitle":"Java Example","url":"docs/interviewPrep/algorithms_and_techniques/recursion/reverseString/java#recursion","content":"public class MyClass { public static void main(String args[]) { String test = &quot;abcdef&quot;; System.out.println(reverseStr(test)); } public static String reverseStr(String s) { if (s.isEmpty()) { return s; } return reverseStr(s.substring(1)) + s.charAt(0); } }  "},{"title":"Iteration​","type":1,"pageTitle":"Java Example","url":"docs/interviewPrep/algorithms_and_techniques/recursion/reverseString/java#iteration","content":"public class MyClass { public static void main(String args[]) { String test = &quot;abcdef&quot;; System.out.println(reverseStr(test)); } public static String reverseStr2(String s) { String res = &quot;&quot;; for (int i=0; i&lt;s.length(); i++) { res = s.charAt(i) + res; } return res; } }  "},{"title":"Recursion with strings","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/recursion/reverseString/","content":"","keywords":""},{"title":"Iterative solution​","type":1,"pageTitle":"Recursion with strings","url":"docs/interviewPrep/algorithms_and_techniques/recursion/reverseString/#iterative-solution","content":"function reverseString(input) { const midIndex = Math.ceil(input.length / 2); const strArr = input.split(&quot;&quot;); for (let i = 0; i &lt; midIndex; i++) { [strArr[0 + i], strArr[strArr.length - 1 - i]] = [ strArr[strArr.length - 1 - i], strArr[0 + i], ]; } return strArr.join(&quot;&quot;); }  function reverseString(input) { let res = &quot;&quot;; for (let i = 0; i &lt; input.length; i++) { res = input[i] + res; } return res; }  "},{"title":"Reverse Linked List","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/recursion/reverseLinkedList","content":"","keywords":""},{"title":"Iterative solution​","type":1,"pageTitle":"Reverse Linked List","url":"docs/interviewPrep/algorithms_and_techniques/recursion/reverseLinkedList#iterative-solution","content":"function reverseList(head) { let newNext = null; let current = head; while (current) { const tmp = current.next; current.next = newNext; newNext = current; current = tmp; } return newNext; }  "},{"title":"Count Construct example","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/countConstruct","content":"","keywords":""},{"title":"Naive solution​","type":1,"pageTitle":"Count Construct example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/countConstruct#naive-solution","content":"time complexity is O((n^m) * m)space complexity is O(m * m), simplified to O(m^2) const countConstruct = (target, wordBank) =&gt; { if (target === &quot;&quot;) return 1; let totalCount = 0; for (const word of wordBank) { // time n if (target.indexOf(word) === 0) { const numWaysForRest = countConstruct( target.slice(word.length), wordBank ); // time ^m, * m, space m^2 totalCount += numWaysForRest; } } return totalCount; }; console.log(countConstruct(&quot;purple&quot;, [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;])); // 2 console.log(countConstruct(&quot;abcdef&quot;, [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;])); // 1 console.log( countConstruct(&quot;skateboard&quot;, [&quot;bo&quot;, &quot;rd&quot;, &quot;ate&quot;, &quot;t&quot;, &quot;ska&quot;, &quot;sk&quot;, &quot;boar&quot;]) ); // 0 console.log( countConstruct(&quot;enterapotentpot&quot;, [&quot;a&quot;, &quot;p&quot;, &quot;ent&quot;, &quot;enter&quot;, &quot;ot&quot;, &quot;o&quot;, &quot;t&quot;]) ); // 4 console.log( countConstruct(&quot;eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef&quot;, [ &quot;e&quot;, &quot;ee&quot;, &quot;eee&quot;, &quot;eeee&quot;, &quot;eeeee&quot;, &quot;eeeeee&quot;, ]) ); // 0  "},{"title":"Memoization solution​","type":1,"pageTitle":"Count Construct example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/countConstruct#memoization-solution","content":"time complexity is O(n m m), simplified to O(n * m^2)space complexity is O(m * m), simplified to O(m^2) const countConstruct = (target, wordBank, memo = {}) =&gt; { if (target in memo) return memo[target]; // space m if (target === &quot;&quot;) return 1; let totalCount = 0; for (const word of wordBank) { // time n if (target.indexOf(word) === 0) { const numWaysForRest = countConstruct( target.slice(word.length), wordBank, memo ); // time m * m, space m totalCount += numWaysForRest; } } memo[target] = totalCount; return totalCount; }; console.log(countConstruct(&quot;purple&quot;, [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;])); // 2 console.log(countConstruct(&quot;abcdef&quot;, [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;])); // 1 console.log( countConstruct(&quot;skateboard&quot;, [&quot;bo&quot;, &quot;rd&quot;, &quot;ate&quot;, &quot;t&quot;, &quot;ska&quot;, &quot;sk&quot;, &quot;boar&quot;]) ); // 0 console.log( countConstruct(&quot;enterapotentpot&quot;, [&quot;a&quot;, &quot;p&quot;, &quot;ent&quot;, &quot;enter&quot;, &quot;ot&quot;, &quot;o&quot;, &quot;t&quot;]) ); // 4 console.log( countConstruct(&quot;eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef&quot;, [ &quot;e&quot;, &quot;ee&quot;, &quot;eee&quot;, &quot;eeee&quot;, &quot;eeeee&quot;, &quot;eeeeee&quot;, ]) ); // 0  "},{"title":"Tabulation solution​","type":1,"pageTitle":"Count Construct example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/countConstruct#tabulation-solution","content":"countConstruct(&quot;purple&quot;, [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;]) -&gt; 2 m = target n = wordBank.length first create an array the size of the target.length + 1 set default value to be 0 index : 0 1 2 3 4 5 6 value : 0 0 0 0 0 0 0 Actual char: p u r p l e when target value is an empty string, no string concatenation is required to get &quot;&quot;, therefore return value should be 1 index : 0 1 2 3 4 5 6 value : 1 0 0 0 0 0 0 Actual char: p u r p l e look at the 1st element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;purp&quot; current index is 0, value is 1, and actual char is &quot;p&quot; since first char of &quot;purp&quot; === actual char &quot;p&quot; we can look at &quot;purp&quot; char length 4 steps ahead of the current index, value can be changed to the same as current value 1 index : 0 1 2 3 4 5 6 value : 1 0 0 0 1 0 0 Actual char: p u r p l e look at the 2nd element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;p&quot; current index is 0, value is 1, and actual char is &quot;p&quot; since first char of &quot;p&quot; === actual char &quot;p&quot; we can look at &quot;p&quot; char length 1 steps ahead of the current index, value can be changed to the same as current value 1 index : 0 1 2 3 4 5 6 value : 1 1 0 0 1 0 0 Actual char: p u r p l e look at the 3rd element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;ur&quot; current index is 0, value is 1, and actual char is &quot;p&quot; since first char of &quot;ur&quot; !== actual char &quot;p&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : 1 1 0 0 1 0 0 Actual char: p u r p l e look at the 4th element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;le&quot; current index is 0, value is 1, and actual char is &quot;p&quot; since first char of &quot;le&quot; !== actual char &quot;p&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : 1 1 0 0 1 0 0 Actual char: p u r p l e look at the 5th element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;purpl&quot; current index is 0, value is 1, and actual char is &quot;p&quot; since first char of &quot;purpl&quot; === actual char &quot;p&quot; we can look at &quot;purpl&quot; char length 5 steps ahead of the current index, value can be changed to the same as current value 1 index : 0 1 2 3 4 5 6 value : 1 1 0 0 1 1 0 Actual char: p u r p l e move current value to the next index look at the 1st element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;purp&quot; current index is 1, value is 1, and actual char is &quot;u&quot; since first char of &quot;purp&quot; !== actual char &quot;u&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : 1 1 0 0 1 1 0 Actual char: p u r p l e look at the 2nd element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;p&quot; current index is 1, value is 1, and actual char is &quot;u&quot; since first char of &quot;p&quot; !== actual char &quot;u&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : 1 1 0 0 1 1 0 Actual char: p u r p l e look at the 3rd element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;ur&quot; current index is 1, value is 1, and actual char is &quot;u&quot; since first char of &quot;ur&quot; === actual char &quot;u&quot; we can look at &quot;ur&quot; char length 2 steps ahead of the current index, value can be changed to the same as current value 1 index : 0 1 2 3 4 5 6 value : 1 1 0 1 1 1 0 Actual char: p u r p l e look at the 4th element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;le&quot; current index is 1, value is 1, and actual char is &quot;u&quot; since first char of &quot;le&quot; !== actual char &quot;u&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : 1 1 0 1 1 1 0 Actual char: p u r p l e look at the 5th element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;purpl&quot; current index is 1, value is 1, and actual char is &quot;u&quot; since first char of &quot;purpl&quot; !== actual char &quot;u&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : 1 1 0 1 1 1 0 Actual char: p u r p l e move current value to the next index look at the 1st element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;purp&quot; current index is 2, value is 0, and actual char is &quot;r&quot; since value is 0 we can ignore and skip the entire process and move to the next index index : 0 1 2 3 4 5 6 value : 1 1 0 1 1 1 0 Actual char: p u r p l e move current value to the next index look at the 1st element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;purp&quot; current index is 3, value is 1, and actual char is &quot;p&quot; since first char of &quot;purp&quot; === actual char &quot;p&quot; we can look at &quot;purp&quot; char length 4 steps ahead of the current index, it is out of range, nothing needs to be changed index : 0 1 2 3 4 5 6 value : 1 1 0 1 1 1 0 Actual char: p u r p l e look at the 2nd element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;p&quot; current index is 3, value is 1, and actual char is &quot;p&quot; since first char of &quot;p&quot; === actual char &quot;p&quot; we can look at &quot;p&quot; char length 1 steps ahead of the current index, existing value of 1 can be added to the current value 1 changing the value to 2 index : 0 1 2 3 4 5 6 value : 1 1 0 1 2 1 0 Actual char: p u r p l e look at the 3rd element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;ur&quot; current index is 3, value is 1, and actual char is &quot;p&quot; since first char of &quot;ur&quot; !== actual char &quot;p&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : 1 1 0 1 2 1 0 Actual char: p u r p l e look at the 4th element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;le&quot; current index is 3, value is 1, and actual char is &quot;p&quot; since first char of &quot;le&quot; !== actual char &quot;p&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : 1 1 0 1 2 1 0 Actual char: p u r p l e look at the 5th element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;purpl&quot; current index is 3, value is 1, and actual char is &quot;p&quot; since first char of &quot;purpl&quot; === actual char &quot;p&quot; we can look at &quot;purpl&quot; char length 5 steps ahead of the current index, it is out of range, nothing needs to be changed index : 0 1 2 3 4 5 6 value : 1 1 0 1 2 1 0 Actual char: p u r p l e move current value to the next index look at the 1st element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;purp&quot; current index is 4, value is 2, and actual char is &quot;l&quot; since first char of &quot;purp&quot; !== actual char &quot;l&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : 1 1 0 1 2 1 0 Actual char: p u r p l e look at the 2nd element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;p&quot; current index is 4, value is 2, and actual char is &quot;l&quot; since first char of &quot;p&quot; !== actual char &quot;l&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : 1 1 0 1 2 1 0 Actual char: p u r p l e look at the 3rd element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;ur&quot; current index is 4, value is 2, and actual char is &quot;l&quot; since first char of &quot;ur&quot; !== actual char &quot;l&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : 1 1 0 1 2 1 0 Actual char: p u r p l e look at the 4th element of the array [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;] is &quot;le&quot; current index is 4, value is 2, and actual char is &quot;l&quot; since first char of &quot;le&quot; === actual char &quot;l&quot; we can look at &quot;le&quot; char length 2 steps ahead of the current index, existing value of 0 can be added to the current value 2 changing the value to 2 index : 0 1 2 3 4 5 6 value : 1 1 0 1 2 1 2 Actual char: p u r p l e we can stop here, since nothing else will change  time complexity is O(n m m), simplified to O(n * m^2)space complexity is O(m), simplified to O(m) const countConstruct = (target, wordBank) =&gt; { const table = Array(target.length + 1).fill(0); // space m table[0] = 1; for (let i = 0; i &lt;= target.length; i++) { // time m for (const word of wordBank) { // time n if (target.slice(i, i + word.length) === word) { // time m table[i + word.length] += table[i]; } } } return table[target.length]; }; console.log(countConstruct(&quot;purple&quot;, [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;])); // 2 console.log(countConstruct(&quot;abcdef&quot;, [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;])); // 1 console.log( countConstruct(&quot;skateboard&quot;, [&quot;bo&quot;, &quot;rd&quot;, &quot;ate&quot;, &quot;t&quot;, &quot;ska&quot;, &quot;sk&quot;, &quot;boar&quot;]) ); // 0 console.log( countConstruct(&quot;enterapotentpot&quot;, [&quot;a&quot;, &quot;p&quot;, &quot;ent&quot;, &quot;enter&quot;, &quot;ot&quot;, &quot;o&quot;, &quot;t&quot;]) ); // 4 console.log( countConstruct(&quot;eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef&quot;, [ &quot;e&quot;, &quot;ee&quot;, &quot;eee&quot;, &quot;eeee&quot;, &quot;eeeee&quot;, &quot;eeeeee&quot;, ]) ); // 0  "},{"title":"Sorting algorithms","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/sorting/","content":"","keywords":""},{"title":"Quicksort​","type":1,"pageTitle":"Sorting algorithms","url":"docs/interviewPrep/algorithms_and_techniques/sorting/#quicksort","content":"it picks an element as a pivot and partitions the array based on the pivot How to pick pivot? Always pick the first element as a pivotAlways pick the last element as a pivot (implemented below)Pick a random element as a pivotPick median as a pivot The partition process is a key process Choose x element as pivotput x and its position in a sorted arraythen put all smaller elements before the pivot, and all larger elements after the pivot  "},{"title":"Bubble Sort​","type":1,"pageTitle":"Sorting algorithms","url":"docs/interviewPrep/algorithms_and_techniques/sorting/#bubble-sort","content":"it is the most straightforward way of sortingit has the suboptimal characteristics, but it is easy to perceive  "},{"title":"Counting Sort​","type":1,"pageTitle":"Sorting algorithms","url":"docs/interviewPrep/algorithms_and_techniques/sorting/#counting-sort","content":"it sorts the elements of an array by counting the number of occurrences of each unique element in the arrayIt has the linear time and will take O(k + n) time to finish where k is the value of the max element in the input arrayit is efficient if the range of input data is not significantly greater than the number of elements to be sorted  "},{"title":"Selection Sort​","type":1,"pageTitle":"Sorting algorithms","url":"docs/interviewPrep/algorithms_and_techniques/sorting/#selection-sort","content":"it sorts elements by picking a minimum element from an unsorted subarray and putting it at the beginning of the sorted subarray considering ascending order  "},{"title":"Heap Sort","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/sorting/heapSort","content":"Heap Sort For the heap sort algorithm, we use max-heaps Based on the Heap data structure, we can build a sort algorithm called heap sort We have to build our heap from some dataset, and then starting from the first element we put it in the first place and reduce the length with our heap, it remains in the array, but it is not part of the heapThus, each time we rebuild our heap the array will be sortedeach time the array is sorted the array becomes smallerheap sort is thus executed for O(n log n) The heap sort algorithm starts by using buildMaxHeap to build a max-heap on the input array A[1..n] where n = A.lengthSince the maximum element of the array is stored at the root A[1], we can put it into its correct final position by exchanging it with A[n]If we now discard node n from the heap we can do so by simply decrementing A.heapSizewe observe that the children of the root remain max-heaps but the new root element might violate the max-heap propertyAll we need to do is to restore the max-heap property however, it calls maxHeapify, which leaves a max-heap in A[1..n-1]The heap sort algorithm then repeats this process for the max-heap of size n - 1 down to a heap of size 2 The heap sort procedure takes time O(n log n) since the call to buildMaxHeap takes time O(n)and each of the n - 1 calls to maxHeapify takes time O(log n) example We take the first element and remove it from the heap when we put it first in the arrayThe tree is automatically rebuilt, now we take the first one again and put it in second place, and so on until the heap ceases to exist and our array is completely sorted","keywords":""},{"title":"Non-Constructible Change","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/arrays/non-constructibleChange","content":"Non-Constructible Change Given an array of positive integers representing the values of coins in your possession, write a function that returns the minimum amount of change (the minimum sum of money) that you cannot create. The given coins can have any positive integer value and aren't necessarily unique (i.e., you can have multiple coins of the same value). For example, if you're given coins = [1, 2, 5], the minimum amount of change that you can't create is 4. If you're given no coins, the minimum amount of change that you can't create is 1 Sample Inputcoins = [5, 7, 1, 1, 2, 3, 22]Sample Output 20 def nonConstructibleChange(coins): # Write your code here. coins.sort() if 1 not in coins: return 1 min = 0 for i in range(len(coins)): min += coins[i] if i &lt; len(coins) - 1: if coins[i + 1] &gt; min + 1: return min + 1 else: return min + 1 return 1 def nonConstructibleChange(coins): # Write your code here. coins.sort() min = 0 for coin in coins: if coin &gt; min + 1: return min + 1 min += coin return min + 1 function nonConstructibleChange(coins) { // Write your code here. coins.sort((a, b) =&gt; a - b); let min = 0; for (let coin of coins) { if (coin &gt; min + 1) { return min + 1; } min += coin; } return min + 1; } ","keywords":""},{"title":"Two Number Sum","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/arrays/twoNumberSum","content":"Two Number Sum Write a function that takes in a non-empty array of distinct integers and an integer representing a target sum. If any two numbers in the input array sum up to the target sum, the function should return them in an array, in any order. If no two numbers sum up to the target sum, the function should return an empty array. Note that the target sum has to be obtained by summing two different integers in the array; you can't add a single integer to itself in order to obtain the target sum. You can assume that there will be at most one pair of numbers summing up to the target sum. Sample Inputarray = [3, 5, -4, 8, 11, 1, -1, 6]targetSum = 10Sample Output[-1, 11] # solution 1 def twoNumberSum(array, targetSum): # Write your code here. arrLength = len(array) for i in range(arrLength - 1): firstNum = array[i] for j in range(i + 1, arrLength): secondNum = array[j] if firstNum + secondNum == targetSum: return [firstNum, secondNum] return [] # solution 2 def twoNumberSum(array, targetSum): # Write your code here. nums = {} for num in array: potentialNum = targetSum - num if potentialNum in nums: return [potentialNum, num] nums[num] = True return [] # solution 3 def twoNumberSum(array, targetSum): # Write your code here. array.sort() left = 0 right = len(array) - 1 while left &lt; right: currentSum = array[left] + array[right] if currentSum == targetSum: return [array[left], array[right]] elif currentSum &lt; targetSum: left += 1 elif currentSum &gt; targetSum: right -= 1 return [] // solution 1 function twoNumberSum(array, targetSum) { // Write your code here. for (let i = 0; i &lt; array.length - 1; i++) { const firstNum = array[i]; for (let j = i + 1; j &lt; array.length; j++) { const secondNum = array[j]; if (firstNum + secondNum === targetSum) { return [firstNum, secondNum]; } } } return []; } // solution 2 function twoNumberSum(array, targetSum) { // Write your code here. const nums = {}; for (let i = 0; i &lt; array.length; i++) { let potentialNum = targetSum - array[i]; if (nums[potentialNum]) { return [potentialNum, array[i]]; } nums[array[i]] = true; } return []; } // solution 3 function twoNumberSum(array, targetSum) { // Write your code here. array.sort((a, b) =&gt; a - b); let left = 0; let right = array.length - 1; while (left &lt; right) { let currentSum = array[left] + array[right]; if (currentSum === targetSum) { return [array[left], array[right]]; } else if (currentSum &lt; targetSum) { left++; } else if (currentSum &gt; targetSum) { right--; } } return []; } ","keywords":""},{"title":"All Construct example","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/allConstruct","content":"","keywords":""},{"title":"Naive solution​","type":1,"pageTitle":"All Construct example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/allConstruct#naive-solution","content":"time complexity is O(n^m)space complexity is O(m), just add the number of call stacks during recursion and ignore the others const allConstruct = (target, wordBank) =&gt; { if (target === &quot;&quot;) return [[]]; const result = []; for (const word of wordBank) { // time n if (target.indexOf(word) === 0) { const suffix = target.slice(word.length); const waysToBuildSuffix = allConstruct(suffix, wordBank); // time ^m, space m const waysToBuildTarget = waysToBuildSuffix.map((way) =&gt; [word, ...way]); // time m result.push(...waysToBuildTarget); } } return result; }; console.log(allConstruct(&quot;purple&quot;, [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;])); /* [ [&quot;purp&quot;, &quot;le&quot;], [&quot;p&quot;, &quot;ur&quot;, &quot;p&quot;, &quot;le&quot;], ] */ console.log( allConstruct(&quot;abcdef&quot;, [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;]) ); /* [ [&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], [&quot;abc&quot;, &quot;def&quot;], [&quot;abcd&quot;, &quot;ef&quot;], ] */ console.log( allConstruct(&quot;skateboard&quot;, [&quot;bo&quot;, &quot;rd&quot;, &quot;ate&quot;, &quot;t&quot;, &quot;ska&quot;, &quot;sk&quot;, &quot;boar&quot;]) ); // [] console.log( allConstruct(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaz&quot;, [ &quot;a&quot;, &quot;aa&quot;, &quot;aaa&quot;, &quot;aaaa&quot;, &quot;aaaaa&quot;, ]) ); // []  "},{"title":"Memoization solution​","type":1,"pageTitle":"All Construct example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/allConstruct#memoization-solution","content":"time complexity is O(n^m)space complexity is O(m), just add the number of call stacks during recursion and ignore the othersdoes not help much for the worst case since we need to return a 2D array const allConstruct = (target, wordBank, memo = {}) =&gt; { if (target in memo) return memo[target]; if (target === &quot;&quot;) return [[]]; const result = []; for (const word of wordBank) { // time n if (target.indexOf(word) === 0) { const suffix = target.slice(word.length); // space m const waysToBuildSuffix = allConstruct(suffix, wordBank, memo); // time ^m const waysToBuildTarget = waysToBuildSuffix.map((way) =&gt; [word, ...way]); // time m, space m result.push(...waysToBuildTarget); // space m } } memo[target] = result; return result; }; console.log(allConstruct(&quot;purple&quot;, [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;])); /* [ [&quot;purp&quot;, &quot;le&quot;], [&quot;p&quot;, &quot;ur&quot;, &quot;p&quot;, &quot;le&quot;], ] */ console.log( allConstruct(&quot;abcdef&quot;, [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;]) ); /* [ [&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], [&quot;abc&quot;, &quot;def&quot;], [&quot;abcd&quot;, &quot;ef&quot;], ] */ console.log( allConstruct(&quot;skateboard&quot;, [&quot;bo&quot;, &quot;rd&quot;, &quot;ate&quot;, &quot;t&quot;, &quot;ska&quot;, &quot;sk&quot;, &quot;boar&quot;]) ); // [] console.log( allConstruct(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaz&quot;, [ &quot;a&quot;, &quot;aa&quot;, &quot;aaa&quot;, &quot;aaaa&quot;, &quot;aaaaa&quot;, ]) ); // []  "},{"title":"Tabulation solution​","type":1,"pageTitle":"All Construct example","url":"docs/interviewPrep/algorithms_and_techniques/dynamic_programming/allConstruct#tabulation-solution","content":"allConstruct(&quot;abcdef&quot;, [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;]) -&gt; [ [&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], [&quot;abc&quot;, &quot;def&quot;], [&quot;abcd&quot;, &quot;ef&quot;], ] m = target n = wordBank.length first create an array the size of the target.length + 1 set default value to be [] index : 0 1 2 3 4 5 6 value : [] [] [] [] [] [] [] Actual char: a b c d e f when target value is an empty string, no string concatenation is required to get &quot;&quot;, therefore return value should be [[]] index : 0 1 2 3 4 5 6 value : [[]] [] [] [] [] [] [] Actual char: a b c d e f look at the 1st element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;ab&quot; current index is 0, value is [[]], and actual char is &quot;a&quot; since first char of &quot;ab&quot; === actual char &quot;a&quot; we can look at &quot;ab&quot; char length 2 steps ahead of the current index, value can be changed to the same as current value [[]] and appends the &quot;ab&quot; value into the nested array resulting in [[&quot;ab&quot;]] index : 0 1 2 3 4 5 6 value : [[]] [] [[&quot;ab&quot;]] [] [] [] [] Actual char: a b c d e f look at the 2nd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;abc&quot; current index is 0, value is [[]], and actual char is &quot;a&quot; since first char of &quot;abc&quot; === actual char &quot;a&quot; we can look at &quot;abc&quot; char length 3 steps ahead of the current index, value can be changed to the same as current value [[]] and appends the &quot;abc&quot; value into the nested array resulting in [[&quot;abc&quot;]] index : 0 1 2 3 4 5 6 value : [[]] [] [[&quot;ab&quot;]] [[&quot;abc&quot;]] [] [] [] Actual char: a b c d e f look at the 3rd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;cd&quot; current index is 0, value is [[]], and actual char is &quot;a&quot; since first char of &quot;cd&quot; !== actual char &quot;a&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [[&quot;ab&quot;]] [[&quot;abc&quot;]] [] [] [] Actual char: a b c d e f look at the 4th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;def&quot; current index is 0, value is [[]], and actual char is &quot;a&quot; since first char of &quot;def&quot; !== actual char &quot;a&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [[&quot;ab&quot;]] [[&quot;abc&quot;]] [] [] [] Actual char: a b c d e f look at the 5th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;abcd&quot; current index is 0, value is [[]], and actual char is &quot;a&quot; since first char of &quot;abcd&quot; === actual char &quot;a&quot; we can look at &quot;abcd&quot; char length 4 steps ahead of the current index, value can be changed to the same as current value [[]] and appends the &quot;abc&quot; value into the nested array resulting in [[&quot;abcd&quot;]] index : 0 1 2 3 4 5 6 value : [[]] [] [[&quot;ab&quot;]] [[&quot;abc&quot;]] [[&quot;abcd&quot;]] [] [] Actual char: a b c d e f look at the 6th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;ef&quot; current index is 0, value is [[]], and actual char is &quot;a&quot; since first char of &quot;ef&quot; !== actual char &quot;a&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [[&quot;ab&quot;]] [[&quot;abc&quot;]] [[&quot;abcd&quot;]] [] [] Actual char: a b c d e f look at the 7th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;c&quot; current index is 0, value is [[]], and actual char is &quot;a&quot; since first char of &quot;c&quot; !== actual char &quot;a&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [[&quot;ab&quot;]] [[&quot;abc&quot;]] [[&quot;abcd&quot;]] [] [] Actual char: a b c d e f move current value to the next index look at the 1st element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;ab&quot; current index is 1, value is [], and actual char is &quot;b&quot; since value is [] we can ignore and skip the entire process and move to the next index index : 0 1 2 3 4 5 6 value : [[]] [] [[&quot;ab&quot;]] [[&quot;abc&quot;]] [[&quot;abcd&quot;]] [] [] Actual char: a b c d e f move current value to the next index look at the 1st element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;ab&quot; current index is 2, value is [[&quot;ab&quot;]], and actual char is &quot;c&quot; since first char of &quot;ab&quot; !== actual char &quot;c&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [[&quot;ab&quot;]] [[&quot;abc&quot;]] [[&quot;abcd&quot;]] [] [] Actual char: a b c d e f look at the 2nd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;abc&quot; current index is 2, value is [[&quot;ab&quot;]], and actual char is &quot;c&quot; since first char of &quot;abc&quot; !== actual char &quot;c&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [[&quot;ab&quot;]] [[&quot;abc&quot;]] [[&quot;abcd&quot;]] [] [] Actual char: a b c d e f look at the 3rd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;cd&quot; current index is 2, value is [[&quot;ab&quot;]], and actual char is &quot;c&quot; since first char of &quot;cd&quot; === actual char &quot;c&quot; we can look at &quot;cd&quot; char length 2 steps ahead of the current index, new value can be changed to the same as current value [[&quot;ab&quot;]] and appends the &quot;cd&quot; value into the nested array resulting in [[&quot;ab&quot;, cd&quot;]] and then combine to the array at the new index 4 which becomes [[&quot;abcd&quot;], [&quot;ab&quot;, &quot;cd&quot;]] index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [] [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], ] ] [&quot;ab&quot;, &quot;cd], ] Actual char: a b c d e f look at the 4th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;def&quot; current index is 2, value is [[&quot;ab&quot;]], and actual char is &quot;c&quot; since first char of &quot;def&quot; !== actual char &quot;c&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [] [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], ] ] [&quot;ab&quot;, &quot;cd], ] Actual char: a b c d e f look at the 5th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;abcd&quot; current index is 2, value is [[&quot;ab&quot;]], and actual char is &quot;c&quot; since first char of &quot;abcd&quot; !== actual char &quot;c&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [] [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], ] ] [&quot;ab&quot;, &quot;cd], ] Actual char: a b c d e f look at the 6th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;ef&quot; current index is 2, value is [[&quot;ab&quot;]], and actual char is &quot;c&quot; since first char of &quot;ef&quot; !== actual char &quot;c&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [] [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], ] ] [&quot;ab&quot;, &quot;cd], ] Actual char: a b c d e f look at the 7th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;c&quot; current index is 2, value is [[&quot;ab&quot;]], and actual char is &quot;c&quot; since first char of &quot;c&quot; === actual char &quot;c&quot; we can look at &quot;c&quot; char length 1 steps ahead of the current index, new value can be changed to the same as current value [[&quot;ab&quot;]] and appends the &quot;c&quot; value into the nested array resulting in [[&quot;ab&quot;, c&quot;]] and then combine to the array at the new index 3 which becomes [[&quot;abc&quot;], [&quot;ab&quot;, &quot;c&quot;]] index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [] [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], ] ] Actual char: a b c d e f move current value to the next index look at the 1st element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;ab&quot; current index is 3, value is [[&quot;abc&quot;], [&quot;ab&quot;, &quot;c&quot;]], and actual char is &quot;d&quot; since first char of &quot;ab&quot; !== actual char &quot;d&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [] [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], ] ] Actual char: a b c d e f look at the 2nd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;abc&quot; current index is 3, value is [[&quot;abc&quot;], [&quot;ab&quot;, &quot;c&quot;]], and actual char is &quot;d&quot; since first char of &quot;abc&quot; !== actual char &quot;d&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [] [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], ] ] Actual char: a b c d e f look at the 3rd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;cd&quot; current index is 3, value is [[&quot;abc&quot;], [&quot;ab&quot;, &quot;c&quot;]], and actual char is &quot;d&quot; since first char of &quot;cd&quot; !== actual char &quot;d&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [] [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], ] ] Actual char: a b c d e f look at the 4th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;def&quot; current index is 3, value is [[&quot;abc&quot;], [&quot;ab&quot;, &quot;c&quot;]], and actual char is &quot;d&quot; since first char of &quot;def&quot; === actual char &quot;d&quot; we can look at &quot;def&quot; char length 3 steps ahead of the current index, new value can be changed to the same as current value [[&quot;abc&quot;], [&quot;ab&quot;, &quot;c&quot;]] and appends the &quot;def&quot; value into the nested array resulting in [[&quot;abc&quot;, &quot;def&quot;], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;]] index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [ [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], [&quot;abc&quot;, &quot;def&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], ] ] ] Actual char: a b c d e f look at the 5th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;abcd&quot; current index is 3, value is [[&quot;abc&quot;], [&quot;ab&quot;, &quot;c&quot;]], and actual char is &quot;d&quot; since first char of &quot;abcd&quot; !== actual char &quot;d&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [ [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], [&quot;abc&quot;, &quot;def&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], ] ] ] Actual char: a b c d e f look at the 6th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;ef&quot; current index is 3, value is [[&quot;abc&quot;], [&quot;ab&quot;, &quot;c&quot;]], and actual char is &quot;d&quot; since first char of &quot;ef&quot; !== actual char &quot;d&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [ [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], [&quot;abc&quot;, &quot;def&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], ] ] ] Actual char: a b c d e f look at the 7th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;c&quot; current index is 3, value is [[&quot;abc&quot;], [&quot;ab&quot;, &quot;c&quot;]], and actual char is &quot;d&quot; since first char of &quot;c&quot; !== actual char &quot;d&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [ [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], [&quot;abc&quot;, &quot;def&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], ] ] ] Actual char: a b c d e f move current value to the next index look at the 1st element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;ab&quot; current index is 4, value is [[&quot;abcd&quot;], [&quot;ab&quot;, &quot;cd&quot;]], and actual char is &quot;e&quot; since first char of &quot;ab&quot; !== actual char &quot;e&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [ [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], [&quot;abc&quot;, &quot;def&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], ] ] ] Actual char: a b c d e f look at the 2nd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;abc&quot; current index is 4, value is [[&quot;abcd&quot;], [&quot;ab&quot;, &quot;cd&quot;]], and actual char is &quot;e&quot; since first char of &quot;abc&quot; !== actual char &quot;e&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [ [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], [&quot;abc&quot;, &quot;def&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], ] ] ] Actual char: a b c d e f look at the 3rd element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;cd&quot; current index is 4, value is [[&quot;abcd&quot;], [&quot;ab&quot;, &quot;cd&quot;]], and actual char is &quot;e&quot; since first char of &quot;cd&quot; !== actual char &quot;e&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [ [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], [&quot;abc&quot;, &quot;def&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], ] ] ] Actual char: a b c d e f look at the 4th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;def&quot; current index is 4, value is [[&quot;abcd&quot;], [&quot;ab&quot;, &quot;cd&quot;]], and actual char is &quot;e&quot; since first char of &quot;def&quot; !== actual char &quot;e&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [ [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], [&quot;abc&quot;, &quot;def&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], ] ] ] Actual char: a b c d e f look at the 5th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;abcd&quot; current index is 4, value is [[&quot;abcd&quot;], [&quot;ab&quot;, &quot;cd&quot;]], and actual char is &quot;e&quot; since first char of &quot;abcd&quot; !== actual char &quot;e&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [ [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], [&quot;abc&quot;, &quot;def&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], ] ] ] Actual char: a b c d e f look at the 6th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;ef&quot; current index is 4, value is [[&quot;abcd&quot;], [&quot;ab&quot;, &quot;cd&quot;]], and actual char is &quot;e&quot; since first char of &quot;ef&quot; === actual char &quot;e&quot; we can look at &quot;ef&quot; char length 2 steps ahead of the current index, new value can be changed to the same as current value [[&quot;abcd&quot;], [&quot;ab&quot;, &quot;cd&quot;]] and appends the &quot;ef&quot; value into the nested array resulting in [[&quot;abcd&quot;, &quot;ef&quot;], [&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;]] and then combine to the array at the new index 6 which becomes [[&quot;abc&quot;, &quot;def&quot;], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], [&quot;abcd&quot;, &quot;ef&quot;], [&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;]] index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [ [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], [&quot;abc&quot;, &quot;def&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], ] ] [&quot;abcd&quot;, &quot;ef&quot;], [&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;], ] Actual char: a b c d e f look at the 7th element of the array [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;] is &quot;c&quot; current index is 4, value is [[&quot;abcd&quot;], [&quot;ab&quot;, &quot;cd&quot;]], and actual char is &quot;e&quot; since first char of &quot;c&quot; !== actual char &quot;e&quot; we can ignore and skip this index : 0 1 2 3 4 5 6 value : [[]] [] [ [ [ [] [ [&quot;ab&quot;], [&quot;abc&quot;], [&quot;abcd&quot;], [&quot;abc&quot;, &quot;def&quot;], ] [&quot;ab&quot;, &quot;c&quot;], [&quot;ab&quot;, &quot;cd], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], ] ] [&quot;abcd&quot;, &quot;ef&quot;], [&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;], ] Actual char: a b c d e f we can stop here, since nothing else will change  time complexity is O(n^m)space complexity is O(n^m)does not help much for the worst case since we need to return a 2D array const allConstruct = (target, wordBank) =&gt; { const table = Array(target.length + 1) .fill() .map(() =&gt; []); table[0] = [[]]; for (let i = 0; i &lt;= target.length; i++) { for (const word of wordBank) { if (target.slice(i, i + word.length) === word) { const newCombinations = table[i].map((subArray) =&gt; [...subArray, word]); table[i + word.length].push(...newCombinations); } } } return table[target.length]; }; console.log(allConstruct(&quot;purple&quot;, [&quot;purp&quot;, &quot;p&quot;, &quot;ur&quot;, &quot;le&quot;, &quot;purpl&quot;])); /* [ [&quot;purp&quot;, &quot;le&quot;], [&quot;p&quot;, &quot;ur&quot;, &quot;p&quot;, &quot;le&quot;], ] */ console.log( allConstruct(&quot;abcdef&quot;, [&quot;ab&quot;, &quot;abc&quot;, &quot;cd&quot;, &quot;def&quot;, &quot;abcd&quot;, &quot;ef&quot;, &quot;c&quot;]) ); /* [ [&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;], [&quot;ab&quot;, &quot;c&quot;, &quot;def&quot;], [&quot;abc&quot;, &quot;def&quot;], [&quot;abcd&quot;, &quot;ef&quot;], ] */ console.log( allConstruct(&quot;skateboard&quot;, [&quot;bo&quot;, &quot;rd&quot;, &quot;ate&quot;, &quot;t&quot;, &quot;ska&quot;, &quot;sk&quot;, &quot;boar&quot;]) ); // [] console.log( allConstruct(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaz&quot;, [ &quot;a&quot;, &quot;aa&quot;, &quot;aaa&quot;, &quot;aaaa&quot;, &quot;aaaaa&quot;, ]) ); // return stack overflow due to large space being used  "},{"title":"Find All Numbers Disappeared In An Array","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/tracking/findDisappearedNumbers","content":"","keywords":""},{"title":"Solution: Keep track of the numbers visited​","type":1,"pageTitle":"Find All Numbers Disappeared In An Array","url":"docs/interviewPrep/algorithms_and_techniques/tracking/findDisappearedNumbers#solution-keep-track-of-the-numbers-visited","content":"use the original array to keep track of the numbers visited Since all the numbers are positive intergers for every number visited we mark the presence of that number by negating the number at the index equal to the current numberSince JavaScript follows 0-indexing, the index we mark is the actuall number - 1If the number at that index is already negated we do nothing In the end, we just return the indices (index + 1 for the number) where there are still postive numbers function findDisappearedNumbers(nums) { const n = nums.length; for (let i = 0; i &lt; n; i++) { const trackedIndex = Math.abs(nums[i]) - 1; // get index of current value if (nums[trackedIndex] &gt; 0) { // check if index value has been tracked before nums[trackedIndex] *= -1; // mark value as tracked by making it negative } } const result = []; for (let i = 0; i &lt; n; i++) { if (nums[i] &gt; 0) { result.push(i + 1); // value not marked as negative are index numbers not used, add 1 since numbers don't start from 0 } } return result; }  input: nums = [4, 3, 2, 7, 8, 2, 3, 1] At iter = 0, current number: |4| (|.| here refers to taking the absolute value) number at index = 3 (current number 4 - 1), value = 7 and negate it to -7 After negation: nums = [4, 3, 2, -7, 8, 2, 3, 1] At iter = 1 current number: |3| number at index = 2 (current number 3 - 1), value = 2 and negate it to -2 After negation: nums = [4, 3, -2, -7, 8, 2, 3, 1] At iter = 2 current number: |-2| number at index = 1 (current number 2 - 1), value = 3 and negate it to -3 After negation: nums = [4, -3, -2, -7, 8, 2, 3, 1] At iter = 3 current number: |-7| number at index = 6 (current number 7 - 1), value = 3 and negate it to -3 After negation: nums = [4, -3, -2, -7, 8, 2, -3, 1] At iter = 4 current number: |8| number at index = 7 (current number 8 - 1), value = 1 and negate it to -1 After negation: nums = [4, -3, -2, -7, 8, 2, -3, -1] At iter = 5 current number: |2| number at index = 1 (current number 2 - 1), value = -3 and stays as -3 Array stays unchanged: nums = [4, -3, -2, -7, 8, 2, -3, -1] At iter = 6 current number: |-3| number at index = 2 (current number 3 - 1), value = -2 and stays as -2 Array stays unchanged: nums = [4, -3, -2, -7, 8, 2, -3, -1] At iter = 7 current number: |-1| number at index = 0 (current number 1 - 1), value = 4 and negate it to -4 After negation: nums = [-4, -3, -2, -7, 8, 2, -3, -1] Now the indices at which there are still positive numbers are the numbers (index+1) that weren't present in the array at value 8, index is 4 + 1 = 5 at value 2, index is 5 + 1 = 6 output: [5, 6]  "},{"title":"Insertion Sort","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/sorting/insertionSort","content":"Insertion Sort it is a simple sorting algorithm that works similar to the way you sort playing cards in your hands The array is virtually split into a sorted and an unsorted partValues from the unsorted part are picked and placed at the correct position in the sorted part The running time of the insertionSort procedure depends on the set of input values it takes longer to sort thousands of numbers than to sort three numbersthe running time of the algorithm increases with an increase in the amount of input data it is a common practice to represent the running time of a program as a function depending on the number of input elementsFor this, the concepts of &quot;algorithm time&quot; and &quot;size of input data&quot; need to be determined more precisely The most adequate concept of input data size depends on the problem in question For each task considered below, the way of measuring the size of the input data will be indicatedIn the case of insertion sort, the number of input elements is considered as the size of the input data The running time of an algorithm on a particular input is the number of primitive operations or &quot;steps&quot; executed It is convenient to define the notion of step so that it is as machine-independent as possible To sort an array of size n in ascending order Iterate from arr[1] to arr[n] over the arrayCompare the current element (key) to its predecessorIf the key element is smaller than its predecessor, compare it to the elements before Move the greater elements one position up to make space for the swapped element example // prettier-ignore function insertionSort(numbers: number[]) { // Cost | Repeats for (let i = 1; i &lt; numbers.length; i++) { // c[1] | n const numberToSort = numbers[i]; // с[2] | n-1 let j = i - 1; // с[3] | n-1 while (j &gt;= 0 &amp;&amp; numbers[j] &gt; numberToSort) { // c[4] | Sum(j=2, n) t[j] numbers[j + 1] = numbers[j]; // c[5] | Sum(j=2, n) t[j-1] j--; // c[6] | Sum(j=2, n) t[j-1] } numbers[j + 1] = numberToSort; // с[7] | n-1 } } const numbers = [1, 600, 199, 20, 7, 6, 8, 1300, 12, 601]; insertionSort(numbers); console.log(numbers); ","keywords":""},{"title":"Node Depths","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/binaryTrees/nodeDepths","content":"Node Depths The distance between a node in a Binary Tree and the tree's root is called the node's depth. Write a function that takes in a Binary Tree and returns the sum of its nodes' depths. Each BinaryTree node has an integer value, a left child node, and a right child node. Children nodes can either be BinaryTree nodes themselves or None / null Sample Input tree = 1 / \\ 2 3 / \\ / \\ 4 5 6 7 / \\ 8 9 Sample Output 16 // The depth of the node with value 2 is 1. // The depth of the node with value 3 is 1. // The depth of the node with value 4 is 2. // The depth of the node with value 5 is 2. // Etc.. // Summing all of these depths yields 16. # This is the class of the input binary tree. class BinaryTree: def __init__(self, value): self.value = value self.left = None self.right = None # solution 1 def nodeDepths(root): # Write your code here. sum = 0 s = [{&quot;node&quot;: root, &quot;d&quot;: 0}] while len(s) &gt; 0: current = s.pop() node, d = current[&quot;node&quot;], current[&quot;d&quot;] if not node: continue s.append({&quot;node&quot;: node.right, &quot;d&quot;: d+1}) s.append({&quot;node&quot;: node.left, &quot;d&quot;: d+1}) sum += d return sum # solution 2 def nodeDepths(root): # Write your code here. sum = 0 s = [{&quot;node&quot;: root, &quot;d&quot;: 0}] while len(s) &gt; 0: current = s.pop() node, d = current[&quot;node&quot;], current[&quot;d&quot;] if node.right: s.append({&quot;node&quot;: node.right, &quot;d&quot;: d+1}) if node.left: s.append({&quot;node&quot;: node.left, &quot;d&quot;: d+1}) sum += d return sum # solution 3 def nodeDepths(root): # Write your code here. return getDepth(root, 0) def getDepth(current, depth): if not current: return 0 return depth + getDepth(current.left, depth+1) + getDepth(current.right, depth+1) // This is the class of the input binary tree. class BinaryTree { constructor(value) { this.value = value; this.left = null; this.right = null; } } // solution 1 function nodeDepths(root) { // Write your code here. return getDepths(root, 0); } function getDepths(current, depth) { if (!current) { return 0; } return ( depth + getDepths(current.left, depth + 1) + getDepths(current.right, depth + 1) ); } // solution 2 function nodeDepths(root) { // Write your code here. let sum = 0; const s = [{node: root, d: 0}]; while (s.length &gt; 0) { const {node, d} = s.pop(); if (!node) { continue; } sum += d; s.push({node: node.right, d: d + 1}); s.push({node: node.left, d: d + 1}); } return sum; } ","keywords":""},{"title":"Merge Sort","type":0,"sectionRef":"#","url":"docs/interviewPrep/algorithms_and_techniques/sorting/mergeSort","content":"Merge Sort The merge sort algorithm closely follows the divide-and-conquer paradigm Divide the n-element sequence to be sorted into two subsequences of n/2 elements eachConquer: Sort the two subsequences recursively using merge sortCombine: Merge the two sorted subsequences to produce the sorted answer example We take half the length of the array and divide it into two parts And we call the merge function to the same sorting from the left and right sidesThe merge function itself compares and merges our sequences Although the code for merge sort works correctly when the number of elements is not even, our recurrence-based analysis is simplified if we assume that the original problem size is a power of 2 Each divide step then yields two subsequences of size exactly n/2This assumption does not affect the order of growth of the solution to the recurrence We reason is to set up the recurrence for T(n), the worst-case running time of merge sort on n numbers Merge sort on just one element takes constant timeWhen we have n &gt; 1 elements, we break down the running time as follows: Divide: The divide step just computes the middle of the subarray, which takes constant time Thus, D(n) = Θ(1) Conquer: We recursively solve two subproblems, each of size n/2, which contributes 2T(n/2) to the running timeCombine: We have already noted that the MERGE procedure on an n-element subarray takes time Θ(n), and so C(n) = Θ(n) function merge(left: number[], right: number[]) { const result = []; const leftLength = left.length; const rightLength = right.length; let leftIndex = 0; let rightIndex = 0; while (leftIndex &lt; leftLength &amp;&amp; rightIndex &lt; rightLength) { if (left[leftIndex] &lt; right[rightIndex]) { result.push(left[leftIndex++]); } else { result.push(right[rightIndex++]); } } while (leftIndex &lt; leftLength) { result.push(left[leftIndex++]); } while (rightIndex &lt; rightLength) { result.push(right[rightIndex++]); } return result; } function mergeSort(numbers: number[]): number[] { const length = numbers.length; const mid = Math.floor(length * 0.5); const left = numbers.slice(0, mid); const right = numbers.slice(mid, length); if (length === 1) { return numbers; } return merge(mergeSort(left), mergeSort(right)); } console.log(mergeSort([1, 600, 199, 20, 7, 6, 8, 1300, 12, 601])); ","keywords":""},{"title":"Tournament Winner","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/arrays/tournamentWinner","content":"Tournament Winner There's an algorithms tournament taking place in which teams of programmers compete against each other to solve algorithmic problems as fast as possible. Teams compete in a round robin, where each team faces off against all other teams. Only two teams compete against each other at a time, and for each competition, one team is designated the home team, while the other team is the away team. In each competition there's always one winner and one loser; there are no ties. A team receives 3 points if it wins and 0 points if it loses. The winner of the tournament is the team that receives the most amount of points. Given an array of pairs representing the teams that have competed against each other and an array containing the results of each competition, write a function that returns the winner of the tournament. The input arrays are named competitions and results, respectively. The competitions array has elements in the form of[homeTeam, awayTeam], where each team is a string of at most 30 characters representing the name of the team. The results array contains information about the winner of each corresponding competition in the competitions array. Specifically, results[i] denotes the winner of competitions[i], where a 1 in the results array means that the home team in the corresponding competition won and a 0 means that the away team won. It's guaranteed that exactly one team will win the tournament and that each team will compete against all other teams exactly once. It's also guaranteed that the tournament will always have at least two teams. Sample Input competitions = [ [&quot;HTML&quot;, &quot;C#&quot;], [&quot;C#&quot;, &quot;Python&quot;], [&quot;Python&quot;, &quot;HTML&quot;], ] results = [0, 0, 1] Sample Output &quot;Python&quot; // C# beats HTML, Python Beats C#, and Python Beats HTML. // HTML - 0 points // C# - 3 points // Python - 6 points def tournamentWinner(competitions, results): # Write your code here. scores = {} winner = &quot;&quot; topScore = 0 for i, v in enumerate(results): H, A = competitions[i] W = H if v else A if not scores.get(W): scores[W] = 0 scores[W] += 3 if scores[W] &gt; topScore: winner = W topScore = scores[W] return winner function tournamentWinner(competitions, results) { // Write your code here. const scores = {}; let winner = &quot;&quot;; let topScore = 0; for (let i = 0; i &lt; results.length; i++) { const result = results[i]; const [H, A] = competitions[i]; const W = result ? H : A; if (!scores[W]) { scores[W] = 0; } scores[W] += 3; if (scores[W] &gt; topScore) { winner = W; topScore = scores[W]; } } return winner; } ","keywords":""},{"title":"Sorted Squared Array","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/arrays/sortedSquaredArray","content":"Sorted Squared Array Write a function that takes in a non-empty array of integers that are sorted in ascending order and returns a new array of the same length with the squares of the original integers also sorted in ascending order. Sample Inputarray = [1, 2, 3, 5, 6, 8, 9]Sample Output[1, 4, 9, 25, 36, 64, 81] def sortedSquaredArray(array): # Write your code here. newArr = [] for v in array: newArr.append(v**2) return sorted(newArr) def sortedSquaredArray(array): # Write your code here. newArr = [0 for _ in array] leftIdx = 0 rightIdx = len(array) - 1 for i in reversed(range(len(array))): if abs(array[leftIdx]) &gt; abs(array[rightIdx]): newArr[i] = array[leftIdx] ** 2 leftIdx += 1 else: newArr[i] = array[rightIdx] ** 2 rightIdx -= 1 return newArr function sortedSquaredArray(array) { // Write your code here. const newArray = []; for (let v of array) { newArray.push(v ** 2); } return newArray.sort((a, b) =&gt; a - b); } function sortedSquaredArray(array) { // Write your code here. let leftIdx = 0; let rightIdx = array.length - 1; const newArr = new Array(array.length); for (let i = array.length - 1; i &gt;= 0; i--) { let left = Math.abs(array[leftIdx]); let right = Math.abs(array[rightIdx]); if (left &gt; right) { newArr[i] = left ** 2; leftIdx++; } else { newArr[i] = right ** 2; rightIdx--; } } return newArr; } ","keywords":""},{"title":"Product Sum","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/recursion/productSum","content":"Product Sum Write a function that takes in a &quot;special&quot; array and returns its product sum. A &quot;special&quot; array is a non-empty array that contains either integers or other &quot;special&quot; arrays. The product sum of a &quot;special&quot; array is the sum of its elements, where &quot;special&quot; arrays inside it are summed themselves and then multiplied by their level of depth. The depth of a &quot;special&quot; array is how far nested it is. For instance, the depth of [] is 1; the depth of the inner array in [[]] is 2; the depth of the innermost array in [[[]]] is 3 Therefore, the product sum of [x, y] is x + y; the product sum of [x, [y, z]] is x + 2 (y + z); the product sum of [x, [y, [z]]] is x + 2 (y + 3z) Sample Inputarray = [5, 2, [7, -1], 3, [6, [-13, 8], 4]]Sample Output 12// calculated as: 5 + 2 + 2 * (7 - 1) + 3 + 2 * (6 + 3 * (-13 + 8) + 4) def productSum(array, depth=1): # Write your code here. sum = 0 for v in array: if type(v) == list: sum += productSum(v, depth + 1) else: sum += v return sum * depth function productSum(array, depth = 1) { // Write your code here. let sum = 0; for (let v of array) { if (Array.isArray(v)) { sum += productSum(v, depth + 1); } else { sum += v; } } return sum * depth; } ","keywords":""},{"title":"Branch Sums","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/binaryTrees/branchSums","content":"Branch Sums Write a function that takes in a Binary Tree and returns a list of its branch sums ordered from leftmost branch sum to rightmost branch sum. A branch sum is the sum of all values in a Binary Tree branch. A Binary Tree branch is a path of nodes in a tree that starts at the root node and ends at any leaf node. Each BinaryTree node has an integer value, a left child node, and a right child node. Children nodes can either be BinaryTree nodes themselves or None / null Sample Input tree = 1 / \\ 2 3 / \\ / \\ 4 5 6 7 / \\ / 8 9 10 Sample Output[15, 16, 18, 10, 11] // 15 == 1 + 2 + 4 + 8 // 16 == 1 + 2 + 4 + 9 // 18 == 1 + 2 + 5 + 10 // 10 == 1 + 3 + 6 // 11 == 1 + 3 + 7 # This is the class of the input root. Do not edit it. class BinaryTree: def __init__(self, value): self.value = value self.left = None self.right = None # solution 1 def branchSums(root): # Write your code here. if root is None: return [] sums = [] unvisited = {} total = 0 tree_nodes = [] tree_nodes.append(root) while len(tree_nodes) &gt; 0: current = tree_nodes.pop() if current.value in unvisited: total = unvisited[current.value] total += current.value if not current.left and not current.right: sums.append(total) total -= current.value if current.right: tree_nodes.append(current.right) unvisited[current.right.value] = total if current.left: tree_nodes.append(current.left) return sums # solution 2 def branchSums(root): # Write your code here. sums = [] dfs(root, 0, sums) return sums def dfs(current, total, sums): if current: total += current.value if not current.left and not current.right: sums.append(total) return dfs(current.left, total, sums) dfs(current.right, total, sums) // This is the class of the input root. // Do not edit it. class BinaryTree { constructor(value) { this.value = value; this.left = null; this.right = null; } } // solution 1 function branchSums(root) { // Write your code here. const sums = []; dfs(root, 0, sums); return sums; } function dfs(current, total, sums) { if (!current) { return; } total += current.value; if (!current.left &amp;&amp; !current.right) { sums.push(total); return; } dfs(current.left, total, sums); dfs(current.right, total, sums); } ","keywords":""},{"title":"Minimum Waiting Time","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/greedyAlgorithms/minimumWaitingTime","content":"Minimum Waiting Time You're given a non-empty array of positive integers representing the amounts of time that specific queries take to execute. Only one query can be executed at a time, but the queries can be executed in any order. A query's waiting time is defined as the amount of time that it must wait before its execution starts. In other words, if a query is executed second, then its waiting time is the duration of the first query; if a query is executed third, then its waiting time is the sum of the durations of the first two queries. Write a function that returns the minimum amount of total waiting time for all of the queries. For example, if you're given the queries of durations[1, 4, 5], then the total waiting time if the queries were executed in the order of [5, 1, 4]would be(0) + (5) + (5 + 1) = 11. The first query of duration 5 would be executed immediately, so its waiting time would be 0, the second query of duration 1 would have to wait 5 seconds (the duration of the first query) to be executed, and the last query would have to wait the duration of the first two queries before being executed. Note: you're allowed to mutate the input array. Sample Inputqueries = [3, 2, 1, 2, 6] Sample Output 17 # solution 1 def minimumWaitingTime(queries): # Write your code here. queries.sort() totalTime = 0 tempTime = 0 for i in range(len(queries) - 1): tempTime += queries[i] totalTime += tempTime return totalTime # solution 2 def minimumWaitingTime(queries): # Write your code here. queries.sort() totalTime = 0 for i,v in enumerate(queries): totalTime += (len(queries) - (i+1)) * v return totalTime function minimumWaitingTime(queries) { // Write your code here. queries.sort((a, b) =&gt; a - b); let totalTime = 0; for (let i = 0; i &lt; queries.length; i++) { totalTime += queries[i] * (queries.length - (i + 1)); } return totalTime; } ","keywords":""},{"title":"Depth-first Search","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/graphs/depth-firstSearch","content":"Depth-first Search You're given a Node class that has a name and an array of optional children nodes. When put together, nodes form an acyclic tree-like structure. Implement the depthFirstSearch method on the Node class, which takes in an empty array, traverses the tree using the Depth-first Search approach (specifically navigating the tree from left to right), stores all of the nodes' names in the input array, and returns it. If you're unfamiliar with Depth-first Search, we recommend watching the Conceptual Overview section of this question's video explanation before starting to code. Sample Input graph = A / | \\ B C D / \\ / \\ E F G H / \\ \\ I J K Sample Output[&quot;A&quot;, &quot;B&quot;, &quot;E&quot;, &quot;F&quot;, &quot;I&quot;, &quot;J&quot;, &quot;C&quot;, &quot;D&quot;, &quot;G&quot;, &quot;K&quot;, &quot;H&quot;] class Node: def __init__(self, name): self.children = [] self.name = name def addChild(self, name): self.children.append(Node(name)) return self def depthFirstSearch(self, array): array.append(self.name) for child in self.children: child.depthFirstSearch(array) return array class Node { constructor(name) { this.name = name; this.children = []; } addChild(name) { this.children.push(new Node(name)); return this; } depthFirstSearch(array) { // Write your code here. array.push(this.name); for (const child of this.children) { child.depthFirstSearch(array); } return array; } } ","keywords":""},{"title":"Find Closest Value In BST","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/binarySearchTrees/findClosestValueInBST","content":"Find Closest Value In BST Write a function that takes in a Binary Search Tree (BST) and a target integer value and returns the closest value to that target value contained in the BST. You can assume that there will only be one closest value. Each BST node has an integer value, a left child node, and a right child node. A node is said to be a valid BST node if and only if it satisfies the BST property: its value is strictly greater than the values of every node to its left; its value is less than or equal to the values of every node to its right; and its children nodes are either valid BST nodes themselves or None / null Sample Input tree = 10 / \\ 5 15 / \\ / \\ 2 5 13 22 / \\ 1 14 target = 12 Sample Output 13 # This is the class of the input tree. Do not edit. class BST: def __init__(self, value): self.value = value self.left = None self.right = None # solution 1 def findClosestValueInBst(tree, target): # Write your code here. current = tree closest = tree.value while current: if abs(target - closest) &gt; abs(current.value - target): closest = current.value if target &gt; current.value: current = current.right elif target &lt; current.value: current = current.left else: break return closest # solution 2 def findClosestValueInBst(tree, target): # Write your code here. return traverse(tree, target, tree.value) def traverse(current, target, closest): if current is None: return closest if abs(target - closest) &gt; abs(current.value - target): closest = current.value if target &gt; current.value: return traverse(current.right, target, closest) elif target &lt; current.value: return traverse(current.left, target, closest) else: return closest // This is the class of the input tree. Do not edit. class BST { constructor(value) { this.value = value; this.left = null; this.right = null; } } // solution 1 function findClosestValueInBst(tree, target) { // Write your code here. return traverse(tree, target, tree.value); } function traverse(current, target, closest) { while (current) { if (Math.abs(target - closest) &gt; Math.abs(target - current.value)) { closest = current.value; } if (target &gt; current.value) { current = current.right; } else if (target &lt; current.value) { current = current.left; } else { break; } } return closest; } // solution 2 function findClosestValueInBst(tree, target) { // Write your code here. return traverse(tree, target, tree.value); } function traverse(current, target, closest) { if (!current) { return closest; } if (Math.abs(target - closest) &gt; Math.abs(target - current.value)) { closest = current.value; } if (target &gt; current.value) { return traverse(current.right, target, closest); } else if (target &lt; current.value) { return traverse(current.left, target, closest); } else { return closest; } } ","keywords":""},{"title":"Selection Sort","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/sorting/selectionSort","content":"Selection Sort Sample Inputarray = [8, 5, 2, 9, 5, 6, 3]Sample Output[2, 3, 5, 5, 6, 8, 9] def selectionSort(array): # Write your code here. for i in range(len(array)): selected = i for j in range(i+1, len(array)): if array[j] &lt; array[selected]: selected = j if selected != i: array[selected], array[i] = array[i], array[selected] return array function selectionSort(array) { // Write your code here. for (let i = 0; i &lt; array.length; i++) { let smallestIdx = i; for (let j = i + 1; j &lt; array.length; j++) { if (array[j] &lt; array[smallestIdx]) { smallestIdx = j; } } if (smallestIdx !== i) { [array[i], array[smallestIdx]] = [array[smallestIdx], array[i]]; } } return array; } ","keywords":""},{"title":"Remove Duplicates From Linked List","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/linkedLists/removeDuplicatesFromLinkedList","content":"Remove Duplicates From Linked List You're given the head of a Singly Linked List whose nodes are in sorted order with respect to their values. Write a function that returns a modified version of the Linked List that doesn't contain any nodes with duplicate values. The Linked List should be modified in place (i.e., you shouldn't create a brand new list), and the modified Linked List should still have its nodes sorted with respect to their values. Each LinkedList node has an integer value as well as a next node pointing to the next node in the list or to None / null if it's the tail of the list. Sample InputlinkedList = 1 -&gt; 1 -&gt; 3 -&gt; 4 -&gt; 4 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 6 Sample Output1 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 # This is an input class. Do not edit. class LinkedList: def __init__(self, value): self.value = value self.next = None def removeDuplicatesFromLinkedList(linkedList): # Write your code here. current = linkedList while current: while current.next and current.value == current.next.value: current.next = current.next.next current = current.next return linkedList // This is an input class. Do not edit. class LinkedList { constructor(value) { this.value = value; this.next = null; } } function removeDuplicatesFromLinkedList(linkedList) { // Write your code here. let current = linkedList; while (current) { while (current.next &amp;&amp; current.value === current.next.value) { current.next = current.next.next; } current = current.next; } return linkedList; } ","keywords":""},{"title":"Validate Subsequence","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/arrays/validateSubsequence","content":"Validate Subsequence Given two non-empty arrays of integers, write a function that determines whether the second array is a subsequence of the first one. A subsequence of an array is a set of numbers that aren't necessarily adjacent in the array but that are in the same order as they appear in the array. For instance, the numbers [1, 3, 4] form a subsequence of the array [1, 2, 3, 4], and so do the numbers [2, 4]. Note that a single number in an array and the array itself are both valid subsequences of the array. Sample Inputarray = [5, 1, 22, 25, 6, -1, 8, 10]sequence = [1, 6, -1, 10] Sample Output true # Solution 1 def isValidSubsequence(array, sequence): # Write your code here. j = 0 sequenceLength = len(sequence) for v in array: if j == sequenceLength: break if v in sequence and sequence[j] == v: j += 1 return j == sequenceLength function isValidSubsequence(array, sequence) { // Write your code here. let seqIdx = 0; for (let i = 0; i &lt; array.length; i++) { if (seqIdx === sequence.length) break; if (array[i] === sequence[seqIdx]) seqIdx++; } return seqIdx === sequence.length; } ","keywords":""},{"title":"Class Photos","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/greedyAlgorithms/classPhotos","content":"Class Photos It's photo day at the local school, and you're the photographer assigned to take class photos. The class that you'll be photographing has an even number of students, and all these students are wearing red or blue shirts. In fact, exactly half of the class is wearing red shirts, and the other half is wearing blue shirts. You're responsible for arranging the students in two rows before taking the photo. Each row should contain the same number of the students and should adhere to the following guidelines: All students wearing red shirts must be in the same row. All students wearing blue shirts must be in the same row. Each student in the back row must be strictly taller than the student directly in front of them in the front row. You're given two input arrays: one containing the heights of all the students with red shirts and another one containing the heights of all the students with blue shirts. These arrays will always have the same length, and each height will be a positive integer. Write a function that returns whether or not a class photo that follows the stated guidelines can be taken. Note: you can assume that each class has at least 2 students. Sample InputredShirtHeights = [5, 8, 1, 3, 4]blueShirtHeights = [6, 9, 2, 4, 5] Sample Output true// Place all students with blue shirts in the back row. def classPhotos(redShirtHeights, blueShirtHeights): # Write your code here. redShirtHeights.sort() blueShirtHeights.sort() checkR = 0 checkB = 0 for i in range(len(redShirtHeights)): if checkR and checkB: return False if redShirtHeights[i] &gt; blueShirtHeights[i]: checkR += 1 elif redShirtHeights[i] &lt; blueShirtHeights[i]: checkB += 1 elif redShirtHeights[i] == blueShirtHeights[i]: return False return True function classPhotos(redShirtHeights, blueShirtHeights) { // Write your code here. redShirtHeights.sort((a, b) =&gt; a - b); blueShirtHeights.sort((a, b) =&gt; a - b); let checkR = 0; let checkB = 0; for (let i = 0; i &lt; redShirtHeights.length; i++) { if (checkR &amp;&amp; checkB) { return false; } if (redShirtHeights[i] === blueShirtHeights[i]) { return false; } else if (redShirtHeights[i] &gt; blueShirtHeights[i]) { checkR += 1; } else if (redShirtHeights[i] &lt; blueShirtHeights[i]) { checkB += 1; } } return true; } ","keywords":""},{"title":"Insertion Sort","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/sorting/insertionSort","content":"Insertion Sort Sample Inputarray = [8, 5, 2, 9, 5, 6, 3]Sample Output[2, 3, 5, 5, 6, 8, 9] # solution 1 def insertionSort(array): # Write your code here. i = 0 while i &lt; len(array) - 1: for j in range(i + 1, -1, -1): if j &gt; 0 and array[j] &lt; array[j - 1]: array[j], array[j - 1] = array[j - 1], array[j] i += 1 return array # solution 2 def insertionSort(array): # Write your code here. for i in range(1, len(array)): j = i while j &gt; 0 and array[j] &lt; array[j - 1]: array[j], array[j-1] = array[j-1], array[j] j -= 1 return array // solution 1 function insertionSort(array) { // Write your code here. let i = 0; while (i &lt; array.length - 1) { for (let j = i + 1; j &gt;= 0; j--) { if (j &gt; 0 &amp;&amp; array[j] &lt; array[j - 1]) { [array[j], array[j - 1]] = [array[j - 1], array[j]]; } } i++; } return array; } // solution 2 function insertionSort(array) { // Write your code here. for (let i = 1; i &lt; array.length; i++) { let j = i; while (j &gt; 0 &amp;&amp; array[j] &lt; array[j - 1]) { [array[j], array[j - 1]] = [array[j - 1], array[j]]; j--; } } return array; } ","keywords":""},{"title":"Bubble Sort","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/sorting/bubbleSort","content":"Bubble Sort Sample Inputarray = [8, 5, 2, 9, 5, 6, 3]Sample Output[2, 3, 5, 5, 6, 8, 9] def bubbleSort(array): # Write your code here. isSorted = False counter = 0 while not isSorted: isSorted = True for i in range(len(array) - 1 - counter): v1 = array[i] v2 = array[i+1] if v1 &gt; v2: array[i], array[i+1] = array[i+1], array[i] isSorted = False counter += 1 return array function bubbleSort(array) { // Write your code here. let isSorted = false; let counter = 0; while (!isSorted) { isSorted = true; for (let i = 0; i &lt; array.length - 1 - counter; i++) { const v1 = array[i]; const v2 = array[i + 1]; if (v1 &gt; v2) { [array[i], array[i + 1]] = [array[i + 1], array[i]]; isSorted = false; } } counter++; } return array; } ","keywords":""},{"title":"Nth Fibonacci","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/recursion/nthFibonacci","content":"Nth Fibonacci The Fibonacci sequence is defined as follows: the first number of the sequence is 0, the second number is 1, and the nth number is the sum of the (n - 1)th and (n - 2)th numbers. Write a function that takes in an integer n and returns the nth Fibonacci number. Important note: the Fibonacci sequence is often defined with its first two numbers as F0 = 0 and F1 = 1. For the purpose of this question, the first Fibonacci number is F0; therefore, getNthFib(1) is equal to F0, getNthFib(2) is equal to F1, etc.. Sample Input #1n = 2Sample Output #11 // 0, 1Sample Input #2n = 6Sample Output #25 // 0, 1, 1, 2, 3, 5 # solution 1 def getNthFib(n): # Write your code here. if n == 1: return 0 if n == 2: return 1 return getNthFib(n-1) + getNthFib(n-2) # solution 2 def getNthFib(n, store={}): # Write your code here. if n == 1: return 0 if n == 2: return 1 if n in store: return store[n] store[n] = getNthFib(n - 1, store) + getNthFib(n - 2, store) return store[n] # solution 3 def getNthFib(n): # Write your code here. lastTwo = [0, 1] counter = 3 while counter &lt;= n: next = lastTwo[0] + lastTwo[1] lastTwo[0] = lastTwo[1] lastTwo[1] = next counter += 1 return lastTwo[1] if n &gt; 1 else lastTwo[0] // solution 1 function getNthFib(n) { // Write your code here. if (n === 1) { return 0; } if (n === 2) { return 1; } return getNthFib(n - 1) + getNthFib(n - 2); } // solution 2 function getNthFib(n, store = {}) { // Write your code here. if (n === 1) { return 0; } if (n === 2) { return 1; } if (store[n]) { return store[n]; } store[n] = getNthFib(n - 1, store) + getNthFib(n - 2, store); return store[n]; } // solution 3 function getNthFib(n) { // Write your code here. const lastTwo = [0, 1]; let counter = 3; while (counter &lt;= n) { const next = lastTwo[0] + lastTwo[1]; lastTwo[0] = lastTwo[1]; lastTwo[1] = next; counter++; } return n &gt; 1 ? lastTwo[1] : lastTwo[0]; } ","keywords":""},{"title":"Caesar Cipher Encryptor","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/strings/caesarCipherEncryptor","content":"Caesar Cipher Encryptor Given a non-empty string of lowercase letters and a non-negative integer representing a key, write a function that returns a new string obtained by shifting every letter in the input string by k positions in the alphabet, where k is the key. Note that letters should &quot;wrap&quot; around the alphabet; in other words, the letter z shifted by one returns the letter a Sample Inputstring = &quot;xyz&quot;key = 2Sample Output zab # solution 1 def caesarCipherEncryptor(string, key): # Write your code here. aValue = ord(&quot;a&quot;) zValue = ord(&quot;z&quot;) newStr = [] for i in range(len(string)): currentValue = ord(string[i]) + key while currentValue &gt; zValue: currentValue = currentValue - zValue + aValue - 1 newStr.append(chr(currentValue)) return &quot;&quot;.join(newStr) # solution 2 def caesarCipherEncryptor(string, key): # Write your code here. aValue = ord(&quot;a&quot;) zValue = ord(&quot;z&quot;) newStr = [] newKey = key % 26 for i in range(len(string)): currentValue = ord(string[i]) + newKey if currentValue &gt; zValue: newStr.append(chr(currentValue - zValue + aValue - 1)) else: newStr.append(chr(currentValue)) return &quot;&quot;.join(newStr) function caesarCipherEncryptor(string, key) { // Write your code here. const aValue = &quot;a&quot;.charCodeAt(); const zValue = &quot;z&quot;.charCodeAt(); const newKey = key % 26; const newStr = []; for (let i = 0; i &lt; string.length; i++) { const currentValue = string[i].charCodeAt(0) + newKey; if (currentValue &gt; zValue) { newStr.push(String.fromCharCode(currentValue - zValue + aValue - 1)); } else { newStr.push(String.fromCharCode(currentValue)); } } return newStr.join(&quot;&quot;); } ","keywords":""},{"title":"Monotonic Array","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/medium/arrays/monotonicArray","content":"Monotonic Array Write a function that takes in an array of integers and returns a boolean representing whether the array is monotonic. An array is said to be monotonic if its elements, from left to right, are entirely non-increasing or entirely non-decreasing. Non-increasing elements aren't necessarily exclusively decreasing; they simply don't increase. Similarly, non-decreasing elements aren't necessarily exclusively increasing; they simply don't decrease. Note that empty arrays and arrays of one element are monotonic. Sample Inputarray = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001] Sample Outputtrue def isMonotonic(array): # Write your code here. length = len(array) if length &lt;= 2: return True isEqual = True if array[0] == array[length - 1] else False isIncrease = True if array[0] &lt; array[length - 1] else False isDecrease = True if array[0] &gt; array[length - 1] else False for i in range(1, length): if isIncrease and array[i-1] &gt; array[i]: return False elif isDecrease and array[i-1] &lt; array[i]: return False elif isEqual and array[i-1] != array[i]: return False return True function isMonotonic(array) { // Write your code here. const len = array.length; if (len &lt;= 2) { return true; } let isEqual = array[0] === array[len - 1] ? true : false; let isIncrease = array[0] &lt; array[len - 1] ? true : false; let isDecrease = array[0] &gt; array[len - 1] ? true : false; for (let i = 1; i &lt; len; i++) { if (isIncrease &amp;&amp; array[i - 1] &gt; array[i]) { return false; } else if (isDecrease &amp;&amp; array[i - 1] &lt; array[i]) { return false; } else if (isEqual &amp;&amp; array[i - 1] !== array[i]) { return false; } } return true; } ","keywords":""},{"title":"Find Three Largest Numbers","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/searching/findThreeLargestNumbers","content":"Find Three Largest Numbers Write a function that takes in an array of at least three integers and, without sorting the input array, returns a sorted array of the three largest integers in the input array. The function should return duplicate integers if necessary; for example, it should return [10, 10, 12] for an input array of [10, 5, 9, 10, 12] Sample Inputarray = [141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7]Sample Output[18, 141, 541] def findThreeLargestNumbers(array): # Write your code here. newArr = [None, None, None] for v in array: a, b, c = newArr[0], newArr[1], newArr[2] if not c: newArr[2] = v elif v &gt;= c: newArr[0] = newArr[1] newArr[1] = newArr[2] newArr[2] = v elif not b: newArr[1] = v elif v &gt;= b: newArr[0] = newArr[1] newArr[1] = v elif not a: newArr[0] = v elif v &gt;= a: newArr[0] = v return newArr function findThreeLargestNumbers(array) { // Write your code here. const newArr = [null, null, null]; for (let v of array) { const [a, b, c] = newArr; if (!c) { newArr[2] = v; } else if (v &gt;= c) { newArr[0] = newArr[1]; newArr[1] = newArr[2]; newArr[2] = v; } else if (!b) { newArr[1] = v; } else if (v &gt;= b) { newArr[0] = newArr[1]; newArr[1] = v; } else if (!a) { newArr[0] = v; } else if (v &gt;= a) { newArr[0] = v; } } return newArr; } ","keywords":""},{"title":"Palindrome Check","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/strings/palindromeCheck","content":"Palindrome Check Write a function that takes in a non-empty string and that returns a boolean representing whether the string is a palindrome. A palindrome is defined as a string that's written the same forward and backward. Note that single-character strings are palindromes. Sample Inputstring = &quot;abcdcba&quot;Sample Output true def isPalindrome(string): # Write your code here. lastIdx = len(string) - 1 for i in range(len(string)): if lastIdx &lt;= i: return True if string[i] != string[lastIdx]: return False else: lastIdx -= 1 function isPalindrome(string) { // Write your code here. let lastIdx = string.length - 1; for (let i = 0; i &lt; string.length; i++) { if (lastIdx &lt;= i) { return true; } if (string[i] !== string[lastIdx]) { return false; } else { lastIdx--; } } } ","keywords":""},{"title":"Run-Length Encoding","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/strings/run-lengthEncoding","content":"Run-Length Encoding Write a function that takes in a non-empty string and returns its run-length encoding. From Wikipedia, &quot;run-length encoding is a form of lossless data compression in which runs of data are stored as a single data value and count, rather than as the original run.&quot; For this problem, a run of data is any sequence of consecutive, identical characters. So the run &quot;AAA&quot; would be run-length-encoded as &quot;3A&quot; To make things more complicated, however, the input string can contain all sorts of special characters, including numbers. And since encoded data must be decodable, this means that we can't naively run-length-encode long runs. For example, the run &quot;AAAAAAAAAAAA&quot; (12 As), can't naively be encoded as &quot;12A&quot;, since this string can be decoded as either &quot;AAAAAAAAAAAA&quot; or &quot;1AA&quot;. Thus, long runs (runs of 10 or more characters) should be encoded in a split fashion; the aforementioned run should be encoded as &quot;9A3A&quot; Sample Inputstring = &quot;AAAAAAAAAAAAABBCCCCDD&quot;Sample Output &quot;9A4A2B4C2D&quot; # solution 1 def runLengthEncoding(string): # Write your code here. newStr = [] count = 0 previous = None for i in range(len(string)): if not previous: count += 1 elif string[i] == previous and count &lt; 9: count += 1 elif string[i] == previous: newStr.append(str(count)) newStr.append(string[i]) count = 1 elif string[i] != previous: newStr.append(str(count)) newStr.append(previous) count = 1 if i == len(string) - 1: newStr.append(str(count)) newStr.append(string[i]) previous = string[i] return &quot;&quot;.join(newStr) # solution 2 def runLengthEncoding(string): # Write your code here. newStr = [] count = 1 for i in range(1, len(string)): current = string[i] previous = string[i-1] if current != previous or count &gt;= 9: newStr.append(str(count)) newStr.append(previous) count = 0 count += 1 newStr.append(str(count)) newStr.append(string[len(string) - 1]) return &quot;&quot;.join(newStr) function runLengthEncoding(string) { // Write your code here. const newStr = []; let count = 1; for (let i = 1; i &lt; string.length; i++) { const current = string[i]; const previous = string[i - 1]; if (current !== previous || count &gt;= 9) { newStr.push(String(count)); newStr.push(previous); count = 0; } count++; } newStr.push(String(count)); newStr.push(string[string.length - 1]); return newStr.join(&quot;&quot;); } ","keywords":""},{"title":"Threads","type":0,"sectionRef":"#","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/","content":"","keywords":""},{"title":"Synchronous​","type":1,"pageTitle":"Threads","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/#synchronous","content":""},{"title":"Single Threaded​","type":1,"pageTitle":"Threads","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/#single-threaded","content":"each task gets executed 1 after anothereach task waits for its previous task to be completed before getting executed "},{"title":"Multi-Threaded​","type":1,"pageTitle":"Threads","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/#multi-threaded","content":"tasks get executed in different threads but waits for other executing tasks on other threads to be completed before getting executed "},{"title":"Asynchronous​","type":1,"pageTitle":"Threads","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/#asynchronous","content":""},{"title":"Single Threaded​","type":1,"pageTitle":"Threads","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/#single-threaded-1","content":"tasks start executing without waiting for a different task to finishat a given time, a single task gets executed "},{"title":"Multi-Threaded​","type":1,"pageTitle":"Threads","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/#multi-threaded-1","content":"tasks get executed in different threads without waiting for any tasks and independently finish off their executions "},{"title":"Concurrency​","type":1,"pageTitle":"Threads","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/#concurrency","content":"execution of tasks in a single core environmenttasks are context switched between one another "},{"title":"Parallelism​","type":1,"pageTitle":"Threads","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/#parallelism","content":"2 tasks are being performed simultaneously over the same time period "},{"title":"Generate Document","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/strings/generateDocument","content":"Generate Document You're given a string of available characters and a string representing a document that you need to generate. Write a function that determines if you can generate the document using the available characters. If you can generate the document, your function should return true; otherwise, it should return false You're only able to generate the document if the frequency of unique characters in the characters string is greater than or equal to the frequency of unique characters in the document string. For example, if you're given characters = &quot;abcabc&quot; and document = &quot;aabbccc&quot; you cannot generate the document because you're missing one c The document that you need to create may contain any characters, including special characters, capital letters, numbers, and spaces. Note: you can always generate the empty string (&quot;&quot;) Sample Inputcharacters = &quot;Bste!hetsi ogEAxpelrt x &quot;document = &quot;AlgoExpert is the Best!&quot;Sample Output true # solution 1 def generateDocument(characters, document): # Write your code here. result = False newChars = list(characters) if document == &quot;&quot;: return True for v in document: if v in newChars: newChars.remove(v) result = True else: return False return result # solution 2 def generateDocument(characters, document): # Write your code here. memo = {} for v in characters: if v not in memo: memo[v] = 0 memo[v] += 1 for v in document: if v not in memo or not memo[v]: return False memo[v] -= 1 return True # solution 3 def generateDocument(characters, document): # Write your code here. for v in document: charF = charFreq(v, characters) docF = charFreq(v, document) if docF &gt; charF: return False return True def charFreq(c, string): freq = 0 for v in string: if c == v: freq += 1 return freq // solution 1 function generateDocument(characters, document) { // Write your code here. for (let v of document) { const charFreq = charsFreq(v, characters); const docFreq = charsFreq(v, document); if (docFreq &gt; charFreq) { return false; } } return true; } function charsFreq(c, string) { freq = 0; for (let v of string) { if (v === c) { freq++; } } return freq; } // solution 2 function generateDocument(characters, document) { // Write your code here. const memo = {}; for (let i = 0; i &lt; characters.length; i++) { if (!memo[characters[i]]) { memo[characters[i]] = 0; } memo[characters[i]]++; } for (let i = 0; i &lt; document.length; i++) { if (!memo[document[i]]) { return false; } memo[document[i]]--; } return true; } ","keywords":""},{"title":"Binary Search","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/easy/searching/binarySearch","content":"Binary Search Write a function that takes in a sorted array of integers as well as a target integer. The function should use the Binary Search algorithm to determine if the target integer is contained in the array and should return its index if it is, otherwise -1 If you're unfamiliar with Binary Search, we recommend watching the Conceptual Overview section of this question's video explanation before starting to code. Sample Inputarray = [0, 1, 21, 33, 45, 45, 61, 71, 72, 73]target = 33 Sample Output 3 # solution 1 def binarySearch(array, target): # Write your code here. L = 0 R = len(array) - 1 while L is not R: M = round((R - L) / 2) + L V = array[M] if array[L] == target: return L if array[R] == target: return R if V == target: return M elif target &gt; V: L = M + 1 elif target &lt; V: R = M - 1 else: break return -1 # solution 2 def binarySearch(array, target): # Write your code here. return search(array, target, 0, len(array)-1) def search(array, target, L, R): if L &gt; R: return -1 M = (R + L) // 2 V = array[M] if target == V: return M elif target &gt; V: return search(array, target, L+1, R) else: return search(array, target, L, R-1) # solution 3 def binarySearch(array, target): # Write your code here. L = 0 R = len(array) - 1 while L &lt;= R: M = (R + L) // 2 V = array[M] if target == V: return M elif target &gt; V: L = M + 1 else: R = M - 1 return -1 // solution 1 function binarySearch(array, target) { // Write your code here. let L = 0; let R = array.length - 1; while (L &lt;= R) { const M = Math.floor((R + L) / 2); const V = array[M]; if (target === V) { return M; } else if (target &gt; V) { L = M + 1; } else { R = M - 1; } } return -1; } // solution 2 function binarySearch(array, target) { // Write your code here. return search(array, target, 0, array.length - 1); } function search(array, target, L, R) { const M = Math.floor((R + L) / 2); const V = array[M]; if (L &gt; R) { return -1; } if (target === V) { return M; } else if (target &gt; V) { return search(array, target, M + 1, R); } else { return search(array, target, L, M - 1); } } ","keywords":""},{"title":"Longest Peak","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/medium/arrays/longestPeak","content":"Longest Peak Write a function that takes in an array of integers and returns the length of the longest peak in the array. A peak is defined as adjacent integers in the array that are strictly increasing until they reach a tip (the highest value in the peak), at which point they become strictly decreasing. At least three integers are required to form a peak. For example, the integers 1, 4, 10, 2 form a peak, but the integers 4, 0, 10 don't and neither do the integers 1, 2, 2, 0. Similarly, the integers 1, 2, 3 don't form a peak because there aren't any strictly decreasing integers after the 3 Sample Inputarray = [1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3] Sample Output6 // 0, 10, 6, 5, -1, -3 def longestPeak(array): # Write your code here. peak = 0 i = 1 while i &lt; len(array) - 1: isPeak = array[i-1] &lt; array[i] and array[i] &gt; array[i+1] if not isPeak: i += 1 continue leftIdx = i - 2 while leftIdx &gt;= 0 and array[leftIdx] &lt; array[leftIdx+1]: leftIdx -= 1 rightIdx = i + 2 while rightIdx &lt; len(array) and array[rightIdx] &lt; array[rightIdx-1]: rightIdx += 1 currentPeak = rightIdx - leftIdx - 1 peak = max(peak, currentPeak) i = rightIdx return peak function longestPeak(array) { // Write your code here. let peak = 0; let i = 1; while (i &lt; array.length - 1) { const isPeak = array[i - 1] &lt; array[i] &amp;&amp; array[i] &gt; array[i + 1]; if (!isPeak) { i++; continue; } let leftIdx = i - 2; while (leftIdx &gt;= 0 &amp;&amp; array[leftIdx] &lt; array[leftIdx + 1]) { leftIdx--; } let rightIdx = i + 2; while (rightIdx &lt; array.length &amp;&amp; array[rightIdx] &lt; array[rightIdx - 1]) { rightIdx++; } const currentPeak = rightIdx - leftIdx - 1; peak = Math.max(peak, currentPeak); i = rightIdx; } return peak; } ","keywords":""},{"title":"Complexity Analysis","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/03ComplexityAnalysis/","content":"","keywords":""},{"title":"Time Complexity​","type":1,"pageTitle":"Complexity Analysis","url":"docs/interviewPrep/data_structures/03ComplexityAnalysis/#time-complexity","content":"a measure of how fast an algorithm runsit is a central concept in the field of algorithms and in coding interviewsit's expressed using Big O notation "},{"title":"Space Complexity​","type":1,"pageTitle":"Complexity Analysis","url":"docs/interviewPrep/data_structures/03ComplexityAnalysis/#space-complexity","content":"a measure of how much auxillary memory an algorithm takes upit is a central concept in the field of algorithms and in coding interviewsit's expressed using Big O notation "},{"title":"Memory","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/04Memory/","content":"","keywords":""},{"title":"Example of memory usage​","type":1,"pageTitle":"Memory","url":"docs/interviewPrep/data_structures/04Memory/#example-of-memory-usage","content":"e.g.: storing a fixed-width 32 bit integer value to a variable foobar = 1what happens under the hood is where the program is going to store this variable, the number 1 in a memory slot or series of memory slots that is free in the memory canvasif the value requires more than 1 memory slots to be stored, it will store them back to back e.g.: storing a list of fixed-width 32 bit integer value to a variable foobar = [1, 2] the computer can access any of the memory slots very quickly with the memory address "},{"title":"Binary Digit (Bit)​","type":1,"pageTitle":"Memory","url":"docs/interviewPrep/data_structures/04Memory/#binary-digit-bit","content":"it is a fundamental unit of information in Computer Science that represents a state with 1 of 2 values usually 0 and 1 any data stored in a computer is at the most basic level, represented in bits "},{"title":"Byte​","type":1,"pageTitle":"Memory","url":"docs/interviewPrep/data_structures/04Memory/#byte","content":"a group of 8 bits e.g.: 01101000 is a byte a single byte can represent up to 256 data values 2^8since a binary number is a number expressed with only 2 symbols, like 0 and 1 a byte can represent all the numbers between 0 and 255 in binary format 1: 0000 0001 2: 0000 0010 3: 0000 0011 4: 0000 0100  "},{"title":"Fixed-Width Integer​","type":1,"pageTitle":"Memory","url":"docs/interviewPrep/data_structures/04Memory/#fixed-width-integer","content":"an integer represented by a fixed amount of bitse.g.: a 32 bit integer is a type int integer represented by 32 bits (4 bytes)00000000 00000000 00000000 00000001 a 64 bit integer is a type long integer represented by 64 bits (8 bytes)00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 regardless of how large an integer is, its fixed-width-integer representation is by definition made up of a constant number of bits an operation performed on its fixed-width-integer representation consists of a constant number of bit manipulations since the integer is made up of a fixed number of bits "},{"title":"American Standard Code for Information Interchange (ASCII)​","type":1,"pageTitle":"Memory","url":"docs/interviewPrep/data_structures/04Memory/#american-standard-code-for-information-interchange-ascii","content":"map a character to a numbere.g.: ASCII code for character &quot;A&quot; is 65 which would be turned into bitsthus a string of characters will be stored as a list of numbers in memory "},{"title":"Pointers​","type":1,"pageTitle":"Memory","url":"docs/interviewPrep/data_structures/04Memory/#pointers","content":"at any memory slot, a memory address of another memory slot can be stored in base 2 format (binary number format) allows you to not have to store specific data at a memory slotbut instead point to another memory slot that stores that data e.g.: store memory slot 16 at memory slot 2 "},{"title":"Logarithm","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/06Logarithm/","content":"Logarithm a mathematical concept that's widely used in computer science and that's defined by the following equation logbx if and only if by = xin the context of coding interviews, logarithm is used to describe the complexity analysis of algorithms its usage always implies a logarithm of base 2in other words in the context of coding interviews, it is defined by log (n) = y if and only if 2y = n if an algorithm has a logarithmic time complexity O log (n), where n is the size of the input then whenever the algorithm's input doubles in size (whenever n doubles) the number of operations needed to complete the algorithm only increases by 1 unit e.g.: input size of 1,000 will take roughly 10 operations to complete since 210 ~= 1,000","keywords":""},{"title":"Move Element To End","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/medium/arrays/moveElementToEnd","content":"Move Element To End You're given an array of integers and an integer. Write a function that moves all instances of that integer in the array to the end of the array and returns the array. The function should perform this in place (i.e., it should mutate the input array) and doesn't need to maintain the order of the other integers. Sample Inputarray = [2, 1, 2, 2, 2, 3, 4, 2]toMove = 2 Sample Output[1, 3, 4, 2, 2, 2, 2, 2] // the numbers 1, 3, and 4 could be ordered differently def moveElementToEnd(array, toMove): # Write your code here. L = 0 R = len(array) - 1 while L &lt; R: v1 = array[L] v2 = array[R] if v1 == toMove and v2 != toMove: array[L], array[R] = array[R], array[L] if v1 != toMove: L += 1 if v2 == toMove: R -= 1 return array function moveElementToEnd(array, toMove) { // Write your code here. let L = 0; let R = array.length - 1; while (L &lt; R) { const v1 = array[L]; const v2 = array[R]; if (v1 === toMove &amp;&amp; v2 !== toMove) { [array[L], array[R]] = [array[R], array[L]]; } if (v1 !== toMove) { L += 1; } if (v2 === toMove) { R -= 1; } } return array; } ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/javascript/","content":"","keywords":""},{"title":"Single Threaded​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/javascript/#single-threaded","content":""},{"title":"Asynchronous blocking​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/javascript/#asynchronous-blocking","content":"can be slow or fast, but will not be faster than non-blocking code const fetch = require(&quot;node-fetch&quot;); const url = &quot;https://jsonplaceholder.typicode.com/posts/&quot;; const postIds = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, ]; const results = []; async function runTasks() { for (const postId of postIds) { console.log(`Working on post id ${postId}`); const response = await fetch(`${url}${postId}`); results.push(await response.json()); } } async function main() { console.log(&quot;Timer started...&quot;); const startHrTime = process.hrtime(); await runTasks(); console.log(results); const elapsedHrTime = process.hrtime(startHrTime); const elapsedTimeInMs = elapsedHrTime[0] + &quot;.&quot; + elapsedHrTime[1]; console.log( `It took ${elapsedTimeInMs} seconds to make ${postIds.length} API calls` ); } main();  "},{"title":"Asynchronous Non-blocking​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/javascript/#asynchronous-non-blocking","content":"almost as fast as parallel programming in other languages const fetch = require(&quot;node-fetch&quot;); const url = &quot;https://jsonplaceholder.typicode.com/posts/&quot;; const postIds = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, ]; const results = []; async function runTasks() { for (const postId of postIds) { console.log(`Working on post id ${postId}`); results.push(fetch(`${url}${postId}`)); } } async function main() { console.log(&quot;Timer started...&quot;); const startHrTime = process.hrtime(); await runTasks(); for (const result of results) { const response = await result; console.log(await response.json()); } const elapsedHrTime = process.hrtime(startHrTime); const elapsedTimeInMs = elapsedHrTime[0] + &quot;.&quot; + elapsedHrTime[1]; console.log( `It took ${elapsedTimeInMs} seconds to make ${postIds.length} API calls` ); } main();  "},{"title":"Smallest Difference","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/medium/arrays/smallestDifference","content":"Smallest Difference Write a function that takes in two non-empty arrays of integers, finds the pair of numbers (one from each array) whose absolute difference is closest to zero, and returns an array containing these two numbers, with the number from the first array in the first position. Note that the absolute difference of two integers is the distance between them on the real number line. For example, the absolute difference of -5 and 5 is 10, and the absolute difference of -5 and -4 is 1. You can assume that there will only be one pair of numbers with the smallest difference. Sample InputarrayOne = [-1, 5, 10, 20, 28, 3]arrayTwo = [26, 134, 135, 15, 17]Sample Output[28, 26] # solution 1 def smallestDifference(arrayOne, arrayTwo): # Write your code here. result = [] diff = None for v1 in arrayOne: for v2 in arrayTwo: v = abs(v1 - v2) if diff is None or v &lt; diff: diff = v result = [v1, v2] return result # solution 2 def smallestDifference(arrayOne, arrayTwo): # Write your code here. arrayOne.sort() arrayTwo.sort() L1 = 0 L2 = 0 R1 = len(arrayOne) R2 = len(arrayTwo) diff = None result = [] while L1 &lt; R1 and L2 &lt; R2: v1 = arrayOne[L1] v2 = arrayTwo[L2] v = abs(v1 - v2) if diff is None or v &lt; diff: diff = v result = [v1, v2] if v1 &lt; v2: L1 += 1 elif v2 &lt; v1: L2 += 1 else: return [v1, v2] return result function smallestDifference(arrayOne, arrayTwo) { // Write your code here. arrayOne.sort((a, b) =&gt; a - b); arrayTwo.sort((a, b) =&gt; a - b); let L1 = 0; let L2 = 0; let diff; let result = []; while (L1 &lt; arrayOne.length &amp;&amp; L2 &lt; arrayTwo.length) { const v1 = arrayOne[L1]; const v2 = arrayTwo[L2]; const v = Math.abs(v1 - v2); if (!diff || v &lt; diff) { diff = v; result = [v1, v2]; } if (v1 &lt; v2) { L1++; } else if (v2 &lt; v1) { L2++; } else { return [v1, v2]; } } return result; } ","keywords":""},{"title":"Asynchronous","type":0,"sectionRef":"#","url":"docs/interviewPrep/concurrency_parallel_programming/asynchronous/","content":"","keywords":""},{"title":"JavaScript / NodeJS​","type":1,"pageTitle":"Asynchronous","url":"docs/interviewPrep/concurrency_parallel_programming/asynchronous/#javascript--nodejs","content":""},{"title":"Promises​","type":1,"pageTitle":"Asynchronous","url":"docs/interviewPrep/concurrency_parallel_programming/asynchronous/#promises","content":"Use promises whenever you are using asynchronous or blocking coderesolve maps to then and reject maps to catch for all practical purposesMake sure to write both .catch and .then methods for all the promisesIf something needs to be done in both cases use finallyWe only get one shot at mutating each promiseWe can add multiple handlers to a single promiseThe return type of all the methods in the Promise object, regardless of whether they are static methods or prototype methods, is again a PromiseIn Promise.all, the order of the promises are maintained in the values variable, irrespective of which promise was first resolved "},{"title":"Async​","type":1,"pageTitle":"Asynchronous","url":"docs/interviewPrep/concurrency_parallel_programming/asynchronous/#async","content":"async functions return a promiseasync functions use an implicit Promise to return results Even if you don’t return a promise explicitly, the async function makes sure that your code is passed through a promise await blocks the code execution within the async function, of which it (await statement) is a partThere can be multiple await statements within a single async functionWhen using async await, make sure you use try catch for error handlingBe extra careful when using await within loops and iterators You might fall into the trap of writing sequentially-executing code when it could have been easily done in parallel await is always for a single PromisePromise creation starts the execution of asynchronous functionalityawait only blocks the code execution within the async function It only makes sure that the next line is executed when the promise resolvesSo, if an asynchronous activity has already started, await will not have any effect on it async library​ npm i async async.map([&quot;foo.txt&quot;, &quot;bar.txt&quot;], fs.stat, (error, results) =&gt; { console.log(results); });  async.parallel( [ (callback) =&gt; { setTimeout(callback, 1000); }, (callback) =&gt; { setTimeout(callback, 1000); }, ], (error, results) =&gt; { console.log(&quot;I took 2 seconds.&quot;); } );  async.waterfall( [ (callback) =&gt; { setTimeout(callback, 1000); }, (callback) =&gt; { setTimeout(callback, 1000); }, ], (error, results) =&gt; { console.log(&quot;I took 2 seconds.&quot;); } );  "},{"title":"Array","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/07Array/","content":"","keywords":""},{"title":"initializing an array: O(n) time and space​","type":1,"pageTitle":"Array","url":"docs/interviewPrep/data_structures/07Array/#initializing-an-array-on-time-and-space","content":"first specify a length NOS would then go to memory and find N multiplied by 8 memory slots (for a 64 bit OS) that are free and are back to backtherefore, as N increases, the time it takes to initialize the array will also increase, the space will also increase depending on N "},{"title":"traversing an array: O(n) time and O(1) space​","type":1,"pageTitle":"Array","url":"docs/interviewPrep/data_structures/07Array/#traversing-an-array-on-time-and-o1-space","content":"OS will traverse every memory slot (8 x N for a 64 bit integers) number of memory slots to traverse depends on Nno additional space is required therefore space complexity is constant "},{"title":"copying the array: O(n) space and time​","type":1,"pageTitle":"Array","url":"docs/interviewPrep/data_structures/07Array/#copying-the-array-on-space-and-time","content":"OS will traverse the entire arraythen it will initialize a new array of the same length with the same values "},{"title":"accessing a value at a given index: O(1) time and space​","type":1,"pageTitle":"Array","url":"docs/interviewPrep/data_structures/07Array/#accessing-a-value-at-a-given-index-o1-time-and-space","content":"what happens behind the hood is the Operating System is finding the memory address that starts the array then it checks how many bytes or memory slot does 1 element take up if it is 64 bit, it is 8 bytesthe OS would then know that 1 element of an array will take 8 memory slots for a 64 bit OS then it checks what index you specified and calculate the memory address no memory is being used during this process therefore space complexity is constant "},{"title":"updating a value at a given index: O(1) time and space​","type":1,"pageTitle":"Array","url":"docs/interviewPrep/data_structures/07Array/#updating-a-value-at-a-given-index-o1-time-and-space","content":"knows where the index is located as it does the same computation as to accessing the arraythen it swap old binary numbers with the new binary numberstherefore no new additional memory is being used "},{"title":"inserting a value at the beginning: O(n) time, O(1) space​","type":1,"pageTitle":"Array","url":"docs/interviewPrep/data_structures/07Array/#inserting-a-value-at-the-beginning-on-time-o1-space","content":"the old array will be copied, and then the OS will look for another memory location that has the new space required this is because the memory slot that is after the end of the old array is not guaranteed to be free, therefore you can't shift or add new memory slots space is constant because although creating new space is linear, it will also free up the old memory that was taken up by the old array "},{"title":"inserting a value in the middle: O(n) time, O(1)space​","type":1,"pageTitle":"Array","url":"docs/interviewPrep/data_structures/07Array/#inserting-a-value-in-the-middle-on-time-o1space","content":"same concept as inserting a value at the beginning "},{"title":"inserting a value at the end:​","type":1,"pageTitle":"Array","url":"docs/interviewPrep/data_structures/07Array/#inserting-a-value-at-the-end","content":"amortized O(1) time, O(1) space when dealing with a dynamic array because dynamic arrays are allocated almost double the memory size of what is actually required, adding new values to the end of the array only requires appendingonly when the array memory has been filled up, would the array be copied and given double the memory slots that is newly required during this case, time complexity becomes O(n) however this can usually be ignored unless interviewer wants you to consider all cases O(n) time, O(1) space when dealing with a static array same concept as inserting a value at the beginning "},{"title":"removing a value at the beginning: O(n) time, O(1) space​","type":1,"pageTitle":"Array","url":"docs/interviewPrep/data_structures/07Array/#removing-a-value-at-the-beginning-on-time-o1-space","content":"time complexity is linear because you have to shift all of the affected elementsspace is constant because no additional space is being created "},{"title":"removing a value in the middle: O(n) time, O(1) space​","type":1,"pageTitle":"Array","url":"docs/interviewPrep/data_structures/07Array/#removing-a-value-in-the-middle-on-time-o1-space","content":"similar to removing a value at the beginning "},{"title":"removing a value at the end: O(1) space and time​","type":1,"pageTitle":"Array","url":"docs/interviewPrep/data_structures/07Array/#removing-a-value-at-the-end-o1-space-and-time","content":"the only thing done is freeing up the space of the last element "},{"title":"Static array​","type":1,"pageTitle":"Array","url":"docs/interviewPrep/data_structures/07Array/#static-array","content":"is an implementation of an array that allocates a fixed amount of memory to be used for storing the array's values appending values to the array involves copying the entire array and allocating new memory for it, accounting for the extra space needed for the newly appended valuethis is linear-time operation "},{"title":"Dynamic array​","type":1,"pageTitle":"Array","url":"docs/interviewPrep/data_structures/07Array/#dynamic-array","content":"is an implementation of an array that preemptively allocates double the amount of memory needed to store the array's values appending values to the array is a constant-time operation until the allocated memory is filled up the array is copied and double the memory is once again allocated for it this implementation leads to an amortized constant-time insertion-at-end operation a lot of popular programming languages like JavaScript and Python implements arrays as dynamic arraysin C++ and Java, dynamic arrays are respectively referred to as Vectors and ArrayLists "},{"title":"Heap","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/05Heap/","content":"","keywords":""},{"title":"Maintaining the Heap Property​","type":1,"pageTitle":"Heap","url":"docs/interviewPrep/data_structures/05Heap/#maintaining-the-heap-property","content":"In order to maintain the max-heap property, we call the function maxHeapify When it is called, maxHeapify assumes that the binary trees rooted at left(i) and right(i) are max-heaps but that A[i] might be smaller than its children, thus violating the max-heap property Function maxHeapify lets the value at A[i] &quot;float down&quot; in the max-heap so that the subtree rooted at index i obeys the max-heap property example heap must somehow support itself when inserting or when deleting elements a heap rebuild should take place this procedure can be called as maxHeapify When it is called, we assume that the left and right nodes are also maxHeapthese nodes can be smaller than its children, and we have to let it go down belowthe second element has ceased to meet the requirement, and we check the left heap until we reach the sheetAt each step, the largest of the elements A[i], A[left(i)], and A[right(i)] is determined, and its index is stored in largestIf A[i] is largest, then the subtree rooted at node i is already a max-heap and the procedure terminatesOtherwise, one of the two children has the largest element, and A[i] is swapped with A[largest], which causes node i and its children to satisfy the max-heap propertyThe node indexed by largest, however, now has the original value A[i], and thus the subtree rooted at largest might violate the max-heap propertyConsequently, we call maxHeapify recursively on that subtree The running time of maxHeapify on a subtree of size n rooted at a given node i is the Θ(1) time to fix up the relationships among the elements A[i], A[left(i)], and A[right(i)]plus the time to run maxHeapify on a subtree rooted at one of the children of node i (assuming that the recursive call occurs)The children's subtrees each have size at most 2n/3the worst case occurs when the bottom level of the tree is exactly half full—and therefore we can describe the running time of maxHeapify by the recurrence: O(log n) "},{"title":"Building a Heap​","type":1,"pageTitle":"Heap","url":"docs/interviewPrep/data_structures/05Heap/#building-a-heap","content":"The heap should be built using method buildMaxHeap To do this, need to run the entire array through the maxHeapify functionthe complexity becomes O(n log n) have a linear dependency as it applies a function for each element and call maxHeapify itselfWe can use the procedure maxHeapify in a bottom-up manner to convert an array A[1..n], where n = A.length, into a max-heapThe elements in the subarray A[(n/2+1)..n] are all leaves of the tree, and so each is a 1-element heap to begin withThe function buildMaxHeap goes through the remaining nodes of the tree and runs maxHeapify on each one We can compute a simple upper bound on the running time of buildMaxHeap Each call to maxHeapify costs O(lgn) timeProcedure buildMaxHeap makes O(n) callsthe running time is O(n log n) This upper bound, though correct, is not asymptotically tight "},{"title":"Three Number Sum","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/medium/arrays/threeNumberSum","content":"Three Number Sum Write a function that takes in a non-empty array of distinct integers and an integer representing a target sum. The function should find all triplets in the array that sum up to the target sum and return a two-dimensional array of all these triplets. The numbers in each triplet should be ordered in ascending order, and the triplets themselves should be ordered in ascending order with respect to the numbers they hold. If no three numbers sum up to the target sum, the function should return an empty array. Sample Inputarray = [12, 3, 1, 2, -6, 5, -8, 6]targetSum = 0 Sample Output[[-8, 2, 6], [-8, 3, 5], [-6, 1, 5]] def threeNumberSum(array, targetSum): # Write your code here. array.sort() result = [] for i in range(len(array) - 2): left = i + 1 right = len(array) - 1 while left &lt; right: sum = array[i] + array[left] + array[right] if sum == targetSum: result.append([array[i], array[left], array[right]]) newArr = [] left += 1 right -= 1 elif sum &gt; targetSum: right -= 1 elif sum &lt; targetSum: left += 1 return result function threeNumberSum(array, targetSum) { // Write your code here. array.sort((a, b) =&gt; a - b); const result = []; for (let i = 0; i &lt; array.length - 2; i++) { let left = i + 1; let right = array.length - 1; while (left &lt; right) { const sum = array[i] + array[left] + array[right]; if (sum === targetSum) { result.push([array[i], array[left], array[right]]); left++; right--; } else if (sum &gt; targetSum) { right--; } else if (sum &lt; targetSum) { left++; } } } return result; } ","keywords":""},{"title":"Hash Tables","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/09HashTables/","content":"","keywords":""},{"title":"Standard Operations and complexities​","type":1,"pageTitle":"Hash Tables","url":"docs/interviewPrep/data_structures/09HashTables/#standard-operations-and-complexities","content":"the worst case linear operations occur when a hash table experience a lot of collusions, leading to long linked lists internally which take O(n) time to traverse however, in practice and in coding interview, we typically assume that the hash functions employed by hash tables are optimized that collisions are rare and constant time operations are guaranteed "},{"title":"Initializing a hash table:​","type":1,"pageTitle":"Hash Tables","url":"docs/interviewPrep/data_structures/09HashTables/#initializing-a-hash-table","content":"if dumping n elements, it would take O(n) time, O(n) space "},{"title":"Inserting a key/value pair: O(1) on average, O(n) in the worst case time​","type":1,"pageTitle":"Hash Tables","url":"docs/interviewPrep/data_structures/09HashTables/#inserting-a-keyvalue-pair-o1-on-average-on-in-the-worst-case-time","content":"hash table would resize when the dynamic array is not big enough to store a certain number of key/value pairs "},{"title":"Removing a key/value pair: O(1) on average, O(n) in the worst case time​","type":1,"pageTitle":"Hash Tables","url":"docs/interviewPrep/data_structures/09HashTables/#removing-a-keyvalue-pair-o1-on-average-on-in-the-worst-case-time","content":"hash table would resize when the dynamic array is too big after removing a certain number of key/value pairs "},{"title":"Looking up a key: O(1) on average, O(n) in the worst case time​","type":1,"pageTitle":"Hash Tables","url":"docs/interviewPrep/data_structures/09HashTables/#looking-up-a-key-o1-on-average-on-in-the-worst-case-time","content":""},{"title":"Array Of Products","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/medium/arrays/arrayOfProducts","content":"Array Of Products Write a function that takes in a non-empty array of integers and returns an array of the same length, where each element in the output array is equal to the product of every other number in the input array. In other words, the value at output[i] is equal to the product of every number in the input array other than input[i] Note that you're expected to solve this problem without using division. Sample Inputarray = [5, 1, 4, 2] Sample Output [8, 40, 10, 20] // 8 is equal to 1 x 4 x 2 // 40 is equal to 5 x 4 x 2 // 10 is equal to 5 x 1 x 2 // 20 is equal to 5 x 1 x 4 # solution 1 def arrayOfProducts(array): # Write your code here. result = [] i = 0 while i &lt; len(array): product = 1 for j in range(len(array)): if j == i: continue product *= array[j] result.append(product) i += 1 return result # solution 2 def arrayOfProducts(array): # Write your code here. leftProduct = [1 for _ in range(len(array))] rightProduct = [1 for _ in range(len(array))] left = 1 right = 1 for i in range(len(array)): leftProduct[i] = left left *= array[i] rightProduct[len(array) - 1 - i] = right right *= array[len(array) - 1 - i] results = [] for i in range(len(array)): results.append(leftProduct[i] * rightProduct[i]) return results # solution 3 def arrayOfProducts(array): # Write your code here. result = [1 for _ in range(len(array))] left = 1 right = 1 for i in range(len(array)): result[i] *= left left *= array[i] result[len(array) - 1 - i] *= right right *= array[len(array) - 1 - i] return result # solution 4 def arrayOfProducts(array): # Write your code here. results = [] left = 1 for i in range(len(array)): results.append(left) left *= array[i] right = 1 for i in reversed(range(len(array))): results[i] *= right right *= array[i] return results // solution 1 function arrayOfProducts(array) { // Write your code here. const result = []; let i = 0; while (i &lt; array.length) { let product = 1; for (let j = 0; j &lt; array.length; j++) { if (j !== i) { product *= array[j]; } } result.push(product); i++; } return result; } // solution 2 function arrayOfProducts(array) { // Write your code here. const leftProduct = new Array(array.length).fill(1); const rightProduct = new Array(array.length).fill(1); const result = []; let left = 1; let right = 1; for (let i = 0; i &lt; array.length; i++) { leftProduct[i] = left; left *= array[i]; rightProduct[array.length - 1 - i] = right; right *= array[array.length - 1 - i]; } for (let i = 0; i &lt; array.length; i++) { result.push(leftProduct[i] * rightProduct[i]); } return result; } // solution 3 function arrayOfProducts(array) { // Write your code here. const result = new Array(array.length).fill(1); let left = 1; let right = 1; for (let i = 0; i &lt; array.length; i++) { result[i] *= left; left *= array[i]; result[array.length - 1 - i] *= right; right *= array[array.length - 1 - i]; } return result; } // solution 4 function arrayOfProducts(array) { // Write your code here. const result = []; let left = 1; let right = 1; for (let i = 0; i &lt; array.length; i++) { result[i] = left; left *= array[i]; } for (let i = array.length - 1; i &gt;= 0; i--) { result[i] *= right; right *= array[i]; } return result; } ","keywords":""},{"title":"Linked Lists","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/08LinkedLists/","content":"","keywords":""},{"title":"Singly Linked List​","type":1,"pageTitle":"Linked Lists","url":"docs/interviewPrep/data_structures/08LinkedLists/#singly-linked-list","content":" visual representation of a singly linked list whose nodes hold integer values 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; null a singly linked list typically exposes its head to its user for easy access while finding a node in a singly linked list involves traversing through all of the nodes leading up to the node in question (as opposed to instant access with an array) adding or removing nodes involves overwriting next pointers (assuming that you have access to the node right before the node that you're adding or removing) "},{"title":"standard operations and their complexities​","type":1,"pageTitle":"Linked Lists","url":"docs/interviewPrep/data_structures/08LinkedLists/#standard-operations-and-their-complexities","content":"Initialize a linked list: O(n) time, O(n) space​ this will create 2n memory slots, 1 for the node and 1 for the pointerit will also need to allocate the n chunks of memory thus will take n time Accessing the head: O(1) time, O(1) space​ space is not affected Accessing the tail: O(n) time, O(1) space​ requires to traverse the linked list to get the nodespace is not affected Accessing a middle node: O(n) time, O(1) space​ requires to traverse the linked list to get the nodespace is not affected Inserting / Removing the head: O(1) time, O(1) space​ none of the nodes are required to be shifted, therefore it only requires changing of the head reference which is only for 1 node making it constant time and space effortWith add operation, memory is allocated for a new node and then the pointer in the last element is updated to point to the new node. Inserting / Removing the tail: O(n) to access + O(1) to modify time, O(1) space​ requires traversing through the list before any changing of reference could be done, therefore time is linear to traverse but modification is constant Inserting / Removing a middle node: O(n) to access + O(1) to modify time, O(1) space​ requires traversing through the list before any changing of reference could be done, therefore time is linear to traverse but modification is constant Searching for a value: O(n) time, O(1) space​ Traverse a linked list: O(n) time, O(1) space​ space is not affected Copy a linked list: O(n) time, O(n) space​ "},{"title":"Doubly Linked List​","type":1,"pageTitle":"Linked Lists","url":"docs/interviewPrep/data_structures/08LinkedLists/#doubly-linked-list","content":" similar to a singly linked list, except that each node in a doubly linked list also has a pointer to the previous node the previous node is typically stored in a prev property just as the next property of a doubly linked list's tail points to the null value, the prev property of a doubly linked list head also points to the null valuevisual representation of a doubly linked list whose nodes hold integer values null &lt;-&gt; 0 &lt;-&gt; 1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; null a doubly linked list typically exposes both its head and tail to its user it also behaves very similarly to a singly linked list "},{"title":"standard operations and their time complexities​","type":1,"pageTitle":"Linked Lists","url":"docs/interviewPrep/data_structures/08LinkedLists/#standard-operations-and-their-time-complexities","content":"Initialize a linked list: O(n) time, O(n) space​ this will create 2n memory slots, 1 for the node and 1 for the pointerit will also need to allocate the n chunks of memory thus will take n time Accessing the head: O(1) time, O(1) space​ Accessing the tail: O(1) time, O(1) space​ Accessing a middle node: O(n) time, O(1) space​ Inserting / Removing the head: O(1) time, O(1) space​ Inserting / Removing the tail: O(1) time, O(1) space​ Inserting / Removing a middle node: O(n) to access + O(1) to modify time, O(1) space​ Searching for a value: O(n) time, O(1) space​ Traverse a linked list: O(n) time, O(1) space​ space is not affected Copy a linked list: O(n) time, O(n) space​ "},{"title":"Circular Linked List / Cyclic Linked List​","type":1,"pageTitle":"Linked Lists","url":"docs/interviewPrep/data_structures/08LinkedLists/#circular-linked-list--cyclic-linked-list","content":" a linked list that has no clear head or tail because its tail points to its headforming a closed circle it can be either singly circular linked list or a doubly circular linked list "},{"title":"Circular Double Linked List / Cyclic Double Linked List​","type":1,"pageTitle":"Linked Lists","url":"docs/interviewPrep/data_structures/08LinkedLists/#circular-double-linked-list--cyclic-double-linked-list","content":" the last element is pointing to the first and first points to the last "},{"title":"Stack Linked List Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/stackLinkedList","content":"Stack Linked List Example class StackLinkedList&lt;T&gt; { private items: DoublyLinkedList&lt;T&gt;; constructor() { this.items = new DoublyLinkedList&lt;T&gt;(); } public push(element: T) { this.items.push(element); } public pop() { if (this.isEmpty()) { return undefined; } const result = this.items.removeAt(this.size() - 1); return result; } public peek() { if (this.isEmpty()) { return undefined; } return this.items.getNodeAt(this.size() - 1).element; } public isEmpty() { return this.items.isEmpty(); } public size() { return this.items.size(); } public clear() { this.items.clear(); } public toString() { return this.items.toString(); } } ","keywords":""},{"title":"Spiral Traverse","type":0,"sectionRef":"#","url":"docs/interviewPrep/codingTests/medium/arrays/spiralTraverse","content":"Spiral Traverse Write a function that takes in an n x m two-dimensional array (that can be square-shaped when n == m) and returns a one-dimensional array of all the array's elements in spiral order. Spiral order starts at the top left corner of the two-dimensional array, goes to the right, and proceeds in a spiral pattern all the way until every element has been visited. Sample Input array = [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7], ] Sample Output[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] # solution 1 def spiralTraverse(array): # Write your code here. startRow = 0 endRow = len(array) - 1 startCol = 0 endCol = len(array[0]) - 1 result = [] while startRow &lt;= endRow and startCol &lt;= endCol: for i in range(startCol, endCol + 1): result.append(array[startRow][i]) for i in range(startRow + 1, endRow + 1): result.append(array[i][endCol]) for i in range(endCol - 1, startCol - 1, -1): if startRow == endRow: break result.append(array[endRow][i]) for i in range(endRow - 1, startRow, -1): if startCol == endCol: break result.append(array[i][startCol]) startRow += 1 endRow -= 1 startCol += 1 endCol -= 1 return result # solution 2 def spiralTraverse(array): # Write your code here. result = [] traverse(array, 0, len(array) - 1, 0, len(array[0]) - 1, result) return result def traverse(array, startRow, endRow, startCol, endCol, result): if startRow &gt; endRow or startCol &gt; endCol: return for i in range(startCol, endCol + 1): result.append(array[startRow][i]) for i in range(startRow + 1, endRow + 1): result.append(array[i][endCol]) for i in range(endCol - 1, startCol - 1, -1): if startRow == endRow: return result.append(array[endRow][i]) for i in range(endRow - 1, startRow, -1): if startCol == endCol: return result.append(array[i][startCol]) traverse(array, startRow + 1, endRow - 1, startCol + 1, endCol - 1, result) // solution 1 function spiralTraverse(array) { // Write your code here. const result = []; let startRow = 0; let endRow = array.length - 1; let startCol = 0; let endCol = array[0].length - 1; while (startRow &lt;= endRow &amp;&amp; startCol &lt;= endCol) { for (let i = startCol; i &lt; endCol + 1; i++) { result.push(array[startRow][i]); } for (let i = startRow + 1; i &lt; endRow + 1; i++) { result.push(array[i][endCol]); } for (let i = endCol - 1; i &gt; startCol - 1; i--) { if (startRow === endRow) { break; } result.push(array[endRow][i]); } for (let i = endRow - 1; i &gt; startRow; i--) { if (startCol === endCol) { break; } result.push(array[i][startCol]); } startRow++; endRow--; startCol++; endCol--; } return result; } // solution 2 function spiralTraverse(array) { // Write your code here. const result = []; traverse(array, 0, array.length - 1, 0, array[0].length - 1, result); return result; } function traverse(array, startRow, endRow, startCol, endCol, result) { if (startRow &gt; endRow || startCol &gt; endCol) { return; } for (let i = startCol; i &lt; endCol + 1; i++) { result.push(array[startRow][i]); } for (let i = startRow + 1; i &lt; endRow + 1; i++) { result.push(array[i][endCol]); } for (let i = endCol - 1; i &gt; startCol - 1; i--) { if (startRow === endRow) { break; } result.push(array[endRow][i]); } for (let i = endRow - 1; i &gt; startRow; i--) { if (startCol === endCol) { break; } result.push(array[i][startCol]); } traverse(array, startRow + 1, endRow - 1, startCol + 1, endCol - 1, result); } ","keywords":""},{"title":"Circular Linked List Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/circularLinkedList","content":"","keywords":""},{"title":"Node​","type":1,"pageTitle":"Circular Linked List Example","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/circularLinkedList#node","content":"class Node&lt;T&gt; { constructor(public element: T, public next?: Node&lt;T&gt;) {} }  "},{"title":"Circular Linked List​","type":1,"pageTitle":"Circular Linked List Example","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/circularLinkedList#circular-linked-list","content":"export default class CircularLinkedList&lt;T&gt; extends LinkedList&lt;T&gt; { /** * @description: Add an element to the end of the linked list * @param {T} element */ public push(element: T) { const node = new Node(element); let current; if (this.head == null) { this.head = node; } else { current = this.getNodeAt(this.size() - 1); current.next = node; } node.next = this.head; // 👈 Remember to point the next of the last node to head this.count++; } /** * @description: Inserts an element at the specified index * @param {T} element * @param {number} index * @return {boolean} Returns whether the insertion was successful */ public insert(element: T, index: number) { if (index &gt;= 0 &amp;&amp; index &lt;= this.count) { const node = new Node(element); let current = this.head; if (index === 0) { // 👇 When inserted into the first time, there are two cases if (this.head == null) { // no element this.head = node; node.next = this.head; // 👈 special } else { // already have some elements let tail = this.getNodeAt(this.size() - 1); this.head = node; node.next = current; tail.next = this.head; // 👈 special } } else { const previous = this.getNodeAt(index - 1); node.next = previous.next; previous.next = node; } this.count++; return true; } return false; } /** * @description: removes the element at the specified index * @param {number} index * @return {T} Returns the removed element */ public removeAt(index: number) { if (index &gt;= 0 &amp;&amp; index &lt; this.count) { let current = this.head; if (index === 0) { // 👇 Delete the first time, have two cases if (this.size() === 1) { // only one element this.head = undefined; } else { // has several elements let tail = this.getNodeAt(this.size() - 1); this.head = this.head.next; tail.next = this.head; // 👈 next points to head } } else { const previous = this.getNodeAt(index - 1); current = previous.next; previous.next = current.next; } this.count--; return current.element; } return undefined; } }  "},{"title":"Dictionary Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/09HashTables/typescript/dictionary","content":"Dictionary Example class Dictionary&lt;K, V&gt; { private table: Map&lt;K, V&gt;; constructor() { this.table = new Map(); } /** * @description: set key-value pair * @param {K} key * @param {V} value * @return {boolean} */ public set(key: K, value: V): boolean { this.table.set(key, value); return true; } /** * @description: get value by key * @param {K} key * @return {V} */ public get(key: K): V { return this.table.get(key); } /** * @description: Returns whether this key exists * @param {K} key * @return {boolean} */ public hasKey(key: K): boolean { return this.table.has(key); } /** * @description: remove key-value pairs * @param {K} key * @return {boolean} */ public remove(key: K): boolean { return this.table.delete(key); } /** * @description: return value array * @return {Array&lt;V&gt;} */ public values(): V[] { return Array.from(this.table.values()); } /** * @description: return key array * @return {Array&lt;K&gt;} */ public keys(): K[] { return Array.from(this.table.keys()); } /** * @description: Returns an array of key-value pairs * @return {Array&lt;K, V&gt;} */ public keyValues(): [K, V][] { return Array.from(this.table.entries()); } /** * @description: iterate over the entire dictionary * @param {function} callbackFn */ public forEach(callbackFn: (key: K, value: V) =&gt; any) { const valuePairs = this.keyValues(); for (let i = 0; i &lt; valuePairs.length; i++) { // Terminate the iteration when callbackFn returns false if (callbackFn(valuePairs[i][0], valuePairs[i][1]) === false) { break; } } } /** * @description: * @return {boolean} */ public isEmpty(): boolean { return this.size() === 0; } /** * @description: * @return {number} */ public size(): number { return this.table.size; } /** * @description: */ public clear() { this.table.clear(); } /** * @description: * @return {string} */ public toString(): string { if (this.isEmpty()) { return &quot;&quot;; } let objStringList = []; for (const [key, value] of this.table) { objStringList.push(`[${key}: ${value}]`); } return objStringList.join(&quot;,&quot;); } } ","keywords":""},{"title":"Stacks and Queues","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/10StacksAndQueues/","content":"","keywords":""},{"title":"Stack​","type":1,"pageTitle":"Stacks and Queues","url":"docs/interviewPrep/data_structures/10StacksAndQueues/#stack","content":" an array like data structure whose elements follow the Last In First Out (LIFO) rulea stack is often compared to a stack of books on a table the last book that's placed on the stack of books is the 1st 1 that's taken off the stack a stack is typically implemented with a dynamic array or with a singly linked listexample we have a function that calls another function and it also calls a different functionthe result from the innermost functions are being returned up In a situation like this it's better to use a stack We would take the uppermost function, start the execution until we reach a function call At this moment we would take the state of execution of current function, put it into a stack and start execution of an inner functionThis operation is repeated with every inner functionWhen the execution flow reaches a return statement, an item is removed from the stack and execution continues usage a stack is useful for a reversal of elements If a string is inserted into a stack, when popped it will be reversed Other usage of a stack would be for storage of previous operations from Command pattern In this case, if your commands have an undo operation, one could simply pop the last command and reverse its actions usually implemented as a linked list or a dynamic array if you need to find an element in a stack, it will take, in a worst-case O(n) timeSorting a stack is also not an easy task "},{"title":"Standard operations and complexities​","type":1,"pageTitle":"Stacks and Queues","url":"docs/interviewPrep/data_structures/10StacksAndQueues/#standard-operations-and-complexities","content":"Pushing an element onto the stack: O(1) time and space​ not using any additional space that grows with respect to the size of the input Popping an element off the stack: O(1) time and space​ Peeking at the element on the top of the stack: O(1) time and space​ Searching for an element in the stack: O(n) time, O(1) space​ "},{"title":"Max Stack​","type":1,"pageTitle":"Stacks and Queues","url":"docs/interviewPrep/data_structures/10StacksAndQueues/#max-stack","content":"keeps track of the largest element in the stack "},{"title":"Min Stack​","type":1,"pageTitle":"Stacks and Queues","url":"docs/interviewPrep/data_structures/10StacksAndQueues/#min-stack","content":"keeps track of the smallest element in the stack "},{"title":"Queue​","type":1,"pageTitle":"Stacks and Queues","url":"docs/interviewPrep/data_structures/10StacksAndQueues/#queue","content":" an array like data structure whose elements follow the First In First Out (FIFO) rulea queue is often compared to a group of people standing in line to purchase items at a store the 1st person to get in line is the 1st 1 to purchase items and to get out of the queue a queue is typically implemented with a doubly linked list because removing the 1st element in an array is not O(1) time usage Queues are like stacks in terms of time needed for adding and removing an elementQueues are implemented using double linked list "},{"title":"Standard operations and complexities​","type":1,"pageTitle":"Stacks and Queues","url":"docs/interviewPrep/data_structures/10StacksAndQueues/#standard-operations-and-complexities-1","content":"Enqueuing an element into the queue: O(1) time and space​ Dequeuing an element out of the queue: O(1) time and space​ Peeking at the element at the front of the queue: O(1) time and space​ Searching for an element in the queue: O(n) time, O(1) space​ "},{"title":"Priority queue​","type":1,"pageTitle":"Stacks and Queues","url":"docs/interviewPrep/data_structures/10StacksAndQueues/#priority-queue","content":"keeps track of an element with high prioritymin heap is used for building a priority queueit is a data structure for maintaining a set S of elements, each with an associated value called a keyA max-priority queue supports the following operations INSERT(S, x) inserts the element x into the set SMAXIMUM(S) returns the element of S with the largest keyEXTRACT-MAX(S) removes and returns the element of S with the largest keyINCREASE-KEY(S, x, k) increases the value of element xs key to the new value k, which is assumed to be at least as large as xs current key value This is a very good sort, but in most cases it is not the most optimal sort - reason why we are considering it is because on the basis of the heap it is very good to build a queue with priorityFor example, where you can use this queue schedule a job on the server or use an event-driven approach when modeling physical processes with great complexityFor example, an event occurs with a minimum priority, it is executed, the time is recalculated, inserted into the queue, and the event we need appears at the topAlso, there are queues with the highest priority or with the lowest You can insert an element into it, take the maximum element, extract the maximum element, and change the priority of some elementFor example, processor time, there is a queue of tasks that it executes in one clock cycle, it performs a task, the priority changes we insert it into the queue and take it with the next priority "},{"title":"Double ended queue​","type":1,"pageTitle":"Stacks and Queues","url":"docs/interviewPrep/data_structures/10StacksAndQueues/#double-ended-queue","content":"have both properties of a queue and a stack "},{"title":"Singly Linked List Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/singlyLinkedList","content":"","keywords":""},{"title":"Utils​","type":1,"pageTitle":"Singly Linked List Example","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/singlyLinkedList#utils","content":"function defaultEquals&lt;T&gt;(a: T, b: T): boolean { return a === b; }  "},{"title":"Node​","type":1,"pageTitle":"Singly Linked List Example","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/singlyLinkedList#node","content":"class Node&lt;T&gt; { constructor(public element: T, public next?: Node&lt;T&gt;) {} }  "},{"title":"Linked List​","type":1,"pageTitle":"Singly Linked List Example","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/singlyLinkedList#linked-list","content":"class LinkedList&lt;T&gt; { protected count = 0; protected head?: Node&lt;T&gt;; /** * @description: * @param {T} element */ public push(element: T) { const node = new Node(element); let current; if (this.head == null) { // add directly when the first element this.head = node; } else { // find the last element, add after it current = this.getNodeAt(this.size() - 1); current.next = node; } // Finally increment the count by 1 this.count++; } /** * @description: Get the node at the specified index * @param {number} index * @return {Node&lt;T&gt;} Returns the node at the specified index */ public getNodeAt(index: number): Node&lt;T&gt; { if (index &gt;= 0 &amp;&amp; index &lt;= this.count) { let node = this.head; // How many times to iterate on from the first node for (let i = 0; i &lt; index &amp;&amp; node != null; i++) { node = node.next; } return node; } return undefined; } /** * @description: Get the element at the specified index * @param {number} index * @return {T} Returns the element at the specified index */ public getElementAt(index: number): T { return this.getNodeAt(index)?.element; } /** * @description: Inserts an element at the specified index * @param {T} element * @param {number} index * @return {boolean} Returns whether the insertion was successful */ public insert(element: T, index: number) { if (index &gt;= 0 &amp;&amp; index &lt;= this.count) { const node = new Node(element); // Insert elements are also divided into &quot;first&quot; and &quot;non-first&quot; cases if (index === 0) { const current = this.head; node.next = current; this.head = node; } else { // Untangle the next link at this location and insert a new node const previous = this.getNodeAt(index - 1); node.next = previous.next; previous.next = node; } this.count++; return true; } return false; } /** * @description: removes the element at the specified index * @param {number} index * @return {T} Returns the removed element */ public removeAt(index: number) { if (index &gt;= 0 &amp;&amp; index &lt; this.count) { let current = this.head; // Inserting and removing elements is also divided into two cases: &quot;first&quot; and &quot;non-first&quot; if (index === 0) { this.head = current.next; } else { const previous = this.getNodeAt(index - 1); current = previous.next; previous.next = current.next; } this.count--; return current.element; } return undefined; } /** * @description: remove the specified element * @param {T} element * @return {T} element returns the removed element */ public remove(element: T): T { const index = this.indexOf(element); return this.removeAt(index); } /** * @description: Returns the index of the specified element (only the first equal from the front is returned) * @param {T} element * @return {number} index */ public indexOf(element: T): number { let current = this.head; // iterate over looking for equal elements for (let i = 0; i &lt; this.size() &amp;&amp; current != null; i++) { // use the method to determine equality if (defaultEquals(element, current.element)) { return i; } current = current.next; } return -1; } /** * @description: * @return {boolean} */ public isEmpty(): boolean { return this.size() === 0; } /** * @description: * @return {number} */ public size(): number { return this.count; } /** * @description: Get the first node of the linked list * @return {Node&lt;T&gt;} */ public getHead(): Node&lt;T&gt; { return this.head; } /** * @description: */ public clear() { this.head = undefined; this.count = 0; } /** * @description: * @return {string} */ public toString(): string { if (this.head == null) { return &quot;&quot;; } let objString = `${this.head.element}`; let current = this.head.next; for (let i = 1; i &lt; this.size() &amp;&amp; current != null; i++) { objString = `${objString},${current.element}`; current = current.next; } return objString; } }  "},{"title":"Graphs","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/12Graphs/","content":"","keywords":""},{"title":"Graph cycle​","type":1,"pageTitle":"Graphs","url":"docs/interviewPrep/data_structures/12Graphs/#graph-cycle","content":"a cycle occurs in a graph when 3 or more vertices in the graph are connected so as to form a closed loopnote that the definition of a graph cycle is sometimes broadened to include cycles of length 2 or 1 in the context of coding interviews, when dealing with questions that involve graph cycles it's important to clarify what exactly constitutes a cycle "},{"title":"Acyclic Graph​","type":1,"pageTitle":"Graphs","url":"docs/interviewPrep/data_structures/12Graphs/#acyclic-graph","content":"a graph that has no cycles "},{"title":"Cyclic Graph​","type":1,"pageTitle":"Graphs","url":"docs/interviewPrep/data_structures/12Graphs/#cyclic-graph","content":" a graph that has at least 1 cycleif you are traversing through the graph, and going down connections, and found yourself revisiting a connection that you have previously visited just by following the path of 3 edges then that means there's a cycle in the graph "},{"title":"Directed Graph​","type":1,"pageTitle":"Graphs","url":"docs/interviewPrep/data_structures/12Graphs/#directed-graph","content":" a graph that whose edges are directed meaning that they can only be traversed in 1 direction, which is specified for e.g. a graph of airports and flights would likely be directed since a flight specifically goes from 1 airport to another (has a direction) without necessarily implying the presence of a flight in the opposite direction "},{"title":"Directed Graph with Weights​","type":1,"pageTitle":"Graphs","url":"docs/interviewPrep/data_structures/12Graphs/#directed-graph-with-weights","content":" "},{"title":"Undirected Graph​","type":1,"pageTitle":"Graphs","url":"docs/interviewPrep/data_structures/12Graphs/#undirected-graph","content":" a graph whose edges are undirected, meaning that they can be traversed in both directionse.g. a graph of friends would likely be undirected, since friendship is by nature bidirectional "},{"title":"Connected Graph​","type":1,"pageTitle":"Graphs","url":"docs/interviewPrep/data_structures/12Graphs/#connected-graph","content":" a graph is connected if for every pair of vertices in the graph there's a path of 1 or more edges connecting the given verticesin the case of a directed graph, the graph is strongly connected if there are bidirectional connections between the vertices of every pair of vertices for every vertex-pair (u, v), can reach v from u and u from v weakly connected if there are connections (but not necessarily bidirectional ones) between the vertices of every pair of vertices "},{"title":"Disconnected Graph​","type":1,"pageTitle":"Graphs","url":"docs/interviewPrep/data_structures/12Graphs/#disconnected-graph","content":"a graph that isn't connected is said to be disconnected "},{"title":"standard operations and complexities​","type":1,"pageTitle":"Graphs","url":"docs/interviewPrep/data_structures/12Graphs/#standard-operations-and-complexities","content":""},{"title":"Storing a graph: O(V + E) space​","type":1,"pageTitle":"Graphs","url":"docs/interviewPrep/data_structures/12Graphs/#storing-a-graph-ov--e-space","content":"storing V vertices (nodes) V is the number of vertices in the graph storing E edges E is the number of edges in the graph "},{"title":"Traversing a graph: O(V + E) time​","type":1,"pageTitle":"Graphs","url":"docs/interviewPrep/data_structures/12Graphs/#traversing-a-graph-ov--e-time","content":"Depth First Search (DFS)​ traversing the graph deeper before going wide Breath First Search (BFS)​ traversing the graph wider before going deep it is one of the simplest algorithms for searching a graph and the archetype for many important graph algorithms The algorithm works on both directed and undirected graphs example: assumes that the input graph G = (V, E) is represented using adjacency lists function BFS(Graph, source) { let u, vertex; for (u of Graph) { u.color = &quot;WHITE&quot;; u.dist = Number.POSITIVE_INFINITY; u.parent = null; } source.color = &quot;GRAY&quot;; source.dist = 0; source.parent = null; Queue = []; Queue.push(source); while (Queue.length &gt; 0) { u = Queue.unshift(); for (vertex of Graph.Adj[u]) { if (vertex.color === &quot;WHITE&quot;) { vertex.color = &quot;GRAY&quot;; vertex.dist = u.dist + 1; vertex.parent = u; Queue.push(Queue, vertex); } } u.color = &quot;BLACK&quot;; } }  "},{"title":"Sorted Linked List Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/sortedLinkedList","content":"","keywords":""},{"title":"Utils​","type":1,"pageTitle":"Sorted Linked List Example","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/sortedLinkedList#utils","content":"enum Compare { LessThan = -1, BiggerThan = 1, Equals = 0, } function compare&lt;T&gt;(a: T, b: T): number { if (a === b) { return Compare.Equals; } return a &lt; b ? Compare.LessThan : Compare.BiggerThan; }  "},{"title":"Sorted Linked List​","type":1,"pageTitle":"Sorted Linked List Example","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/sortedLinkedList#sorted-linked-list","content":"class SortedLinkedList&lt;T&gt; extends LinkedList&lt;T&gt; { /** * @description: Add an element to the linked list * @param {T} element */ public push(element: T) { if (this.isEmpty()) { super.push(element); } else { const index = this.getIndexNextSortedElement(element); super.insert(element, index); } } /** * @description: Add an element to the linked list * @param {T} element */ public insert(element: T, index: number = 0) { if (this.isEmpty()) { return super.insert(element, 0); } index = this.getIndexNextSortedElement(element); return super.insert(element, index); } /** * @private * @description: Get the position where the element should be inserted * @param {T} element * @return {Number} index */ private getIndexNextSortedElement(element: T) { let current = this.head; let i = 0; for (; i &lt; this.size() &amp;&amp; current; i++) { const comp = compare(element, current.element); if (comp === Compare.LESS_THAN) { return i; } current = current.next; } return i; } }  "},{"title":"Queue Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/10StacksAndQueues/typescript/queue","content":"Queue Example class Queue&lt;T&gt; { private count: number; private lowestCount: number; private items: Map&lt;number, T&gt;; constructor() { this.count = 0; this.lowestCount = 0; this.items = new Map(); } /** * @description: Enqueue in the count direction (bottom of the queue) * @param {T} element */ public enqueue(element: T): void { this.items.set(this.count, element); this.count++; } /** * @description: Dequeue in the direction of lowestCount (top of queue) * @return {T} element */ public dequeue(): T { if (this.isEmpty()) { return undefined; } const result: T = this.items.get(this.lowestCount); this.items.delete(this.lowestCount); this.lowestCount++; return result; } /** * @description: Returns the element at the top of the queue * @return {T} element */ public peek(): T { if (this.isEmpty()) { return undefined; } return this.items.get(this.lowestCount); } /** * @description: Returns whether the queue is empty * @return {Boolean} */ public isEmpty(): boolean { return this.items.size === 0; } /** * @description: empty the queue */ public clear(): void { this.items = new Map(); this.count = 0; this.lowestCount = 0; } /** * @description: Returns the number of queue elements * @return {Number} */ public size(): number { return this.items.size; } /** * @description: Override Object's default toString * @return {String} */ public toString(): string { if (this.isEmpty()) { return &quot;&quot;; } let objString: string = `${this.items.get(this.lowestCount)}`; for (let i = this.lowestCount + 1; i &lt; this.count; i++) { objString = `${objString},${this.items.get(i)}`; } return objString; } } ","keywords":""},{"title":"Graph Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/12Graphs/typescript/graph","content":"Graph Example class Graph { private vertices: (string | number)[] = []; private adjList: Dictionary&lt;string | number, (string | number)[]&gt; = new Dictionary(); constructor(private isDirected = false) {} public addVertex(v: string | number) { if (!this.vertices.includes(v)) { this.vertices.push(v); this.adjList.set(v, []); // initialize adjacency list with array as well; } } public addEdge(a: string | number, b: string | number) { if (!this.adjList.get(a)) { this.addVertex(a); } if (!this.adjList.get(b)) { this.addVertex(b); } this.adjList.get(a).push(b); if (!this.isDirected) { this.adjList.get(b).push(a); } // adjList.get(w).push(v); //commented to run the improved DFS with topological sorting } public getVertices() { return this.vertices; } public getAdjList() { return this.adjList; } public toString() { let s = &quot;&quot;; for (let i = 0; i &lt; this.vertices.length; i++) { s += this.vertices[i] + &quot; -&gt; &quot;; const neighbors = this.adjList.get(this.vertices[i]); for (let j = 0; j &lt; neighbors.length; j++) { s += neighbors[j] + &quot; &quot;; } s += &quot;\\n&quot;; } return s; } } ","keywords":""},{"title":"B-Trees","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/13Trees/bTrees/","content":"B-Trees","keywords":""},{"title":"Priority Queue Array Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/10StacksAndQueues/typescript/priorityQueueArray","content":"Priority Queue Array Example utils enum Colors { Red = 0, Black = 1, } enum Compare { LessThan = -1, BiggerThan = 1, Equals = 0, } function compare&lt;T&gt;(a: T, b: T): number { if (a === b) { return Compare.Equals; } return a &lt; b ? Compare.LessThan : Compare.BiggerThan; } class PriorityQueue&lt;T&gt; { private items: T[]; constructor() { this.items = []; } public enqueue(element: T) { let added = false; for (let i = 0; i &lt; this.items.length; i++) { if (compare(element, this.items[i]) === Compare.LessThan) { this.items.splice(i, 0, element); added = true; break; } } if (!added) { this.items.push(element); } } public dequeue() { return this.items.shift(); } public peek() { if (this.isEmpty()) { return undefined; } return this.items[0]; } public isEmpty() { return this.items.length === 0; } public clear() { this.items = []; } public size() { return this.items.length; } public toString() { if (this.isEmpty()) { return &quot;&quot;; } return this.items; } } ","keywords":""},{"title":"Stack Array Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/10StacksAndQueues/typescript/stackArray","content":"Stack Array Example class StackArray&lt;T&gt; { // stored Array private items: T[]; constructor() { this.items = []; } /** * @description: * @param {T} element */ public push(element: T) { this.items.push(element); } /** * @description: * @return {T} */ public pop(): T { return this.items.pop(); } /** * @description: * @return {T} */ public peek(): T { return this.items[this.items.length - 1]; } /** * @description: * @return {Boolean} */ public isEmpty(): boolean { return this.items.length === 0; } /** * @description: * @return {Number} */ public size(): number { return this.items.length; } /** * @description: */ public clear() { this.items = []; } /** * @description: * @return {String} */ public toString(): string { return this.items.toString(); } } ","keywords":""},{"title":"Stack Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/10StacksAndQueues/typescript/stack","content":"Stack Example class Stack&lt;T&gt; { // stored Map private items: Map&lt;number, T&gt;; // constructor() { this.items = new Map(); } /** * @description: push onto the stack * @param {T} element */ public push(element: T) { this.items.set(this.items.size, element); } /** * @description: * @return {T} */ public pop(): T { if (this.isEmpty()) { return undefined; } const result = this.items.get(this.items.size - 1); this.items.delete(this.items.size - 1); return result; } /** * @description: Returns the top element of the stack * @return {T} */ public peek(): T { if (this.isEmpty()) { return undefined; } return this.items.get(this.items.size - 1); } /** * @description: * @return {Boolean} */ public isEmpty(): boolean { return this.items.size === 0; } /** * @description: * @return {Number} */ public size(): number { return this.items.size; } /** * @description: */ public clear() { this.items.clear(); } /** * @description: * @return {String} */ public toString(): string { if (this.isEmpty()) { return &quot;&quot;; } let result: string = &quot;&quot;; this.items.forEach((value, key) =&gt; { result = `${result}${key === 0 ? &quot;&quot; : &quot;,&quot;}${value}`; }); return result; } } ","keywords":""},{"title":"Doubly Linked List Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/doublyLinkedList","content":"","keywords":""},{"title":"Node​","type":1,"pageTitle":"Doubly Linked List Example","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/doublyLinkedList#node","content":"class DoublyNode&lt;T&gt; extends Node&lt;T&gt; { constructor( public element: T, public next?: DoublyNode&lt;T&gt;, public prev?: DoublyNode&lt;T&gt; ) { super(element, next); } }  "},{"title":"Doubly Linked List​","type":1,"pageTitle":"Doubly Linked List Example","url":"docs/interviewPrep/data_structures/08LinkedLists/typescript/doublyLinkedList#doubly-linked-list","content":"class DoublyLinkedList&lt;T&gt; extends LinkedList&lt;T&gt; { // There is one more tail node, and rewriting head protected head?: DoublyNode&lt;T&gt;; protected tail?: DoublyNode&lt;T&gt;; /** * @description: Add an element to the end of a doubly linked list * @param {T} element */ public push(element: T) { const node = new DoublyNode(element); if (this.head == null) { this.head = node; this.tail = node; // 👈 new } else { // 👇 revise // Add to the tail, exchange pointers with each other this.tail.next = node; node.prev = this.tail; // Finally set node to tail this.tail = node; } this.count++; } /** * @description: Inserts an element at the specified index * @param {T} element * @param {number} index * @return {boolean} Returns whether the insertion was successful */ public insert(element: T, index: number): boolean { if (index &gt;= 0 &amp;&amp; index &lt;= this.count) { const node = new DoublyNode(element); let current = this.head; // 👇 insert into the first if (index === 0) { // linked list is empty if (this.head == null) { this.head = node; this.tail = node; // linked list is not empty } else { node.next = this.head; this.head.prev = node; // NEW this.head = node; } // 👇 insert to the last } else if (index === this.count) { current = this.tail; current.next = node; node.prev = current; this.tail = node; // 👇 insert to the last } else { const previous = this.getNodeAt(index - 1); current = previous.next; node.next = current; previous.next = node; current.prev = node; // NEW node.prev = previous; // NEW } this.count++; return true; } return false; } /** * @description: removes the element at the specified index * @param {number} index * @return {T} Returns the removed element */ public removeAt(index: number): T { if (index &gt;= 0 &amp;&amp; index &lt; this.count) { let current = this.head; // 👇 delete the first if (index === 0) { this.head = this.head.next; // If there is only one element, the tail needs to be adjusted at the same time if (this.count === 1) { this.tail = undefined; } else { this.head.prev = undefined; } // 👇 delete the last } else if (index === this.count - 1) { current = this.tail; this.tail = current.prev; this.tail.next = undefined; // 👇 normal delete } else { current = this.getNodeAt(index); const previous = current.prev; const next = current.next; previous.next = next; next.prev = previous; } this.count--; return current.element; } return undefined; } /** * @description: Get the last node of the linked list * @return {Node&lt;T&gt;} */ public getTail(): DoublyNode&lt;T&gt; { return this.tail; } /** * @description: */ public clear() { super.clear(); this.tail = undefined; } /** * @description: output string from tail to head * @return {string} */ public inverseToString() { if (this.tail == null) { return &quot;&quot;; } let objString = `${this.tail.element}`; let previous = this.tail.prev; while (previous != null) { objString = `${objString},${previous.element}`; previous = previous.prev; } return objString; } }  "},{"title":"Deque Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/10StacksAndQueues/typescript/deque","content":"Deque Example export default class Deque&lt;T&gt; { private count: number; private lowestCount: number; private items: Map&lt;number, T&gt;; constructor() { this.count = 0; this.lowestCount = 0; this.items = new Map(); } /** * @description: Enqueue in the direction of lowestCount (top of queue) * @param {T} element */ public addFront(element: T): void { this.lowestCount--; this.items.set(this.lowestCount, element); } /** * @description: Enqueue in the count direction (bottom of the queue) * @param {T} element */ public addBack(element: T): void { this.items.set(this.count, element); this.count++; } /** * @description: Dequeue in the direction of lowestCount (top of queue) * @return {T} element */ public removeFront(): T { if (this.isEmpty()) { return undefined; } const result = this.items.get(this.lowestCount); this.items.delete(this.lowestCount); this.lowestCount++; return result; } /** * @description: Dequeue in count direction (bottom of queue) * @return {T} element */ public removeBack(): T { if (this.isEmpty()) { return undefined; } this.count--; const result = this.items.get(this.count); this.items.delete(this.count); return result; } /** * @description: Returns the element at the top of the queue * @return {T} element */ public peekFront(): T { if (this.isEmpty()) { return undefined; } return this.items.get(this.lowestCount); } /** * @description: Returns the element at the bottom of the queue * @return {T} element */ public peekBack(): T { if (this.isEmpty()) { return undefined; } return this.items.get(this.count - 1); } /** * @description: * @return {Boolean} */ public isEmpty(): boolean { return this.items.size === 0; } /** * @description: */ public clear(): void { this.items = new Map(); this.count = 0; this.lowestCount = 0; } /** * @description: * @return {Number} */ public size(): number { return this.items.size; } /** * @description: * @return {String} */ public toString(): string { if (this.isEmpty()) { return &quot;&quot;; } let objString: string = `${this.items.get(this.lowestCount)}`; for (let i = this.lowestCount + 1; i &lt; this.count; i++) { objString = `${objString},${this.items.get(i)}`; } return objString; } } ","keywords":""},{"title":"Strings","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/11Strings/","content":"","keywords":""},{"title":"e.g. of an operation that's deceptively expensive due to string immutability​","type":1,"pageTitle":"Strings","url":"docs/interviewPrep/data_structures/11Strings/#eg-of-an-operation-thats-deceptively-expensive-due-to-string-immutability","content":"string = &quot;this is a string&quot; newString = &quot;&quot; for character in string: newString += character # creates a new string  the operation above has a time complexity of O(n2) where n is the length of string because each addition of a character to newString creates an entirely new string and is itself an O(n) operation therefore, n O(n) operations are performed, leading to an O(n2) time complexity operation overall "},{"title":"standard operations and complexities​","type":1,"pageTitle":"Strings","url":"docs/interviewPrep/data_structures/11Strings/#standard-operations-and-complexities","content":""},{"title":"Traversing a string: O(n) time, O(1) space​","type":1,"pageTitle":"Strings","url":"docs/interviewPrep/data_structures/11Strings/#traversing-a-string-on-time-o1-space","content":""},{"title":"Copying a string: O(n) time and space​","type":1,"pageTitle":"Strings","url":"docs/interviewPrep/data_structures/11Strings/#copying-a-string-on-time-and-space","content":"space complexity is linear because it would be storing another n characters in space "},{"title":"Accessing a character at a given index in a string: O(1) time and space​","type":1,"pageTitle":"Strings","url":"docs/interviewPrep/data_structures/11Strings/#accessing-a-character-at-a-given-index-in-a-string-o1-time-and-space","content":""},{"title":"Insert a value in a string: O(n) time​","type":1,"pageTitle":"Strings","url":"docs/interviewPrep/data_structures/11Strings/#insert-a-value-in-a-string-on-time","content":"in C++, strings are mutable, so alteration of string after creation is possible time complexity is O(1) for this case other than C++, in other languages, strings are immutable strings cannot be altered after creationto alter a string, need to copy the string and create a brand new string that have that new character in this case, it is better to split the string in to an actual array of characters, append the new character, then rejoin them back into a string "},{"title":"Find sub strings within a string​","type":1,"pageTitle":"Strings","url":"docs/interviewPrep/data_structures/11Strings/#find-sub-strings-within-a-string","content":"Knuth-Morris-Pratt algorith a very fast but complex algorithmallows you to find 1 sub string inside another stringor check if it is present in another string "},{"title":"Big Design Up Front (BDUF)","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/BDUF/","content":"Big Design Up Front (BDUF) this is a principle that is perfect for that environment it states that you should spend more time fully designing the application before you even write the first line of code Clearly, this says waterfall all over the place, where you can spend the required amount of time completely defining everything, with the hopes that once you start developing, you won’t spend too much time finding and fixing design flawsOf course, like with many of the other principles described here, it is not without its detractors Especially agile developers tend to argue against this one, considering that the ever changing nature of agile life cycles make this principle uselessUnless of course, you enjoy spending time designing something that you know will change completely by the end of the project","keywords":""},{"title":"Don't Repeat Yourself (DRY)","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/DRY/","content":"Don't Repeat Yourself (DRY) It usually means refactoring code by taking something done several times and turning it into a loop or a function DRY code is easy to change, because you only have to make any change in one place Easy to change doesn’t just mean clean code if you can’t figure out what a variable is for or what a function does based on its name then it’s harder to change it later, when you might not remember exactly how your code works or when somebody else is trying to change your code Using descriptive variable names make it easier to understand what the variable contains and in turn make it easier to use or change later onA good starting naming convention for your variables and functions would be: singular words for variables containing values i.e: fruit, firstName, favoriteColor plural words for variables containing objects or arrays i.e: fruits, names, myColors a description for variables containing functions ie: logFruits, findPerson, getFavoriteColor Conclusion Whenever you finish writing some code, you should always look back to see if there is any way you can DRY it up, including: using descriptive variable namestaking repetitive bits of codeextracting them into a function or loop","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/DRY/javascript/","content":"","keywords":""},{"title":"Violate DRY​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/design_principles/DRY/javascript/#violate-dry","content":"let drinks = [&quot;lemonade&quot;, &quot;soda&quot;, &quot;tea&quot;, &quot;water&quot;]; let food = [&quot;beans&quot;, &quot;chicken&quot;, &quot;rice&quot;]; console.log(drinks[0]); console.log(drinks[1]); console.log(drinks[2]); console.log(drinks[3]); console.log(food[0]); console.log(food[1]); console.log(food[2]);  "},{"title":"Pass DRY​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/design_principles/DRY/javascript/#pass-dry","content":"let drinks = [&quot;lemonade&quot;, &quot;soda&quot;, &quot;tea&quot;, &quot;water&quot;]; let food = [&quot;beans&quot;, &quot;chicken&quot;, &quot;rice&quot;]; function logItems(array) { for (let i = 0; i &lt; array.length; i++) { console.log(array[i]); } } logItems(drinks); logItems(food);  "},{"title":"Designing Good Classes","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/designingGoodClasses/","content":"","keywords":""},{"title":"Organized and Encapsulated​","type":1,"pageTitle":"Designing Good Classes","url":"docs/interviewPrep/design_principles/designingGoodClasses/#organized-and-encapsulated","content":"A class should keep all data attributes and utility functions private Only the functions that are supposed to be exposed should be kept public A class should be ordered like this Start with the variables public static constantsfollowed by private static attributesfollowed by private instance attributes followed by public functionsprivate utility function just after the public function that calls it "},{"title":"Should be small and should do just one thing​","type":1,"pageTitle":"Designing Good Classes","url":"docs/interviewPrep/design_principles/designingGoodClasses/#should-be-small-and-should-do-just-one-thing","content":"A class should be very small. Different experts have different views on how small? Based on most of the views, a class should be small enough that it does just one thingIn general, it should have less than 20 functions If a class does more than one thing then it should be broken down into different classes each of which does a single thing "},{"title":"Small number of instance variables​","type":1,"pageTitle":"Designing Good Classes","url":"docs/interviewPrep/design_principles/designingGoodClasses/#small-number-of-instance-variables","content":"A class should have strong cohesion i.e., the functions of a class should be strongly related in supporting a single central purpose A maximal cohesive class is one in which all functions work with all the instance variables Achieving that is pretty difficultWe should try to make our classes as cohesive as possibleThis can be done by having a smaller number of instance variables such that each function in the class work with as many of the instance variables as possibleThis can be done by splitting the class into multiple classes based on the responsibility of each class "},{"title":"Curly's Law - Do One Thing","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/curlyLaw/","content":"","keywords":""},{"title":"it is reflected in several core principles of modern software development​","type":1,"pageTitle":"Curly's Law - Do One Thing","url":"docs/interviewPrep/design_principles/curlyLaw/#it-is-reflected-in-several-core-principles-of-modern-software-development","content":""},{"title":"Don't Repeat Yourself​","type":1,"pageTitle":"Curly's Law - Do One Thing","url":"docs/interviewPrep/design_principles/curlyLaw/#dont-repeat-yourself","content":"If you have more than one way to express the same thing, at some point the two or three different representations will most likely fall out of step with each other Even if they don't, you're guaranteeing yourself the headache of maintaining them in parallel whenever a change occursAnd change will occurDon't repeat yourself is important if you want flexible and maintainable software "},{"title":"Once and Only Once​","type":1,"pageTitle":"Curly's Law - Do One Thing","url":"docs/interviewPrep/design_principles/curlyLaw/#once-and-only-once","content":"Each and every declaration of behavior should occur once, and only once This is one of the main goals, if not the main goal, when refactoring codeThe design goal is to eliminate duplicated declarations of behavior, typically by merging them or replacing multiple similar implementations with a unifying abstraction "},{"title":"Single Point of Truth​","type":1,"pageTitle":"Curly's Law - Do One Thing","url":"docs/interviewPrep/design_principles/curlyLaw/#single-point-of-truth","content":"Repetition leads to inconsistency and code that is subtly broken, because you changed only some repetitions when you needed to change all of them Often, it also means that you haven't properly thought through the organization of your codeAny time you see duplicate code, that's a danger signComplexity is a cost, don't pay it twice "},{"title":"Designing Good Functions","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/designingGoodFunctions/","content":"","keywords":""},{"title":"Should be small​","type":1,"pageTitle":"Designing Good Functions","url":"docs/interviewPrep/design_principles/designingGoodFunctions/#should-be-small","content":""},{"title":"How small?​","type":1,"pageTitle":"Designing Good Functions","url":"docs/interviewPrep/design_principles/designingGoodFunctions/#how-small","content":"Functions should be very small It should be hardly 20 lines long "},{"title":"How to make functions smaller?​","type":1,"pageTitle":"Designing Good Functions","url":"docs/interviewPrep/design_principles/designingGoodFunctions/#how-to-make-functions-smaller","content":"Anything inside that function that can be made into a separate function should be extracted The extracted function should be called from the previous function "},{"title":"Single line code blocks​","type":1,"pageTitle":"Designing Good Functions","url":"docs/interviewPrep/design_principles/designingGoodFunctions/#single-line-code-blocks","content":"Nested structures like if, else, while, for, try, etc should ideally call another function in their code block This makes the code easier to read and understand "},{"title":"Should do just one thing​","type":1,"pageTitle":"Designing Good Functions","url":"docs/interviewPrep/design_principles/designingGoodFunctions/#should-do-just-one-thing","content":"A function should do one thing and do it well In general, all the things in a function should be at the same abstraction levelA function should not have both lower-level and higher-level details If another function can be extracted out of a function then it is doing more than one thing We should extract functions to achieve the same level of abstraction Functions that can be divided into multiple sections do more than one thing "},{"title":"Should have fewer arguments​","type":1,"pageTitle":"Designing Good Functions","url":"docs/interviewPrep/design_principles/designingGoodFunctions/#should-have-fewer-arguments","content":"The ideal number of arguments for a function is zero (niladic) Next comes one (monadic), followed closely by two (dyadic)Three arguments (triadic) should be avoided where possibleMore than three (polyadic) requires very special justification—and then shouldn’t be used anyway Arguments make the code harder to understand and test and so we should keep it as low as possible In most cases, a set of related arguments used across functions deserves to be wrapped in a class of its own Output arguments are arguments that are required by the function only to be modified to contain the output Output arguments make the function harder to understand and should be avoided Flag arguments are boolean arguments that make the code do two things based on the flag value It should be avoided as it breaks the rule of doing only one thing "},{"title":"Should not have side effects​","type":1,"pageTitle":"Designing Good Functions","url":"docs/interviewPrep/design_principles/designingGoodFunctions/#should-not-have-side-effects","content":"A function should not promise one thing and do something else as a side effectExample Changing the parameters/class properties in a get/query method A set/update (command) function should not ideally update the parameters They can however update the properties of the class the function belongs to "},{"title":"Conclusion​","type":1,"pageTitle":"Designing Good Functions","url":"docs/interviewPrep/design_principles/designingGoodFunctions/#conclusion","content":"It is okay to start with long functions with multiple arguments which do more than one thing Start refactoring larger functions into smaller functions till there is a single level of abstraction in the function and no more functions can be extractedMake sure that the function names are descriptive and have fewer argumentsIn the end, all the functions should follow the above rules "},{"title":"Design Principles","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#overview","content":"there are formal measurable criteria that describe the quality of the code or design examples the cyclomatic complexity of methodsthe depth of the inheritance hierarchythe number of method lines they are useful and keeping these values in the normal range is necessary but not sufficient condition for good software designin addition to formal criteria, there are common concepts of good design e.g.: low coupling and high cohesion there are design principles between formal and informal criteria design principles are rules that experienced designers rely onmain goal is to describe in simple words what is good and bad in software design design principles are used to combat complexity and make it easier to introduce changes neededdisadvantage of separation through delegation the inability to inherit and compose properties from several objects at once when creating a new adapter, you need to find all the places where you want to use it in the need to introduce a new entity or layer in the form of, for example, adapters, which can increase the complexity it is necessary to add 1 more abstraction to the project code base "},{"title":"Code Smells​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#code-smells","content":""},{"title":"Rigidity​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#rigidity","content":"hard to change "},{"title":"Fragility​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#fragility","content":"easy to break "},{"title":"Immobility​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#immobility","content":"hard to reuse "},{"title":"Viscosity​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#viscosity","content":"hard to choose the right way to introduce changes "},{"title":"Needless complexity​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#needless-complexity","content":"over design "},{"title":"Low Coupling and High Cohesion​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#low-coupling-and-high-cohesion","content":"these concepts are useful, but are also too abstract and informalit characterizes a stable system allows you to design the system so that the modules are interchangeable with other "},{"title":"Low coupling​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#low-coupling","content":"modules should be as independent as possible from other modules so that changes to modules do not heavily impact other modules "},{"title":"High cohesion​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#high-cohesion","content":"keep elements of the module that are related to the functionality that module provides as close to each other as possible "},{"title":"SOLID​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#solid","content":"when the application has only 200 lines the design itself is not neededit is enough to write 5 - 7 methods carefully and everything will be fineproblems might arise when the system grows and requires scaling SOLID is an acronym used for the first 5 object-oriented principles by Robert C. Martin also known as Uncle Bob he did not invent or discover thembut structured and combined them into a set of 5 principles commonly known as SOLID these principles establish the practices that tend to develop software with considerations for maintaining and extending as the project grows adopting these practices can also contribute to avoiding code smells, refactoring code, and agile or adaptive software development "},{"title":"Single-responsibility Principle​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#single-responsibility-principle","content":""},{"title":"Open-closed Principle​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#open-closed-principle","content":""},{"title":"Liskov Substitution Principle​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#liskov-substitution-principle","content":""},{"title":"Interface Segregation Principle​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#interface-segregation-principle","content":""},{"title":"Dependency Inversion Principle​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#dependency-inversion-principle","content":""},{"title":"Don't Repeat Yourself​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#dont-repeat-yourself","content":"it is a principle of software development that aims at reducing the repetition of patterns and code duplication in favor of abstractions and avoiding redundancy "},{"title":"Keep it simple, stupid​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#keep-it-simple-stupid","content":"it is a design principle which states that designs and/or systems should be as simple as possible Wherever possible, complexity should be avoided in a system—as simplicity guarantees the greatest levels of user acceptance and interaction "},{"title":"You Aren't Gonna Need It​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#you-arent-gonna-need-it","content":"it is a practice in software development which states that features should only be added when required As a part of the extreme programming (XP) philosophy, YAGNI trims away excess and inefficiency in development to facilitate the desired increased frequency of releases "},{"title":"Big Design Up Front​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#big-design-up-front","content":"you should spend more time fully designing the application before you even write the first line of code "},{"title":"Separation Of Concerns​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#separation-of-concerns","content":"if you’re designing a system that deals with several concepts, you want to group your functions into modules depending on what they have to deal with "},{"title":"Curly's Law​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#curlys-law","content":"it is about choosing a single, clearly defined goal for any particular bit of code: Do One Thing "},{"title":"Premature Optimization is the Root of All Evil​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#premature-optimization-is-the-root-of-all-evil","content":"Programmers waste enormous amounts of time thinking about or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered We should forget about small efficiencies, say about 97% of the time premature optimization is the root of all evil Yet we should not pass up our opportunities in that critical 3% "},{"title":"Boy-Scout Rule​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#boy-scout-rule","content":"Any time someone sees some code that isn't as clear as it should be, they should take the opportunity to fix it right there and then or at least within a few minutes This opportunistic refactoring is referred to by Uncle Bob as following the boy-scout rule always leave the code behind in a better state than you found it The code quality tends to degrade with each change This results in technical debtThe Boy-Scout Principle saves us from that "},{"title":"Code for the Maintainer​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#code-for-the-maintainer","content":"Code maintenance is an expensive and difficult process Always code considering someone else as the maintainer and making changes accordingly even if you're the maintainerAfter a while, you'll remember the code as much as a stranger Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live "},{"title":"Principle of Least Astonishment​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#principle-of-least-astonishment","content":"Principle of Least Astonishment states that a component of a system should behave in a way that most users will expect it to behave The behavior should not astonish or surprise users Code should do what the name and comments suggest Conventions should be followedSurprising side effects should be avoided as much as possible "},{"title":"Hide Implementation Details​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#hide-implementation-details","content":"Hiding implementation details helps to make changes in a component without making changes in the other modules/clients using that component This can be achieved by creating interfaces and using them instead of the concrete classes Encapsulation with proper access management should also be done to expose only the required public functions "},{"title":"Maximize Cohesion​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#maximize-cohesion","content":"Cohesion is the degree to how strongly related and focused are the various responsibilities of a module It is a measure of the strength of the relationship between the class’s methods and data themselvesWe should strive to maximize cohesionHigh cohesion results in better understanding, maintaining, and reusing components Cohesion is increased if The functionalities embedded in a class, accessed through its methods, have much in commonMethods carry out a small number of related activities, by avoiding coarsely grained or unrelated sets of dataRelated methods are in the same source file or otherwise grouped together for example, in separate files but in the same sub-directory/folder "},{"title":"Minimize Coupling​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#minimize-coupling","content":"Coupling is the degree to which each module depends on other modules; a measure of how closely connected two modules are We should strive to minimize coupling Coupling is usually contrasted with cohesion Low coupling often correlates with high cohesion and vice versa Tightly coupled modules have the following disadvantages Change in one module might break another moduleChange in one module usually forces a ripple effect of changes in other modulesReusability decreases as dependency over other modules increasesAssembly of modules might require more effort and/or time Coupling can be reduced by By hiding inner details and interacting through interfacesAvoid interacting with classes that it can avoid directly dealing with Components in a loosely coupled system can be replaced with alternative implementations that provide the same services "},{"title":"Law of Demeter / Principle of Least Knowledge​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#law-of-demeter--principle-of-least-knowledge","content":"Code components should only talk to its direct relations and not to strangers "},{"title":"Design by Contract​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#design-by-contract","content":"it is a software correctness methodology It prescribes that software designers should define formal, precise and verifiable interface specifications for software componentswhich extend the ordinary definition of abstract data types with preconditions, postconditions and invariants "},{"title":"Command-Query Separation (CQS)​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#command-query-separation-cqs","content":"it states that every method should either be a command that performs an action, or a query that returns data to the caller, but not both In other words, asking a question should not change the answer Query Returns a result without changing the state Command Changes the state but does not return any valueThis way the query method could be used anywhere without changing the data / state We should apply naming conventions (get, set, add, etc.) to imply whether it is a command or a query "},{"title":"Meaningful Variable Names​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#meaningful-variable-names","content":"variable names might be easy to write but it makes the code difficult to read and makes debugging more time-consuming "},{"title":"Designing Good Functions​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#designing-good-functions","content":"A good function allows understanding it without going into lower-level details unless required "},{"title":"Designing Good Classes​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#designing-good-classes","content":"Classes bind related data and expose functions that operate on that data This helps make the code more organized "},{"title":"Minimum Viable Product​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#minimum-viable-product","content":"it represents the minimum amount of functionality your product needs to have in order to understand how viable it is in reality "},{"title":"Proof Of Concept​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#proof-of-concept","content":"It normally comes before the MVP and it is only meant as a practical proof that the core functionality of what you’re trying to build is possible "},{"title":"Anti SOLID​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#anti-solid","content":""},{"title":"Anti-SRP​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#anti-srp","content":"Blurred responsibility principle: classes are split into many small classes, resulting in logic being spread across multiple classes and/or modules "},{"title":"Anti-OCP​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#anti-ocp","content":"Factory-Factory PrincipleThe design is too general and extensible, with too many levels of abstraction "},{"title":"Anti-LSP​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#anti-lsp","content":"The principle of unclear inheritance: either an excessive amount of inheritance, or in its complete absence "},{"title":"Anti-ISP​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#anti-isp","content":"Thousand Interface PrincipleClass interfaces are fragmented into too many pieces, making them awkward for all clients to use "},{"title":"Anti-DIP​","type":1,"pageTitle":"Design Principles","url":"docs/interviewPrep/design_principles/#anti-dip","content":"DI-brain PrincipleInterfaces are allocated for each class and passed in batches through constructorsIt becomes almost impossible to understand where the logic is "},{"title":"Breadth First Search Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/12Graphs/typescript/breadthFirstSearch","content":"","keywords":""},{"title":"Utils​","type":1,"pageTitle":"Breadth First Search Example","url":"docs/interviewPrep/data_structures/12Graphs/typescript/breadthFirstSearch#utils","content":"enum Colors { WHITE = 0, GREY = 1, BLACK = 2, } const initializeColor = (vertices: (string | number)[]) =&gt; { const color: any = {}; for (let i = 0; i &lt; vertices.length; i++) { color[vertices[i]] = Colors.WHITE; } return color; };  "},{"title":"No Weights​","type":1,"pageTitle":"Breadth First Search Example","url":"docs/interviewPrep/data_structures/12Graphs/typescript/breadthFirstSearch#no-weights","content":"function breadthFirstSearch(graph: Graph, callback: Function) { const vertices = graph.getVertices(); const adjList = graph.getAdjList(); const color = initializeColor(vertices); const queue = new Queue(); queue.enqueue(vertices); while (!queue.isEmpty()) { const u = queue.dequeue(); const neighbors = adjList.get(u); color[u] = Colors.GREY; for (let i = 0; i &lt; neighbors.length; i++) { const w = neighbors[i]; if (color[w] === Colors.WHITE) { color[w] = Colors.GREY; queue.enqueue(w); } } color[u] = Colors.BLACK; if (callback) { callback(u); } } }  "},{"title":"With weights​","type":1,"pageTitle":"Breadth First Search Example","url":"docs/interviewPrep/data_structures/12Graphs/typescript/breadthFirstSearch#with-weights","content":"function breadthFirstSearch(graph: Graph, startVertex: number) { const vertices = graph.getVertices(); const adjList = graph.getAdjList(); const color = initializeColor(vertices); const queue = new Queue(); const distances: any = {}; const predecessors: any = {}; queue.enqueue(startVertex); for (let i = 0; i &lt; vertices.length; i++) { distances[vertices[i]] = 0; predecessors[vertices[i]] = null; } while (!queue.isEmpty()) { const u = queue.dequeue(), neighbors = adjList.get(u); color[u] = Colors.GREY; for (let i = 0; i &lt; neighbors.length; i++) { const w = neighbors[i]; if (color[w] === Colors.WHITE) { color[w] = Colors.GREY; distances[w] = distances[u] + 1; predecessors[w] = u; queue.enqueue(w); } } color[u] = Colors.BLACK; } return { distances: distances, predecessors: predecessors, }; }  "},{"title":"Minimum Viable Product (MVP)","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/MVP/","content":"Minimum Viable Product (MVP) it represents the minimum amount of functionality your product needs to have in order to understand how viable it is in realityThis is a great technique used to understand if finishing and reaching 100% of your desired product is not going to be a waste of your time The output of your MVP phase, usually entails a product that while is not necessarily production ready, it can be used by a focused audience which in turn, can provide the required feedback to understand its viability","keywords":""},{"title":"Proof Of Concept (POC)","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/POC/","content":"Proof Of Concept (POC) It normally comes before the MVP and it is only meant as a practical proof that the core functionality of what you’re trying to build is possiblethis also means that PoCs tend to be throw-away pieces of code You don’t build them to last, you build them to make a pointthere might be cases where evolving a successful POC is possible, but there is also the possibility that you’ll find yourself building several POCs in order to proof one point, so planning all of them to be evolved into an actual product might not be the best idea","keywords":""},{"title":"Separation Of Concerns (SOC)","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOC/","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Separation Of Concerns (SOC)","url":"docs/interviewPrep/design_principles/SOC/#example","content":"consider a blogging platform, a simple one, where your users can publish their blog posts You could have a single system taking care of everything (user management, blog posts, analytics, and so on) But if you want to follow the SOC principle, you could end up with something more in the lines of the following This is of course a very crude representation of the architecture, but the point being you can separate different responsibilities into different modules, this in turn allows for benefits such as Scaling individual functionalities becomes easier You can now easily consider scaling your user management module, because it is getting too much traffic, while leaving the rest of the platform untouched Making changes is easier now that your code is not tightly coupled You can make considerable modifications to how you manage blog posts without affecting any other section of the platform Your platform is now more stable If one of these modules crashes, then the system can potentially still function, with less features, of course, but the potential is there nevertheless SOC can also apply to API design, library architecture and more It’s simply about having control over how you group functionalities in a way that makes sense to the users of those functionalities "},{"title":"The Law of Demeter / Principle of Least Knowledge","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/lawOfDemeter/","content":"","keywords":""},{"title":"Avoiding violations​","type":1,"pageTitle":"The Law of Demeter / Principle of Least Knowledge","url":"docs/interviewPrep/design_principles/lawOfDemeter/#avoiding-violations","content":"how to avoid unnecessary dependency problem a User who have Account and this account has a plan and User has discountedPlanPrice which violate the Law of Demeter abstract class User { private account: Account; discountedPlanPrice(coupon: Coupon) { return coupon.discount(this.account.getPlan().getPrice()); } } class Account { private plan: Plan; getPlan() { return this.plan; } } solution One of the common ways to remove such chains is by using delegation A wrapper method encapsulates or hides knowledge that would otherwise be implemented in the message chainDelegation is an effective technique to avoid Law of Demeter violations, but only for behavior, not for attributes To avoid such problems, you need to think over the application architecture in advance class Account { private plan: Plan; discountedPlanPrice(coupon) { return coupon.discount(this.plan.getPrice()); } }  "},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/python/","content":"","keywords":""},{"title":"Single Thread​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/python/#single-thread","content":""},{"title":"Synchronous​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/python/#synchronous","content":"import requests import time url = &quot;https://jsonplaceholder.typicode.com/posts/&quot; post_ids = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, ] results = [] def run_tasks(): for post_id in post_ids: print(f&quot;Working on post id {post_id}&quot;) response = requests.get(f&quot;{url}{post_id}&quot;) results.append(response.json()) if __name__ == '__main__': print(&quot;Timer started...&quot;) start = time.time() run_tasks() end = time.time() total_time = end - start print(f&quot;It took {total_time} seconds to make {len(post_ids)} API calls&quot;)  "},{"title":"Asynchronous​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/python/#asynchronous","content":"import asyncio import requests import time url = &quot;https://jsonplaceholder.typicode.com/posts/&quot; post_ids = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, ] results = [] # normally requires await to run code async def run_tasks(): for post_id in post_ids: print(f&quot;Working on post id {post_id}&quot;) response = requests.get(f&quot;{url}{post_id}&quot;) results.append(response.json()) if __name__ == '__main__': print(&quot;Timer started...&quot;) start = time.time() # method 1 # loop = asyncio.get_event_loop() # loop.run_until_complete(run_tasks()) # loop.close() # method 2 asyncio.run(run_tasks()) end = time.time() total_time = end - start print(f&quot;It took {total_time} seconds to make {len(post_ids)} API calls&quot;)  "},{"title":"Multi-Thread​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/python/#multi-thread","content":""},{"title":"Asyncio​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/python/#asyncio","content":"version 1 import asyncio import aiohttp import time url = &quot;https://jsonplaceholder.typicode.com/posts/&quot; post_ids = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, ] results = [] def get_tasks(session): tasks = [] for post_id in post_ids: print(f&quot;Working on post id {post_id}&quot;) tasks.append(session.get(f&quot;{url}{post_id}&quot;)) return tasks async def run_tasks(): async with aiohttp.ClientSession() as session: tasks = get_tasks(session) responses = await asyncio.gather(*tasks) for response in responses: results.append(await response.json()) if __name__ == '__main__': print(&quot;Timer started...&quot;) start = time.time() # method 1 # loop = asyncio.get_event_loop() # loop.run_until_complete(run_tasks()) # loop.close() # method 2 asyncio.run(run_tasks()) end = time.time() total_time = end - start print(f&quot;It took {total_time} seconds to make {len(post_ids)} API calls&quot;)  version 2 import asyncio import aiohttp import time url = &quot;https://jsonplaceholder.typicode.com/posts/&quot; post_ids = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, ] results = [] def get_tasks(session): tasks = [] for post_id in post_ids: print(f&quot;Working on post id {post_id}&quot;) tasks.append(asyncio.create_task(session.get(f&quot;{url}{post_id}&quot;))) return tasks async def run_tasks(): async with aiohttp.ClientSession() as session: tasks = get_tasks(session) responses = await asyncio.gather(*tasks) for response in responses: results.append(await response.json()) if __name__ == '__main__': print(&quot;Timer started...&quot;) start = time.time() # method 1 # loop = asyncio.get_event_loop() # loop.run_until_complete(run_tasks()) # loop.close() # method 2 asyncio.run(run_tasks()) end = time.time() total_time = end - start print(f&quot;It took {total_time} seconds to make {len(post_ids)} API calls&quot;)  "},{"title":"Multi-Processing​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/python/#multi-processing","content":"import multiprocessing import requests import time url = &quot;https://jsonplaceholder.typicode.com/posts/&quot; post_ids = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, ] def make_request(post_id, results): response = requests.get(f&quot;{url}{post_id}&quot;) results.append(response.json()) def run_tasks(): manager = multiprocessing.Manager() results = manager.list() processes = [] for post_id in post_ids: print(f&quot;Working on post id {post_id}&quot;) p = multiprocessing.Process(target=make_request, args=[post_id, results]) processes.append(p) p.start() for process in processes: process.join() print(results) if __name__ == '__main__': print(&quot;Timer started...&quot;) start = time.time() run_tasks() end = time.time() total_time = end - start print(f&quot;It took {total_time} seconds to make {len(post_ids)} API calls&quot;)  "},{"title":"Multi-Concurrency​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/concurrency_parallel_programming/multithread/python/#multi-concurrency","content":"version 1: not in order import concurrent.futures import requests import time url = &quot;https://jsonplaceholder.typicode.com/posts/&quot; post_ids = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, ] def make_request(post_id): response = requests.get(f&quot;{url}{post_id}&quot;) return response.json() def run_tasks(): futures = [] # with concurrent.futures.ThreadPoolExecutor() as executor: # change to this to use threads with concurrent.futures.ProcessPoolExecutor() as executor: for post_id in post_ids: print(f&quot;Working on post id {post_id}&quot;) f = executor.submit(make_request, post_id) futures.append(f) for future in concurrent.futures.as_completed(futures): print(future.result()) if __name__ == '__main__': print(&quot;Timer started...&quot;) start = time.time() run_tasks() end = time.time() total_time = end - start print(f&quot;It took {total_time} seconds to make {len(post_ids)} API calls&quot;)  version 2: in order import concurrent.futures import requests import time url = &quot;https://jsonplaceholder.typicode.com/posts/&quot; post_ids = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, ] def make_request(post_id): response = requests.get(f&quot;{url}{post_id}&quot;) return response.json() def run_tasks(): # with concurrent.futures.ThreadPoolExecutor() as executor: # change to this to use threads with concurrent.futures.ProcessPoolExecutor() as executor: futures = executor.map(make_request, post_ids) for future in futures: print(future) if __name__ == '__main__': print(&quot;Timer started...&quot;) start = time.time() run_tasks() end = time.time() total_time = end - start print(f&quot;It took {total_time} seconds to make {len(post_ids)} API calls&quot;)  "},{"title":"SOLID","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/","content":"","keywords":""},{"title":"Single Responsibility Principle​","type":1,"pageTitle":"SOLID","url":"docs/interviewPrep/design_principles/SOLID/#single-responsibility-principle","content":"A class should have one and only one reason to change, meaning that a class should have only one job "},{"title":"Open Closed Principle​","type":1,"pageTitle":"SOLID","url":"docs/interviewPrep/design_principles/SOLID/#open-closed-principle","content":"Objects or entities should be open for extension but closed for modification "},{"title":"Linskov Substitution Principle​","type":1,"pageTitle":"SOLID","url":"docs/interviewPrep/design_principles/SOLID/#linskov-substitution-principle","content":"Let Q(x) be a property provable about objects x of type T Then Q(y) should be true for objects y of type S where S is a subtype of T in another words objects of a superclass should be replaceable with objects of its subclasses without breaking the application "},{"title":"Interface Segregation Principle​","type":1,"pageTitle":"SOLID","url":"docs/interviewPrep/design_principles/SOLID/#interface-segregation-principle","content":"A client should never be forced to implement an interface that it does not use, or clients should not be forced to depend on methods that they do not use "},{"title":"Dependency Inversion Principle​","type":1,"pageTitle":"SOLID","url":"docs/interviewPrep/design_principles/SOLID/#dependency-inversion-principle","content":"High-level modules should not depend on low-level modules Both should depend on abstractionsAbstractions should not depend on detailsDetails should depend on abstractions "},{"title":"Keep It Simple, Stupid (KISS)","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/KISS/","content":"","keywords":""},{"title":"Why KISS?​","type":1,"pageTitle":"Keep It Simple, Stupid (KISS)","url":"docs/interviewPrep/design_principles/KISS/#why-kiss","content":"Less code takes less time to write, minimizes the amount of bugs, and is easier to modify and maintainThe more complex something is, the more ways there are for it to fail, and the more difficult it is to explain to someone else who needs to understand itPerfection is reached not when there is nothing left to add, but when there is nothing left to take away "},{"title":"Short-circuit Evaluation​","type":1,"pageTitle":"Keep It Simple, Stupid (KISS)","url":"docs/interviewPrep/design_principles/KISS/#short-circuit-evaluation","content":""},{"title":"Bad example​","type":1,"pageTitle":"Keep It Simple, Stupid (KISS)","url":"docs/interviewPrep/design_principles/KISS/#bad-example","content":"if (var1 === null || var1 === undefined || var1 === &quot;&quot;) { console.log(&quot;VARIABLE NOT FOUND!&quot;); } else { console.log(var1); }  "},{"title":"Good examples​","type":1,"pageTitle":"Keep It Simple, Stupid (KISS)","url":"docs/interviewPrep/design_principles/KISS/#good-examples","content":"console.log(var1 || &quot;VARIABLE NOT FOUND!&quot;);  const firstName = person &amp;&amp; person.firstNames;  "},{"title":"Default parameters​","type":1,"pageTitle":"Keep It Simple, Stupid (KISS)","url":"docs/interviewPrep/design_principles/KISS/#default-parameters","content":""},{"title":"Bad example​","type":1,"pageTitle":"Keep It Simple, Stupid (KISS)","url":"docs/interviewPrep/design_principles/KISS/#bad-example-1","content":"function volume(l, w, h) { if (w === undefined) w = 1; if (h === undefined) h = 1; return l * w * h; }  "},{"title":"Good example​","type":1,"pageTitle":"Keep It Simple, Stupid (KISS)","url":"docs/interviewPrep/design_principles/KISS/#good-example","content":"const volume = (l, w = 1, h = 1) =&gt; l * w * h;  "},{"title":"Destructuring​","type":1,"pageTitle":"Keep It Simple, Stupid (KISS)","url":"docs/interviewPrep/design_principles/KISS/#destructuring","content":""},{"title":"Bad example​","type":1,"pageTitle":"Keep It Simple, Stupid (KISS)","url":"docs/interviewPrep/design_principles/KISS/#bad-example-2","content":"const person = { first: &quot;Wes&quot;, last: &quot;Bos&quot;, country: &quot;Canada&quot;, city: &quot;Hamilton&quot;, twitter: &quot;@wesbos&quot;, }; const first = person.first; const last = person.last;  "},{"title":"Good example​","type":1,"pageTitle":"Keep It Simple, Stupid (KISS)","url":"docs/interviewPrep/design_principles/KISS/#good-example-1","content":"let {first, last} = person;  set default value if value does not exist​ let {first = &quot;John&quot;, last = &quot;Doe&quot;} = person;  rename property​ let {first, last: surname} = person;  "},{"title":"Spreading​","type":1,"pageTitle":"Keep It Simple, Stupid (KISS)","url":"docs/interviewPrep/design_principles/KISS/#spreading","content":""},{"title":"Bad example​","type":1,"pageTitle":"Keep It Simple, Stupid (KISS)","url":"docs/interviewPrep/design_principles/KISS/#bad-example-3","content":"const even = [2, 4, 6]; const nums = [10, 12, 16].concat(even); // 10,12,16,2,4,5  "},{"title":"Good example​","type":1,"pageTitle":"Keep It Simple, Stupid (KISS)","url":"docs/interviewPrep/design_principles/KISS/#good-example-2","content":"const even = [2, 4, 6]; const nums = [10, 12, 16, ...even];  "},{"title":"Dependency Inversion Principle (DIP)","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Dependency Inversion Principle (DIP)","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/#example","content":"Let us dive deep into dependency inversion principle by having a look at the example below Suppose we are working on an application that uses MySQL databaseWe have UserTransaction class that will be used to query User table in the databaseIt contains init() method that takes instance of MySQLDatabase class and two base operations: insert()delete() interface Database { insert(entity: object): object; delete(entity: object): object; get(entity: object): object; } class UserTransaction { private db; init(db: MySQLDatabase) { this.db = db; } insert(user: object) { return !this.db.get(user) ? this.db.insert(user) : null; } delete(user: object) { return !this.db.get(user) ? this.db.delete(user) : null; } }  MySQLDatabase is a low-level module, UserTransaction is a high-level one But based on the definition of the Dependency Inversion Principle, which says to separate abstractions from the implementation, this fragment of code violates it, because the UserTransaction class depends on the MySQLDatabase class But what if at some point we decided to replace MySQL to PostgreSQL database, which has a completely different interface compared to MySQL? We would not only need to create PostgreSQLDatabase class, but also update UserTransaction class implementation class PostgreSQLDatabase { insert(entity: object) { return { /* insert using PostgreSQL syntax */ }; } delete(entity: object) { return { /* delete using PostgreSQL syntax */ }; } get(entity: object) { return { /* get using PostgreSQL syntax */ }; } }  There should be low coupling between classes used UserTransaction class does not have to worry about the database being usedTo fix that, we have to create an interface so that the low-level and high-level modules depend on the abstraction (interface) interface Database { insert(entity: object): object; delete(entity: object): object; get(entity: object): object; } class PostgreSQLDatabase implements Database { insert(entity: object) { return { /* insert using PostgreSQL syntax */ }; } delete(entity: object) { return { /* delete using PostgreSQL syntax */ }; } get(entity: object) { return { /* get using PostgreSQL syntax */ }; } } class UserTransaction { private db; init(db: Database) { this.db = db; } insert(user: object) { return !this.db.get(user) ? this.db.insert(user) : null; } delete(user: object) { return !this.db.get(user) ? this.db.delete(user) : null; } }  Now both modules (low-level and high-level) depend on abstraction No matter which database is used (either PostgreSQL or MySQL), UserTransaction class depends on Database interfaceTherefore, if at some point we decide to roll back to MySQL or introduce a new database, we will not need to change the UserTransaction classDependency Inversion principle is not violated, and we can introduce new requirements very quickly without changing all the related modules "},{"title":"Summary​","type":1,"pageTitle":"Dependency Inversion Principle (DIP)","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/#summary","content":"what is the use of the Observer pattern from a DIP point of view Turns out control over the course of the program, giving a reaction to the event to the observer object the observer inverts control of program execution in a similar way to event handlers in the GUIevent handlers are called at the time of a user input event mouse click, keypress observer reacts to a change in the state of the observed object according to the DIP, the relationship between the modules should be as the following high and low level modules must depend on abstractions modules do not need to work with specific modules, they can work with any entity that implements the specified interface, which reduces coupling The Dependency Inversion Principle introduces an interface abstraction between higher-level and lower-level software components to remove the dependencies between them "},{"title":"When to allocate an interface from a class?​","type":1,"pageTitle":"Dependency Inversion Principle (DIP)","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/#when-to-allocate-an-interface-from-a-class","content":"Class is an implementation of some strategy and will be used in a polymorphic mannerClass is used to work with external environments (files, sockets, configuration, etc.) "},{"title":"When not to allocate a class interface?​","type":1,"pageTitle":"Dependency Inversion Principle (DIP)","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/#when-not-to-allocate-a-class-interface","content":"Class is an immutable Value Object or Data ObjectClass has stable behavior (does not work with the external environment) "},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/cSharp/","content":"C# Example /* Dependency Inversion Principle - high level parts of the system should not depend on low level parts of the system directly - high level parts of the system should depend on some kind of abstraction */ using System.Collections.Generic; using System.Linq; public enum Relationship { Parent, Child, Sibling } public class Person { public string Name; public System.DateTime DateOfBirth; } // low level /* public class Relationships { // tuples // this is a bad example as Relationships cannot change how it stores data, and the data structure is exposed to the high level module private List&lt;(Person, Relationship, Person)&gt; _relations = new List&lt;(Person, Relationship, Person)&gt; (); public void AddParentAndChild(Person parent, Person child) { _relations.Add((parent, Relationship.Parent, child)); _relations.Add((child, Relationship.Child, parent)); } // this is bad and should be removed public List&lt;(Person, Relationship, Person)&gt; Relations =&gt; _relations; } */ // Solution // create an interface public interface IRelationshipBrowser { IEnumerable&lt;Person&gt; FindAllChildrenOf(string name); } // low level public class Relationships : IRelationshipBrowser { // tuples // relationships can change the underlying data structure because it's never exposed to the high level modules which are actually consuming it private List&lt;(Person, Relationship, Person)&gt; _relations = new List&lt;(Person, Relationship, Person)&gt; (); public void AddParentAndChild(Person parent, Person child) { _relations.Add((parent, Relationship.Parent, child)); _relations.Add((child, Relationship.Child, parent)); } public IEnumerable&lt;Person&gt; FindAllChildrenOf(string name) { return _relations.Where( x =&gt; x.Item1.Name == &quot;John&quot; &amp;&amp; x.Item2 == Relationship.Parent ).Select(r =&gt; r.Item3); } } // High level // should not depend on low level, but rather an abstraction, in this case Interface public class Research { // do not do this as it depends on the low level module /* public Research(Relationships relationships) { var relations = relationships.Relations; foreach (var r in relations.Where( x =&gt; x.Item1.Name == &quot;John&quot; &amp;&amp; x.Item2 == Relationship.Parent )) { System.Console.WriteLine($&quot;John has a child called {r.Item3.Name}&quot;); } } */ // do this as it depends on the abstraction, interface public Research(IRelationshipBrowser browser) { foreach (var p in browser.FindAllChildrenOf(&quot;John&quot;)) System.Console.WriteLine($&quot;John has a child called {p.Name}&quot;); } public static void Main() { Person parent = new Person {Name = &quot;John&quot;}; Person child1 = new Person {Name = &quot;Chris&quot;}; Person child2 = new Person {Name = &quot;Mary&quot;}; Relationships relationships = new Relationships(); relationships.AddParentAndChild(parent, child1); relationships.AddParentAndChild(parent, child2); new Research(relationships); } } ","keywords":""},{"title":"Red-Black Tree","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/13Trees/redBlackTree/","content":"","keywords":""},{"title":"Why Red-Black Trees?​","type":1,"pageTitle":"Red-Black Tree","url":"docs/interviewPrep/data_structures/13Trees/redBlackTree/#why-red-black-trees","content":"Most of the BST operations (e.g., search, max, min, insert, delete.. etc) take O(h) time where h is the height of the BSTThe cost of these operations may become O(n) for a skewed Binary treeIf we make sure that the height of the tree remains O(log n) after every insertion and deletion then we can guarantee an upper bound of O(log n) for all these operations The height of a Red-Black tree is always O(log n) where n is the number of nodes in the tree Method\tTime ComplexitySearch\tO(log n) Insert\tO(log n) Delete\tO(log n) "},{"title":"Comparison with AVL Tree​","type":1,"pageTitle":"Red-Black Tree","url":"docs/interviewPrep/data_structures/13Trees/redBlackTree/#comparison-with-avl-tree","content":"The AVL trees are more balanced compared to Red-Black Trees but they may cause more rotations during insertion and deletion if the application involves frequent insertions and deletions then Red-Black trees should be preferred if the insertions and deletions are less frequent and search is a more frequent operation then AVL tree should be preferred over the Red-Black Tree "},{"title":"How does a Red-Black Tree ensure balance?​","type":1,"pageTitle":"Red-Black Tree","url":"docs/interviewPrep/data_structures/13Trees/redBlackTree/#how-does-a-red-black-tree-ensure-balance","content":" "},{"title":"Applications:​","type":1,"pageTitle":"Red-Black Tree","url":"docs/interviewPrep/data_structures/13Trees/redBlackTree/#applications","content":"Most of the self-balancing BST library functions like map, multiset, and multimap in C++ ( or java packages like java.util.TreeMap and java.util.TreeSet ) use Red-Black TreesIt is used to implement CPU Scheduling Linux Completely Fair Scheduler uses it It is used in the K-mean clustering algorithm in machine learning for reducing time complexityMySQL also uses the Red-Black tree for indexes on tables in order to reduce the searching and insertion time "},{"title":"Insert and Delete​","type":1,"pageTitle":"Red-Black Tree","url":"docs/interviewPrep/data_structures/13Trees/redBlackTree/#insert-and-delete","content":" search-tree operations TREE-INSERT and TREE-DELETE when run on a red-black tree with n keys, take O(log n) time Because they modify the tree, the result may violate the red-black propertiesTo restore these properties, we must change the colors of some nodes in the tree and also change the pointer structure We change the pointer structure through rotation which is a local operation in a search tree that preserves the binary-search-tree propertyWhen we do a left rotation on a node x we assume that its right child y is not nullx may be any node in the tree whose right child is not nullThe left rotation &quot;pivots&quot; around the link from x to yIt makes y the new root of the subtree, with x as ys left child and ys left child as xs right child rotate left example rotating element x in a tree T left After a rotation, the y element &quot;pulls&quot; its right subtree up (elements 19, 20, 22)Left subtree of x (9) stays the same, and left subtree of y becomes right subtree of x rotateLeft() { let y = this.right; this.right = y.left; if (!y.left.isNil) { y.left.parent = this; } if (!y.isNil) y.parent = this.parent; if (this.parent) { if (this.id === this.parent.left.id) { this.parent.left = y; } else { this.parent.right = y; } } else { this.tree.root = y; } y.left = this; if (!this.isNil) this.parent = y; } rotate right example rotateRight() { let y = this.left; this.left = y.right; if (!y.right.isNil) { y.right.parent = this; } if (!y.isNil) y.parent = this.parent; if (this.parent) { if (this.id === this.parent.right.id) { this.parent.right = y; } else { this.parent.left = y; } } else { this.tree.root = y; } y.right = this; if (!this.isNil) this.parent = y; }  "},{"title":"Insertion​","type":1,"pageTitle":"Red-Black Tree","url":"docs/interviewPrep/data_structures/13Trees/redBlackTree/#insertion","content":"To insert a node, first we have to find a place to insert it into The new node will always be added as a leafThis means that both of his children are NIL and are blackThe newly added node will always be red example insertNode(data) { let current, parent, x; current = this.root; parent = null; while (!current.isNil) { if (data === current.value) return current; parent = current; current = data &lt; current.value ? current.left : current.right; } x = new rbNode(this); x.value = data; x.parent = parent; x.isRed = true; x.isNil = false; x.left = new rbNode(this); x.right = new rbNode(this); if (parent) { if (x.value &lt; parent.value) { parent.left = x; } else { parent.right = x; } } else { this.root = x; } this.insertFixup(x); return x; }  "},{"title":"Insert Fix up​","type":1,"pageTitle":"Red-Black Tree","url":"docs/interviewPrep/data_structures/13Trees/redBlackTree/#insert-fix-up","content":"After insertion, we perform a insertFixup operation defined as following example To perform the fixup, we have to look at the parent, and check if the red-black property is followedIf the parent node is black we can exit If parent node is red we recolor it black and preform a rotation to balance the tree By inserting a red node with 2 NIL-children, we are keeping the property of black height (property 4) Although, this could mean that we are breaking the property 3 according to which both children of a red node have to be black So, let's look at a situation when a parent of a new node is red, by which the property 3 will be violated insertFixup(x) { while (x.id !== this.root.id &amp;&amp; x.parent.isRed) { if (x.parent.id === x.parent.parent.left.id) { let y = x.parent.parent.right; if (y.isRed) { x.parent.isRed = false; y.isRed = false; x.parent.parent.isRed = true; x = x.parent.parent; } else { if (x.id === x.parent.right.id) { x = x.parent; x.rotateLeft(); } x.parent.isRed = false; x.parent.parent.isRed = true; x.parent.parent.rotateRight(); } } else { let y = x.parent.parent.left; if (y.isRed) { x.parent.isRed = false; y.isRed = false; x.parent.parent.isRed = true; x = x.parent.parent; } else { if (x.id === x.parent.left.id) { x = x.parent; x.rotateRight(); } x.parent.isRed = false; x.parent.parent.isRed = true; x.parent.parent.rotateLeft(); } } } this.root.isRed = false; }  "},{"title":"Meaning Variable Names","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/","content":"","keywords":""},{"title":"Use Intention-Revealing Names​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#use-intention-revealing-names","content":"The name of the variable, function, class, etc should be sufficient enough to understand its purpose One should not have to read the whole code to figure out what a function does or what a class represents or to understand why a variable exists The name should ideally not require a commentWriting descriptive variable names may look like it would take more time Once you start writing descriptive names, it would become pretty intuitive and would result in saving more time in terms of collaboration, maintenance, and readability "},{"title":"Bad examples​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#bad-examples","content":"//This is bad int d; String[] arr; boolean flag; //This is bad int getAnswer(int a, int b) { }  "},{"title":"Good Examples​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#good-examples","content":"//This is good int courseDurationInDays; String[] chapterNames; boolean isCellVisited; //This is good int getSum(int firstNum, int secondNum) { }  "},{"title":"Name Functions as Verbs​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#name-functions-as-verbs","content":"Function names should be verbs or verb phrases that explain what the function does. Getters (Accessors) and Setters (Mutators) should start with get/setFunction names should also be descriptive A long, descriptive name is better than using a comment to describe itA function name should be descriptive enough to understand the intent of that function Ward’s principle: You know you are working on clean code when each function turns out to be pretty much what you expectedBe consistent in naming functions and use the same convention "},{"title":"Name Classes as Nouns​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#name-classes-as-nouns","content":"Classes should have descriptive names such that it should be easy to understand their intent Classes should have nouns or noun phrases as namesA class name should not be a verb "},{"title":"Use Meaningful Distinction​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#use-meaningful-distinction","content":"When two variables/functions/classes exist with similar names, make sure that there is a meaningful distinction between their names "},{"title":"Number-series​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#number-series","content":"Number-series naming is a pretty bad way to name variables as it is difficult to distinguish between variables int[] arr1; int[] arr2;  "},{"title":"Noise words​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#noise-words","content":"Noise words like Data, Value, Info, Variable, Table, String, Object, etc which are used as a suffix do not offer any meaningful distinction Noise words are redundant and should be avoided String status; String statusValue; class Product { } class ProductInfo { } getDistinctValue(int[] arr) { } getDistinctValues(int[] arr) { }  "},{"title":"Use Pronounceable Names​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#use-pronounceable-names","content":"Using pronounceable names makes the code easy to read and discuss about Doing so allows discussing/explaining code in plain English "},{"title":"Bad Example​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#bad-example","content":"Date modDateYYMMDD;  "},{"title":"Good Example​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#good-example","content":"Date modificationTimestamp;  "},{"title":"Use Searchable Names​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#use-searchable-names","content":"In big codebases, you would have to search for variable/function/class names to find it Small names or constant values might make it difficult to searchProper names that make it easy to search make the code cleaner and easier to maintain "},{"title":"Avoid magic numbers​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#avoid-magic-numbers","content":"Create named constants instead of using numbers or other constant values where it is supposed to denote something Bad Example​ ParkingLot() { int[] parkingSpots[100]; } void printParkingSpots() { for (int i = 0; i &lt; 100; i++) { System.out.println(parkingSpots[i]); } }  Good Example​ final int NUMBER_OF_PARKING_SPOTS = 100; ParkingLot() { int[] parkingSpots[NUMBER_OF_PARKING_SPOTS]; } void printParkingSpots() { for (int i = 0; i &lt; NUMBER_OF_PARKING_SPOTS; i++) { System.out.println(parkingSpots[i]); } }  "},{"title":"Avoid short names​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#avoid-short-names","content":"Smaller names should only be used in variables inside short functions (for temporary use) where it has no meaning/use outside the said function However, it should be noted that the variable names can be small if the scope of the variable is very small given that it is sufficient to understand the intention "},{"title":"Avoid Encodings​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#avoid-encodings","content":"Avoid using any unnecessary prefixes or suffixes A variable/function/class name should not be unnecessarily prefixed/suffixed with type information or any other redundant information "},{"title":"Bad Example​","type":1,"pageTitle":"Meaning Variable Names","url":"docs/interviewPrep/design_principles/meaningfulVariableNames/#bad-example-2","content":"//String suffix ties the variable to the data type that makes it difficult to be changed later. String locationString; //The prefix I should be avoided for Interfaces interface IEmployee { }  "},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/javascript/","content":"","keywords":""},{"title":"Violate DIP​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/javascript/#violate-dip","content":"// Violates the dependency inversion principle // store has to be rewritten to change the payment service from stripe to paypal class Store { constructor(user) { // this.stripe = new Stripe(user); this.paypal = new Paypal(); this.user = user; } purchaseBike(quantity) { // this.stripe.makePayment(200 * quantity * 100); this.paypal.makePayment(this.user, 200 * quantity); } purchaseHelmet(quantity) { // this.stripe.makePayment(15 * quantity * 100); this.paypal.makePayment(this.user, 15 * quantity); } } class Stripe { constructor(user) { this.user = user; } makePayment(amountInCents) { console.log( `${this.user} made payment of $${amountInCents / 100} with Stripe` ); } } class Paypal { makePayment(user, amountInDollars) { console.log(`${user} made payment of $${amountInDollars} with Paypal`); } } const store = new Store(&quot;John&quot;); store.purchaseBike(2); store.purchaseHelmet(2);  "},{"title":"Pass DIP​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/javascript/#pass-dip","content":"// does not change regardless of payment services class Store { constructor(paymentProcessor) { this.paymentProcessor = paymentProcessor; } purchaseBike(quantity) { this.paymentProcessor.pay(200 * quantity); } purchaseHelmet(quantity) { this.paymentProcessor.pay(15 * quantity); } } // behaves as a wrapper class StripePaymentProcessor { constructor(user) { this.stripe = new Stripe(user); } pay(amountInDollars) { this.stripe.makePayment(amountInDollars * 100); } } class Stripe { constructor(user) { this.user = user; } makePayment(amountInCents) { console.log( `${this.user} made payment of $${amountInCents / 100} with Stripe` ); } } // behaves as a wrapper class PaypalPaymentProcessor { constructor(user) { this.paypal = new Paypal(); this.user = user; } pay(amountInDollars) { this.paypal.makePayment(this.user, amountInDollars); } } class Paypal { makePayment(user, amountInDollars) { console.log(`${user} made payment of $${amountInDollars} with Paypal`); } } const store = new Store(new StripePaymentProcessor(&quot;John&quot;)); store.purchaseBike(2); store.purchaseHelmet(2); const store2 = new Store(new PaypalPaymentProcessor(&quot;John2&quot;)); store2.purchaseBike(2); store2.purchaseHelmet(2);  "},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/python/","content":"","keywords":""},{"title":"Violate DIP​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/python/#violate-dip","content":"# Violates the dependency inversion principle # store has to be rewritten to change the payment service from stripe to paypal class Store: def __init__(self, user): # self.stripe = Stripe(user) self.paypal = Paypal() self.user = user def purchase_bike(self, quantity): # self.stripe.make_payment(200 * quantity * 100) self.paypal.make_payment(self.user, 200 * quantity) def purchase_helmet(self, quantity): # self.stripe.make_payment(15 * quantity * 100) self.paypal.make_payment(self.user, 15 * quantity) class Stripe: def __init__(self, user): self.user = user def make_payment(self, amount_in_cents): print( f&quot;{self.user} made payment of ${amount_in_cents / 100} with Stripe&quot;, ) class Paypal: def make_payment(self, user, amount_in_dollars): print(f&quot;{user} made payment of ${amount_in_dollars} with Paypal&quot;) store = Store(&quot;John&quot;) store.purchase_bike(2) store.purchase_helmet(2)  "},{"title":"Pass DIP​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/python/#pass-dip","content":"# does not change regardless of payment services class Store: def __init__(self, payment_processor): self.payment_processor = payment_processor def purchase_bike(self, quantity): self.payment_processor.pay(200 * quantity) def purchase_helmet(self, quantity): self.payment_processor.pay(15 * quantity) # behaves as a wrapper class StripePaymentProcessor: def __init__(self, user): self.stripe = Stripe(user) def pay(self, amount_in_dollars): self.stripe.make_payment(amount_in_dollars * 100) class Stripe: def __init__(self, user): self.user = user def make_payment(self, amount_in_cents): print( f&quot;{self.user} made payment of ${int(amount_in_cents / 100)} with Stripe&quot;, ) # behaves as a wrapper class PaypalPaymentProcessor: def __init__(self, user): self.paypal = Paypal() self.user = user def pay(self, amount_in_dollars): self.paypal.make_payment(self.user, amount_in_dollars) class Paypal: def make_payment(self, user, amount_in_dollars): print(f&quot;{user} made payment of $${amount_in_dollars} with Paypal&quot;) store = Store(StripePaymentProcessor(&quot;John&quot;)) store.purchase_bike(2) store.purchase_helmet(2) store2 = Store(PaypalPaymentProcessor(&quot;John2&quot;)) store2.purchase_bike(2) store2.purchase_helmet(2)  "},{"title":"Design by Contract (DbC)","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/designByContract/","content":"","keywords":""},{"title":"Correctness​","type":1,"pageTitle":"Design by Contract (DbC)","url":"docs/interviewPrep/design_principles/designByContract/#correctness","content":"the first term we need to understand is system correctness correctness can be applied to the function specification, but not to the function code we can only say if function is correct or incorrect when talking about expected results function specification is fully correct when both precondition and postcondition are met it is the only case when we can say that the function is correct when we are talking about its results and both pre- and postconditions are met example 1 This function by itself is neither correct nor incorrectcorrectness can be applied when we talk about expected resultsThis function is correct if we say that &quot;Returned value is half the size of the argument&quot;but it is not correct if we say that &quot;Returned value should be positive&quot; because there are no guarantees that the function will not receive a negative number as the argument The first triple is correct as before the operation x ^ 2 precondition is met and x is equal to 5 then after the operation postcondition (x is greater than 0) also will be met (subject to correct implementation of integer arithmetic)In this example postcondition is not the strongest one, the strongest possible postcondition for this precondition is {x = 25} and the weakest one is {x &gt; 0}We can always create a new triple from existing one making precondition and postcondition weaker or strongerThe concept of stronger and weaker came from logicIt is said that the condition X &gt; 5 is stronger than X &gt; 0X &gt; 0 is weaker than X &gt; 5 if the fulfillment of X &gt; 5 implies the fulfillment of X &gt; 0, but they are not equivalent For example, X &gt; 5 is stronger than X &gt; 0 since if X &gt; 5 is fulfilled, X &gt; 0 is fulfilled as well (after all, if x is greater than 5, then, naturally, x is greater than 0), and they are not equivalent // Example 1 const doSomething = (x) =&gt; { return x / 2; }; // Example 2 // { x = 5 } x = x ˆ 2 { x &gt; 0 } =&gt; the weakest postcondition // Example 3 // { x = 5 } x = x ˆ 2 { x = 25 } =&gt; the strongest postcondition example 2 Each function has strict semantic properties that reflect what the function does, regardless of how it does it preconditions define properties that must be met every time before function is executedThe precondition binds the calling code the conditions are defined under which the program call by the client is legitimate e.g. x &gt; 0 for the Sqrt function or count ! = 0 for the Pop function of the Stack class In this case, the client's obligations benefit the provider class, since the class performing the operation does not need to worry about what to do if a precondition is violated return a default value or error code, throw an exception, save information about the error to the I/O stream, or interrupt the program execution postconditions properties that must be met after its executionThe postcondition binds the class the conditions that must be met upon completion of the operation are determined the Stack class must provide an increase in the number of elements by 1 after the push function is executed the client's benefit (the result of performing the function) turns into the supplier's obligations (it can no longer fail to fulfill its obligations, since they are spelled out in the contract) class Stack&lt;T&gt; { private count = 0; private maxAmount = 15; public push(e: T) { console.assert(this.count &lt; this.maxAmount, &quot;Stack not overflown&quot;); const previousCount = this.count; // method implementation console.assert(this.count === previousCount + 1, &quot;One more item&quot;); } public pop(): T { console.assert(this.count !== 0, &quot;Stack is empty&quot;); // method implementation console.assert(result !== null, &quot;Result is not null&quot;); console.assert(this.count === previousCount - 1, &quot;One less item&quot;); return result; } }  "},{"title":"Preconditions and Postconditions for Inheritance​","type":1,"pageTitle":"Design by Contract (DbC)","url":"docs/interviewPrep/design_principles/designByContract/#preconditions-and-postconditions-for-inheritance","content":"Condition P1 is stronger than P2 and P2 is weaker than P1 when the fulfillment of P1 implies the fulfillment of P2, and they are not equivalent correctThis is the most correct way to say which condition is stronger Liskov substitution principle is the most closely related to preconditions and postconditions this principle says that you should be able to replace the base class with its subclass and the program should work correctly with it, or in other words it tells that pre- and postconditions should be met for the subclass example C class which contains link to a B classDue to dynamic linking D class (or any other B subclass) can be used instead of B class after the start of program executionB class has a public foo function with a precondition of x &gt; 5 (pre_b) and a postcondition result &gt; 0 (post_b) By checking the precondition, class C fulfills its part of the contract and can expect class B (or one of its subclasses) to fulfill the contractAccording to the Liskov substitution principle, the behavior of the given code fragment should not change if we substitute any B subclassAssuming that the function foo in class D starts to require more (contains a stronger precondition like x &gt; 10), and guarantees less (contains a weaker postcondition like x &gt; -5) In this case, although the client of class B fulfills its part of the contract and provides an input value to the function foo that satisfies the precondition, it may not get the expected result Strengthening the precondition means that the data correct for the base class will become incorrect for its subclass (in this example, it can be the value x equal to 6)weakening the postcondition means that the result that the client of the base class expects may not be returned by the subclass (in this example, this could be the result of the function Foo equal to -1) Hence, we can conclude that when overriding methods, the precondition can be replaced only by an equal or weaker one (require less)and a postcondition only equal to it or stronger (guarantees more) The new version of the method should not reject calls allowed in the original it should, at a minimum, provide guarantees equivalent to those of the original version It is free, although not obligated, to allow more calls or provide stronger guarantees class B { public foo(x: number): number { console.assert(x &gt; 5, &quot;x &gt; 5&quot;); //method implementation console.assert(result, &quot;result &gt; 0&quot;); return result; } } class C { private b: B; public bar(x: number) { if (x &gt; 5) { const result = this.b.foo(x); console.assert(result &gt; 0, &quot;result &gt; 0&quot;); } } }  "},{"title":"Covariance and Contravariance​","type":1,"pageTitle":"Design by Contract (DbC)","url":"docs/interviewPrep/design_principles/designByContract/#covariance-and-contravariance","content":"when replacing the base class with its subclass the input values of subclass for its methods must be contravariant that is, the precondition must be the same or weakerwhen the input values are contravariant you can be sure that subclass will always have the same or weaker preconditions and can be used instead of base class the output values of subclass must be covariant, that is, the same or stronger when the output values are covariant or in other words when postcondition is the same or stronger you can be sure that the calling code will always get expected result example 1 have inheritance structure built of three classes Locality as a base class and City and NewYork as more specific classes Function with name covariance accepts City instances as an argument but it also can accept NewYork instances as the more specific subclassat the same time it can not accept City superclass as the argumentLocality because covariance will be violated in such case Everything is vice versa for the contravariance function it can accept City and its supertype as the argument but cannot accept City subclass class Locality {} class City extends Locality {} class NewYork extends City {} function covariance(city: City): void {} covariance(new Locality()); // error... does not support supertype covariance(new City()); // ok support exact type covariance(new NewYork()); // ok support subtype function contravariance(city: City): void {} contravariance(new Locality()); // ok support supertype contravariance(new City()); // ok support exact type contravariance(new NewYork()); // error... does not support subtype example 2 to understand how contravariance works on input valuesit also have an inheritance hierarchy of three classes, the base Destination, its USADestination subclass and the even more specific TexasDestionation classIf we want to create a ShippingCalculator class that will accept USADestination as input and return the Price to us, and then create its InternationalShippingCalculator subclass which will already accept any Destination as input then this will be correct since the contravariance of the input values is observed, and we can replace the ShippingCalculator with InternationalShippingCalculator, and it will work But if after that we want to extend the functionality of the ShippingCalculator by creating its TexasShippingCalculator subclass which will only accept TexasDestionation as input then in this case the contravariance is not observed, since the input value is more specific, and in this case we cannot replace the ShippingCalculator on TexasShippingCalculator while keeping the system working class Price {} class Destination {} class USADestination extends Destination {} class TexasDestination extends USADestination {} class ShippingCalculator { public getRate(destination: USADestination): Price { return new Price(); } } class InternationalShippingCalculator extends ShippingCalculator { // ok - contravariance on input value public getRate(destination: Destination): Price { return new Price(); } } class TexasShippingCalculator extends ShippingCalculator { // wrong - covariance on input value public getRate(destination: TexasDestination): Price { return new Price(); } } example 3 how to meet contravariance for the output valueshave the base Animal class and its three subclasses, while the Snake and Wolf classes are its direct subclasses, and the CanisLupus class is a Wolf subclassIf we want to create a ZooCage class that will return the contents of the cage and the expected output value will be the Wolf class then to maintain covariance in the CanisLupusCage class, we need to return the Wolf or CanisLupus class If we create a Terrarium class with an output value of the Animal class then the covariance will not be met, since the Animal class is a superclass of the Wolf class class Animal { public feed(food): void { console.log(&quot;yumm!&quot;); } public walk(): void { throw new Error(&quot;Not implemented&quot;); } } class Snake extends Animal { public crawl(): void { console.log(&quot;crawling&quot;); } } class Wolf extends Animal { public walk(): void { console.log(&quot;walking&quot;); } } class CanisLupus extends Wolf {} class ZooCage { public getContent(): Wolf { return new Wolf(); } } class CanisLupusCage extends ZooCage { // ok - returns subtype public getContent(): CanisLupus { return new CanisLupus(); } } class Terrarium extends ZooCage { // wrong - returns supertype public getContent(): Animal { return new Snake(); } }  "},{"title":"TypeScript","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/typescript/","content":"","keywords":""},{"title":"Violate DIP​","type":1,"pageTitle":"TypeScript","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/typescript/#violate-dip","content":"// Violates the dependency inversion principle // store has to be rewritten to change the payment service from stripe to paypal class Store { strip: Stripe; paypal: Paypal; user: string; constructor(user: string) { // this.stripe = new Stripe(user); this.paypal = new Paypal(); this.user = user; } purchaseBike(quantity: number) { // this.stripe.makePayment(200 * quantity * 100); this.paypal.makePayment(this.user, 200 * quantity); } purchaseHelmet(quantity: number) { // this.stripe.makePayment(15 * quantity * 100); this.paypal.makePayment(this.user, 15 * quantity); } } class Stripe { user: string; constructor(user: string) { this.user = user; } makePayment(amountInCents: number) { console.log( `${this.user} made payment of $${amountInCents / 100} with Stripe` ); } } class Paypal { makePayment(user: string, amountInDollars: number) { console.log(`${user} made payment of $${amountInDollars} with Paypal`); } } const store = new Store(&quot;John&quot;); store.purchaseBike(2); store.purchaseHelmet(2);  "},{"title":"Pass DIP​","type":1,"pageTitle":"TypeScript","url":"docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/typescript/#pass-dip","content":"// does not change regardless of payment services interface PaymentProcessor { pay(amountInDollars: number): void; } class Store { paymentProcessor: PaymentProcessor; constructor(paymentProcessor: PaymentProcessor) { this.paymentProcessor = paymentProcessor; } purchaseBike(quantity: number) { this.paymentProcessor.pay(200 * quantity); } purchaseHelmet(quantity: number) { this.paymentProcessor.pay(15 * quantity); } } // behaves as a wrapper class StripePaymentProcessor implements PaymentProcessor { stripe: Stripe; constructor(user: string) { this.stripe = new Stripe(user); } pay(amountInDollars: number) { this.stripe.makePayment(amountInDollars * 100); } } class Stripe { user: string; constructor(user: string) { this.user = user; } makePayment(amountInCents: number) { console.log( `${this.user} made payment of $${amountInCents / 100} with Stripe` ); } } // behaves as a wrapper class PaypalPaymentProcessor implements PaymentProcessor { paypal: Paypal; user: string; constructor(user: string) { this.paypal = new Paypal(); this.user = user; } pay(amountInDollars: number) { this.paypal.makePayment(this.user, amountInDollars); } } class Paypal { makePayment(user: string, amountInDollars: number) { console.log(`${user} made payment of $${amountInDollars} with Paypal`); } } const store = new Store(new StripePaymentProcessor(&quot;John&quot;)); store.purchaseBike(2); store.purchaseHelmet(2); const store2 = new Store(new PaypalPaymentProcessor(&quot;John2&quot;)); store2.purchaseBike(2); store2.purchaseHelmet(2);  "},{"title":"JavaScript","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/javascript/","content":"","keywords":""},{"title":"Violate ISP​","type":1,"pageTitle":"JavaScript","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/javascript/#violate-isp","content":"// this violates the interface segregation principle // because it is being used by multiple classes that does not requires all of it class Entity { constructor(name, attackDamage, health) { this.name = name; this.attackDamage = attackDamage; this.health = health; } move() { console.log(`${this.name} moved`); } attack(targetEntity) { console.log( `${this.name} attacked ${targetEntity.name} for ${this.attackDamage} damage` ); targetEntity.takeDamage(this.attackDamage); } takeDamage(amount) { this.health -= amount; console.log(`${this.name} has ${this.health} health remaining`); } } // passes the interface segregation principle class Character extends Entity {} class Wall extends Entity { constructor(name, health) { // violates the interface segregation principle super(name, 0, health); } // violates the interface segregation principle move() { return null; } // violates the interface segregation principle attack() { return null; } } class Turret extends Entity { constructor(name, attackDamage) { // violates the interface segregation principle super(name, attackDamage, 0); } // violates the interface segregation principle move() { return null; } // violates the interface segregation principle takeDamage() { return null; } } const turret = new Turret(&quot;Turret&quot;, 5); const character = new Character(&quot;Character&quot;, 3, 100); const wall = new Wall(&quot;Wall&quot;, 200); turret.attack(character); character.move(); character.attack(wall);  "},{"title":"Pass ISP​","type":1,"pageTitle":"JavaScript","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/javascript/#pass-isp","content":"class Entity { constructor(name) { this.name = name; } } const mover = { move() { console.log(`${this.name} moved`); }, }; const attacker = { attack(targetEntity) { console.log( `${this.name} attacked ${targetEntity.name} for ${this.attackDamage} damage` ); targetEntity.takeDamage(this.attackDamage); }, }; const hasHealth = { takeDamage(amount) { this.health -= amount; console.log(`${this.name} has ${this.health} health remaining`); }, }; class Character extends Entity { constructor(name, attackDamage, health) { super(name); this.attackDamage = attackDamage; this.health = health; } } Object.assign(Character.prototype, mover); Object.assign(Character.prototype, attacker); Object.assign(Character.prototype, hasHealth); class Wall extends Entity { constructor(name, health) { super(name); this.health = health; } } Object.assign(Wall.prototype, hasHealth); class Turret extends Entity { constructor(name, attackDamage) { super(name); this.attackDamage = attackDamage; } } Object.assign(Turret.prototype, attacker); const turret = new Turret(&quot;Turret&quot;, 5); const character = new Character(&quot;Character&quot;, 3, 100); const wall = new Wall(&quot;Wall&quot;, 200); turret.attack(character); character.move(); character.attack(wall);  "},{"title":"Interface Segregation Principle (ISP)","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/","content":"","keywords":""},{"title":"Purpose​","type":1,"pageTitle":"Interface Segregation Principle (ISP)","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/#purpose","content":"the purpose is to keep a system decoupledallow easy refactor, change, and redeploy "},{"title":"Example​","type":1,"pageTitle":"Interface Segregation Principle (ISP)","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/#example","content":"We have Staff interface and class Lecturer that implements Staff interface Thus, it does not violate the principleFor simplicity, let us ignore the actual business implementation of these methods interface Staff { name: string; salary: number; adjustSalary(): number; } class Lecturer implements Staff { constructor(public name: string, public salary: number) {} adjustSalary() { return this.salary * 0.9; } }  Now, as we move ahead in time, and more features come in, there is a need to add management staff, so we created Administrator classEverything looks good so farBut what if we need to extend Lecturer and Administrator classes behavior? Let us say that we want to add giveLecture() method to Lecturer class and arrangeMeeting() to AdministratorIn this case we need to extend Staff interface with those methods interface Staff { name: string; salary: number; adjustSalary(): number; giveLecture(): void; arrangeMeeting(): void; } class Lecturer implements Staff { constructor(public name: string, public salary: number) {} adjustSalary() { return this.salary * 0.9; } giveLecture() {} arrangeMeeting() {} } class Administrator implements Staff { constructor(public name: string, public salary: number) {} adjustSalary() { return this.salary * 0.75; } arrangeMeeting() {} giveLecture() {} }  Now, since the Staff interface has changed and more methods were added, all the implementing classes now must implement the new methodsThe problem is, implementing them is unwanted and could lead to many side effectsHere, the Administrator implementation class must implement the giveLecture() method without any actual need for thisAnd so, the principle is violatedLet us break up the interfaces and apply the Interface Segregation Principle As you can see, we have created two more interfaces AcademicStaff and ManagerStaff that extend the base Staff interfaceEach of the new interfaces contain only those methods that they needTherefore, Lecturer class now implements AcademicStaff and Administrator class AcademicStaff interface interface Staff { name: string; salary: number; adjustSalary(): number; } interface AcademicStaff extends Staff { giveLecture(): void; } interface ManagerStaff extends Staff { arrangeMeeting(): void; } class Lecturer implements AcademicStaff { constructor(public name: string, public salary: number) {} adjustSalary() { return this.salary * 0.9; } giveLecture() {} } class Administrator implements ManagerStaff { constructor(public name: string, public salary: number) {} adjustSalary() { return this.salary * 0.75; } arrangeMeeting() {} }  "},{"title":"Summary​","type":1,"pageTitle":"Interface Segregation Principle (ISP)","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/#summary","content":"essence of ISP design interfaces so that the entities that implement them do not depend on methods they do not use the ISP helps to design the interfaces so that changes only affect those modules whose functionality they actually affect benefits of DIP reduced coupling of modules high-level modules should not depend on low-level modulesboth types must depend on abstractions increased module cohesion according to the principle, modules should not directly depend on other modules, but on abstractions As you can see fat interfaces lead to inadvertent coupling between classes, and you should avoid them When designing interfaces, you should always ask yourself the question Do really need all the methods on this interface I'm using? If not, how can I break them into smaller interfaces?Treat interface segregation with certain pragmatism and use common sense "},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/cSharp/","content":"C# Example /* Interface Segregation Principle - Interfaces should be segregated so that nobody who implements the interface will need to implement functions which they don't actually need. */ public class Document { } // not a good design as it forces different printer types to implement all of these features public interface IMachine { void Print(Document d); void Scan(Document d); void Fax(Document d); } // this is ok because this product uses all the features public class MultiFunctionPrinter : IMachine { public void Print(Document d) {} public void Scan(Document d) {} public void Fax(Document d) {} } // this is NOT ok because the product cannot scan and fax public class OldFashionPrinter : IMachine { public void Print(Document d) {} // should not have this, even if throw an exception public void Scan(Document d) { throw new System.NotImplementedException(); } // should not have this, even if throw an exception public void Fax(Document d) { throw new System.NotImplementedException(); } } // better to design interfaces separately in this case public interface IPrinter { void Print(Document d); } public interface IScanner { void Scan(Document d); } // use multiple interface inheritance to implement multiple features public class Photocopier : IPrinter, IScanner { public void Print(Document d) {} public void Scan(Document d) {} } // or can make an interface inherit multiple interfaces public interface IMultiFunctionDevice : IScanner, IPrinter {} public class MultiFunctionMachine : IMultiFunctionDevice { /* method 1 public void Scan(Document d) {} public void Print(Document d) {} */ // method 2 private IPrinter _printer; private IScanner _scanner; public MultiFunctionMachine(IPrinter printer, IScanner scanner) { if (printer == null) throw new System.ArgumentNullException(paramName: nameof(printer)); if (scanner == null) throw new System.ArgumentNullException(paramName: nameof(scanner)); this._printer = printer; this._scanner = scanner; } // Print will be delegated to _printer public void Print(Document d) { _printer.Print(d); } // decorator pattern // Scan will be delegated to _scanner public void Scan(Document d) { _scanner.Scan(d); } // decorator pattern } public class Program { public static void Main() {} } ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/javascript/","content":"","keywords":""},{"title":"Violate LSP​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/javascript/#violate-lsp","content":"class Bird { fly() { console.log(&quot;I can fly&quot;); } } class Duck extends Bird { quack() { console.log(&quot;I can quack&quot;); } } class Penguin extends Bird { fly() { throw new Error(&quot;Cannot fly&quot;); } swim() { console.log(&quot;I can swim&quot;); } } // this violates the Liskov Substitution Principle // as not every bird can fly function makeBirdFly(bird) { bird.fly(); } const duck = new Duck(); const penguin = new Penguin(); makeBirdFly(duck); makeBirdFly(penguin); // throws an error as penguin can't fly  "},{"title":"Pass LSP​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/javascript/#pass-lsp","content":"class FlyingBird { fly() { console.log(&quot;I can fly&quot;); } } class SwimmingBird { swim() { console.log(&quot;I can swim&quot;); } } class Duck extends FlyingBird { quack() { console.log(&quot;I can quack&quot;); } } class Penguin extends SwimmingBird {} function makeFlyingBirdFly(bird) { bird.fly(); } function makeSwimmingBirdSwim(bird) { bird.swim(); } const duck = new Duck(); const penguin = new Penguin(); makeFlyingBirdFly(duck); makeSwimmingBirdSwim(penguin);  "},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/cSharp/","content":"C# Example /* Liskov Substitution Principle - should be able to substitute a base type for a subtype */ public class Rectangle { //public int Width { get; set; } //public int Height { get; set; } public virtual int Width { get; set; } public virtual int Height { get; set; } public Rectangle() {} public Rectangle(int width, int height) { Width = width; Height = height; } public override string ToString() { return $&quot;{nameof(Width)}: {Width}, {nameof(Height)}: {Height}&quot;; } } public class Square : Rectangle { //public new int Width { // set { base.Width = base.Height = value; } //} //public new int Height { // set { base.Width = base.Height = value; } //} public override int Width { set { base.Width = base.Height = value; } } public override int Height { set { base.Width = base.Height = value; } } } public class Program { public static int Area(Rectangle r) =&gt; r.Width * r.Height; public static void Main() { Rectangle rc = new Rectangle(); System.Console.WriteLine($&quot;{rc} has area {Area(rc)}&quot;); // should be able to substitute a base type for a subtype //Square sq = new Square(); Rectangle sq = new Square(); sq.Width = 4; System.Console.WriteLine($&quot;{sq} has area {Area(sq)}&quot;); } } ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/python/","content":"","keywords":""},{"title":"Violate ISP​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/python/#violate-isp","content":"from abc import ABC, abstractmethod # this violates the interface segregation principle # because it is being used by multiple classes that does not requires all of it class Entity(ABC): def __init__(self, name, attack_damage, health): self.name = name self.attack_damage = attack_damage self.health = health @abstractmethod def move(self): pass @abstractmethod def attack(self, target_entity): pass @abstractmethod def take_damage(self, amount): pass class Character(Entity): def __init__(self, name, attack_damage, health): super().__init__(name, attack_damage, health) def move(self): print(f&quot;{self.name} moved&quot;) def attack(self, target_entity): print( f&quot;{self.name} attacked {target_entity.name} for {self.attack_damage} damage&quot;, ) target_entity.take_damage(self.attack_damage) def take_damage(self, amount): self.health -= amount print(f&quot;{self.name} has {self.health} health remaining&quot;) class Wall(Entity): def __init__(self, name, health): super().__init__(name, 0, health) def move(self): return None def attack(self): return None def take_damage(self, amount): self.health -= amount print(f&quot;{self.name} has {self.health} health remaining&quot;) class Turret(Entity): def __init__(self, name, attack_damage): super().__init__(name, attack_damage, 0) def move(self): return None def take_damage(self): return None def attack(self, target_entity): print( f&quot;{self.name} attacked {target_entity.name} for {self.attack_damage} damage&quot;, ) target_entity.take_damage(self.attack_damage) turret = Turret(&quot;Turret&quot;, 5) character = Character(&quot;Character&quot;, 3, 100) wall = Wall(&quot;Wall&quot;, 200) turret.attack(character) character.move() character.attack(wall)  "},{"title":"Pass ISP​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/python/#pass-isp","content":"from abc import ABC, abstractmethod class Entity(ABC): def __init__(self, name): self.name = name class Mover(ABC): @abstractmethod def move(self): pass class Attacker(ABC): def __init__(self, attack_damage): self.attack_damage = attack_damage @abstractmethod def attack(self, target_entity): pass class HasHealth(ABC): def __init__(self, health): self.health = health @abstractmethod def take_damage(self, amount): pass class Character(Entity, Mover, Attacker, HasHealth): def __init__(self, name, attack_damage, health): Entity.__init__(self, name) Attacker.__init__(self, attack_damage) HasHealth.__init__(self, health) def move(self): print(f&quot;{self.name} moved&quot;) def attack(self, target_entity): print( f&quot;{self.name} attacked {target_entity.name} for {self.attack_damage} damage&quot;, ) target_entity.take_damage(self.attack_damage) def take_damage(self, amount): self.health -= amount print(f&quot;{self.name} has {self.health} health remaining&quot;) class Wall(Entity, HasHealth): def __init__(self, name, health): Entity.__init__(self, name) HasHealth.__init__(self, health) def take_damage(self, amount): self.health -= amount print(f&quot;{self.name} has {self.health} health remaining&quot;) class Turret(Entity, Attacker): def __init__(self, name, attack_damage): Entity.__init__(self, name) Attacker.__init__(self, attack_damage) def attack(self, target_entity): print( f&quot;{self.name} attacked {target_entity.name} for {self.attack_damage} damage&quot;, ) target_entity.take_damage(self.attack_damage) turret = Turret(&quot;Turret&quot;, 5) character = Character(&quot;Character&quot;, 3, 100) wall = Wall(&quot;Wall&quot;, 200) turret.attack(character) character.move() character.attack(wall)  "},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/typescript/","content":"","keywords":""},{"title":"Violate LSP​","type":1,"pageTitle":"TypeScript Example","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/typescript/#violate-lsp","content":"interface Bird { fly(): void; } class Duck implements Bird { quack() { console.log(&quot;I can quack&quot;); } fly() { console.log(&quot;I can fly&quot;); } } class Penguin implements Bird { fly() { throw new Error(&quot;Cannot fly&quot;); } swim() { console.log(&quot;I can swim&quot;); } } // this violates the Liskov Substitution Principle // as not every bird can fly function makeBirdFly(bird: Bird) { bird.fly(); } const duck = new Duck(); const penguin = new Penguin(); makeBirdFly(duck); makeBirdFly(penguin); // throws an error as penguin can't fly  "},{"title":"Pass LSP​","type":1,"pageTitle":"TypeScript Example","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/typescript/#pass-lsp","content":"interface FlyingBird { fly(): void; } interface SwimmingBird { swim(): void; } class Duck2 implements FlyingBird { quack() { console.log(&quot;I can quack&quot;); } fly() { console.log(&quot;I can fly&quot;); } } class Penguin2 implements SwimmingBird { swim() { console.log(&quot;I can swim&quot;); } } function makeFlyingBirdFly(bird: FlyingBird) { bird.fly(); } function makeSwimmingBirdSwim(bird: SwimmingBird) { bird.swim(); } const duck2 = new Duck2(); const penguin2 = new Penguin2(); makeFlyingBirdFly(duck2); makeSwimmingBirdSwim(penguin2);  "},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/python/","content":"","keywords":""},{"title":"Violate LSP​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/python/#violate-lsp","content":"class Bird: def fly(self): print(&quot;I can fly&quot;) class Duck(Bird): def quack(self): print(&quot;I can quack&quot;) class Penguin(Bird): def fly(self): raise Exception(&quot;Cannot fly&quot;) def swim(self): print(&quot;I can swim&quot;) # this violates the Liskov Substitution Principle # as not every bird can fly def make_bird_fly(bird): bird.fly() duck = Duck() penguin = Penguin() make_bird_fly(duck) make_bird_fly(penguin) # throws an error as penguin can't fly  "},{"title":"Pass LSP​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/python/#pass-lsp","content":"class FlyingBird: def fly(self): print(&quot;I can fly&quot;) class SwimmingBird: def swim(self): print(&quot;I can swim&quot;) class Duck(FlyingBird): def quack(self): print(&quot;I can quack&quot;) class Penguin(SwimmingBird): ... def make_flying_bird_fly(bird): bird.fly() def make_swimming_bird_swim(bird): bird.swim() duck = Duck() penguin = Penguin() make_flying_bird_fly(duck) make_swimming_bird_swim(penguin)  "},{"title":"Open Closed Principle (OCP)","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/","content":"","keywords":""},{"title":"2 types​","type":1,"pageTitle":"Open Closed Principle (OCP)","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/#2-types","content":"Both ways use generalizations (for instance, inheritance or delegate functions) to resolve the apparent dilemma, but the goals, techniques, and results are different "},{"title":"Meyer's open-closed principle​","type":1,"pageTitle":"Open Closed Principle (OCP)","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/#meyers-open-closed-principle","content":"A module is open if it is still available for extension e.g.: it should be possible to add fields to the data structures it contains, or new elements to the set of functions it performs A module is closed if is available for use by other modules This assumes that the module has been given a well-defined, stable description (the interface in the sense of information hiding) A class is closed, since it may be compiled, stored in a library, baselined, and used by client classes But it is also open, since any new class may use it as parent, adding new featuresWhen a descendant class is defined, there is no need to change the original or to disturb its clients "},{"title":"Polymorphic open-closed principle​","type":1,"pageTitle":"Open Closed Principle (OCP)","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/#polymorphic-open-closed-principle","content":"open-closed principle refer to the use of abstracted interfaces where the implementations can be changed and multiple implementations could be created and polymorphically substituted for each other this advocates inheritance from abstract base classes Interface specifications can be reused through inheritance but implementation need not beThe existing interface is closed to modifications and new implementations must, at a minimum, implement that interface "},{"title":"Example​","type":1,"pageTitle":"Open Closed Principle (OCP)","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/#example","content":"When we removed data retrieval, parsing and saving from TradeProcessor class and created separate class for each type of responsibility, we made TradeProcessor class to conform to OCP If the requirements change, we can get completely different functionality without changing the TradeProcessor itself Suppose at some point we were given requirement to support multiple data sources at the same time (stream, REST API and XML file) It is not a problem for usWe can use polymorphic DataProvider in TradeProcessorAs you can see on the diagram below, we have created classes for every data source: StreamDataProvider, RESTAPIDataProvider and XMLFileDataProviderAll of them are inherited from base DataProvider class and override reduce() methodSo, in the future, whenever we need to receive data from some new sources, we will do exactly the same thingTherefore, OCP is not violatedWe are closed for modifications (no need to change DataProvider class) and at the same time we are open for expansion  "},{"title":"Single Choice Principle​","type":1,"pageTitle":"Open Closed Principle (OCP)","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/#single-choice-principle","content":"Suppose we have a hierarchy of classes designed to import data from files of different formats We also have a factory method that creates the required Importer depending on the file extension Does the implementation of such a factory comply with the OCP? Or do we need to introduce an ImporterFactory interface and factory hierarchy to comply with this principle? The factory method by itself already hides the way to get the desired Importer from its customers and an additional level of indirection is not needed here class ImporterFactory { public static create(fileName: string): Importer { switch (getExtension(fileName)) { case &quot;json&quot;: return new JsonImporter(); case &quot;xls&quot;: case &quot;xlsx&quot;: return new XlsImporter(); default: throw new Error(&quot;Extension is not supported&quot;); } } }  according to Bertrand Meyer It is necessary to admit the possibility that the list of variants, given and known at some stage of program development, may subsequently be changed by adding or removing variantsTo ensure that this approach to the software development process is implemented, you need to find a way to protect the program structure from the impact of such changesHence, follows the principle of Single Choice In other words: whenever a software system needs to support multiple alternatives, only one module of the system should know the complete list "},{"title":"Summary​","type":1,"pageTitle":"Open Closed Principle (OCP)","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/#summary","content":"essence of OCP design modules so that their functionality can be expanded with other modules if requirements change new functionality should appear only by creating new entities and composing them with old ones design modules so that, ideally, their code does not need to be changed when requirements change there are always changes that cannot be made without changing the code of some module no system can be 100% closedtherefore, a strategic approach is important when designingit is necessary to determine from which changes and which modules you want to close design modules to relate to each other through abstractions rather than specific implementation the principle encourages linking entities through abstractions (rather than implementation) where business requirements may change benefits of OCP reduces the amount of code that needs to be changed as business requirements changemakes modification safe and relatively cheap the goal of OCP is to minimize changes to existing classes when new functionality is added It is achieved by adding extension points (not just inheritance) that allow us to take advantage of powerful tools like composition, aggregation, and polymorphism "},{"title":"Liskov Substitution Principle (LSP)","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/","content":"","keywords":""},{"title":"Contract Rules​","type":1,"pageTitle":"Liskov Substitution Principle (LSP)","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/#contract-rules","content":""},{"title":"Preconditions cannot be strengthened in a subtype​","type":1,"pageTitle":"Liskov Substitution Principle (LSP)","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/#preconditions-cannot-be-strengthened-in-a-subtype","content":"Preconditions are defined as all the conditions necessary for a method to run reliably and without fault If subclass is replaced with superclass and preconditions are tightened for existing methods, then existing functionality will break Suppose we have a class for calculating shipping price ShippingCalculator This class has calculate() method defined, which takes two arguments: size and weight and calculates delivery price The calculate() method will not work properly if weight or size provided are less or equal zero These are preconditions Suppose at some point we are given new requirements for shipping service: we need to support worldwide delivery that should be done only if weight and size of product we want to deliver are less than 10 We create class WorldWideShipping that extends ShippingCalculator class and override calculate() method based on new requirementsNow WorldWideShipping does not fulfill ShippingCalculator expectations, because it works only with size and weight less than 10As a result, WorldWideShipping strengthens preconditions and violates the Liskov substitution principleAll clients should now be aware of the new type and treat it as a special case class ShippingCalculator { public calculate(weight: number, size: number, destination: USADestination) { if (weight &lt;= 0 || size &lt;= 0) { throw new Error(&quot;Weight and size should be greater than 0&quot;); } const shippingPrice = weight * size; return shippingPrice; } } class WorldWideShipping extends ShippingCalculator { // correct destination type passed: Destination public calculate(weight: number, size: number, destination: Destination) { // preconditions are strengthened if (weight &lt; 10 &amp;&amp; size &lt; 10) { throw new Error(&quot;No international shipping for you&quot;); } return super.calculate(weight, size, destination); } }  "},{"title":"Postconditions cannot be weakened in a subtype​","type":1,"pageTitle":"Liskov Substitution Principle (LSP)","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/#postconditions-cannot-be-weakened-in-a-subtype","content":"Postconditions check whether an object is being left in a valid state before a method is returned The reason you cannot weaken postconditions is because existing clients might break when a new subclass is introduced Let us get back to ShippingCalculator.calculate() method The postcondition is the rule that the delivery cost is always more than 0Suppose our customers decided to bring in free delivery for products which size and weight are less than 1We create class FreeShipping and override calculate() method based on new requirementsIn this case, we weakened postconditions compared to the original onesWe broke the original logic which assumed that the shippingPrice is always a positive numberAs a result, clients who are sure in original postconditions and who have previously worked with the base class, may break when switching to the subclassMoreover, it will also be required for them to check which instance of the calculator they are working with to handle new requirements class FreeShipping extends ShippingCalculator { // incorrect destination type passed: should be Destination public calculate( weight: number, size: number, destination: TexasDestination ) { if (weight &lt;= 0 || size &lt;= 0) { throw new Error(&quot;Weight and size should be greater than 0&quot;); } // postconditions are weakened const shippingPrice = weight &lt; 1 &amp;&amp; size &lt; 1 ? 0 : super.calculate(weight, size, destination); return shippingPrice; } }  "},{"title":"Variance Rules​","type":1,"pageTitle":"Liskov Substitution Principle (LSP)","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/#variance-rules","content":""},{"title":"There must be covariance of the return types in the subtype​","type":1,"pageTitle":"Liskov Substitution Principle (LSP)","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/#there-must-be-covariance-of-the-return-types-in-the-subtype","content":"Covariance is when function return values can be changed to subtypes, moving down the hierarchySuppose we have a base Product class defined with getShippingProvider() method which returns an instance of ShippingCalculator class We want to introduce a new product phone, that is why we create Phone class and extend it from base Product classPhones can be delivered worldwideTherefore, getShippingProvider() should return an instance of WorldWideShipping classCovariance of return types is kept: getShippingProvider() returns an instance of WorldWideShipping class, which is subtype of ShippingCalculator (moving down to hierarchy) class Product { public getShippingProvider(): ShippingCalculator { return new ShippingCalculator(); } } class Phone extends Product { // WorldWideShipping is subtype of ShippingCalculator public getShippingProvider(): WorldWideShipping { return new WorldWideShipping(); } }  Example of violating the covariance rule of return types in subtype is given below As you can see, we are moving up the hierarchy of classes class Product { public getShippingProvider(): WorldWideShipping { return new WorldWideShipping(); } } class Phone extends Product { public getShippingProvider(): ShippingCalculator { return new ShippingCalculator(); } }  "},{"title":"There must be contravariance of the method arguments in the subtype​","type":1,"pageTitle":"Liskov Substitution Principle (LSP)","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/#there-must-be-contravariance-of-the-method-arguments-in-the-subtype","content":"Contravariance is when function arguments can be changed to supertypes, moving up the hierarchySuppose at some point we decided to deliver products only to the USA and free shipping is possible only to Texas We extend calculate() method and pass destination needed to itContravariance of function arguments is kept in WorldWideShipping class, but not in FreeShipping classDestination should be an instance of Destination class in FreeShipping.calculate() method class Destination {} class USADestination extends Destination {} class TexasDestination extends USADestination {} class ShippingCalculator { public calculate(weight: number, size: number, destination: USADestination) { // calculate } } class WorldWideShipping extends ShippingCalculator { // correct destination type passed: Destination public calculate(weight: number, size: number, destination: Destination) { // calculate } } class FreeShipping extends ShippingCalculator { // incorrect destination type passed: should be Destination public calculate( weight: number, size: number, destination: TexasDestination ) { // calculate } }  "},{"title":"Invariants must be maintained​","type":1,"pageTitle":"Liskov Substitution Principle (LSP)","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/#invariants-must-be-maintained","content":"A data invariant is a state that remains true for the entire lifetime of an object Data invariants refer to the expected internal state of an objectWhenever a new subclass is created, it must continue to honor all the data invariants that were part of the base classThe violation of this principle is easy to introduce because subclasses have a lot of freedom to introduce new ways of changing previously private data A list of users with unique emails can be an example of a data invariant Let us have a look at Users.add() methodBy adding a simple guard condition to the method, we prevented adding an invalid value and preserved the data invariantIn NotUniqueUsers.add() method we violate the parent class invariants, since we give the opportunity to add non-unique values to the collection of usersData invariants must be persisted throughout the hierarchy of classesEvery class in the chain of inheritance must fulfill the invariants of all its heirs, otherwise no one can guarantee the correctness of the behavior class User { constructor(private email: string) {} hasSameEmail(other: User): boolean { return other.email === this.email; } } class Users { private users: User[] = []; public add(user: User): boolean { if (this.users.some(user.hasSameEmail.bind(user))) { return false; } this.users.push(user); return true; } } class NotUniqueUsers extends Users { private collection: User[] = []; public add(user: User): boolean { this.collection.push(user); return true; } }  "},{"title":"Summary​","type":1,"pageTitle":"Liskov Substitution Principle (LSP)","url":"docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/#summary","content":"essence of LSP design entities so that their descendants do not conflict with the underlying behavior the behavior of inheritors should be expected for functions that use the base class design entities so that their descendants can be substituted for 1 another without changing the function that uses them the general interface should be such that in the classes that implement it, the preconditions are not stronger, and the postconditions are not weaker why contract programming is useful from LSP point of view contracts prevent descendants from developing behavior that contradicts the behavior of the underlying entity postconditions cannot be weakened in a subclass contracts define the behavior of the underlying entity that its descendants must follow preconditions cannot be strengthened in a subclass In case of not following LSP: Inheritance hierarchies will lead to confusion So, passing the subclass instance instead of base class into the method will result in a weird behavior of the existing code Unit tests for base class will never pass for subclasses "},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/13Trees/redBlackTree/typescriptExample","content":"","keywords":""},{"title":"utils​","type":1,"pageTitle":"TypeScript Example","url":"docs/interviewPrep/data_structures/13Trees/redBlackTree/typescriptExample#utils","content":"enum Colors { Red = 0, Black = 1, }  enum Compare { LessThan = -1, BiggerThan = 1, Equals = 0, } function compare&lt;T&gt;(a: T, b: T): number { if (a === b) { return Compare.Equals; } return a &lt; b ? Compare.LessThan : Compare.BiggerThan; }  "},{"title":"Red Black Node​","type":1,"pageTitle":"TypeScript Example","url":"docs/interviewPrep/data_structures/13Trees/redBlackTree/typescriptExample#red-black-node","content":"class RedBlackNode&lt;T&gt; extends Node&lt;T&gt; { left: RedBlackNode&lt;T&gt; = null; right: RedBlackNode&lt;T&gt; = null; parent: RedBlackNode&lt;T&gt; = null; color: Colors; // The red-black tree node has a special attribute of color constructor(public value: T) { super(value); this.color = Colors.Red; // The default color of the node is red } public isRed() { return this.color === Colors.Red; } public flipColor() { // solution 1 if (this.color === Colors.Red) { this.color = Colors.Black; } else { this.color = Colors.Red; } // solution 2: Bitwise operation inverts the color of the node // this.color = 1 ^ this.color; } }  "},{"title":"not refactored Red Black Tree example (with parent attribute)​","type":1,"pageTitle":"TypeScript Example","url":"docs/interviewPrep/data_structures/13Trees/redBlackTree/typescriptExample#not-refactored-red-black-tree-example-with-parent-attribute","content":"class RedBlackTree&lt;T&gt; extends BinarySearchTree&lt;T&gt; { protected root: RedBlackNode&lt;T&gt; = null; /** * Left left case: rotate right * * b a * / \\ / \\ * a e -&gt; rotationRight(b) -&gt; c b * / \\ / \\ * c d d e * * @param node Node&lt;T&gt; */ private rotationRight(node: RedBlackNode&lt;T&gt;) { const tmp = node.left; node.left = tmp.right; if (tmp.right &amp;&amp; tmp.right.value) { tmp.right.parent = node; } tmp.parent = node.parent; if (!node.parent) { this.root = tmp; } else { if (node === node.parent.left) { node.parent.left = tmp; } else { node.parent.right = tmp; } } tmp.right = node; node.parent = tmp; } /** * Right right case: rotate left * * a b * / \\ / \\ * c b -&gt; rotationLeft(a) -&gt; a e * / \\ / \\ * d e c d * * @param node Node&lt;T&gt; */ private rotationLeft(node: RedBlackNode&lt;T&gt;) { const tmp = node.right; node.right = tmp.left; if (tmp.left &amp;&amp; tmp.left.value) { tmp.left.parent = node; } tmp.parent = node.parent; if (!node.parent) { this.root = tmp; } else { if (node === node.parent.left) { node.parent.left = tmp; } else { node.parent.right = tmp; } } tmp.left = node; node.parent = tmp; } public insert(value: T) { // special case: first value if (this.root === null) { this.root = new RedBlackNode(value); this.root.color = Colors.Black; } else { const newNode = this.insertNode(this.root, value); this.fixTreeProperties(newNode); } } protected insertNode(node: RedBlackNode&lt;T&gt;, value: T): RedBlackNode&lt;T&gt; { if (compare(value, node.value) === Compare.LessThan) { if (node.left === null) { node.left = new RedBlackNode(value); node.left.parent = node; return node.left; } else { return this.insertNode(node.left, value); } } else if (node.right === null) { node.right = new RedBlackNode(value); node.right.parent = node; return node.right; } else { return this.insertNode(node.right, value); } } private fixTreeProperties(node: RedBlackNode&lt;T&gt;) { while ( node &amp;&amp; node.parent &amp;&amp; node.parent.color === Colors.Red &amp;&amp; node.color !== Colors.Black ) { let parent = node.parent; const grandParent = parent.parent; // case A if (grandParent &amp;&amp; grandParent.left === parent) { const uncle = grandParent.right; // case 1: uncle of node is also red - only recoloring if (uncle &amp;&amp; uncle.color === Colors.Red) { grandParent.color = Colors.Red; parent.color = Colors.Black; uncle.color = Colors.Black; node = grandParent; } else { // case 2: node is right child - left rotate if (node === parent.right) { this.rotationLeft(parent); node = parent; parent = node.parent; } // case 3: node is left child - right rotate this.rotationRight(grandParent); // swap color parent.color = Colors.Black; grandParent.color = Colors.Red; node = parent; } } else { // case B: parent is right child of grand parent const uncle = grandParent.left; // case 1: uncle is read - only recoloring if (uncle &amp;&amp; uncle.color === Colors.Red) { grandParent.color = Colors.Red; parent.color = Colors.Black; uncle.color = Colors.Black; node = grandParent; } else { // case 2: node is left child - left rotate if (node === parent.left) { this.rotationRight(parent); node = parent; parent = node.parent; } // case 3: node is right child - left rotate this.rotationLeft(grandParent); // swap color parent.color = Colors.Black; grandParent.color = Colors.Red; node = parent; } } } this.root.color = Colors.Black; } public getRoot() { return this.root; } }  "},{"title":"refactored Red Black Tree (without parent attribute)​","type":1,"pageTitle":"TypeScript Example","url":"docs/interviewPrep/data_structures/13Trees/redBlackTree/typescriptExample#refactored-red-black-tree-without-parent-attribute","content":"class RedBlackTree&lt;T&gt; extends BinarySearchTree&lt;T&gt; { protected root: RedBlackNode&lt;T&gt; = null; /** * Left left case: rotate right * Whether it is left-handed or right-handed, * the implementation is similar to the left-handed and right-handed AVL tree * * a c * / \\ / \\ * c b -&gt; rotateRight(a) -&gt; d a * / \\ / \\ * d e e b * * @param node Node&lt;T&gt; */ private rotateRight(node: RedBlackNode&lt;T&gt;): RedBlackNode&lt;T&gt; { const tmp = node.left; node.left = tmp.right; tmp.right = node; tmp.color = node.color; node.color = Colors.Red; return tmp; } /** * Right right case: rotate left * * b d * / \\ / \\ * a d -&gt; rotateLeft(b) -&gt; b e * / \\ / \\ * c e a c * * @param node Node&lt;T&gt; */ private rotateLeft(node: RedBlackNode&lt;T&gt;): RedBlackNode&lt;T&gt; { const tmp = node.right; node.right = tmp.left; tmp.left = node; tmp.color = node.color; node.color = Colors.Red; return tmp; } /** * @description: Insert element */ public insert(value: T) { this.root = this.insertNode(this.root, value); this.root.color = Colors.Black; } /** * @description: recursive method to add element */ protected insertNode(node: RedBlackNode&lt;T&gt;, value: T): RedBlackNode&lt;T&gt; { // Baseline condition, if inserted into a blank node, insert a red node if (node === null) { let node = new RedBlackNode(value); node.color = Colors.Red; return node; } if (compare(value, node.value) === Compare.LessThan) { node.left = this.insertNode(node.left, value); } else if (compare(value, node.value) === Compare.BiggerThan) { node.right = this.insertNode(node.right, value); } else { node.value = value; } return this.balance(node); } /** * @description: remove minimum element */ public deleteMin() { if (this.root) return; // If the left and right sides of the root node are black, set the root node to red if (!this.isRed(this.root.left) &amp;&amp; !this.isRed(this.root.right)) this.root.color = Colors.Red; // call recursive method that deletes the smallest value this.root = this.deleteMinNode(this.root); // Finally correct the root node color to black if (this.root) this.root.color = Colors.Black; } /** * @description: Recursive method to delete smallest element */ private deleteMinNode(node: RedBlackNode&lt;T&gt;): RedBlackNode&lt;T&gt; { if (node.left === null) return null; // If the left and right nodes are black, call moveRedLeft if (!this.isRed(node.left) &amp;&amp; !this.isRed(node.left.left)) node = this.moveRedLeft(node); // recursively call to find the smallest value after deletion node.left = this.deleteMinNode(node.left); // Balance nodes after each recursion return this.balance(node); } /** * @description: remove max element */ public deleteMax() { if (!this.root) return; // If all children of the root node are black, set the root node to red if (!this.isRed(this.root.left) &amp;&amp; !this.isRed(this.root.right)) this.root.color = Colors.Red; // Call the recursive method that deletes the largest node and assign to root this.root = this.deleteMaxNode(this.root); // Correct the root node color to black if (this.root) this.root.color = Colors.Black; } /** * @description: Recursive method to delete largest element */ private deleteMaxNode(node: RedBlackNode&lt;T&gt;): RedBlackNode&lt;T&gt; { // When the left child node is red, rotate right if (this.isRed(node.left)) node = this.rotateRight(node); if (node.right === null) return null; // If the left and right nodes are black, call moveRedRight if (!this.isRed(node.right) &amp;&amp; !this.isRed(node.right.left)) node = this.moveRedRight(node); // recursively call to find max value after deletion node.right = this.deleteMaxNode(node.right); // balance nodes after each recursion return this.balance(node); } /** * @description: delete the specified element */ public delete(value: T) { // return directly if there is no node if (!this.search(value)) return; // If all children of the root node are black, set the root node to red if (!this.isRed(this.root.left) &amp;&amp; !this.isRed(this.root.right)) this.root.color = Colors.Red; // call recursive method to delete node this.root = this.deleteNode(this.root, value); // Correct the root node color to black if (this.root) this.root.color = Colors.Black; } /** * @description: Recursive method to delete specified element */ private deleteNode(node: RedBlackNode&lt;T&gt;, value: T): RedBlackNode&lt;T&gt; { // if the value is smaller than the current node if (compare(value, node.value) === Compare.LessThan) { if (!this.isRed(node.left) &amp;&amp; !this.isRed(node.left?.left)) node = this.moveRedLeft(node); // continue recursion node.left = this.deleteNode(node.left, value); // if value is not less than current node } else { if (this.isRed(node.left)) node = this.rotateRight(node); // The corresponding node is found and the right child node is empty if (compare(value, node.value) === Compare.Equals &amp;&amp; node.right === null) return null; // If the left and right nodes are black, call moveRedRight if (!this.isRed(node.right) &amp;&amp; !this.isRed(node.right?.left)) node = this.moveRedRight(node); // The corresponding node is found, and the right child node is not empty if (compare(value, node.value) === Compare.Equals) { const x = this.minNode(node.right); node.value = x.value; node.right = this.deleteMinNode(node.right); // if not found, continue recursion } else { // If the corresponding node is not found, continue recursion node.right = this.deleteNode(node.right, value); } } // balance nodes after each recursion return this.balance(node); } /** * @description: return root node */ public getRoot(): RedBlackNode&lt;T&gt; { return this.root; } /** * @description: fix node color */ private flipColors(node: RedBlackNode&lt;T&gt;) { node.flipColor(); node.left.flipColor(); node.right.flipColor(); } /** * @description: Balanced tree */ private balance(node: RedBlackNode&lt;T&gt;): RedBlackNode&lt;T&gt; { // The core algorithm generates a left-leaning red-black tree through three lines of judgment // Right red and left black, rotate left to rotate the red node to the left if (this.isRed(node.right) &amp;&amp; !this.isRed(node.left)) node = this.rotateLeft(node); // Left red and left left are also red, rotate right if (this.isRed(node.left) &amp;&amp; this.isRed(node.left?.left)) node = this.rotateRight(node); // Whether it is rotated out or inserted naturally, as long as the two reds are siblings, they will change color and move the red one layer up if (this.isRed(node.left) &amp;&amp; this.isRed(node.right)) this.flipColors(node); return node; } /** * @description: If the node is red and the left and right are black, make the left or left child node red */ private moveRedLeft(node: RedBlackNode&lt;T&gt;): RedBlackNode&lt;T&gt; { this.flipColors(node); if (this.isRed(node.right.left)) { node.right = this.rotateRight(node.right); node = this.rotateLeft(node); this.flipColors(node); } return node; } /** * @description: If the node is red, and the node's right and right-left are black, make the node's right or right child red */ private moveRedRight(node: RedBlackNode&lt;T&gt;): RedBlackNode&lt;T&gt; { this.flipColors(node); if (this.isRed(node.left.left)) { node = this.rotateLeft(node); this.flipColors(node); } return node; } /** * @description: Determine if the node is red */ private isRed(node: RedBlackNode&lt;T&gt;) { // If empty, assume as black // This is very important, equivalent to all black empty nodes at the bottom of the tree if (!node) { return false; } return node.isRed(); } }  "},{"title":"TypeScript","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/typescript/","content":"","keywords":""},{"title":"Violate ISP​","type":1,"pageTitle":"TypeScript","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/typescript/#violate-isp","content":"// this violates the interface segregation principle // because it is being used by multiple classes that does not requires all of it interface Entity { name: string; attackDamage: number; health: number; move(): void | null; attack(targetEntity: Entity | undefined): void | null; takeDamage(amount: number): void | null; } // passes the interface segregation principle class Character implements Entity { name: string; attackDamage: number; health: number; constructor(name: string, attackDamage: number, health: number) { this.name = name; this.attackDamage = attackDamage; this.health = health; } move(): void { console.log(`${this.name} moved`); } attack(targetEntity: Entity | undefined): void { console.log( `${this.name} attacked ${targetEntity.name} for ${this.attackDamage} damage` ); targetEntity.takeDamage(this.attackDamage); } takeDamage(amount: number | undefined): void { this.health -= amount; console.log(`${this.name} has ${this.health} health remaining`); } } class Wall implements Entity { name: string; // violates the interface segregation principle attackDamage: number; health: number; constructor(name: string, health: number) { this.name = name; this.attackDamage = 0; this.health = health; } // violates the interface segregation principle move(): null { return null; } // violates the interface segregation principle attack(): null { return null; } takeDamage(amount: number): void { this.health -= amount; console.log(`${this.name} has ${this.health} health remaining`); } } class Turret implements Entity { name: string; attackDamage: number; // violates the interface segregation principle health: number; constructor(name: string, attackDamage: number) { this.name = name; this.attackDamage = attackDamage; this.health = 0; } // violates the interface segregation principle move(): null { return null; } attack(targetEntity: Entity): void { console.log( `${this.name} attacked ${targetEntity.name} for ${this.attackDamage} damage` ); targetEntity.takeDamage(this.attackDamage); } // violates the interface segregation principle takeDamage(): null { return null; } } const turret = new Turret(&quot;turret&quot;, 5); const character = new Character(&quot;Character&quot;, 3, 100); const wall = new Wall(&quot;Wall&quot;, 200); turret.attack(character); character.move(); character.attack(wall);  "},{"title":"Pass ISP​","type":1,"pageTitle":"TypeScript","url":"docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/typescript/#pass-isp","content":"interface Entity { name: string; } interface Mover { move(): void; } interface Attacker { attackDamage: number; attack(targetEntity: any): void; } interface HasHealth { health: number; takeDamage(amount: number): void; } class Character implements Entity, Mover, Attacker, HasHealth { name: string; attackDamage: number; health: number; constructor(name: string, attackDamage: number, health: number) { this.name = name; this.attackDamage = attackDamage; this.health = health; } move(): void { console.log(`${this.name} moved`); } attack(targetEntity: any): void { console.log( `${this.name} attacked ${targetEntity.name} for ${this.attackDamage} damage` ); targetEntity.takeDamage(this.attackDamage); } takeDamage(amount: number): void { this.health -= amount; console.log(`${this.name} has ${this.health} health remaining`); } } class Wall implements Entity, HasHealth { name: string; health: number; constructor(name: string, health: number) { this.name = name; this.health = health; } takeDamage(amount: number): void { this.health -= amount; console.log(`${this.name} has ${this.health} health remaining`); } } class Turret implements Entity, Attacker { name: string; attackDamage: number; constructor(name: string, attackDamage: number) { this.name = name; this.attackDamage = attackDamage; } attack(targetEntity: any): void { console.log( `${this.name} attacked ${targetEntity.name} for ${this.attackDamage} damage` ); targetEntity.takeDamage(this.attackDamage); } } const turret = new Turret(&quot;Turret&quot;, 5); const character = new Character(&quot;Character&quot;, 3, 100); const wall = new Wall(&quot;Wall&quot;, 200); turret.attack(character); character.move(); character.attack(wall);  "},{"title":"You Aren't Gonna Need It (YAGNI)","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/YAGNI/","content":"","keywords":""},{"title":"Why YAGNI?​","type":1,"pageTitle":"You Aren't Gonna Need It (YAGNI)","url":"docs/interviewPrep/design_principles/YAGNI/#why-yagni","content":"Any work that's only used for a feature that's needed tomorrow, means losing effort from features that need to be done for the current iteration Creeping featurism leads to code bloat the software will becomes larger and much more complicated In other words The point being that within an agile development framework, you should only focus on your current work iteration and not in the ones to come This is because even though it might sound tempting to work ahead of time and deliver more functionality that you were expecting, the changing nature of the agile workflow makes the future unstable by unstable, It means that given the short-iterations that characterize this methodology, you can receive early feedback, potentially completely changing the future of your project and rendering that feature you delivered without needing "},{"title":"When not to practice YAGNI​","type":1,"pageTitle":"You Aren't Gonna Need It (YAGNI)","url":"docs/interviewPrep/design_principles/YAGNI/#when-not-to-practice-yagni","content":"Learning something new Evaluate a new technology exclusively to gain the time back later and minimize the risk of losing more time by making the wrong decision Current design decisions based on future needs Don't sabotage your efforts because you think they violate YANGIInstead, make the future-proof design decision, but only implement enough to fulfill the current need Abstracting external dependencies Take time to abstract these dependencies will avoid rework and decrease the complexity Testing, Security, Scale, and Business Requirements YAGNI is not a free-pass on writing tests, secure code, considering scale, or business requirements "},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/python/","content":"","keywords":""},{"title":"Violate SRP​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/python/#violate-srp","content":"class CalorieTracker: def __init__(self, max_calories): self.max_calories = max_calories self.current_calories = 0 # 1st reason to change: how we track the calories def track_calories(self, calorie_count): self.current_calories += calorie_count if self.current_calories &gt; self.max_calories: self.log_calorie_surplus() # 2nd reason to change: how we log the calories def log_calorie_surplus(self): print(&quot;Max calories exceeded&quot;) calorie_tracker = CalorieTracker(2000) calorie_tracker.track_calories(500) calorie_tracker.track_calories(1000) calorie_tracker.track_calories(700)  "},{"title":"Pass SRP​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/python/#pass-srp","content":"def log_message(message): print(message)  from logger import log_message class CalorieTracker: def __init__(self, max_calories): self.max_calories = max_calories self.current_calories = 0 def track_calories(self, calorie_count): self.current_calories += calorie_count if self.current_calories &gt; self.max_calories: log_message(&quot;Max calories exceeded&quot;) calorie_tracker = CalorieTracker(2000) calorie_tracker.track_calories(500) calorie_tracker.track_calories(1000) calorie_tracker.track_calories(700)  "},{"title":"Single Responsibility Principle (SRP)","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/","content":"","keywords":""},{"title":"Bad Example​","type":1,"pageTitle":"Single Responsibility Principle (SRP)","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/#bad-example","content":"Suppose we have TradeProcessor class, which purpose is to retrieve trade operations from one data source and transfer them to another TradeProcessor class responsibilities are: read each line from the Stream parameterparse fields from each line and store them in an array of TradeRecord instances with validationiterate over an array of TradeRecord instances and save them to the database class TradeProcessor { public process(stream: Stream) { const connection = new DBConnection(/* */); const reader: StreamReader = new StreamReader(stream); const lines: string[] = reader.readLines(); lines .reduce((records: TradeRecord[], line: string) =&gt; { const fields = line.split(&quot;,&quot;); if (fields.length !== 2) { /* handle format validation error */ } const [amount, price] = [ parseInt(fields[1], 10), parseInt(fields[2], 10), ]; if (amount &lt; 0 || price &lt; 0) { /* handle trade validation error */ } return [...records, new TradeRecord(amount, price)]; }, []) .forEach((trade: TradeRecord) =&gt; { connection.save(trade); }); connection.close(); } }  SRP states that class should have only one reason to change However, the reality of TradeProcessor is that it will change under the following circumstances: You need to change the data source from the stream to the REST APIThe data format needs to be changedValidation rules have changedWhen the procedure for saving data to the database changes for example, instead of mapping incoming parameters to a database table, we will save them in several tables with foreign keys Now you need to ask &quot;Who is to blame for the changes?&quot; Having answered it, you will divide the requirements into three groups of responsibilities What to do next? Separate the interfaces and as a result make the class follow SRPSo, the first step in refactoring TradeProcessor is to create interfaces that will be used to perform three high-level tasks: readingprocessingstoring trade data In accordance with the SRP, three main responsibilities will be carried out by three different classes You may ask: What if we already have clients who use TradeProcessor in its previous implementation? This is a valid question, and ideally you should already have an interface or abstract processor class allocatedWe just add a new processor implementation in the form of an adapter composing the new version and adjusting it to the old interfaceIf we do not have such abstraction, then we can implement the adapter directly in the current processor implementation, declare it deprecated and remove it in the next version of the application/library  "},{"title":"Good Example​","type":1,"pageTitle":"Single Responsibility Principle (SRP)","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/#good-example","content":"class TradeProcessor { constructor(private validator: Validator, private storage: Storage) {} public process(trades: DataProvider) { const validTrades = trades.reduce( (validTrades: TradeRecord[], trade: TradeRecord) =&gt; { if (!this.validator.isValid(trade)) { /* handle invalid data */ } return [...validTrades, trade]; }, [] ); this.storage.persist(validTrades); } }  "},{"title":"Summary​","type":1,"pageTitle":"Single Responsibility Principle (SRP)","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/#summary","content":"essence of SRP is to combine code that changes for 1 reason and separate the code that changes for another the principle suggests that we draw boundaries between modules so that a change in business rules affects as few modules as possible, ideally one benefits of SRP encourages the creation of modules that change for only 1 reason it helps to limit the impact of these changes and control the complexity of the program the principle allows you to reduce the amount of code (modules) that needs to be changed when changing business rules "},{"title":"When to use?​","type":1,"pageTitle":"Single Responsibility Principle (SRP)","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/#when-to-use","content":"Your module is constantly changing and the requirements for changes come from different roles in your projectThe actions in the module do not correlate with each otherThe logic in the module is too complex to understand and / or test "},{"title":"How to apply?​","type":1,"pageTitle":"Single Responsibility Principle (SRP)","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/#how-to-apply","content":"Combine things that change for one reason. Separate things that change for different reasonsIsolate changes, separate the component parts of the module logicallyReduce dependenciesApply the principle only when it matters. Do not introduce extra dependencies "},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/cSharp/","content":"C# Example /* Open Closed Principle - parts of the system or in the subsystems have to be open for extensions - so you should be able to extend the functionality of a filter - but should be closed for modification - shouldn't have to go back into the filter to modify things - instead, to add functionality, should make new classes, implement ISpecifications, and feed those into something that has already been made and something that have already been shipped - should not reship the functionality of the filter to customers, but can ship additional modules, which implements an ISpecification and make use of better filter - the reason for doing this is because the code might already been shipped to the client */ using System.Collections.Generic; // different colors of a product public enum Color { Red, Green, Blue } public enum Size { Small, Medium, Large, Huge } public class Product { public string name; public Color color; public Size size; public Product(string name, Color color, Size size) { if (name == null) throw new System.ArgumentNullException(paramName: nameof(name)); this.name = name; this.color = color; this.size = size; } } // filter products on website // NOT a good filter, do not use this class public class ProductFilter { public IEnumerable&lt;Product&gt; FilterBySize(IEnumerable&lt;Product&gt; products, Size size) { foreach (var p in products) { if (p.size == size) yield return p; } } // this needs to be added if not implemented, which is not good in this case // by adding more methods here, it breaks the open closed principle public IEnumerable&lt;Product&gt; FilterByColor(IEnumerable&lt;Product&gt; products, Color color) { foreach (var p in products) { if (p.color == color) yield return p; } } public static IEnumerable&lt;Product&gt; FilterBySizeAndColor(IEnumerable&lt;Product&gt; products, Size size, Color color) { foreach (var p in products) if (p.size == size &amp;&amp; p.color == color) yield return p; } // state space explosion } // SOLUTION, use inheritance and interfaces // implement by using the Specification pattern public interface ISpecification&lt;T&gt; { bool IsSatisfied(T t); // check if criteria is statified } // make filter interface dynamic public interface IFilter&lt;T&gt; { IEnumerable&lt;T&gt; Filter(IEnumerable&lt;T&gt; items, ISpecification&lt;T&gt; spec); } public class ColorSpecification : ISpecification&lt;Product&gt; { private Color color; public ColorSpecification(Color color) { this.color = color; } public bool IsSatisfied(Product p) { return p.color == color; } } public class SizeSpecification : ISpecification&lt;Product&gt; { private Size size; public SizeSpecification(Size size) { this.size = size; } public bool IsSatisfied(Product p) { return p.size == size; } } // combinator public class AndSpecification&lt;T&gt; : ISpecification&lt;T&gt; { private ISpecification&lt;T&gt; first, second; public AndSpecification(ISpecification&lt;T&gt; first, ISpecification&lt;T&gt; second) { this.first = first ?? throw new System.ArgumentNullException(paramName: nameof(first)); this.second = second ?? throw new System.ArgumentNullException(paramName: nameof(second)); } public bool IsSatisfied(T t) { return first.IsSatisfied(t) &amp;&amp; second.IsSatisfied(t); } } public class BetterProductFilter : IFilter&lt;Product&gt; { public IEnumerable&lt;Product&gt; Filter(IEnumerable&lt;Product&gt; items, ISpecification&lt;Product&gt; spec) { foreach (var i in items) if (spec.IsSatisfied(i)) yield return i; } } public class Program { public static void Main() { Product apple = new Product(&quot;Apple&quot;, Color.Green, Size.Small); Product tree = new Product(&quot;Tree&quot;, Color.Green, Size.Large); Product house = new Product(&quot;House&quot;, Color.Blue, Size.Large); Product[] products = {apple, tree, house}; // not a good filter ProductFilter pf = new ProductFilter(); System.Console.WriteLine(&quot;Green products (old):&quot;); foreach (var p in pf.FilterByColor(products, Color.Green)) System.Console.WriteLine($&quot; - {p.name} is green&quot;); // better filter BetterProductFilter bf = new BetterProductFilter(); System.Console.WriteLine(&quot;Green products (new):&quot;); foreach (var p in bf.Filter(products, new ColorSpecification(Color.Green))) System.Console.WriteLine($&quot; - {p.name} is green&quot;); System.Console.WriteLine(&quot;Large products&quot;); foreach (var p in bf.Filter(products, new SizeSpecification(Size.Large))) System.Console.WriteLine($&quot; - {p.name} is large&quot;); System.Console.WriteLine(&quot;Large blue items&quot;); foreach (var p in bf.Filter(products, new AndSpecification&lt;Product&gt;(new ColorSpecification(Color.Blue), new SizeSpecification(Size.Large))) ) { System.Console.WriteLine($&quot; - {p.name} is big and blue&quot;); } } } ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/javascript/","content":"","keywords":""},{"title":"Violate SRP​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/javascript/#violate-srp","content":"// this violates SRP because this class has 2 reasons to change class CalorieTracker { constructor(maxCalories) { this.maxCalories = maxCalories; this.currentCalories = 0; } // 1st reason to change: how we track the calories trackCalories(calorieCount) { this.currentCalories += calorieCount; if (this.currentCalories &gt; this.maxCalories) { this.logCalorieSurplus(); } } // 2nd reason to change: how we log the calories logCalorieSurplus() { console.log(&quot;Max calories exceeded&quot;); } } const calorieTracker = new CalorieTracker(2000); calorieTracker.trackCalories(500); calorieTracker.trackCalories(1000); calorieTracker.trackCalories(700);  "},{"title":"Pass SRP​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/javascript/#pass-srp","content":"function logMessage(message) { console.log(message); } export default logMessage;  import logMessage from &quot;./logger.js&quot;; class CalorieTracker { constructor(maxCalories) { this.maxCalories = maxCalories; this.currentCalories = 0; } trackCalories(calorieCount) { this.currentCalories += calorieCount; if (this.currentCalories &gt; this.maxCalories) { logMessage(&quot;Max calories exceeded&quot;); } } } const calorieTracker = new CalorieTracker(2000); calorieTracker.trackCalories(500); calorieTracker.trackCalories(1000); calorieTracker.trackCalories(700);  "},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/typescript/","content":"","keywords":""},{"title":"Violate SRP​","type":1,"pageTitle":"TypeScript Example","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/typescript/#violate-srp","content":"// this violates SRP because this class has 2 reasons to change class CalorieTracker { private maxCalories: number; private currentCalories: number; public constructor(maxCalories: number) { this.maxCalories = maxCalories; this.currentCalories = 0; } // 1st reason to change: how we track the calories public trackCalories(calorieCount: number): void { this.currentCalories += calorieCount; if (this.currentCalories &gt; this.maxCalories) { this.logCalorieSurplus(); } } // 2nd reason to change: how we log the calories public logCalorieSurplus(): void { console.log(&quot;Max calories exceeded&quot;); } } const calorieTracker = new CalorieTracker(2000); calorieTracker.trackCalories(500); calorieTracker.trackCalories(1000); calorieTracker.trackCalories(700);  "},{"title":"Pass SRP​","type":1,"pageTitle":"TypeScript Example","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/typescript/#pass-srp","content":"function logMessage(message) { console.log(message); } export default logMessage;  import logMessage from &quot;./logger.js&quot;; class CalorieTracker { private maxCalories: number; private currentCalories: number; public constructor(maxCalories: number) { this.maxCalories = maxCalories; this.currentCalories = 0; } trackCalories(calorieCount: number) { this.currentCalories += calorieCount; if (this.currentCalories &gt; this.maxCalories) { logMessage(&quot;Max calories exceeded&quot;); } } } const calorieTracker = new CalorieTracker(2000); calorieTracker.trackCalories(500); calorieTracker.trackCalories(1000); calorieTracker.trackCalories(700);  "},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/cSharp/","content":"C# Example /* Single Responsibility Principle - A good advice on how to build systems - it specifies that any particular class should have just a single reason to change - the whole point of this principle is that a typical class is responsible for 1 thing and has 1 reason to change */ using System; using System.Collections.Generic; using System.IO; using System.Diagnostics; // this example violates the Single Responsibility Principle as the class has too many responsibilities public class Journal { private readonly List&lt;string&gt; entries = new List&lt;string&gt;(); private static int count = 0; public int AddEntry(string text) { entries.Add($&quot;{++count}: {text}&quot;); return count; // memento pattern } public void RemoveEntry(int index) { entries.RemoveAt(index); // not a stable way of removing entries as once removed, indices of other elements become invalid } public override string ToString() { return string.Join(Environment.NewLine, entries); } /* // breaks single responsibility principle public void Save(string filename) { File.WriteAllText(filename, ToString()); } public static Journal Load(string filename) {} public void Load(Uri uri) {} */ } // solution is to separate the persistence to a different class public class Persistence { public void SaveToFile(Journal j, string filename, bool overwrite = false) { if (overwrite || !File.Exists(filename)) File.WriteAllText(filename, j.ToString()); } } public class Program { public static void Main() { var j = new Journal(); j.AddEntry(&quot;I cried today!&quot;); j.AddEntry(&quot;I ate a bug2!&quot;); Console.WriteLine(j); var p = new Persistence(); var filename = @&quot;./journal.txt&quot;; // mac file format p.SaveToFile(j, filename, true); // create and save file, overwrite if exist Process.Start(filename); // open file } } ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/javascript/","content":"","keywords":""},{"title":"Violate OCP​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/javascript/#violate-ocp","content":"potential issues: if later, you want to add a new option or new question type to the quiz e.g.: a range of values type refer to Violate OCP Extended function printQuiz(questions) { questions.forEach((question) =&gt; { console.log(question.description); switch (question.type) { case &quot;boolean&quot;: console.log(&quot;1. True&quot;); console.log(&quot;2.False&quot;); break; case &quot;multipleChoice&quot;: question.options.forEach((option, index) =&gt; { console.log(`${index + 1}. ${option}`); }); break; case &quot;text&quot;: console.log(&quot;Answer: _______________&quot;); break; default: console.log(&quot;&quot;); break; } }); } const questions = [ { type: &quot;boolean&quot;, description: &quot;This video is useful.&quot;, }, { type: &quot;multipleChoice&quot;, description: &quot;What is your favorite language?&quot;, options: [&quot;CSS&quot;, &quot;HTML&quot;, &quot;JS&quot;, &quot;Python&quot;], }, { type: &quot;text&quot;, description: &quot;Describe your favorite JS feature&quot;, }, ]; printQuiz(questions);  "},{"title":"Violate OCP Extended​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/javascript/#violate-ocp-extended","content":"function printQuiz(questions) { // this allows us to extend new types, which passes the open portion of the open-closed principle // when we add new features, it automatically extends the new questions and works // thus, modification of the open portion is not required questions.forEach((question) =&gt; { console.log(question.description); switch (question.type) { case &quot;boolean&quot;: console.log(&quot;1. True&quot;); console.log(&quot;2.False&quot;); break; case &quot;multipleChoice&quot;: question.options.forEach((option, index) =&gt; { console.log(`${index + 1}. ${option}`); }); break; case &quot;text&quot;: console.log(&quot;Answer: _______________&quot;); break; // this violates the closed portion of the open-closed principle // this function should be closed and not allowed for modifications // it should just work when new features are extended case &quot;range&quot;: console.log(&quot;Minimum: ______________&quot;); console.log(&quot;Maximum: ______________&quot;); break; default: console.log(&quot;&quot;); break; } }); } const questions = [ { type: &quot;boolean&quot;, description: &quot;This video is useful.&quot;, }, { type: &quot;multipleChoice&quot;, description: &quot;What is your favorite language?&quot;, options: [&quot;CSS&quot;, &quot;HTML&quot;, &quot;JS&quot;, &quot;Python&quot;], }, { type: &quot;text&quot;, description: &quot;Describe your favorite JS feature&quot;, }, // this is ok to modify as it is just extending new feature { type: &quot;range&quot;, description: &quot;What is the speed limit in your city?&quot;, }, ]; printQuiz(questions);  "},{"title":"Pass OCP​","type":1,"pageTitle":"JavaScript Example","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/javascript/#pass-ocp","content":"// Polymorphic open-closed principle class Question { constructor(description) { this.description = description; } printQuestionChoices() { console.log(&quot;&quot;); } } class BooleanQuestion extends Question { constructor(description) { super(description); } printQuestionChoices() { console.log(&quot;1. True&quot;); console.log(&quot;2. False&quot;); } } class MultipleChoiceQuestion extends Question { constructor(description, options) { super(description); this.options = options; } printQuestionChoices() { this.options.forEach((option, index) =&gt; { console.log(`${index + 1}. ${option}`); }); } } class TextQuestion extends Question { constructor(description) { super(description); } printQuestionChoices() { console.log(&quot;Answer: _______________&quot;); } } class RangeQuestion extends Question { constructor(description) { super(description); } printQuestionChoices() { console.log(&quot;Minimum: ______________&quot;); console.log(&quot;Maximum: ______________&quot;); } } // this is open to be extended // closed for modification as we do not need to touch this function function printQuiz(questions) { questions.forEach((question) =&gt; { console.log(question.description); question.printQuestionChoices(); }); } // only need to extend new features here const questions = [ new BooleanQuestion(&quot;This video is useful.&quot;), new MultipleChoiceQuestion(&quot;What is your favorite language?&quot;, [ &quot;CSS&quot;, &quot;HTML&quot;, &quot;JS&quot;, &quot;Python&quot;, ]), new TextQuestion(&quot;Describe your favorite JS feature.&quot;), new RangeQuestion(&quot;What is the speed limit in your city?&quot;), ]; printQuiz(questions);  "},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/python/","content":"","keywords":""},{"title":"Violate OCP​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/python/#violate-ocp","content":"potential issues: if later, you want to add a new option or new question type to the quiz e.g.: a range of values type refer to Violate OCP Extended def print_quiz(questions): for question in questions: print(question[&quot;description&quot;]) if question[&quot;type&quot;] == &quot;boolean&quot;: print(&quot;1. True&quot;) print(&quot;2.False&quot;) elif question[&quot;type&quot;] == &quot;multipleChoice&quot;: for index, option in enumerate(question[&quot;options&quot;]): print(f&quot;{index + 1}. {option}&quot;) elif question[&quot;type&quot;] == &quot;text&quot;: print(&quot;Answer: _______________&quot;) else: print(&quot;&quot;) questions = [ { &quot;type&quot;: &quot;boolean&quot;, &quot;description&quot;: &quot;This video is useful.&quot;, }, { &quot;type&quot;: &quot;multipleChoice&quot;, &quot;description&quot;: &quot;What is your favorite language?&quot;, &quot;options&quot;: [&quot;CSS&quot;, &quot;HTML&quot;, &quot;JS&quot;, &quot;Python&quot;], }, { &quot;type&quot;: &quot;text&quot;, &quot;description&quot;: &quot;Describe your favorite JS feature&quot;, }, ] print_quiz(questions)  "},{"title":"Violate OCP Extended​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/python/#violate-ocp-extended","content":"def print_quiz(questions): # this allows us to extend new types, which passes the open portion of the open-closed principle # when we add new features, it automatically extends the new questions and works # thus, modification of the open portion is not required for question in questions: print(question[&quot;description&quot;]) if question[&quot;type&quot;] == &quot;boolean&quot;: print(&quot;1. True&quot;) print(&quot;2.False&quot;) elif question[&quot;type&quot;] == &quot;multipleChoice&quot;: for index, option in enumerate(question[&quot;options&quot;]): print(f&quot;{index + 1}. {option}&quot;) elif question[&quot;type&quot;] == &quot;text&quot;: print(&quot;Answer: _______________&quot;) # this violates the closed portion of the open-closed principle # this function should be closed and not allowed for modifications # it should just work when new features are extended elif question[&quot;type&quot;] == &quot;range&quot;: print(&quot;Minimum: ______________&quot;) print(&quot;Maximum: ______________&quot;) else: print(&quot;&quot;) questions = [ { &quot;type&quot;: &quot;boolean&quot;, &quot;description&quot;: &quot;This video is useful.&quot;, }, { &quot;type&quot;: &quot;multipleChoice&quot;, &quot;description&quot;: &quot;What is your favorite language?&quot;, &quot;options&quot;: [&quot;CSS&quot;, &quot;HTML&quot;, &quot;JS&quot;, &quot;Python&quot;], }, { &quot;type&quot;: &quot;text&quot;, &quot;description&quot;: &quot;Describe your favorite JS feature&quot;, }, # this is ok to modify as it is just extending new feature { &quot;type&quot;: &quot;range&quot;, &quot;description&quot;: &quot;What is the speed limit in your city?&quot;, }, ] print_quiz(questions)  "},{"title":"Pass OCP​","type":1,"pageTitle":"Python Example","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/python/#pass-ocp","content":"# Polymorphic open-closed principle class Question: def __init__(self, description): self.description = description def print_question_choices(self): print(&quot;&quot;) class BooleanQuestion(Question): def __init__(self, description): super().__init__(description) def print_question_choices(self): print(&quot;1. True&quot;) print(&quot;2. False&quot;) class MultipleChoiceQuestion(Question): def __init__(self, description, options): super().__init__(description) self.options = options def print_question_choices(self): for index, option in enumerate(self.options): print(f&quot;{index + 1}. {option}&quot;) class TextQuestion(Question): def __init__(self, description): super().__init__(description) def print_question_choices(self): print(&quot;Answer: _______________&quot;) class RangeQuestion(Question): def __init__(self, description): super().__init__(description) def print_question_choices(self): print(&quot;Minimum: ______________&quot;) print(&quot;Maximum: ______________&quot;) # this is open to be extended # closed for modification as we do not need to touch this function def print_quiz(questions): for question in questions: print(question.description) question.print_question_choices() # only need to extend new features here questions = [ BooleanQuestion(&quot;This video is useful.&quot;), MultipleChoiceQuestion( &quot;What is your favorite language?&quot;, [ &quot;CSS&quot;, &quot;HTML&quot;, &quot;JS&quot;, &quot;Python&quot;, ], ), TextQuestion(&quot;Describe your favorite JS feature.&quot;), RangeQuestion(&quot;What is the speed limit in your city?&quot;), ] print_quiz(questions)  "},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/typescript/","content":"","keywords":""},{"title":"Violate OCP​","type":1,"pageTitle":"TypeScript Example","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/typescript/#violate-ocp","content":"potential issues: if later, you want to add a new option or new question type to the quiz e.g.: a range of values type refer to Violate OCP Extended function printQuiz(questions) { questions.forEach((question) =&gt; { console.log(question.description); switch (question.type) { case &quot;boolean&quot;: console.log(&quot;1. True&quot;); console.log(&quot;2.False&quot;); break; case &quot;multipleChoice&quot;: question.options.forEach((option, index) =&gt; { console.log(`${index + 1}. ${option}`); }); break; case &quot;text&quot;: console.log(&quot;Answer: _______________&quot;); break; default: console.log(&quot;&quot;); break; } }); } const questions = [ { type: &quot;boolean&quot;, description: &quot;This video is useful.&quot;, }, { type: &quot;multipleChoice&quot;, description: &quot;What is your favorite language?&quot;, options: [&quot;CSS&quot;, &quot;HTML&quot;, &quot;JS&quot;, &quot;Python&quot;], }, { type: &quot;text&quot;, description: &quot;Describe your favorite JS feature&quot;, }, ]; printQuiz(questions);  "},{"title":"Violate OCP Extended​","type":1,"pageTitle":"TypeScript Example","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/typescript/#violate-ocp-extended","content":"function printQuiz(questions) { // this allows us to extend new types, which passes the open portion of the open-closed principle // when we add new features, it automatically extends the new questions and works // thus, modification of the open portion is not required questions.forEach((question) =&gt; { console.log(question.description); switch (question.type) { case &quot;boolean&quot;: console.log(&quot;1. True&quot;); console.log(&quot;2.False&quot;); break; case &quot;multipleChoice&quot;: question.options.forEach((option, index) =&gt; { console.log(`${index + 1}. ${option}`); }); break; case &quot;text&quot;: console.log(&quot;Answer: _______________&quot;); break; // this violates the closed portion of the open-closed principle // this function should be closed and not allowed for modifications // it should just work when new features are extended case &quot;range&quot;: console.log(&quot;Minimum: ______________&quot;); console.log(&quot;Maximum: ______________&quot;); break; default: console.log(&quot;&quot;); break; } }); } const questions = [ { type: &quot;boolean&quot;, description: &quot;This video is useful.&quot;, }, { type: &quot;multipleChoice&quot;, description: &quot;What is your favorite language?&quot;, options: [&quot;CSS&quot;, &quot;HTML&quot;, &quot;JS&quot;, &quot;Python&quot;], }, { type: &quot;text&quot;, description: &quot;Describe your favorite JS feature&quot;, }, // this is ok to modify as it is just extending new feature { type: &quot;range&quot;, description: &quot;What is the speed limit in your city?&quot;, }, ]; printQuiz(questions);  "},{"title":"Pass OCP​","type":1,"pageTitle":"TypeScript Example","url":"docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/typescript/#pass-ocp","content":"interface QuestionInterface { description: string; printQuestionChoices(): void; } class BooleanQuestion implements QuestionInterface { description: string; constructor(description: string) { this.description = description; } printQuestionChoices() { console.log(&quot;1. True&quot;); console.log(&quot;2. False&quot;); } } class MultipleChoiceQuestion implements QuestionInterface { description: string; options: string[]; constructor(description: string, options: string[]) { this.description = description; this.options = options; } printQuestionChoices() { this.options.forEach((option, index) =&gt; { console.log(`${index + 1}. ${option}`); }); } } class TextQuestion implements QuestionInterface { description: string; constructor(description: string) { this.description = description; } printQuestionChoices() { console.log(&quot;Answer: _______________&quot;); } } class RangeQuestion implements QuestionInterface { description: string; constructor(description: string) { this.description = description; } printQuestionChoices() { console.log(&quot;Minimum: ______________&quot;); console.log(&quot;Maximum: ______________&quot;); } } // this is open to be extended // closed for modification as we do not need to touch this function function printQuiz(questions: QuestionInterface[]) { questions.forEach((question) =&gt; { console.log(question.description); question.printQuestionChoices(); }); } // only need to extend new features here const questions: QuestionInterface[] = [ new BooleanQuestion(&quot;This video is useful.&quot;), new MultipleChoiceQuestion(&quot;What is your favorite language?&quot;, [ &quot;CSS&quot;, &quot;HTML&quot;, &quot;JS&quot;, &quot;Python&quot;, ]), new TextQuestion(&quot;Describe your favorite JS feature.&quot;), new RangeQuestion(&quot;What is the speed limit in your city?&quot;), ]; printQuiz(questions);  "},{"title":"Chain of Responsibility","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/","content":"","keywords":""},{"title":"When to use​","type":1,"pageTitle":"Chain of Responsibility","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/#when-to-use","content":"when your program is expected to process different kinds of requests in various ways, but the exact types of requests and their sequences are unknown beforehandwhen it’s essential to execute several handlers in a particular orderwhen the set of handlers and their order are supposed to change at runtime "},{"title":"Structure​","type":1,"pageTitle":"Chain of Responsibility","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/#structure","content":" The Handler declares the interface, common for all concrete handlers. It usually contains just a single method for handling requests, but sometimes it may also have another method for setting the next handler on the chain. The Base Handler is an optional class where you can put the boilerplate code that’s common to all handler classes. Usually, this class defines a field for storing a reference to the next handler.The clients can build a chain by passing a handler to the constructor or setter of the previous handler.The class may also implement the default handling behavior: it can pass execution to the next handler after checking for its existence. Concrete Handlers contain the actual code for processing requests. Upon receiving a request, each handler must decide whether to process it and, additionally, whether to pass it along the chain.Handlers are usually self-contained and immutable, accepting all necessary data just once via the constructor. The Client may compose chains just once or compose them dynamically, depending on the application’s logic. Note that a request can be sent to any handler in the chain—it doesn’t have to be the first one. "},{"title":"Design Patterns","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/","content":"","keywords":""},{"title":"Creational Patterns​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#creational-patterns","content":"To do with the process of object creationprovide a way to create objects while hiding the creation logic, rather than instantiating objects directly using new operator This gives program more flexibility in deciding which objects need to be created for a given use case "},{"title":"Abstract Factory​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#abstract-factory","content":""},{"title":"Builder​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#builder","content":""},{"title":"Factory Method​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#factory-method","content":""},{"title":"Prototype​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#prototype","content":""},{"title":"Singleton​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#singleton","content":""},{"title":"Structural Patterns​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#structural-patterns","content":"Deal with the composition of classes or objectsare related to class and object composition Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities "},{"title":"Adapter​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#adapter","content":""},{"title":"Bridge​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#bridge","content":""},{"title":"Composite​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#composite","content":""},{"title":"Decorator​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#decorator","content":""},{"title":"Facade​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#facade","content":""},{"title":"Flyweight​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#flyweight","content":""},{"title":"Proxy​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#proxy","content":""},{"title":"Behavioral Patterns​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#behavioral-patterns","content":"Characterize the ways in which classes or objects interact and distribute responsibilityare used for efficient and safe communication between objects and distribution of responsibility among them For this purpose, both inheritance and composition-based mechanisms can be usedPatterns are software development toolsLike real-world tools, that you can simply buy in a hardware store, they have specific purpose and are not equally useful in different scenarios "},{"title":"Chain of Responsibility​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#chain-of-responsibility","content":""},{"title":"Command​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#command","content":""},{"title":"Interpreter​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#interpreter","content":""},{"title":"Iterator​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#iterator","content":""},{"title":"Mediator​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#mediator","content":""},{"title":"Memento​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#memento","content":""},{"title":"Observer​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#observer","content":""},{"title":"State​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#state","content":""},{"title":"Strategy​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#strategy","content":""},{"title":"Template Method​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#template-method","content":""},{"title":"Visitor​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#visitor","content":""},{"title":"How to select a Design Pattern​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#how-to-select-a-design-pattern","content":"Consider how design patterns solve design problemsScan intent sectionsStudy how patterns interrelateStudy patterns of like purposeExamine a cause of redesignConsider what should be variable in your design this is opposite of focusing on cause of redesignconsider what you want to be able to change without redesign, instead of what might force a change to a design the focus is on encapsulating the concept that varies Purpose\tDesign Pattern\tAspect(s) that can varyCreational\tAbstract Factory\tfamilies of product objects Builder\thow a composite object gets created Factory Method\tsubclass of object that is instantiated Prototype\tclass of object that is instantiated Singleton\tthe sole instance of a class Structural\tAdapter\tinterface to an object Bridge\timplementation to an object Composite\tstructure and composition of an object Decorator\tresponsibilities of an object without subclassing Facade\tinterface to a subsystem Flyweight\tstorage costs of objects Proxy\thow an object is accessed; its location Behavioral\tChain of Responsibility\tobject that can fulfill a request Command\twhen and how a request is fulfilled Interpreter\tgrammar and interpretation of a language Iterator\thow an aggregate's elements are accessed, traversed Mediator\thow and which objects interact with each other Memento\twhat private information is stored outside an object, and when Observer\tNo. of objects that depend on another object; how the dependent objects stay up to date State\tstates of an object Strategy\tan algorithm Template Method\tsteps of an algorithm Visitor\toperations that can be applied to object(S) without changing their class(es) "},{"title":"How to use a Design Pattern​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#how-to-use-a-design-pattern","content":"Read the pattern once through for an overview pay attention to the Applicability &amp; Consequences section to ensure the pattern is right for the problem Go back &amp; study the Structure, Participants, &amp; Collaborations sections make sure to understand the classes &amp; objects in the pattern &amp; how they related to each other Look at the Sample Code section to see a concrete example of the pattern in codeChoose names for pattern participants that are meaningful in the application contextDefine the classes declare their interfaces,establish their inheritance relationships,define the instance variable that represents data &amp; object referencesidentify existing classes in app that pattern will affect, and modify accordingly Define application specific names for operations in the pattern use the responsibilities &amp; collaboration associated with each operation as a guide Implement the operations to carry out the responsibilities &amp; collaborations in the pattern Design patterns should not be applied indiscriminatelyIt can complicate design &amp; or cost performance to achieve flexibility &amp; variability by introducing additional levels of indirectionDesign patterns should only be applied when the flexibility is really needed "},{"title":"How design patterns solve design problems​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#how-design-patterns-solve-design-problems","content":""},{"title":"Finding appropriate objects​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#finding-appropriate-objects","content":"Hard part about object oriented design is decomposing a system into objects due to many factors: encapsulation, granularity, dependency, flexibility, performance, evolution, reusability ... Object oriented design methodologies favor many different approaches write a problem statement, single out nouns and verbs, create corresponding classes and operationsFocus on the collaborations &amp; responsibilities in your systemModel the real world &amp; translate the objects found during analysis into design Many objects in a design come from the analysis model, but often end up with classes that have no counterparts in the real world low-level classes like arrayshigher-level classes: Composite pattern: introduces an abstraction for treating objects uniformly that doesn't have a physical counterpartstrict modeling of the real world leads to a system that reflects today's realities but not necessarily tomorrow'sabstractions that emerge during design are key to making a design flexible Design patterns helps you to identify less-obvious abstractions &amp; the objects that can capture them Strategy pattern describes how to implement interchangeable families of algorithmsState pattern represents each state of an entity as an object "},{"title":"Determining object Granularity​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#determining-object-granularity","content":"Design patterns can address the issue of objects being able to vary tremendously in size and number Facade pattern: describes how to represent complete subsystems as objectsFlyweight pattern: describes how to support huge numbers of objects at the finest granularitiesOther design patterns describe specific ways of decomposing an object into smaller objectsAbstract Factory &amp; Builder patterns: yield objects whose only responsibilities are creating other objectsVisitor &amp; Command patterns: yield objects responsible for only implementing a request on anther object or group of object "},{"title":"Specifying object interfaces​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#specifying-object-interfaces","content":"An object's interface characterizes the complete set of requests that can be sent to the objectAny request that matches a signature in the object's interface may be sent to the object Interface: the set of all signatures defined by an object's operations Signature: the operation's name, objects taken as parameters, and operation's return value declared by an object during an operation Design patterns help to define interfaces by identifying their key elements &amp; data type that get sent across an interfaceDesign patterns will also tell you what not to put in the interfaces Memento pattern: describes how to encapsulate &amp; save the internal state of an object to allow object restoration later must define 2 interfaces: a restricted one that lets clients hold &amp; copy mementosa privileged one that only the original object can use to store &amp; retrieve state in the momento Design patterns specify relationships between interfaces, by requiring some classes to have similar interfaces or placing constraints on the interfaces of some classes Decorator &amp; Proxy patterns require the interfaces of Decorator &amp; Proxy objects to be identical to the decorated &amp; proxied objectsVisitor pattern: visitor interface must reflect all classes of objects that visitors can visit "},{"title":"Specifying object implementations​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#specifying-object-implementations","content":"Object's implementation is defined by its classThe class specifies the object's internal data &amp; representation &amp; defines the operations the object can performObjects are created by instantiating a class (the object is said to be an instance of the class) Instantiating a class allocates storage for the object's internal data (made up of instance variables)Associates the operations with these datamany similar instances of an object can be created by instantiating a class New classes can be defined in terms of existing classes using inheritance when subclass inherits from parent class, definitions of all data &amp; operations that the class defines are includedobjects that are instances of the subclass will contain all data defined by the subclass &amp; its parent classes they be able to perform all operations defined by this subclass &amp; its parents Abstract class is one whose main purpose is to define a common interface for its subclasses abstract class will defer some or all of its implementation to operations defined in subclasseshence an abstract class cannot be instantiatedabstract operations are operations that an abstract class declares but doesn't implement Concrete classes are classes that aren't abstract Subclasses can refine &amp; redefine behaviors of their parent classes a class may override an operation defined by its parent class overriding gives subclasses a chance to handle requests instead of their parent classes Class inheritance lets you define classes simply by extending other classes Making it easy to define families of objects having related functionality "},{"title":"Class vs Interface inheritance​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#class-vs-interface-inheritance","content":"An object's class defines how the object is implemented The class defines the object's internal state &amp; the implementation of its operationsObject's type only refers to its interface-the set of requests to which it can respond an object can have many typesobjects of different classes can have the same type An object is an instance of a class also implies that the object supports the interface defined by the classClass inheritance vs Interface inheritance (subtyping) Class inheritance defines an object's implementation in terms of another object's implementation it's a mechanism for code &amp; representation sharing Interface inheritance (subtyping) describes when an object can be used in place of anotherProgramming languages don't make the distinction explicit 2 types: inheritance means both interface and implementation inheritance (C++) standard way to inherit an interface is to inherit publicly from a class that has (pure) virtual member functionspure interface inheritance can be approximated by inheriting publicly from pure abstract classespure implementation or class inheritance can be approximated with private inheritancemanipulate objects through types defined by abstract classes inheritance means just implementation inheritance can assign instances of any class to a variableas long as those instances support the operation performed on the value of the variableact as if subclasses were subtypes "},{"title":"Programming to an Interface, not an Implementation​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#programming-to-an-interface-not-an-implementation","content":"Polymorphism depends on inheritance's ability to define families of objects with identical interfaces usually by inheriting from an abstract class When inheritance is used, all classes derived from an abstract class will share its interface this implies that a subclass merely adds or overrides operations &amp; does not hide operations of the parent classall subclasses can then respond to the requests in the interface of this abstract class making them all subtypes of the abstract class 2 benefits to manipulating objects solely in terms of the interface defined by abstract classes: clients are unaware of specific types of objects they use, as long as object adhere to the interface as expectedclients are unaware of classes that implement these objects, &amp; only know about abstract classes defining the interface this greatly reduces implementation dependencies between subsystemsdon't declare variables to be instances of particular concrete classes instead, commit only to an interface defined by an abstract class "},{"title":"Putting reuse mechanisms to work: Favor object composition over class inheritance​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#putting-reuse-mechanisms-to-work-favor-object-composition-over-class-inheritance","content":"Class inheritance &amp; Object Composition are 2 most common techniques for reusing functionality in object oriented systemsInheritance vs Composition Class Inheritance: lets you define the implementation of 1 class in terms of another'swhite-box reuse: reuse by subclassing &quot;white-box&quot; refers to visibility with inheritance, the internals of parent classes are often visible to subclasses advantages: defined statically at compile time &amp; is straightforward to usemakes it easier to modify the implementation being reused when a subclass overrides some but not all operations, it can affect the operations it inherits disadvantages: can't change the implementations inherited from parent classes at run-time because inheritance is defined at compile time parent classes often define at least part of their subclasses' physical representation because inheritance exposes a subclass to details of its parent's implementation,therefore, inheritance breaks encapsulation any change in the parent's implementation will force the subclass to change when implementation becomes bound up with the implementation of its parent class implementation dependencies can cause problems when trying to reuse a subclass should any aspect of the inherited implementation not be appropriate for new problem domains,the parent class must be rewritten or replaced by something more appropriatethis dependency limits flexibility &amp; reusability 1 solution: inherit only from abstract classes, since they usually provide little or no implementation Object Composition: an alternative to class inheritance new functionality is obtained by assembling or composing objects to get more complex functionalityrequires that the objects being composed have well-defined interfacesblack-box reuse: reuse by assembling or composing &quot;black-box&quot; refers to visibility no internal details of objects are visible advantages defined dynamically at run time through objects acquiring references to other objects requires objects to respect each others' interfaces which requires carefully designed interfaces that don't stop you from using 1 object with other any object can be replaced at run time by another as long as it has the same typefewer implementation dependencies due to an object's implementation being written in terms of object interfaces helps keep each class encapsulated &amp; focused on 1 task classes &amp; class hierarchies will remain smallwill be less likely to grow into unmanageable monsters disadvantages don't break encapsulation because objects are accessed solely through their interfaces will have more objects (if fewer classes) system's behavior will depend on their interrelationships instead of being defined in one's class ideally, shouldn't be creating new components to achieve reuseshould be able to get all functionality needed just by assembling existing components through object composition "},{"title":"Delegation​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#delegation","content":"It is a way of making composition as powerful for reuse as inheritanceIn delegation, 2 objects are involved in handling a request: a receiving object delegates operations to its delegate this is analogous to subclasses deferring requests to parent classesin order to receive the effect similar to inheritance when referring to receiving object through the this (self) variable the receiver passes itself to the delegate to let the delegated operation refer to the receiver advantage it makes it easy to compose behaviors at run time &amp; to change the way they're composed disadvantage dynamic, highly parameterized software is harder to understand than more static softwarethere are also run time inefficiencies (but human inefficiencies are more important in the long run) delegation is a good design choice only when it simplifies more than it complicates effectiveness depends on the context &amp; experience on itdelegation works best when it's used in highly stylized ways used in standard patterns State pattern: an object delegates request to a State object that represents its current state purpose is to change the behavior of an object by changing the objects to which it delegates requests Strategy pattern: an object delegates a specific request to an object that represents a strategy for carrying out the request an object will only have 1 state, but it can have many strategies for different requestspurpose is to change the behavior of an object by changing the objects to which it delegates requests Visitor pattern: the operation that gets performed on each element of an object structure is always delegated to the Visitor object patterns that use delegation less heavily Mediator pattern: introduces an object to mediate communication between other objects sometimes the Mediator object implements operations by forwarding them to other objectsother times, it passes along a reference to itself &amp; thus uses true delegation Chain of Responsibility pattern: handles request by forwarding them from 1 object to another along a chain of objects sometimes this request carries with it a reference to the original object receiving the request (using delegation) Bridge pattern: decouples an abstraction from its implementation if the abstraction &amp; a particular implementation are closely matched,then the abstraction may simply delegate operations to that implementation Delegation is an extreme example of object composition it shows that you can always replace inheritance with object composition as a mechanism for code reuse "},{"title":"Inheritance vs Parameterized types​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#inheritance-vs-parameterized-types","content":"Parameterized types: another technique for reusing functionality also known as &quot;generics&quot; and &quot;templates&quot;lets you define a type without specifying all the other types it uses the unspecified types are supplied as parameters at the point of reuse gives us a 3rd way (in addition to class inheritance &amp; object composition) to compose behavior in object oriented systemsdifferences between object composition, class inheritance, and parameterized types object composition allows changes of behavior being composed at run time, but requires indirection &amp; can be less efficientclass inheritance lets your provide default implementations for operations &amp; lets subclasses override them can not change at run time parameterized types lets you change the types that a class can use can not change at run time Parametrized types aren't needed in languages that doesn't have compile time type checking "},{"title":"Relating Run time & Compile time structures​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#relating-run-time--compile-time-structures","content":"Run time structure: often bears little resemblance to its code structure it consists of rapidly changing networks of communicating objectsComposite pattern &amp; Decorator pattern are useful for building complex run time structuresObserver pattern involves run time structures that are often hard to understand unless you know the patternChain of Responsibility pattern also results in communication patterns that inheritance doesn't revealin general, run time structures aren't clear from the code until you understand the patterns Compile time structure: code structure is frozen at compile time it consists of classes in fixed inheritance relationships Consider the distinction between object aggregation &amp; acquaintance, &amp; how differently they manifest themselves at compile &amp; run times Aggregation: implies that 1 object owns or is responsible for another object implies that an aggregate object &amp; its owner have identical lifetimesaggregation can be implemented by defining member variables that are real instancesbut is more common to define them as pointers or references to instancestend to be fewer &amp; more permanent than acquaintance Acquaintance: implies that an object merely knows of another object also called as &quot;association&quot; or the &quot;using&quot; relationshipacquainted objects may request operations of each other, but are not responsible for each otheracquaintance is a weaker relationship than aggregation &amp; suggest much looser coupling between objectsacquaintance is implemented with pointers &amp; referencesmade and remade more frequently, sometimes existing only for the duration of an operationmore dynamic, making them more difficult to discern in the source code aggregation &amp; acquaintance are often implemented in the same wayboth are determined more by intent than by explicit language mechanism "},{"title":"Designing for change​","type":1,"pageTitle":"Design Patterns","url":"docs/interviewPrep/designPatterns/#designing-for-change","content":"Key to maximizing reuse lines is in anticipating new requirements &amp; changes to existing requirements and in designing systems that can evolve accordingly To design a system that is robust to changes need to consider how the system might need to change over its lifetimea design that doesn't take change into account risks major redesign in the futurechanges might involve class redefinition &amp; implementation, client modification, &amp; retestingredesign affects many parts of software system, &amp; unanticipated changes are expensive Common causes of redesign and design patterns as solutions Creating an object by specifying a class explicitly this commits you to an implementation than to an interface, thus complicating future changessolution: create objects indirectly Abstract Factory, Factory method, Prototype Dependence on specific operations this commits you to 1 way of satisfying a requestsolution: avoid hard coded requests, making it easier to change the way a request gets satisfied at compile and run time Chain of Responsibility, Command Dependence on hardware &amp; software platform external OS interfaces &amp; APIs are different on different hardware &amp; software platformssoftware that depends on a particular platform will be harder to port to other platformsdifficult to keep it up to data on its native platformsolution: important to design the system to limit its platform dependencies Abstract Factory, Bridge Dependence on object representations or implementations clients knowing how object is represented, stored, located, or implemented might need to be changed when object changessolution: hiding this information from clients keeps changes from cascading Abstract Factory, Bridge, Memento, Proxy Algorithmic dependencies algorithms are often extended, optimized, and replaced during development &amp; reuseobjects that depend on algorithm will have to change when algorithm changessolution: isolate algorithms that are likely to change Builder, Iterator, Strategy, Template Method, Visitor Tight coupling classes that are tightly coupled are hard to reuse in isolation, since they depend on each othertight coupling leads to monolithic systems, can't change or remove class without understanding &amp; changing other classesSystem becomes a dense mass that's hard to learn, port, and maintainsolution: loose coupling increases the probability that a class can be reused by itself &amp; that a system can be learned, ported, modified, &amp; extended more easilydesign patterns use techniques such as abstract coupling &amp; layering to promote loosely coupled systemsAbstract Factory, Bridge, Chain of Responsibility, Command, Facade, Mediator, Observer Extending functionality by subclassing customizing an object by subclassing isn't easy as every new class has a fixed implementation overheaddefining a subclass also requires an in depth understanding of the parent class overriding 1 operation might require overriding anotheran overridden operation might be required to call an inherited operationsubclassing can lead to an explosion of classes,because you might have to introduce many new subclasses for even a simple extension solution: object composition &amp; delegation provide flexible alternatives to inheritance for combining behavior add new functionality to application by composing existing objects in new ways than defining new subclasses of existing classesheavy use of object composition can make designs harder to understand thus design patterns produce designs where you can introduce customized functionality by defining 1 subclass&amp; composing its instances with existing ones Bridge, Chain of Responsibility, Composite, Decorator, Observer, Strategy Inability to alter classes conveniently sometimes have to modify a class that can't be modified convenientlymight need the source code, but don't have itany change would require modifying lots of existing subclassessolution: Use Adapter, Decorator, Visitor design patterns during such circumstances the role design patterns play in the development of 3 broad classes of software: application programs, toolkits, frameworks Application programs internal reuse, maintainability, &amp; extension are high priorities when building apps: document editor or spreadsheet ensures that you don't design &amp; implement more than you have to design patterns make an app more maintainable when they're used to limit platform dependencies &amp; to layer a system they enhance extensibility by showing you how to extend class hierarchies &amp; how to exploit object composition Toolkits a set of related &amp; reusable classes designed to provide useful, general purpose functionality e.g.: a set of collection classes for lists, associative tables, stacks toolkit is used by writing the main body of the app &amp; calling the code from the toolkit to reuseit does not impose a particular design on the appit just provide functionality that can help the app do its jobit also lets you as an implementer avoid recoding common functionalityemphasize on code reuse, are object oriented equivalent of subroutine librariesToolkit design is harder than app design, as toolkits have to work in many apps to be useful moreover, toolkit writer won't know what the will be or special needs of apps designed by othersis important to avoid assumptions &amp; dependencies that limits toolkit's flexibility, applicability &amp; effectiveness Frameworks it is a set of cooperating classes that make up a reusable design for a specific class of software a framework can be geared toward building graphical editors for different domainsanother framework can help build compilers for different programming languages &amp; target machinesanother might help build financial modeling applicationsA framework can be customized to a particular app by creating app specific subclasses of abstract classes from the framework framework is used by reusing main body &amp; writing the code it calls have to write operations with particular names &amp; calling conventionsthis reduces the design decisions you have to makeframework will allow building of apps faster, but apps will have similar structure easier to maintain, are more consistent to usershowever, will lose creative freedom, since many design decisions have been made for you framework dictates the architecture of the app it defines the overall structure, its partitioning into classes &amp; objectsthe key responsibilities: how classes &amp; objects collaboratethe thread of controlframework predefine the above design parameters so that the designer can focus on specifics of the appframework captures the design decisions that are common to its application domainthus framework emphasize design reuse over code reuse however, framework will usually include concrete subclasses that can be used immediately imperative to design the framework to be a flexible &amp; extensible as possible a framework that addresses loose coupling by using design patterns will achieve high levels of design &amp; code reusepeople who know the design patterns the framework uses will gain insight into the framework faster3 major difference between design patterns and frameworks Design patterns are more abstract than frameworks frameworks can be embodied in code, but only examples of patterns can be embodied in codeadv of framework is that they can be written down in programming languages &amp; can be studied, executed, &amp; reused directly design patterns have to be implemented each time they're used it also explain the intent, trade-offs, &amp; consequences of a design Design patterns are smaller architectural elements than frameworks a typical framework contains several design patterns, but the reverse is never true Design patterns are less specialized than frameworks frameworks always have a particular application domain a graphical editor framework used in factory simulation, won't be mistaken for a simulation framework design patterns can be used in nearly any kind of application although specialized design patterns are possible, it won't dictate an app architecture like a framework frameworks are becoming important to allow object oriented systems to achieve the most reuse "},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/go/","content":"Go Example package main import &quot;fmt&quot; type cashier struct { next department } func (c *cashier) execute(p *patient) { if p.paymentDone { fmt.Println(&quot;Payment Done&quot;) } fmt.Println(&quot;Cashier getting money from patient patient&quot;) } func (c *cashier) setNext(next department) { c.next = next } package main type department interface { execute(*patient) setNext(department) } package main type departmentBase struct { nextDepartment department } package main import &quot;fmt&quot; type doctor struct { next department } func (d *doctor) execute(p *patient) { if p.doctorCheckUpDone { fmt.Println(&quot;Doctor checkup already done&quot;) d.next.execute(p) return } fmt.Println(&quot;Doctor checking patient&quot;) p.doctorCheckUpDone = true d.next.execute(p) } func (d *doctor) setNext(next department) { d.next = next } package main import &quot;fmt&quot; type medical struct { next department } func (m *medical) execute(p *patient) { if p.medicineDone { fmt.Println(&quot;Medicine already given to patient&quot;) m.next.execute(p) return } fmt.Println(&quot;Medical giving medicine to patient&quot;) p.medicineDone = true m.next.execute(p) } func (m *medical) setNext(next department) { m.next = next } package main type patient struct { name string registrationDone bool doctorCheckUpDone bool medicineDone bool paymentDone bool } package main import &quot;fmt&quot; type reception struct { next department } func (r *reception) execute(p *patient) { if p.registrationDone { fmt.Println(&quot;Patient registration already done&quot;) r.next.execute(p) return } fmt.Println(&quot;Reception registering patient&quot;) p.registrationDone = true r.next.execute(p) } func (r *reception) setNext(next department) { r.next = next } package main func main() { cashier := &amp;cashier{} //Set next for medical department medical := &amp;medical{} medical.setNext(cashier) //Set next for doctor department doctor := &amp;doctor{} doctor.setNext(medical) //Set next for reception department reception := &amp;reception{} reception.setNext(doctor) patient := &amp;patient{name: &quot;abc&quot;} //Patient visiting reception.execute(patient) } Reception registering patient Doctor checking patient Medical giving medicine to patient Cashier getting money from patient patient ","keywords":""},{"title":"Behavior Patterns","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/","content":"","keywords":""},{"title":"Chain of Responsibility​","type":1,"pageTitle":"Behavior Patterns","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/#chain-of-responsibility","content":"Avoid coupling the sender of a request to its receiver by giving more than 1 object a chance to handle the requestChain the receiving objects and pass the request along the chain until an object handles itDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extent "},{"title":"Command​","type":1,"pageTitle":"Behavior Patterns","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/#command","content":"Encapsulate a request as an object,thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operationsDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extentDesign patterns can address the issue of objects being able to vary tremendously in size and number Command pattern: yield objects responsible for only implementing a request on anther object or group of object "},{"title":"Interpreter​","type":1,"pageTitle":"Behavior Patterns","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/#interpreter","content":"Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the languageDeal with relationships between classes &amp; their subclasses (focus on class relationships)relationships are established through inheritance, so they are static-fixed at compile time "},{"title":"Iterator​","type":1,"pageTitle":"Behavior Patterns","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/#iterator","content":"Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representationDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extentoften used with Composite or Visitor "},{"title":"Mediator​","type":1,"pageTitle":"Behavior Patterns","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/#mediator","content":"Define an object that encapsulates how a set of objects interactMediator promotes loose coupling by keeping objects from referring to each other explicitly,and it lets you vary their interaction independentlyDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extent "},{"title":"Memento​","type":1,"pageTitle":"Behavior Patterns","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/#memento","content":"Without violating encapsulation, capture and externalize an object's internal state so that the object can be restored to this state laterDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extentDesign patterns will also tell you what not to put in the interfaces Memento pattern: describes how to encapsulate &amp; save the internal state of an object to allow object restoration later must define 2 interfaces: a restricted one that lets clients hold &amp; copy mementosa privileged one that only the original object can use to store &amp; retrieve state in the momento "},{"title":"Observer​","type":1,"pageTitle":"Behavior Patterns","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/#observer","content":"Define a 1 to many dependency between objects so that when 1 object changes state,all its dependents are notified and updated automaticallyDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extent "},{"title":"State​","type":1,"pageTitle":"Behavior Patterns","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/#state","content":"Allow an object to alter its behavior when its internal state changesThe object will appear to change its classDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extentDesign patterns helps you to identify less-obvious abstractions &amp; the objects that can capture them State pattern represents each state of an entity as an object "},{"title":"Strategy​","type":1,"pageTitle":"Behavior Patterns","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/#strategy","content":"Define a family of algorithms, encapsulate each 1, and make them interchangeableStrategy lets the algorithm vary independently from clients that use itDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extentDesign patterns helps you to identify less-obvious abstractions &amp; the objects that can capture them Strategy pattern describes how to implement interchangeable families of algorithms "},{"title":"Template Method​","type":1,"pageTitle":"Behavior Patterns","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/#template-method","content":"Define the skeleton of an algorithm in an operation, deferring some steps to subclassesTemplate method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structureDeal with relationships between classes &amp; their subclasses (focus on class relationships)relationships are established through inheritance, so they are static-fixed at compile time "},{"title":"Visitor​","type":1,"pageTitle":"Behavior Patterns","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/#visitor","content":"Represent an operation to be performed on the elements of an object structureVisitor lets you define a new operation without changing the classes of the elements on which it operatesDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extentoften used with Iterator or CompositeDesign patterns can address the issue of objects being able to vary tremendously in size and number Visitor pattern: yield objects responsible for only implementing a request on anther object or group of object Design patterns specify relationships between interfaces, by requiring some classes to have similar interfaces or placing constraints on the interfaces of some classes Visitor pattern: visitor interface must reflect all classes of objects that visitors can visit "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; /** * Chain of Responsibility Design Pattern * * Intent: Lets you pass requests along a chain of handlers. Upon receiving a * request, each handler decides either to process the request or to pass it to * the next handler in the chain. */ /** * The Handler interface declares a method for building the chain of handlers. * It also declares a method for executing a request. */ class Handler { public: virtual Handler *SetNext(Handler *handler) = 0; virtual std::string Handle(std::string request) = 0; }; /** * The default chaining behavior can be implemented inside a base handler class. */ class AbstractHandler : public Handler { /** * @var Handler */ private: Handler *next_handler_; public: AbstractHandler() : next_handler_(nullptr) { } Handler *SetNext(Handler *handler) override { this-&gt;next_handler_ = handler; // Returning a handler from here will let us link handlers in a convenient // way like this: // $monkey-&gt;setNext($squirrel)-&gt;setNext($dog); return handler; } std::string Handle(std::string request) override { if (this-&gt;next_handler_) { return this-&gt;next_handler_-&gt;Handle(request); } return {}; } }; /** * All Concrete Handlers either handle a request or pass it to the next handler * in the chain. */ class MonkeyHandler : public AbstractHandler { public: std::string Handle(std::string request) override { if (request == &quot;Banana&quot;) { return &quot;Monkey: I'll eat the &quot; + request + &quot;.\\n&quot;; } else { return AbstractHandler::Handle(request); } } }; class SquirrelHandler : public AbstractHandler { public: std::string Handle(std::string request) override { if (request == &quot;Nut&quot;) { return &quot;Squirrel: I'll eat the &quot; + request + &quot;.\\n&quot;; } else { return AbstractHandler::Handle(request); } } }; class DogHandler : public AbstractHandler { public: std::string Handle(std::string request) override { if (request == &quot;MeatBall&quot;) { return &quot;Dog: I'll eat the &quot; + request + &quot;.\\n&quot;; } else { return AbstractHandler::Handle(request); } } }; /** * The client code is usually suited to work with a single handler. In most * cases, it is not even aware that the handler is part of a chain. */ void ClientCode(Handler &amp;handler) { std::vector&lt;std::string&gt; food = {&quot;Nut&quot;, &quot;Banana&quot;, &quot;Cup of coffee&quot;}; for (const std::string &amp;f : food) { std::cout &lt;&lt; &quot;Client: Who wants a &quot; &lt;&lt; f &lt;&lt; &quot;?\\n&quot;; const std::string result = handler.Handle(f); if (!result.empty()) { std::cout &lt;&lt; &quot; &quot; &lt;&lt; result; } else { std::cout &lt;&lt; &quot; &quot; &lt;&lt; f &lt;&lt; &quot; was left untouched.\\n&quot;; } } } /** * The other part of the client code constructs the actual chain. */ int main() { MonkeyHandler *monkey = new MonkeyHandler; SquirrelHandler *squirrel = new SquirrelHandler; DogHandler *dog = new DogHandler; monkey-&gt;SetNext(squirrel)-&gt;SetNext(dog); /** * The client should be able to send a request to any handler, not just the * first one in the chain. */ std::cout &lt;&lt; &quot;Chain: Monkey &gt; Squirrel &gt; Dog\\n\\n&quot;; ClientCode(*monkey); std::cout &lt;&lt; &quot;\\n&quot;; std::cout &lt;&lt; &quot;Subchain: Squirrel &gt; Dog\\n\\n&quot;; ClientCode(*squirrel); delete monkey; delete squirrel; delete dog; return 0; } Chain: Monkey &gt; Squirrel &gt; Dog Client: Who wants a Nut? Squirrel: I'll eat the Nut. Client: Who wants a Banana? Monkey: I'll eat the Banana. Client: Who wants a Cup of coffee? Cup of coffee was left untouched. Subchain: Squirrel &gt; Dog Client: Who wants a Nut? Squirrel: I'll eat the Nut. Client: Who wants a Banana? Banana was left untouched. Client: Who wants a Cup of coffee? Cup of coffee was left untouched. ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/python/","content":"Python Example &quot;&quot;&quot; Chain of Responsibility Design Pattern Intent: Lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain. &quot;&quot;&quot; from __future__ import annotations from abc import ABC, abstractmethod from typing import Any, Optional class Handler(ABC): &quot;&quot;&quot; The Handler interface declares a method for building the chain of handlers. It also declares a method for executing a request. &quot;&quot;&quot; @abstractmethod def set_next(self, handler: Handler) -&gt; Handler: pass @abstractmethod def handle(self, request) -&gt; Optional[str]: pass class AbstractHandler(Handler): &quot;&quot;&quot; The default chaining behavior can be implemented inside a base handler class. &quot;&quot;&quot; _next_handler: Handler = None def set_next(self, handler: Handler) -&gt; Handler: self._next_handler = handler # Returning a handler from here will let us link handlers in a # convenient way like this: # monkey.set_next(squirrel).set_next(dog) return handler @abstractmethod def handle(self, request: Any) -&gt; str: if self._next_handler: return self._next_handler.handle(request) return None &quot;&quot;&quot; All Concrete Handlers either handle a request or pass it to the next handler in the chain. &quot;&quot;&quot; class MonkeyHandler(AbstractHandler): def handle(self, request: Any) -&gt; str: if request == &quot;Banana&quot;: return f&quot;Monkey: I'll eat the {request}&quot; else: return super().handle(request) class SquirrelHandler(AbstractHandler): def handle(self, request: Any) -&gt; str: if request == &quot;Nut&quot;: return f&quot;Squirrel: I'll eat the {request}&quot; else: return super().handle(request) class DogHandler(AbstractHandler): def handle(self, request: Any) -&gt; str: if request == &quot;MeatBall&quot;: return f&quot;Dog: I'll eat the {request}&quot; else: return super().handle(request) def client_code(handler: Handler) -&gt; None: &quot;&quot;&quot; The client code is usually suited to work with a single handler. In most cases, it is not even aware that the handler is part of a chain. &quot;&quot;&quot; for food in [&quot;Nut&quot;, &quot;Banana&quot;, &quot;Cup of coffee&quot;]: print(f&quot;\\nClient: Who wants a {food}?&quot;) result = handler.handle(food) if result: print(f&quot; {result}&quot;, end=&quot;&quot;) else: print(f&quot; {food} was left untouched.&quot;, end=&quot;&quot;) if __name__ == &quot;__main__&quot;: monkey = MonkeyHandler() squirrel = SquirrelHandler() dog = DogHandler() monkey.set_next(squirrel).set_next(dog) # The client should be able to send a request to any handler, not just the # first one in the chain. print(&quot;Chain: Monkey &gt; Squirrel &gt; Dog&quot;) client_code(monkey) print(&quot;\\n&quot;) print(&quot;Subchain: Squirrel &gt; Dog&quot;) client_code(squirrel) Chain: Monkey &gt; Squirrel &gt; Dog Client: Who wants a Nut? Squirrel: I'll eat the Nut Client: Who wants a Banana? Monkey: I'll eat the Banana Client: Who wants a Cup of coffee? Cup of coffee was left untouched. Subchain: Squirrel &gt; Dog Client: Who wants a Nut? Squirrel: I'll eat the Nut Client: Who wants a Banana? Banana was left untouched. Client: Who wants a Cup of coffee? Cup of coffee was left untouched. ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/javascript/","content":"JavaScript Example /** * The default chaining behavior can be implemented inside a base handler class. */ class HandlerAbstract { #nextHandler; setNext(handler) { this.#nextHandler = handler; // Returning a handler from here will let us link handlers in a // convenient way like this: // monkey.setNext(squirrel).setNext(dog); return handler; } handle(request) { if (this.#nextHandler) { return this.#nextHandler.handle(request); } return null; } } module.exports = HandlerAbstract; const HandlerAbstract = require(&quot;./HandlerAbstract&quot;); /** * All Concrete Handlers either handle a request or pass it to the next handler * in the chain. */ class DogHandler extends HandlerAbstract { handle(request) { if (request === &quot;MeatBall&quot;) { return `Dog: I'll eat the ${request}.`; } return super.handle(request); } } module.exports = DogHandler; const HandlerAbstract = require(&quot;./HandlerAbstract&quot;); /** * All Concrete Handlers either handle a request or pass it to the next handler * in the chain. */ class MonkeyHandler extends HandlerAbstract { handle(request) { if (request === &quot;Banana&quot;) { return `Monkey: I'll eat the ${request}.`; } return super.handle(request); } } module.exports = MonkeyHandler; const HandlerAbstract = require(&quot;./HandlerAbstract&quot;); /** * All Concrete Handlers either handle a request or pass it to the next handler * in the chain. */ class SquirrelHandler extends HandlerAbstract { handle(request) { if (request === &quot;Nut&quot;) { return `Squirrel: I'll eat the ${request}.`; } return super.handle(request); } } module.exports = SquirrelHandler; const DogHandler = require(&quot;./DogHandler&quot;); const MonkeyHandler = require(&quot;./MonkeyHandler&quot;); const SquirrelHandler = require(&quot;./SquirrelHandler&quot;); /** * The client code is usually suited to work with a single handler. In most * cases, it is not even aware that the handler is part of a chain. */ function clientCode(handler) { const foods = [&quot;Nut&quot;, &quot;Banana&quot;, &quot;Cup of coffee&quot;]; for (const food of foods) { console.log(`Client: Who wants a ${food}?`); const result = handler.handle(food); if (result) { console.log(` ${result}`); } else { console.log(` ${food} was left untouched.`); } } } /** * The other part of the client code constructs the actual chain. */ const monkey = new MonkeyHandler(); const squirrel = new SquirrelHandler(); const dog = new DogHandler(); monkey.setNext(squirrel).setNext(dog); /** * The client should be able to send a request to any handler, not just the * first one in the chain. */ console.log(&quot;Chain: Monkey &gt; Squirrel &gt; Dog\\n&quot;); clientCode(monkey); console.log(&quot;&quot;); console.log(&quot;Subchain: Squirrel &gt; Dog\\n&quot;); clientCode(squirrel); ","keywords":""},{"title":"Trees","type":0,"sectionRef":"#","url":"docs/interviewPrep/data_structures/13Trees/","content":"","keywords":""},{"title":"Types of trees​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#types-of-trees","content":""},{"title":"Binary Trees​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#binary-trees","content":"the root node has 2 child nodesevery other nodes have up to 2 child nodesthe structure of a binary tree is such that many of its operations have a logarithmic time complexity, making binary tree a commonly used data structure class Node: def __init__(self, value): self.value = value self.left = None self.right = None  class Node&lt;T&gt; { constructor(public value: T) { this.value = value; this.left = null; this.right = null; } }  Binary Search Tree (BST)​ it is a node-based binary tree data structure which has the following properties The left subtree of a node contains only nodes with values smaller than the node's valueThe right subtree of a node contains only nodes with values bigger than the node's valueThe left and right subtree each must also be a binary search tree or be null If a node is to be inserted into a tree, it is compared with current node (starting from the root) If the node's value is less than current, we send it down to left subtreeIf node's value is greater than or equal to current it is sent to the right subtreeThis process is repeated for each encountered node  K-ary Tree​ a tree where every node (including the root) have up to k child nodes e.g.: a binary tree is a k-ary tree where k === 2 Perfect Binary Tree​ a binary tree whose interior nodes all have 2 child nodes and whose leaf nodes all have the same depth 1 / \\ 2 3 / \\ / \\ 4 5 6 7 /\\ /\\ /\\ /\\ 8 9 10 11 12 13 14 15  Complete Binary Tree​ a binary tree that's almost perfectits interior nodes all have 2 child nodesbut its leaf nodes don't necessarily all have the same depthfurthermore, the nodes in the last level of a complete binary tree are as far left as possible 1 / \\ 2 3 / \\ / \\ 4 5 6 7 /\\ 8 9 a binary tree is incomplete if the nodes in its last level aren't as far left as possible 1 / \\ 2 3 / \\ / \\ 4 5 6 7 / \\ 8 9  Balanced Binary Tree​  1 / \\ 2 3 / \\ / \\ 4 5 6 7 / \\ / 10 9 8  a binary tree whose nodes all have left and right subtrees whose heights differ by no more than 1a balanced binary tree is such that the logarithmic time complexity O(log n) of its operations is maintainede.g.: inserting a node at the bottom of the following imbalanced binary tree's left subtree would clearly not be a logarithmic-time operation, since it would involve traversing through most of the tree's nodes 1 / \\ 2 3 / 4 / 8 / 10  Full Binary Tree​ a binary tree whose nodes all have either 2 child nodes or 0 child nodes 1 / \\ 2 3 / \\ 6 7 / \\ 8 9  "},{"title":"Heaps​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#heaps","content":"they are typically binary heapsa special type of binary trees, where every node in the tree satisfies the min or max heap property Min Heaps​ Max Heaps​ "},{"title":"Ternary Tree​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#ternary-tree","content":"the root node has 3 child nodesevery other nodes have up to 3 child nodes "},{"title":"Tries​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#tries","content":"a tree like data structure that typically stores characters in a string "},{"title":"AVL Trees​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#avl-trees","content":"able to rebalance themselves to obtain the log N complexity "},{"title":"Red Black Trees​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#red-black-trees","content":"able to rebalance themselves to obtain the log N complexity "},{"title":"standard operations and complexities​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#standard-operations-and-complexities","content":""},{"title":"Storing all types of tree: O(N) space​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#storing-all-types-of-tree-on-space","content":"N is the total number of nodes in the tree "},{"title":"Traversing through the entire tree: O(N) time​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#traversing-through-the-entire-tree-on-time","content":""},{"title":"Traversing 1 subtree at every step for a balance binary tree: O(log N) time on average​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#traversing-1-subtree-at-every-step-for-a-balance-binary-tree-olog-n-time-on-average","content":"if the tree is skewed, it becomes O(N) time on worst "},{"title":"Search, Insert, Delete​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#search-insert-delete","content":"for Binary Search Tree: O(h) h is the height of the BST for skewed tree: O(n) n is the number of nodes "},{"title":"Traversal Types​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#traversal-types","content":"Using Recursion pros\tconsThe code may be easier to write\tRecursive functions are generally slower than non-recursive function To solve such problems which are naturally recursive such as tower of Hanoi\tIt may require a lot of memory space to hold intermediate results on the system stacks Reduce unnecessary calling of function\tHard to analyze or understand the code Extremely useful when applying the same solution\tIt is not more efficient in terms of space and time complexity Recursion reduce the length of code\tThe computer may run out of memory if the recursive calls are not properly checked It is very useful in solving the data structure problem Stacks evolutions and infix, prefix, postfix evaluations etc\t "},{"title":"Breath First Traversal​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#breath-first-traversal","content":""},{"title":"Depth First Traversal​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#depth-first-traversal","content":"Inorder (Left, Root, Right)​ example 3, 5, 6, 9, 11, 12 prints the values in the left subtree, then the value of the root subtree, then the right subtree Traverse the left subtree, i.e., call Inorder(left-subtree)Visit the root.Traverse the right subtree, i.e., call Inorder(right-subtree) def in_order(current_node): if current_node: in_order(current_node.left) print(current_node.value) in_order(current_node.right)  function inOrder(node: Node | null) { if (node) { inOrder(node.left); console.log(node.value); inOrder(node.right); } }  def in_order(root): if root is None: return node_stack = [] node_stack.append(root) while(len(node_stack) &gt; 0): current_node = node_stack.pop() # Note that right child is pushed first so that left is processed first if current_node.right: node_stack.append(current_node.right) print(current_node.value) if current_node.left: node_stack.append(current_node.left)  Preorder (Root, Left, Right)​ example 9, 5, 3, 6, 12, 11 prints the root value, then value in left subtree, then value in right subtree Visit the root.Traverse the left subtree, i.e., call Preorder(left-subtree)Traverse the right subtree, i.e., call Preorder(right-subtree) def pre_order(current_node): if current_node: print(current_node.value) pre_order(current_node.left) pre_order(current_node.right)  function preOrder(node: Node | null) { if (node) { console.log(node.value); preOrder(node.left); preOrder(node.right); } }  def pre_order(root): if root is None: return node_stack = [] node_stack.append(root) while(len(node_stack) &gt; 0): current = node_stack.pop() print(current.value) # Note that right child is pushed first so that left is processed first if current.right: node_stack.append(current.right) if current.left: node_stack.append(current.left)  Postorder (Left, Right, Root)​ example 3, 6, 5, 11, 12, 9 prints the value of the left subtree, then the value of the right subtree, then the root value Traverse the left subtree, i.e., call Postorder(left-subtree)Traverse the right subtree, i.e., call Postorder(right-subtree)Visit the root. def post_order(current_node): if current_node: post_order(current_node.left) post_order(current_node.right) print(current_node.value)  function postOrder(node: TreeNode | null) { if (node) { postOrder(node.left); postOrder(node.right); console.log(node.value); } }  def post_order(root): if root is None: return node_stack = [] node_stack.append(root) while(len(node_stack) &gt; 0): current = node_stack.pop() # Note that right child is pushed first so that left is processed first if current.right: node_stack.append(current.right) if current.left: node_stack.append(current.left) print(current.value)  "},{"title":"Binary Search​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#binary-search","content":"def binary_search(current, target): if current is None: return None if current.value == target: return current if target &gt; current.value: return binary_search(current.right, target) if target &lt; current.value: return binary_search(current.left, target) return None  function binarySearch(current: Node | null, target: number): Node | null { if (current === null) { return null; } if (target === current.value) { return current; } if (target &gt; current.value) { return binarySearch(current.right, target); } if (target &lt; current.value) { return binarySearch(current.left, target); } return null; }  def binary_search(tree, target): current = tree while current: if current.value == target: return current.value if target &gt; current.value: current = current.right elif target &lt; current.value: current = current.left else: break return None  "},{"title":"Min and Max of Binary Search Trees​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#min-and-max-of-binary-search-trees","content":""},{"title":"Min​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#min","content":"value is a minimum by following left child pointers from the root until we encounter a null function treeMinimum(node: Node) { while (node.left) { node = node.left; } return node; }  "},{"title":"Max​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#max","content":"value is a maximum by following right child pointers from the root until we encounter a null function treeMaximum(node: Node) { while (node.right) { node = node.right; } return node; }  "},{"title":"Successor​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#successor","content":"it is the node with the smallest value greater than targetNode.value function getSuccessor(tree: Node, targetNode: Node) { if (tree === targetNode) { return null; } if (targetNode.right) { return treeMinimum(targetNode.right); } let successor = null; let currentNode: Node | null = tree; while (currentNode) { if (currentNode.value &lt;= targetNode.value) { currentNode = currentNode.right; } else { successor = currentNode; currentNode = currentNode.left; } } return successor; }  "},{"title":"Insertions​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#insertions","content":"function insertNode(tree: Node | null, node: Node) { if (!tree) { return node; } let leafNode: Node | null = tree; let leafNodeParent: Node = tree; while (leafNode) { leafNodeParent = leafNode; leafNode = node.value &lt; leafNode.value ? leafNode.left : leafNode.right; } if (node.value &lt; leafNodeParent.value) { leafNodeParent.left = node; } else { leafNodeParent.right = node; } }  "},{"title":"Deletion​","type":1,"pageTitle":"Trees","url":"docs/interviewPrep/data_structures/13Trees/#deletion","content":"The overall strategy for deleting a node node from a binary search tree tree has three basic cases If node is leaf (has no children) then remove it by modifying its parent to replace node with null as its child If node has just one child then elevate that child to take nodes position in the tree by modifying node parent to replace node by nodes child If node has two children then find node successor parent must be in node right subtreeand have parent take nodes position in the tree The rest of nodes original right subtree becomes parents new right subtree, and nodes left subtree becomes parents new left subtreeThis case is the tricky because it matters whether parent is nodes right child function deleteNode(tree: Node | null, value: number): Node | null { if (tree === null) { return tree; } if (value &lt; tree.value) { tree.left = deleteNode(tree.left, value); } else if (value &gt; tree.value) { tree.right = deleteNode(tree.right, value); } // this is the node to be deleted else { // node with only one child or no child if (tree.left === null) { return tree.right; } if (tree.right === null) { return tree.left; } // node with two children: get the inorder predecessor (largest in the left subtree) tree.value = treeMaximum(tree.left).value; // delete the inorder predecessor tree.left = deleteNode(tree.left, tree.value); } return tree; }  full Binary Search Tree example utils enum Compare { LessThan = -1, BiggerThan = 1, Equals = 0, } function compare&lt;T&gt;(a: T, b: T): number { if (a === b) { return Compare.Equals; } return a &lt; b ? Compare.LessThan : Compare.BiggerThan; } export class Node&lt;T&gt; { public left: Node&lt;T&gt; = null; public right: Node&lt;T&gt; = null; constructor(public value: T) { this.value = value; } public toString() { return `${this.value}`; } } class BinarySearchTree&lt;T&gt; { protected root: Node&lt;T&gt; = null; /** * @description: insert element */ public insert(value: T) { if (this.root === null) { // edge case: insert into root node this.root = new Node(value); } else { // recursively find the insertion position this.insertNode(this.root, value); } } /** * @description: recursive insertion method */ protected insertNode(node: Node&lt;T&gt;, value: T) { if (compare(value, node.value) === Compare.LessThan) { // If the value is smaller than node.value, go to the left if (node.left === null) { // Baseline condition: the left side is empty and directly assigned node.left = new Node(value); } else { // otherwise recurse this.insertNode(node.left, value); } // If the value is larger than node.value, go to the right } else if (node.right === null) { // Baseline condition: the right side is empty and directly assigned node.right = new Node(value); } else { // otherwise recurse this.insertNode(node.right, value); } } /** * @description: return the root node */ public getRoot() { return this.root; } /** * @description: search element */ public search(value: T) { // call recursive search element method return this.searchNode(this.root, value); } /** * @description: recursive search element method */ private searchNode(node: Node&lt;T&gt;, value: T): boolean { // Baseline condition: return false when null is found if (node === null) { return false; } if (compare(value, node.value) === Compare.LessThan) { // value is smaller than node.value, look left return this.searchNode(node.left, value); } else if (compare(value, node.value) === Compare.BiggerThan) { // value is bigger than node.value, look right return this.searchNode(node.right, value); } // value is equal to node.value, element is found return true; } public inOrderTraverse(callback: Function) { this.inOrderTraverseNode(this.root, callback); } private inOrderTraverseNode(node: Node&lt;T&gt;, callback: Function) { if (node !== null) { this.inOrderTraverseNode(node.left, callback); callback(node.value); this.inOrderTraverseNode(node.right, callback); } } public preOrderTraverse(callback: Function) { this.preOrderTraverseNode(this.root, callback); } private preOrderTraverseNode(node: Node&lt;T&gt;, callback: Function) { if (node !== null) { callback(node.value); this.preOrderTraverseNode(node.left, callback); this.preOrderTraverseNode(node.right, callback); } } postOrderTraverse(callback: Function) { this.postOrderTraverseNode(this.root, callback); } private postOrderTraverseNode(node: Node&lt;T&gt;, callback: Function) { if (node !== null) { this.postOrderTraverseNode(node.left, callback); this.postOrderTraverseNode(node.right, callback); callback(node.value); } } /** * @description: return smallest element in tree */ public min() { // call iterator method return this.minNode(this.root); } /** * @description: returns the smallest element under the specified subtree */ protected minNode(node: Node&lt;T&gt;) { let current = node; // keep looking left while (current !== null &amp;&amp; current.left !== null) { current = current.left; } return current; } /** * @description: return largest element in tree */ public max() { // call iterator method return this.maxNode(this.root); } /** * @description: returns the largest element under the specified subtree */ protected maxNode(node: Node&lt;T&gt;) { let current = node; // keep looking right while (current !== null &amp;&amp; current.right !== null) { current = current.right; } return current; } /** * @description: remove the specified element */ public remove(value: T) { // Call the recursive method, the recursion here is special, and the deleted tree will be returned this.root = this.removeNode(this.root, value); } /** * @description: A recursive method that removes the specified element in the specified subtree. After each processing, the processed node needs to be returned to this node */ protected removeNode(node: Node&lt;T&gt;, value: T) { // baseline condition if (node === null) { return null; } if (compare(value, node.value) === Compare.LessThan) { // When the value is less than node.value, look left node.left = this.removeNode(node.left, value); return node; } else if (compare(value, node.value) === Compare.BiggerThan) { // When the value is greater than node.value, look to the right node.right = this.removeNode(node.right, value); return node; } else { // value is equal to node.value // At this point, the node to be deleted has been found // handle 3 special conditions // case 1: When the node to be deleted is a leaf node if (node.left === null &amp;&amp; node.right === null) { node = null; return node; } // case 2: When the node to delete has only one right child if (node.left === null) { node = node.right; return node; // The same deleted node has only one left child node } else if (node.right === null) { node = node.left; return node; } // case 3: When the node to be deleted has two children const aux = this.minNode(node.right); node.value = aux.value; node.right = this.removeNode(node.right, aux.value); return node; } } } let tree = new BinarySearchTree&lt;number&gt;(); console.log(tree.getRoot()); tree.insert(11); tree.insert(7); tree.insert(15); tree.insert(5); tree.insert(3); tree.insert(9); tree.insert(8); tree.insert(10); tree.insert(13); tree.insert(12); tree.insert(14); tree.insert(20); tree.insert(18); tree.insert(25); console.log(tree.getRoot()); console.log(tree.getRoot().left); console.log(tree.getRoot().right); tree.preOrderTraverse(console.log); tree.inOrderTraverse(console.log); tree.postOrderTraverse(console.log); console.log(tree.search(8)); console.log(tree.search(0)); console.log(tree.min()); console.log(tree.max()); console.log(tree.remove(8)); console.log(tree.search(8));  "},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/swift/","content":"Swift Example /// Chain of Responsibility Design Pattern /// /// Intent: Lets you pass requests along a chain of handlers. Upon receiving a /// request, each handler decides either to process the request or to pass it to /// the next handler in the chain. import XCTest /// The Handler interface declares a method for building the chain of handlers. /// It also declares a method for executing a request. protocol Handler: class { @discardableResult func setNext(handler: Handler) -&gt; Handler func handle(request: String) -&gt; String? var nextHandler: Handler? { get set } } extension Handler { func setNext(handler: Handler) -&gt; Handler { self.nextHandler = handler /// Returning a handler from here will let us link handlers in a /// convenient way like this: /// monkey.setNext(handler: squirrel).setNext(handler: dog) return handler } func handle(request: String) -&gt; String? { return nextHandler?.handle(request: request) } } /// All Concrete Handlers either handle a request or pass it to the next handler /// in the chain. class MonkeyHandler: Handler { var nextHandler: Handler? func handle(request: String) -&gt; String? { if (request == &quot;Banana&quot;) { return &quot;Monkey: I'll eat the &quot; + request + &quot;.\\n&quot; } else { return nextHandler?.handle(request: request) } } } class SquirrelHandler: Handler { var nextHandler: Handler? func handle(request: String) -&gt; String? { if (request == &quot;Nut&quot;) { return &quot;Squirrel: I'll eat the &quot; + request + &quot;.\\n&quot; } else { return nextHandler?.handle(request: request) } } } class DogHandler: Handler { var nextHandler: Handler? func handle(request: String) -&gt; String? { if (request == &quot;MeatBall&quot;) { return &quot;Dog: I'll eat the &quot; + request + &quot;.\\n&quot; } else { return nextHandler?.handle(request: request) } } } /// The client code is usually suited to work with a single handler. In most /// cases, it is not even aware that the handler is part of a chain. class Client { // ... static func someClientCode(handler: Handler) { let food = [&quot;Nut&quot;, &quot;Banana&quot;, &quot;Cup of coffee&quot;] for item in food { print(&quot;Client: Who wants a &quot; + item + &quot;?\\n&quot;) guard let result = handler.handle(request: item) else { print(&quot; &quot; + item + &quot; was left untouched.\\n&quot;) return } print(&quot; &quot; + result) } } // ... } /// Let's see how it all works together. class ChainOfResponsibilityConceptual: XCTestCase { func test() { /// The other part of the client code constructs the actual chain. let monkey = MonkeyHandler() let squirrel = SquirrelHandler() let dog = DogHandler() monkey.setNext(handler: squirrel).setNext(handler: dog) /// The client should be able to send a request to any handler, not just /// the first one in the chain. print(&quot;Chain: Monkey &gt; Squirrel &gt; Dog\\n\\n&quot;) Client.someClientCode(handler: monkey) print() print(&quot;Subchain: Squirrel &gt; Dog\\n\\n&quot;) Client.someClientCode(handler: squirrel) } } Chain: Monkey &gt; Squirrel &gt; Dog Client: Who wants a Nut? Squirrel: I'll eat the Nut. Client: Who wants a Banana? Monkey: I'll eat the Banana. Client: Who wants a Cup of coffee? Cup of coffee was left untouched. Subchain: Squirrel &gt; Dog Client: Who wants a Nut? Squirrel: I'll eat the Nut. Client: Who wants a Banana? Banana was left untouched. ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/typescript/","content":"TypeScript Example /** * Chain of Responsibility Design Pattern * * Intent: Lets you pass requests along a chain of handlers. Upon receiving a * request, each handler decides either to process the request or to pass it to * the next handler in the chain. */ /** * The Handler interface declares a method for building the chain of handlers. * It also declares a method for executing a request. */ interface Handler { setNext(handler: Handler): Handler; handle(request: string): string; } /** * The default chaining behavior can be implemented inside a base handler class. */ abstract class AbstractHandler implements Handler { private nextHandler: Handler; public setNext(handler: Handler): Handler { this.nextHandler = handler; // Returning a handler from here will let us link handlers in a // convenient way like this: // monkey.setNext(squirrel).setNext(dog); return handler; } public handle(request: string): string { if (this.nextHandler) { return this.nextHandler.handle(request); } return null; } } /** * All Concrete Handlers either handle a request or pass it to the next handler * in the chain. */ class MonkeyHandler extends AbstractHandler { public handle(request: string): string { if (request === &quot;Banana&quot;) { return `Monkey: I'll eat the ${request}.`; } return super.handle(request); } } class SquirrelHandler extends AbstractHandler { public handle(request: string): string { if (request === &quot;Nut&quot;) { return `Squirrel: I'll eat the ${request}.`; } return super.handle(request); } } class DogHandler extends AbstractHandler { public handle(request: string): string { if (request === &quot;MeatBall&quot;) { return `Dog: I'll eat the ${request}.`; } return super.handle(request); } } /** * The client code is usually suited to work with a single handler. In most * cases, it is not even aware that the handler is part of a chain. */ function clientCode(handler: Handler) { const foods = [&quot;Nut&quot;, &quot;Banana&quot;, &quot;Cup of coffee&quot;]; for (const food of foods) { console.log(`Client: Who wants a ${food}?`); const result = handler.handle(food); if (result) { console.log(` ${result}`); } else { console.log(` ${food} was left untouched.`); } } } /** * The other part of the client code constructs the actual chain. */ const monkey = new MonkeyHandler(); const squirrel = new SquirrelHandler(); const dog = new DogHandler(); monkey.setNext(squirrel).setNext(dog); /** * The client should be able to send a request to any handler, not just the * first one in the chain. */ console.log(&quot;Chain: Monkey &gt; Squirrel &gt; Dog\\n&quot;); clientCode(monkey); console.log(&quot;&quot;); console.log(&quot;Subchain: Squirrel &gt; Dog\\n&quot;); clientCode(squirrel); Chain: Monkey &gt; Squirrel &gt; Dog Client: Who wants a Nut? Squirrel: I'll eat the Nut. Client: Who wants a Banana? Monkey: I'll eat the Banana. Client: Who wants a Cup of coffee? Cup of coffee was left untouched. Subchain: Squirrel &gt; Dog Client: Who wants a Nut? Squirrel: I'll eat the Nut. Client: Who wants a Banana? Banana was left untouched. Client: Who wants a Cup of coffee? Cup of coffee was left untouched. ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cSharp/","content":"C# Example // Chain of Responsibility Design Pattern // // Intent: Lets you pass requests along a chain of handlers. Upon receiving a // request, each handler decides either to process the request or to pass it to // the next handler in the chain. using System; using System.Collections.Generic; namespace RefactoringGuru.DesignPatterns.ChainOfResponsibility.Conceptual { // The Handler interface declares a method for building the chain of // handlers. It also declares a method for executing a request. public interface IHandler { IHandler SetNext(IHandler handler); object Handle(object request); } // The default chaining behavior can be implemented inside a base handler // class. abstract class AbstractHandler : IHandler { private IHandler _nextHandler; public IHandler SetNext(IHandler handler) { this._nextHandler = handler; // Returning a handler from here will let us link handlers in a // convenient way like this: // monkey.SetNext(squirrel).SetNext(dog); return handler; } public virtual object Handle(object request) { if (this._nextHandler != null) { return this._nextHandler.Handle(request); } else { return null; } } } class MonkeyHandler : AbstractHandler { public override object Handle(object request) { if ((request as string) == &quot;Banana&quot;) { return $&quot;Monkey: I'll eat the {request.ToString()}.\\n&quot;; } else { return base.Handle(request); } } } class SquirrelHandler : AbstractHandler { public override object Handle(object request) { if (request.ToString() == &quot;Nut&quot;) { return $&quot;Squirrel: I'll eat the {request.ToString()}.\\n&quot;; } else { return base.Handle(request); } } } class DogHandler : AbstractHandler { public override object Handle(object request) { if (request.ToString() == &quot;MeatBall&quot;) { return $&quot;Dog: I'll eat the {request.ToString()}.\\n&quot;; } else { return base.Handle(request); } } } class Client { // The client code is usually suited to work with a single handler. In // most cases, it is not even aware that the handler is part of a chain. public static void ClientCode(AbstractHandler handler) { foreach (var food in new List&lt;string&gt; { &quot;Nut&quot;, &quot;Banana&quot;, &quot;Cup of coffee&quot; }) { Console.WriteLine($&quot;Client: Who wants a {food}?&quot;); var result = handler.Handle(food); if (result != null) { Console.Write($&quot; {result}&quot;); } else { Console.WriteLine($&quot; {food} was left untouched.&quot;); } } } } class Program { static void Main(string[] args) { // The other part of the client code constructs the actual chain. var monkey = new MonkeyHandler(); var squirrel = new SquirrelHandler(); var dog = new DogHandler(); monkey.SetNext(squirrel).SetNext(dog); // The client should be able to send a request to any handler, not // just the first one in the chain. Console.WriteLine(&quot;Chain: Monkey &gt; Squirrel &gt; Dog\\n&quot;); Client.ClientCode(monkey); Console.WriteLine(); Console.WriteLine(&quot;Subchain: Squirrel &gt; Dog\\n&quot;); Client.ClientCode(squirrel); } } } Chain: Monkey &gt; Squirrel &gt; Dog Client: Who wants a Nut? Squirrel: I'll eat the Nut. Client: Who wants a Banana? Monkey: I'll eat the Banana. Client: Who wants a Cup of coffee? Cup of coffee was left untouched. Subchain: Squirrel &gt; Dog Client: Who wants a Nut? Squirrel: I'll eat the Nut. Client: Who wants a Banana? Banana was left untouched. Client: Who wants a Cup of coffee? Cup of coffee was left untouched. ","keywords":""},{"title":"Command","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/","content":"","keywords":""},{"title":"Why use the Command pattern​","type":1,"pageTitle":"Command","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/#why-use-the-command-pattern","content":"By using the command pattern in our programs and applications, we are able to incorporate functionalities (such as queueing, request logging, and undo/redo operations) with a lot of easeThis is because each request is an independent entity from other classes and objectstherefore, we can modify or update a request without worrying about affecting other requests or objects "},{"title":"Analogy​","type":1,"pageTitle":"Command","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/#analogy","content":""},{"title":"in a restaurant​","type":1,"pageTitle":"Command","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/#in-a-restaurant","content":"the Client is the customerthe Invoker is the waiter that writes the paper order that is given from the clientthe waiter then gives the paper orders as a form of command to the chefs in the kitchenthe receiver is the chefs in the kitchen that takes the command and then prepares the meal "},{"title":"Structure​","type":1,"pageTitle":"Command","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/#structure","content":" The Sender class (aka invoker) is responsible for initiating requests. This class must have a field for storing a reference to a command object.The sender triggers that command instead of sending the request directly to the receiver.Note that the sender isn’t responsible for creating the command object.Usually, it gets a pre-created command from the client via the constructor. The Command interface usually declares just a single method for executing the command.Concrete Commands implement various kinds of requests. A concrete command isn’t supposed to perform the work on its own, but rather to pass the call to one of the business logic objects.However, for the sake of simplifying the code, these classes can be merged. Parameters required to execute a method on a receiving object can be declared as fields in the concrete command. You can make command objects immutable by only allowing the initialization of these fields via the constructor. The Receiver class contains some business logic. Almost any object may act as a receiver.Most commands only handle the details of how a request is passed to the receiver, while the receiver itself does the actual work. The Client creates and configures concrete command objects. The client must pass all of the request parameters, including a receiver instance, into the command’s constructor.After that, the resulting command may be associated with one or multiple senders. "},{"title":"When to apply​","type":1,"pageTitle":"Command","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/#when-to-apply","content":"when you want to parametrize objects with operations The Command pattern can turn a specific method call into a stand-alone objectThis change opens up a lot of interesting uses: you can pass commands as method arguments, store them inside other objects, switch linked commands at runtime, etc.example: you're developing a GUI component such as a context menu, and you want your users to be able to configure menu items that trigger operations when an end user clicks an item when you want to queue operations, schedule their execution, or execute them remotely As with any other object, a command can be serialized, which means converting it to a string that can be easily written to a file or a databaseLater, the string can be restored as the initial command objectThus, you can delay and schedule command executionIn the same way, you can queue, log or send commands over the network when you want to implement reversible operations Although there are many ways to implement undo/redo, the Command pattern is perhaps the most popular of allTo be able to revert operations, you need to implement the history of performed operationsThe command history is a stack that contains all executed command objects along with related backups of the application's stateThis method has two drawbacks First, it isn't that easy to save an application's state because some of it can be private This problem can be mitigated with the Memento pattern Second, the state backups may consume quite a lot of RAM Therefore, sometimes you can resort to an alternative implementation instead of restoring the past state, the command performs the inverse operation The reverse operation also has a price it may turn out to be hard or even impossible to implement "},{"title":"Pros and Cons​","type":1,"pageTitle":"Command","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/#pros-and-cons","content":"pros\tconsdecoupling classes that invoke operations from classes that perform these operations (Single Responsibility)\tthe code may become more complicated since you're introducing a whole new layer between senders and receivers introducing new commands into the app without breaking existing client code (Open/Closed) implementing undo/redo implementing deferred execution of operations assembling a set of simple commands into a complex one\t "},{"title":"Example​","type":1,"pageTitle":"Command","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/#example","content":"abstract class Command { protected app: Application; protected editor: Editor; protected backup: string; constructor(app: Application, editor: Editor) { this.app = app; this.editor = editor; } saveBackup() { this.backup = this.editor.text; } undo() { this.editor.text = this.backup; } abstract execute(); }  class CopyCommand extends Command { execute() { this.app.clipboard = this.editor.getSelection(); } } class PasteCommand extends Command { execute() { this.saveBackup(); this.editor.replaceSelection(this.app.clipboard); } } class CommandHistory { private history: Command[]; push(c: Command) { this.history.push(c); } pop(): Command { return this.history[this.history.length - 1]; } } class Editor { text: string; getSelection() { return &quot;some selection&quot;; } replaceSelection(clipboard) { return `some ${clipboard} selection`; } }  class Application { clipboard: string; editor: Editor; activeEditor: Editor; history: CommandHistory; bindComands() { shortcuts.onkeypress(&quot;Ctrl+C&quot;, () =&gt; { return this.executeCommand(new CopyCommand(this, this.editor)); }); shortcuts.onkeypress(&quot;Ctrl+V&quot;, () =&gt; { return this.executeCommand(new PasteCommand(this, this.editor)); }); } executeCommand(command: Command) { this.history.push(command); command.execute(); } undo() { const command = this.history.pop(); command.undo(); } }  "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; #include &lt;string&gt; /** * Command Design Pattern * * Intent: Turns a request into a stand-alone object that contains all * information about the request. This transformation lets you parameterize * methods with different requests, delay or queue a request's execution, and * support undoable operations. */ /** * The Command interface declares a method for executing a command. */ class Command { public: virtual ~Command() { } virtual void Execute() const = 0; }; /** * Some commands can implement simple operations on their own. */ class SimpleCommand : public Command { private: std::string pay_load_; public: explicit SimpleCommand(std::string pay_load) : pay_load_(pay_load) { } void Execute() const override { std::cout &lt;&lt; &quot;SimpleCommand: See, I can do simple things like printing (&quot; &lt;&lt; this-&gt;pay_load_ &lt;&lt; &quot;)\\n&quot;; } }; /** * The Receiver classes contain some important business logic. They know how to * perform all kinds of operations, associated with carrying out a request. In * fact, any class may serve as a Receiver. */ class Receiver { public: void DoSomething(const std::string &amp;a) { std::cout &lt;&lt; &quot;Receiver: Working on (&quot; &lt;&lt; a &lt;&lt; &quot;.)\\n&quot;; } void DoSomethingElse(const std::string &amp;b) { std::cout &lt;&lt; &quot;Receiver: Also working on (&quot; &lt;&lt; b &lt;&lt; &quot;.)\\n&quot;; } }; /** * However, some commands can delegate more complex operations to other objects, * called &quot;receivers.&quot; */ class ComplexCommand : public Command { /** * @var Receiver */ private: Receiver *receiver_; /** * Context data, required for launching the receiver's methods. */ std::string a_; std::string b_; /** * Complex commands can accept one or several receiver objects along with any * context data via the constructor. */ public: ComplexCommand(Receiver *receiver, std::string a, std::string b) : receiver_(receiver), a_(a), b_(b) { } /** * Commands can delegate to any methods of a receiver. */ void Execute() const override { std::cout &lt;&lt; &quot;ComplexCommand: Complex stuff should be done by a receiver object.\\n&quot;; this-&gt;receiver_-&gt;DoSomething(this-&gt;a_); this-&gt;receiver_-&gt;DoSomethingElse(this-&gt;b_); } }; /** * The Invoker is associated with one or several commands. It sends a request to * the command. */ class Invoker { /** * @var Command */ private: Command *on_start_; /** * @var Command */ Command *on_finish_; /** * Initialize commands. */ public: ~Invoker() { delete on_start_; delete on_finish_; } void SetOnStart(Command *command) { this-&gt;on_start_ = command; } void SetOnFinish(Command *command) { this-&gt;on_finish_ = command; } /** * The Invoker does not depend on concrete command or receiver classes. The * Invoker passes a request to a receiver indirectly, by executing a command. */ void DoSomethingImportant() { std::cout &lt;&lt; &quot;Invoker: Does anybody want something done before I begin?\\n&quot;; if (this-&gt;on_start_) { this-&gt;on_start_-&gt;Execute(); } std::cout &lt;&lt; &quot;Invoker: ...doing something really important...\\n&quot;; std::cout &lt;&lt; &quot;Invoker: Does anybody want something done after I finish?\\n&quot;; if (this-&gt;on_finish_) { this-&gt;on_finish_-&gt;Execute(); } } }; /** * The client code can parameterize an invoker with any commands. */ int main() { Invoker *invoker = new Invoker; invoker-&gt;SetOnStart(new SimpleCommand(&quot;Say Hi!&quot;)); Receiver *receiver = new Receiver; invoker-&gt;SetOnFinish(new ComplexCommand(receiver, &quot;Send email&quot;, &quot;Save report&quot;)); invoker-&gt;DoSomethingImportant(); delete invoker; delete receiver; return 0; } Invoker: Does anybody want something done before I begin? SimpleCommand: See, I can do simple things like printing (Say Hi!) Invoker: ...doing something really important... Invoker: Does anybody want something done after I finish? ComplexCommand: Complex stuff should be done by a receiver object. Receiver: Working on (Send email.) Receiver: Also working on (Save report.) ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/cSharp/","content":"C# Example // Command Design Pattern // // Intent: Turns a request into a stand-alone object that contains all // information about the request. This transformation lets you parameterize // methods with different requests, delay or queue a request's execution, and // support undoable operations. using System; namespace RefactoringGuru.DesignPatterns.Command.Conceptual { // The Command interface declares a method for executing a command. public interface ICommand { void Execute(); } // Some commands can implement simple operations on their own. class SimpleCommand : ICommand { private string _payload = string.Empty; public SimpleCommand(string payload) { this._payload = payload; } public void Execute() { Console.WriteLine($&quot;SimpleCommand: See, I can do simple things like printing ({this._payload})&quot;); } } // However, some commands can delegate more complex operations to other // objects, called &quot;receivers.&quot; class ComplexCommand : ICommand { private Receiver _receiver; // Context data, required for launching the receiver's methods. private string _a; private string _b; // Complex commands can accept one or several receiver objects along // with any context data via the constructor. public ComplexCommand(Receiver receiver, string a, string b) { this._receiver = receiver; this._a = a; this._b = b; } // Commands can delegate to any methods of a receiver. public void Execute() { Console.WriteLine(&quot;ComplexCommand: Complex stuff should be done by a receiver object.&quot;); this._receiver.DoSomething(this._a); this._receiver.DoSomethingElse(this._b); } } // The Receiver classes contain some important business logic. They know how // to perform all kinds of operations, associated with carrying out a // request. In fact, any class may serve as a Receiver. class Receiver { public void DoSomething(string a) { Console.WriteLine($&quot;Receiver: Working on ({a}.)&quot;); } public void DoSomethingElse(string b) { Console.WriteLine($&quot;Receiver: Also working on ({b}.)&quot;); } } // The Invoker is associated with one or several commands. It sends a // request to the command. class Invoker { private ICommand _onStart; private ICommand _onFinish; // Initialize commands. public void SetOnStart(ICommand command) { this._onStart = command; } public void SetOnFinish(ICommand command) { this._onFinish = command; } // The Invoker does not depend on concrete command or receiver classes. // The Invoker passes a request to a receiver indirectly, by executing a // command. public void DoSomethingImportant() { Console.WriteLine(&quot;Invoker: Does anybody want something done before I begin?&quot;); if (this._onStart is ICommand) { this._onStart.Execute(); } Console.WriteLine(&quot;Invoker: ...doing something really important...&quot;); Console.WriteLine(&quot;Invoker: Does anybody want something done after I finish?&quot;); if (this._onFinish is ICommand) { this._onFinish.Execute(); } } } class Program { static void Main(string[] args) { // The client code can parameterize an invoker with any commands. Invoker invoker = new Invoker(); invoker.SetOnStart(new SimpleCommand(&quot;Say Hi!&quot;)); Receiver receiver = new Receiver(); invoker.SetOnFinish(new ComplexCommand(receiver, &quot;Send email&quot;, &quot;Save report&quot;)); invoker.DoSomethingImportant(); } } } Invoker: Does anybody want something done before I begin? SimpleCommand: See, I can do simple things like printing (Say Hi!) Invoker: ...doing something really important... Invoker: Does anybody want something done after I finish? ComplexCommand: Complex stuff should be done by a receiver object. Receiver: Working on (Send email.) Receiver: Also working on (Save report.) ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/go/","content":"Go Example package main type button struct { command command } func (b *button) press() { b.command.execute() } package main type command interface { execute() } package main type device interface { on() off() } package main type offCommand struct { device device } func (c *offCommand) execute() { c.device.off() } package main type onCommand struct { device device } func (c *onCommand) execute() { c.device.on() } package main import &quot;fmt&quot; type tv struct { isRunning bool } func (t *tv) on() { t.isRunning = true fmt.Println(&quot;Turning tv on&quot;) } func (t *tv) off() { t.isRunning = false fmt.Println(&quot;Turning tv off&quot;) } package main func main() { tv := &amp;tv{} onCommand := &amp;onCommand{ device: tv, } offCommand := &amp;offCommand{ device: tv, } onButton := &amp;button{ command: onCommand, } onButton.press() offButton := &amp;button{ command: offCommand, } offButton.press() } Turning tv on Turning tv off ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/swift/example2","content":"Example 2 import Foundation import UIKit import XCTest protocol Handler { var next: Handler? { get } func handle(_ request: Request) -&gt; LocalizedError? } class BaseHandler: Handler { var next: Handler? init(with handler: Handler? = nil) { self.next = handler } func handle(_ request: Request) -&gt; LocalizedError? { return next?.handle(request) } } class LoginHandler: BaseHandler { override func handle(_ request: Request) -&gt; LocalizedError? { guard request.email?.isEmpty == false else { return AuthError.emptyEmail } guard request.password?.isEmpty == false else { return AuthError.emptyPassword } return next?.handle(request) } } class SignUpHandler: BaseHandler { private struct Limit { static let passwordLength = 8 } override func handle(_ request: Request) -&gt; LocalizedError? { guard request.email?.contains(&quot;@&quot;) == true else { return AuthError.invalidEmail } guard (request.password?.count ?? 0) &gt;= Limit.passwordLength else { return AuthError.invalidPassword } guard request.password == request.repeatedPassword else { return AuthError.differentPasswords } return next?.handle(request) } } class LocationHandler: BaseHandler { override func handle(_ request: Request) -&gt; LocalizedError? { guard isLocationEnabled() else { return AuthError.locationDisabled } return next?.handle(request) } func isLocationEnabled() -&gt; Bool { return true /// Calls special method } } class NotificationHandler: BaseHandler { override func handle(_ request: Request) -&gt; LocalizedError? { guard isNotificationsEnabled() else { return AuthError.notificationsDisabled } return next?.handle(request) } func isNotificationsEnabled() -&gt; Bool { return false /// Calls special method } } enum AuthError: LocalizedError { case emptyFirstName case emptyLastName case emptyEmail case emptyPassword case invalidEmail case invalidPassword case differentPasswords case locationDisabled case notificationsDisabled var errorDescription: String? { switch self { case .emptyFirstName: return &quot;First name is empty&quot; case .emptyLastName: return &quot;Last name is empty&quot; case .emptyEmail: return &quot;Email is empty&quot; case .emptyPassword: return &quot;Password is empty&quot; case .invalidEmail: return &quot;Email is invalid&quot; case .invalidPassword: return &quot;Password is invalid&quot; case .differentPasswords: return &quot;Password and repeated password should be equal&quot; case .locationDisabled: return &quot;Please turn location services on&quot; case .notificationsDisabled: return &quot;Please turn notifications on&quot; } } } protocol Request { var firstName: String? { get } var lastName: String? { get } var email: String? { get } var password: String? { get } var repeatedPassword: String? { get } } extension Request { /// Default implementations var firstName: String? { return nil } var lastName: String? { return nil } var email: String? { return nil } var password: String? { return nil } var repeatedPassword: String? { return nil } } struct SignUpRequest: Request { var firstName: String? var lastName: String? var email: String? var password: String? var repeatedPassword: String? } struct LoginRequest: Request { var email: String? var password: String? } protocol AuthHandlerSupportable: AnyObject { var handler: Handler? { get set } } class BaseAuthViewController: UIViewController, AuthHandlerSupportable { /// Base class or extensions can be used to implement a base behavior var handler: Handler? init(handler: Handler) { self.handler = handler super.init(nibName: nil, bundle: nil) } required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) } } class LoginViewController: BaseAuthViewController { func loginButtonSelected() { print(&quot;Login View Controller: User selected Login button&quot;) let request = LoginRequest(email: &quot;smth@gmail.com&quot;, password: &quot;123HardPass&quot;) if let error = handler?.handle(request) { print(&quot;Login View Controller: something went wrong&quot;) print(&quot;Login View Controller: Error -&gt; &quot; + (error.errorDescription ?? &quot;&quot;)) } else { print(&quot;Login View Controller: Preconditions are successfully validated&quot;) } } } class SignUpViewController: BaseAuthViewController { func signUpButtonSelected() { print(&quot;SignUp View Controller: User selected SignUp button&quot;) let request = SignUpRequest(firstName: &quot;Vasya&quot;, lastName: &quot;Pupkin&quot;, email: &quot;vasya.pupkin@gmail.com&quot;, password: &quot;123HardPass&quot;, repeatedPassword: &quot;123HardPass&quot;) if let error = handler?.handle(request) { print(&quot;SignUp View Controller: something went wrong&quot;) print(&quot;SignUp View Controller: Error -&gt; &quot; + (error.errorDescription ?? &quot;&quot;)) } else { print(&quot;SignUp View Controller: Preconditions are successfully validated&quot;) } } } class ChainOfResponsibilityRealWorld: XCTestCase { func testChainOfResponsibilityRealWorld() { print(&quot;Client: Let's test Login flow!&quot;) let loginHandler = LoginHandler(with: LocationHandler()) let loginController = LoginViewController(handler: loginHandler) loginController.loginButtonSelected() print(&quot;\\nClient: Let's test SignUp flow!&quot;) let signUpHandler = SignUpHandler(with: LocationHandler(with: NotificationHandler())) let signUpController = SignUpViewController(handler: signUpHandler) signUpController.signUpButtonSelected() } } Client: Let's test Login flow! Login View Controller: User selected Login button Login View Controller: Preconditions are successfully validated Client: Let's test SignUp flow! SignUp View Controller: User selected SignUp button SignUp View Controller: something went wrong SignUp View Controller: Error -&gt; Please turn notifications on ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/java/","content":"Java Example middleware middleware/Middleware.java package refactoring_guru.chain_of_responsibility.example.middleware; /** * Base middleware class. */ public abstract class Middleware { private Middleware next; /** * Builds chains of middleware objects. */ public Middleware linkWith(Middleware next) { this.next = next; return next; } /** * Subclasses will implement this method with concrete checks. */ public abstract boolean check(String email, String password); /** * Runs check on the next object in chain or ends traversing if we're in * last object in chain. */ protected boolean checkNext(String email, String password) { if (next == null) { return true; } return next.check(email, password); } } middleware/RoleCheckMiddleware.java package refactoring_guru.chain_of_responsibility.example.middleware; /** * ConcreteHandler. Checks a user's role. */ public class RoleCheckMiddleware extends Middleware { public boolean check(String email, String password) { if (email.equals(&quot;admin@example.com&quot;)) { System.out.println(&quot;Hello, admin!&quot;); return true; } System.out.println(&quot;Hello, user!&quot;); return checkNext(email, password); } } middleware/ThrottlingMiddleware.java package refactoring_guru.chain_of_responsibility.example.middleware; /** * ConcreteHandler. Checks whether there are too many failed login requests. */ public class ThrottlingMiddleware extends Middleware { private int requestPerMinute; private int request; private long currentTime; public ThrottlingMiddleware(int requestPerMinute) { this.requestPerMinute = requestPerMinute; this.currentTime = System.currentTimeMillis(); } /** * Please, not that checkNext() call can be inserted both in the beginning * of this method and in the end. * * This gives much more flexibility than a simple loop over all middleware * objects. For instance, an element of a chain can change the order of * checks by running its check after all other checks. */ public boolean check(String email, String password) { if (System.currentTimeMillis() &gt; currentTime + 60_000) { request = 0; currentTime = System.currentTimeMillis(); } request++; if (request &gt; requestPerMinute) { System.out.println(&quot;Request limit exceeded!&quot;); Thread.currentThread().stop(); } return checkNext(email, password); } } middleware/UserExistsMiddleware.java package refactoring_guru.chain_of_responsibility.example.middleware; import refactoring_guru.chain_of_responsibility.example.server.Server; /** * ConcreteHandler. Checks whether a user with the given credentials exists. */ public class UserExistsMiddleware extends Middleware { private Server server; public UserExistsMiddleware(Server server) { this.server = server; } public boolean check(String email, String password) { if (!server.hasEmail(email)) { System.out.println(&quot;This email is not registered!&quot;); return false; } if (!server.isValidPassword(email, password)) { System.out.println(&quot;Wrong password!&quot;); return false; } return checkNext(email, password); } } server server/Server.java package refactoring_guru.chain_of_responsibility.example.server; import refactoring_guru.chain_of_responsibility.example.middleware.Middleware; import java.util.HashMap; import java.util.Map; /** * Server class. */ public class Server { private Map&lt;String, String&gt; users = new HashMap&lt;&gt;(); private Middleware middleware; /** * Client passes a chain of object to server. This improves flexibility and * makes testing the server class easier. */ public void setMiddleware(Middleware middleware) { this.middleware = middleware; } /** * Server gets email and password from client and sends the authorization * request to the chain. */ public boolean logIn(String email, String password) { if (middleware.check(email, password)) { System.out.println(&quot;Authorization have been successful!&quot;); // Do something useful here for authorized users. return true; } return false; } public void register(String email, String password) { users.put(email, password); } public boolean hasEmail(String email) { return users.containsKey(email); } public boolean isValidPassword(String email, String password) { return users.get(email).equals(password); } } Demo.java package refactoring_guru.chain_of_responsibility.example; import refactoring_guru.chain_of_responsibility.example.middleware.Middleware; import refactoring_guru.chain_of_responsibility.example.middleware.RoleCheckMiddleware; import refactoring_guru.chain_of_responsibility.example.middleware.ThrottlingMiddleware; import refactoring_guru.chain_of_responsibility.example.middleware.UserExistsMiddleware; import refactoring_guru.chain_of_responsibility.example.server.Server; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; /** * Demo class. Everything comes together here. */ public class Demo { private static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); private static Server server; private static void init() { server = new Server(); server.register(&quot;admin@example.com&quot;, &quot;admin_pass&quot;); server.register(&quot;user@example.com&quot;, &quot;user_pass&quot;); // All checks are linked. Client can build various chains using the same // components. Middleware middleware = new ThrottlingMiddleware(2); middleware.linkWith(new UserExistsMiddleware(server)) .linkWith(new RoleCheckMiddleware()); // Server gets a chain from client code. server.setMiddleware(middleware); } public static void main(String[] args) throws IOException { init(); boolean success; do { System.out.print(&quot;Enter email: &quot;); String email = reader.readLine(); System.out.print(&quot;Input password: &quot;); String password = reader.readLine(); success = server.logIn(email, password); } while (!success); } } Enter email: admin@example.com Input password: admin_pass Hello, admin! Authorization have been successful! Enter email: user@example.com Input password: user_pass Hello, user! Authorization have been successful! ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/javascript/","content":"JavaScript Example class RemoteController { setCommand(onCommand, offCommand) { this.onCommand = onCommand; this.offCommand = offCommand; } clickOnButton() { this.onCommand.execute(); } clickOffButton() { this.offCommand.execute(); } } module.exports = RemoteController; class TelevisionOffCommand { constructor(television) { this.television = television; } execute() { this.television.off(); } undo() { this.television.on(); } } module.exports = TelevisionOffCommand; class TelevisionOnCommand { constructor(television) { this.television = television; } execute() { this.television.on(); } undo() { this.television.off(); } } module.exports = TelevisionOnCommand; class Television { constructor() { this.state = false; } on() { this.state = true; } off() { this.state = false; } } module.exports = Television; const Television = require(&quot;./TelevisionReceiver&quot;); const TelevisionOnCommand = require(&quot;./TelevisionOnCommand&quot;); const TelevisionOffCommand = require(&quot;./TelevisionOffCommand&quot;); const RemoteController = require(&quot;./RemoteControllerInvoker&quot;); const television = new Television(); const televisionOnCommand = new TelevisionOnCommand(television); const televisionOffCommand = new TelevisionOffCommand(television); const remote = new RemoteController(); remote.setCommand(televisionOnCommand, televisionOffCommand); console.log(&quot;state of television before remote is used:&quot;, television.state); remote.clickOnButton(); console.log( &quot;state of television after remote is used with on click:&quot;, television.state ); remote.clickOffButton(); console.log( &quot;state of television after remote is used with off click:&quot;, television.state ); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/python/","content":"Python Example &quot;&quot;&quot; Command Design Pattern Intent: Turns a request into a stand-alone object that contains all information about the request. This transformation lets you parameterize methods with different requests, delay or queue a request's execution, and support undoable operations. &quot;&quot;&quot; from __future__ import annotations from abc import ABC, abstractmethod class Command(ABC): &quot;&quot;&quot; The Command interface declares a method for executing a command. &quot;&quot;&quot; @abstractmethod def execute(self) -&gt; None: pass class SimpleCommand(Command): &quot;&quot;&quot; Some commands can implement simple operations on their own. &quot;&quot;&quot; def __init__(self, payload: str) -&gt; None: self._payload = payload def execute(self) -&gt; None: print(f&quot;SimpleCommand: See, I can do simple things like printing&quot; f&quot;({self._payload})&quot;) class ComplexCommand(Command): &quot;&quot;&quot; However, some commands can delegate more complex operations to other objects, called &quot;receivers.&quot; &quot;&quot;&quot; def __init__(self, receiver: Receiver, a: str, b: str) -&gt; None: &quot;&quot;&quot; Complex commands can accept one or several receiver objects along with any context data via the constructor. &quot;&quot;&quot; self._receiver = receiver self._a = a self._b = b def execute(self) -&gt; None: &quot;&quot;&quot; Commands can delegate to any methods of a receiver. &quot;&quot;&quot; print(&quot;ComplexCommand: Complex stuff should be done by a receiver object&quot;, end=&quot;&quot;) self._receiver.do_something(self._a) self._receiver.do_something_else(self._b) class Receiver: &quot;&quot;&quot; The Receiver classes contain some important business logic. They know how to perform all kinds of operations, associated with carrying out a request. In fact, any class may serve as a Receiver. &quot;&quot;&quot; def do_something(self, a: str) -&gt; None: print(f&quot;\\nReceiver: Working on ({a}.)&quot;, end=&quot;&quot;) def do_something_else(self, b: str) -&gt; None: print(f&quot;\\nReceiver: Also working on ({b}.)&quot;, end=&quot;&quot;) class Invoker: &quot;&quot;&quot; The Invoker is associated with one or several commands. It sends a request to the command. &quot;&quot;&quot; _on_start = None _on_finish = None &quot;&quot;&quot; Initialize commands. &quot;&quot;&quot; def set_on_start(self, command: Command): self._on_start = command def set_on_finish(self, command: Command): self._on_finish = command def do_something_important(self) -&gt; None: &quot;&quot;&quot; The Invoker does not depend on concrete command or receiver classes. The Invoker passes a request to a receiver indirectly, by executing a command. &quot;&quot;&quot; print(&quot;Invoker: Does anybody want something done before I begin?&quot;) if isinstance(self._on_start, Command): self._on_start.execute() print(&quot;Invoker: ...doing something really important...&quot;) print(&quot;Invoker: Does anybody want something done after I finish?&quot;) if isinstance(self._on_finish, Command): self._on_finish.execute() if __name__ == &quot;__main__&quot;: &quot;&quot;&quot; The client code can parameterize an invoker with any commands. &quot;&quot;&quot; invoker = Invoker() invoker.set_on_start(SimpleCommand(&quot;Say Hi!&quot;)) receiver = Receiver() invoker.set_on_finish(ComplexCommand( receiver, &quot;Send email&quot;, &quot;Save report&quot;)) invoker.do_something_important() Invoker: Does anybody want something done before I begin? SimpleCommand: See, I can do simple things like printing (Say Hi!) Invoker: ...doing something really important... Invoker: Does anybody want something done after I finish? ComplexCommand: Complex stuff should be done by a receiver object Receiver: Working on (Send email.) Receiver: Also working on (Save report.) ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/python/example2","content":"Example 2 class RemoteControllerInvoker: def set_command(self, on_command, off_command): self.on_command = on_command self.off_command = off_command def click_on_button(self): self.on_command.execute() def click_off_button(self): self.off_command.execute() class TelevisionOffCommand: def __init__(self, television): self.television = television def execute(self): self.television.off() def undo(self): self.television.on() class TelevisionOnCommand: def __init__(self, television): self.television = television def execute(self): self.television.on() def undo(self): self.television.off() class TelevisionReceiver: def __init__(self): self.state = False def on(self): self.state = True def off(self): self.state = False from RemoteControllerInvoker import RemoteControllerInvoker as RemoteController from TelevisionOffCommand import TelevisionOffCommand from TelevisionOnCommand import TelevisionOnCommand from TelevisionReceiver import TelevisionReceiver as Television if __name__ == &quot;__main__&quot;: television = Television() television_on_command = TelevisionOnCommand(television) television_off_command = TelevisionOffCommand(television) remote = RemoteController() remote.set_command(television_on_command, television_off_command) print(&quot;state of television before remote is used:&quot;, television.state) remote.click_on_button() print(&quot;state of television after remote is used with on click:&quot;, television.state) remote.click_off_button() print(&quot;state of television after remote is used with off click:&quot;, television.state) ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/swift/","content":"Swift Example /// Command Design Pattern /// /// Intent: Turns a request into a stand-alone object that contains all /// information about the request. This transformation lets you parameterize /// methods with different requests, delay or queue a request's execution, and /// support undoable operations. import XCTest /// The Command interface declares a method for executing a command. protocol Command { func execute() } /// Some commands can implement simple operations on their own. class SimpleCommand: Command { private var payload: String init(_ payload: String) { self.payload = payload } func execute() { print(&quot;SimpleCommand: See, I can do simple things like printing (&quot; + payload + &quot;)&quot;) } } /// However, some commands can delegate more complex operations to other /// objects, called &quot;receivers.&quot; class ComplexCommand: Command { private var receiver: Receiver /// Context data, required for launching the receiver's methods. private var a: String private var b: String /// Complex commands can accept one or several receiver objects along with /// any context data via the constructor. init(_ receiver: Receiver, _ a: String, _ b: String) { self.receiver = receiver self.a = a self.b = b } /// Commands can delegate to any methods of a receiver. func execute() { print(&quot;ComplexCommand: Complex stuff should be done by a receiver object.\\n&quot;) receiver.doSomething(a) receiver.doSomethingElse(b) } } /// The Receiver classes contain some important business logic. They know how to /// perform all kinds of operations, associated with carrying out a request. In /// fact, any class may serve as a Receiver. class Receiver { func doSomething(_ a: String) { print(&quot;Receiver: Working on (&quot; + a + &quot;)\\n&quot;) } func doSomethingElse(_ b: String) { print(&quot;Receiver: Also working on (&quot; + b + &quot;)\\n&quot;) } } /// The Invoker is associated with one or several commands. It sends a request /// to the command. class Invoker { private var onStart: Command? private var onFinish: Command? /// Initialize commands. func setOnStart(_ command: Command) { onStart = command } func setOnFinish(_ command: Command) { onFinish = command } /// The Invoker does not depend on concrete command or receiver classes. The /// Invoker passes a request to a receiver indirectly, by executing a /// command. func doSomethingImportant() { print(&quot;Invoker: Does anybody want something done before I begin?&quot;) onStart?.execute() print(&quot;Invoker: ...doing something really important...&quot;) print(&quot;Invoker: Does anybody want something done after I finish?&quot;) onFinish?.execute() } } /// Let's see how it all comes together. class CommandConceptual: XCTestCase { func test() { /// The client code can parameterize an invoker with any commands. let invoker = Invoker() invoker.setOnStart(SimpleCommand(&quot;Say Hi!&quot;)) let receiver = Receiver() invoker.setOnFinish(ComplexCommand(receiver, &quot;Send email&quot;, &quot;Save report&quot;)) invoker.doSomethingImportant() } } Invoker: Does anybody want something done before I begin? SimpleCommand: See, I can do simple things like printing (Say Hi!) Invoker: ...doing something really important... Invoker: Does anybody want something done after I finish? ComplexCommand: Complex stuff should be done by a receiver object. Receiver: Working on (Send email) Receiver: Also working on (Save report) ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/swift/example2","content":"Example 2 import Foundation import XCTest class DelayedOperation: Operation { private var delay: TimeInterval init(_ delay: TimeInterval = 0) { self.delay = delay } override var isExecuting : Bool { get { return _executing } set { willChangeValue(forKey: &quot;isExecuting&quot;) _executing = newValue didChangeValue(forKey: &quot;isExecuting&quot;) } } private var _executing : Bool = false override var isFinished : Bool { get { return _finished } set { willChangeValue(forKey: &quot;isFinished&quot;) _finished = newValue didChangeValue(forKey: &quot;isFinished&quot;) } } private var _finished : Bool = false override func start() { guard delay &gt; 0 else { _start() return } let deadline = DispatchTime.now() + delay DispatchQueue(label: &quot;&quot;).asyncAfter(deadline: deadline) { self._start() } } private func _start() { guard !self.isCancelled else { print(&quot;\\(self): operation is canceled&quot;) self.isFinished = true return } self.isExecuting = true self.main() self.isExecuting = false self.isFinished = true } } class WindowOperation: DelayedOperation { override func main() { print(&quot;\\(self): Windows are closed via HomeKit.&quot;) } override var description: String { return &quot;WindowOperation&quot; } } class DoorOperation: DelayedOperation { override func main() { print(&quot;\\(self): Doors are closed via HomeKit.&quot;) } override var description: String { return &quot;DoorOperation&quot; } } class TaxiOperation: DelayedOperation { override func main() { print(&quot;\\(self): Taxi is ordered via Uber&quot;) } override var description: String { return &quot;TaxiOperation&quot; } } class CommandRealWorld: XCTestCase { func testCommandRealWorld() { prepareTestEnvironment { let siri = SiriShortcuts.shared print(&quot;User: Hey Siri, I am leaving my home&quot;) siri.perform(.leaveHome) print(&quot;User: Hey Siri, I am leaving my work in 3 minutes&quot;) siri.perform(.leaveWork, delay: 3) /// for simplicity, we use seconds print(&quot;User: Hey Siri, I am still working&quot;) siri.cancel(.leaveWork) } } } extension CommandRealWorld { struct ExecutionTime { static let max: TimeInterval = 5 static let waiting: TimeInterval = 4 } func prepareTestEnvironment(_ execution: () -&gt; ()) { /// This method tells Xcode to wait for async operations. Otherwise the /// main test is done immediately. let expectation = self.expectation(description: &quot;Expectation for async operations&quot;) let deadline = DispatchTime.now() + ExecutionTime.waiting DispatchQueue.main.asyncAfter(deadline: deadline) { expectation.fulfill() } execution() wait(for: [expectation], timeout: ExecutionTime.max) } } class SiriShortcuts { static let shared = SiriShortcuts() private lazy var queue = OperationQueue() private init() {} enum Action: String { case leaveHome case leaveWork } func perform(_ action: Action, delay: TimeInterval = 0) { print(&quot;Siri: performing \\(action)-action\\n&quot;) switch action { case .leaveHome: add(operation: WindowOperation(delay)) add(operation: DoorOperation(delay)) case .leaveWork: add(operation: TaxiOperation(delay)) } } func cancel(_ action: Action) { print(&quot;Siri: canceling \\(action)-action\\n&quot;) switch action { case .leaveHome: cancelOperation(with: WindowOperation.self) cancelOperation(with: DoorOperation.self) case .leaveWork: cancelOperation(with: TaxiOperation.self) } } private func cancelOperation(with operationType: Operation.Type) { queue.operations.filter { operation in return type(of: operation) == operationType }.forEach({ $0.cancel() }) } private func add(operation: Operation) { queue.addOperation(operation) } } User: Hey Siri, I am leaving my home Siri: performing leaveHome-action User: Hey Siri, I am leaving my work in 3 minutes Siri: performing leaveWork-action User: Hey Siri, I am still working Siri: canceling leaveWork-action DoorOperation: Doors are closed via HomeKit. WindowOperation: Windows are closed via HomeKit. TaxiOperation: operation is canceled ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/typescript/","content":"TypeScript Example /** * Command Design Pattern * * Intent: Turns a request into a stand-alone object that contains all * information about the request. This transformation lets you parameterize * methods with different requests, delay or queue a request's execution, and * support undoable operations. */ /** * The Command interface declares a method for executing a command. */ interface Command { execute(): void; } /** * Some commands can implement simple operations on their own. */ class SimpleCommand implements Command { private payload: string; constructor(payload: string) { this.payload = payload; } public execute(): void { console.log( `SimpleCommand: See, I can do simple things like printing (${this.payload})` ); } } /** * However, some commands can delegate more complex operations to other objects, * called &quot;receivers.&quot; */ class ComplexCommand implements Command { private receiver: Receiver; /** * Context data, required for launching the receiver's methods. */ private a: string; private b: string; /** * Complex commands can accept one or several receiver objects along with * any context data via the constructor. */ constructor(receiver: Receiver, a: string, b: string) { this.receiver = receiver; this.a = a; this.b = b; } /** * Commands can delegate to any methods of a receiver. */ public execute(): void { console.log( &quot;ComplexCommand: Complex stuff should be done by a receiver object.&quot; ); this.receiver.doSomething(this.a); this.receiver.doSomethingElse(this.b); } } /** * The Receiver classes contain some important business logic. They know how to * perform all kinds of operations, associated with carrying out a request. In * fact, any class may serve as a Receiver. */ class Receiver { public doSomething(a: string): void { console.log(`Receiver: Working on (${a}.)`); } public doSomethingElse(b: string): void { console.log(`Receiver: Also working on (${b}.)`); } } /** * The Invoker is associated with one or several commands. It sends a request to * the command. */ class Invoker { private onStart: Command; private onFinish: Command; /** * Initialize commands. */ public setOnStart(command: Command): void { this.onStart = command; } public setOnFinish(command: Command): void { this.onFinish = command; } /** * The Invoker does not depend on concrete command or receiver classes. The * Invoker passes a request to a receiver indirectly, by executing a * command. */ public doSomethingImportant(): void { console.log(&quot;Invoker: Does anybody want something done before I begin?&quot;); if (this.isCommand(this.onStart)) { this.onStart.execute(); } console.log(&quot;Invoker: ...doing something really important...&quot;); console.log(&quot;Invoker: Does anybody want something done after I finish?&quot;); if (this.isCommand(this.onFinish)) { this.onFinish.execute(); } } private isCommand(object): object is Command { return object.execute !== undefined; } } /** * The client code can parameterize an invoker with any commands. */ const invoker = new Invoker(); invoker.setOnStart(new SimpleCommand(&quot;Say Hi!&quot;)); const receiver = new Receiver(); invoker.setOnFinish(new ComplexCommand(receiver, &quot;Send email&quot;, &quot;Save report&quot;)); invoker.doSomethingImportant(); Invoker: Does anybody want something done before I begin? SimpleCommand: See, I can do simple things like printing (Say Hi!) Invoker: ...doing something really important... Invoker: Does anybody want something done after I finish? ComplexCommand: Complex stuff should be done by a receiver object. Receiver: Working on (Send email.) Receiver: Also working on (Save report.) ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/typescript/example2","content":"Example 2 export default interface Command { execute(): any; undo(): any; } import Command from &quot;./CommandInterface&quot;; export default class RemoteController { onCommand: Command; offCommand: Command; setCommand(onCommand, offCommand) { this.onCommand = onCommand; this.offCommand = offCommand; } clickOnButton() { this.onCommand.execute(); } clickOffButton() { this.offCommand.execute(); } } export default class Television { state: boolean = false; on() { this.state = true; } off() { this.state = false; } } import Television from &quot;./TelevisionReceiver&quot;; import Command from &quot;./CommandInterface&quot;; export default class TelevisionOnCommand implements Command { television: Television; constructor(television: Television) { this.television = television; } execute() { this.television.on(); } undo() { this.television.off(); } } import Television from &quot;./TelevisionReceiver&quot;; import Command from &quot;./CommandInterface&quot;; export default class TelevisionOffCommand implements Command { television: Television; constructor(television: Television) { this.television = television; } execute() { this.television.off(); } undo() { this.television.on(); } } import Television from &quot;./TelevisionReceiver&quot;; import TelevisionOnCommand from &quot;./TelevisionOnCommand&quot;; import TelevisionOffCommand from &quot;./TelevisionOffCommand&quot;; import RemoteController from &quot;./RemoteControllerInvoker&quot;; const television = new Television(); const televisionOnCommand = new TelevisionOnCommand(television); const televisionOffCommand = new TelevisionOffCommand(television); const remote = new RemoteController(); remote.setCommand(televisionOnCommand, televisionOffCommand); console.log(&quot;state of television before remote is used:&quot;, television.state); remote.clickOnButton(); console.log( &quot;state of television after remote is used with on click:&quot;, television.state ); remote.clickOffButton(); console.log( &quot;state of television after remote is used with off click:&quot;, television.state ); ","keywords":""},{"title":"Interpreter","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/","content":"","keywords":""},{"title":"When to use​","type":1,"pageTitle":"Interpreter","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/#when-to-use","content":"Use when you need to create a scripting language to allow end user to customize their solution due to the complexity and advanced configuration requirements of the app however, it is easier &amp; faster to use an existing command interpreter or expression evaluator tool of the box Use when a problem can be encoded and implemented by a simple grammar when a problem is characterized by a language, it describes the problem domain which should be well-understood and well-definedthe language needs to be mapped to a grammargrammars are usually hierarchical tree-like structures that step through multiple levels but end up with terminal nodes (also called literals) "},{"title":"Structure​","type":1,"pageTitle":"Interpreter","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/#structure","content":" AbstractExpression / Expression declares an interface for executing an operation TerminalExpression / ThousandExpression, HundredExpression / TenExpression / OneExpression / LeafExpression implements an interpret operation associated with terminal symbols in the grammaran instance is required for every terminal symbol in the sentence NonterminalExpression / ComposedExpression 1 such class is required for every rule R ::= R1R2...Rn in the grammarmaintains instance variables of type AbstractExpression for each of the symbols R1 through Rnimplements an Interpret operation for nonterminal symbols in the grammar Interpret typical calls itself recursively on the variables representing R1 through Rn Context contains information that is global to the interpreter Client / InterpreterApp builds (or is given) an abstract syntax tree representing a particular sentence in the language that the grammar definesthe abstract syntax tree is assembled from instances of the NonterminalExpression and TerminalExpression classesinvokes the Interpret operation "},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/java/","content":"Java Example expressions expressions/AbstractExpressions.java package refactoring_guru.interpreter.example.expressions; public abstract class AbstractExpressions { public abstract boolean interpret(Context context) throws Exception; } expressions/AndExpression.java package refactoring_guru.interpreter.example.expressions; public class AndExpression extends AbstractExpressions { private final AbstractExpressions first; private final AbstractExpressions second; public AndExpression(AbstractExpressions first, AbstractExpressions second) { this.first = first; this.second = second; } public boolean interpret(Context context) throws Exception { return this.first.interpret(context) &amp;&amp; this.second.interpret(context); } } expressions/Context.java package refactoring_guru.interpreter.example.expressions; import java.util.HashMap; public class Context { HashMap&lt;String, Boolean&gt; poolVariables = new HashMap&lt;&gt;(); public boolean lookUp(String name) throws Exception { if (!poolVariables.containsKey(name)) { throw new Exception(&quot;No exist variable: name&quot;); } return this.poolVariables.get(name); } public void assign(VariableExpression variable, boolean value) { this.poolVariables.put(variable.getName(), value); } } expressions/OrExpression.java package refactoring_guru.interpreter.example.expressions; public class OrExpression extends AbstractExpressions { private final AbstractExpressions first; private final AbstractExpressions second; public OrExpression(AbstractExpressions first, AbstractExpressions second) { this.first = first; this.second = second; } public boolean interpret(Context context) throws Exception { return this.first.interpret(context) || this.second.interpret(context); } } expressions/VariableExpression.java package refactoring_guru.interpreter.example.expressions; public class VariableExpression extends AbstractExpressions { private final String name; public VariableExpression(String name) { this.name = name; } public boolean interpret(Context context) throws Exception { return context.lookUp(this.name); } public String getName() { return this.name; } } Demo.java package refactoring_guru.interpreter.example; import refactoring_guru.interpreter.example.expressions.AndExpression; import refactoring_guru.interpreter.example.expressions.Context; import refactoring_guru.interpreter.example.expressions.OrExpression; import refactoring_guru.interpreter.example.expressions.VariableExpression; /** * Interpreter Design Pattern * * Defines a representation for a grammar as well as a mechanism to understand * and act upon the grammar. */ public class Demo { private static void example1() throws Exception { var context = new Context(); var a = new VariableExpression(&quot;A&quot;); var b = new VariableExpression(&quot;B&quot;); var c = new VariableExpression(&quot;C&quot;); // example 1: // A ∧ (B ∨ C) var example1 = new AndExpression( a, new OrExpression(b, c) ); context.assign(a, true); context.assign(b, true); context.assign(c, false); var result = example1.interpret(context) ? &quot;true&quot; : &quot;false&quot;; System.out.println(&quot;boolean expression A ∧ (B ∨ C) = &quot; + result + &quot;, with variables A=true, B=true, C=false&quot;); } private static void example2() throws Exception { var context = new Context(); var a = new VariableExpression(&quot;A&quot;); var b = new VariableExpression(&quot;B&quot;); var c = new VariableExpression(&quot;C&quot;); // example 2: // B ∨ (A ∧ (B ∨ C)) var example2 = new OrExpression( b, new AndExpression( a, new OrExpression(b, c) ) ); context.assign(a, false); context.assign(b, false); context.assign(c, true); var result2 = example2.interpret(context) ? &quot;true&quot; : &quot;false&quot;; System.out.println(&quot;boolean expression B ∨ (A ∧ (B ∨ C)) = &quot; + result2 + &quot;, with variables A=false, B=false, C=true&quot;); } public static void main(String[] args) throws Exception { example1(); example2(); } } boolean expression A ∧ (B ∨ C) = true, with variables A=true, B=true, C=false boolean expression B ∨ (A ∧ (B ∨ C)) = false, with variables A=false, B=false, C=true ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Command/java/","content":"Java Example commands commands/Command.java package refactoring_guru.command.example.commands; import refactoring_guru.command.example.editor.Editor; public abstract class Command { public Editor editor; private String backup; Command(Editor editor) { this.editor = editor; } void backup() { backup = editor.textField.getText(); } public void undo() { editor.textField.setText(backup); } public abstract boolean execute(); } commands/CommandHistory.java package refactoring_guru.command.example.commands; import java.util.Stack; public class CommandHistory { private Stack&lt;Command&gt; history = new Stack&lt;&gt;(); public void push(Command c) { history.push(c); } public Command pop() { return history.pop(); } public boolean isEmpty() { return history.isEmpty(); } } commands/CopyCommand.java package refactoring_guru.command.example.commands; import refactoring_guru.command.example.editor.Editor; public class CopyCommand extends Command { public CopyCommand(Editor editor) { super(editor); } @Override public boolean execute() { editor.clipboard = editor.textField.getSelectedText(); return false; } } commands/CutCommand.java package refactoring_guru.command.example.commands; import refactoring_guru.command.example.editor.Editor; public class CutCommand extends Command { public CutCommand(Editor editor) { super(editor); } @Override public boolean execute() { if (editor.textField.getSelectedText().isEmpty()) return false; backup(); String source = editor.textField.getText(); editor.clipboard = editor.textField.getSelectedText(); editor.textField.setText(cutString(source)); return true; } private String cutString(String source) { String start = source.substring(0, editor.textField.getSelectionStart()); String end = source.substring(editor.textField.getSelectionEnd()); return start + end; } } commands/PasteCommand.java package refactoring_guru.command.example.commands; import refactoring_guru.command.example.editor.Editor; public class PasteCommand extends Command { public PasteCommand(Editor editor) { super(editor); } @Override public boolean execute() { if (editor.clipboard == null || editor.clipboard.isEmpty()) return false; backup(); editor.textField.insert(editor.clipboard, editor.textField.getCaretPosition()); return true; } } editor/Editor.java package refactoring_guru.command.example.editor; import refactoring_guru.command.example.commands.*; import javax.swing.*; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; public class Editor { public JTextArea textField; public String clipboard; private CommandHistory history = new CommandHistory(); public void init() { JFrame frame = new JFrame(&quot;Text editor (type &amp; use buttons, Luke!)&quot;); JPanel content = new JPanel(); frame.setContentPane(content); frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); content.setLayout(new BoxLayout(content, BoxLayout.Y_AXIS)); textField = new JTextArea(); textField.setLineWrap(true); content.add(textField); JPanel buttons = new JPanel(new FlowLayout(FlowLayout.CENTER)); JButton ctrlC = new JButton(&quot;Ctrl+C&quot;); JButton ctrlX = new JButton(&quot;Ctrl+X&quot;); JButton ctrlV = new JButton(&quot;Ctrl+V&quot;); JButton ctrlZ = new JButton(&quot;Ctrl+Z&quot;); Editor editor = this; ctrlC.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { executeCommand(new CopyCommand(editor)); } }); ctrlX.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { executeCommand(new CutCommand(editor)); } }); ctrlV.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { executeCommand(new PasteCommand(editor)); } }); ctrlZ.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { undo(); } }); buttons.add(ctrlC); buttons.add(ctrlX); buttons.add(ctrlV); buttons.add(ctrlZ); content.add(buttons); frame.setSize(450, 200); frame.setLocationRelativeTo(null); frame.setVisible(true); } private void executeCommand(Command command) { if (command.execute()) { history.push(command); } } private void undo() { if (history.isEmpty()) return; Command command = history.pop(); if (command != null) { command.undo(); } } } Demo.java package refactoring_guru.command.example; import refactoring_guru.command.example.editor.Editor; public class Demo { public static void main(String[] args) { Editor editor = new Editor(); editor.init(); } } ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/javascript/","content":"JavaScript Example // contains the information that will be interpreted class Context { constructor(value) { this.v = value; } } module.exports = Context; // provide specific conversions on different types of data class MinusNonTerminalExpression { constructor(numA, numB) { this.numA = numA; this.numB = numB; } interpret(context) { return this.numA.interpret(context) - this.numB.interpret(context); } } module.exports = MinusNonTerminalExpression; // provide specific conversions on different types of data class NumberTerminalExpression { constructor(num) { this.num = num; } interpret(context) { return this.num; } } module.exports = NumberTerminalExpression; // provide specific conversions on different types of data class TimesNonTerminalExpression { constructor(numA, numB) { this.numA = numA; this.numB = numB; } interpret(context) { return this.numA.interpret(context) * this.numB.interpret(context); } } module.exports = TimesNonTerminalExpression; // provide specific conversions on different types of data class VariableTerminalExpression { constructor(variable) { this.variable = variable; } interpret(context) { return context[this.variable] || 0; } } module.exports = VariableTerminalExpression; const Context = require(&quot;./Context&quot;); const NumberTerminalExpression = require(&quot;./NumberTerminalExpression&quot;); const VariableTerminalExpression = require(&quot;./VariableTerminalExpression&quot;); const TimesNonTerminalExpression = require(&quot;./TimesNonTerminalExpression&quot;); const MinusNonTerminalExpression = require(&quot;./MinusNonTerminalExpression&quot;); class Client { constructor(context) { this.context = context; } parse(expression) { const values = expression.split(&quot; &quot;); const queue = []; let exp; let numB; let numA; for (const value of values) { switch (value) { case &quot;*&quot;: numB = queue.pop(); numA = queue.pop(); exp = new TimesNonTerminalExpression(numA, numB); break; case &quot;-&quot;: numB = queue.pop(); numA = queue.pop(); exp = new MinusNonTerminalExpression(numA, numB); break; default: if (isNaN(parseInt(value))) { exp = new VariableTerminalExpression(value); } else { const number = parseInt(value); exp = new NumberTerminalExpression(number); } break; } queue.push(exp); } const main = queue.pop(); return main.interpret(this.context); } } const ctxt = new Context(45); const res = new Client(ctxt).parse(&quot;16 v * 76 q - -&quot;); console.log(res); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/python/","content":"Python Example class Context: def __init__(self, value): self.v = value class MinusNonTerminalExpression: def __init__(self, a, b): self.a = a self.b = b def interpret(self, context): return self.a.interpret(context) - self.b.interpret(context) class NumberTerminalExpression: def __init__(self, num): self.num = num def interpret(self, context): return self.num class TimesNonTerminalExpression: def __init__(self, a, b): self.a = a self.b = b def interpret(self, context): return self.a.interpret(context) * self.b.interpret(context) class VariableTerminalExpression: def __init__(self, variable): self.variable = variable def interpret(self, context): return context.get(self.variable) or 0 from Context import Context from NumberTerminalExpression import NumberTerminalExpression from VariableTerminalExpression import VariableTerminalExpression from TimesNonTerminalExpression import TimesNonTerminalExpression from MinusNonTerminalExpression import MinusNonTerminalExpression class Client: def __init__(self, context): self.context = context def parse(self, expression): values = expression.split(&quot; &quot;) queue = [] for value in values: if value == &quot;*&quot;: b = queue.pop() a = queue.pop() exp = TimesNonTerminalExpression(a, b) elif value == &quot;-&quot;: b = queue.pop() a = queue.pop() exp = MinusNonTerminalExpression(a, b) else: try: number = int(value) exp = NumberTerminalExpression(number) except ValueError: exp = VariableTerminalExpression(value) queue.append(exp) main = queue.pop() return main.interpret(self.context) if __name__ == &quot;__main__&quot;: ctxt = Context(45) res = Client(ctxt.__dict__).parse(&quot;16 v * 76 q - -&quot;) print(res) ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/typescript/","content":"TypeScript Example // defines all the methods needed to perform the different conversions export default interface AbstractExpression { interpret(context: any): number; } // contains the information that will be interpreted export default class Context { v: number; constructor(value: number) { this.v = value; } } import Context from &quot;./Context&quot;; import AbstractExpression from &quot;./AbstractExpressions&quot;; // provide specific conversions on different types of data export default class NumberTerminalExpression implements AbstractExpression { num: number; constructor(num: number) { this.num = num; } public interpret(context: AbstractExpression | Context): number { return this.num; } } import Context from &quot;./Context&quot;; import AbstractExpression from &quot;./AbstractExpressions&quot;; // provide specific conversions on different types of data export default class VariableTerminalExpression implements AbstractExpression { variable: string; constructor(variable: string) { this.variable = variable; } public interpret(context: AbstractExpression | Context): number { return context[this.variable] || 0; } } import Context from &quot;./Context&quot;; import AbstractExpression from &quot;./AbstractExpressions&quot;; import TimesNonTerminalExpression from &quot;./TimesNonTerminalExpression&quot;; import VariableTerminalExpression from &quot;./VariableTerminalExpression&quot;; import NumberTerminalExpression from &quot;./NumberTerminalExpression&quot;; type allExpressions = | TimesNonTerminalExpression | MinusNonTerminalExpression | VariableTerminalExpression | NumberTerminalExpression; // provide specific conversions on different types of data export default class MinusNonTerminalExpression implements AbstractExpression { numA: allExpressions; numB: allExpressions; constructor(numA: allExpressions, numB: allExpressions) { this.numA = numA; this.numB = numB; } public interpret(context: AbstractExpression | Context): number { return this.numA.interpret(context) - this.numB.interpret(context); } } import Context from &quot;./Context&quot;; import AbstractExpression from &quot;./AbstractExpressions&quot;; import MinusNonTerminalExpression from &quot;./MinusNonTerminalExpression&quot;; import VariableTerminalExpression from &quot;./VariableTerminalExpression&quot;; import NumberTerminalExpression from &quot;./NumberTerminalExpression&quot;; type allExpressions = | TimesNonTerminalExpression | MinusNonTerminalExpression | VariableTerminalExpression | NumberTerminalExpression; // provide specific conversions on different types of data export default class TimesNonTerminalExpression implements AbstractExpression { numA: allExpressions; numB: allExpressions; constructor(numA: allExpressions, numB: allExpressions) { this.numA = numA; this.numB = numB; } public interpret(context: AbstractExpression | Context): number { return this.numA.interpret(context) * this.numB.interpret(context); } } import Context from &quot;./Context&quot;; import NumberTerminalExpression from &quot;./NumberTerminalExpression&quot;; import VariableTerminalExpression from &quot;./VariableTerminalExpression&quot;; import TimesNonTerminalExpression from &quot;./TimesNonTerminalExpression&quot;; import MinusNonTerminalExpression from &quot;./MinusNonTerminalExpression&quot;; type allExpressions = | TimesNonTerminalExpression | MinusNonTerminalExpression | VariableTerminalExpression | NumberTerminalExpression; class Client { context: Context; constructor(context: Context) { this.context = context; } parse(expression: string): number { const values: string[] = expression.split(&quot; &quot;); const queue: allExpressions[] = []; let exp: allExpressions; let numB: allExpressions; let numA: allExpressions; for (const value of values) { switch (value) { case &quot;*&quot;: numB = queue.pop(); numA = queue.pop(); exp = new TimesNonTerminalExpression(numA, numB); break; case &quot;-&quot;: numB = queue.pop(); numA = queue.pop(); exp = new MinusNonTerminalExpression(numA, numB); break; default: if (isNaN(parseInt(value))) { exp = new VariableTerminalExpression(value); } else { const number = parseInt(value); exp = new NumberTerminalExpression(number); } break; } queue.push(exp); } const main: allExpressions = queue.pop(); return main.interpret(this.context); } } const ctxt: Context = new Context(45); const res: number = new Client(ctxt).parse(&quot;16 v * 76 q - -&quot;); console.log(res); ","keywords":""},{"title":"Iterator","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/","content":"","keywords":""},{"title":"Problem​","type":1,"pageTitle":"Iterator","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/#problem","content":"most collection store their elements in simple list however some are based on stacks, trees, graphs, and other complex data structures regardless of how a collection is structured, it must provide some way of accessing its elements so that other code can use itsounds like an easy job that can be done just by looping over all the elements but how do you sequentially traverse elements of a complex data structure (e.g.: tree) 1 day you might need depth first traversal, another day you might need breadth first traversal, another day you might need something else like random access "},{"title":"Solution​","type":1,"pageTitle":"Iterator","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/#solution","content":"extract the traversal behavior of a collection into a separate object called an iterator the iterator object encapsulates all of the traversal details "},{"title":"Real world Analogy​","type":1,"pageTitle":"Iterator","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/#real-world-analogy","content":"you are lost and wished to arrive at a certain destinationsolution walk around and try to find the destination, you might waste a lot of time walking in circles, or not find the destinationdownload a navigation app for navigation. smart and inexpensivespend some money and hire a local guide these 3 solutions act as iterators over the vast collections of destinations you wish to go "},{"title":"Structure​","type":1,"pageTitle":"Iterator","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/#structure","content":" The Iterator interface declares the operations required for traversing a collection: fetching the next element, retrieving the current position, restarting iteration, etc. Concrete Iterators implement specific algorithms for traversing a collection. The iterator object should track the traversal progress on its own.This allows several iterators to traverse the same collection independently of each other. The Collection interface declares one or multiple methods for getting iterators compatible with the collection. Note that the return type of the methods must be declared as the iterator interface so that the concrete collections can return various kinds of iterators. Concrete Collections return new instances of a particular concrete iterator class each time the client requests one. You might be wondering, where’s the rest of the collection’s code? Don’t worry, it should be in the same class.It’s just that these details aren’t crucial to the actual pattern, so we’re omitting them. The Client works with both collections and iterators via their interfaces. This way the client isn’t coupled to concrete classes, allowing you to use various collections and iterators with the same client code.Typically, clients don’t create iterators on their own, but instead get them from collections.Yet, in certain cases, the client can create one directly; for example, when the client defines its own special iterator. "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/cPlusPlus/","content":"C++ Example /** * Iterator Design Pattern * * Intent: Lets you traverse elements of a collection without exposing its * underlying representation (list, stack, tree, etc.). */ #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; /** * C++ has its own implementation of iterator that works with a different * generics containers defined by the standard library. */ template &lt;typename T, typename U&gt; class Iterator { public: typedef typename std::vector&lt;T&gt;::iterator iter_type; Iterator(U *p_data, bool reverse = false) : m_p_data_(p_data) { m_it_ = m_p_data_-&gt;m_data_.begin(); } void First() { m_it_ = m_p_data_-&gt;m_data_.begin(); } void Next() { m_it_++; } bool IsDone() { return (m_it_ == m_p_data_-&gt;m_data_.end()); } iter_type Current() { return m_it_; } private: U *m_p_data_; iter_type m_it_; }; /** * Generic Collections/Containers provides one or several methods for retrieving * fresh iterator instances, compatible with the collection class. */ template &lt;class T&gt; class Container { friend class Iterator&lt;T, Container&gt;; public: void Add(T a) { m_data_.push_back(a); } Iterator&lt;T, Container&gt; *CreateIterator() { return new Iterator&lt;T, Container&gt;(this); } private: std::vector&lt;T&gt; m_data_; }; class Data { public: Data(int a = 0) : m_data_(a) {} void set_data(int a) { m_data_ = a; } int data() { return m_data_; } private: int m_data_; }; /** * The client code may or may not know about the Concrete Iterator or Collection * classes, for this implementation the container is generic so you can used * with an int or with a custom class. */ void ClientCode() { std::cout &lt;&lt; &quot;________________Iterator with int______________________________________&quot; &lt;&lt; std::endl; Container&lt;int&gt; cont; for (int i = 0; i &lt; 10; i++) { cont.Add(i); } Iterator&lt;int, Container&lt;int&gt;&gt; *it = cont.CreateIterator(); for (it-&gt;First(); !it-&gt;IsDone(); it-&gt;Next()) { std::cout &lt;&lt; *it-&gt;Current() &lt;&lt; std::endl; } Container&lt;Data&gt; cont2; Data a(100), b(1000), c(10000); cont2.Add(a); cont2.Add(b); cont2.Add(c); std::cout &lt;&lt; &quot;________________Iterator with custom Class______________________________&quot; &lt;&lt; std::endl; Iterator&lt;Data, Container&lt;Data&gt;&gt; *it2 = cont2.CreateIterator(); for (it2-&gt;First(); !it2-&gt;IsDone(); it2-&gt;Next()) { std::cout &lt;&lt; it2-&gt;Current()-&gt;data() &lt;&lt; std::endl; } delete it; delete it2; } int main() { ClientCode(); return 0; } ________________Iterator with int______________________________________ 0 1 2 3 4 5 6 7 8 9 ________________Iterator with custom Class______________________________ 100 1000 10000 ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/go/","content":"Go Example package main type collection interface { createIterator() iterator } package main type iterator interface { hasNext() bool getNext() *user } package main type user struct { name string age int } package main type userCollection struct { users []*user } func (u *userCollection) createIterator() iterator { return &amp;userIterator{ users: u.users, } } package main type userIterator struct { index int users []*user } func (u *userIterator) hasNext() bool { if u.index &lt; len(u.users) { return true } return false } func (u *userIterator) getNext() *user { if u.hasNext() { user := u.users[u.index] u.index++ return user } return nil } package main import &quot;fmt&quot; func main() { user1 := &amp;user{ name: &quot;a&quot;, age: 30, } user2 := &amp;user{ name: &quot;b&quot;, age: 20, } userCollection := &amp;userCollection{ users: []*user{user1, user2}, } iterator := userCollection.createIterator() for iterator.hasNext() { user := iterator.getNext() fmt.Printf(&quot;User is %+v\\n&quot;, user) } } User is &amp;{name:a age:30} User is &amp;{name:b age:20} ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/javascript/","content":"JavaScript Example /** * Concrete Iterators implement various traversal algorithms. These classes * store the current traversal position at all times. */ class AlphabeticalOrderIterator { constructor(collection, reverse = false) { this.collection = collection; /** * This variable indicates the traversal direction. */ this.reverse = reverse; /** * Stores the current traversal position. An iterator may have a lot of * other fields for storing iteration state, especially when it is supposed * to work with a particular kind of collection. */ this.position = 0; if (reverse) { this.position = collection.getCount() - 1; } } rewind() { this.position = this.reverse ? this.collection.getCount() - 1 : 0; } current() { return this.collection.getItems()[this.position]; } key() { return this.position; } next() { const item = this.collection.getItems()[this.position]; this.position += this.reverse ? -1 : 1; return item; } valid() { if (this.reverse) { return this.position &gt;= 0; } return this.position &lt; this.collection.getCount(); } } module.exports = AlphabeticalOrderIterator; const AlphabeticalOrderIterator = require(&quot;./AlphabeticalOrderIterator&quot;); /** * Concrete Collections provide one or several methods for retrieving fresh * iterator instances, compatible with the collection class. */ class WordsCollection { constructor() { this.items = []; } getItems() { return this.items; } getCount() { return this.items.length; } addItem(item) { this.items.push(item); } getIterator() { return new AlphabeticalOrderIterator(this); } getReverseIterator() { return new AlphabeticalOrderIterator(this, true); } } module.exports = WordsCollection; const WordsCollection = require(&quot;./WordsCollection&quot;); /** * The client code may or may not know about the Concrete Iterator or Collection * classes, depending on the level of indirection you want to keep in your * program. */ const collection = new WordsCollection(); collection.addItem(&quot;First&quot;); collection.addItem(&quot;Second&quot;); collection.addItem(&quot;Third&quot;); const iterator = collection.getIterator(); console.log(&quot;Straight traversal:&quot;); while (iterator.valid()) { console.log(iterator.next()); } console.log(&quot;&quot;); console.log(&quot;Reverse traversal:&quot;); const reverseIterator = collection.getReverseIterator(); while (reverseIterator.valid()) { console.log(reverseIterator.next()); } ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/python/","content":"Python Example &quot;&quot;&quot; Iterator Design Pattern Intent: Lets you traverse elements of a collection without exposing its underlying representation (list, stack, tree, etc.). &quot;&quot;&quot; from __future__ import annotations from collections.abc import Iterable, Iterator from typing import Any, List &quot;&quot;&quot; To create an iterator in Python, there are two abstract classes from the built- in `collections` module - Iterable,Iterator. We need to implement the `__iter__()` method in the iterated object (collection), and the `__next__ ()` method in theiterator. &quot;&quot;&quot; class AlphabeticalOrderIterator(Iterator): &quot;&quot;&quot; Concrete Iterators implement various traversal algorithms. These classes store the current traversal position at all times. &quot;&quot;&quot; &quot;&quot;&quot; `_position` attribute stores the current traversal position. An iterator may have a lot of other fields for storing iteration state, especially when it is supposed to work with a particular kind of collection. &quot;&quot;&quot; _position: int = None &quot;&quot;&quot; This attribute indicates the traversal direction. &quot;&quot;&quot; _reverse: bool = False def __init__(self, collection: WordsCollection, reverse: bool = False) -&gt; None: self._collection = collection self._reverse = reverse self._position = -1 if reverse else 0 def __next__(self): &quot;&quot;&quot; The __next__() method must return the next item in the sequence. On reaching the end, and in subsequent calls, it must raise StopIteration. &quot;&quot;&quot; try: value = self._collection[self._position] self._position += -1 if self._reverse else 1 except IndexError: raise StopIteration() return value class WordsCollection(Iterable): &quot;&quot;&quot; Concrete Collections provide one or several methods for retrieving fresh iterator instances, compatible with the collection class. &quot;&quot;&quot; def __init__(self, collection: List[Any] = []) -&gt; None: self._collection = collection def __iter__(self) -&gt; AlphabeticalOrderIterator: &quot;&quot;&quot; The __iter__() method returns the iterator object itself, by default we return the iterator in ascending order. &quot;&quot;&quot; return AlphabeticalOrderIterator(self._collection) def get_reverse_iterator(self) -&gt; AlphabeticalOrderIterator: return AlphabeticalOrderIterator(self._collection, True) def add_item(self, item: Any): self._collection.append(item) if __name__ == &quot;__main__&quot;: # The client code may or may not know about the Concrete Iterator or # Collection classes, depending on the level of indirection you want to keep # in your program. collection = WordsCollection() collection.add_item(&quot;First&quot;) collection.add_item(&quot;Second&quot;) collection.add_item(&quot;Third&quot;) print(&quot;Straight traversal:&quot;) print(&quot;\\n&quot;.join(collection)) print(&quot;&quot;) print(&quot;Reverse traversal:&quot;) print(&quot;\\n&quot;.join(collection.get_reverse_iterator()), end=&quot;&quot;) Straight traversal: First Second Third Reverse traversal: Third Second First ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/swift/","content":"Swift Example /// Iterator Design Pattern /// /// Intent: Lets you traverse elements of a collection without exposing its /// underlying representation (list, stack, tree, etc.). /// /// Swift language has a built-in iterator support: /// /// - The `IteratorProtocol` provides a simple iterator protocol: /// https://developer.apple.com/documentation/swift/iteratorprotocol /// /// - The `AnyIterator&lt;Element&gt;` struct provides basic iterator implementation: /// https://developer.apple.com/documentation/swift/anyiterator /// /// In this examples we'll see how to use both of these mechanisms. import XCTest /// This is a collection that we're going to iterate through using an iterator /// derived from IteratorProtocol. class WordsCollection { fileprivate lazy var items = [String]() func append(_ item: String) { self.items.append(item) } } extension WordsCollection: Sequence { func makeIterator() -&gt; WordsIterator { return WordsIterator(self) } } /// Concrete Iterators implement various traversal algorithms. These classes /// store the current traversal position at all times. class WordsIterator: IteratorProtocol { private let collection: WordsCollection private var index = 0 init(_ collection: WordsCollection) { self.collection = collection } func next() -&gt; String? { defer { index += 1 } return index &lt; collection.items.count ? collection.items[index] : nil } } /// This is another collection that we'll provide AnyIterator for traversing its /// items. class NumbersCollection { fileprivate lazy var items = [Int]() func append(_ item: Int) { self.items.append(item) } } extension NumbersCollection: Sequence { func makeIterator() -&gt; AnyIterator&lt;Int&gt; { var index = self.items.count - 1 return AnyIterator { defer { index -= 1 } return index &gt;= 0 ? self.items[index] : nil } } } /// Client does not know the internal representation of a given sequence. class Client { // ... static func clientCode&lt;S: Sequence&gt;(sequence: S) { for item in sequence { print(item) } } // ... } /// Let's see how it all works together. class IteratorConceptual: XCTestCase { func testIteratorProtocol() { let words = WordsCollection() words.append(&quot;First&quot;) words.append(&quot;Second&quot;) words.append(&quot;Third&quot;) print(&quot;Straight traversal using IteratorProtocol:&quot;) Client.clientCode(sequence: words) } func testAnyIterator() { let numbers = NumbersCollection() numbers.append(1) numbers.append(2) numbers.append(3) print(&quot;\\nReverse traversal using AnyIterator:&quot;) Client.clientCode(sequence: numbers) } } Straight traversal using IteratorProtocol: First Second Third Reverse traversal using AnyIterator: 3 2 1 ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/swift/example2","content":"Example 2 import XCTest class IteratorRealWorld: XCTestCase { func test() { let tree = Tree(1) tree.left = Tree(2) tree.right = Tree(3) print(&quot;Tree traversal: Inorder&quot;) clientCode(iterator: tree.iterator(.inOrder)) print(&quot;\\nTree traversal: Preorder&quot;) clientCode(iterator: tree.iterator(.preOrder)) print(&quot;\\nTree traversal: Postorder&quot;) clientCode(iterator: tree.iterator(.postOrder)) } func clientCode&lt;T&gt;(iterator: AnyIterator&lt;T&gt;) { while case let item? = iterator.next() { print(item) } } } class Tree&lt;T&gt; { var value: T var left: Tree&lt;T&gt;? var right: Tree&lt;T&gt;? init(_ value: T) { self.value = value } typealias Block = (T) -&gt; () enum IterationType { case inOrder case preOrder case postOrder } func iterator(_ type: IterationType) -&gt; AnyIterator&lt;T&gt; { var items = [T]() switch type { case .inOrder: inOrder { items.append($0) } case .preOrder: preOrder { items.append($0) } case .postOrder: postOrder { items.append($0) } } /// Note: /// AnyIterator is used to hide the type signature of an internal /// iterator. return AnyIterator(items.makeIterator()) } private func inOrder(_ body: Block) { left?.inOrder(body) body(value) right?.inOrder(body) } private func preOrder(_ body: Block) { body(value) left?.inOrder(body) right?.inOrder(body) } private func postOrder(_ body: Block) { left?.inOrder(body) right?.inOrder(body) body(value) } } Tree traversal: Inorder 2 1 3 Tree traversal: Preorder 1 2 3 Tree traversal: Postorder 2 3 1 ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/typescript/","content":"TypeScript Example /** * Iterator Design Pattern * * Intent: Lets you traverse elements of a collection without exposing its * underlying representation (list, stack, tree, etc.). */ interface Iterator&lt;T&gt; { // Return the current element. current(): T; // Return the current element and move forward to next element. next(): T; // Return the key of the current element. key(): number; // Checks if current position is valid. valid(): boolean; // Rewind the Iterator to the first element. rewind(): void; } interface Aggregator { // Retrieve an external iterator. getIterator(): Iterator&lt;string&gt;; } /** * Concrete Iterators implement various traversal algorithms. These classes * store the current traversal position at all times. */ class AlphabeticalOrderIterator implements Iterator&lt;string&gt; { private collection: WordsCollection; /** * Stores the current traversal position. An iterator may have a lot of * other fields for storing iteration state, especially when it is supposed * to work with a particular kind of collection. */ private position: number = 0; /** * This variable indicates the traversal direction. */ private reverse: boolean = false; constructor(collection: WordsCollection, reverse: boolean = false) { this.collection = collection; this.reverse = reverse; if (reverse) { this.position = collection.getCount() - 1; } } public rewind() { this.position = this.reverse ? this.collection.getCount() - 1 : 0; } public current(): string { return this.collection.getItems()[this.position]; } public key(): number { return this.position; } public next(): string { const item = this.collection.getItems()[this.position]; this.position += this.reverse ? -1 : 1; return item; } public valid(): boolean { if (this.reverse) { return this.position &gt;= 0; } return this.position &lt; this.collection.getCount(); } } /** * Concrete Collections provide one or several methods for retrieving fresh * iterator instances, compatible with the collection class. */ class WordsCollection implements Aggregator { private items: string[] = []; public getItems(): string[] { return this.items; } public getCount(): number { return this.items.length; } public addItem(item: string): void { this.items.push(item); } public getIterator(): Iterator&lt;string&gt; { return new AlphabeticalOrderIterator(this); } public getReverseIterator(): Iterator&lt;string&gt; { return new AlphabeticalOrderIterator(this, true); } } /** * The client code may or may not know about the Concrete Iterator or Collection * classes, depending on the level of indirection you want to keep in your * program. */ const collection = new WordsCollection(); collection.addItem(&quot;First&quot;); collection.addItem(&quot;Second&quot;); collection.addItem(&quot;Third&quot;); const iterator = collection.getIterator(); console.log(&quot;Straight traversal:&quot;); while (iterator.valid()) { console.log(iterator.next()); } console.log(&quot;&quot;); console.log(&quot;Reverse traversal:&quot;); const reverseIterator = collection.getReverseIterator(); while (reverseIterator.valid()) { console.log(reverseIterator.next()); } Straight traversal: First Second Third Reverse traversal: Third Second First ","keywords":""},{"title":"Mediator","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/","content":"","keywords":""},{"title":"Problem​","type":1,"pageTitle":"Mediator","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/#problem","content":"e.g.: let's say there is a dialog for creating &amp; editing customer profile it consists of various form controls such as text fields, checkboxes, buttons, etc.some of the form elements may interact with others e.g: selecting &quot;i have a dog&quot; checkbox may reveal a hidden text field for entering the dog's nameanother e.g.: the submit button that has to validate values of all fields before saving the data by having this logic implemented directly inside the code of the form elements it make these element's classes much hard to reuse in other forms of the app e.g.: can't use the checkbox inside another form as it's coupled to the dog's text field this results in you can only use either all the classes involved in rendering the profile form, or none at all "},{"title":"Solution​","type":1,"pageTitle":"Mediator","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/#solution","content":"all direct communication between the components which you want to make independent of each other should be ceased these components must collaborate indirectly by calling a special mediator object that redirects the calls to appropriate componentsthus, the components depend only on a single mediator class instead of being coupled to dozens of their colleagues in the profile editing form, the dialog class itself may act as the mediator dialog class should already be aware of all of its sub-elements thus introducing of new dependencies into the class is not needed the most significant change happens to the actual form elements (e.g.: submit button) previously, each time a user clicked the button, it had to validate the values of all individual form elementsits single job is to notify the dialog about the clickupon receiving this notification, the dialog itself performs the validations or passes the task to the individual elements therefore, instead of being tied to a dozen form elements, the button is only dependent on the dialog class "},{"title":"Analogy​","type":1,"pageTitle":"Mediator","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/#analogy","content":"pilots of aircraft that approach or depart the airport control area don't communicate directly with each other they speak to an air traffic controller, who sits in a tall tower somewhere near the airstrip without the air traffic controller, pilots would need to be aware of every plane in the vicinity of the airport discussing landing priorities with a committee of dozens of other pilots therefore, the tower doesn't need to control the whole flight it exists only to enforce constraints in the terminal area because the number of involved actors there might be overwhelming to a pilot "},{"title":"Structure​","type":1,"pageTitle":"Mediator","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/#structure","content":" Components are various classes that contain some business logic. Each component has a reference to a mediator, declared with the type of the mediator interface.The component isn’t aware of the actual class of the mediator, so you can reuse the component in other programs by linking it to a different mediator. The Mediator interface declares methods of communication with components, which usually include just a single notification method. Components may pass any context as arguments of this method, including their own objects, but only in such a way that no coupling occurs between a receiving component and the sender’s class. Concrete Mediators encapsulate relations between various components. Concrete mediators often keep references to all components they manage and sometimes even manage their lifecycle. Components must not be aware of other components. If something important happens within or to a component, it must only notify the mediator.When the mediator receives the notification, it can easily identify the sender, which might be just enough to decide what component should be triggered in return.From a component’s perspective, it all looks like a total black box.The sender doesn’t know who’ll end up handling its request, and the receiver doesn’t know who sent the request in the first place. "},{"title":"When to use​","type":1,"pageTitle":"Mediator","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/#when-to-use","content":"use the pattern when it's hard to change some of the classes because they are tightly coupled to a bunch of other classes the pattern lets you extract all the relationships between classes into a separate class, isolating any changes to a specific component from the rest of the components use the pattern when you can't reuse a component in a different program because it's too dependent on other components after you apply the mediator, individual components become unaware of the other componentsthey could still communicate with each other, albeit indirectly, through a mediator objectto reuse a component in a different app, you need to provide it a with a new mediator class use the mediator when you find yourself creating tons of component subclasses just to reuse some basic behavior in various contexts since all relations between components are contained within the mediator, it's easy to define entirely new ways for these components to collaborate by introducing new mediator classes, without having to change the components themselves "},{"title":"How to implement​","type":1,"pageTitle":"Mediator","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/#how-to-implement","content":"identify a group of tightly coupled classes which would benefit from being more independent(e.g., for easier maintenance or simpler reuse of these classes)Declare the mediator interface and describe the desired communication protocol between mediators and various components. In most cases, a single method for receiving notifications from components is sufficient.This interface is crucial when you want to reuse component classes in different contexts. As long as the component works with its mediator via the generic interface, you can link the component with a different implementation of the mediator. Implement the concrete mediator class. This class would benefit from storing references to all of the components it manages. You can go even further and make the mediator responsible for the creation and destruction of component objects. After this, the mediator may resemble a factory or a facade. Components should store a reference to the mediator object. The connection is usually established in the component’s constructor, where a mediator object is passed as an argument. Change the components’ code so that they call the mediator’s notification method instead of methods on other components. Extract the code that involves calling other components into the mediator class.Execute this code whenever the mediator receives notifications from that component. "},{"title":"Pros & Cons​","type":1,"pageTitle":"Mediator","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/#pros--cons","content":""},{"title":"Pros​","type":1,"pageTitle":"Mediator","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/#pros","content":"Single Responsibility Principle. You can extract the communications between various components into a single place, making it easier to comprehend and maintain.Open/Closed Principle. You can introduce new mediators without having to change the actual components.You can reduce coupling between various components of a program.You can reuse individual components more easily. "},{"title":"Cons​","type":1,"pageTitle":"Mediator","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/#cons","content":"Over time a mediator can evolve into a God Object. "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; #include &lt;string&gt; /** * Mediator Design Pattern * * Intent: Lets you reduce chaotic dependencies between objects. The pattern * restricts direct communications between the objects and forces them to * collaborate only via a mediator object. */ /** * The Mediator interface declares a method used by components to notify the * mediator about various events. The Mediator may react to these events and * pass the execution to other components. */ class BaseComponent; class Mediator { public: virtual void Notify(BaseComponent *sender, std::string event) const = 0; }; /** * The Base Component provides the basic functionality of storing a mediator's * instance inside component objects. */ class BaseComponent { protected: Mediator *mediator_; public: BaseComponent(Mediator *mediator = nullptr) : mediator_(mediator) { } void set_mediator(Mediator *mediator) { this-&gt;mediator_ = mediator; } }; /** * Concrete Components implement various functionality. They don't depend on * other components. They also don't depend on any concrete mediator classes. */ class Component1 : public BaseComponent { public: void DoA() { std::cout &lt;&lt; &quot;Component 1 does A.\\n&quot;; this-&gt;mediator_-&gt;Notify(this, &quot;A&quot;); } void DoB() { std::cout &lt;&lt; &quot;Component 1 does B.\\n&quot;; this-&gt;mediator_-&gt;Notify(this, &quot;B&quot;); } }; class Component2 : public BaseComponent { public: void DoC() { std::cout &lt;&lt; &quot;Component 2 does C.\\n&quot;; this-&gt;mediator_-&gt;Notify(this, &quot;C&quot;); } void DoD() { std::cout &lt;&lt; &quot;Component 2 does D.\\n&quot;; this-&gt;mediator_-&gt;Notify(this, &quot;D&quot;); } }; /** * Concrete Mediators implement cooperative behavior by coordinating several * components. */ class ConcreteMediator : public Mediator { private: Component1 *component1_; Component2 *component2_; public: ConcreteMediator(Component1 *c1, Component2 *c2) : component1_(c1), component2_(c2) { this-&gt;component1_-&gt;set_mediator(this); this-&gt;component2_-&gt;set_mediator(this); } void Notify(BaseComponent *sender, std::string event) const override { if (event == &quot;A&quot;) { std::cout &lt;&lt; &quot;Mediator reacts on A and triggers following operations:\\n&quot;; this-&gt;component2_-&gt;DoC(); } if (event == &quot;D&quot;) { std::cout &lt;&lt; &quot;Mediator reacts on D and triggers following operations:\\n&quot;; this-&gt;component1_-&gt;DoB(); this-&gt;component2_-&gt;DoC(); } } }; /** * The client code. */ void ClientCode() { Component1 *c1 = new Component1; Component2 *c2 = new Component2; ConcreteMediator *mediator = new ConcreteMediator(c1, c2); std::cout &lt;&lt; &quot;Client triggers operation A.\\n&quot;; c1-&gt;DoA(); std::cout &lt;&lt; &quot;\\n&quot;; std::cout &lt;&lt; &quot;Client triggers operation D.\\n&quot;; c2-&gt;DoD(); delete c1; delete c2; delete mediator; } int main() { ClientCode(); return 0; } Client triggers operation A. Component 1 does A. Mediator reacts on A and triggers following operations: Component 2 does C. Client triggers operation D. Component 2 does D. Mediator reacts on D and triggers following operations: Component 1 does B. Component 2 does C. ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/cSharp/","content":"C# Example // Mediator Design Pattern // // Intent: Lets you reduce chaotic dependencies between objects. The pattern // restricts direct communications between the objects and forces them to // collaborate only via a mediator object. using System; namespace RefactoringGuru.DesignPatterns.Mediator.Conceptual { // The Mediator interface declares a method used by components to notify the // mediator about various events. The Mediator may react to these events and // pass the execution to other components. public interface IMediator { void Notify(object sender, string ev); } // Concrete Mediators implement cooperative behavior by coordinating several // components. class ConcreteMediator : IMediator { private Component1 _component1; private Component2 _component2; public ConcreteMediator(Component1 component1, Component2 component2) { this._component1 = component1; this._component1.SetMediator(this); this._component2 = component2; this._component2.SetMediator(this); } public void Notify(object sender, string ev) { if (ev == &quot;A&quot;) { Console.WriteLine(&quot;Mediator reacts on A and triggers folowing operations:&quot;); this._component2.DoC(); } if (ev == &quot;D&quot;) { Console.WriteLine(&quot;Mediator reacts on D and triggers following operations:&quot;); this._component1.DoB(); this._component2.DoC(); } } } // The Base Component provides the basic functionality of storing a // mediator's instance inside component objects. class BaseComponent { protected IMediator _mediator; public BaseComponent(IMediator mediator = null) { this._mediator = mediator; } public void SetMediator(IMediator mediator) { this._mediator = mediator; } } // Concrete Components implement various functionality. They don't depend on // other components. They also don't depend on any concrete mediator // classes. class Component1 : BaseComponent { public void DoA() { Console.WriteLine(&quot;Component 1 does A.&quot;); this._mediator.Notify(this, &quot;A&quot;); } public void DoB() { Console.WriteLine(&quot;Component 1 does B.&quot;); this._mediator.Notify(this, &quot;B&quot;); } } class Component2 : BaseComponent { public void DoC() { Console.WriteLine(&quot;Component 2 does C.&quot;); this._mediator.Notify(this, &quot;C&quot;); } public void DoD() { Console.WriteLine(&quot;Component 2 does D.&quot;); this._mediator.Notify(this, &quot;D&quot;); } } class Program { static void Main(string[] args) { // The client code. Component1 component1 = new Component1(); Component2 component2 = new Component2(); new ConcreteMediator(component1, component2); Console.WriteLine(&quot;Client triggets operation A.&quot;); component1.DoA(); Console.WriteLine(); Console.WriteLine(&quot;Client triggers operation D.&quot;); component2.DoD(); } } } Client triggers operation A. Component 1 does A. Mediator reacts on A and triggers following operations: Component 2 does C. Client triggers operation D. Component 2 does D. Mediator reacts on D and triggers following operations: Component 1 does B. Component 2 does C. ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/cSharp/","content":"C# Example // Iterator Design Pattern // // Intent: Lets you traverse elements of a collection without exposing its // underlying representation (list, stack, tree, etc.). using System; using System.Collections; using System.Collections.Generic; namespace RefactoringGuru.DesignPatterns.Iterator.Conceptual { abstract class Iterator : IEnumerator { object IEnumerator.Current =&gt; Current(); // Returns the key of the current element public abstract int Key(); // Returns the current element public abstract object Current(); // Move forward to next element public abstract bool MoveNext(); // Rewinds the Iterator to the first element public abstract void Reset(); } abstract class IteratorAggregate : IEnumerable { // Returns an Iterator or another IteratorAggregate for the implementing // object. public abstract IEnumerator GetEnumerator(); } // Concrete Iterators implement various traversal algorithms. These classes // store the current traversal position at all times. class AlphabeticalOrderIterator : Iterator { private WordsCollection _collection; // Stores the current traversal position. An iterator may have a lot of // other fields for storing iteration state, especially when it is // supposed to work with a particular kind of collection. private int _position = -1; private bool _reverse = false; public AlphabeticalOrderIterator(WordsCollection collection, bool reverse = false) { this._collection = collection; this._reverse = reverse; if (reverse) { this._position = collection.getItems().Count; } } public override object Current() { return this._collection.getItems()[_position]; } public override int Key() { return this._position; } public override bool MoveNext() { int updatedPosition = this._position + (this._reverse ? -1 : 1); if (updatedPosition &gt;= 0 &amp;&amp; updatedPosition &lt; this._collection.getItems().Count) { this._position = updatedPosition; return true; } else { return false; } } public override void Reset() { this._position = this._reverse ? this._collection.getItems().Count - 1 : 0; } } // Concrete Collections provide one or several methods for retrieving fresh // iterator instances, compatible with the collection class. class WordsCollection : IteratorAggregate { List&lt;string&gt; _collection = new List&lt;string&gt;(); bool _direction = false; public void ReverseDirection() { _direction = !_direction; } public List&lt;string&gt; getItems() { return _collection; } public void AddItem(string item) { this._collection.Add(item); } public override IEnumerator GetEnumerator() { return new AlphabeticalOrderIterator(this, _direction); } } class Program { static void Main(string[] args) { // The client code may or may not know about the Concrete Iterator // or Collection classes, depending on the level of indirection you // want to keep in your program. var collection = new WordsCollection(); collection.AddItem(&quot;First&quot;); collection.AddItem(&quot;Second&quot;); collection.AddItem(&quot;Third&quot;); Console.WriteLine(&quot;Straight traversal:&quot;); foreach (var element in collection) { Console.WriteLine(element); } Console.WriteLine(&quot;\\nReverse traversal:&quot;); collection.ReverseDirection(); foreach (var element in collection) { Console.WriteLine(element); } } } } Straight traversal: First Second Third Reverse traversal: Third Second First ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/go/","content":"Go Example package main import &quot;fmt&quot; type freightTrain struct { mediator mediator } func (g *freightTrain) arrive() { if !g.mediator.canArrive(g) { fmt.Println(&quot;FreightTrain: Arrival blocked, waiting&quot;) return } fmt.Println(&quot;FreightTrain: Arrived&quot;) } func (g *freightTrain) depart() { fmt.Println(&quot;FreightTrain: Leaving&quot;) g.mediator.notifyAboutDeparture() } func (g *freightTrain) permitArrival() { fmt.Println(&quot;FreightTrain: Arrival permitted&quot;) g.arrive() } package main type mediator interface { canArrive(train) bool notifyAboutDeparture() } package main import &quot;fmt&quot; type passengerTrain struct { mediator mediator } func (g *passengerTrain) arrive() { if !g.mediator.canArrive(g) { fmt.Println(&quot;PassengerTrain: Arrival blocked, waiting&quot;) return } fmt.Println(&quot;PassengerTrain: Arrived&quot;) } func (g *passengerTrain) depart() { fmt.Println(&quot;PassengerTrain: Leaving&quot;) g.mediator.notifyAboutDeparture() } func (g *passengerTrain) permitArrival() { fmt.Println(&quot;PassengerTrain: Arrival permitted, arriving&quot;) g.arrive() } package main type stationManager struct { isPlatformFree bool trainQueue []train } func newStationManger() *stationManager { return &amp;stationManager{ isPlatformFree: true, } } func (s *stationManager) canArrive(t train) bool { if s.isPlatformFree { s.isPlatformFree = false return true } s.trainQueue = append(s.trainQueue, t) return false } func (s *stationManager) notifyAboutDeparture() { if !s.isPlatformFree { s.isPlatformFree = true } if len(s.trainQueue) &gt; 0 { firstTrainInQueue := s.trainQueue[0] s.trainQueue = s.trainQueue[1:] firstTrainInQueue.permitArrival() } } package main type train interface { arrive() depart() permitArrival() } package main func main() { stationManager := newStationManger() passengerTrain := &amp;passengerTrain{ mediator: stationManager, } freightTrain := &amp;freightTrain{ mediator: stationManager, } passengerTrain.arrive() freightTrain.arrive() passengerTrain.depart() } ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/javascript/","content":"JavaScript Example /** * The Mediator interface declares a method used by components to notify the * mediator about various events. The Mediator may react to these events and * pass the execution to other components. */ class Mediator { notify(sender, event) {} } module.exports = Mediator; const Mediator = require(&quot;./Mediator&quot;); /** * Concrete Mediators implement cooperative behavior by coordinating several * components. */ class ConcreteMediator extends Mediator { constructor(c1, c2) { super(); this.component1 = c1; this.component1.setMediator(this); this.component2 = c2; this.component2.setMediator(this); } notify(sender, event) { if (event === &quot;A&quot;) { console.log(&quot;Mediator reacts on A and triggers following operations:&quot;); this.component2.doC(); } if (event === &quot;D&quot;) { console.log(&quot;Mediator reacts on D and triggers following operations:&quot;); this.component1.doB(); this.component2.doC(); } } } module.exports = ConcreteMediator; /** * The Base Component provides the basic functionality of storing a mediator's * instance inside component objects. */ class BaseComponent { constructor(mediator = null) { this.mediator = mediator; } setMediator(mediator) { this.mediator = mediator; } } module.exports = BaseComponent; const BaseComponent = require(&quot;./BaseComponent&quot;); /** * Concrete Components implement various functionality. They don't depend on * other components. They also don't depend on any concrete mediator classes. */ class Component1 extends BaseComponent { doA() { console.log(&quot;Component 1 does A.&quot;); this.mediator.notify(this, &quot;A&quot;); } doB() { console.log(&quot;Component 1 does B.&quot;); this.mediator.notify(this, &quot;B&quot;); } } module.exports = Component1; const BaseComponent = require(&quot;./BaseComponent&quot;); /** * Concrete Components implement various functionality. They don't depend on * other components. They also don't depend on any concrete mediator classes. */ class Component2 extends BaseComponent { doC() { console.log(&quot;Component 2 does C.&quot;); this.mediator.notify(this, &quot;C&quot;); } doD() { console.log(&quot;Component 2 does D.&quot;); this.mediator.notify(this, &quot;D&quot;); } } module.exports = Component2; /** * Mediator Design Pattern * * Intent: Lets you reduce chaotic dependencies between objects. The pattern * restricts direct communications between the objects and forces them to * collaborate only via a mediator object. */ const Component1 = require(&quot;./Component1&quot;); const Component2 = require(&quot;./Component2&quot;); const ConcreteMediator = require(&quot;./ConcreteMediator&quot;); /** * The client code. */ const c1 = new Component1(); const c2 = new Component2(); const mediator = new ConcreteMediator(c1, c2); console.log(&quot;Client triggers operation A.&quot;); c1.doA(); console.log(&quot;&quot;); console.log(&quot;Client triggers operation D.&quot;); c2.doD(); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/python/","content":"Python Example &quot;&quot;&quot; Mediator Design Pattern Intent: Lets you reduce chaotic dependencies between objects. The pattern restricts direct communications between the objects and forces them to collaborate only via a mediator object. &quot;&quot;&quot; from __future__ import annotations from abc import ABC class Mediator(ABC): &quot;&quot;&quot; The Mediator interface declares a method used by components to notify the mediator about various events. The Mediator may react to these events and pass the execution to other components. &quot;&quot;&quot; def notify(self, sender: object, event: str) -&gt; None: pass class ConcreteMediator(Mediator): def __init__(self, component1: Component1, component2: Component2) -&gt; None: self._component1 = component1 self._component1.mediator = self self._component2 = component2 self._component2.mediator = self def notify(self, sender: object, event: str) -&gt; None: if event == &quot;A&quot;: print(&quot;Mediator reacts on A and triggers following operations:&quot;) self._component2.do_c() elif event == &quot;D&quot;: print(&quot;Mediator reacts on D and triggers following operations:&quot;) self._component1.do_b() self._component2.do_c() class BaseComponent: &quot;&quot;&quot; The Base Component provides the basic functionality of storing a mediator's instance inside component objects. &quot;&quot;&quot; def __init__(self, mediator: Mediator = None) -&gt; None: self._mediator = mediator @property def mediator(self) -&gt; Mediator: return self._mediator @mediator.setter def mediator(self, mediator: Mediator) -&gt; None: self._mediator = mediator &quot;&quot;&quot; Concrete Components implement various functionality. They don't depend on other components. They also don't depend on any concrete mediator classes. &quot;&quot;&quot; class Component1(BaseComponent): def do_a(self) -&gt; None: print(&quot;Component 1 does A.&quot;) self.mediator.notify(self, &quot;A&quot;) def do_b(self) -&gt; None: print(&quot;Component 1 does B.&quot;) self.mediator.notify(self, &quot;B&quot;) class Component2(BaseComponent): def do_c(self) -&gt; None: print(&quot;Component 2 does C.&quot;) self.mediator.notify(self, &quot;C&quot;) def do_d(self) -&gt; None: print(&quot;Component 2 does D.&quot;) self.mediator.notify(self, &quot;D&quot;) if __name__ == &quot;__main__&quot;: # The client code. c1 = Component1() c2 = Component2() mediator = ConcreteMediator(c1, c2) print(&quot;Client triggers operation A.&quot;) c1.do_a() print(&quot;\\n&quot;, end=&quot;&quot;) print(&quot;Client triggers operation D.&quot;) c2.do_d() Client triggers operation A. Component 1 does A. Mediator reacts on A and triggers following operations: Component 2 does C. Client triggers operation D. Component 2 does D. Mediator reacts on D and triggers following operations: Component 1 does B. Component 2 does C. ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/swift/","content":"Swift Example /// Mediator Design Pattern /// /// Intent: Lets you reduce chaotic dependencies between objects. The pattern /// restricts direct communications between the objects and forces them to /// collaborate only via a mediator object. import XCTest /// The Mediator interface declares a method used by components to notify the /// mediator about various events. The Mediator may react to these events and /// pass the execution to other components. protocol Mediator: AnyObject { func notify(sender: BaseComponent, event: String) } /// Concrete Mediators implement cooperative behavior by coordinating several /// components. class ConcreteMediator: Mediator { private var component1: Component1 private var component2: Component2 init(_ component1: Component1, _ component2: Component2) { self.component1 = component1 self.component2 = component2 component1.update(mediator: self) component2.update(mediator: self) } func notify(sender: BaseComponent, event: String) { if event == &quot;A&quot; { print(&quot;Mediator reacts on A and triggers following operations:&quot;) self.component2.doC() } else if (event == &quot;D&quot;) { print(&quot;Mediator reacts on D and triggers following operations:&quot;) self.component1.doB() self.component2.doC() } } } /// The Base Component provides the basic functionality of storing a mediator's /// instance inside component objects. class BaseComponent { fileprivate weak var mediator: Mediator? init(mediator: Mediator? = nil) { self.mediator = mediator } func update(mediator: Mediator) { self.mediator = mediator } } /// Concrete Components implement various functionality. They don't depend on /// other components. They also don't depend on any concrete mediator classes. class Component1: BaseComponent { func doA() { print(&quot;Component 1 does A.&quot;) mediator?.notify(sender: self, event: &quot;A&quot;) } func doB() { print(&quot;Component 1 does B.\\n&quot;) mediator?.notify(sender: self, event: &quot;B&quot;) } } class Component2: BaseComponent { func doC() { print(&quot;Component 2 does C.&quot;) mediator?.notify(sender: self, event: &quot;C&quot;) } func doD() { print(&quot;Component 2 does D.&quot;) mediator?.notify(sender: self, event: &quot;D&quot;) } } /// Let's see how it all works together. class MediatorConceptual: XCTestCase { func testMediatorConceptual() { let component1 = Component1() let component2 = Component2() let mediator = ConcreteMediator(component1, component2) print(&quot;Client triggers operation A.&quot;) component1.doA() print(&quot;\\nClient triggers operation D.&quot;) component2.doD() print(mediator) } } Client triggers operation A. Component 1 does A. Mediator reacts on A and triggers following operations: Component 2 does C. Client triggers operation D. Component 2 does D. Mediator reacts on D and triggers following operations: Component 1 does B. Component 2 does C. ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/typescript/","content":"TypeScript Example /** * Mediator Design Pattern * * Intent: Lets you reduce chaotic dependencies between objects. The pattern * restricts direct communications between the objects and forces them to * collaborate only via a mediator object. */ /** * The Mediator interface declares a method used by components to notify the * mediator about various events. The Mediator may react to these events and * pass the execution to other components. */ interface Mediator { notify(sender: object, event: string): void; } /** * Concrete Mediators implement cooperative behavior by coordinating several * components. */ class ConcreteMediator implements Mediator { private component1: Component1; private component2: Component2; constructor(c1: Component1, c2: Component2) { this.component1 = c1; this.component1.setMediator(this); this.component2 = c2; this.component2.setMediator(this); } public notify(sender: object, event: string): void { if (event === &quot;A&quot;) { console.log(&quot;Mediator reacts on A and triggers following operations:&quot;); this.component2.doC(); } if (event === &quot;D&quot;) { console.log(&quot;Mediator reacts on D and triggers following operations:&quot;); this.component1.doB(); this.component2.doC(); } } } /** * The Base Component provides the basic functionality of storing a mediator's * instance inside component objects. */ class BaseComponent { protected mediator: Mediator; constructor(mediator: Mediator = null) { this.mediator = mediator; } public setMediator(mediator: Mediator): void { this.mediator = mediator; } } /** * Concrete Components implement various functionality. They don't depend on * other components. They also don't depend on any concrete mediator classes. */ class Component1 extends BaseComponent { public doA(): void { console.log(&quot;Component 1 does A.&quot;); this.mediator.notify(this, &quot;A&quot;); } public doB(): void { console.log(&quot;Component 1 does B.&quot;); this.mediator.notify(this, &quot;B&quot;); } } class Component2 extends BaseComponent { public doC(): void { console.log(&quot;Component 2 does C.&quot;); this.mediator.notify(this, &quot;C&quot;); } public doD(): void { console.log(&quot;Component 2 does D.&quot;); this.mediator.notify(this, &quot;D&quot;); } } /** * The client code. */ const c1 = new Component1(); const c2 = new Component2(); const mediator = new ConcreteMediator(c1, c2); console.log(&quot;Client triggers operation A.&quot;); c1.doA(); console.log(&quot;&quot;); console.log(&quot;Client triggers operation D.&quot;); c2.doD(); Client triggers operation A. Component 1 does A. Mediator reacts on A and triggers following operations: Component 2 does C. Client triggers operation D. Component 2 does D. Mediator reacts on D and triggers following operations: Component 1 does B. Component 2 does C. ","keywords":""},{"title":"Memento","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/","content":"","keywords":""},{"title":"Problem​","type":1,"pageTitle":"Memento","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/#problem","content":"imagine developing a text editor app, it can do text editing, format text, and insert inline imagesyou decided to let users undo any operations carried out on the text you decided to take the direct approach for implementationbefore performing any operation, the app records the state of all objects and saves it in some storagelater when a user decides to revert an action, the app fetches the latest snapshot from the history and uses it to restore the state of all objects regarding the state snapshot, how would you produce one?you would need to go over all the fields in an object and copy their values into storage however, this would only work if the object had quite relaxed access restrictions to its contentsunfortunately, most real objects won't let others peek inside them that easily, which hides all significant data in private fields assuming that our objects behave like hippies prefer open relations and keeping their state publicthis approach would solve the immediate problem and let you produce snapshots of objects' states at willit still has some serious issues in the future, you might decide to refactor some of the editor classes or add or remove some of the fieldsthis would also require changing the classes responsible for copying the state of the affected objects Considering the actual snapshots of the editor's state what data does it contain at a bare minimum, it must contain the actual text, cursor coordinates, current scroll position, etc to make a snapshot, you would need to collect these values and put them into some kind of containermost likely you would store lots of these container objects inside some list that would represent the history containers would end up being objects of 1 classclass would have almost no methods, but lots of fields that mirror the editor's state to allow other objects to write and read data to and from a snapshot, the fields need to be public that would expose all the editor's state, private or notother classes would become dependent on every little change to the snapshot class this reaches a dead end you either expose all internal details of classes, making them too fragileor restrict access to their state, making it impossible to produce snapshots "},{"title":"Solution​","type":1,"pageTitle":"Memento","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/#solution","content":"the problems are caused by broken encapsulation some objects try to do more than they are supposed tothey try to invade the private space of other objects instead of letting these objects perform the actual action, so as to collect the data required to perform the action Memento pattern delegates creating the state snapshots to the actual owner of that state (the originator object) hence, instead of other objects trying to copy the editor's state from the outside the editor class itself can make the snapshot since it has full access to its own state the pattern suggests storing the copy of the object's state in a special object called memento the contents of the memento aren't accessible to any other object except the one that produced itother objects must communicate with mementos using a limited interface which may allow fetching the snapshot's metadata but not the original object's state contained in the snapshot such a restrictive policy lets you store mementos inside other objects usually called caretakersince the caretaker works with the memento only via the limited interface it's not able to tamper with the state stored inside the mementoat the same time, the originator has access to all fields inside the memento allowing it to restore its previous state at will in the text editor example, we can create a separate history class to act as the caretaker a stack of mementos stored inside the caretaker will grow each time the editor is about to execute an operationyou could render this stack within the UI, displaying the history of previously performed operations to a user when a user triggers the undo, the history grabs the most recent memento from the stack and passes it back to the editor, requesting a roll-back since the editor has full access to the memento, it changes its own state with the values taken from the memento "},{"title":"Structure​","type":1,"pageTitle":"Memento","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/#structure","content":" The Originator class can produce snapshots of its own state, as well as restore its state from snapshots when needed. The Memento is a value object that acts as a snapshot of the originator’s state. It’s a common practice to make the memento immutable and pass it the data only once, via the constructor. The Caretaker knows not only “when” and “why” to capture the originator’s state, but also when the state should be restored. A caretaker can keep track of the originator’s history by storing a stack of mementos. When the originator has to travel back in history, the caretaker fetches the topmost memento from the stack and passes it to the originator’s restoration method. In this implementation, the memento class is nested inside the originator. This lets the originator access the fields and methods of the memento, even though they’re declared private.On the other hand, the caretaker has very limited access to the memento’s fields and methods, which lets it store mementos in a stack but not tamper with their state. "},{"title":"When to use​","type":1,"pageTitle":"Memento","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/#when-to-use","content":"Use the Memento pattern when you want to produce snapshots of the object’s state to be able to restore a previous state of the object it lets you make full copies of an object’s state, including private fields, and store them separately from the objectWhile most people remember this pattern thanks to the “undo” use case, it’s also indispensable when dealing with transactions Use the pattern when direct access to the object’s fields/getters/setters violates its encapsulation it makes the object itself responsible for creating a snapshot of its stateNo other object can read the snapshot, making the original object’s state data safe and secure "},{"title":"How to implement​","type":1,"pageTitle":"Memento","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/#how-to-implement","content":"Determine what class will play the role of the originator It’s important to know whether the program uses one central object of this type or multiple smaller ones Create the memento class One by one, declare a set of fields that mirror the fields declared inside the originator class Make the memento class immutable A memento should accept the data just once, via the constructorThe class should have no setters If your programming language supports nested classes, nest the memento inside the originator If not, extract a blank interface from the memento class and make all other objects use it to refer to the mementoYou may add some metadata operations to the interface, but nothing that exposes the originator’s state Add a method for producing mementos to the originator class The originator should pass its state to the memento via one or multiple arguments of the memento’s constructorThe return type of the method should be of the interface you extracted in the previous step (assuming that you extracted it at all)Under the hood, the memento-producing method should work directly with the memento class Add a method for restoring the originator’s state to its class It should accept a memento object as an argumentIf you extracted an interface in the previous step, make it the type of the parameterIn this case, you need to typecast the incoming object to the memento class, since the originator needs full access to that object The caretaker, whether it represents a command object, a history, or something entirely different, should know when to request new mementos from the originator, how to store them and when to restore the originator with a particular memento The link between caretakers and originators may be moved into the memento class In this case, each memento must be connected to the originator that had created itThe restoration method would also move to the memento classHowever, this would all make sense only if the memento class is nested into originator or the originator class provides sufficient setters for overriding its state "},{"title":"Pros & Cons​","type":1,"pageTitle":"Memento","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/#pros--cons","content":""},{"title":"Pros​","type":1,"pageTitle":"Memento","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/#pros","content":"You can produce snapshots of the object’s state without violating its encapsulationYou can simplify the originator’s code by letting the caretaker maintain the history of the originator’s state "},{"title":"Cons​","type":1,"pageTitle":"Memento","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/#cons","content":"The app might consume lots of RAM if clients create mementos too oftenCaretakers should track the originator’s lifecycle to be able to destroy obsolete mementosMost dynamic programming languages, such as PHP, Python and JavaScript, can’t guarantee that the state within the memento stays untouched "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/cPlusPlus/","content":"C++ Example #include &lt;cstdlib&gt; #include &lt;ctime&gt; #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; /** * Memento Design Pattern * * Intent: Lets you save and restore the previous state of an object without * revealing the details of its implementation. */ /** * The Memento interface provides a way to retrieve the memento's metadata, such * as creation date or name. However, it doesn't expose the Originator's state. */ class Memento { public: virtual std::string GetName() const = 0; virtual std::string date() const = 0; virtual std::string state() const = 0; }; /** * The Concrete Memento contains the infrastructure for storing the Originator's * state. */ class ConcreteMemento : public Memento { private: std::string state_; std::string date_; public: ConcreteMemento(std::string state) : state_(state) { this-&gt;state_ = state; std::time_t now = std::time(0); this-&gt;date_ = std::ctime(&amp;now); } /** * The Originator uses this method when restoring its state. */ std::string state() const override { return this-&gt;state_; } /** * The rest of the methods are used by the Caretaker to display metadata. */ std::string GetName() const override { return this-&gt;date_ + &quot; / (&quot; + this-&gt;state_.substr(0, 9) + &quot;...)&quot;; } std::string date() const override { return this-&gt;date_; } }; /** * The Originator holds some important state that may change over time. It also * defines a method for saving the state inside a memento and another method for * restoring the state from it. */ class Originator { /** * @var string For the sake of simplicity, the originator's state is stored * inside a single variable. */ private: std::string state_; std::string GenerateRandomString(int length = 10) { const char alphanum[] = &quot;0123456789&quot; &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; &quot;abcdefghijklmnopqrstuvwxyz&quot;; int stringLength = sizeof(alphanum) - 1; std::string random_string; for (int i = 0; i &lt; length; i++) { random_string += alphanum[std::rand() % stringLength]; } return random_string; } public: Originator(std::string state) : state_(state) { std::cout &lt;&lt; &quot;Originator: My initial state is: &quot; &lt;&lt; this-&gt;state_ &lt;&lt; &quot;\\n&quot;; } /** * The Originator's business logic may affect its internal state. Therefore, * the client should backup the state before launching methods of the business * logic via the save() method. */ void DoSomething() { std::cout &lt;&lt; &quot;Originator: I'm doing something important.\\n&quot;; this-&gt;state_ = this-&gt;GenerateRandomString(30); std::cout &lt;&lt; &quot;Originator: and my state has changed to: &quot; &lt;&lt; this-&gt;state_ &lt;&lt; &quot;\\n&quot;; } /** * Saves the current state inside a memento. */ Memento *Save() { return new ConcreteMemento(this-&gt;state_); } /** * Restores the Originator's state from a memento object. */ void Restore(Memento *memento) { this-&gt;state_ = memento-&gt;state(); std::cout &lt;&lt; &quot;Originator: My state has changed to: &quot; &lt;&lt; this-&gt;state_ &lt;&lt; &quot;\\n&quot;; } }; /** * The Caretaker doesn't depend on the Concrete Memento class. Therefore, it * doesn't have access to the originator's state, stored inside the memento. It * works with all mementos via the base Memento interface. */ class Caretaker { /** * @var Memento[] */ private: std::vector&lt;Memento *&gt; mementos_; /** * @var Originator */ Originator *originator_; public: Caretaker(Originator *originator) : originator_(originator) { this-&gt;originator_ = originator; } void Backup() { std::cout &lt;&lt; &quot;\\nCaretaker: Saving Originator's state...\\n&quot;; this-&gt;mementos_.push_back(this-&gt;originator_-&gt;Save()); } void Undo() { if (!this-&gt;mementos_.size()) { return; } Memento *memento = this-&gt;mementos_.back(); this-&gt;mementos_.pop_back(); std::cout &lt;&lt; &quot;Caretaker: Restoring state to: &quot; &lt;&lt; memento-&gt;GetName() &lt;&lt; &quot;\\n&quot;; try { this-&gt;originator_-&gt;Restore(memento); } catch (...) { this-&gt;Undo(); } } void ShowHistory() const { std::cout &lt;&lt; &quot;Caretaker: Here's the list of mementos:\\n&quot;; for (Memento *memento : this-&gt;mementos_) { std::cout &lt;&lt; memento-&gt;GetName() &lt;&lt; &quot;\\n&quot;; } } }; /** * Client code. */ void ClientCode() { Originator *originator = new Originator(&quot;Super-duper-super-puper-super.&quot;); Caretaker *caretaker = new Caretaker(originator); caretaker-&gt;Backup(); originator-&gt;DoSomething(); caretaker-&gt;Backup(); originator-&gt;DoSomething(); caretaker-&gt;Backup(); originator-&gt;DoSomething(); std::cout &lt;&lt; &quot;\\n&quot;; caretaker-&gt;ShowHistory(); std::cout &lt;&lt; &quot;\\nClient: Now, let's rollback!\\n\\n&quot;; caretaker-&gt;Undo(); std::cout &lt;&lt; &quot;\\nClient: Once more!\\n\\n&quot;; caretaker-&gt;Undo(); delete originator; delete caretaker; } int main() { std::srand(static_cast&lt;unsigned int&gt;(std::time(NULL))); ClientCode(); return 0; } Originator: My initial state is: Super-duper-super-puper-super. Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: uOInE8wmckHYPwZS7PtUTwuwZfCIbz Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: te6RGmykRpbqaWo5MEwjji1fpM1t5D Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: hX5xWDVljcQ9ydD7StUfbBt5Z7pcSN Caretaker: Here's the list of mementos: Sat Oct 19 18:09:37 2019 / (Super-dup...) Sat Oct 19 18:09:37 2019 / (uOInE8wmc...) Sat Oct 19 18:09:37 2019 / (te6RGmykR...) Client: Now, let's rollback! Caretaker: Restoring state to: Sat Oct 19 18:09:37 2019 / (te6RGmykR...) Originator: My state has changed to: te6RGmykRpbqaWo5MEwjji1fpM1t5D Client: Once more! Caretaker: Restoring state to: Sat Oct 19 18:09:37 2019 / (uOInE8wmc...) Originator: My state has changed to: uOInE8wmckHYPwZS7PtUTwuwZfCIbz ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/cSharp/","content":"C# Example // Memento Design Pattern // // Intent: Lets you save and restore the previous state of an object without // revealing the details of its implementation. using System; using System.Collections.Generic; using System.Linq; using System.Threading; namespace RefactoringGuru.DesignPatterns.Memento.Conceptual { // The Originator holds some important state that may change over time. It // also defines a method for saving the state inside a memento and another // method for restoring the state from it. class Originator { // For the sake of simplicity, the originator's state is stored inside a // single variable. private string _state; public Originator(string state) { this._state = state; Console.WriteLine(&quot;Originator: My initial state is: &quot; + state); } // The Originator's business logic may affect its internal state. // Therefore, the client should backup the state before launching // methods of the business logic via the save() method. public void DoSomething() { Console.WriteLine(&quot;Originator: I'm doing something important.&quot;); this._state = this.GenerateRandomString(30); Console.WriteLine($&quot;Originator: and my state has changed to: {_state}&quot;); } private string GenerateRandomString(int length = 10) { string allowedSymbols = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;; string result = string.Empty; while (length &gt; 0) { result += allowedSymbols[new Random().Next(0, allowedSymbols.Length)]; Thread.Sleep(12); length--; } return result; } // Saves the current state inside a memento. public IMemento Save() { return new ConcreteMemento(this._state); } // Restores the Originator's state from a memento object. public void Restore(IMemento memento) { if (!(memento is ConcreteMemento)) { throw new Exception(&quot;Unknown memento class &quot; + memento.ToString()); } this._state = memento.GetState(); Console.Write($&quot;Originator: My state has changed to: {_state}&quot;); } } // The Memento interface provides a way to retrieve the memento's metadata, // such as creation date or name. However, it doesn't expose the // Originator's state. public interface IMemento { string GetName(); string GetState(); DateTime GetDate(); } // The Concrete Memento contains the infrastructure for storing the // Originator's state. class ConcreteMemento : IMemento { private string _state; private DateTime _date; public ConcreteMemento(string state) { this._state = state; this._date = DateTime.Now; } // The Originator uses this method when restoring its state. public string GetState() { return this._state; } // The rest of the methods are used by the Caretaker to display // metadata. public string GetName() { return $&quot;{this._date} / ({this._state.Substring(0, 9)})...&quot;; } public DateTime GetDate() { return this._date; } } // The Caretaker doesn't depend on the Concrete Memento class. Therefore, it // doesn't have access to the originator's state, stored inside the memento. // It works with all mementos via the base Memento interface. class Caretaker { private List&lt;IMemento&gt; _mementos = new List&lt;IMemento&gt;(); private Originator _originator = null; public Caretaker(Originator originator) { this._originator = originator; } public void Backup() { Console.WriteLine(&quot;\\nCaretaker: Saving Originator's state...&quot;); this._mementos.Add(this._originator.Save()); } public void Undo() { if (this._mementos.Count == 0) { return; } var memento = this._mementos.Last(); this._mementos.Remove(memento); Console.WriteLine(&quot;Caretaker: Restoring state to: &quot; + memento.GetName()); try { this._originator.Restore(memento); } catch (Exception) { this.Undo(); } } public void ShowHistory() { Console.WriteLine(&quot;Caretaker: Here's the list of mementos:&quot;); foreach (var memento in this._mementos) { Console.WriteLine(memento.GetName()); } } } class Program { static void Main(string[] args) { // Client code. Originator originator = new Originator(&quot;Super-duper-super-puper-super.&quot;); Caretaker caretaker = new Caretaker(originator); caretaker.Backup(); originator.DoSomething(); caretaker.Backup(); originator.DoSomething(); caretaker.Backup(); originator.DoSomething(); Console.WriteLine(); caretaker.ShowHistory(); Console.WriteLine(&quot;\\nClient: Now, let's rollback!\\n&quot;); caretaker.Undo(); Console.WriteLine(&quot;\\n\\nClient: Once more!\\n&quot;); caretaker.Undo(); Console.WriteLine(); } } } Originator: My initial state is: Super-duper-super-puper-super. Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: oGyQIIatlDDWNgYYqJATTmdwnnGZQj Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: jBtMDDWogzzRJbTTmEwOOhZrjjBULe Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: exoHyyRkbuuNEXOhhArKccUmexPPHZ Caretaker: Here's the list of mementos: 12.06.2018 15:52:45 / (Super-dup...) 12.06.2018 15:52:46 / (oGyQIIatl...) 12.06.2018 15:52:46 / (jBtMDDWog...) Client: Now, let's rollback! Caretaker: Restoring state to: 12.06.2018 15:52:46 / (jBtMDDWog...) Originator: My state has changed to: jBtMDDWogzzRJbTTmEwOOhZrjjBULe Client: Once more! Caretaker: Restoring state to: 12.06.2018 15:52:46 / (oGyQIIatl...) Originator: My state has changed to: oGyQIIatlDDWNgYYqJATTmdwnnGZQj ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/go/","content":"Go Example package main type caretaker struct { mementoArray []*memento } func (c *caretaker) addMemento(m *memento) { c.mementoArray = append(c.mementoArray, m) } func (c *caretaker) getMemento(index int) *memento { return c.mementoArray[index] } package main type memento struct { state string } func (m *memento) getSavedState() string { return m.state } package main type originator struct { state string } func (e *originator) createMemento() *memento { return &amp;memento{state: e.state} } func (e *originator) restoreMemento(m *memento) { e.state = m.getSavedState() } func (e *originator) setState(state string) { e.state = state } func (e *originator) getState() string { return e.state } package main import &quot;fmt&quot; func main() { caretaker := &amp;caretaker{ mementoArray: make([]*memento, 0), } originator := &amp;originator{ state: &quot;A&quot;, } fmt.Printf(&quot;Originator Current State: %s\\n&quot;, originator.getState()) caretaker.addMemento(originator.createMemento()) originator.setState(&quot;B&quot;) fmt.Printf(&quot;Originator Current State: %s\\n&quot;, originator.getState()) caretaker.addMemento(originator.createMemento()) originator.setState(&quot;C&quot;) fmt.Printf(&quot;Originator Current State: %s\\n&quot;, originator.getState()) caretaker.addMemento(originator.createMemento()) originator.restoreMemento(caretaker.getMemento(1)) fmt.Printf(&quot;Restored to State: %s\\n&quot;, originator.getState()) originator.restoreMemento(caretaker.getMemento(0)) fmt.Printf(&quot;Restored to State: %s\\n&quot;, originator.getState()) } originator Current State: A originator Current State: B originator Current State: C Restored to State: B Restored to State: A ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/java/","content":"Java Example iterators iterators/FacebookIterator.java package refactoring_guru.iterator.example.iterators; import refactoring_guru.iterator.example.profile.Profile; import refactoring_guru.iterator.example.social_networks.Facebook; import java.util.ArrayList; import java.util.List; public class FacebookIterator implements ProfileIterator { private Facebook facebook; private String type; private String email; private int currentPosition = 0; private List&lt;String&gt; emails = new ArrayList&lt;&gt;(); private List&lt;Profile&gt; profiles = new ArrayList&lt;&gt;(); public FacebookIterator(Facebook facebook, String type, String email) { this.facebook = facebook; this.type = type; this.email = email; } private void lazyLoad() { if (emails.size() == 0) { List&lt;String&gt; profiles = facebook.requestProfileFriendsFromFacebook(this.email, this.type); for (String profile : profiles) { this.emails.add(profile); this.profiles.add(null); } } } @Override public boolean hasNext() { lazyLoad(); return currentPosition &lt; emails.size(); } @Override public Profile getNext() { if (!hasNext()) { return null; } String friendEmail = emails.get(currentPosition); Profile friendProfile = profiles.get(currentPosition); if (friendProfile == null) { friendProfile = facebook.requestProfileFromFacebook(friendEmail); profiles.set(currentPosition, friendProfile); } currentPosition++; return friendProfile; } @Override public void reset() { currentPosition = 0; } } iterators/LinkedInIterator.java package refactoring_guru.iterator.example.iterators; import refactoring_guru.iterator.example.profile.Profile; import refactoring_guru.iterator.example.social_networks.LinkedIn; import java.util.ArrayList; import java.util.List; public class LinkedInIterator implements ProfileIterator { private LinkedIn linkedIn; private String type; private String email; private int currentPosition = 0; private List&lt;String&gt; emails = new ArrayList&lt;&gt;(); private List&lt;Profile&gt; contacts = new ArrayList&lt;&gt;(); public LinkedInIterator(LinkedIn linkedIn, String type, String email) { this.linkedIn = linkedIn; this.type = type; this.email = email; } private void lazyLoad() { if (emails.size() == 0) { List&lt;String&gt; profiles = linkedIn.requestRelatedContactsFromLinkedInAPI(this.email, this.type); for (String profile : profiles) { this.emails.add(profile); this.contacts.add(null); } } } @Override public boolean hasNext() { lazyLoad(); return currentPosition &lt; emails.size(); } @Override public Profile getNext() { if (!hasNext()) { return null; } String friendEmail = emails.get(currentPosition); Profile friendContact = contacts.get(currentPosition); if (friendContact == null) { friendContact = linkedIn.requestContactInfoFromLinkedInAPI(friendEmail); contacts.set(currentPosition, friendContact); } currentPosition++; return friendContact; } @Override public void reset() { currentPosition = 0; } } iterators/ProfileIterator.java package refactoring_guru.iterator.example.iterators; import refactoring_guru.iterator.example.profile.Profile; public interface ProfileIterator { boolean hasNext(); Profile getNext(); void reset(); } profile profile/Profile.java package refactoring_guru.iterator.example.profile; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; public class Profile { private String name; private String email; private Map&lt;String, List&lt;String&gt;&gt; contacts = new HashMap&lt;&gt;(); public Profile(String email, String name, String... contacts) { this.email = email; this.name = name; // Parse contact list from a set of &quot;friend:email@gmail.com&quot; pairs. for (String contact : contacts) { String[] parts = contact.split(&quot;:&quot;); String contactType = &quot;friend&quot;, contactEmail; if (parts.length == 1) { contactEmail = parts[0]; } else { contactType = parts[0]; contactEmail = parts[1]; } if (!this.contacts.containsKey(contactType)) { this.contacts.put(contactType, new ArrayList&lt;&gt;()); } this.contacts.get(contactType).add(contactEmail); } } public String getEmail() { return email; } public String getName() { return name; } public List&lt;String&gt; getContacts(String contactType) { if (!this.contacts.containsKey(contactType)) { this.contacts.put(contactType, new ArrayList&lt;&gt;()); } return contacts.get(contactType); } } social_networks social_networks/Facebook.java package refactoring_guru.iterator.example.social_networks; import refactoring_guru.iterator.example.iterators.FacebookIterator; import refactoring_guru.iterator.example.iterators.ProfileIterator; import refactoring_guru.iterator.example.profile.Profile; import java.util.ArrayList; import java.util.List; public class Facebook implements SocialNetwork { private List&lt;Profile&gt; profiles; public Facebook(List&lt;Profile&gt; cache) { if (cache != null) { this.profiles = cache; } else { this.profiles = new ArrayList&lt;&gt;(); } } public Profile requestProfileFromFacebook(String profileEmail) { // Here would be a POST request to one of the Facebook API endpoints. // Instead, we emulates long network connection, which you would expect // in the real life... simulateNetworkLatency(); System.out.println(&quot;Facebook: Loading profile '&quot; + profileEmail + &quot;' over the network...&quot;); // ...and return test data. return findProfile(profileEmail); } public List&lt;String&gt; requestProfileFriendsFromFacebook(String profileEmail, String contactType) { // Here would be a POST request to one of the Facebook API endpoints. // Instead, we emulates long network connection, which you would expect // in the real life... simulateNetworkLatency(); System.out.println(&quot;Facebook: Loading '&quot; + contactType + &quot;' list of '&quot; + profileEmail + &quot;' over the network...&quot;); // ...and return test data. Profile profile = findProfile(profileEmail); if (profile != null) { return profile.getContacts(contactType); } return null; } private Profile findProfile(String profileEmail) { for (Profile profile : profiles) { if (profile.getEmail().equals(profileEmail)) { return profile; } } return null; } private void simulateNetworkLatency() { try { Thread.sleep(2500); } catch (InterruptedException ex) { ex.printStackTrace(); } } @Override public ProfileIterator createFriendsIterator(String profileEmail) { return new FacebookIterator(this, &quot;friends&quot;, profileEmail); } @Override public ProfileIterator createCoworkersIterator(String profileEmail) { return new FacebookIterator(this, &quot;coworkers&quot;, profileEmail); } } social_networks/LinkedIn.java package refactoring_guru.iterator.example.social_networks; import refactoring_guru.iterator.example.iterators.LinkedInIterator; import refactoring_guru.iterator.example.iterators.ProfileIterator; import refactoring_guru.iterator.example.profile.Profile; import java.util.ArrayList; import java.util.List; public class LinkedIn implements SocialNetwork { private List&lt;Profile&gt; contacts; public LinkedIn(List&lt;Profile&gt; cache) { if (cache != null) { this.contacts = cache; } else { this.contacts = new ArrayList&lt;&gt;(); } } public Profile requestContactInfoFromLinkedInAPI(String profileEmail) { // Here would be a POST request to one of the LinkedIn API endpoints. // Instead, we emulates long network connection, which you would expect // in the real life... simulateNetworkLatency(); System.out.println(&quot;LinkedIn: Loading profile '&quot; + profileEmail + &quot;' over the network...&quot;); // ...and return test data. return findContact(profileEmail); } public List&lt;String&gt; requestRelatedContactsFromLinkedInAPI(String profileEmail, String contactType) { // Here would be a POST request to one of the LinkedIn API endpoints. // Instead, we emulates long network connection, which you would expect // in the real life. simulateNetworkLatency(); System.out.println(&quot;LinkedIn: Loading '&quot; + contactType + &quot;' list of '&quot; + profileEmail + &quot;' over the network...&quot;); // ...and return test data. Profile profile = findContact(profileEmail); if (profile != null) { return profile.getContacts(contactType); } return null; } private Profile findContact(String profileEmail) { for (Profile profile : contacts) { if (profile.getEmail().equals(profileEmail)) { return profile; } } return null; } private void simulateNetworkLatency() { try { Thread.sleep(2500); } catch (InterruptedException ex) { ex.printStackTrace(); } } @Override public ProfileIterator createFriendsIterator(String profileEmail) { return new LinkedInIterator(this, &quot;friends&quot;, profileEmail); } @Override public ProfileIterator createCoworkersIterator(String profileEmail) { return new LinkedInIterator(this, &quot;coworkers&quot;, profileEmail); } } social_networks/SocialNetwork.java package refactoring_guru.iterator.example.social_networks; import refactoring_guru.iterator.example.iterators.ProfileIterator; public interface SocialNetwork { ProfileIterator createFriendsIterator(String profileEmail); ProfileIterator createCoworkersIterator(String profileEmail); } spammer spammer/SocialSpammer.java package refactoring_guru.iterator.example.spammer; import refactoring_guru.iterator.example.iterators.ProfileIterator; import refactoring_guru.iterator.example.profile.Profile; import refactoring_guru.iterator.example.social_networks.SocialNetwork; public class SocialSpammer { public SocialNetwork network; public ProfileIterator iterator; public SocialSpammer(SocialNetwork network) { this.network = network; } public void sendSpamToFriends(String profileEmail, String message) { System.out.println(&quot;\\nIterating over friends...\\n&quot;); iterator = network.createFriendsIterator(profileEmail); while (iterator.hasNext()) { Profile profile = iterator.getNext(); sendMessage(profile.getEmail(), message); } } public void sendSpamToCoworkers(String profileEmail, String message) { System.out.println(&quot;\\nIterating over coworkers...\\n&quot;); iterator = network.createCoworkersIterator(profileEmail); while (iterator.hasNext()) { Profile profile = iterator.getNext(); sendMessage(profile.getEmail(), message); } } public void sendMessage(String email, String message) { System.out.println(&quot;Sent message to: '&quot; + email + &quot;'. Message body: '&quot; + message + &quot;'&quot;); } } Demo.java package refactoring_guru.iterator.example; import refactoring_guru.iterator.example.profile.Profile; import refactoring_guru.iterator.example.social_networks.Facebook; import refactoring_guru.iterator.example.social_networks.LinkedIn; import refactoring_guru.iterator.example.social_networks.SocialNetwork; import refactoring_guru.iterator.example.spammer.SocialSpammer; import java.util.ArrayList; import java.util.List; import java.util.Scanner; /** * Demo class. Everything comes together here. */ public class Demo { public static Scanner scanner = new Scanner(System.in); public static void main(String[] args) { System.out.println(&quot;Please specify social network to target spam tool (default:Facebook):&quot;); System.out.println(&quot;1. Facebook&quot;); System.out.println(&quot;2. LinkedIn&quot;); String choice = scanner.nextLine(); SocialNetwork network; if (choice.equals(&quot;2&quot;)) { network = new LinkedIn(createTestProfiles()); } else { network = new Facebook(createTestProfiles()); } SocialSpammer spammer = new SocialSpammer(network); spammer.sendSpamToFriends(&quot;anna.smith@bing.com&quot;, &quot;Hey! This is Anna's friend Josh. Can you do me a favor and like this post [link]?&quot;); spammer.sendSpamToCoworkers(&quot;anna.smith@bing.com&quot;, &quot;Hey! This is Anna's boss Jason. Anna told me you would be interested in [link].&quot;); } public static List&lt;Profile&gt; createTestProfiles() { List&lt;Profile&gt; data = new ArrayList&lt;Profile&gt;(); data.add(new Profile(&quot;anna.smith@bing.com&quot;, &quot;Anna Smith&quot;, &quot;friends:mad_max@ya.com&quot;, &quot;friends:catwoman@yahoo.com&quot;, &quot;coworkers:sam@amazon.com&quot;)); data.add(new Profile(&quot;mad_max@ya.com&quot;, &quot;Maximilian&quot;, &quot;friends:anna.smith@bing.com&quot;, &quot;coworkers:sam@amazon.com&quot;)); data.add(new Profile(&quot;bill@microsoft.eu&quot;, &quot;Billie&quot;, &quot;coworkers:avanger@ukr.net&quot;)); data.add(new Profile(&quot;avanger@ukr.net&quot;, &quot;John Day&quot;, &quot;coworkers:bill@microsoft.eu&quot;)); data.add(new Profile(&quot;sam@amazon.com&quot;, &quot;Sam Kitting&quot;, &quot;coworkers:anna.smith@bing.com&quot;, &quot;coworkers:mad_max@ya.com&quot;, &quot;friends:catwoman@yahoo.com&quot;)); data.add(new Profile(&quot;catwoman@yahoo.com&quot;, &quot;Liza&quot;, &quot;friends:anna.smith@bing.com&quot;, &quot;friends:sam@amazon.com&quot;)); return data; } } Please specify social network to target spam tool (default:Facebook): 1. Facebook 2. LinkedIn &gt; 1 Iterating over friends... Facebook: Loading 'friends' list of 'anna.smith@bing.com' over the network... Facebook: Loading profile 'mad_max@ya.com' over the network... Sent message to: 'mad_max@ya.com'. Message body: 'Hey! This is Anna's friend Josh. Can you do me a favor and like this post [link]?' Facebook: Loading profile 'catwoman@yahoo.com' over the network... Sent message to: 'catwoman@yahoo.com'. Message body: 'Hey! This is Anna's friend Josh. Can you do me a favor and like this post [link]?' Iterating over coworkers... Facebook: Loading 'coworkers' list of 'anna.smith@bing.com' over the network... Facebook: Loading profile 'sam@amazon.com' over the network... Sent message to: 'sam@amazon.com'. Message body: 'Hey! This is Anna's boss Jason. Anna told me you would be interested in [link].' ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/javascript/","content":"JavaScript Example /** * The Caretaker doesn't depend on the Concrete Memento class. Therefore, it * doesn't have access to the originator's state, stored inside the memento. It * works with all mementos via the base Memento interface. */ class Caretaker { constructor(originator) { this.mementos = []; this.originator = originator; } backup() { console.log(&quot;\\nCaretaker: Saving Originator's state...&quot;); this.mementos.push(this.originator.save()); } undo() { if (!this.mementos.length) { return; } const memento = this.mementos.pop(); console.log(`Caretaker: Restoring state to: ${memento.getName()}`); this.originator.restore(memento); } showHistory() { console.log(&quot;Caretaker: Here's the list of mementos:&quot;); for (const memento of this.mementos) { console.log(memento.getName()); } } } module.exports = Caretaker; /** * The Memento interface provides a way to retrieve the memento's metadata, such * as creation date or name. However, it doesn't expose the Originator's state. */ class Memento { getState() {} getName() {} getDate() {} } module.exports = Memento; const Memento = require(&quot;./Memento&quot;); /** * The Concrete Memento contains the infrastructure for storing the Originator's * state. */ class ConcreteMemento extends Memento { constructor(state) { super(); this.state = state; this.date = new Date().toISOString().slice(0, 19).replace(&quot;T&quot;, &quot; &quot;); } /** * The Originator uses this method when restoring its state. */ getState() { return this.state; } /** * The rest of the methods are used by the Caretaker to display metadata. */ getName() { return `${this.date} / (${this.state.substr(0, 9)}...)`; } getDate() { return this.date; } } module.exports = ConcreteMemento; const ConcreteMemento = require(&quot;./ConcreteMemento&quot;); /** * The Originator holds some important state that may change over time. It also * defines a method for saving the state inside a memento and another method for * restoring the state from it. */ class Originator { constructor(state) { /** * For the sake of simplicity, the originator's state is stored inside a * single variable. */ this.state = state; console.log(`Originator: My initial state is: ${state}`); } /** * The Originator's business logic may affect its internal state. Therefore, * the client should backup the state before launching methods of the * business logic via the save() method. */ doSomething() { console.log(&quot;Originator: I'm doing something important.&quot;); this.state = this.generateRandomString(30); console.log(`Originator: and my state has changed to: ${this.state}`); } generateRandomString(length = 10) { const charSet = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;; return Array.apply(null, {length}) .map(() =&gt; charSet.charAt(Math.floor(Math.random() * charSet.length))) .join(&quot;&quot;); } /** * Saves the current state inside a memento. */ save() { return new ConcreteMemento(this.state); } /** * Restores the Originator's state from a memento object. */ restore(memento) { this.state = memento.getState(); console.log(`Originator: My state has changed to: ${this.state}`); } } module.exports = Originator; const Caretaker = require(&quot;./Caretaker&quot;); const Originator = require(&quot;./Originator&quot;); /** * Memento Design Pattern * * Intent: Lets you save and restore the previous state of an object without * revealing the details of its implementation. * */ const originator = new Originator(&quot;Super-duper-super-puper-super.&quot;); const caretaker = new Caretaker(originator); caretaker.backup(); originator.doSomething(); caretaker.backup(); originator.doSomething(); caretaker.backup(); originator.doSomething(); console.log(&quot;&quot;); caretaker.showHistory(); console.log(&quot;\\nClient: Now, let's rollback!\\n&quot;); caretaker.undo(); console.log(&quot;\\nClient: Once more!\\n&quot;); caretaker.undo(); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/python/","content":"Python Example &quot;&quot;&quot; Memento Design Pattern Intent: Lets you save and restore the previous state of an object without revealing the details of its implementation. &quot;&quot;&quot; from __future__ import annotations from abc import ABC, abstractmethod from datetime import datetime from random import sample from string import ascii_letters, digits class Originator(): &quot;&quot;&quot; The Originator holds some important state that may change over time. It also defines a method for saving the state inside a memento and another method for restoring the state from it. &quot;&quot;&quot; _state = None &quot;&quot;&quot; For the sake of simplicity, the originator's state is stored inside a single variable. &quot;&quot;&quot; def __init__(self, state: str) -&gt; None: self._state = state print(f&quot;Originator: My initial state is: {self._state}&quot;) def do_something(self) -&gt; None: &quot;&quot;&quot; The Originator's business logic may affect its internal state. Therefore, the client should backup the state before launching methods of the business logic via the save() method. &quot;&quot;&quot; print(&quot;Originator: I'm doing something important.&quot;) self._state = self._generate_random_string(30) print(f&quot;Originator: and my state has changed to: {self._state}&quot;) def _generate_random_string(self, length: int = 10) -&gt; None: return &quot;&quot;.join(sample(ascii_letters, length)) def save(self) -&gt; Memento: &quot;&quot;&quot; Saves the current state inside a memento. &quot;&quot;&quot; return ConcreteMemento(self._state) def restore(self, memento: Memento) -&gt; None: &quot;&quot;&quot; Restores the Originator's state from a memento object. &quot;&quot;&quot; self._state = memento.get_state() print(f&quot;Originator: My state has changed to: {self._state}&quot;) class Memento(ABC): &quot;&quot;&quot; The Memento interface provides a way to retrieve the memento's metadata, such as creation date or name. However, it doesn't expose the Originator's state. &quot;&quot;&quot; @abstractmethod def get_name(self) -&gt; str: pass @abstractmethod def get_date(self) -&gt; str: pass class ConcreteMemento(Memento): def __init__(self, state: str) -&gt; None: self._state = state self._date = str(datetime.now())[:19] def get_state(self) -&gt; str: &quot;&quot;&quot; The Originator uses this method when restoring its state. &quot;&quot;&quot; return self._state def get_name(self) -&gt; str: &quot;&quot;&quot; The rest of the methods are used by the Caretaker to display metadata. &quot;&quot;&quot; return f&quot;{self._date} / ({self._state[0:9]}...)&quot; def get_date(self) -&gt; str: return self._date class Caretaker(): &quot;&quot;&quot; The Caretaker doesn't depend on the Concrete Memento class. Therefore, it doesn't have access to the originator's state, stored inside the memento. It works with all mementos via the base Memento interface. &quot;&quot;&quot; def __init__(self, originator: Originator) -&gt; None: self._mementos = [] self._originator = originator def backup(self) -&gt; None: print(&quot;\\nCaretaker: Saving Originator's state...&quot;) self._mementos.append(self._originator.save()) def undo(self) -&gt; None: if not len(self._mementos): return memento = self._mementos.pop() print(f&quot;Caretaker: Restoring state to: {memento.get_name()}&quot;) try: self._originator.restore(memento) except Exception: self.undo() def show_history(self) -&gt; None: print(&quot;Caretaker: Here's the list of mementos:&quot;) for memento in self._mementos: print(memento.get_name()) if __name__ == &quot;__main__&quot;: originator = Originator(&quot;Super-duper-super-puper-super.&quot;) caretaker = Caretaker(originator) caretaker.backup() originator.do_something() caretaker.backup() originator.do_something() caretaker.backup() originator.do_something() print() caretaker.show_history() print(&quot;\\nClient: Now, let's rollback!\\n&quot;) caretaker.undo() print(&quot;\\nClient: Once more!\\n&quot;) caretaker.undo() Originator: My initial state is: Super-duper-super-puper-super. Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: wQAehHYOqVSlpEXjyIcgobrxsZUnat Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: lHxNORKcsgMWYnJqoXjVCbQLEIeiSp Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: cvIYsRilNOtwynaKdEZpDCQkFAXVMf Caretaker: Here's the list of mementos: 2019-01-26 21:11:24 / (Super-dup...) 2019-01-26 21:11:24 / (wQAehHYOq...) 2019-01-26 21:11:24 / (lHxNORKcs...) Client: Now, let's rollback! Caretaker: Restoring state to: 2019-01-26 21:11:24 / (lHxNORKcs...) Originator: My state has changed to: lHxNORKcsgMWYnJqoXjVCbQLEIeiSp Client: Once more! Caretaker: Restoring state to: 2019-01-26 21:11:24 / (wQAehHYOq...) Originator: My state has changed to: wQAehHYOqVSlpEXjyIcgobrxsZUnat ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/swift/example2","content":"Example 2 import XCTest class MediatorRealWorld: XCTestCase { func test() { let newsArray = [News(id: 1, title: &quot;News1&quot;, likesCount: 1), News(id: 2, title: &quot;News2&quot;, likesCount: 2)] let numberOfGivenLikes = newsArray.reduce(0, { $0 + $1.likesCount }) let mediator = ScreenMediator() let feedVC = NewsFeedViewController(mediator, newsArray) let newsDetailVC = NewsDetailViewController(mediator, newsArray.first!) let profileVC = ProfileViewController(mediator, numberOfGivenLikes) mediator.update([feedVC, newsDetailVC, profileVC]) feedVC.userLikedAllNews() feedVC.userDislikedAllNews() } } class NewsFeedViewController: ScreenUpdatable { private var newsArray: [News] private weak var mediator: ScreenUpdatable? init(_ mediator: ScreenUpdatable?, _ newsArray: [News]) { self.newsArray = newsArray self.mediator = mediator } func likeAdded(to news: News) { print(&quot;News Feed: Received a liked news model with id \\(news.id)&quot;) for var item in newsArray { if item == news { item.likesCount += 1 } } } func likeRemoved(from news: News) { print(&quot;News Feed: Received a disliked news model with id \\(news.id)&quot;) for var item in newsArray { if item == news { item.likesCount -= 1 } } } func userLikedAllNews() { print(&quot;\\n\\nNews Feed: User LIKED all news models&quot;) print(&quot;News Feed: I am telling to mediator about it...\\n&quot;) newsArray.forEach({ mediator?.likeAdded(to: $0) }) } func userDislikedAllNews() { print(&quot;\\n\\nNews Feed: User DISLIKED all news models&quot;) print(&quot;News Feed: I am telling to mediator about it...\\n&quot;) newsArray.forEach({ mediator?.likeRemoved(from: $0) }) } } class NewsDetailViewController: ScreenUpdatable { private var news: News private weak var mediator: ScreenUpdatable? init(_ mediator: ScreenUpdatable?, _ news: News) { self.news = news self.mediator = mediator } func likeAdded(to news: News) { print(&quot;News Detail: Received a liked news model with id \\(news.id)&quot;) if self.news == news { self.news.likesCount += 1 } } func likeRemoved(from news: News) { print(&quot;News Detail: Received a disliked news model with id \\(news.id)&quot;) if self.news == news { self.news.likesCount -= 1 } } } class ProfileViewController: ScreenUpdatable { private var numberOfGivenLikes: Int private weak var mediator: ScreenUpdatable? init(_ mediator: ScreenUpdatable?, _ numberOfGivenLikes: Int) { self.numberOfGivenLikes = numberOfGivenLikes self.mediator = mediator } func likeAdded(to news: News) { print(&quot;Profile: Received a liked news model with id \\(news.id)&quot;) numberOfGivenLikes += 1 } func likeRemoved(from news: News) { print(&quot;Profile: Received a disliked news model with id \\(news.id)&quot;) numberOfGivenLikes -= 1 } } protocol ScreenUpdatable: class { func likeAdded(to news: News) func likeRemoved(from news: News) } class ScreenMediator: ScreenUpdatable { private var screens: [ScreenUpdatable]? func update(_ screens: [ScreenUpdatable]) { self.screens = screens } func likeAdded(to news: News) { print(&quot;Screen Mediator: Received a liked news model with id \\(news.id)&quot;) screens?.forEach({ $0.likeAdded(to: news) }) } func likeRemoved(from news: News) { print(&quot;ScreenMediator: Received a disliked news model with id \\(news.id)&quot;) screens?.forEach({ $0.likeRemoved(from: news) }) } } struct News: Equatable { let id: Int let title: String var likesCount: Int /// Other properties static func == (left: News, right: News) -&gt; Bool { return left.id == right.id } } News Feed: User LIKED all news models News Feed: I am telling to mediator about it... Screen Mediator: Received a liked news model with id 1 News Feed: Received a liked news model with id 1 News Detail: Received a liked news model with id 1 Profile: Received a liked news model with id 1 Screen Mediator: Received a liked news model with id 2 News Feed: Received a liked news model with id 2 News Detail: Received a liked news model with id 2 Profile: Received a liked news model with id 2 News Feed: User DISLIKED all news models News Feed: I am telling to mediator about it... ScreenMediator: Received a disliked news model with id 1 News Feed: Received a disliked news model with id 1 News Detail: Received a disliked news model with id 1 Profile: Received a disliked news model with id 1 ScreenMediator: Received a disliked news model with id 2 News Feed: Received a disliked news model with id 2 News Detail: Received a disliked news model with id 2 Profile: Received a disliked news model with id 2 ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/","content":"Swift Example /// Memento Design Pattern /// /// Intent: Lets you save and restore the previous state of an object without /// revealing the details of its implementation. import XCTest /// The Originator holds some important state that may change over time. It also /// defines a method for saving the state inside a memento and another method /// for restoring the state from it. class Originator { /// For the sake of simplicity, the originator's state is stored inside a /// single variable. private var state: String init(state: String) { self.state = state print(&quot;Originator: My initial state is: \\(state)&quot;) } /// The Originator's business logic may affect its internal state. /// Therefore, the client should backup the state before launching methods /// of the business logic via the save() method. func doSomething() { print(&quot;Originator: I'm doing something important.&quot;) state = generateRandomString() print(&quot;Originator: and my state has changed to: \\(state)&quot;) } private func generateRandomString() -&gt; String { return String(UUID().uuidString.suffix(4)) } /// Saves the current state inside a memento. func save() -&gt; Memento { return ConcreteMemento(state: state) } /// Restores the Originator's state from a memento object. func restore(memento: Memento) { guard let memento = memento as? ConcreteMemento else { return } self.state = memento.state print(&quot;Originator: My state has changed to: \\(state)&quot;) } } /// The Memento interface provides a way to retrieve the memento's metadata, /// such as creation date or name. However, it doesn't expose the Originator's /// state. protocol Memento { var name: String { get } var date: Date { get } } /// The Concrete Memento contains the infrastructure for storing the /// Originator's state. class ConcreteMemento: Memento { /// The Originator uses this method when restoring its state. private(set) var state: String private(set) var date: Date init(state: String) { self.state = state self.date = Date() } /// The rest of the methods are used by the Caretaker to display metadata. var name: String { return state + &quot; &quot; + date.description.suffix(14).prefix(8) } } /// The Caretaker doesn't depend on the Concrete Memento class. Therefore, it /// doesn't have access to the originator's state, stored inside the memento. It /// works with all mementos via the base Memento interface. class Caretaker { private lazy var mementos = [Memento]() private var originator: Originator init(originator: Originator) { self.originator = originator } func backup() { print(&quot;\\nCaretaker: Saving Originator's state...\\n&quot;) mementos.append(originator.save()) } func undo() { guard !mementos.isEmpty else { return } let removedMemento = mementos.removeLast() print(&quot;Caretaker: Restoring state to: &quot; + removedMemento.name) originator.restore(memento: removedMemento) } func showHistory() { print(&quot;Caretaker: Here's the list of mementos:\\n&quot;) mementos.forEach({ print($0.name) }) } } /// Let's see how it all works together. class MementoConceptual: XCTestCase { func testMementoConceptual() { let originator = Originator(state: &quot;Super-duper-super-puper-super.&quot;) let caretaker = Caretaker(originator: originator) caretaker.backup() originator.doSomething() caretaker.backup() originator.doSomething() caretaker.backup() originator.doSomething() print(&quot;\\n&quot;) caretaker.showHistory() print(&quot;\\nClient: Now, let's rollback!\\n\\n&quot;) caretaker.undo() print(&quot;\\nClient: Once more!\\n\\n&quot;) caretaker.undo() } } Originator: My initial state is: Super-duper-super-puper-super. Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: 1923 Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: 74FB Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: 3681 Caretaker: Here's the list of mementos: Super-duper-super-puper-super. 11:45:44 1923 11:45:44 74FB 11:45:44 Client: Now, let's rollback! Caretaker: Restoring state to: 74FB 11:45:44 Originator: My state has changed to: 74FB Client: Once more! Caretaker: Restoring state to: 1923 11:45:44 Originator: My state has changed to: 1923 ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/example2","content":"Example 2 import XCTest class MementoRealWorld: XCTestCase { /// State and Command are often used together when the previous state of the /// object should be restored in case of failure of some operation. /// /// Note: UndoManager can be used as an alternative. func test() { let textView = UITextView() let undoStack = UndoStack(textView) textView.text = &quot;First Change&quot; undoStack.save() textView.text = &quot;Second Change&quot; undoStack.save() textView.text = (textView.text ?? &quot;&quot;) + &quot; &amp; Third Change&quot; textView.textColor = .red undoStack.save() print(undoStack) print(&quot;Client: Perform Undo operation 2 times\\n&quot;) undoStack.undo() undoStack.undo() print(undoStack) } } class UndoStack: CustomStringConvertible { private lazy var mementos = [Memento]() private let textView: UITextView init(_ textView: UITextView) { self.textView = textView } func save() { mementos.append(textView.memento) } func undo() { guard !mementos.isEmpty else { return } textView.restore(with: mementos.removeLast()) } var description: String { return mementos.reduce(&quot;&quot;, { $0 + $1.description }) } } protocol Memento: CustomStringConvertible { var text: String { get } var date: Date { get } } extension UITextView { var memento: Memento { return TextViewMemento(text: text, textColor: textColor, selectedRange: selectedRange) } func restore(with memento: Memento) { guard let textViewMemento = memento as? TextViewMemento else { return } text = textViewMemento.text textColor = textViewMemento.textColor selectedRange = textViewMemento.selectedRange } struct TextViewMemento: Memento { let text: String let date = Date() let textColor: UIColor? let selectedRange: NSRange var description: String { let time = Calendar.current.dateComponents([.hour, .minute, .second, .nanosecond], from: date) let color = String(describing: textColor) return &quot;Text: \\(text)\\n&quot; + &quot;Date: \\(time.description)\\n&quot; + &quot;Color: \\(color)\\n&quot; + &quot;Range: \\(selectedRange)\\n\\n&quot; } } } Text: First Change Date: hour: 12 minute: 21 second: 50 nanosecond: 821737051 isLeapMonth: false Color: nil Range: {12, 0} Text: Second Change Date: hour: 12 minute: 21 second: 50 nanosecond: 826483011 isLeapMonth: false Color: nil Range: {13, 0} Text: Second Change &amp; Third Change Date: hour: 12 minute: 21 second: 50 nanosecond: 829187035 isLeapMonth: false Color: Optional(UIExtendedSRGBColorSpace 1 0 0 1) Range: {28, 0} Client: Perform Undo operation 2 times Text: First Change Date: hour: 12 minute: 21 second: 50 nanosecond: 821737051 isLeapMonth: false Color: nil Range: {12, 0} ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/typescript/","content":"TypeScript Example /** * Memento Design Pattern * * Intent: Lets you save and restore the previous state of an object without * revealing the details of its implementation. */ /** * The Originator holds some important state that may change over time. It also * defines a method for saving the state inside a memento and another method for * restoring the state from it. */ class Originator { /** * For the sake of simplicity, the originator's state is stored inside a * single variable. */ private state: string; constructor(state: string) { this.state = state; console.log(`Originator: My initial state is: ${state}`); } /** * The Originator's business logic may affect its internal state. Therefore, * the client should backup the state before launching methods of the * business logic via the save() method. */ public doSomething(): void { console.log(&quot;Originator: I'm doing something important.&quot;); this.state = this.generateRandomString(30); console.log(`Originator: and my state has changed to: ${this.state}`); } private generateRandomString(length: number = 10): string { const charSet = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;; return Array.apply(null, {length}) .map(() =&gt; charSet.charAt(Math.floor(Math.random() * charSet.length))) .join(&quot;&quot;); } /** * Saves the current state inside a memento. */ public save(): Memento { return new ConcreteMemento(this.state); } /** * Restores the Originator's state from a memento object. */ public restore(memento: Memento): void { this.state = memento.getState(); console.log(`Originator: My state has changed to: ${this.state}`); } } /** * The Memento interface provides a way to retrieve the memento's metadata, such * as creation date or name. However, it doesn't expose the Originator's state. */ interface Memento { getState(): string; getName(): string; getDate(): string; } /** * The Concrete Memento contains the infrastructure for storing the Originator's * state. */ class ConcreteMemento implements Memento { private state: string; private date: string; constructor(state: string) { this.state = state; this.date = new Date().toISOString().slice(0, 19).replace(&quot;T&quot;, &quot; &quot;); } /** * The Originator uses this method when restoring its state. */ public getState(): string { return this.state; } /** * The rest of the methods are used by the Caretaker to display metadata. */ public getName(): string { return `${this.date} / (${this.state.substr(0, 9)}...)`; } public getDate(): string { return this.date; } } /** * The Caretaker doesn't depend on the Concrete Memento class. Therefore, it * doesn't have access to the originator's state, stored inside the memento. It * works with all mementos via the base Memento interface. */ class Caretaker { private mementos: Memento[] = []; private originator: Originator; constructor(originator: Originator) { this.originator = originator; } public backup(): void { console.log(&quot;\\nCaretaker: Saving Originator's state...&quot;); this.mementos.push(this.originator.save()); } public undo(): void { if (!this.mementos.length) { return; } const memento = this.mementos.pop(); console.log(`Caretaker: Restoring state to: ${memento.getName()}`); this.originator.restore(memento); } public showHistory(): void { console.log(&quot;Caretaker: Here's the list of mementos:&quot;); for (const memento of this.mementos) { console.log(memento.getName()); } } } /** * Client code. */ const originator = new Originator(&quot;Super-duper-super-puper-super.&quot;); const caretaker = new Caretaker(originator); caretaker.backup(); originator.doSomething(); caretaker.backup(); originator.doSomething(); caretaker.backup(); originator.doSomething(); console.log(&quot;&quot;); caretaker.showHistory(); console.log(&quot;\\nClient: Now, let's rollback!\\n&quot;); caretaker.undo(); console.log(&quot;\\nClient: Once more!\\n&quot;); caretaker.undo(); Originator: My initial state is: Super-duper-super-puper-super. Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: qXqxgTcLSCeLYdcgElOghOFhPGfMxo Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: iaVCJVryJwWwbipieensfodeMSWvUY Caretaker: Saving Originator's state... Originator: I'm doing something important. Originator: and my state has changed to: oSUxsOCiZEnohBMQEjwnPWJLGnwGmy Caretaker: Here's the list of mementos: 2019-02-17 15:14:05 / (Super-dup...) 2019-02-17 15:14:05 / (qXqxgTcLS...) 2019-02-17 15:14:05 / (iaVCJVryJ...) Client: Now, let's rollback! Caretaker: Restoring state to: 2019-02-17 15:14:05 / (iaVCJVryJ...) Originator: My state has changed to: iaVCJVryJwWwbipieensfodeMSWvUY Client: Once more! Caretaker: Restoring state to: 2019-02-17 15:14:05 / (qXqxgTcLS...) Originator: My state has changed to: qXqxgTcLSCeLYdcgElOghOFhPGfMxo ","keywords":""},{"title":"Observer","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/","content":"","keywords":""},{"title":"Problem​","type":1,"pageTitle":"Observer","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/#problem","content":"if there are 2 types of objects: Customer and Store the customer is interested in a particular brand of product (e.g. a new iphone model), which would become available soon the customer could visit the store every day and check the product availability but while the product is still en route, most of these trips would be pointless the store could send emails (might be considered spam) to all customers each time a new product becomes available this would save some customers from endless trips to the storeat the same time, it's upset other customers who aren't interested in new products this arises in a conflict either the customer wastes time checking the product availabilityor the store wastes resources notifying the wrong customers "},{"title":"Solution​","type":1,"pageTitle":"Observer","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/#solution","content":"the object that has a state is called subject since it's also going to notify other objects about the state change, it can be called publisherall other objects that went to track changes to the publisher's state are called subscribers the observer pattern suggests that adding a subscription mechanism to the publisher class allowing individual objects to subscribe or unsubscribe from a stream of events coming from that publisherthis mechanism consists of an array field for storing a list of references to subscriber objectsseveral public methods which allows adding subscribers to and removing them from that list whenever an important event happens to the publisher it goes over to its subscribers and calls the specific notification method on their objects real apps might have dozens of different subscriber classes that are interested in tracking events of the same publisher class should not couple the publisher to all of those subscriber classesalso might not know about some of the subscriber classes beforehand if the publisher class is supposed to be used by other people this is important that all subscribers implement the same interface and that the publisher communicates with them only via that interface this interface should declare the notification method along with a set of parameters that the publisher can use to pass some contextual data along with the notification if the app has several different types of publishers and you want to make the subscribers compatible with all of them can make all publishers follow the same interfacethis interface would only need to describe a few subscription methodsthe interface would allow subscribers to observer publishers' status without coupling to their concrete classes "},{"title":"Analogy​","type":1,"pageTitle":"Observer","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/#analogy","content":"if you subscribe to a newspaper or magazine you no longer need to go to the store to check for the next available issueinstead the publisher sends the new issues directly to your mailbox right after publication or even in advance the publisher maintains a list of subscribers and knows which magazines they're interested in subscribers can leave the list at any time when they wish to stop the publisher sending new magazine issues to them "},{"title":"Structure​","type":1,"pageTitle":"Observer","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/#structure","content":" The Publisher issues events of interest to other objects. These events occur when the publisher changes its state or executes some behaviors. Publishers contain a subscription infrastructure that lets new subscribers join and current subscribers leave the list. When a new event happens, the publisher goes over the subscription list and calls the notification method declared in the subscriber interface on each subscriber object. The Subscriber interface declares the notification interface. In most cases, it consists of a single update method.The method may have several parameters that let the publisher pass some event details along with the update. Concrete Subscribers perform some actions in response to notifications issued by the publisher. All of these classes must implement the same interface so the publisher isn’t coupled to concrete classes. Usually, subscribers need some contextual information to handle the update correctly. For this reason, publishers often pass some context data as arguments of the notification method.The publisher can pass itself as an argument, letting subscriber fetch any required data directly. The Client creates publisher and subscriber objects separately and then registers subscribers for publisher updates. "},{"title":"When to use​","type":1,"pageTitle":"Observer","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/#when-to-use","content":"Use the Observer pattern when changes to the state of one object may require changing other objects, and the actual set of objects is unknown beforehand or changes dynamically You can often experience this problem when working with classes of the graphical user interface e.g.: you created custom button classes, and you want to let the clients hook some custom code to your buttons so that it fires whenever a user presses a button The Observer pattern lets any object that implements the subscriber interface subscribe for event notifications in publisher objects You can add the subscription mechanism to your buttons, letting the clients hook up their custom code via custom subscriber classes Use the pattern when some objects in your app must observe others, but only for a limited time or in specific cases The subscription list is dynamic, so subscribers can join or leave the list whenever they need to "},{"title":"How to implement​","type":1,"pageTitle":"Observer","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/#how-to-implement","content":"Look over your business logic and try to break it down into two parts: the core functionality, independent from other code, will act as the publisher; the rest will turn into a set of subscriber classesDeclare the subscriber interface At a bare minimum, it should declare a single update method Declare the publisher interface and describe a pair of methods for adding a subscriber object to and removing it from the list Remember that publishers must work with subscribers only via the subscriber interface Decide where to put the actual subscription list and the implementation of subscription methods Usually, this code looks the same for all types of publishers, so the obvious place to put it is in an abstract class derived directly from the publisher interfaceConcrete publishers extend that class, inheriting the subscription behaviorHowever, if you’re applying the pattern to an existing class hierarchy, consider an approach based on composition: put the subscription logic into a separate object, and make all real publishers use it Create concrete publisher classes Each time something important happens inside a publisher, it must notify all its subscribers Implement the update notification methods in concrete subscriber classes Most subscribers would need some context data about the eventIt can be passed as an argument of the notification methodBut there’s another option. Upon receiving a notification, the subscriber can fetch any data directly from the notificationIn this case, the publisher must pass itself via the update methodThe less flexible option is to link a publisher to the subscriber permanently via the constructor The client must create all necessary subscribers and register them with proper publishers "},{"title":"Pros & Cons​","type":1,"pageTitle":"Observer","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/#pros--cons","content":""},{"title":"Pros​","type":1,"pageTitle":"Observer","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/#pros","content":"Open/Closed Principle can introduce new subscriber classes without having to change the publisher’s code (and vice versa if there’s a publisher interface) can establish relations between objects at runtime "},{"title":"Cons​","type":1,"pageTitle":"Observer","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/#cons","content":"Subscribers are notified in random order "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/cPlusPlus/","content":"C++ Example /** * Observer Design Pattern * * Intent: Lets you define a subscription mechanism to notify multiple objects * about any events that happen to the object they're observing. * * Note that there's a lot of different terms with similar meaning associated * with this pattern. Just remember that the Subject is also called the * Publisher and the Observer is often called the Subscriber and vice versa. * Also the verbs &quot;observe&quot;, &quot;listen&quot; or &quot;track&quot; usually mean the same thing. */ #include &lt;iostream&gt; #include &lt;list&gt; #include &lt;string&gt; class IObserver { public: virtual ~IObserver(){}; virtual void Update(const std::string &amp;message_from_subject) = 0; }; class ISubject { public: virtual ~ISubject(){}; virtual void Attach(IObserver *observer) = 0; virtual void Detach(IObserver *observer) = 0; virtual void Notify() = 0; }; /** * The Subject owns some important state and notifies observers when the state * changes. */ class Subject : public ISubject { public: virtual ~Subject() { std::cout &lt;&lt; &quot;Goodbye, I was the Subject.\\n&quot;; } /** * The subscription management methods. */ void Attach(IObserver *observer) override { list_observer_.push_back(observer); } void Detach(IObserver *observer) override { list_observer_.remove(observer); } void Notify() override { std::list&lt;IObserver *&gt;::iterator iterator = list_observer_.begin(); HowManyObserver(); while (iterator != list_observer_.end()) { (*iterator)-&gt;Update(message_); ++iterator; } } void CreateMessage(std::string message = &quot;Empty&quot;) { this-&gt;message_ = message; Notify(); } void HowManyObserver() { std::cout &lt;&lt; &quot;There are &quot; &lt;&lt; list_observer_.size() &lt;&lt; &quot; observers in the list.\\n&quot;; } /** * Usually, the subscription logic is only a fraction of what a Subject can * really do. Subjects commonly hold some important business logic, that * triggers a notification method whenever something important is about to * happen (or after it). */ void SomeBusinessLogic() { this-&gt;message_ = &quot;change message message&quot;; Notify(); std::cout &lt;&lt; &quot;I'm about to do some thing important\\n&quot;; } private: std::list&lt;IObserver *&gt; list_observer_; std::string message_; }; class Observer : public IObserver { public: Observer(Subject &amp;subject) : subject_(subject) { this-&gt;subject_.Attach(this); std::cout &lt;&lt; &quot;Hi, I'm the Observer \\&quot;&quot; &lt;&lt; ++Observer::static_number_ &lt;&lt; &quot;\\&quot;.\\n&quot;; this-&gt;number_ = Observer::static_number_; } virtual ~Observer() { std::cout &lt;&lt; &quot;Goodbye, I was the Observer \\&quot;&quot; &lt;&lt; this-&gt;number_ &lt;&lt; &quot;\\&quot;.\\n&quot;; } void Update(const std::string &amp;message_from_subject) override { message_from_subject_ = message_from_subject; PrintInfo(); } void RemoveMeFromTheList() { subject_.Detach(this); std::cout &lt;&lt; &quot;Observer \\&quot;&quot; &lt;&lt; number_ &lt;&lt; &quot;\\&quot; removed from the list.\\n&quot;; } void PrintInfo() { std::cout &lt;&lt; &quot;Observer \\&quot;&quot; &lt;&lt; this-&gt;number_ &lt;&lt; &quot;\\&quot;: a new message is available --&gt; &quot; &lt;&lt; this-&gt;message_from_subject_ &lt;&lt; &quot;\\n&quot;; } private: std::string message_from_subject_; Subject &amp;subject_; static int static_number_; int number_; }; int Observer::static_number_ = 0; void ClientCode() { Subject *subject = new Subject; Observer *observer1 = new Observer(*subject); Observer *observer2 = new Observer(*subject); Observer *observer3 = new Observer(*subject); Observer *observer4; Observer *observer5; subject-&gt;CreateMessage(&quot;Hello World! :D&quot;); observer3-&gt;RemoveMeFromTheList(); subject-&gt;CreateMessage(&quot;The weather is hot today! :p&quot;); observer4 = new Observer(*subject); observer2-&gt;RemoveMeFromTheList(); observer5 = new Observer(*subject); subject-&gt;CreateMessage(&quot;My new car is great! ;)&quot;); observer5-&gt;RemoveMeFromTheList(); observer4-&gt;RemoveMeFromTheList(); observer1-&gt;RemoveMeFromTheList(); delete observer5; delete observer4; delete observer3; delete observer2; delete observer1; delete subject; } int main() { ClientCode(); return 0; } Hi, I'm the Observer &quot;1&quot;. Hi, I'm the Observer &quot;2&quot;. Hi, I'm the Observer &quot;3&quot;. There are 3 observers in the list. Observer &quot;1&quot;: a new message is available --&gt; Hello World! :D Observer &quot;2&quot;: a new message is available --&gt; Hello World! :D Observer &quot;3&quot;: a new message is available --&gt; Hello World! :D Observer &quot;3&quot; removed from the list. There are 2 observers in the list. Observer &quot;1&quot;: a new message is available --&gt; The weather is hot today! :p Observer &quot;2&quot;: a new message is available --&gt; The weather is hot today! :p Hi, I'm the Observer &quot;4&quot;. Observer &quot;2&quot; removed from the list. Hi, I'm the Observer &quot;5&quot;. There are 3 observers in the list. Observer &quot;1&quot;: a new message is available --&gt; My new car is great! ;) Observer &quot;4&quot;: a new message is available --&gt; My new car is great! ;) Observer &quot;5&quot;: a new message is available --&gt; My new car is great! ;) Observer &quot;5&quot; removed from the list. Observer &quot;4&quot; removed from the list. Observer &quot;1&quot; removed from the list. Goodbye, I was the Observer &quot;5&quot;. Goodbye, I was the Observer &quot;4&quot;. Goodbye, I was the Observer &quot;3&quot;. Goodbye, I was the Observer &quot;2&quot;. Goodbye, I was the Observer &quot;1&quot;. Goodbye, I was the Subject. ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/cSharp/","content":"C# Example // Observer Design Pattern // // Intent: Lets you define a subscription mechanism to notify multiple objects // about any events that happen to the object they're observing. // // Note that there's a lot of different terms with similar meaning associated // with this pattern. Just remember that the Subject is also called the // Publisher and the Observer is often called the Subscriber and vice versa. // Also the verbs &quot;observe&quot;, &quot;listen&quot; or &quot;track&quot; usually mean the same thing. using System; using System.Collections.Generic; using System.Threading; namespace RefactoringGuru.DesignPatterns.Observer.Conceptual { public interface IObserver { // Receive update from subject void Update(ISubject subject); } public interface ISubject { // Attach an observer to the subject. void Attach(IObserver observer); // Detach an observer from the subject. void Detach(IObserver observer); // Notify all observers about an event. void Notify(); } // The Subject owns some important state and notifies observers when the // state changes. public class Subject : ISubject { // For the sake of simplicity, the Subject's state, essential to all // subscribers, is stored in this variable. public int State { get; set; } = -0; // List of subscribers. In real life, the list of subscribers can be // stored more comprehensively (categorized by event type, etc.). private List&lt;IObserver&gt; _observers = new List&lt;IObserver&gt;(); // The subscription management methods. public void Attach(IObserver observer) { Console.WriteLine(&quot;Subject: Attached an observer.&quot;); this._observers.Add(observer); } public void Detach(IObserver observer) { this._observers.Remove(observer); Console.WriteLine(&quot;Subject: Detached an observer.&quot;); } // Trigger an update in each subscriber. public void Notify() { Console.WriteLine(&quot;Subject: Notifying observers...&quot;); foreach (var observer in _observers) { observer.Update(this); } } // Usually, the subscription logic is only a fraction of what a Subject // can really do. Subjects commonly hold some important business logic, // that triggers a notification method whenever something important is // about to happen (or after it). public void SomeBusinessLogic() { Console.WriteLine(&quot;\\nSubject: I'm doing something important.&quot;); this.State = new Random().Next(0, 10); Thread.Sleep(15); Console.WriteLine(&quot;Subject: My state has just changed to: &quot; + this.State); this.Notify(); } } // Concrete Observers react to the updates issued by the Subject they had // been attached to. class ConcreteObserverA : IObserver { public void Update(ISubject subject) { if ((subject as Subject).State &lt; 3) { Console.WriteLine(&quot;ConcreteObserverA: Reacted to the event.&quot;); } } } class ConcreteObserverB : IObserver { public void Update(ISubject subject) { if ((subject as Subject).State == 0 || (subject as Subject).State &gt;= 2) { Console.WriteLine(&quot;ConcreteObserverB: Reacted to the event.&quot;); } } } class Program { static void Main(string[] args) { // The client code. var subject = new Subject(); var observerA = new ConcreteObserverA(); subject.Attach(observerA); var observerB = new ConcreteObserverB(); subject.Attach(observerB); subject.SomeBusinessLogic(); subject.SomeBusinessLogic(); subject.Detach(observerB); subject.SomeBusinessLogic(); } } } Subject: Attached an observer. Subject: Attached an observer. Subject: I'm doing something important. Subject: My state has just changed to: 2 Subject: Notifying observers... ConcreteObserverA: Reacted to the event. ConcreteObserverB: Reacted to the event. Subject: I'm doing something important. Subject: My state has just changed to: 1 Subject: Notifying observers... ConcreteObserverA: Reacted to the event. Subject: Detached an observer. Subject: I'm doing something important. Subject: My state has just changed to: 5 Subject: Notifying observers... ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/java/","content":"Java Example components components/AddButton.java package refactoring_guru.mediator.example.components; import refactoring_guru.mediator.example.mediator.Mediator; import refactoring_guru.mediator.example.mediator.Note; import javax.swing.*; import java.awt.event.ActionEvent; /** * Concrete components don't talk with each other. They have only one * communication channel–sending requests to the mediator. */ public class AddButton extends JButton implements Component { private Mediator mediator; public AddButton() { super(&quot;Add&quot;); } @Override public void setMediator(Mediator mediator) { this.mediator = mediator; } @Override protected void fireActionPerformed(ActionEvent actionEvent) { mediator.addNewNote(new Note()); } @Override public String getName() { return &quot;AddButton&quot;; } } components/Component.java package refactoring_guru.mediator.example.components; import refactoring_guru.mediator.example.mediator.Mediator; /** * Common component interface. */ public interface Component { void setMediator(Mediator mediator); String getName(); } components/DeleteButton.java package refactoring_guru.mediator.example.components; import refactoring_guru.mediator.example.mediator.Mediator; import javax.swing.*; import java.awt.event.ActionEvent; /** * Concrete components don't talk with each other. They have only one * communication channel–sending requests to the mediator. */ public class DeleteButton extends JButton implements Component { private Mediator mediator; public DeleteButton() { super(&quot;Del&quot;); } @Override public void setMediator(Mediator mediator) { this.mediator = mediator; } @Override protected void fireActionPerformed(ActionEvent actionEvent) { mediator.deleteNote(); } @Override public String getName() { return &quot;DelButton&quot;; } } components/Filter.java package refactoring_guru.mediator.example.components; import refactoring_guru.mediator.example.mediator.Mediator; import refactoring_guru.mediator.example.mediator.Note; import javax.swing.*; import java.awt.event.KeyEvent; import java.util.ArrayList; /** * Concrete components don't talk with each other. They have only one * communication channel–sending requests to the mediator. */ public class Filter extends JTextField implements Component { private Mediator mediator; private ListModel listModel; public Filter() {} @Override public void setMediator(Mediator mediator) { this.mediator = mediator; } @Override protected void processComponentKeyEvent(KeyEvent keyEvent) { String start = getText(); searchElements(start); } public void setList(ListModel listModel) { this.listModel = listModel; } private void searchElements(String s) { if (listModel == null) { return; } if (s.equals(&quot;&quot;)) { mediator.setElementsList(listModel); return; } ArrayList&lt;Note&gt; notes = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; listModel.getSize(); i++) { notes.add((Note) listModel.getElementAt(i)); } DefaultListModel&lt;Note&gt; listModel = new DefaultListModel&lt;&gt;(); for (Note note : notes) { if (note.getName().contains(s)) { listModel.addElement(note); } } mediator.setElementsList(listModel); } @Override public String getName() { return &quot;Filter&quot;; } } components/List.java import refactoring_guru.mediator.example.mediator.Mediator; import refactoring_guru.mediator.example.mediator.Note; import javax.swing.*; /** * Concrete components don't talk with each other. They have only one * communication channel–sending requests to the mediator. */ @SuppressWarnings(&quot;unchecked&quot;) public class List extends JList implements Component { private Mediator mediator; private final DefaultListModel LIST_MODEL; public List(DefaultListModel listModel) { super(listModel); this.LIST_MODEL = listModel; setModel(listModel); this.setLayoutOrientation(JList.VERTICAL); Thread thread = new Thread(new Hide(this)); thread.start(); } @Override public void setMediator(Mediator mediator) { this.mediator = mediator; } public void addElement(Note note) { LIST_MODEL.addElement(note); int index = LIST_MODEL.size() - 1; setSelectedIndex(index); ensureIndexIsVisible(index); mediator.sendToFilter(LIST_MODEL); } public void deleteElement() { int index = this.getSelectedIndex(); try { LIST_MODEL.remove(index); mediator.sendToFilter(LIST_MODEL); } catch (ArrayIndexOutOfBoundsException ignored) {} } public Note getCurrentElement() { return (Note)getSelectedValue(); } @Override public String getName() { return &quot;List&quot;; } private class Hide implements Runnable { private List list; Hide(List list) { this.list = list; } @Override public void run() { while (true) { try { Thread.sleep(300); } catch (InterruptedException ex) { ex.printStackTrace(); } if (list.isSelectionEmpty()) { mediator.hideElements(true); } else { mediator.hideElements(false); } } } } } components/SaveButton.java package refactoring_guru.mediator.example.components; import refactoring_guru.mediator.example.mediator.Mediator; import javax.swing.*; import java.awt.event.ActionEvent; /** * Concrete components don't talk with each other. They have only one * communication channel–sending requests to the mediator. */ public class SaveButton extends JButton implements Component { private Mediator mediator; public SaveButton() { super(&quot;Save&quot;); } @Override public void setMediator(Mediator mediator) { this.mediator = mediator; } @Override protected void fireActionPerformed(ActionEvent actionEvent) { mediator.saveChanges(); } @Override public String getName() { return &quot;SaveButton&quot;; } } components/TextBox.java package refactoring_guru.mediator.example.components; import refactoring_guru.mediator.example.mediator.Mediator; import javax.swing.*; import java.awt.event.KeyEvent; /** * Concrete components don't talk with each other. They have only one * communication channel–sending requests to the mediator. */ public class TextBox extends JTextArea implements Component { private Mediator mediator; @Override public void setMediator(Mediator mediator) { this.mediator = mediator; } @Override protected void processComponentKeyEvent(KeyEvent keyEvent) { mediator.markNote(); } @Override public String getName() { return &quot;TextBox&quot;; } } components/Title.java package refactoring_guru.mediator.example.components; import refactoring_guru.mediator.example.mediator.Mediator; import javax.swing.*; import java.awt.event.KeyEvent; /** * Concrete components don't talk with each other. They have only one * communication channel–sending requests to the mediator. */ public class Title extends JTextField implements Component { private Mediator mediator; @Override public void setMediator(Mediator mediator) { this.mediator = mediator; } @Override protected void processComponentKeyEvent(KeyEvent keyEvent) { mediator.markNote(); } @Override public String getName() { return &quot;Title&quot;; } } mediator mediator/Editor.java package refactoring_guru.mediator.example.mediator; import refactoring_guru.mediator.example.components.*; import refactoring_guru.mediator.example.components.Component; import refactoring_guru.mediator.example.components.List; import javax.swing.*; import javax.swing.border.LineBorder; import java.awt.*; /** * Concrete mediator. All chaotic communications between concrete components * have been extracted to the mediator. Now components only talk with the * mediator, which knows who has to handle a request. */ public class Editor implements Mediator { private Title title; private TextBox textBox; private AddButton add; private DeleteButton del; private SaveButton save; private List list; private Filter filter; private JLabel titleLabel = new JLabel(&quot;Title:&quot;); private JLabel textLabel = new JLabel(&quot;Text:&quot;); private JLabel label = new JLabel(&quot;Add or select existing note to proceed...&quot;); /** * Here the registration of components by the mediator. */ @Override public void registerComponent(Component component) { component.setMediator(this); switch (component.getName()) { case &quot;AddButton&quot;: add = (AddButton)component; break; case &quot;DelButton&quot;: del = (DeleteButton)component; break; case &quot;Filter&quot;: filter = (Filter)component; break; case &quot;List&quot;: list = (List)component; this.list.addListSelectionListener(listSelectionEvent -&gt; { Note note = (Note)list.getSelectedValue(); if (note != null) { getInfoFromList(note); } else { clear(); } }); break; case &quot;SaveButton&quot;: save = (SaveButton)component; break; case &quot;TextBox&quot;: textBox = (TextBox)component; break; case &quot;Title&quot;: title = (Title)component; break; } } /** * Various methods to handle requests from particular components. */ @Override public void addNewNote(Note note) { title.setText(&quot;&quot;); textBox.setText(&quot;&quot;); list.addElement(note); } @Override public void deleteNote() { list.deleteElement(); } @Override public void getInfoFromList(Note note) { title.setText(note.getName().replace('*', ' ')); textBox.setText(note.getText()); } @Override public void saveChanges() { try { Note note = (Note) list.getSelectedValue(); note.setName(title.getText()); note.setText(textBox.getText()); list.repaint(); } catch (NullPointerException ignored) {} } @Override public void markNote() { try { Note note = list.getCurrentElement(); String name = note.getName(); if (!name.endsWith(&quot;*&quot;)) { note.setName(note.getName() + &quot;*&quot;); } list.repaint(); } catch (NullPointerException ignored) {} } @Override public void clear() { title.setText(&quot;&quot;); textBox.setText(&quot;&quot;); } @Override public void sendToFilter(ListModel listModel) { filter.setList(listModel); } @SuppressWarnings(&quot;unchecked&quot;) @Override public void setElementsList(ListModel list) { this.list.setModel(list); this.list.repaint(); } @Override public void hideElements(boolean flag) { titleLabel.setVisible(!flag); textLabel.setVisible(!flag); title.setVisible(!flag); textBox.setVisible(!flag); save.setVisible(!flag); label.setVisible(flag); } @Override public void createGUI() { JFrame notes = new JFrame(&quot;Notes&quot;); notes.setSize(960, 600); notes.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); JPanel left = new JPanel(); left.setBorder(new LineBorder(Color.BLACK)); left.setSize(320, 600); left.setLayout(new BoxLayout(left, BoxLayout.Y_AXIS)); JPanel filterPanel = new JPanel(); filterPanel.add(new JLabel(&quot;Filter:&quot;)); filter.setColumns(20); filterPanel.add(filter); filterPanel.setPreferredSize(new Dimension(280, 40)); JPanel listPanel = new JPanel(); list.setFixedCellWidth(260); listPanel.setSize(320, 470); JScrollPane scrollPane = new JScrollPane(list); scrollPane.setPreferredSize(new Dimension(275, 410)); listPanel.add(scrollPane); JPanel buttonPanel = new JPanel(); add.setPreferredSize(new Dimension(85, 25)); buttonPanel.add(add); del.setPreferredSize(new Dimension(85, 25)); buttonPanel.add(del); buttonPanel.setLayout(new FlowLayout()); left.add(filterPanel); left.add(listPanel); left.add(buttonPanel); JPanel right = new JPanel(); right.setLayout(null); right.setSize(640, 600); right.setLocation(320, 0); right.setBorder(new LineBorder(Color.BLACK)); titleLabel.setBounds(20, 4, 50, 20); title.setBounds(60, 5, 555, 20); textLabel.setBounds(20, 4, 50, 130); textBox.setBorder(new LineBorder(Color.DARK_GRAY)); textBox.setBounds(20, 80, 595, 410); save.setBounds(270, 535, 80, 25); label.setFont(new Font(&quot;Verdana&quot;, Font.PLAIN, 22)); label.setBounds(100, 240, 500, 100); right.add(label); right.add(titleLabel); right.add(title); right.add(textLabel); right.add(textBox); right.add(save); notes.setLayout(null); notes.getContentPane().add(left); notes.getContentPane().add(right); notes.setResizable(false); notes.setLocationRelativeTo(null); notes.setVisible(true); } } mediator/Mediator.java package refactoring_guru.mediator.example.mediator; import refactoring_guru.mediator.example.components.Component; import javax.swing.*; /** * Common mediator interface. */ public interface Mediator { void addNewNote(Note note); void deleteNote(); void getInfoFromList(Note note); void saveChanges(); void markNote(); void clear(); void sendToFilter(ListModel listModel); void setElementsList(ListModel list); void registerComponent(Component component); void hideElements(boolean flag); void createGUI(); } mediator/Note.java package refactoring_guru.mediator.example.mediator; /** * Note class. */ public class Note { private String name; private String text; public Note() { name = &quot;New note&quot;; } public void setName(String name) { this.name = name; } public void setText(String text) { this.text = text; } public String getName() { return name; } public String getText() { return text; } @Override public String toString() { return name; } } Demo.java package refactoring_guru.mediator.example; import refactoring_guru.mediator.example.components.*; import refactoring_guru.mediator.example.mediator.Editor; import refactoring_guru.mediator.example.mediator.Mediator; import javax.swing.*; /** * Demo class. Everything comes together here. */ public class Demo { public static void main(String[] args) { Mediator mediator = new Editor(); mediator.registerComponent(new Title()); mediator.registerComponent(new TextBox()); mediator.registerComponent(new AddButton()); mediator.registerComponent(new DeleteButton()); mediator.registerComponent(new SaveButton()); mediator.registerComponent(new List(new DefaultListModel())); mediator.registerComponent(new Filter()); mediator.createGUI(); } } ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/go/","content":"Go Example package main import &quot;fmt&quot; type customer struct { id string } func (c *customer) update(itemName string) { fmt.Printf(&quot;Sending email to customer %s for item %s\\n&quot;, c.id, itemName) } func (c *customer) getID() string { return c.id } package main import &quot;fmt&quot; type item struct { observerList []observer name string inStock bool } func newItem(name string) *item { return &amp;item{ name: name, } } func (i *item) updateAvailability() { fmt.Printf(&quot;Item %s is now in stock\\n&quot;, i.name) i.inStock = true i.notifyAll() } func (i *item) register(o observer) { i.observerList = append(i.observerList, o) } func (i *item) deregister(o observer) { i.observerList = removeFromslice(i.observerList, o) } func (i *item) notifyAll() { for _, observer := range i.observerList { observer.update(i.name) } } func removeFromslice(observerList []observer, observerToRemove observer) []observer { observerListLength := len(observerList) for i, observer := range observerList { if observerToRemove.getID() == observer.getID() { observerList[observerListLength-1], observerList[i] = observerList[i], observerList[observerListLength-1] return observerList[:observerListLength-1] } } return observerList } package main type observer interface { update(string) getID() string } package main type subject interface { register(Observer observer) deregister(Observer observer) notifyAll() } package main func main() { shirtItem := newItem(&quot;Nike Shirt&quot;) observerFirst := &amp;customer{id: &quot;abc@gmail.com&quot;} observerSecond := &amp;customer{id: &quot;xyz@gmail.com&quot;} shirtItem.register(observerFirst) shirtItem.register(observerSecond) shirtItem.updateAvailability() } ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/java/","content":"Java Example editor editor/Editor.java package refactoring_guru.observer.example.editor; import refactoring_guru.observer.example.publisher.EventManager; import java.io.File; public class Editor { public EventManager events; private File file; public Editor() { this.events = new EventManager(&quot;open&quot;, &quot;save&quot;); } public void openFile(String filePath) { this.file = new File(filePath); events.notify(&quot;open&quot;, file); } public void saveFile() throws Exception { if (this.file != null) { events.notify(&quot;save&quot;, file); } else { throw new Exception(&quot;Please open a file first.&quot;); } } } listeners listeners/EmailNotificationListener.java package refactoring_guru.observer.example.listeners; import java.io.File; public class EmailNotificationListener implements EventListener { private String email; public EmailNotificationListener(String email) { this.email = email; } @Override public void update(String eventType, File file) { System.out.println(&quot;Email to &quot; + email + &quot;: Someone has performed &quot; + eventType + &quot; operation with the following file: &quot; + file.getName()); } } listeners/EventListener.java package refactoring_guru.observer.example.listeners; import java.io.File; public interface EventListener { void update(String eventType, File file); } listeners/LogOpenListener.java package refactoring_guru.observer.example.listeners; import java.io.File; public class LogOpenListener implements EventListener { private File log; public LogOpenListener(String fileName) { this.log = new File(fileName); } @Override public void update(String eventType, File file) { System.out.println(&quot;Save to log &quot; + log + &quot;: Someone has performed &quot; + eventType + &quot; operation with the following file: &quot; + file.getName()); } } publisher publisher/EventManager.java package refactoring_guru.observer.example.publisher; import refactoring_guru.observer.example.listeners.EventListener; import java.io.File; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; public class EventManager { Map&lt;String, List&lt;EventListener&gt;&gt; listeners = new HashMap&lt;&gt;(); public EventManager(String... operations) { for (String operation : operations) { this.listeners.put(operation, new ArrayList&lt;&gt;()); } } public void subscribe(String eventType, EventListener listener) { List&lt;EventListener&gt; users = listeners.get(eventType); users.add(listener); } public void unsubscribe(String eventType, EventListener listener) { List&lt;EventListener&gt; users = listeners.get(eventType); users.remove(listener); } public void notify(String eventType, File file) { List&lt;EventListener&gt; users = listeners.get(eventType); for (EventListener listener : users) { listener.update(eventType, file); } } } Demo.java package refactoring_guru.observer.example; import refactoring_guru.observer.example.editor.Editor; import refactoring_guru.observer.example.listeners.EmailNotificationListener; import refactoring_guru.observer.example.listeners.LogOpenListener; public class Demo { public static void main(String[] args) { Editor editor = new Editor(); editor.events.subscribe(&quot;open&quot;, new LogOpenListener(&quot;/path/to/log/file.txt&quot;)); editor.events.subscribe(&quot;save&quot;, new EmailNotificationListener(&quot;admin@example.com&quot;)); try { editor.openFile(&quot;test.txt&quot;); editor.saveFile(); } catch (Exception e) { e.printStackTrace(); } } } Save to log \\path\\to\\log\\file.txt: Someone has performed open operation with the following file: test.txt Email to admin@example.com: Someone has performed save operation with the following file: test.txt ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/javascript/","content":"JavaScript Example /** * The Observer interface declares the update method, used by subjects. */ class Observer { // Receive update from subject. update(subject) {} } module.exports = Observer; /** * The Subject interface declares a set of methods for managing subscribers. */ class Subject { // Attach an observer to the subject. attach(observer) {} // Detach an observer from the subject. detach(observer) {} // Notify all observers about an event. notify() {} } module.exports = Subject; const Subject = require(&quot;./Subject&quot;); /** * The Subject owns some important state and notifies observers when the state * changes. */ class ConcreteSubject extends Subject { constructor() { super(); /** * @type {number} For the sake of simplicity, the Subject's state, essential * to all subscribers, is stored in this variable. */ this.state = 0; /** * @type {Observer[]} List of subscribers. In real life, the list of * subscribers can be stored more comprehensively (categorized by event * type, etc.). */ this.observers = []; } /** * The subscription management methods. */ attach(observer) { const isExist = this.observers.includes(observer); if (isExist) { return console.log(&quot;Subject: Observer has been attached already.&quot;); } console.log(&quot;Subject: Attached an observer.&quot;); this.observers.push(observer); } detach(observer) { const observerIndex = this.observers.indexOf(observer); if (observerIndex === -1) { return console.log(&quot;Subject: Nonexistent observer.&quot;); } this.observers.splice(observerIndex, 1); console.log(&quot;Subject: Detached an observer.&quot;); } /** * Trigger an update in each subscriber. */ notify() { console.log(&quot;Subject: Notifying observers...&quot;); for (const observer of this.observers) { observer.update(this); } } /** * Usually, the subscription logic is only a fraction of what a Subject can * really do. Subjects commonly hold some important business logic, that * triggers a notification method whenever something important is about to * happen (or after it). */ someBusinessLogic() { console.log(&quot;\\nSubject: I'm doing something important.&quot;); this.state = Math.floor(Math.random() * (10 + 1)); console.log(`Subject: My state has just changed to: ${this.state}`); this.notify(); } } module.exports = ConcreteSubject; const Observer = require(&quot;./Observer&quot;); const ConcreteSubject = require(&quot;./ConcreteSubject&quot;); /** * Concrete Observers react to the updates issued by the Subject they had been * attached to. */ class ConcreteObserverA extends Observer { update(subject) { if (subject instanceof ConcreteSubject &amp;&amp; subject.state &lt; 3) { console.log(&quot;ConcreteObserverA: Reacted to the event.&quot;); } } } module.exports = ConcreteObserverA; const Observer = require(&quot;./Observer&quot;); const ConcreteSubject = require(&quot;./ConcreteSubject&quot;); /** * Concrete Observers react to the updates issued by the Subject they had been * attached to. */ class ConcreteObserverB extends Observer { update(subject) { if ( subject instanceof ConcreteSubject &amp;&amp; (subject.state === 0 || subject.state &gt;= 2) ) { console.log(&quot;ConcreteObserverB: Reacted to the event.&quot;); } } } module.exports = ConcreteObserverB; const ConcreteObserverA = require(&quot;./ConcreteObserverA&quot;); const ConcreteObserverB = require(&quot;./ConcreteObserverB&quot;); const ConcreteSubject = require(&quot;./ConcreteSubject&quot;); /** * Observer Design Pattern * * Intent: Lets you define a subscription mechanism to notify multiple objects * about any events that happen to the object they're observing. * * Note that there's a lot of different terms with similar meaning associated * with this pattern. Just remember that the Subject is also called the * Publisher and the Observer is often called the Subscriber and vice versa. * Also the verbs &quot;observe&quot;, &quot;listen&quot; or &quot;track&quot; usually mean the same thing. */ const subject = new ConcreteSubject(); const observer1 = new ConcreteObserverA(); subject.attach(observer1); const observer2 = new ConcreteObserverB(); subject.attach(observer2); subject.someBusinessLogic(); subject.someBusinessLogic(); subject.detach(observer2); subject.someBusinessLogic(); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/python/","content":"Python Example &quot;&quot;&quot; Observer Design Pattern Intent: Lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they're observing. Note that there's a lot of different terms with similar meaning associated with this pattern. Just remember that the Subject is also called the Publisher and the Observer is often called the Subscriber and vice versa. Also the verbs &quot;observe&quot;, &quot;listen&quot; or &quot;track&quot; usually mean the same thing. &quot;&quot;&quot; from __future__ import annotations from abc import ABC, abstractmethod from random import randrange from typing import List class Subject(ABC): &quot;&quot;&quot; The Subject interface declares a set of methods for managing subscribers. &quot;&quot;&quot; @abstractmethod def attach(self, observer: Observer) -&gt; None: &quot;&quot;&quot; Attach an observer to the subject. &quot;&quot;&quot; pass @abstractmethod def detach(self, observer: Observer) -&gt; None: &quot;&quot;&quot; Detach an observer from the subject. &quot;&quot;&quot; pass @abstractmethod def notify(self) -&gt; None: &quot;&quot;&quot; Notify all observers about an event. &quot;&quot;&quot; pass class ConcreteSubject(Subject): &quot;&quot;&quot; The Subject owns some important state and notifies observers when the state changes. &quot;&quot;&quot; _state: int = None &quot;&quot;&quot; For the sake of simplicity, the Subject's state, essential to all subscribers, is stored in this variable. &quot;&quot;&quot; _observers: List[Observer] = [] &quot;&quot;&quot; List of subscribers. In real life, the list of subscribers can be stored more comprehensively (categorized by event type, etc.). &quot;&quot;&quot; def attach(self, observer: Observer) -&gt; None: print(&quot;Subject: Attached an observer.&quot;) self._observers.append(observer) def detach(self, observer: Observer) -&gt; None: self._observers.remove(observer) &quot;&quot;&quot; The subscription management methods. &quot;&quot;&quot; def notify(self) -&gt; None: &quot;&quot;&quot; Trigger an update in each subscriber. &quot;&quot;&quot; print(&quot;Subject: Notifying observers...&quot;) for observer in self._observers: observer.update(self) def some_business_logic(self) -&gt; None: &quot;&quot;&quot; Usually, the subscription logic is only a fraction of what a Subject can really do. Subjects commonly hold some important business logic, that triggers a notification method whenever something important is about to happen (or after it). &quot;&quot;&quot; print(&quot;\\nSubject: I'm doing something important.&quot;) self._state = randrange(0, 10) print(f&quot;Subject: My state has just changed to: {self._state}&quot;) self.notify() class Observer(ABC): &quot;&quot;&quot; The Observer interface declares the update method, used by subjects. &quot;&quot;&quot; @abstractmethod def update(self, subject: Subject) -&gt; None: &quot;&quot;&quot; Receive update from subject. &quot;&quot;&quot; pass &quot;&quot;&quot; Concrete Observers react to the updates issued by the Subject they had been attached to. &quot;&quot;&quot; class ConcreteObserverA(Observer): def update(self, subject: Subject) -&gt; None: if subject._state &lt; 3: print(&quot;ConcreteObserverA: Reacted to the event&quot;) class ConcreteObserverB(Observer): def update(self, subject: Subject) -&gt; None: if subject._state == 0 or subject._state &gt;= 2: print(&quot;ConcreteObserverB: Reacted to the event&quot;) if __name__ == &quot;__main__&quot;: # The client code. subject = ConcreteSubject() observer_a = ConcreteObserverA() subject.attach(observer_a) observer_b = ConcreteObserverB() subject.attach(observer_b) subject.some_business_logic() subject.some_business_logic() subject.detach(observer_a) subject.some_business_logic() Subject: Attached an observer. Subject: Attached an observer. Subject: I'm doing something important. Subject: My state has just changed to: 0 Subject: Notifying observers... ConcreteObserverA: Reacted to the event ConcreteObserverB: Reacted to the event Subject: I'm doing something important. Subject: My state has just changed to: 5 Subject: Notifying observers... ConcreteObserverB: Reacted to the event Subject: I'm doing something important. Subject: My state has just changed to: 0 Subject: Notifying observers... ConcreteObserverB: Reacted to the event ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/","content":"Swift Example /// Observer Design Pattern /// /// Intent: Lets you define a subscription mechanism to notify multiple objects /// about any events that happen to the object they're observing. /// /// Note that there's a lot of different terms with similar meaning associated /// with this pattern. Just remember that the Subject is also called the /// Publisher and the Observer is often called the Subscriber and vice versa. /// Also the verbs &quot;observe&quot;, &quot;listen&quot; or &quot;track&quot; usually mean the same thing. /// /// Swift language has multiple ways of implementing the Observer pattern: /// /// - KVO. Here is an example of how to implement it in a dozen lines of code: /// https://www.objc.io/blog/2018/04/24/bindings-with-kvo-and-keypaths/ /// /// - NotificationCenter /// https://developer.apple.com/documentation/foundation/notificationcenter /// /// - RxSwift: /// https://github.com/ReactiveX/RxSwift /// /// In this example we'll implement a custom observer from scratch. import XCTest /// The Subject owns some important state and notifies observers when the state /// changes. class Subject { /// For the sake of simplicity, the Subject's state, essential to all /// subscribers, is stored in this variable. var state: Int = { return Int(arc4random_uniform(10)) }() /// @var array List of subscribers. In real life, the list of subscribers /// can be stored more comprehensively (categorized by event type, etc.). private lazy var observers = [Observer]() /// The subscription management methods. func attach(_ observer: Observer) { print(&quot;Subject: Attached an observer.\\n&quot;) observers.append(observer) } func detach(_ observer: Observer) { if let idx = observers.firstIndex(where: { $0 === observer }) { observers.remove(at: idx) print(&quot;Subject: Detached an observer.\\n&quot;) } } /// Trigger an update in each subscriber. func notify() { print(&quot;Subject: Notifying observers...\\n&quot;) observers.forEach({ $0.update(subject: self)}) } /// Usually, the subscription logic is only a fraction of what a Subject can /// really do. Subjects commonly hold some important business logic, that /// triggers a notification method whenever something important is about to /// happen (or after it). func someBusinessLogic() { print(&quot;\\nSubject: I'm doing something important.\\n&quot;) state = Int(arc4random_uniform(10)) print(&quot;Subject: My state has just changed to: \\(state)\\n&quot;) notify() } } /// The Observer protocol declares the update method, used by subjects. protocol Observer: class { func update(subject: Subject) } /// Concrete Observers react to the updates issued by the Subject they had been /// attached to. class ConcreteObserverA: Observer { func update(subject: Subject) { if subject.state &lt; 3 { print(&quot;ConcreteObserverA: Reacted to the event.\\n&quot;) } } } class ConcreteObserverB: Observer { func update(subject: Subject) { if subject.state &gt;= 3 { print(&quot;ConcreteObserverB: Reacted to the event.\\n&quot;) } } } /// Let's see how it all works together. class ObserverConceptual: XCTestCase { func testObserverConceptual() { let subject = Subject() let observer1 = ConcreteObserverA() let observer2 = ConcreteObserverB() subject.attach(observer1) subject.attach(observer2) subject.someBusinessLogic() subject.someBusinessLogic() subject.detach(observer2) subject.someBusinessLogic() } } Subject: Attached an observer. Subject: Attached an observer. Subject: I'm doing something important. Subject: My state has just changed to: 4 Subject: Notifying observers... ConcreteObserverB: Reacted to the event. Subject: I'm doing something important. Subject: My state has just changed to: 2 Subject: Notifying observers... ConcreteObserverA: Reacted to the event. Subject: Detached an observer. Subject: I'm doing something important. Subject: My state has just changed to: 8 Subject: Notifying observers... ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/example2","content":"Example 2 import XCTest class ObserverRealWorld: XCTestCase { func test() { let cartManager = CartManager() let navigationBar = UINavigationBar() let cartVC = CartViewController() cartManager.add(subscriber: navigationBar) cartManager.add(subscriber: cartVC) let apple = Food(id: 111, name: &quot;Apple&quot;, price: 10, calories: 20) cartManager.add(product: apple) let tShirt = Clothes(id: 222, name: &quot;T-shirt&quot;, price: 200, size: &quot;L&quot;) cartManager.add(product: tShirt) cartManager.remove(product: apple) } } protocol CartSubscriber: CustomStringConvertible { func accept(changed cart: [Product]) } protocol Product { var id: Int { get } var name: String { get } var price: Double { get } func isEqual(to product: Product) -&gt; Bool } extension Product { func isEqual(to product: Product) -&gt; Bool { return id == product.id } } struct Food: Product { var id: Int var name: String var price: Double /// Food-specific properties var calories: Int } struct Clothes: Product { var id: Int var name: String var price: Double /// Clothes-specific properties var size: String } class CartManager { private lazy var cart = [Product]() private lazy var subscribers = [CartSubscriber]() func add(subscriber: CartSubscriber) { print(&quot;CartManager: I'am adding a new subscriber: \\(subscriber.description)&quot;) subscribers.append(subscriber) } func add(product: Product) { print(&quot;\\nCartManager: I'am adding a new product: \\(product.name)&quot;) cart.append(product) notifySubscribers() } func remove(subscriber filter: (CartSubscriber) -&gt; (Bool)) { guard let index = subscribers.firstIndex(where: filter) else { return } subscribers.remove(at: index) } func remove(product: Product) { guard let index = cart.firstIndex(where: { $0.isEqual(to: product) }) else { return } print(&quot;\\nCartManager: Product '\\(product.name)' is removed from a cart&quot;) cart.remove(at: index) notifySubscribers() } private func notifySubscribers() { subscribers.forEach({ $0.accept(changed: cart) }) } } extension UINavigationBar: CartSubscriber { func accept(changed cart: [Product]) { print(&quot;UINavigationBar: Updating an appearance of navigation items&quot;) } open override var description: String { return &quot;UINavigationBar&quot; } } class CartViewController: UIViewController, CartSubscriber { func accept(changed cart: [Product]) { print(&quot;CartViewController: Updating an appearance of a list view with products&quot;) } open override var description: String { return &quot;CartViewController&quot; } } CartManager: I'am adding a new subscriber: UINavigationBar CartManager: I'am adding a new subscriber: CartViewController CartManager: I'am adding a new product: Apple UINavigationBar: Updating an appearance of navigation items CartViewController: Updating an appearance of a list view with products CartManager: I'am adding a new product: T-shirt UINavigationBar: Updating an appearance of navigation items CartViewController: Updating an appearance of a list view with products CartManager: Product 'Apple' is removed from a cart UINavigationBar: Updating an appearance of navigation items CartViewController: Updating an appearance of a list view with products ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/typescript/","content":"TypeScript Example /** * Observer Design Pattern * * Intent: Lets you define a subscription mechanism to notify multiple objects * about any events that happen to the object they're observing. * * Note that there's a lot of different terms with similar meaning associated * with this pattern. Just remember that the Subject is also called the * Publisher and the Observer is often called the Subscriber and vice versa. * Also the verbs &quot;observe&quot;, &quot;listen&quot; or &quot;track&quot; usually mean the same thing. */ /** * The Subject interface declares a set of methods for managing subscribers. */ interface Subject { // Attach an observer to the subject. attach(observer: Observer): void; // Detach an observer from the subject. detach(observer: Observer): void; // Notify all observers about an event. notify(): void; } /** * The Subject owns some important state and notifies observers when the state * changes. */ class ConcreteSubject implements Subject { /** * @type {number} For the sake of simplicity, the Subject's state, essential * to all subscribers, is stored in this variable. */ public state: number; /** * @type {Observer[]} List of subscribers. In real life, the list of * subscribers can be stored more comprehensively (categorized by event * type, etc.). */ private observers: Observer[] = []; /** * The subscription management methods. */ public attach(observer: Observer): void { const isExist = this.observers.includes(observer); if (isExist) { return console.log(&quot;Subject: Observer has been attached already.&quot;); } console.log(&quot;Subject: Attached an observer.&quot;); this.observers.push(observer); } public detach(observer: Observer): void { const observerIndex = this.observers.indexOf(observer); if (observerIndex === -1) { return console.log(&quot;Subject: Nonexistent observer.&quot;); } this.observers.splice(observerIndex, 1); console.log(&quot;Subject: Detached an observer.&quot;); } /** * Trigger an update in each subscriber. */ public notify(): void { console.log(&quot;Subject: Notifying observers...&quot;); for (const observer of this.observers) { observer.update(this); } } /** * Usually, the subscription logic is only a fraction of what a Subject can * really do. Subjects commonly hold some important business logic, that * triggers a notification method whenever something important is about to * happen (or after it). */ public someBusinessLogic(): void { console.log(&quot;\\nSubject: I'm doing something important.&quot;); this.state = Math.floor(Math.random() * (10 + 1)); console.log(`Subject: My state has just changed to: ${this.state}`); this.notify(); } } /** * The Observer interface declares the update method, used by subjects. */ interface Observer { // Receive update from subject. update(subject: Subject): void; } /** * Concrete Observers react to the updates issued by the Subject they had been * attached to. */ class ConcreteObserverA implements Observer { public update(subject: Subject): void { if (subject instanceof ConcreteSubject &amp;&amp; subject.state &lt; 3) { console.log(&quot;ConcreteObserverA: Reacted to the event.&quot;); } } } class ConcreteObserverB implements Observer { public update(subject: Subject): void { if ( subject instanceof ConcreteSubject &amp;&amp; (subject.state === 0 || subject.state &gt;= 2) ) { console.log(&quot;ConcreteObserverB: Reacted to the event.&quot;); } } } /** * The client code. */ const subject = new ConcreteSubject(); const observer1 = new ConcreteObserverA(); subject.attach(observer1); const observer2 = new ConcreteObserverB(); subject.attach(observer2); subject.someBusinessLogic(); subject.someBusinessLogic(); subject.detach(observer2); subject.someBusinessLogic(); Subject: Attached an observer. Subject: Attached an observer. Subject: I'm doing something important. Subject: My state has just changed to: 6 Subject: Notifying observers... ConcreteObserverB: Reacted to the event. Subject: I'm doing something important. Subject: My state has just changed to: 1 Subject: Notifying observers... ConcreteObserverA: Reacted to the event. Subject: Detached an observer. Subject: I'm doing something important. Subject: My state has just changed to: 5 Subject: Notifying observers... ","keywords":""},{"title":"State","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/","content":"","keywords":""},{"title":"Problem​","type":1,"pageTitle":"State","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/#problem","content":"state pattern is closely related to the concept of Finite-state-machine main idea is that, at any time, there's a finite number of states which a program can be in within any unique state, the program behaves differentlythe program can be switched from 1 state to another instantaneouslyhowever, depending on a current state, the program may or may not switch to a certain other statesthese switching rules, called transitions are also finite and predetermined the same approach can be applied to objects e.g.: for a Document class it can be in 1 of 3 states draft, moderation, published draft: it moves the document to moderationmoderation: it makes the document public, but only if the current user is an administratorpublished: it doesn't do anything at all state machines are usually implemented with lots of conditional operators that select appropriate behavior depending on the current state of the object usually this state is just a set of values of the object's fields the biggest weakness of a state machine based on conditionals reveals itself once we start adding more states and state-dependent behaviors to the Document class most methods will contain a lot of conditionals that pick the proper behavior of a method according to the current statethis makes it difficult to maintain because any change to the transition logic may require changing state conditionals in every methodthe problem tends to get bigger as a project evolves it is difficult to predict all possible states and transitions as the design stagethus a lean state machine built with a limited set of conditionals can grow into a bloated mess over time "},{"title":"Solution​","type":1,"pageTitle":"State","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/#solution","content":"the state pattern suggest that new classes should be created for all possible states of an object and extract all state-specific behaviors into these classes Instead of implementing all behaviors on its own, the original object, called context, stores a reference to 1 of the state objects that represents its current state, and delegates all state-related work to that objectto transition the context into another state replace the active state object with another object that represents that new state this is possible only if all state classes follow the same interface and the context itself works with these objects through that interfacestructure look similar to Strategy pattern but is different in that the particular states may be aware of each other and initiate transitions from 1 state to anotherwhereas strategies almost never know about each other "},{"title":"Analogy​","type":1,"pageTitle":"State","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/#analogy","content":"the buttons and switches in the smartphone behave differently depending on the current state of the device When the phone is unlocked, pressing buttons leads to executing various functionsWhen the phone is locked, pressing any button leads to the unlock screenWhen the phone’s charge is low, pressing any button shows the charging screen "},{"title":"Structure​","type":1,"pageTitle":"State","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/#structure","content":" Context stores a reference to one of the concrete state objects and delegates to it all state-specific work. The context communicates with the state object via the state interface.The context exposes a setter for passing it a new state object. The State interface declares the state-specific methods. These methods should make sense for all concrete states because you don’t want some of your states to have useless methods that will never be called. Concrete States provide their own implementations for the state-specific methods. To avoid duplication of similar code across multiple states, you may provide intermediate abstract classes that encapsulate some common behavior.State objects may store a back reference to the context object.Through this reference, the state can fetch any required info from the context object, as well as initiate state transitions. Both context and concrete states can set the next state of the context and perform the actual state transition by replacing the state object linked to the context. "},{"title":"When to use​","type":1,"pageTitle":"State","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/#when-to-use","content":"Use the State pattern when you have an object that behaves differently depending on its current state, the number of states is enormous, and the state-specific code changes frequently The pattern suggests that you extract all state-specific code into a set of distinct classesAs a result, you can add new states or change existing ones independently of each other, reducing the maintenance cost Use the pattern when you have a class polluted with massive conditionals that alter how the class behaves according to the current values of the class’s fields The State pattern lets you extract branches of these conditionals into methods of corresponding state classesWhile doing so, you can also clean temporary fields and helper methods involved in state-specific code out of your main class Use State when you have a lot of duplicate code across similar states and transitions of a condition-based state machine The State pattern lets you compose hierarchies of state classes and reduce duplication by extracting common code into abstract base classes "},{"title":"How to implement​","type":1,"pageTitle":"State","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/#how-to-implement","content":"Decide what class will act as the context It could be an existing class which already has the state-dependent code; or a new class, if the state-specific code is distributed across multiple classes Declare the state interface Although it may mirror all the methods declared in the context, aim only for those that may contain state-specific behavior For every actual state, create a class that derives from the state interface Then go over the methods of the context and extract all code related to that state into your newly created classWhile moving the code to the state class, you might discover that it depends on private members of the context There are several workarounds: Make these fields or methods publicTurn the behavior you’re extracting into a public method in the context and call it from the state class This way is ugly but quick, and you can always fix it later Nest the state classes into the context class, but only if your programming language supports nesting classes In the context class, add a reference field of the state interface type and a public setter that allows overriding the value of that fieldGo over the method of the context again and replace empty state conditionals with calls to corresponding methods of the state objectTo switch the state of the context, create an instance of one of the state classes and pass it to the context You can do this within the context itself, or in various states, or in the clientWherever this is done, the class becomes dependent on the concrete state class that it instantiates "},{"title":"Pros & Cons​","type":1,"pageTitle":"State","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/#pros--cons","content":""},{"title":"Pros​","type":1,"pageTitle":"State","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/#pros","content":"Single Responsibility Principle Organize the code related to particular states into separate classes Open/Closed Principle Introduce new states without changing existing state classes or the context Simplify the code of the context by eliminating bulky state machine conditionals "},{"title":"Cons​","type":1,"pageTitle":"State","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/#cons","content":"Applying the pattern can be overkill if a state machine has only a few states or rarely changes "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; #include &lt;typeinfo&gt; /** * State Design Pattern * * Intent: Lets an object alter its behavior when its internal state changes. It * appears as if the object changed its class. */ /** * The base State class declares methods that all Concrete State should * implement and also provides a backreference to the Context object, associated * with the State. This backreference can be used by States to transition the * Context to another State. */ class Context; class State { /** * @var Context */ protected: Context *context_; public: virtual ~State() { } void set_context(Context *context) { this-&gt;context_ = context; } virtual void Handle1() = 0; virtual void Handle2() = 0; }; /** * The Context defines the interface of interest to clients. It also maintains a * reference to an instance of a State subclass, which represents the current * state of the Context. */ class Context { /** * @var State A reference to the current state of the Context. */ private: State *state_; public: Context(State *state) : state_(nullptr) { this-&gt;TransitionTo(state); } ~Context() { delete state_; } /** * The Context allows changing the State object at runtime. */ void TransitionTo(State *state) { std::cout &lt;&lt; &quot;Context: Transition to &quot; &lt;&lt; typeid(*state).name() &lt;&lt; &quot;.\\n&quot;; if (this-&gt;state_ != nullptr) delete this-&gt;state_; this-&gt;state_ = state; this-&gt;state_-&gt;set_context(this); } /** * The Context delegates part of its behavior to the current State object. */ void Request1() { this-&gt;state_-&gt;Handle1(); } void Request2() { this-&gt;state_-&gt;Handle2(); } }; /** * Concrete States implement various behaviors, associated with a state of the * Context. */ class ConcreteStateA : public State { public: void Handle1() override; void Handle2() override { std::cout &lt;&lt; &quot;ConcreteStateA handles request2.\\n&quot;; } }; class ConcreteStateB : public State { public: void Handle1() override { std::cout &lt;&lt; &quot;ConcreteStateB handles request1.\\n&quot;; } void Handle2() override { std::cout &lt;&lt; &quot;ConcreteStateB handles request2.\\n&quot;; std::cout &lt;&lt; &quot;ConcreteStateB wants to change the state of the context.\\n&quot;; this-&gt;context_-&gt;TransitionTo(new ConcreteStateA); } }; void ConcreteStateA::Handle1() { { std::cout &lt;&lt; &quot;ConcreteStateA handles request1.\\n&quot;; std::cout &lt;&lt; &quot;ConcreteStateA wants to change the state of the context.\\n&quot;; this-&gt;context_-&gt;TransitionTo(new ConcreteStateB); } } /** * The client code. */ void ClientCode() { Context *context = new Context(new ConcreteStateA); context-&gt;Request1(); context-&gt;Request2(); delete context; } int main() { ClientCode(); return 0; } Context: Transition to 14ConcreteStateA. ConcreteStateA handles request1. ConcreteStateA wants to change the state of the context. Context: Transition to 14ConcreteStateB. ConcreteStateB handles request2. ConcreteStateB wants to change the state of the context. Context: Transition to 14ConcreteStateA. ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/cSharp/","content":"C# Example // State Design Pattern // // Intent: Lets an object alter its behavior when its internal state changes. It // appears as if the object changed its class. using System; namespace RefactoringGuru.DesignPatterns.State.Conceptual { // The Context defines the interface of interest to clients. It also // maintains a reference to an instance of a State subclass, which // represents the current state of the Context. class Context { // A reference to the current state of the Context. private State _state = null; public Context(State state) { this.TransitionTo(state); } // The Context allows changing the State object at runtime. public void TransitionTo(State state) { Console.WriteLine($&quot;Context: Transition to {state.GetType().Name}.&quot;); this._state = state; this._state.SetContext(this); } // The Context delegates part of its behavior to the current State // object. public void Request1() { this._state.Handle1(); } public void Request2() { this._state.Handle2(); } } // The base State class declares methods that all Concrete State should // implement and also provides a backreference to the Context object, // associated with the State. This backreference can be used by States to // transition the Context to another State. abstract class State { protected Context _context; public void SetContext(Context context) { this._context = context; } public abstract void Handle1(); public abstract void Handle2(); } // Concrete States implement various behaviors, associated with a state of // the Context. class ConcreteStateA : State { public override void Handle1() { Console.WriteLine(&quot;ConcreteStateA handles request1.&quot;); Console.WriteLine(&quot;ConcreteStateA wants to change the state of the context.&quot;); this._context.TransitionTo(new ConcreteStateB()); } public override void Handle2() { Console.WriteLine(&quot;ConcreteStateA handles request2.&quot;); } } class ConcreteStateB : State { public override void Handle1() { Console.Write(&quot;ConcreteStateB handles request1.&quot;); } public override void Handle2() { Console.WriteLine(&quot;ConcreteStateB handles request2.&quot;); Console.WriteLine(&quot;ConcreteStateB wants to change the state of the context.&quot;); this._context.TransitionTo(new ConcreteStateA()); } } class Program { static void Main(string[] args) { // The client code. var context = new Context(new ConcreteStateA()); context.Request1(); context.Request2(); } } } Context: Transition to ConcreteStateA. ConcreteStateA handles request1. ConcreteStateA wants to change the state of the context. Context: Transition to ConcreteStateB. ConcreteStateB handles request2. ConcreteStateB wants to change the state of the context. Context: Transition to ConcreteStateA. ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/go/","content":"Go Example package main import &quot;fmt&quot; type hasItemState struct { vendingMachine *vendingMachine } func (i *hasItemState) requestItem() error { if i.vendingMachine.itemCount == 0 { i.vendingMachine.setState(i.vendingMachine.noItem) return fmt.Errorf(&quot;No item present&quot;) } fmt.Printf(&quot;Item requestd\\n&quot;) i.vendingMachine.setState(i.vendingMachine.itemRequested) return nil } func (i *hasItemState) addItem(count int) error { fmt.Printf(&quot;%d items added\\n&quot;, count) i.vendingMachine.incrementItemCount(count) return nil } func (i *hasItemState) insertMoney(money int) error { return fmt.Errorf(&quot;Please select item first&quot;) } func (i *hasItemState) dispenseItem() error { return fmt.Errorf(&quot;Please select item first&quot;) } package main import &quot;fmt&quot; type hasMoneyState struct { vendingMachine *vendingMachine } func (i *hasMoneyState) requestItem() error { return fmt.Errorf(&quot;Item dispense in progress&quot;) } func (i *hasMoneyState) addItem(count int) error { return fmt.Errorf(&quot;Item dispense in progress&quot;) } func (i *hasMoneyState) insertMoney(money int) error { return fmt.Errorf(&quot;Item out of stock&quot;) } func (i *hasMoneyState) dispenseItem() error { fmt.Println(&quot;Dispensing Item&quot;) i.vendingMachine.itemCount = i.vendingMachine.itemCount - 1 if i.vendingMachine.itemCount == 0 { i.vendingMachine.setState(i.vendingMachine.noItem) } else { i.vendingMachine.setState(i.vendingMachine.hasItem) } return nil } package main import &quot;fmt&quot; type itemRequestedState struct { vendingMachine *vendingMachine } func (i *itemRequestedState) requestItem() error { return fmt.Errorf(&quot;Item already requested&quot;) } func (i *itemRequestedState) addItem(count int) error { return fmt.Errorf(&quot;Item Dispense in progress&quot;) } func (i *itemRequestedState) insertMoney(money int) error { if money &lt; i.vendingMachine.itemPrice { fmt.Errorf(&quot;Inserted money is less. Please insert %d&quot;, i.vendingMachine.itemPrice) } fmt.Println(&quot;Money entered is ok&quot;) i.vendingMachine.setState(i.vendingMachine.hasMoney) return nil } func (i *itemRequestedState) dispenseItem() error { return fmt.Errorf(&quot;Please insert money first&quot;) } package main import &quot;fmt&quot; type noItemState struct { vendingMachine *vendingMachine } func (i *noItemState) requestItem() error { return fmt.Errorf(&quot;Item out of stock&quot;) } func (i *noItemState) addItem(count int) error { i.vendingMachine.incrementItemCount(count) i.vendingMachine.setState(i.vendingMachine.hasItem) return nil } func (i *noItemState) insertMoney(money int) error { return fmt.Errorf(&quot;Item out of stock&quot;) } func (i *noItemState) dispenseItem() error { return fmt.Errorf(&quot;Item out of stock&quot;) } package main type state interface { addItem(int) error requestItem() error insertMoney(money int) error dispenseItem() error } package main import &quot;fmt&quot; type vendingMachine struct { hasItem state itemRequested state hasMoney state noItem state currentState state itemCount int itemPrice int } func newVendingMachine(itemCount, itemPrice int) *vendingMachine { v := &amp;vendingMachine{ itemCount: itemCount, itemPrice: itemPrice, } hasItemState := &amp;hasItemState{ vendingMachine: v, } itemRequestedState := &amp;itemRequestedState{ vendingMachine: v, } hasMoneyState := &amp;hasMoneyState{ vendingMachine: v, } noItemState := &amp;noItemState{ vendingMachine: v, } v.setState(hasItemState) v.hasItem = hasItemState v.itemRequested = itemRequestedState v.hasMoney = hasMoneyState v.noItem = noItemState return v } func (v *vendingMachine) requestItem() error { return v.currentState.requestItem() } func (v *vendingMachine) addItem(count int) error { return v.currentState.addItem(count) } func (v *vendingMachine) insertMoney(money int) error { return v.currentState.insertMoney(money) } func (v *vendingMachine) dispenseItem() error { return v.currentState.dispenseItem() } func (v *vendingMachine) setState(s state) { v.currentState = s } func (v *vendingMachine) incrementItemCount(count int) { fmt.Printf(&quot;Adding %d items\\n&quot;, count) v.itemCount = v.itemCount + count } package main import ( &quot;fmt&quot; &quot;log&quot; ) func main() { vendingMachine := newVendingMachine(1, 10) err := vendingMachine.requestItem() if err != nil { log.Fatalf(err.Error()) } err = vendingMachine.insertMoney(10) if err != nil { log.Fatalf(err.Error()) } err = vendingMachine.dispenseItem() if err != nil { log.Fatalf(err.Error()) } fmt.Println() err = vendingMachine.addItem(2) if err != nil { log.Fatalf(err.Error()) } fmt.Println() err = vendingMachine.requestItem() if err != nil { log.Fatalf(err.Error()) } err = vendingMachine.insertMoney(10) if err != nil { log.Fatalf(err.Error()) } err = vendingMachine.dispenseItem() if err != nil { log.Fatalf(err.Error()) } } Item requestd Money entered is ok Dispensing Item Adding 2 items Item requestd Money entered is ok Dispensing Item ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/java/","content":"Java Example states states/LockedState.java package refactoring_guru.state.example.states; import refactoring_guru.state.example.ui.Player; /** * Concrete states provide the special implementation for all interface methods. */ public class LockedState extends State { LockedState(Player player) { super(player); player.setPlaying(false); } @Override public String onLock() { if (player.isPlaying()) { player.changeState(new ReadyState(player)); return &quot;Stop playing&quot;; } else { return &quot;Locked...&quot;; } } @Override public String onPlay() { player.changeState(new ReadyState(player)); return &quot;Ready&quot;; } @Override public String onNext() { return &quot;Locked...&quot;; } @Override public String onPrevious() { return &quot;Locked...&quot;; } } states/PlayingState.java package refactoring_guru.state.example.states; import refactoring_guru.state.example.ui.Player; public class PlayingState extends State { PlayingState(Player player) { super(player); } @Override public String onLock() { player.changeState(new LockedState(player)); player.setCurrentTrackAfterStop(); return &quot;Stop playing&quot;; } @Override public String onPlay() { player.changeState(new ReadyState(player)); return &quot;Paused...&quot;; } @Override public String onNext() { return player.nextTrack(); } @Override public String onPrevious() { return player.previousTrack(); } } states/ReadyState.java package refactoring_guru.state.example.states; import refactoring_guru.state.example.ui.Player; /** * They can also trigger state transitions in the context. */ public class ReadyState extends State { public ReadyState(Player player) { super(player); } @Override public String onLock() { player.changeState(new LockedState(player)); return &quot;Locked...&quot;; } @Override public String onPlay() { String action = player.startPlayback(); player.changeState(new PlayingState(player)); return action; } @Override public String onNext() { return &quot;Locked...&quot;; } @Override public String onPrevious() { return &quot;Locked...&quot;; } } states/State.java package refactoring_guru.state.example.states; import refactoring_guru.state.example.ui.Player; /** * Common interface for all states. */ public abstract class State { Player player; /** * Context passes itself through the state constructor. This may help a * state to fetch some useful context data if needed. */ State(Player player) { this.player = player; } public abstract String onLock(); public abstract String onPlay(); public abstract String onNext(); public abstract String onPrevious(); } ui ui/Player.java package refactoring_guru.state.example.ui; import refactoring_guru.state.example.states.ReadyState; import refactoring_guru.state.example.states.State; import java.util.ArrayList; import java.util.List; public class Player { private State state; private boolean playing = false; private List&lt;String&gt; playlist = new ArrayList&lt;&gt;(); private int currentTrack = 0; public Player() { this.state = new ReadyState(this); setPlaying(true); for (int i = 1; i &lt;= 12; i++) { playlist.add(&quot;Track &quot; + i); } } public void changeState(State state) { this.state = state; } public State getState() { return state; } public void setPlaying(boolean playing) { this.playing = playing; } public boolean isPlaying() { return playing; } public String startPlayback() { return &quot;Playing &quot; + playlist.get(currentTrack); } public String nextTrack() { currentTrack++; if (currentTrack &gt; playlist.size() - 1) { currentTrack = 0; } return &quot;Playing &quot; + playlist.get(currentTrack); } public String previousTrack() { currentTrack--; if (currentTrack &lt; 0) { currentTrack = playlist.size() - 1; } return &quot;Playing &quot; + playlist.get(currentTrack); } public void setCurrentTrackAfterStop() { this.currentTrack = 0; } } ui/UI.java package refactoring_guru.state.example.ui; import javax.swing.*; import java.awt.*; public class UI { private Player player; private static JTextField textField = new JTextField(); public UI(Player player) { this.player = player; } public void init() { JFrame frame = new JFrame(&quot;Test player&quot;); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JPanel context = new JPanel(); context.setLayout(new BoxLayout(context, BoxLayout.Y_AXIS)); frame.getContentPane().add(context); JPanel buttons = new JPanel(new FlowLayout(FlowLayout.CENTER)); context.add(textField); context.add(buttons); // Context delegates handling user's input to a state object. Naturally, // the outcome will depend on what state is currently active, since all // states can handle the input differently. JButton play = new JButton(&quot;Play&quot;); play.addActionListener(e -&gt; textField.setText(player.getState().onPlay())); JButton stop = new JButton(&quot;Stop&quot;); stop.addActionListener(e -&gt; textField.setText(player.getState().onLock())); JButton next = new JButton(&quot;Next&quot;); next.addActionListener(e -&gt; textField.setText(player.getState().onNext())); JButton prev = new JButton(&quot;Prev&quot;); prev.addActionListener(e -&gt; textField.setText(player.getState().onPrevious())); frame.setVisible(true); frame.setSize(300, 100); buttons.add(play); buttons.add(stop); buttons.add(next); buttons.add(prev); } } Demo.java package refactoring_guru.state.example; import refactoring_guru.state.example.ui.Player; import refactoring_guru.state.example.ui.UI; /** * Demo class. Everything comes together here. */ public class Demo { public static void main(String[] args) { Player player = new Player(); UI ui = new UI(player); ui.init(); } } ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/javascript/","content":"JavaScript Example /** * The base State class declares methods that all Concrete State should * implement and also provides a backreference to the Context object, associated * with the State. This backreference can be used by States to transition the * Context to another State. */ class State { setContext(context) { this.context = context; } handle1() {} handle2() {} } module.exports = State; /** * The Context defines the interface of interest to clients. It also maintains a * reference to an instance of a State subclass, which represents the current * state of the Context. */ class Context { constructor(state) { /** * type {State} A reference to the current state of the Context. */ this.transitionTo(state); } /** * The Context allows changing the State object at runtime. */ transitionTo(state) { console.log(`Context: Transition to ${state.constructor.name}.`); this.state = state; this.state.setContext(this); } /** * The Context delegates part of its behavior to the current State object. */ request1() { this.state.handle1(); } request2() { this.state.handle2(); } } module.exports = Context; const State = require(&quot;./State&quot;); /** * Concrete States implement various behaviors, associated with a state of the * Context. */ class ConcreteStateA extends State { handle1() { console.log(&quot;ConcreteStateA handles request1.&quot;); console.log(&quot;ConcreteStateA wants to change the state of the context.&quot;); this.context.transitionTo(new ConcreteStateB()); } handle2() { console.log(&quot;ConcreteStateA handles request2.&quot;); } } class ConcreteStateB extends State { handle1() { console.log(&quot;ConcreteStateB handles request1.&quot;); } handle2() { console.log(&quot;ConcreteStateB handles request2.&quot;); console.log(&quot;ConcreteStateB wants to change the state of the context.&quot;); this.context.transitionTo(new ConcreteStateA()); } } module.exports = { ConcreteStateA, ConcreteStateB, }; /** * State Design Pattern * * Intent: Lets an object alter its behavior when its internal state changes. It * appears as if the object changed its class. */ const {ConcreteStateA} = require(&quot;./ConcreteState&quot;); const Context = require(&quot;./Context&quot;); const context = new Context(new ConcreteStateA()); context.request1(); context.request2(); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/python/","content":"Python Example &quot;&quot;&quot; State Design Pattern Intent: Lets an object alter its behavior when its internal state changes. It appears as if the object changed its class. &quot;&quot;&quot; from __future__ import annotations from abc import ABC, abstractmethod class Context: &quot;&quot;&quot; The Context defines the interface of interest to clients. It also maintains a reference to an instance of a State subclass, which represents the current state of the Context. &quot;&quot;&quot; _state = None &quot;&quot;&quot; A reference to the current state of the Context. &quot;&quot;&quot; def __init__(self, state: State) -&gt; None: self.transition_to(state) def transition_to(self, state: State): &quot;&quot;&quot; The Context allows changing the State object at runtime. &quot;&quot;&quot; print(f&quot;Context: Transition to {type(state).__name__}&quot;) self._state = state self._state.context = self &quot;&quot;&quot; The Context delegates part of its behavior to the current State object. &quot;&quot;&quot; def request1(self): self._state.handle1() def request2(self): self._state.handle2() class State(ABC): &quot;&quot;&quot; The base State class declares methods that all Concrete State should implement and also provides a backreference to the Context object, associated with the State. This backreference can be used by States to transition the Context to another State. &quot;&quot;&quot; @property def context(self) -&gt; Context: return self._context @context.setter def context(self, context: Context) -&gt; None: self._context = context @abstractmethod def handle1(self) -&gt; None: pass @abstractmethod def handle2(self) -&gt; None: pass &quot;&quot;&quot; Concrete States implement various behaviors, associated with a state of the Context. &quot;&quot;&quot; class ConcreteStateA(State): def handle1(self) -&gt; None: print(&quot;ConcreteStateA handles request1.&quot;) print(&quot;ConcreteStateA wants to change the state of the context.&quot;) self.context.transition_to(ConcreteStateB()) def handle2(self) -&gt; None: print(&quot;ConcreteStateA handles request2.&quot;) class ConcreteStateB(State): def handle1(self) -&gt; None: print(&quot;ConcreteStateB handles request1.&quot;) def handle2(self) -&gt; None: print(&quot;ConcreteStateB handles request2.&quot;) print(&quot;ConcreteStateB wants to change the state of the context.&quot;) self.context.transition_to(ConcreteStateA()) if __name__ == &quot;__main__&quot;: # The client code. context = Context(ConcreteStateA()) context.request1() context.request2() Context: Transition to ConcreteStateA ConcreteStateA handles request1. ConcreteStateA wants to change the state of the context. Context: Transition to ConcreteStateB ConcreteStateB handles request2. ConcreteStateB wants to change the state of the context. Context: Transition to ConcreteStateA ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/swift/","content":"Swift Example /// State Design Pattern /// /// Intent: Lets an object alter its behavior when its internal state changes. /// It appears as if the object changed its class. import XCTest /// The Context defines the interface of interest to clients. It also maintains /// a reference to an instance of a State subclass, which represents the current /// state of the Context. class Context { /// A reference to the current state of the Context. private var state: State init(_ state: State) { self.state = state transitionTo(state: state) } /// The Context allows changing the State object at runtime. func transitionTo(state: State) { print(&quot;Context: Transition to &quot; + String(describing: state)) self.state = state self.state.update(context: self) } /// The Context delegates part of its behavior to the current State object. func request1() { state.handle1() } func request2() { state.handle2() } } /// The base State class declares methods that all Concrete State should /// implement and also provides a backreference to the Context object, /// associated with the State. This backreference can be used by States to /// transition the Context to another State. protocol State: class { func update(context: Context) func handle1() func handle2() } class BaseState: State { private(set) weak var context: Context? func update(context: Context) { self.context = context } func handle1() {} func handle2() {} } /// Concrete States implement various behaviors, associated with a state of the /// Context. class ConcreteStateA: BaseState { override func handle1() { print(&quot;ConcreteStateA handles request1.&quot;) print(&quot;ConcreteStateA wants to change the state of the context.\\n&quot;) context?.transitionTo(state: ConcreteStateB()) } override func handle2() { print(&quot;ConcreteStateA handles request2.\\n&quot;) } } class ConcreteStateB: BaseState { override func handle1() { print(&quot;ConcreteStateB handles request1.\\n&quot;) } override func handle2() { print(&quot;ConcreteStateB handles request2.&quot;) print(&quot;ConcreteStateB wants to change the state of the context.\\n&quot;) context?.transitionTo(state: ConcreteStateA()) } } /// Let's see how it all works together. class StateConceptual: XCTestCase { func test() { let context = Context(ConcreteStateA()) context.request1() context.request2() } } Context: Transition to StateConceptual.ConcreteStateA ConcreteStateA handles request1. ConcreteStateA wants to change the state of the context. Context: Transition to StateConceptual.ConcreteStateB ConcreteStateB handles request2. ConcreteStateB wants to change the state of the context. Context: Transition to StateConceptual.ConcreteStateA ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/swift/example2","content":"Example 2 import XCTest class StateRealWorld: XCTestCase { func test() { print(&quot;Client: I'm starting working with a location tracker&quot;) let tracker = LocationTracker() print() tracker.startTracking() print() tracker.pauseTracking(for: 2) print() tracker.makeCheckIn() print() tracker.findMyChildren() print() tracker.stopTracking() } } class LocationTracker { /// Location tracking is enabled by default private lazy var trackingState: TrackingState = EnabledTrackingState(tracker: self) func startTracking() { trackingState.startTracking() } func stopTracking() { trackingState.stopTracking() } func pauseTracking(for time: TimeInterval) { trackingState.pauseTracking(for: time) } func makeCheckIn() { trackingState.makeCheckIn() } func findMyChildren() { trackingState.findMyChildren() } func update(state: TrackingState) { trackingState = state } } protocol TrackingState { func startTracking() func stopTracking() func pauseTracking(for time: TimeInterval) func makeCheckIn() func findMyChildren() } class EnabledTrackingState: TrackingState { private weak var tracker: LocationTracker? init(tracker: LocationTracker?) { self.tracker = tracker } func startTracking() { print(&quot;EnabledTrackingState: startTracking is invoked&quot;) print(&quot;EnabledTrackingState: tracking location....1&quot;) print(&quot;EnabledTrackingState: tracking location....2&quot;) print(&quot;EnabledTrackingState: tracking location....3&quot;) } func stopTracking() { print(&quot;EnabledTrackingState: Received 'stop tracking'&quot;) print(&quot;EnabledTrackingState: Changing state to 'disabled'...&quot;) tracker?.update(state: DisabledTrackingState(tracker: tracker)) tracker?.stopTracking() } func pauseTracking(for time: TimeInterval) { print(&quot;EnabledTrackingState: Received 'pause tracking' for \\(time) seconds&quot;) print(&quot;EnabledTrackingState: Changing state to 'disabled'...&quot;) tracker?.update(state: DisabledTrackingState(tracker: tracker)) tracker?.pauseTracking(for: time) } func makeCheckIn() { print(&quot;EnabledTrackingState: performing check-in at the current location&quot;) } func findMyChildren() { print(&quot;EnabledTrackingState: searching for children...&quot;) } } class DisabledTrackingState: TrackingState { private weak var tracker: LocationTracker? init(tracker: LocationTracker?) { self.tracker = tracker } func startTracking() { print(&quot;DisabledTrackingState: Received 'start tracking'&quot;) print(&quot;DisabledTrackingState: Changing state to 'enabled'...&quot;) tracker?.update(state: EnabledTrackingState(tracker: tracker)) } func pauseTracking(for time: TimeInterval) { print(&quot;DisabledTrackingState: Pause tracking for \\(time) seconds&quot;) for i in 0...Int(time) { print(&quot;DisabledTrackingState: pause...\\(i)&quot;) } print(&quot;DisabledTrackingState: Time is over&quot;) print(&quot;DisabledTrackingState: Returing to 'enabled state'...\\n&quot;) self.tracker?.update(state: EnabledTrackingState(tracker: self.tracker)) self.tracker?.startTracking() } func stopTracking() { print(&quot;DisabledTrackingState: Received 'stop tracking'&quot;) print(&quot;DisabledTrackingState: Do nothing...&quot;) } func makeCheckIn() { print(&quot;DisabledTrackingState: Received 'make check-in'&quot;) print(&quot;DisabledTrackingState: Changing state to 'enabled'...&quot;) tracker?.update(state: EnabledTrackingState(tracker: tracker)) tracker?.makeCheckIn() } func findMyChildren() { print(&quot;DisabledTrackingState: Received 'find my children'&quot;) print(&quot;DisabledTrackingState: Changing state to 'enabled'...&quot;) tracker?.update(state: EnabledTrackingState(tracker: tracker)) tracker?.findMyChildren() } } Client: I'm starting working with a location tracker EnabledTrackingState: startTracking is invoked EnabledTrackingState: tracking location....1 EnabledTrackingState: tracking location....2 EnabledTrackingState: tracking location....3 EnabledTrackingState: Received 'pause tracking' for 2.0 seconds EnabledTrackingState: Changing state to 'disabled'... DisabledTrackingState: Pause tracking for 2.0 seconds DisabledTrackingState: pause...0 DisabledTrackingState: pause...1 DisabledTrackingState: pause...2 DisabledTrackingState: Time is over DisabledTrackingState: Returing to 'enabled state'... EnabledTrackingState: startTracking is invoked EnabledTrackingState: tracking location....1 EnabledTrackingState: tracking location....2 EnabledTrackingState: tracking location....3 EnabledTrackingState: performing check-in at the current location EnabledTrackingState: searching for children... EnabledTrackingState: Received 'stop tracking' EnabledTrackingState: Changing state to 'disabled'... DisabledTrackingState: Received 'stop tracking' DisabledTrackingState: Do nothing... ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/State/typescript/","content":"TypeScript Example /** * State Design Pattern * * Intent: Lets an object alter its behavior when its internal state changes. It * appears as if the object changed its class. */ /** * The Context defines the interface of interest to clients. It also maintains a * reference to an instance of a State subclass, which represents the current * state of the Context. */ class Context { /** * @type {State} A reference to the current state of the Context. */ private state: State; constructor(state: State) { this.transitionTo(state); } /** * The Context allows changing the State object at runtime. */ public transitionTo(state: State): void { console.log(`Context: Transition to ${(&lt;any&gt;state).constructor.name}.`); this.state = state; this.state.setContext(this); } /** * The Context delegates part of its behavior to the current State object. */ public request1(): void { this.state.handle1(); } public request2(): void { this.state.handle2(); } } /** * The base State class declares methods that all Concrete State should * implement and also provides a backreference to the Context object, associated * with the State. This backreference can be used by States to transition the * Context to another State. */ abstract class State { protected context: Context; public setContext(context: Context) { this.context = context; } public abstract handle1(): void; public abstract handle2(): void; } /** * Concrete States implement various behaviors, associated with a state of the * Context. */ class ConcreteStateA extends State { public handle1(): void { console.log(&quot;ConcreteStateA handles request1.&quot;); console.log(&quot;ConcreteStateA wants to change the state of the context.&quot;); this.context.transitionTo(new ConcreteStateB()); } public handle2(): void { console.log(&quot;ConcreteStateA handles request2.&quot;); } } class ConcreteStateB extends State { public handle1(): void { console.log(&quot;ConcreteStateB handles request1.&quot;); } public handle2(): void { console.log(&quot;ConcreteStateB handles request2.&quot;); console.log(&quot;ConcreteStateB wants to change the state of the context.&quot;); this.context.transitionTo(new ConcreteStateA()); } } /** * The client code. */ const context = new Context(new ConcreteStateA()); context.request1(); context.request2(); Context: Transition to ConcreteStateA. ConcreteStateA handles request1. ConcreteStateA wants to change the state of the context. Context: Transition to ConcreteStateB. ConcreteStateB handles request2. ConcreteStateB wants to change the state of the context. Context: Transition to ConcreteStateA. ","keywords":""},{"title":"Strategy","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/","content":"","keywords":""},{"title":"Problem​","type":1,"pageTitle":"Strategy","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/#problem","content":"when creating a navigation app for travelers the app is centered around a map which helped users quickly orient themselves in any city1 of the most requested features for the app is automatic route planning a user should be able to enter an address and see the fastest route to that destination displayed on the map the 1st version of the app could only build the routes over roads however, not everyone likes to drive on their vacationthe next update, you added an option to build walking routesthen you add another option to let people use public transport in their routeslater you add route building for cyclistslater another option for building route for all tourist attractions from a business perspective the app is a success but the technical part caused many headaches each time you add a new routing algorithm, the main class of the navigator doubled in sizebecoming too hard to maintain any change to 1 of the algorithms, whether it is a simple bug fix, or a slight adjustment of the street score affected the whole class, increasing the chance of creating an error in already working code in addition, teamwork became inefficient teammates would complain that they spend too much time resolving merge conflictsimplementing a new features requires you to change the same huge class conflicting with the code produced by other people "},{"title":"Solution​","type":1,"pageTitle":"Strategy","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/#solution","content":"the strategy pattern suggest that you take a class that does something specific in a lot of different ways and extract all of these algorithms into separate classes called strategies the original class called context must have a field for storing a reference to 1 of the strategies the context delegates the work to a linked strategy object instead of executing it on its own the context isn't responsible for selecting an appropriate algorithm for the job instead, the client passes the desired strategy to the contextthe context doesn't know much about the strategiesit works with all strategies through the same generic interface which only exposes a single method for triggering the algorithm encapsulated within the selected strategy this way the context becomes independent of concrete strategies so you can add new algorithms or modify existing 1s without changing the code of the context or other strategies in the navigation app, each routing algorithm can be extracted to its own class with a single buildRoute method the method accepts an origin and destination and returns a collection of the route's checkpoints even though given the same arguments, each routing class might build a different route the main navigator class doesn't really care which algorithm is selected since its primary job is to render a set of checkpoints on the mapthe class has a method for switching the active routing strategy so its clients such as the buttons in the user interface can replace the currently selected routing behavior with another one "},{"title":"Analogy​","type":1,"pageTitle":"Strategy","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/#analogy","content":"imagine that you have to get to the airport you can catch a bus, order a cab, or get on the bicycle these are your transportation strategiesyou can pick one of the strategies depending on factors such as budget or time constraints "},{"title":"Structure​","type":1,"pageTitle":"Strategy","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/#structure","content":" The Context maintains a reference to one of the concrete strategies and communicates with this object only via the strategy interface. The Strategy interface is common to all concrete strategies. It declares a method the context uses to execute a strategy. Concrete Strategies implement different variations of an algorithm the context uses. The context calls the execution method on the linked strategy object each time it needs to run the algorithm. The context doesn’t know what type of strategy it works with or how the algorithm is executed. The Client creates a specific strategy object and passes it to the context. The context exposes a setter which lets clients replace the strategy associated with the context at runtime. "},{"title":"How to use​","type":1,"pageTitle":"Strategy","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/#how-to-use","content":"Use the Strategy pattern when you want to use different variants of an algorithm within an object and be able to switch from one algorithm to another during runtime The Strategy pattern lets you indirectly alter the object’s behavior at runtime by associating it with different sub-objects which can perform specific sub-tasks in different ways Use the Strategy when you have a lot of similar classes that only differ in the way they execute some behavior The Strategy pattern lets you extract the varying behavior into a separate class hierarchy and combine the original classes into one, thereby reducing duplicate code Use the pattern to isolate the business logic of a class from the implementation details of algorithms that may not be as important in the context of that logic The Strategy pattern lets you isolate the code, internal data, and dependencies of various algorithms from the rest of the codeVarious clients get a simple interface to execute the algorithms and switch them at runtime Use the pattern when your class has a massive conditional operator that switches between different variants of the same algorithm The Strategy pattern lets you do away with such a conditional by extracting all algorithms into separate classes, all of which implement the same interfaceThe original object delegates execution to one of these objects, instead of implementing all variants of the algorithm "},{"title":"How to implement​","type":1,"pageTitle":"Strategy","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/#how-to-implement","content":"In the context class, identify an algorithm that’s prone to frequent changes It may also be a massive conditional that selects and executes a variant of the same algorithm at runtime Declare the strategy interface common to all variants of the algorithmOne by one, extract all algorithms into their own classes They should all implement the strategy interface In the context class, add a field for storing a reference to a strategy object Provide a setter for replacing values of that fieldThe context should work with the strategy object only via the strategy interfaceThe context may define an interface which lets the strategy access its data Clients of the context must associate it with a suitable strategy that matches the way they expect the context to perform its primary job "},{"title":"Pros && Cons​","type":1,"pageTitle":"Strategy","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/#pros--cons","content":""},{"title":"Pros​","type":1,"pageTitle":"Strategy","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/#pros","content":"You can swap algorithms used inside an object at runtimeYou can isolate the implementation details of an algorithm from the code that uses itYou can replace inheritance with compositionOpen/Closed Principle You can introduce new strategies without having to change the context "},{"title":"Cons​","type":1,"pageTitle":"Strategy","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/#cons","content":"If you only have a couple of algorithms and they rarely change, there’s no real reason to overcomplicated the program with new classes and interfaces that come along with the patternClients must be aware of the differences between strategies to be able to select a proper oneA lot of modern programming languages have functional type support that lets you implement different versions of an algorithm inside a set of anonymous functionsThen you could use these functions exactly as you’d have used the strategy objects, but without bloating your code with extra classes and interfaces "},{"title":"Example​","type":1,"pageTitle":"Strategy","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/#example","content":"// The strategy interface declares operations common // to all supported versions of some algorithm. interface Strategy { execute(a: number, b: number): number; } // Concrete strategies implement the algorithm while following // the base strategy interface. The interface makes them // interchangable in the context. class ConcreteStrategyAdd implements Strategy { execute(a, b) { return a + b; } } class ConcreteStrategySubstract implements Strategy { execute(a, b) { return a - b; } } class ConcreteStrategyMultiply implements Strategy { execute(a, b) { return a * b; } }  // The context defines the interface of interest to clients. class Context { private strategy: Strategy; setStrategy(s: Strategy) { this.strategy = s; } // The context delegates some work to the strategy object // instead of implementing multiple versions of the // algorithm on its own. executeStrategy(a: number, b: number) { return this.strategy.execute(a, b); } } let ctx = new Context(); ctx.setStrategy(new ConcreteStrategyAdd()); ctx.executeStrategy(5, 2); // 7  "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;string&gt; #include &lt;algorithm&gt; /** * Strategy Design Pattern * * Intent: Lets you define a family of algorithms, put each of them into a * separate class, and make their objects interchangeable. */ /** * The Strategy interface declares operations common to all supported versions * of some algorithm. * * The Context uses this interface to call the algorithm defined by Concrete * Strategies. */ class Strategy { public: virtual ~Strategy() {} virtual std::string DoAlgorithm(const std::vector&lt;std::string&gt; &amp;data) const = 0; }; /** * The Context defines the interface of interest to clients. */ class Context { /** * @var Strategy The Context maintains a reference to one of the Strategy * objects. The Context does not know the concrete class of a strategy. It * should work with all strategies via the Strategy interface. */ private: Strategy *strategy_; /** * Usually, the Context accepts a strategy through the constructor, but also * provides a setter to change it at runtime. */ public: Context(Strategy *strategy = nullptr) : strategy_(strategy) { } ~Context() { delete this-&gt;strategy_; } /** * Usually, the Context allows replacing a Strategy object at runtime. */ void set_strategy(Strategy *strategy) { delete this-&gt;strategy_; this-&gt;strategy_ = strategy; } /** * The Context delegates some work to the Strategy object instead of * implementing +multiple versions of the algorithm on its own. */ void DoSomeBusinessLogic() const { // ... std::cout &lt;&lt; &quot;Context: Sorting data using the strategy (not sure how it'll do it)\\n&quot;; std::string result = this-&gt;strategy_-&gt;DoAlgorithm(std::vector&lt;std::string&gt;{&quot;a&quot;, &quot;e&quot;, &quot;c&quot;, &quot;b&quot;, &quot;d&quot;}); std::cout &lt;&lt; result &lt;&lt; &quot;\\n&quot;; // ... } }; /** * Concrete Strategies implement the algorithm while following the base Strategy * interface. The interface makes them interchangeable in the Context. */ class ConcreteStrategyA : public Strategy { public: std::string DoAlgorithm(const std::vector&lt;std::string&gt; &amp;data) const override { std::string result; std::for_each(std::begin(data), std::end(data), [&amp;result](const std::string &amp;letter) { result += letter; }); std::sort(std::begin(result), std::end(result)); return result; } }; class ConcreteStrategyB : public Strategy { std::string DoAlgorithm(const std::vector&lt;std::string&gt; &amp;data) const override { std::string result; std::for_each(std::begin(data), std::end(data), [&amp;result](const std::string &amp;letter) { result += letter; }); std::sort(std::begin(result), std::end(result)); for (int i = 0; i &lt; result.size() / 2; i++) { std::swap(result[i], result[result.size() - i - 1]); } return result; } }; /** * The client code picks a concrete strategy and passes it to the context. The * client should be aware of the differences between strategies in order to make * the right choice. */ void ClientCode() { Context *context = new Context(new ConcreteStrategyA); std::cout &lt;&lt; &quot;Client: Strategy is set to normal sorting.\\n&quot;; context-&gt;DoSomeBusinessLogic(); std::cout &lt;&lt; &quot;\\n&quot;; std::cout &lt;&lt; &quot;Client: Strategy is set to reverse sorting.\\n&quot;; context-&gt;set_strategy(new ConcreteStrategyB); context-&gt;DoSomeBusinessLogic(); delete context; } int main() { ClientCode(); return 0; } Client: Strategy is set to normal sorting. Context: Sorting data using the strategy (not sure how it'll do it) abcde Client: Strategy is set to reverse sorting. Context: Sorting data using the strategy (not sure how it'll do it) edcba ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/cSharp/","content":"C# Example // Strategy Design Pattern // // Intent: Lets you define a family of algorithms, put each of them into a // separate class, and make their objects interchangeable. using System; using System.Collections.Generic; namespace RefactoringGuru.DesignPatterns.Strategy.Conceptual { // The Context defines the interface of interest to clients. class Context { // The Context maintains a reference to one of the Strategy objects. The // Context does not know the concrete class of a strategy. It should // work with all strategies via the Strategy interface. private IStrategy _strategy; public Context() { } // Usually, the Context accepts a strategy through the constructor, but // also provides a setter to change it at runtime. public Context(IStrategy strategy) { this._strategy = strategy; } // Usually, the Context allows replacing a Strategy object at runtime. public void SetStrategy(IStrategy strategy) { this._strategy = strategy; } // The Context delegates some work to the Strategy object instead of // implementing multiple versions of the algorithm on its own. public void DoSomeBusinessLogic() { Console.WriteLine(&quot;Context: Sorting data using the strategy (not sure how it'll do it)&quot;); var result = this._strategy.DoAlgorithm(new List&lt;string&gt; { &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; }); string resultStr = string.Empty; foreach (var element in result as List&lt;string&gt;) { resultStr += element + &quot;,&quot;; } Console.WriteLine(resultStr); } } // The Strategy interface declares operations common to all supported // versions of some algorithm. // // The Context uses this interface to call the algorithm defined by Concrete // Strategies. public interface IStrategy { object DoAlgorithm(object data); } // Concrete Strategies implement the algorithm while following the base // Strategy interface. The interface makes them interchangeable in the // Context. class ConcreteStrategyA : IStrategy { public object DoAlgorithm(object data) { var list = data as List&lt;string&gt;; list.Sort(); return list; } } class ConcreteStrategyB : IStrategy { public object DoAlgorithm(object data) { var list = data as List&lt;string&gt;; list.Sort(); list.Reverse(); return list; } } class Program { static void Main(string[] args) { // The client code picks a concrete strategy and passes it to the // context. The client should be aware of the differences between // strategies in order to make the right choice. var context = new Context(); Console.WriteLine(&quot;Client: Strategy is set to normal sorting.&quot;); context.SetStrategy(new ConcreteStrategyA()); context.DoSomeBusinessLogic(); Console.WriteLine(); Console.WriteLine(&quot;Client: Strategy is set to reverse sorting.&quot;); context.SetStrategy(new ConcreteStrategyB()); context.DoSomeBusinessLogic(); } } } Client: Strategy is set to normal sorting. Context: Sorting data using the strategy (not sure how it'll do it) a,b,c,d,e Client: Strategy is set to reverse sorting. Context: Sorting data using the strategy (not sure how it'll do it) e,d,c,b,a ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/java/","content":"Java Example commands commands/ColorCommand.java package refactoring_guru.memento.example.commands; import refactoring_guru.memento.example.editor.Editor; import refactoring_guru.memento.example.shapes.Shape; import java.awt.*; public class ColorCommand implements Command { private Editor editor; private Color color; public ColorCommand(Editor editor, Color color) { this.editor = editor; this.color = color; } @Override public String getName() { return &quot;Colorize: &quot; + color.toString(); } @Override public void execute() { for (Shape child : editor.getShapes().getSelected()) { child.setColor(color); } } } commands/Command.java package refactoring_guru.memento.example.commands; public interface Command { String getName(); void execute(); } commands/MoveCommand.java package refactoring_guru.memento.example.commands; import refactoring_guru.memento.example.editor.Editor; import refactoring_guru.memento.example.shapes.Shape; public class MoveCommand implements Command { private Editor editor; private int startX, startY; private int endX, endY; public MoveCommand(Editor editor) { this.editor = editor; } @Override public String getName() { return &quot;Move by X:&quot; + (endX - startX) + &quot; Y:&quot; + (endY - startY); } public void start(int x, int y) { startX = x; startY = y; for (Shape child : editor.getShapes().getSelected()) { child.drag(); } } public void move(int x, int y) { for (Shape child : editor.getShapes().getSelected()) { child.moveTo(x - startX, y - startY); } } public void stop(int x, int y) { endX = x; endY = y; for (Shape child : editor.getShapes().getSelected()) { child.drop(); } } @Override public void execute() { for (Shape child : editor.getShapes().getSelected()) { child.moveBy(endX - startX, endY - startY); } } } editor editor/Canvas.java package refactoring_guru.memento.example.editor; import refactoring_guru.memento.example.commands.ColorCommand; import refactoring_guru.memento.example.commands.MoveCommand; import refactoring_guru.memento.example.shapes.Shape; import javax.swing.*; import javax.swing.border.Border; import java.awt.*; import java.awt.event.*; import java.awt.image.BufferedImage; class Canvas extends java.awt.Canvas { private Editor editor; private JFrame frame; private static final int PADDING = 10; Canvas(Editor editor) { this.editor = editor; createFrame(); attachKeyboardListeners(); attachMouseListeners(); refresh(); } private void createFrame() { frame = new JFrame(); frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); frame.setLocationRelativeTo(null); JPanel contentPanel = new JPanel(); Border padding = BorderFactory.createEmptyBorder(PADDING, PADDING, PADDING, PADDING); contentPanel.setBorder(padding); contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS)); frame.setContentPane(contentPanel); contentPanel.add(new JLabel(&quot;Select and drag to move.&quot;), BorderLayout.PAGE_END); contentPanel.add(new JLabel(&quot;Right click to change color.&quot;), BorderLayout.PAGE_END); contentPanel.add(new JLabel(&quot;Undo: Ctrl+Z, Redo: Ctrl+R&quot;), BorderLayout.PAGE_END); contentPanel.add(this); frame.setVisible(true); contentPanel.setBackground(Color.LIGHT_GRAY); } private void attachKeyboardListeners() { addKeyListener(new KeyAdapter() { @Override public void keyPressed(KeyEvent e) { if ((e.getModifiers() &amp; KeyEvent.CTRL_MASK) != 0) { switch (e.getKeyCode()) { case KeyEvent.VK_Z: editor.undo(); break; case KeyEvent.VK_R: editor.redo(); break; } } } }); } private void attachMouseListeners() { MouseAdapter colorizer = new MouseAdapter() { @Override public void mousePressed(MouseEvent e) { if (e.getButton() != MouseEvent.BUTTON3) { return; } Shape target = editor.getShapes().getChildAt(e.getX(), e.getY()); if (target != null) { editor.execute(new ColorCommand(editor, new Color((int) (Math.random() * 0x1000000)))); repaint(); } } }; addMouseListener(colorizer); MouseAdapter selector = new MouseAdapter() { @Override public void mousePressed(MouseEvent e) { if (e.getButton() != MouseEvent.BUTTON1) { return; } Shape target = editor.getShapes().getChildAt(e.getX(), e.getY()); boolean ctrl = (e.getModifiers() &amp; ActionEvent.CTRL_MASK) == ActionEvent.CTRL_MASK; if (target == null) { if (!ctrl) { editor.getShapes().unSelect(); } } else { if (ctrl) { if (target.isSelected()) { target.unSelect(); } else { target.select(); } } else { if (!target.isSelected()) { editor.getShapes().unSelect(); } target.select(); } } repaint(); } }; addMouseListener(selector); MouseAdapter dragger = new MouseAdapter() { MoveCommand moveCommand; @Override public void mouseDragged(MouseEvent e) { if ((e.getModifiersEx() &amp; MouseEvent.BUTTON1_DOWN_MASK) != MouseEvent.BUTTON1_DOWN_MASK) { return; } if (moveCommand == null) { moveCommand = new MoveCommand(editor); moveCommand.start(e.getX(), e.getY()); } moveCommand.move(e.getX(), e.getY()); repaint(); } @Override public void mouseReleased(MouseEvent e) { if (e.getButton() != MouseEvent.BUTTON1 || moveCommand == null) { return; } moveCommand.stop(e.getX(), e.getY()); editor.execute(moveCommand); this.moveCommand = null; repaint(); } }; addMouseListener(dragger); addMouseMotionListener(dragger); } public int getWidth() { return editor.getShapes().getX() + editor.getShapes().getWidth() + PADDING; } public int getHeight() { return editor.getShapes().getY() + editor.getShapes().getHeight() + PADDING; } void refresh() { this.setSize(getWidth(), getHeight()); frame.pack(); } public void update(Graphics g) { paint(g); } public void paint(Graphics graphics) { BufferedImage buffer = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_RGB); Graphics2D ig2 = buffer.createGraphics(); ig2.setBackground(Color.WHITE); ig2.clearRect(0, 0, this.getWidth(), this.getHeight()); editor.getShapes().paint(buffer.getGraphics()); graphics.drawImage(buffer, 0, 0, null); } } ``` editor/Editor.java package refactoring_guru.memento.example.editor; import refactoring_guru.memento.example.commands.Command; import refactoring_guru.memento.example.history.History; import refactoring_guru.memento.example.history.Memento; import refactoring_guru.memento.example.shapes.CompoundShape; import refactoring_guru.memento.example.shapes.Shape; import javax.swing.*; import java.io.*; import java.util.Base64; public class Editor extends JComponent { private Canvas canvas; private CompoundShape allShapes = new CompoundShape(); private History history; public Editor() { canvas = new Canvas(this); history = new History(); } public void loadShapes(Shape... shapes) { allShapes.clear(); allShapes.add(shapes); canvas.refresh(); } public CompoundShape getShapes() { return allShapes; } public void execute(Command c) { history.push(c, new Memento(this)); c.execute(); } public void undo() { if (history.undo()) canvas.repaint(); } public void redo() { if (history.redo()) canvas.repaint(); } public String backup() { try { ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos); oos.writeObject(this.allShapes); oos.close(); return Base64.getEncoder().encodeToString(baos.toByteArray()); } catch (IOException e) { return &quot;&quot;; } } public void restore(String state) { try { byte[] data = Base64.getDecoder().decode(state); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data)); this.allShapes = (CompoundShape) ois.readObject(); ois.close(); } catch (ClassNotFoundException e) { System.out.print(&quot;ClassNotFoundException occurred.&quot;); } catch (IOException e) { System.out.print(&quot;IOException occurred.&quot;); } } } history history/History.java package refactoring_guru.memento.example.history; import refactoring_guru.memento.example.commands.Command; import java.util.ArrayList; import java.util.List; public class History { private List&lt;Pair&gt; history = new ArrayList&lt;Pair&gt;(); private int virtualSize = 0; private class Pair { Command command; Memento memento; Pair(Command c, Memento m) { command = c; memento = m; } private Command getCommand() { return command; } private Memento getMemento() { return memento; } } public void push(Command c, Memento m) { if (virtualSize != history.size() &amp;&amp; virtualSize &gt; 0) { history = history.subList(0, virtualSize - 1); } history.add(new Pair(c, m)); virtualSize = history.size(); } public boolean undo() { Pair pair = getUndo(); if (pair == null) { return false; } System.out.println(&quot;Undoing: &quot; + pair.getCommand().getName()); pair.getMemento().restore(); return true; } public boolean redo() { Pair pair = getRedo(); if (pair == null) { return false; } System.out.println(&quot;Redoing: &quot; + pair.getCommand().getName()); pair.getMemento().restore(); pair.getCommand().execute(); return true; } private Pair getUndo() { if (virtualSize == 0) { return null; } virtualSize = Math.max(0, virtualSize - 1); return history.get(virtualSize); } private Pair getRedo() { if (virtualSize == history.size()) { return null; } virtualSize = Math.min(history.size(), virtualSize + 1); return history.get(virtualSize - 1); } } history/Memento.java package refactoring_guru.memento.example.history; import refactoring_guru.memento.example.editor.Editor; public class Memento { private String backup; private Editor editor; public Memento(Editor editor) { this.editor = editor; this.backup = editor.backup(); } public void restore() { editor.restore(backup); } } shapes shapes/BaseShape.java package refactoring_guru.memento.example.shapes; import java.awt.*; public abstract class BaseShape implements Shape { int x, y; private int dx = 0, dy = 0; private Color color; private boolean selected = false; BaseShape(int x, int y, Color color) { this.x = x; this.y = y; this.color = color; } @Override public int getX() { return x; } @Override public int getY() { return y; } @Override public int getWidth() { return 0; } @Override public int getHeight() { return 0; } @Override public void drag() { dx = x; dy = y; } @Override public void moveTo(int x, int y) { this.x = dx + x; this.y = dy + y; } @Override public void moveBy(int x, int y) { this.x += x; this.y += y; } @Override public void drop() { this.x = dx; this.y = dy; } @Override public boolean isInsideBounds(int x, int y) { return x &gt; getX() &amp;&amp; x &lt; (getX() + getWidth()) &amp;&amp; y &gt; getY() &amp;&amp; y &lt; (getY() + getHeight()); } @Override public Color getColor() { return color; } @Override public void setColor(Color color) { this.color = color; } @Override public void select() { selected = true; } @Override public void unSelect() { selected = false; } @Override public boolean isSelected() { return selected; } void enableSelectionStyle(Graphics graphics) { graphics.setColor(Color.LIGHT_GRAY); Graphics2D g2 = (Graphics2D) graphics; float dash1[] = {2.0f}; g2.setStroke(new BasicStroke(1.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 2.0f, dash1, 0.0f)); } void disableSelectionStyle(Graphics graphics) { graphics.setColor(color); Graphics2D g2 = (Graphics2D) graphics; g2.setStroke(new BasicStroke()); } @Override public void paint(Graphics graphics) { if (isSelected()) { enableSelectionStyle(graphics); } else { disableSelectionStyle(graphics); } // ... } } shapes/Circle.java package refactoring_guru.memento.example.shapes; import java.awt.*; public class Circle extends BaseShape { private int radius; public Circle(int x, int y, int radius, Color color) { super(x, y, color); this.radius = radius; } @Override public int getWidth() { return radius * 2; } @Override public int getHeight() { return radius * 2; } @Override public void paint(Graphics graphics) { super.paint(graphics); graphics.drawOval(x, y, getWidth() - 1, getHeight() - 1); } } shapes/CompoundShape.java package refactoring_guru.memento.example.shapes; import java.awt.*; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class CompoundShape extends BaseShape { private List&lt;Shape&gt; children = new ArrayList&lt;&gt;(); public CompoundShape(Shape... components) { super(0, 0, Color.BLACK); add(components); } public void add(Shape component) { children.add(component); } public void add(Shape... components) { children.addAll(Arrays.asList(components)); } public void remove(Shape child) { children.remove(child); } public void remove(Shape... components) { children.removeAll(Arrays.asList(components)); } public void clear() { children.clear(); } @Override public int getX() { if (children.size() == 0) { return 0; } int x = children.get(0).getX(); for (Shape child : children) { if (child.getX() &lt; x) { x = child.getX(); } } return x; } @Override public int getY() { if (children.size() == 0) { return 0; } int y = children.get(0).getY(); for (Shape child : children) { if (child.getY() &lt; y) { y = child.getY(); } } return y; } @Override public int getWidth() { int maxWidth = 0; int x = getX(); for (Shape child : children) { int childsRelativeX = child.getX() - x; int childWidth = childsRelativeX + child.getWidth(); if (childWidth &gt; maxWidth) { maxWidth = childWidth; } } return maxWidth; } @Override public int getHeight() { int maxHeight = 0; int y = getY(); for (Shape child : children) { int childsRelativeY = child.getY() - y; int childHeight = childsRelativeY + child.getHeight(); if (childHeight &gt; maxHeight) { maxHeight = childHeight; } } return maxHeight; } @Override public void drag() { for (Shape child : children) { child.drag(); } } @Override public void drop() { for (Shape child : children) { child.drop(); } } @Override public void moveTo(int x, int y) { for (Shape child : children) { child.moveTo(x, y); } } @Override public void moveBy(int x, int y) { for (Shape child : children) { child.moveBy(x, y); } } @Override public boolean isInsideBounds(int x, int y) { for (Shape child : children) { if (child.isInsideBounds(x, y)) { return true; } } return false; } @Override public void setColor(Color color) { super.setColor(color); for (Shape child : children) { child.setColor(color); } } @Override public void unSelect() { super.unSelect(); for (Shape child : children) { child.unSelect(); } } public Shape getChildAt(int x, int y) { for (Shape child : children) { if (child.isInsideBounds(x, y)) { return child; } } return null; } public boolean selectChildAt(int x, int y) { Shape child = getChildAt(x,y); if (child != null) { child.select(); return true; } return false; } public List&lt;Shape&gt; getSelected() { List&lt;Shape&gt; selected = new ArrayList&lt;&gt;(); for (Shape child : children) { if (child.isSelected()) { selected.add(child); } } return selected; } @Override public void paint(Graphics graphics) { if (isSelected()) { enableSelectionStyle(graphics); graphics.drawRect(getX() - 1, getY() - 1, getWidth() + 1, getHeight() + 1); disableSelectionStyle(graphics); } for (Shape child : children) { child.paint(graphics); } } } shapes/Dot.java package refactoring_guru.memento.example.shapes; import java.awt.*; public class Dot extends BaseShape { private final int DOT_SIZE = 3; public Dot(int x, int y, Color color) { super(x, y, color); } @Override public int getWidth() { return DOT_SIZE; } @Override public int getHeight() { return DOT_SIZE; } @Override public void paint(Graphics graphics) { super.paint(graphics); graphics.fillRect(x - 1, y - 1, getWidth(), getHeight()); } } shapes/Rectangle.java package refactoring_guru.memento.example.shapes; import java.awt.*; public class Rectangle extends BaseShape { private int width; private int height; public Rectangle(int x, int y, int width, int height, Color color) { super(x, y, color); this.width = width; this.height = height; } @Override public int getWidth() { return width; } @Override public int getHeight() { return height; } @Override public void paint(Graphics graphics) { super.paint(graphics); graphics.drawRect(x, y, getWidth() - 1, getHeight() - 1); } } shapes/Shape.java package refactoring_guru.memento.example.shapes; import java.awt.*; import java.io.Serializable; public interface Shape extends Serializable { int getX(); int getY(); int getWidth(); int getHeight(); void drag(); void drop(); void moveTo(int x, int y); void moveBy(int x, int y); boolean isInsideBounds(int x, int y); Color getColor(); void setColor(Color color); void select(); void unSelect(); boolean isSelected(); void paint(Graphics graphics); } Demon.java package refactoring_guru.memento.example; import refactoring_guru.memento.example.editor.Editor; import refactoring_guru.memento.example.shapes.Circle; import refactoring_guru.memento.example.shapes.CompoundShape; import refactoring_guru.memento.example.shapes.Dot; import refactoring_guru.memento.example.shapes.Rectangle; import java.awt.*; public class Demo { public static void main(String[] args) { Editor editor = new Editor(); editor.loadShapes( new Circle(10, 10, 10, Color.BLUE), new CompoundShape( new Circle(110, 110, 50, Color.RED), new Dot(160, 160, Color.RED) ), new CompoundShape( new Rectangle(250, 250, 100, 100, Color.GREEN), new Dot(240, 240, Color.GREEN), new Dot(240, 360, Color.GREEN), new Dot(360, 360, Color.GREEN), new Dot(360, 240, Color.GREEN) ) ); } } ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/go/","content":"Go Example package main type cache struct { storage map[string]string evictionAlgo evictionAlgo capacity int maxCapacity int } func initCache(e evictionAlgo) *cache { storage := make(map[string]string) return &amp;cache{ storage: storage, evictionAlgo: e, capacity: 0, maxCapacity: 2, } } func (c *cache) setEvictionAlgo(e evictionAlgo) { c.evictionAlgo = e } func (c *cache) add(key, value string) { if c.capacity == c.maxCapacity { c.evict() } c.capacity++ c.storage[key] = value } func (c *cache) get(key string) { delete(c.storage, key) } func (c *cache) evict() { c.evictionAlgo.evict(c) c.capacity-- } package main type evictionAlgo interface { evict(c *cache) } package main import &quot;fmt&quot; type fifo struct { } func (l *fifo) evict(c *cache) { fmt.Println(&quot;Evicting by fifo strategy&quot;) } package main import &quot;fmt&quot; type lfu struct { } func (l *lfu) evict(c *cache) { fmt.Println(&quot;Evicting by lfu strategy&quot;) } package main import &quot;fmt&quot; type lru struct { } func (l *lru) evict(c *cache) { fmt.Println(&quot;Evicting by lru strategy&quot;) } package main func main() { lfu := &amp;lfu{} cache := initCache(lfu) cache.add(&quot;a&quot;, &quot;1&quot;) cache.add(&quot;b&quot;, &quot;2&quot;) cache.add(&quot;c&quot;, &quot;3&quot;) lru := &amp;lru{} cache.setEvictionAlgo(lru) cache.add(&quot;d&quot;, &quot;4&quot;) fifo := &amp;fifo{} cache.setEvictionAlgo(fifo) cache.add(&quot;e&quot;, &quot;5&quot;) } Evicting by lfu strategy Evicting by lru strategy Evicting by fifo strategy ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/java/","content":"Java Example order/Order.java package refactoring_guru.strategy.example.order; import refactoring_guru.strategy.example.strategies.PayStrategy; /** * Order class. Doesn't know the concrete payment method (strategy) user has * picked. It uses common strategy interface to delegate collecting payment data * to strategy object. It can be used to save order to database. */ public class Order { private int totalCost = 0; private boolean isClosed = false; public void processOrder(PayStrategy strategy) { strategy.collectPaymentDetails(); // Here we could collect and store payment data from the strategy. } public void setTotalCost(int cost) { this.totalCost += cost; } public int getTotalCost() { return totalCost; } public boolean isClosed() { return isClosed; } public void setClosed() { isClosed = true; } } strategies strategies/CreditCard.java package refactoring_guru.strategy.example.strategies; /** * Dummy credit card class. */ public class CreditCard { private int amount; private String number; private String date; private String cvv; CreditCard(String number, String date, String cvv) { this.amount = 100_000; this.number = number; this.date = date; this.cvv = cvv; } public void setAmount(int amount) { this.amount = amount; } public int getAmount() { return amount; } } strategies/PayByCreditCard.java package refactoring_guru.strategy.example.strategies; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; /** * Concrete strategy. Implements credit card payment method. */ public class PayByCreditCard implements PayStrategy { private final BufferedReader READER = new BufferedReader(new InputStreamReader(System.in)); private CreditCard card; /** * Collect credit card data. */ @Override public void collectPaymentDetails() { try { System.out.print(&quot;Enter the card number: &quot;); String number = READER.readLine(); System.out.print(&quot;Enter the card expiration date 'mm/yy': &quot;); String date = READER.readLine(); System.out.print(&quot;Enter the CVV code: &quot;); String cvv = READER.readLine(); card = new CreditCard(number, date, cvv); // Validate credit card number... } catch (IOException ex) { ex.printStackTrace(); } } /** * After card validation we can charge customer's credit card. */ @Override public boolean pay(int paymentAmount) { if (cardIsPresent()) { System.out.println(&quot;Paying &quot; + paymentAmount + &quot; using Credit Card.&quot;); card.setAmount(card.getAmount() - paymentAmount); return true; } else { return false; } } private boolean cardIsPresent() { return card != null; } } strategies/PayByPayPal.java package refactoring_guru.strategy.example.strategies; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.HashMap; import java.util.Map; /** * Concrete strategy. Implements PayPal payment method. */ public class PayByPayPal implements PayStrategy { private static final Map&lt;String, String&gt; DATA_BASE = new HashMap&lt;&gt;(); private final BufferedReader READER = new BufferedReader(new InputStreamReader(System.in)); private String email; private String password; private boolean signedIn; static { DATA_BASE.put(&quot;amanda1985&quot;, &quot;amanda@ya.com&quot;); DATA_BASE.put(&quot;qwerty&quot;, &quot;john@amazon.eu&quot;); } /** * Collect customer's data. */ @Override public void collectPaymentDetails() { try { while (!signedIn) { System.out.print(&quot;Enter the user's email: &quot;); email = READER.readLine(); System.out.print(&quot;Enter the password: &quot;); password = READER.readLine(); if (verify()) { System.out.println(&quot;Data verification has been successful.&quot;); } else { System.out.println(&quot;Wrong email or password!&quot;); } } } catch (IOException ex) { ex.printStackTrace(); } } private boolean verify() { setSignedIn(email.equals(DATA_BASE.get(password))); return signedIn; } /** * Save customer data for future shopping attempts. */ @Override public boolean pay(int paymentAmount) { if (signedIn) { System.out.println(&quot;Paying &quot; + paymentAmount + &quot; using PayPal.&quot;); return true; } else { return false; } } private void setSignedIn(boolean signedIn) { this.signedIn = signedIn; } } strategies/PayStrategy.java package refactoring_guru.strategy.example.strategies; /** * Common interface for all strategies. */ public interface PayStrategy { boolean pay(int paymentAmount); void collectPaymentDetails(); } Demo.java package refactoring_guru.strategy.example; import refactoring_guru.strategy.example.order.Order; import refactoring_guru.strategy.example.strategies.PayByCreditCard; import refactoring_guru.strategy.example.strategies.PayByPayPal; import refactoring_guru.strategy.example.strategies.PayStrategy; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.HashMap; import java.util.Map; /** * World first console e-commerce application. */ public class Demo { private static Map&lt;Integer, Integer&gt; priceOnProducts = new HashMap&lt;&gt;(); private static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); private static Order order = new Order(); private static PayStrategy strategy; static { priceOnProducts.put(1, 2200); priceOnProducts.put(2, 1850); priceOnProducts.put(3, 1100); priceOnProducts.put(4, 890); } public static void main(String[] args) throws IOException { while (!order.isClosed()) { int cost; String continueChoice; do { System.out.print(&quot;Please, select a product:&quot; + &quot;\\n&quot; + &quot;1 - Mother board&quot; + &quot;\\n&quot; + &quot;2 - CPU&quot; + &quot;\\n&quot; + &quot;3 - HDD&quot; + &quot;\\n&quot; + &quot;4 - Memory&quot; + &quot;\\n&quot;); int choice = Integer.parseInt(reader.readLine()); cost = priceOnProducts.get(choice); System.out.print(&quot;Count: &quot;); int count = Integer.parseInt(reader.readLine()); order.setTotalCost(cost * count); System.out.print(&quot;Do you wish to continue selecting products? Y/N: &quot;); continueChoice = reader.readLine(); } while (continueChoice.equalsIgnoreCase(&quot;Y&quot;)); if (strategy == null) { System.out.println(&quot;Please, select a payment method:&quot; + &quot;\\n&quot; + &quot;1 - PalPay&quot; + &quot;\\n&quot; + &quot;2 - Credit Card&quot;); String paymentMethod = reader.readLine(); // Client creates different strategies based on input from user, // application configuration, etc. if (paymentMethod.equals(&quot;1&quot;)) { strategy = new PayByPayPal(); } else { strategy = new PayByCreditCard(); } } // Order object delegates gathering payment data to strategy object, // since only strategies know what data they need to process a // payment. order.processOrder(strategy); System.out.print(&quot;Pay &quot; + order.getTotalCost() + &quot; units or Continue shopping? P/C: &quot;); String proceed = reader.readLine(); if (proceed.equalsIgnoreCase(&quot;P&quot;)) { // Finally, strategy handles the payment. if (strategy.pay(order.getTotalCost())) { System.out.println(&quot;Payment has been successful.&quot;); } else { System.out.println(&quot;FAIL! Please, check your data.&quot;); } order.setClosed(); } } } } Please, select a product: 1 - Mother board 2 - CPU 3 - HDD 4 - Memory 1 Count: 2 Do you wish to continue selecting products? Y/N: y Please, select a product: 1 - Mother board 2 - CPU 3 - HDD 4 - Memory 2 Count: 1 Do you wish to continue selecting products? Y/N: n Please, select a payment method: 1 - PalPay 2 - Credit Card 1 Enter the user's email: user@example.com Enter the password: qwerty Wrong email or password! Enter user email: amanda@ya.com Enter password: amanda1985 Data verification has been successful. Pay 6250 units or Continue shopping? P/C: p Paying 6250 using PayPal. Payment has been successful. ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/javascript/","content":"JavaScript Example /** * The Context defines the interface of interest to clients. */ class Context { /** * Usually, the Context accepts a strategy through the constructor, but also * provides a setter to change it at runtime. */ constructor(strategy) { /** * @type {Strategy} The Context maintains a reference to one of the Strategy * objects. The Context does not know the concrete class of a strategy. It * should work with all strategies via the Strategy interface. */ this.strategy = strategy; } /** * Usually, the Context allows replacing a Strategy object at runtime. */ setStrategy(strategy) { this.strategy = strategy; } /** * The Context delegates some work to the Strategy object instead of * implementing multiple versions of the algorithm on its own. */ doSomeBusinessLogic() { // ... console.log( &quot;Context: Sorting data using the strategy (not sure how it'll do it)&quot; ); const result = this.strategy.doAlgorithm([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]); console.log(result.join(&quot;,&quot;)); // ... } } module.exports = Context; /** * The Strategy interface declares operations common to all supported versions * of some algorithm. * * The Context uses this interface to call the algorithm defined by Concrete * Strategies. */ class Strategy { doAlgorithm(data) {} } module.exports = Strategy; const Strategy = require(&quot;./Strategy&quot;); /** * Concrete Strategies implement the algorithm while following the base Strategy * interface. The interface makes them interchangeable in the Context. */ class ConcreteStrategyA extends Strategy { doAlgorithm(data) { return data.sort(); } } module.exports = ConcreteStrategyA; const Strategy = require(&quot;./Strategy&quot;); /** * Concrete Strategies implement the algorithm while following the base Strategy * interface. The interface makes them interchangeable in the Context. */ class ConcreteStrategyB extends Strategy { doAlgorithm(data) { return data.reverse(); } } module.exports = ConcreteStrategyB; /** * Strategy Design Pattern * * Intent: Lets you define a family of algorithms, put each of them into a * separate class, and make their objects interchangeable. */ const ConcreteStrategyA = require(&quot;./ConcreteStrategyA&quot;); const ConcreteStrategyB = require(&quot;./ConcreteStrategyB&quot;); const Context = require(&quot;./Context&quot;); /** * The client code picks a concrete strategy and passes it to the context. The * client should be aware of the differences between strategies in order to make * the right choice. */ const context = new Context(new ConcreteStrategyA()); console.log(&quot;Client: Strategy is set to normal sorting.&quot;); context.doSomeBusinessLogic(); console.log(&quot;&quot;); console.log(&quot;Client: Strategy is set to reverse sorting.&quot;); context.setStrategy(new ConcreteStrategyB()); context.doSomeBusinessLogic(); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/python/","content":"Python Example &quot;&quot;&quot; Strategy Design Pattern Intent: Lets you define a family of algorithms, put each of them into a separate class, and make their objects interchangeable. &quot;&quot;&quot; from __future__ import annotations from abc import ABC, abstractmethod from typing import List class Context(): &quot;&quot;&quot; The Context defines the interface of interest to clients. &quot;&quot;&quot; def __init__(self, strategy: Strategy) -&gt; None: &quot;&quot;&quot; Usually, the Context accepts a strategy through the constructor, but also provides a setter to change it at runtime. &quot;&quot;&quot; self._strategy = strategy @property def strategy(self) -&gt; Strategy: &quot;&quot;&quot; The Context maintains a reference to one of the Strategy objects. The Context does not know the concrete class of a strategy. It should work with all strategies via the Strategy interface. &quot;&quot;&quot; return self._strategy @strategy.setter def strategy(self, strategy: Strategy) -&gt; None: &quot;&quot;&quot; Usually, the Context allows replacing a Strategy object at runtime. &quot;&quot;&quot; self._strategy = strategy def do_some_business_logic(self) -&gt; None: &quot;&quot;&quot; The Context delegates some work to the Strategy object instead of implementing multiple versions of the algorithm on its own. &quot;&quot;&quot; # ... print(&quot;Context: Sorting data using the strategy (not sure how it'll do it)&quot;) result = self._strategy.do_algorithm([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]) print(&quot;,&quot;.join(result)) # ... class Strategy(ABC): &quot;&quot;&quot; The Strategy interface declares operations common to all supported versions of some algorithm. The Context uses this interface to call the algorithm defined by Concrete Strategies. &quot;&quot;&quot; @abstractmethod def do_algorithm(self, data: List): pass &quot;&quot;&quot; Concrete Strategies implement the algorithm while following the base Strategy interface. The interface makes them interchangeable in the Context. &quot;&quot;&quot; class ConcreteStrategyA(Strategy): def do_algorithm(self, data: List) -&gt; List: return sorted(data) class ConcreteStrategyB(Strategy): def do_algorithm(self, data: List) -&gt; List: return reversed(sorted(data)) if __name__ == &quot;__main__&quot;: # The client code picks a concrete strategy and passes it to the context. # The client should be aware of the differences between strategies in order # to make the right choice. context = Context(ConcreteStrategyA()) print(&quot;Client: Strategy is set to normal sorting.&quot;) context.do_some_business_logic() print() print(&quot;Client: Strategy is set to reverse sorting.&quot;) context.strategy = ConcreteStrategyB() context.do_some_business_logic() Client: Strategy is set to normal sorting. Context: Sorting data using the strategy (not sure how it'll do it) a,b,c,d,e Client: Strategy is set to reverse sorting. Context: Sorting data using the strategy (not sure how it'll do it) e,d,c,b,a ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/","content":"Swift Example /// Strategy Design Pattern /// /// Intent: Lets you define a family of algorithms, put each of them into a /// separate class, and make their objects interchangeable. import XCTest /// The Context defines the interface of interest to clients. class Context { /// The Context maintains a reference to one of the Strategy objects. The /// Context does not know the concrete class of a strategy. It should work /// with all strategies via the Strategy interface. private var strategy: Strategy /// Usually, the Context accepts a strategy through the constructor, but /// also provides a setter to change it at runtime. init(strategy: Strategy) { self.strategy = strategy } /// Usually, the Context allows replacing a Strategy object at runtime. func update(strategy: Strategy) { self.strategy = strategy } /// The Context delegates some work to the Strategy object instead of /// implementing multiple versions of the algorithm on its own. func doSomeBusinessLogic() { print(&quot;Context: Sorting data using the strategy (not sure how it'll do it)\\n&quot;) let result = strategy.doAlgorithm([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]) print(result.joined(separator: &quot;,&quot;)) } } /// The Strategy interface declares operations common to all supported versions /// of some algorithm. /// /// The Context uses this interface to call the algorithm defined by Concrete /// Strategies. protocol Strategy { func doAlgorithm&lt;T: Comparable&gt;(_ data: [T]) -&gt; [T] } /// Concrete Strategies implement the algorithm while following the base /// Strategy interface. The interface makes them interchangeable in the Context. class ConcreteStrategyA: Strategy { func doAlgorithm&lt;T: Comparable&gt;(_ data: [T]) -&gt; [T] { return data.sorted() } } class ConcreteStrategyB: Strategy { func doAlgorithm&lt;T: Comparable&gt;(_ data: [T]) -&gt; [T] { return data.sorted(by: &gt;) } } /// Let's see how it all works together. class StrategyConceptual: XCTestCase { func test() { /// The client code picks a concrete strategy and passes it to the /// context. The client should be aware of the differences between /// strategies in order to make the right choice. let context = Context(strategy: ConcreteStrategyA()) print(&quot;Client: Strategy is set to normal sorting.\\n&quot;) context.doSomeBusinessLogic() print(&quot;\\nClient: Strategy is set to reverse sorting.\\n&quot;) context.update(strategy: ConcreteStrategyB()) context.doSomeBusinessLogic() } } Client: Strategy is set to normal sorting. Context: Sorting data using the strategy (not sure how it'll do it) a,b,c,d,e Client: Strategy is set to reverse sorting. Context: Sorting data using the strategy (not sure how it'll do it) e,d,c,b,a ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/example2","content":"Example 2 import XCTest class StrategyRealWorld: XCTestCase { /// This example shows a simple implementation of a list controller that is /// able to display models from different data sources: /// /// (MemoryStorage, CoreDataStorage, RealmStorage) func test() { let controller = ListController() let memoryStorage = MemoryStorage&lt;User&gt;() memoryStorage.add(usersFromNetwork()) clientCode(use: controller, with: memoryStorage) clientCode(use: controller, with: CoreDataStorage()) clientCode(use: controller, with: RealmStorage()) } func clientCode(use controller: ListController, with dataSource: DataSource) { controller.update(dataSource: dataSource) controller.displayModels() } private func usersFromNetwork() -&gt; [User] { let firstUser = User(id: 1, username: &quot;username1&quot;) let secondUser = User(id: 2, username: &quot;username2&quot;) return [firstUser, secondUser] } } class ListController { private var dataSource: DataSource? func update(dataSource: DataSource) { /// ... resest current states ... self.dataSource = dataSource } func displayModels() { guard let dataSource = dataSource else { return } let models = dataSource.loadModels() as [User] /// Bind models to cells of a list view... print(&quot;\\nListController: Displaying models...&quot;) models.forEach({ print($0) }) } } protocol DataSource { func loadModels&lt;T: DomainModel&gt;() -&gt; [T] } class MemoryStorage&lt;Model&gt;: DataSource { private lazy var items = [Model]() func add(_ items: [Model]) { self.items.append(contentsOf: items) } func loadModels&lt;T: DomainModel&gt;() -&gt; [T] { guard T.self == User.self else { return [] } return items as! [T] } } class CoreDataStorage: DataSource { func loadModels&lt;T: DomainModel&gt;() -&gt; [T] { guard T.self == User.self else { return [] } let firstUser = User(id: 3, username: &quot;username3&quot;) let secondUser = User(id: 4, username: &quot;username4&quot;) return [firstUser, secondUser] as! [T] } } class RealmStorage: DataSource { func loadModels&lt;T: DomainModel&gt;() -&gt; [T] { guard T.self == User.self else { return [] } let firstUser = User(id: 5, username: &quot;username5&quot;) let secondUser = User(id: 6, username: &quot;username6&quot;) return [firstUser, secondUser] as! [T] } } protocol DomainModel { var id: Int { get } } struct User: DomainModel { var id: Int var username: String } User(id: 1, username: &quot;username1&quot;) User(id: 2, username: &quot;username2&quot;) ListController: Displaying models... User(id: 3, username: &quot;username3&quot;) User(id: 4, username: &quot;username4&quot;) ListController: Displaying models... User(id: 5, username: &quot;username5&quot;) User(id: 6, username: &quot;username6&quot;) ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/typescript/","content":"TypeScript Example /** * Strategy Design Pattern * * Intent: Lets you define a family of algorithms, put each of them into a * separate class, and make their objects interchangeable. */ /** * The Context defines the interface of interest to clients. */ class Context { /** * @type {Strategy} The Context maintains a reference to one of the Strategy * objects. The Context does not know the concrete class of a strategy. It * should work with all strategies via the Strategy interface. */ private strategy: Strategy; /** * Usually, the Context accepts a strategy through the constructor, but also * provides a setter to change it at runtime. */ constructor(strategy: Strategy) { this.strategy = strategy; } /** * Usually, the Context allows replacing a Strategy object at runtime. */ public setStrategy(strategy: Strategy) { this.strategy = strategy; } /** * The Context delegates some work to the Strategy object instead of * implementing multiple versions of the algorithm on its own. */ public doSomeBusinessLogic(): void { // ... console.log( &quot;Context: Sorting data using the strategy (not sure how it'll do it)&quot; ); const result = this.strategy.doAlgorithm([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]); console.log(result.join(&quot;,&quot;)); // ... } } /** * The Strategy interface declares operations common to all supported versions * of some algorithm. * * The Context uses this interface to call the algorithm defined by Concrete * Strategies. */ interface Strategy { doAlgorithm(data: string[]): string[]; } /** * Concrete Strategies implement the algorithm while following the base Strategy * interface. The interface makes them interchangeable in the Context. */ class ConcreteStrategyA implements Strategy { public doAlgorithm(data: string[]): string[] { return data.sort(); } } class ConcreteStrategyB implements Strategy { public doAlgorithm(data: string[]): string[] { return data.reverse(); } } /** * The client code picks a concrete strategy and passes it to the context. The * client should be aware of the differences between strategies in order to make * the right choice. */ const context = new Context(new ConcreteStrategyA()); console.log(&quot;Client: Strategy is set to normal sorting.&quot;); context.doSomeBusinessLogic(); console.log(&quot;&quot;); console.log(&quot;Client: Strategy is set to reverse sorting.&quot;); context.setStrategy(new ConcreteStrategyB()); context.doSomeBusinessLogic(); Client: Strategy is set to normal sorting. Context: Sorting data using the strategy (not sure how it'll do it) a,b,c,d,e Client: Strategy is set to reverse sorting. Context: Sorting data using the strategy (not sure how it'll do it) e,d,c,b,a ","keywords":""},{"title":"Template","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/","content":"","keywords":""},{"title":"Problem​","type":1,"pageTitle":"Template","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/#problem","content":"when creating a data mining app that analyzes corporate documents user feed the app documents in various formats (pdf, doc, csv)and tries to extract meaningful data from these docs in a uniform format 1st version of the app could only work only with DOC files next version able to support CSV fileslater it can extract PDF files at some point, you realized that all 3 classes have a lot of similar code while the code for dealing with various data formats was entirely different in all classes the code for data processing and analysis is almost identicalwould be great to get rid of code duplication and leave the algorithm structure intact there is another problem related to client code that used these classes it had lots of conditionals that picked a proper course of action depending on the class of the processing objectif all 3 processing classes had a common interface or a base class one can eliminate the conditionals in client codeand use polymorphism when calling methods on a processing object "},{"title":"Solution​","type":1,"pageTitle":"Template","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/#solution","content":"the pattern suggest that you break down an algorithm into a series of steps turn these steps into methodsand put a series of calls to these methods inside a single template methodthe steps may either be abstract or have some default implementationto use the algorithm, the client is supposed to provide its own subclass implement all abstract steps and override some of the optional ones if needed but not the template method itself a base class can be created for all algorithms the class defines a template method consisting of a series of calls to various document processing steps at first, we can declare all steps abstract forcing the subclasses to provide their own implementations for these methodsfor this case, subclasses already have all necessary implementations the only thing needed is to adjust signatures of the methods to match the methods of the superclass to get rid of duplicate code the code for opening/closing files and extracting/parsing data is different for various data formats no point touching these methods however, implementation of other steps such as analyzing raw data &amp; composing reports is similarso it can pulled up into the base class where subclasses can share that code there are 2 types of steps abstract steps must be implemented by every subclassoptional steps already have some default implementation, but still can be overridden if needed there is another type of step, called hooks it is an optional step with an empty bodya template method would work even if a hook isn't overriddenusually hooks are placed before and after crucial steps of algorithms providing subclasses with additional extension points for an algorithm "},{"title":"Analogy​","type":1,"pageTitle":"Template","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/#analogy","content":"the template method approach can be used in mass housing construction the architectural plan for building a standard house may contain several extension points that would let a potential owner adjust some details of the resulting house each building step such as laying the foundation, framing, building walls, installing plumbing and wiring for water and electricity, can be slightly changed to make the resulting house a little bit different from others "},{"title":"Structure​","type":1,"pageTitle":"Template","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/#structure","content":" The Abstract Class declares methods that act as steps of an algorithm, as well as the actual template method which calls these methods in a specific order. The steps may either be declared abstract or have some default implementation. Concrete Classes can override all of the steps, but not the template method itself. "},{"title":"How to use​","type":1,"pageTitle":"Template","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/#how-to-use","content":"Use the Template Method pattern when you want to let clients extend only particular steps of an algorithm, but not the whole algorithm or its structure The Template Method lets you turn a monolithic algorithm into a series of individual steps which can be easily extended by subclasses while keeping intact the structure defined in a superclass Use the pattern when you have several classes that contain almost identical algorithms with some minor differences As a result, you might need to modify all classes when the algorithm changesWhen you turn such an algorithm into a template method, you can also pull up the steps with similar implementations into a superclass, eliminating code duplicationCode that varies between subclasses can remain in subclasses "},{"title":"How to implement​","type":1,"pageTitle":"Template","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/#how-to-implement","content":"Analyze the target algorithm to see whether you can break it into steps consider which steps are common to all subclasses and which ones will always be unique create the abstract base class and declare the template method and a set of abstract methods representing the algorithm's steps outline the algorithm's structure in the template method by executing corresponding stepsconsider making the template method final to prevent final to prevent subclasses from overriding it it is okay if all steps end by being abstract however, some steps might benefit from having a default implementationsubclasses don't have to implement those methods think of adding hooks between the crucial steps of the algorithmfor each variation of the algorithm, create a new concrete subclass it must implement all of the abstract steps, but may also override some of the optional ones "},{"title":"Pros and Cons​","type":1,"pageTitle":"Template","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/#pros-and-cons","content":""},{"title":"Pros​","type":1,"pageTitle":"Template","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/#pros","content":"can let clients override only certain parts of a large algorithm making them less affected by changes that happen to other parts of the algorithm can pull the duplicate code into a superclass "},{"title":"Cons​","type":1,"pageTitle":"Template","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/#cons","content":"some clients may be limited by the provided skeleton of an algorithmyou might violate the Liskov Substitution Principle by suppressing a default step implementation via a subclasstemplate methods tend to be harder to maintain the more steps they have "},{"title":"Example​","type":1,"pageTitle":"Template","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/#example","content":"abstract class Builder { // Template method public build() { this.test(); this.lint(); this.assemble(); this.deploy(); } abstract test(); abstract lint(); abstract assemble(); abstract deploy(); } class AndroidBuilder extends Builder { public test() { return &quot;Running android tests&quot;; } public lint() { return &quot;Linting android code&quot;; } public assemble() { return &quot;Assembling android build&quot;; } public deploy() { return &quot;Deploying android build to server&quot;; } } class IosBuilder extends Builder { public test() { return &quot;Running ios tests&quot;; } public lint() { return &quot;Linting ios code&quot;; } public assemble() { return &quot;Assembling ios build&quot;; } public deploy() { return &quot;Deploying ios build to server&quot;; } } const androidBuilder = new AndroidBuilder(); androidBuilder.build(); // Running android tests // Linting android code // Assembling android build // Deploying android build to server const iosBuilder = new IosBuilder(); androidBuilder.build(); // Running ios tests // Linting ios code // Assembling ios build // Deploying ios build to server  "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; /** * Template Method Design Pattern * * Intent: Defines the skeleton of an algorithm in the superclass but lets * subclasses override specific steps of the algorithm without changing its * structure. */ /** * The Abstract Class defines a template method that contains a skeleton of some * algorithm, composed of calls to (usually) abstract primitive operations. * * Concrete subclasses should implement these operations, but leave the template * method itself intact. */ class AbstractClass { /** * The template method defines the skeleton of an algorithm. */ public: void TemplateMethod() const { this-&gt;BaseOperation1(); this-&gt;RequiredOperations1(); this-&gt;BaseOperation2(); this-&gt;Hook1(); this-&gt;RequiredOperation2(); this-&gt;BaseOperation3(); this-&gt;Hook2(); } /** * These operations already have implementations. */ protected: void BaseOperation1() const { std::cout &lt;&lt; &quot;AbstractClass says: I am doing the bulk of the work\\n&quot;; } void BaseOperation2() const { std::cout &lt;&lt; &quot;AbstractClass says: But I let subclasses override some operations\\n&quot;; } void BaseOperation3() const { std::cout &lt;&lt; &quot;AbstractClass says: But I am doing the bulk of the work anyway\\n&quot;; } /** * These operations have to be implemented in subclasses. */ virtual void RequiredOperations1() const = 0; virtual void RequiredOperation2() const = 0; /** * These are &quot;hooks.&quot; Subclasses may override them, but it's not mandatory * since the hooks already have default (but empty) implementation. Hooks * provide additional extension points in some crucial places of the * algorithm. */ virtual void Hook1() const {} virtual void Hook2() const {} }; /** * Concrete classes have to implement all abstract operations of the base class. * They can also override some operations with a default implementation. */ class ConcreteClass1 : public AbstractClass { protected: void RequiredOperations1() const override { std::cout &lt;&lt; &quot;ConcreteClass1 says: Implemented Operation1\\n&quot;; } void RequiredOperation2() const override { std::cout &lt;&lt; &quot;ConcreteClass1 says: Implemented Operation2\\n&quot;; } }; /** * Usually, concrete classes override only a fraction of base class' operations. */ class ConcreteClass2 : public AbstractClass { protected: void RequiredOperations1() const override { std::cout &lt;&lt; &quot;ConcreteClass2 says: Implemented Operation1\\n&quot;; } void RequiredOperation2() const override { std::cout &lt;&lt; &quot;ConcreteClass2 says: Implemented Operation2\\n&quot;; } void Hook1() const override { std::cout &lt;&lt; &quot;ConcreteClass2 says: Overridden Hook1\\n&quot;; } }; /** * The client code calls the template method to execute the algorithm. Client * code does not have to know the concrete class of an object it works with, as * long as it works with objects through the interface of their base class. */ void ClientCode(AbstractClass *class_) { // ... class_-&gt;TemplateMethod(); // ... } int main() { std::cout &lt;&lt; &quot;Same client code can work with different subclasses:\\n&quot;; ConcreteClass1 *concreteClass1 = new ConcreteClass1; ClientCode(concreteClass1); std::cout &lt;&lt; &quot;\\n&quot;; std::cout &lt;&lt; &quot;Same client code can work with different subclasses:\\n&quot;; ConcreteClass2 *concreteClass2 = new ConcreteClass2; ClientCode(concreteClass2); delete concreteClass1; delete concreteClass2; return 0; } Same client code can work with different subclasses: AbstractClass says: I am doing the bulk of the work ConcreteClass1 says: Implemented Operation1 AbstractClass says: But I let subclasses override some operations ConcreteClass1 says: Implemented Operation2 AbstractClass says: But I am doing the bulk of the work anyway Same client code can work with different subclasses: AbstractClass says: I am doing the bulk of the work ConcreteClass2 says: Implemented Operation1 AbstractClass says: But I let subclasses override some operations ConcreteClass2 says: Overridden Hook1 ConcreteClass2 says: Implemented Operation2 AbstractClass says: But I am doing the bulk of the work anyway ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/cSharp/","content":"C# Example // Template Method Design Pattern // // Intent: Defines the skeleton of an algorithm in the superclass but lets // subclasses override specific steps of the algorithm without changing its // structure. using System; namespace RefactoringGuru.DesignPatterns.TemplateMethod.Conceptual { // The Abstract Class defines a template method that contains a skeleton of // some algorithm, composed of calls to (usually) abstract primitive // operations. // // Concrete subclasses should implement these operations, but leave the // template method itself intact. abstract class AbstractClass { // The template method defines the skeleton of an algorithm. public void TemplateMethod() { this.BaseOperation1(); this.RequiredOperations1(); this.BaseOperation2(); this.Hook1(); this.RequiredOperation2(); this.BaseOperation3(); this.Hook2(); } // These operations already have implementations. protected void BaseOperation1() { Console.WriteLine(&quot;AbstractClass says: I am doing the bulk of the work&quot;); } protected void BaseOperation2() { Console.WriteLine(&quot;AbstractClass says: But I let subclasses override some operations&quot;); } protected void BaseOperation3() { Console.WriteLine(&quot;AbstractClass says: But I am doing the bulk of the work anyway&quot;); } // These operations have to be implemented in subclasses. protected abstract void RequiredOperations1(); protected abstract void RequiredOperation2(); // These are &quot;hooks.&quot; Subclasses may override them, but it's not // mandatory since the hooks already have default (but empty) // implementation. Hooks provide additional extension points in some // crucial places of the algorithm. protected virtual void Hook1() { } protected virtual void Hook2() { } } // Concrete classes have to implement all abstract operations of the base // class. They can also override some operations with a default // implementation. class ConcreteClass1 : AbstractClass { protected override void RequiredOperations1() { Console.WriteLine(&quot;ConcreteClass1 says: Implemented Operation1&quot;); } protected override void RequiredOperation2() { Console.WriteLine(&quot;ConcreteClass1 says: Implemented Operation2&quot;); } } // Usually, concrete classes override only a fraction of base class' // operations. class ConcreteClass2 : AbstractClass { protected override void RequiredOperations1() { Console.WriteLine(&quot;ConcreteClass2 says: Implemented Operation1&quot;); } protected override void RequiredOperation2() { Console.WriteLine(&quot;ConcreteClass2 says: Implemented Operation2&quot;); } protected override void Hook1() { Console.WriteLine(&quot;ConcreteClass2 says: Overridden Hook1&quot;); } } class Client { // The client code calls the template method to execute the algorithm. // Client code does not have to know the concrete class of an object it // works with, as long as it works with objects through the interface of // their base class. public static void ClientCode(AbstractClass abstractClass) { // ... abstractClass.TemplateMethod(); // ... } } class Program { static void Main(string[] args) { Console.WriteLine(&quot;Same client code can work with different subclasses:&quot;); Client.ClientCode(new ConcreteClass1()); Console.Write(&quot;\\n&quot;); Console.WriteLine(&quot;Same client code can work with different subclasses:&quot;); Client.ClientCode(new ConcreteClass2()); } } } Same client code can work with different subclasses: AbstractClass says: I am doing the bulk of the work ConcreteClass1 says: Implemented Operation1 AbstractClass says: But I let subclasses override some operations ConcreteClass1 says: Implemented Operation2 AbstractClass says: But I am doing the bulk of the work anyway Same client code can work with different subclasses: AbstractClass says: I am doing the bulk of the work ConcreteClass2 says: Implemented Operation1 AbstractClass says: But I let subclasses override some operations ConcreteClass2 says: Overridden Hook1 ConcreteClass2 says: Implemented Operation2 AbstractClass says: But I am doing the bulk of the work anyway ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/go/","content":"Go Example package main import &quot;fmt&quot; type email struct { otp } func (s *email) genRandomOTP(len int) string { randomOTP := &quot;1234&quot; fmt.Printf(&quot;EMAIL: generating random otp %s\\n&quot;, randomOTP) return randomOTP } func (s *email) saveOTPCache(otp string) { fmt.Printf(&quot;EMAIL: saving otp: %s to cache\\n&quot;, otp) } func (s *email) getMessage(otp string) string { return &quot;EMAIL OTP for login is &quot; + otp } func (s *email) sendNotification(message string) error { fmt.Printf(&quot;EMAIL: sending email: %s\\n&quot;, message) return nil } func (s *email) publishMetric() { fmt.Printf(&quot;EMAIL: publishing metrics\\n&quot;) } package main type iOtp interface { genRandomOTP(int) string saveOTPCache(string) getMessage(string) string sendNotification(string) error publishMetric() } // type otp struct { // } // func (o *otp) genAndSendOTP(iOtp iOtp, otpLength int) error { // otp := iOtp.genRandomOTP(otpLength) // iOtp.saveOTPCache(otp) // message := iOtp.getMessage(otp) // err := iOtp.sendNotification(message) // if err != nil { // return err // } // iOtp.publishMetric() // return nil // } type otp struct { iOtp iOtp } func (o *otp) genAndSendOTP(otpLength int) error { otp := o.iOtp.genRandomOTP(otpLength) o.iOtp.saveOTPCache(otp) message := o.iOtp.getMessage(otp) err := o.iOtp.sendNotification(message) if err != nil { return err } o.iOtp.publishMetric() return nil } package main import &quot;fmt&quot; type sms struct { otp } func (s *sms) genRandomOTP(len int) string { randomOTP := &quot;1234&quot; fmt.Printf(&quot;SMS: generating random otp %s\\n&quot;, randomOTP) return randomOTP } func (s *sms) saveOTPCache(otp string) { fmt.Printf(&quot;SMS: saving otp: %s to cache\\n&quot;, otp) } func (s *sms) getMessage(otp string) string { return &quot;SMS OTP for login is &quot; + otp } func (s *sms) sendNotification(message string) error { fmt.Printf(&quot;SMS: sending sms: %s\\n&quot;, message) return nil } func (s *sms) publishMetric() { fmt.Printf(&quot;SMS: publishing metrics\\n&quot;) } package main import &quot;fmt&quot; func main() { // otp := otp{} // smsOTP := &amp;sms{ // otp: otp, // } // smsOTP.genAndSendOTP(smsOTP, 4) // emailOTP := &amp;email{ // otp: otp, // } // emailOTP.genAndSendOTP(emailOTP, 4) // fmt.Scanln() smsOTP := &amp;sms{} o := otp{ iOtp: smsOTP, } o.genAndSendOTP(4) fmt.Println(&quot;&quot;) emailOTP := &amp;email{} o = otp{ iOtp: emailOTP, } o.genAndSendOTP(4) } SMS: generating random otp 1234 SMS: saving otp: 1234 to cache SMS: sending sms: SMS OTP for login is 1234 SMS: publishing metrics EMAIL: generating random otp 1234 EMAIL: saving otp: 1234 to cache EMAIL: sending email: EMAIL OTP for login is 1234 EMAIL: publishing metrics ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/java/","content":"Java Example networks networks/Facebook.java package refactoring_guru.template_method.example.networks; /** * Class of social network */ public class Facebook extends Network { public Facebook(String userName, String password) { this.userName = userName; this.password = password; } public boolean logIn(String userName, String password) { System.out.println(&quot;\\nChecking user's parameters&quot;); System.out.println(&quot;Name: &quot; + this.userName); System.out.print(&quot;Password: &quot;); for (int i = 0; i &lt; this.password.length(); i++) { System.out.print(&quot;*&quot;); } simulateNetworkLatency(); System.out.println(&quot;\\n\\nLogIn success on Facebook&quot;); return true; } public boolean sendData(byte[] data) { boolean messagePosted = true; if (messagePosted) { System.out.println(&quot;Message: '&quot; + new String(data) + &quot;' was posted on Facebook&quot;); return true; } else { return false; } } public void logOut() { System.out.println(&quot;User: '&quot; + userName + &quot;' was logged out from Facebook&quot;); } private void simulateNetworkLatency() { try { int i = 0; System.out.println(); while (i &lt; 10) { System.out.print(&quot;.&quot;); Thread.sleep(500); i++; } } catch (InterruptedException ex) { ex.printStackTrace(); } } } networks/Network.java package refactoring_guru.template_method.example.networks; /** * Base class of social network. */ public abstract class Network { String userName; String password; Network() {} /** * Publish the data to whatever network. */ public boolean post(String message) { // Authenticate before posting. Every network uses a different // authentication method. if (logIn(this.userName, this.password)) { // Send the post data. boolean result = sendData(message.getBytes()); logOut(); return result; } return false; } abstract boolean logIn(String userName, String password); abstract boolean sendData(byte[] data); abstract void logOut(); } networks/Twitter.java package refactoring_guru.template_method.example.networks; /** * Class of social network */ public class Twitter extends Network { public Twitter(String userName, String password) { this.userName = userName; this.password = password; } public boolean logIn(String userName, String password) { System.out.println(&quot;\\nChecking user's parameters&quot;); System.out.println(&quot;Name: &quot; + this.userName); System.out.print(&quot;Password: &quot;); for (int i = 0; i &lt; this.password.length(); i++) { System.out.print(&quot;*&quot;); } simulateNetworkLatency(); System.out.println(&quot;\\n\\nLogIn success on Twitter&quot;); return true; } public boolean sendData(byte[] data) { boolean messagePosted = true; if (messagePosted) { System.out.println(&quot;Message: '&quot; + new String(data) + &quot;' was posted on Twitter&quot;); return true; } else { return false; } } public void logOut() { System.out.println(&quot;User: '&quot; + userName + &quot;' was logged out from Twitter&quot;); } private void simulateNetworkLatency() { try { int i = 0; System.out.println(); while (i &lt; 10) { System.out.print(&quot;.&quot;); Thread.sleep(500); i++; } } catch (InterruptedException ex) { ex.printStackTrace(); } } } Demo.java package refactoring_guru.template_method.example; import refactoring_guru.template_method.example.networks.Facebook; import refactoring_guru.template_method.example.networks.Network; import refactoring_guru.template_method.example.networks.Twitter; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; /** * Demo class. Everything comes together here. */ public class Demo { public static void main(String[] args) throws IOException { BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); Network network = null; System.out.print(&quot;Input user name: &quot;); String userName = reader.readLine(); System.out.print(&quot;Input password: &quot;); String password = reader.readLine(); // Enter the message. System.out.print(&quot;Input message: &quot;); String message = reader.readLine(); System.out.println(&quot;\\nChoose social network for posting message.\\n&quot; + &quot;1 - Facebook\\n&quot; + &quot;2 - Twitter&quot;); int choice = Integer.parseInt(reader.readLine()); // Create proper network object and send the message. if (choice == 1) { network = new Facebook(userName, password); } else if (choice == 2) { network = new Twitter(userName, password); } network.post(message); } } Input user name: Jhonatan Input password: qswe Input message: Hello, World! Choose social network for posting message. 1 - Facebook 2 - Twitter 2 Checking user's parameters Name: Jhonatan Password: **** .......... LogIn success on Twitter Message: 'Hello, World!' was posted on Twitter User: 'Jhonatan' was logged out from Twitter ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/javascript/","content":"JavaScript Example /** * The Abstract Class defines a template method that contains a skeleton of some * algorithm, composed of calls to (usually) abstract primitive operations. * * Concrete subclasses should implement these operations, but leave the template * method itself intact. */ class AbstractClass { /** * The template method defines the skeleton of an algorithm. */ templateMethod() { this.baseOperation1(); this.requiredOperations1(); this.baseOperation2(); this.hook1(); this.requiredOperation2(); this.baseOperation3(); this.hook2(); } /** * These operations already have implementations. */ baseOperation1() { console.log(&quot;AbstractClass says: I am doing the bulk of the work&quot;); } baseOperation2() { console.log( &quot;AbstractClass says: But I let subclasses override some operations&quot; ); } baseOperation3() { console.log( &quot;AbstractClass says: But I am doing the bulk of the work anyway&quot; ); } /** * These operations have to be implemented in subclasses. */ requiredOperations1() {} requiredOperation2() {} /** * These are &quot;hooks.&quot; Subclasses may override them, but it's not mandatory * since the hooks already have default (but empty) implementation. Hooks * provide additional extension points in some crucial places of the * algorithm. */ hook1() {} hook2() {} } module.exports = AbstractClass; const AbstractClass = require(&quot;./AbstractClass&quot;); /** * Concrete classes have to implement all abstract operations of the base class. * They can also override some operations with a default implementation. */ class ConcreteClass1 extends AbstractClass { requiredOperations1() { console.log(&quot;ConcreteClass1 says: Implemented Operation1&quot;); } requiredOperation2() { console.log(&quot;ConcreteClass1 says: Implemented Operation2&quot;); } } module.exports = ConcreteClass1; const AbstractClass = require(&quot;./AbstractClass&quot;); /** * Usually, concrete classes override only a fraction of base class' operations. */ class ConcreteClass2 extends AbstractClass { requiredOperations1() { console.log(&quot;ConcreteClass2 says: Implemented Operation1&quot;); } requiredOperation2() { console.log(&quot;ConcreteClass2 says: Implemented Operation2&quot;); } hook1() { console.log(&quot;ConcreteClass2 says: Overridden Hook1&quot;); } } module.exports = AbstractClass; /** * Template Method Design Pattern * * Intent: Defines the skeleton of an algorithm in the superclass but lets * subclasses override specific steps of the algorithm without changing its * structure. */ const ConcreteClass1 = require(&quot;./ConcreteClass1&quot;); const ConcreteClass2 = require(&quot;./ConcreteClass2&quot;); /** * The client code calls the template method to execute the algorithm. Client * code does not have to know the concrete class of an object it works with, as * long as it works with objects through the interface of their base class. */ function clientCode(abstractClass) { // ... abstractClass.templateMethod(); // ... } console.log(&quot;Same client code can work with different subclasses:&quot;); clientCode(new ConcreteClass1()); console.log(&quot;&quot;); console.log(&quot;Same client code can work with different subclasses:&quot;); clientCode(new ConcreteClass2()); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/python/","content":"Python Example &quot;&quot;&quot; Template Method Design Pattern Intent: Defines the skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure. &quot;&quot;&quot; from abc import ABC, abstractmethod class AbstractClass(ABC): &quot;&quot;&quot; The Abstract Class defines a template method that contains a skeleton of some algorithm, composed of calls to (usually) abstract primitive operations. Concrete subclasses should implement these operations, but leave the template method itself intact. &quot;&quot;&quot; def template_method(self) -&gt; None: &quot;&quot;&quot; The template method defines the skeleton of an algorithm. &quot;&quot;&quot; self.base_operation1() self.required_operations1() self.base_operation2() self.hook1() self.required_operations2() self.base_operation3() self.hook2() # These operations already have implementations. def base_operation1(self) -&gt; None: print(&quot;AbstractClass says: I am doing the bulk of the work&quot;) def base_operation2(self) -&gt; None: print(&quot;AbstractClass says: But I let subclasses override some operations&quot;) def base_operation3(self) -&gt; None: print(&quot;AbstractClass says: But I am doing the bulk of the work anyway&quot;) # These operations have to be implemented in subclasses. @abstractmethod def required_operations1(self) -&gt; None: pass @abstractmethod def required_operations2(self) -&gt; None: pass # These are &quot;hooks.&quot; Subclasses may override them, but it's not mandatory # since the hooks already have default (but empty) implementation. Hooks # provide additional extension points in some crucial places of the # algorithm. def hook1(self) -&gt; None: pass def hook2(self) -&gt; None: pass class ConcreteClass1(AbstractClass): &quot;&quot;&quot; Concrete classes have to implement all abstract operations of the base class. They can also override some operations with a default implementation. &quot;&quot;&quot; def required_operations1(self) -&gt; None: print(&quot;ConcreteClass1 says: Implemented Operation1&quot;) def required_operations2(self) -&gt; None: print(&quot;ConcreteClass1 says: Implemented Operation2&quot;) class ConcreteClass2(AbstractClass): &quot;&quot;&quot; Usually, concrete classes override only a fraction of base class' operations. &quot;&quot;&quot; def required_operations1(self) -&gt; None: print(&quot;ConcreteClass2 says: Implemented Operation1&quot;) def required_operations2(self) -&gt; None: print(&quot;ConcreteClass2 says: Implemented Operation2&quot;) def hook1(self) -&gt; None: print(&quot;ConcreteClass2 says: Overridden Hook1&quot;) def client_code(abstract_class: AbstractClass) -&gt; None: &quot;&quot;&quot; The client code calls the template method to execute the algorithm. Client code does not have to know the concrete class of an object it works with, as long as it works with objects through the interface of their base class. &quot;&quot;&quot; # ... abstract_class.template_method() # ... if __name__ == &quot;__main__&quot;: print(&quot;Same client code can work with different subclasses:&quot;) client_code(ConcreteClass1()) print(&quot;&quot;) print(&quot;Same client code can work with different subclasses:&quot;) client_code(ConcreteClass2()) Same client code can work with different subclasses: AbstractClass says: I am doing the bulk of the work ConcreteClass1 says: Implemented Operation1 AbstractClass says: But I let subclasses override some operations ConcreteClass1 says: Implemented Operation2 AbstractClass says: But I am doing the bulk of the work anyway Same client code can work with different subclasses: AbstractClass says: I am doing the bulk of the work ConcreteClass2 says: Implemented Operation1 AbstractClass says: But I let subclasses override some operations ConcreteClass2 says: Overridden Hook1 ConcreteClass2 says: Implemented Operation2 AbstractClass says: But I am doing the bulk of the work anyway ","keywords":""},{"title":"Template Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/swift/","content":"Template Example /// Template Method Design Pattern /// /// Intent: Defines the skeleton of an algorithm in the superclass but lets /// subclasses override specific steps of the algorithm without changing its /// structure. import XCTest /// The Abstract Protocol and its extension defines a template method that /// contains a skeleton of some algorithm, composed of calls to (usually) /// abstract primitive operations. /// /// Concrete subclasses should implement these operations, but leave the /// template method itself intact. protocol AbstractProtocol { /// The template method defines the skeleton of an algorithm. func templateMethod() /// These operations already have implementations. func baseOperation1() func baseOperation2() func baseOperation3() /// These operations have to be implemented in subclasses. func requiredOperations1() func requiredOperation2() /// These are &quot;hooks.&quot; Subclasses may override them, but it's not mandatory /// since the hooks already have default (but empty) implementation. Hooks /// provide additional extension points in some crucial places of the /// algorithm. func hook1() func hook2() } extension AbstractProtocol { func templateMethod() { baseOperation1() requiredOperations1() baseOperation2() hook1() requiredOperation2() baseOperation3() hook2() } /// These operations already have implementations. func baseOperation1() { print(&quot;AbstractProtocol says: I am doing the bulk of the work\\n&quot;) } func baseOperation2() { print(&quot;AbstractProtocol says: But I let subclasses override some operations\\n&quot;) } func baseOperation3() { print(&quot;AbstractProtocol says: But I am doing the bulk of the work anyway\\n&quot;) } func hook1() {} func hook2() {} } /// Concrete classes have to implement all abstract operations of the base /// class. They can also override some operations with a default implementation. class ConcreteClass1: AbstractProtocol { func requiredOperations1() { print(&quot;ConcreteClass1 says: Implemented Operation1\\n&quot;) } func requiredOperation2() { print(&quot;ConcreteClass1 says: Implemented Operation2\\n&quot;) } func hook2() { print(&quot;ConcreteClass1 says: Overridden Hook2\\n&quot;) } } /// Usually, concrete classes override only a fraction of base class' /// operations. class ConcreteClass2: AbstractProtocol { func requiredOperations1() { print(&quot;ConcreteClass2 says: Implemented Operation1\\n&quot;) } func requiredOperation2() { print(&quot;ConcreteClass2 says: Implemented Operation2\\n&quot;) } func hook1() { print(&quot;ConcreteClass2 says: Overridden Hook1\\n&quot;) } } /// The client code calls the template method to execute the algorithm. Client /// code does not have to know the concrete class of an object it works with, as /// long as it works with objects through the interface of their base class. class Client { // ... static func clientCode(use object: AbstractProtocol) { // ... object.templateMethod() // ... } // ... } /// Let's see how it all works together. class TemplateMethodConceptual: XCTestCase { func test() { print(&quot;Same client code can work with different subclasses:\\n&quot;) Client.clientCode(use: ConcreteClass1()) print(&quot;\\nSame client code can work with different subclasses:\\n&quot;) Client.clientCode(use: ConcreteClass2()) } } Same client code can work with different subclasses: AbstractProtocol says: I am doing the bulk of the work ConcreteClass1 says: Implemented Operation1 AbstractProtocol says: But I let subclasses override some operations ConcreteClass1 says: Implemented Operation2 AbstractProtocol says: But I am doing the bulk of the work anyway ConcreteClass1 says: Overridden Hook2 Same client code can work with different subclasses: AbstractProtocol says: I am doing the bulk of the work ConcreteClass2 says: Implemented Operation1 AbstractProtocol says: But I let subclasses override some operations ConcreteClass2 says: Overridden Hook1 ConcreteClass2 says: Implemented Operation2 AbstractProtocol says: But I am doing the bulk of the work anyway ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/swift/example2","content":"Example 2 import XCTest import AVFoundation import CoreLocation import Photos class TemplateMethodRealWorld: XCTestCase { /// A good example of Template Method is a life cycle of UIViewController func testTemplateMethodReal() { let accessors = [CameraAccessor(), MicrophoneAccessor(), PhotoLibraryAccessor()] accessors.forEach { item in item.requestAccessIfNeeded({ status in let message = status ? &quot;You have access to &quot; : &quot;You do not have access to &quot; print(message + item.description + &quot;\\n&quot;) }) } } } class PermissionAccessor: CustomStringConvertible { typealias Completion = (Bool) -&gt; () func requestAccessIfNeeded(_ completion: @escaping Completion) { guard !hasAccess() else { completion(true); return } willReceiveAccess() requestAccess { status in status ? self.didReceiveAccess() : self.didRejectAccess() completion(status) } } func requestAccess(_ completion: @escaping Completion) { fatalError(&quot;Should be overridden&quot;) } func hasAccess() -&gt; Bool { fatalError(&quot;Should be overridden&quot;) } var description: String { return &quot;PermissionAccessor&quot; } /// Hooks func willReceiveAccess() {} func didReceiveAccess() {} func didRejectAccess() {} } class CameraAccessor: PermissionAccessor { override func requestAccess(_ completion: @escaping Completion) { AVCaptureDevice.requestAccess(for: .video) { status in return completion(status) } } override func hasAccess() -&gt; Bool { return AVCaptureDevice.authorizationStatus(for: .video) == .authorized } override var description: String { return &quot;Camera&quot; } } class MicrophoneAccessor: PermissionAccessor { override func requestAccess(_ completion: @escaping Completion) { AVAudioSession.sharedInstance().requestRecordPermission { status in completion(status) } } override func hasAccess() -&gt; Bool { return AVAudioSession.sharedInstance().recordPermission == .granted } override var description: String { return &quot;Microphone&quot; } } class PhotoLibraryAccessor: PermissionAccessor { override func requestAccess(_ completion: @escaping Completion) { PHPhotoLibrary.requestAuthorization { status in completion(status == .authorized) } } override func hasAccess() -&gt; Bool { return PHPhotoLibrary.authorizationStatus() == .authorized } override var description: String { return &quot;PhotoLibrary&quot; } override func didReceiveAccess() { /// We want to track how many people give access to the PhotoLibrary. print(&quot;PhotoLibrary Accessor: Receive access. Updating analytics...&quot;) } override func didRejectAccess() { /// ... and also we want to track how many people rejected access. print(&quot;PhotoLibrary Accessor: Rejected with access. Updating analytics...&quot;) } } You have access to Camera You have access to Microphone PhotoLibrary Accessor: Rejected with access. Updating analytics... You do not have access to PhotoLibrary ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Template/typescript/","content":"TypeScript Example /** * Template Method Design Pattern * * Intent: Defines the skeleton of an algorithm in the superclass but lets * subclasses override specific steps of the algorithm without changing its * structure. */ /** * The Abstract Class defines a template method that contains a skeleton of some * algorithm, composed of calls to (usually) abstract primitive operations. * * Concrete subclasses should implement these operations, but leave the template * method itself intact. */ abstract class AbstractClass { /** * The template method defines the skeleton of an algorithm. */ public templateMethod(): void { this.baseOperation1(); this.requiredOperations1(); this.baseOperation2(); this.hook1(); this.requiredOperation2(); this.baseOperation3(); this.hook2(); } /** * These operations already have implementations. */ protected baseOperation1(): void { console.log(&quot;AbstractClass says: I am doing the bulk of the work&quot;); } protected baseOperation2(): void { console.log( &quot;AbstractClass says: But I let subclasses override some operations&quot; ); } protected baseOperation3(): void { console.log( &quot;AbstractClass says: But I am doing the bulk of the work anyway&quot; ); } /** * These operations have to be implemented in subclasses. */ protected abstract requiredOperations1(): void; protected abstract requiredOperation2(): void; /** * These are &quot;hooks.&quot; Subclasses may override them, but it's not mandatory * since the hooks already have default (but empty) implementation. Hooks * provide additional extension points in some crucial places of the * algorithm. */ protected hook1(): void {} protected hook2(): void {} } /** * Concrete classes have to implement all abstract operations of the base class. * They can also override some operations with a default implementation. */ class ConcreteClass1 extends AbstractClass { protected requiredOperations1(): void { console.log(&quot;ConcreteClass1 says: Implemented Operation1&quot;); } protected requiredOperation2(): void { console.log(&quot;ConcreteClass1 says: Implemented Operation2&quot;); } } /** * Usually, concrete classes override only a fraction of base class' operations. */ class ConcreteClass2 extends AbstractClass { protected requiredOperations1(): void { console.log(&quot;ConcreteClass2 says: Implemented Operation1&quot;); } protected requiredOperation2(): void { console.log(&quot;ConcreteClass2 says: Implemented Operation2&quot;); } protected hook1(): void { console.log(&quot;ConcreteClass2 says: Overridden Hook1&quot;); } } /** * The client code calls the template method to execute the algorithm. Client * code does not have to know the concrete class of an object it works with, as * long as it works with objects through the interface of their base class. */ function clientCode(abstractClass: AbstractClass) { // ... abstractClass.templateMethod(); // ... } console.log(&quot;Same client code can work with different subclasses:&quot;); clientCode(new ConcreteClass1()); console.log(&quot;&quot;); console.log(&quot;Same client code can work with different subclasses:&quot;); clientCode(new ConcreteClass2()); Same client code can work with different subclasses: AbstractClass says: I am doing the bulk of the work ConcreteClass1 says: Implemented Operation1 AbstractClass says: But I let subclasses override some operations ConcreteClass1 says: Implemented Operation2 AbstractClass says: But I am doing the bulk of the work anyway Same client code can work with different subclasses: AbstractClass says: I am doing the bulk of the work ConcreteClass2 says: Implemented Operation1 AbstractClass says: But I let subclasses override some operations ConcreteClass2 says: Overridden Hook1 ConcreteClass2 says: Implemented Operation2 AbstractClass says: But I am doing the bulk of the work anyway ","keywords":""},{"title":"Visitor","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/","content":"","keywords":""},{"title":"Problem​","type":1,"pageTitle":"Visitor","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/#problem","content":"when a team develops an app which works with geographic information structured as 1 colossal graph each node of the graph may represent a complex entity such as a city, and granular things like industries, sightseeing areas, etc the nodes are connected with others if there's a road between real objects that they representunder the hood, each node type is represented by its own classwhile each specific node is an object at some point, a new task is given to implement exporting the graph into XML format seems straightforwardplan to add an export method to each node class and then leverage recursion to go over each node of the graph, executing the export method solution was simple and elegant thanks to polymorphism, code weren't coupled that called the export method to concrete classes of node however, the system architect refused to allow altering of existing node classes since code was already in production, its not good to take risk breaking the app due to a potential bug in the changesit also does not make sense to have XML export code within node classes primary job of these classes was to work with geodata XML export behavior would look alien there another reason for refusal is after this feature is implemented someone from the marketing department would ask to provide the ability to export into a different format or request some other weird stuff this would force you to change those classes again "},{"title":"Solution​","type":1,"pageTitle":"Visitor","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/#solution","content":"the visitor pattern suggests that the new behavior should be placed into a separate class call visitor the original object that had to perform the behavior is now passed to 1 of the visitor's methods as an argument providing the method access to all necessary data contained within the object the behavior can also be executed over objects of different classes the visitor class may define set of methods, each of which could take arguments of different types class ExportVisitor implements Visitor is method doForCity(City c) { ... } method doForIndustry(Industry f) { ... } method doForSightSeeing(SightSeeing ss) { ... } // ... however, calling of these methods will be an issue since they have different signatures, thus polymorphism can't be used foreach (Node node in graph) { if (node instanceof City) exportVisitor.doForCity((City) node) if (node instanceof Industry) exportVisitor.doForIndustry((Industry) node) // ... } why not use method overloading? give all methods the same name even if they support different sets of parametershowever, even if java &amp; C# supports it, it won't be of helpsince the exact class of a node object is unknown in advance the overloading mechanism won't be able to determine the correct method to execute it would default to the method that takes an object of the base Node class the Visitor pattern addresses this problem by using the Double Dispatch method this helps to execute the proper method on an object without cumbersome conditionals instead of letting the client select a proper version of the method to call we delegate the choice to objects we're passing to the visitor as an argument since the objects know their own classes they would be able to pick a proper method on the visitor less awkwardly the accept a visitor and tell it what visiting method should be executed // Client code foreach (Node node in graph) node.accept(exportVisitor) // City class City is method accept(Visitor v) is v.doForCity(this) // ... // Industry class Industry is method accept(Visitor v) is v.doForIndustry(this) // ... although the node classes still has to be changed at least the change is trivialand lets us add further behaviors without altering the code again by extracting a common interface for all visitors all existing nodes can work with any visitor introduced into the appwhen required to introduce a new behavior related to nodes, just need to implement a new visitor class "},{"title":"Analogy​","type":1,"pageTitle":"Visitor","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/#analogy","content":"imagine a seasoned insurance agent who's eager to get new customers he can visit every building in a neighborhood and try to sell insurance to everyone he meets depending on the type of organization that occupies the building he can offer specialized insurance policies residential building, sells medical insurancebank, sells theft insurancecoffee shop, sells fire and flood insurance "},{"title":"Structure​","type":1,"pageTitle":"Visitor","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/#structure","content":" The Visitor interface declares a set of visiting methods that can take concrete elements of an object structure as arguments. These methods may have the same names if the program is written in a language that supports overloading, but the type of their parameters must be different. Each Concrete Visitor implements several versions of the same behaviors, tailored for different concrete element classes. The Element interface declares a method for “accepting” visitors. This method should have one parameter declared with the type of the visitor interface. Each Concrete Element must implement the acceptance method. The purpose of this method is to redirect the call to the proper visitor’s method corresponding to the current element class.Be aware that even if a base element class implements this method, all subclasses must still override this method in their own classes and call the appropriate method on the visitor object. The Client usually represents a collection or some other complex object (for example, a Composite tree). Usually, clients aren’t aware of all the concrete element classes because they work with objects from that collection via some abstract interface. "},{"title":"When to use​","type":1,"pageTitle":"Visitor","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/#when-to-use","content":"Use the Visitor when you need to perform an operation on all elements of a complex object structure (for example, an object tree) The Visitor pattern lets you execute an operation over a set of objects with different classes by having a visitor object implement several variants of the same operation, which correspond to all target classes Use the Visitor to clean up the business logic of auxiliary behaviors The pattern lets you make the primary classes of your app more focused on their main jobs by extracting all other behaviors into a set of visitor classes Use the pattern when a behavior makes sense only in some classes of a class hierarchy, but not in others You can extract this behavior into a separate visitor class and implement only those visiting methods that accept objects of relevant classes, leaving the rest empty "},{"title":"How to implement​","type":1,"pageTitle":"Visitor","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/#how-to-implement","content":"Declare the visitor interface with a set of “visiting” methods, one per each concrete element class that exists in the programDeclare the element interface If you’re working with an existing element class hierarchy, add the abstract “acceptance” method to the base class of the hierarchyThis method should accept a visitor object as an argument Implement the acceptance methods in all concrete element classes These methods must simply redirect the call to a visiting method on the incoming visitor object which matches the class of the current element The element classes should only work with visitors via the visitor interface Visitors, however, must be aware of all concrete element classes, referenced as parameter types of the visiting methods For each behavior that can’t be implemented inside the element hierarchy, create a new concrete visitor class and implement all of the visiting methods You might encounter a situation where the visitor will need access to some private members of the element classIn this case, you can either make these fields or methods public, violating the element’s encapsulation, or nest the visitor class in the element classThe latter is only possible if you’re lucky to work with a programming language that supports nested classes The client must create visitor objects and pass them into elements via “acceptance” methods "},{"title":"Pros & Cons​","type":1,"pageTitle":"Visitor","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/#pros--cons","content":""},{"title":"Pros​","type":1,"pageTitle":"Visitor","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/#pros","content":"Open/Closed Principle You can introduce a new behavior that can work with objects of different classes without changing these classes Single Responsibility Principle You can move multiple versions of the same behavior into the same class A visitor object can accumulate some useful information while working with various objects This might be handy when you want to traverse some complex object structure, such as an object tree, and apply the visitor to each object of this structure "},{"title":"Cons​","type":1,"pageTitle":"Visitor","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/#cons","content":"You need to update all visitors each time a class gets added to or removed from the element hierarchyVisitors might lack the necessary access to the private fields and methods of the elements that they’re supposed to work with "},{"title":"Example​","type":1,"pageTitle":"Visitor","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/#example","content":"// The component interface declares an 'accept' method that // takes the base visitor interface as an argument. interface Shape { move(x, y); draw(); accept(v: Visitor); } // Each concrete component class must implement the 'accept' method class Dot implements Shape { accept(v: Visitor) { v.visitDot(this); } move(x, y) {} draw() {} } class Circle implements Shape { accept(v: Visitor) { v.visitCircle(this); } move(x, y) {} draw() {} } class Rectangle implements Shape { accept(v: Visitor) { v.visitRectangle(this); } move(x, y) {} draw() {} }  // The Visitor interface declares a set of visiting methods that // correspond to component classes. interface Visitor { visitDot(d: Dot); visitCircle(c: Circle); visitRectangle(r: Rectangle); } class JSONExportVisitor implements Visitor { visitDot(d: Dot) { // Export the dot's ID and coordinates. } visitCircle(d: Circle) { // Export the circle's ID, center coordinates and radius. } visitRectangle(d: Rectangle) { // Export the rectangle's ID, left-top coordinates, width and height. } } // The client code can run visitor operations over any set of // elements without figuring out their concrete classes. The // 'accept' operation directs a call to the appropriate operation // in the visitor object. const allShapes = [new Dot(), new Circle(), new Rectangle()]; const exportVisitor = new JSONExportVisitor(); allShapes.forEach((shape) =&gt; shape.accept(exportVisitor));  "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/cPlusPlus/","content":"C++ Example #include &lt;array&gt; #include &lt;iostream&gt; #include &lt;string&gt; /** * Visitor Design Pattern * * Intent: Lets you separate algorithms from the objects on which they operate. */ /** * The Visitor Interface declares a set of visiting methods that correspond to * component classes. The signature of a visiting method allows the visitor to * identify the exact class of the component that it's dealing with. */ class ConcreteComponentA; class ConcreteComponentB; class Visitor { public: virtual void VisitConcreteComponentA(const ConcreteComponentA *element) const = 0; virtual void VisitConcreteComponentB(const ConcreteComponentB *element) const = 0; }; /** * The Component interface declares an `accept` method that should take the base * visitor interface as an argument. */ class Component { public: virtual ~Component() {} virtual void Accept(Visitor *visitor) const = 0; }; /** * Each Concrete Component must implement the `Accept` method in such a way that * it calls the visitor's method corresponding to the component's class. */ class ConcreteComponentA : public Component { /** * Note that we're calling `visitConcreteComponentA`, which matches the * current class name. This way we let the visitor know the class of the * component it works with. */ public: void Accept(Visitor *visitor) const override { visitor-&gt;VisitConcreteComponentA(this); } /** * Concrete Components may have special methods that don't exist in their base * class or interface. The Visitor is still able to use these methods since * it's aware of the component's concrete class. */ std::string ExclusiveMethodOfConcreteComponentA() const { return &quot;A&quot;; } }; class ConcreteComponentB : public Component { /** * Same here: visitConcreteComponentB =&gt; ConcreteComponentB */ public: void Accept(Visitor *visitor) const override { visitor-&gt;VisitConcreteComponentB(this); } std::string SpecialMethodOfConcreteComponentB() const { return &quot;B&quot;; } }; /** * Concrete Visitors implement several versions of the same algorithm, which can * work with all concrete component classes. * * You can experience the biggest benefit of the Visitor pattern when using it * with a complex object structure, such as a Composite tree. In this case, it * might be helpful to store some intermediate state of the algorithm while * executing visitor's methods over various objects of the structure. */ class ConcreteVisitor1 : public Visitor { public: void VisitConcreteComponentA(const ConcreteComponentA *element) const override { std::cout &lt;&lt; element-&gt;ExclusiveMethodOfConcreteComponentA() &lt;&lt; &quot; + ConcreteVisitor1\\n&quot;; } void VisitConcreteComponentB(const ConcreteComponentB *element) const override { std::cout &lt;&lt; element-&gt;SpecialMethodOfConcreteComponentB() &lt;&lt; &quot; + ConcreteVisitor1\\n&quot;; } }; class ConcreteVisitor2 : public Visitor { public: void VisitConcreteComponentA(const ConcreteComponentA *element) const override { std::cout &lt;&lt; element-&gt;ExclusiveMethodOfConcreteComponentA() &lt;&lt; &quot; + ConcreteVisitor2\\n&quot;; } void VisitConcreteComponentB(const ConcreteComponentB *element) const override { std::cout &lt;&lt; element-&gt;SpecialMethodOfConcreteComponentB() &lt;&lt; &quot; + ConcreteVisitor2\\n&quot;; } }; /** * The client code can run visitor operations over any set of elements without * figuring out their concrete classes. The accept operation directs a call to * the appropriate operation in the visitor object. */ void ClientCode(std::array&lt;const Component *, 2&gt; components, Visitor *visitor) { // ... for (const Component *comp : components) { comp-&gt;Accept(visitor); } // ... } int main() { std::array&lt;const Component *, 2&gt; components = {new ConcreteComponentA, new ConcreteComponentB}; std::cout &lt;&lt; &quot;The client code works with all visitors via the base Visitor interface:\\n&quot;; ConcreteVisitor1 *visitor1 = new ConcreteVisitor1; ClientCode(components, visitor1); std::cout &lt;&lt; &quot;\\n&quot;; std::cout &lt;&lt; &quot;It allows the same client code to work with different types of visitors:\\n&quot;; ConcreteVisitor2 *visitor2 = new ConcreteVisitor2; ClientCode(components, visitor2); for (const Component *comp : components) { delete comp; } delete visitor1; delete visitor2; return 0; } The client code works with all visitors via the base Visitor interface: A + ConcreteVisitor1 B + ConcreteVisitor1 It allows the same client code to work with different types of visitors: A + ConcreteVisitor2 B + ConcreteVisitor2 ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/cSharp/","content":"C# Example // Visitor Design Pattern // // Intent: Lets you separate algorithms from the objects on which they operate. using System; using System.Collections.Generic; namespace RefactoringGuru.DesignPatterns.Visitor.Conceptual { // The Component interface declares an `accept` method that should take the // base visitor interface as an argument. public interface IComponent { void Accept(IVisitor visitor); } // Each Concrete Component must implement the `Accept` method in such a way // that it calls the visitor's method corresponding to the component's // class. public class ConcreteComponentA : IComponent { // Note that we're calling `VisitConcreteComponentA`, which matches the // current class name. This way we let the visitor know the class of the // component it works with. public void Accept(IVisitor visitor) { visitor.VisitConcreteComponentA(this); } // Concrete Components may have special methods that don't exist in // their base class or interface. The Visitor is still able to use these // methods since it's aware of the component's concrete class. public string ExclusiveMethodOfConcreteComponentA() { return &quot;A&quot;; } } public class ConcreteComponentB : IComponent { // Same here: VisitConcreteComponentB =&gt; ConcreteComponentB public void Accept(IVisitor visitor) { visitor.VisitConcreteComponentB(this); } public string SpecialMethodOfConcreteComponentB() { return &quot;B&quot;; } } // The Visitor Interface declares a set of visiting methods that correspond // to component classes. The signature of a visiting method allows the // visitor to identify the exact class of the component that it's dealing // with. public interface IVisitor { void VisitConcreteComponentA(ConcreteComponentA element); void VisitConcreteComponentB(ConcreteComponentB element); } // Concrete Visitors implement several versions of the same algorithm, which // can work with all concrete component classes. // // You can experience the biggest benefit of the Visitor pattern when using // it with a complex object structure, such as a Composite tree. In this // case, it might be helpful to store some intermediate state of the // algorithm while executing visitor's methods over various objects of the // structure. class ConcreteVisitor1 : IVisitor { public void VisitConcreteComponentA(ConcreteComponentA element) { Console.WriteLine(element.ExclusiveMethodOfConcreteComponentA() + &quot; + ConcreteVisitor1&quot;); } public void VisitConcreteComponentB(ConcreteComponentB element) { Console.WriteLine(element.SpecialMethodOfConcreteComponentB() + &quot; + ConcreteVisitor1&quot;); } } class ConcreteVisitor2 : IVisitor { public void VisitConcreteComponentA(ConcreteComponentA element) { Console.WriteLine(element.ExclusiveMethodOfConcreteComponentA() + &quot; + ConcreteVisitor2&quot;); } public void VisitConcreteComponentB(ConcreteComponentB element) { Console.WriteLine(element.SpecialMethodOfConcreteComponentB() + &quot; + ConcreteVisitor2&quot;); } } public class Client { // The client code can run visitor operations over any set of elements // without figuring out their concrete classes. The accept operation // directs a call to the appropriate operation in the visitor object. public static void ClientCode(List&lt;IComponent&gt; components, IVisitor visitor) { foreach (var component in components) { component.Accept(visitor); } } } class Program { static void Main(string[] args) { List&lt;IComponent&gt; components = new List&lt;IComponent&gt; { new ConcreteComponentA(), new ConcreteComponentB() }; Console.WriteLine(&quot;The client code works with all visitors via the base Visitor interface:&quot;); var visitor1 = new ConcreteVisitor1(); Client.ClientCode(components,visitor1); Console.WriteLine(); Console.WriteLine(&quot;It allows the same client code to work with different types of visitors:&quot;); var visitor2 = new ConcreteVisitor2(); Client.ClientCode(components, visitor2); } } } The client code works with all visitors via the base Visitor interface: A + ConcreteVisitor1 B + ConcreteVisitor1 It allows the same client code to work with different types of visitors: A + ConcreteVisitor2 B + ConcreteVisitor2 ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/go/","content":"Go Example package main import ( &quot;fmt&quot; ) type areaCalculator struct { area int } func (a *areaCalculator) visitForSquare(s *square) { // Calculate area for square. // Then assign in to the area instance variable. fmt.Println(&quot;Calculating area for square&quot;) } func (a *areaCalculator) visitForCircle(s *circle) { fmt.Println(&quot;Calculating area for circle&quot;) } func (a *areaCalculator) visitForrectangle(s *rectangle) { fmt.Println(&quot;Calculating area for rectangle&quot;) } package main type circle struct { radius int } func (c *circle) accept(v visitor) { v.visitForCircle(c) } func (c *circle) getType() string { return &quot;Circle&quot; } package main import &quot;fmt&quot; type middleCoordinates struct { x int y int } func (a *middleCoordinates) visitForSquare(s *square) { // Calculate middle point coordinates for square. // Then assign in to the x and y instance variable. fmt.Println(&quot;Calculating middle point coordinates for square&quot;) } func (a *middleCoordinates) visitForCircle(c *circle) { fmt.Println(&quot;Calculating middle point coordinates for circle&quot;) } func (a *middleCoordinates) visitForrectangle(t *rectangle) { fmt.Println(&quot;Calculating middle point coordinates for rectangle&quot;) } package main type rectangle struct { l int b int } func (t *rectangle) accept(v visitor) { v.visitForrectangle(t) } func (t *rectangle) getType() string { return &quot;rectangle&quot; } package main type shape interface { getType() string accept(visitor) } package main type square struct { side int } func (s *square) accept(v visitor) { v.visitForSquare(s) } func (s *square) getType() string { return &quot;Square&quot; } package main type visitor interface { visitForSquare(*square) visitForCircle(*circle) visitForrectangle(*rectangle) } package main import &quot;fmt&quot; func main() { square := &amp;square{side: 2} circle := &amp;circle{radius: 3} rectangle := &amp;rectangle{l: 2, b: 3} areaCalculator := &amp;areaCalculator{} square.accept(areaCalculator) circle.accept(areaCalculator) rectangle.accept(areaCalculator) fmt.Println() middleCoordinates := &amp;middleCoordinates{} square.accept(middleCoordinates) circle.accept(middleCoordinates) rectangle.accept(middleCoordinates) } Calculating area for square Calculating area for circle Calculating area for rectangle Calculating middle point coordinates for square Calculating middle point coordinates for circle Calculating middle point coordinates for rectangle ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/java/","content":"Java Example shapes shapes/Circle.java package refactoring_guru.visitor.example.shapes; import refactoring_guru.visitor.example.visitor.Visitor; public class Circle extends Dot { private int radius; public Circle(int id, int x, int y, int radius) { super(id, x, y); this.radius = radius; } @Override public String accept(Visitor visitor) { return visitor.visitCircle(this); } public int getRadius() { return radius; } } shapes/CompoundShape.java package refactoring_guru.visitor.example.shapes; import refactoring_guru.visitor.example.visitor.Visitor; import java.util.ArrayList; import java.util.List; public class CompoundShape implements Shape { public int id; public List&lt;Shape&gt; children = new ArrayList&lt;&gt;(); public CompoundShape(int id) { this.id = id; } @Override public void move(int x, int y) { // move shape } @Override public void draw() { // draw shape } public int getId() { return id; } @Override public String accept(Visitor visitor) { return visitor.visitCompoundGraphic(this); } public void add(Shape shape) { children.add(shape); } } shapes/Dot.java package refactoring_guru.visitor.example.shapes; import refactoring_guru.visitor.example.visitor.Visitor; public class Dot implements Shape { private int id; private int x; private int y; public Dot() { } public Dot(int id, int x, int y) { this.id = id; this.x = x; this.y = y; } @Override public void move(int x, int y) { // move shape } @Override public void draw() { // draw shape } @Override public String accept(Visitor visitor) { return visitor.visitDot(this); } public int getX() { return x; } public int getY() { return y; } public int getId() { return id; } } shapes/Rectangle.java package refactoring_guru.visitor.example.shapes; import refactoring_guru.visitor.example.visitor.Visitor; public class Rectangle implements Shape { private int id; private int x; private int y; private int width; private int height; public Rectangle(int id, int x, int y, int width, int height) { this.id = id; this.x = x; this.y = y; this.width = width; this.height = height; } @Override public String accept(Visitor visitor) { return visitor.visitRectangle(this); } @Override public void move(int x, int y) { // move shape } @Override public void draw() { // draw shape } public int getId() { return id; } public int getX() { return x; } public int getY() { return y; } public int getWidth() { return width; } public int getHeight() { return height; } } shapes/Shape.java package refactoring_guru.visitor.example.shapes; import refactoring_guru.visitor.example.visitor.Visitor; public interface Shape { void move(int x, int y); void draw(); String accept(Visitor visitor); } visitor visitor/Visitor.java package refactoring_guru.visitor.example.visitor; import refactoring_guru.visitor.example.shapes.Circle; import refactoring_guru.visitor.example.shapes.CompoundShape; import refactoring_guru.visitor.example.shapes.Dot; import refactoring_guru.visitor.example.shapes.Rectangle; public interface Visitor { String visitDot(Dot dot); String visitCircle(Circle circle); String visitRectangle(Rectangle rectangle); String visitCompoundGraphic(CompoundShape cg); } visitor/XMLExportVisitor.java package refactoring_guru.visitor.example.visitor; import refactoring_guru.visitor.example.shapes.*; public class XMLExportVisitor implements Visitor { public String export(Shape... args) { StringBuilder sb = new StringBuilder(); sb.append(&quot;&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;utf-8\\&quot;?&gt;&quot; + &quot;\\n&quot;); for (Shape shape : args) { sb.append(shape.accept(this)).append(&quot;\\n&quot;); } return sb.toString(); } public String visitDot(Dot d) { return &quot;&lt;dot&gt;&quot; + &quot;\\n&quot; + &quot; &lt;id&gt;&quot; + d.getId() + &quot;&lt;/id&gt;&quot; + &quot;\\n&quot; + &quot; &lt;x&gt;&quot; + d.getX() + &quot;&lt;/x&gt;&quot; + &quot;\\n&quot; + &quot; &lt;y&gt;&quot; + d.getY() + &quot;&lt;/y&gt;&quot; + &quot;\\n&quot; + &quot;&lt;/dot&gt;&quot;; } public String visitCircle(Circle c) { return &quot;&lt;circle&gt;&quot; + &quot;\\n&quot; + &quot; &lt;id&gt;&quot; + c.getId() + &quot;&lt;/id&gt;&quot; + &quot;\\n&quot; + &quot; &lt;x&gt;&quot; + c.getX() + &quot;&lt;/x&gt;&quot; + &quot;\\n&quot; + &quot; &lt;y&gt;&quot; + c.getY() + &quot;&lt;/y&gt;&quot; + &quot;\\n&quot; + &quot; &lt;radius&gt;&quot; + c.getRadius() + &quot;&lt;/radius&gt;&quot; + &quot;\\n&quot; + &quot;&lt;/circle&gt;&quot;; } public String visitRectangle(Rectangle r) { return &quot;&lt;rectangle&gt;&quot; + &quot;\\n&quot; + &quot; &lt;id&gt;&quot; + r.getId() + &quot;&lt;/id&gt;&quot; + &quot;\\n&quot; + &quot; &lt;x&gt;&quot; + r.getX() + &quot;&lt;/x&gt;&quot; + &quot;\\n&quot; + &quot; &lt;y&gt;&quot; + r.getY() + &quot;&lt;/y&gt;&quot; + &quot;\\n&quot; + &quot; &lt;width&gt;&quot; + r.getWidth() + &quot;&lt;/width&gt;&quot; + &quot;\\n&quot; + &quot; &lt;height&gt;&quot; + r.getHeight() + &quot;&lt;/height&gt;&quot; + &quot;\\n&quot; + &quot;&lt;/rectangle&gt;&quot;; } public String visitCompoundGraphic(CompoundShape cg) { return &quot;&lt;compound_graphic&gt;&quot; + &quot;\\n&quot; + &quot; &lt;id&gt;&quot; + cg.getId() + &quot;&lt;/id&gt;&quot; + &quot;\\n&quot; + _visitCompoundGraphic(cg) + &quot;&lt;/compound_graphic&gt;&quot;; } private String _visitCompoundGraphic(CompoundShape cg) { StringBuilder sb = new StringBuilder(); for (Shape shape : cg.children) { String obj = shape.accept(this); // Proper indentation for sub-objects. obj = &quot; &quot; + obj.replace(&quot;\\n&quot;, &quot;\\n &quot;) + &quot;\\n&quot;; sb.append(obj); } return sb.toString(); } } Demo.java package refactoring_guru.visitor.example; import refactoring_guru.visitor.example.shapes.*; import refactoring_guru.visitor.example.visitor.XMLExportVisitor; public class Demo { public static void main(String[] args) { Dot dot = new Dot(1, 10, 55); Circle circle = new Circle(2, 23, 15, 10); Rectangle rectangle = new Rectangle(3, 10, 17, 20, 30); CompoundShape compoundShape = new CompoundShape(4); compoundShape.add(dot); compoundShape.add(circle); compoundShape.add(rectangle); CompoundShape c = new CompoundShape(5); c.add(dot); compoundShape.add(c); export(circle, compoundShape); } private static void export(Shape... shapes) { XMLExportVisitor exportVisitor = new XMLExportVisitor(); System.out.println(exportVisitor.export(shapes)); } } &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;circle&gt; &lt;id&gt;2&lt;/id&gt; &lt;x&gt;23&lt;/x&gt; &lt;y&gt;15&lt;/y&gt; &lt;radius&gt;10&lt;/radius&gt; &lt;/circle&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;compound_graphic&gt; &lt;id&gt;4&lt;/id&gt; &lt;dot&gt; &lt;id&gt;1&lt;/id&gt; &lt;x&gt;10&lt;/x&gt; &lt;y&gt;55&lt;/y&gt; &lt;/dot&gt; &lt;circle&gt; &lt;id&gt;2&lt;/id&gt; &lt;x&gt;23&lt;/x&gt; &lt;y&gt;15&lt;/y&gt; &lt;radius&gt;10&lt;/radius&gt; &lt;/circle&gt; &lt;rectangle&gt; &lt;id&gt;3&lt;/id&gt; &lt;x&gt;10&lt;/x&gt; &lt;y&gt;17&lt;/y&gt; &lt;width&gt;20&lt;/width&gt; &lt;height&gt;30&lt;/height&gt; &lt;/rectangle&gt; &lt;compound_graphic&gt; &lt;id&gt;5&lt;/id&gt; &lt;dot&gt; &lt;id&gt;1&lt;/id&gt; &lt;x&gt;10&lt;/x&gt; &lt;y&gt;55&lt;/y&gt; &lt;/dot&gt; &lt;/compound_graphic&gt; &lt;/compound_graphic&gt; ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/javascript/","content":"JavaScript Example /** * The Component interface declares an `accept` method that should take the base * visitor interface as an argument. */ class Component { accept(visitor) {} } module.exports = Component; /** * The Visitor Interface declares a set of visiting methods that correspond to * component classes. The signature of a visiting method allows the visitor to * identify the exact class of the component that it's dealing with. */ class Visitor { visitConcreteComponentA(element) {} visitConcreteComponentB(element) {} } module.exports = Visitor; const Component = require(&quot;./Component&quot;); /** * Each Concrete Component must implement the `accept` method in such a way that * it calls the visitor's method corresponding to the component's class. */ class ConcreteComponentA extends Component { /** * Note that we're calling `visitConcreteComponentA`, which matches the * current class name. This way we let the visitor know the class of the * component it works with. */ accept(visitor) { visitor.visitConcreteComponentA(this); } /** * Concrete Components may have special methods that don't exist in their * base class or interface. The Visitor is still able to use these methods * since it's aware of the component's concrete class. */ exclusiveMethodOfConcreteComponentA() { return &quot;A&quot;; } } module.exports = ConcreteComponentA; const Component = require(&quot;./Component&quot;); /** * Each Concrete Component must implement the `accept` method in such a way that * it calls the visitor's method corresponding to the component's class. */ class ConcreteComponentB extends Component { /** * Same here: visitConcreteComponentB =&gt; ConcreteComponentB */ accept(visitor) { visitor.visitConcreteComponentB(this); } specialMethodOfConcreteComponentB() { return &quot;B&quot;; } } module.exports = ConcreteComponentB; const Visitor = require(&quot;./Visitor&quot;); /** * Concrete Visitors implement several versions of the same algorithm, which can * work with all concrete component classes. * * You can experience the biggest benefit of the Visitor pattern when using it * with a complex object structure, such as a Composite tree. In this case, it * might be helpful to store some intermediate state of the algorithm while * executing visitor's methods over various objects of the structure. */ class ConcreteVisitor1 extends Visitor { visitConcreteComponentA(element) { console.log( `${element.exclusiveMethodOfConcreteComponentA()} + ConcreteVisitor1` ); } visitConcreteComponentB(element) { console.log( `${element.specialMethodOfConcreteComponentB()} + ConcreteVisitor1` ); } } module.exports = ConcreteVisitor1; const Visitor = require(&quot;./Visitor&quot;); /** * Concrete Visitors implement several versions of the same algorithm, which can * work with all concrete component classes. * * You can experience the biggest benefit of the Visitor pattern when using it * with a complex object structure, such as a Composite tree. In this case, it * might be helpful to store some intermediate state of the algorithm while * executing visitor's methods over various objects of the structure. */ class ConcreteVisitor2 extends Visitor { visitConcreteComponentA(element) { console.log( `${element.exclusiveMethodOfConcreteComponentA()} + ConcreteVisitor2` ); } visitConcreteComponentB(element) { console.log( `${element.specialMethodOfConcreteComponentB()} + ConcreteVisitor2` ); } } module.exports = ConcreteVisitor2; /** * Visitor Design Pattern * * Intent: Lets you separate algorithms from the objects on which they operate. */ const ConcreteComponentA = require(&quot;./ConcreteComponentA&quot;); const ConcreteComponentB = require(&quot;./ConcreteComponentB&quot;); const ConcreteVisitor1 = require(&quot;./ConcreteVisitor1&quot;); const ConcreteVisitor2 = require(&quot;./ConcreteVisitor2&quot;); /** * The client code can run visitor operations over any set of elements without * figuring out their concrete classes. The accept operation directs a call to * the appropriate operation in the visitor object. */ function clientCode(components, visitor) { // ... for (const component of components) { component.accept(visitor); } // ... } const components = [new ConcreteComponentA(), new ConcreteComponentB()]; console.log( &quot;The client code works with all visitors via the base Visitor interface:&quot; ); const visitor1 = new ConcreteVisitor1(); clientCode(components, visitor1); console.log(&quot;&quot;); console.log( &quot;It allows the same client code to work with different types of visitors:&quot; ); const visitor2 = new ConcreteVisitor2(); clientCode(components, visitor2); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/python/","content":"Python Example &quot;&quot;&quot; Visitor Design Pattern Intent: Lets you separate algorithms from the objects on which they operate. &quot;&quot;&quot; from __future__ import annotations from abc import ABC, abstractmethod from typing import List class Component(ABC): &quot;&quot;&quot; The Component interface declares an `accept` method that should take the base visitor interface as an argument. &quot;&quot;&quot; @abstractmethod def accept(self, visitor: Visitor) -&gt; None: pass class ConcreteComponentA(Component): &quot;&quot;&quot; Each Concrete Component must implement the `accept` method in such a way that it calls the visitor's method corresponding to the component's class. &quot;&quot;&quot; def accept(self, visitor: Visitor) -&gt; None: &quot;&quot;&quot; Note that we're calling `visitConcreteComponentA`, which matches the current class name. This way we let the visitor know the class of the component it works with. &quot;&quot;&quot; visitor.visit_concrete_component_a(self) def exclusive_method_of_concrete_component_a(self) -&gt; str: &quot;&quot;&quot; Concrete Components may have special methods that don't exist in their base class or interface. The Visitor is still able to use these methods since it's aware of the component's concrete class. &quot;&quot;&quot; return &quot;A&quot; class ConcreteComponentB(Component): &quot;&quot;&quot; Same here: visitConcreteComponentB =&gt; ConcreteComponentB &quot;&quot;&quot; def accept(self, visitor: Visitor): visitor.visit_concrete_component_b(self) def special_method_of_concrete_component_b(self) -&gt; str: return &quot;B&quot; class Visitor(ABC): &quot;&quot;&quot; The Visitor Interface declares a set of visiting methods that correspond to component classes. The signature of a visiting method allows the visitor to identify the exact class of the component that it's dealing with. &quot;&quot;&quot; @abstractmethod def visit_concrete_component_a(self, element: ConcreteComponentA) -&gt; None: pass @abstractmethod def visit_concrete_component_b(self, element: ConcreteComponentB) -&gt; None: pass &quot;&quot;&quot; Concrete Visitors implement several versions of the same algorithm, which can work with all concrete component classes. You can experience the biggest benefit of the Visitor pattern when using it with a complex object structure, such as a Composite tree. In this case, it might be helpful to store some intermediate state of the algorithm while executing visitor's methods over various objects of the structure. &quot;&quot;&quot; class ConcreteVisitor1(Visitor): def visit_concrete_component_a(self, element) -&gt; None: print(f&quot;{element.exclusive_method_of_concrete_component_a()} + ConcreteVisitor1&quot;) def visit_concrete_component_b(self, element) -&gt; None: print(f&quot;{element.special_method_of_concrete_component_b()} + ConcreteVisitor1&quot;) class ConcreteVisitor2(Visitor): def visit_concrete_component_a(self, element) -&gt; None: print(f&quot;{element.exclusive_method_of_concrete_component_a()} + ConcreteVisitor2&quot;) def visit_concrete_component_b(self, element) -&gt; None: print(f&quot;{element.special_method_of_concrete_component_b()} + ConcreteVisitor2&quot;) def client_code(components: List[Component], visitor: Visitor) -&gt; None: &quot;&quot;&quot; The client code can run visitor operations over any set of elements without figuring out their concrete classes. The accept operation directs a call to the appropriate operation in the visitor object. &quot;&quot;&quot; # ... for component in components: component.accept(visitor) # ... if __name__ == &quot;__main__&quot;: components = [ConcreteComponentA(), ConcreteComponentB()] print(&quot;The client code works with all visitors via the base Visitor interface:&quot;) visitor1 = ConcreteVisitor1() client_code(components, visitor1) print(&quot;It allows the same client code to work with different types of visitors:&quot;) visitor2 = ConcreteVisitor2() client_code(components, visitor2) The client code works with all visitors via the base Visitor interface: A + ConcreteVisitor1 B + ConcreteVisitor1 It allows the same client code to work with different types of visitors: A + ConcreteVisitor2 B + ConcreteVisitor2 ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/","content":"Swift Example /// Visitor Design Pattern /// /// Intent: Lets you separate algorithms from the objects on which they operate. import XCTest /// The Component interface declares an `accept` method that should take the /// base visitor interface as an argument. protocol Component { func accept(_ visitor: Visitor) } /// Each Concrete Component must implement the `accept` method in such a way /// that it calls the visitor's method corresponding to the component's class. class ConcreteComponentA: Component { /// Note that we're calling `visitConcreteComponentA`, which matches the /// current class name. This way we let the visitor know the class of the /// component it works with. func accept(_ visitor: Visitor) { visitor.visitConcreteComponentA(element: self) } /// Concrete Components may have special methods that don't exist in their /// base class or interface. The Visitor is still able to use these methods /// since it's aware of the component's concrete class. func exclusiveMethodOfConcreteComponentA() -&gt; String { return &quot;A&quot; } } class ConcreteComponentB: Component { /// Same here: visitConcreteComponentB =&gt; ConcreteComponentB func accept(_ visitor: Visitor) { visitor.visitConcreteComponentB(element: self) } func specialMethodOfConcreteComponentB() -&gt; String { return &quot;B&quot; } } /// The Visitor Interface declares a set of visiting methods that correspond to /// component classes. The signature of a visiting method allows the visitor to /// identify the exact class of the component that it's dealing with. protocol Visitor { func visitConcreteComponentA(element: ConcreteComponentA) func visitConcreteComponentB(element: ConcreteComponentB) } /// Concrete Visitors implement several versions of the same algorithm, which /// can work with all concrete component classes. /// /// You can experience the biggest benefit of the Visitor pattern when using it /// with a complex object structure, such as a Composite tree. In this case, it /// might be helpful to store some intermediate state of the algorithm while /// executing visitor's methods over various objects of the structure. class ConcreteVisitor1: Visitor { func visitConcreteComponentA(element: ConcreteComponentA) { print(element.exclusiveMethodOfConcreteComponentA() + &quot; + ConcreteVisitor1\\n&quot;) } func visitConcreteComponentB(element: ConcreteComponentB) { print(element.specialMethodOfConcreteComponentB() + &quot; + ConcreteVisitor1\\n&quot;) } } class ConcreteVisitor2: Visitor { func visitConcreteComponentA(element: ConcreteComponentA) { print(element.exclusiveMethodOfConcreteComponentA() + &quot; + ConcreteVisitor2\\n&quot;) } func visitConcreteComponentB(element: ConcreteComponentB) { print(element.specialMethodOfConcreteComponentB() + &quot; + ConcreteVisitor2\\n&quot;) } } /// The client code can run visitor operations over any set of elements without /// figuring out their concrete classes. The accept operation directs a call to /// the appropriate operation in the visitor object. class Client { // ... static func clientCode(components: [Component], visitor: Visitor) { // ... components.forEach({ $0.accept(visitor) }) // ... } // ... } /// Let's see how it all works together. class VisitorConceptual: XCTestCase { func test() { let components: [Component] = [ConcreteComponentA(), ConcreteComponentB()] print(&quot;The client code works with all visitors via the base Visitor interface:\\n&quot;) let visitor1 = ConcreteVisitor1() Client.clientCode(components: components, visitor: visitor1) print(&quot;\\nIt allows the same client code to work with different types of visitors:\\n&quot;) let visitor2 = ConcreteVisitor2() Client.clientCode(components: components, visitor: visitor2) } } The client code works with all visitors via the base Visitor interface: A + ConcreteVisitor1 B + ConcreteVisitor1 It allows the same client code to work with different types of visitors: A + ConcreteVisitor2 B + ConcreteVisitor2 ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/example2","content":"Example 2 import Foundation import XCTest protocol Notification: CustomStringConvertible { func accept(visitor: NotificationPolicy) -&gt; Bool } struct Email { let emailOfSender: String var description: String { return &quot;Email&quot; } } struct SMS { let phoneNumberOfSender: String var description: String { return &quot;SMS&quot; } } struct Push { let usernameOfSender: String var description: String { return &quot;Push&quot; } } extension Email: Notification { func accept(visitor: NotificationPolicy) -&gt; Bool { return visitor.isTurnedOn(for: self) } } extension SMS: Notification { func accept(visitor: NotificationPolicy) -&gt; Bool { return visitor.isTurnedOn(for: self) } } extension Push: Notification { func accept(visitor: NotificationPolicy) -&gt; Bool { return visitor.isTurnedOn(for: self) } } protocol NotificationPolicy: CustomStringConvertible { func isTurnedOn(for email: Email) -&gt; Bool func isTurnedOn(for sms: SMS) -&gt; Bool func isTurnedOn(for push: Push) -&gt; Bool } class NightPolicyVisitor: NotificationPolicy { func isTurnedOn(for email: Email) -&gt; Bool { return false } func isTurnedOn(for sms: SMS) -&gt; Bool { return true } func isTurnedOn(for push: Push) -&gt; Bool { return false } var description: String { return &quot;Night Policy Visitor&quot; } } class DefaultPolicyVisitor: NotificationPolicy { func isTurnedOn(for email: Email) -&gt; Bool { return true } func isTurnedOn(for sms: SMS) -&gt; Bool { return true } func isTurnedOn(for push: Push) -&gt; Bool { return true } var description: String { return &quot;Default Policy Visitor&quot; } } class BlackListVisitor: NotificationPolicy { private var bannedEmails = [String]() private var bannedPhones = [String]() private var bannedUsernames = [String]() init(emails: [String], phones: [String], usernames: [String]) { self.bannedEmails = emails self.bannedPhones = phones self.bannedUsernames = usernames } func isTurnedOn(for email: Email) -&gt; Bool { return bannedEmails.contains(email.emailOfSender) } func isTurnedOn(for sms: SMS) -&gt; Bool { return bannedPhones.contains(sms.phoneNumberOfSender) } func isTurnedOn(for push: Push) -&gt; Bool { return bannedUsernames.contains(push.usernameOfSender) } var description: String { return &quot;Black List Visitor&quot; } } class VisitorRealWorld: XCTestCase { func testVisitorRealWorld() { let email = Email(emailOfSender: &quot;some@email.com&quot;) let sms = SMS(phoneNumberOfSender: &quot;+3806700000&quot;) let push = Push(usernameOfSender: &quot;Spammer&quot;) let notifications: [Notification] = [email, sms, push] clientCode(handle: notifications, with: DefaultPolicyVisitor()) clientCode(handle: notifications, with: NightPolicyVisitor()) } } extension VisitorRealWorld { /// Client code traverses notifications with visitors and checks whether a /// notification is in a blacklist and should be shown in accordance with a /// current SilencePolicy func clientCode(handle notifications: [Notification], with policy: NotificationPolicy) { let blackList = createBlackList() print(&quot;\\nClient: Using \\(policy.description) and \\(blackList.description)&quot;) notifications.forEach { item in guard !item.accept(visitor: blackList) else { print(&quot;\\tWARNING: &quot; + item.description + &quot; is in a black list&quot;) return } if item.accept(visitor: policy) { print(&quot;\\t&quot; + item.description + &quot; notification will be shown&quot;) } else { print(&quot;\\t&quot; + item.description + &quot; notification will be silenced&quot;) } } } private func createBlackList() -&gt; BlackListVisitor { return BlackListVisitor(emails: [&quot;banned@email.com&quot;], phones: [&quot;000000000&quot;, &quot;1234325232&quot;], usernames: [&quot;Spammer&quot;]) } } Client: Using Default Policy Visitor and Black List Visitor Email notification will be shown SMS notification will be shown WARNING: Push is in a black list Client: Using Night Policy Visitor and Black List Visitor Email notification will be silenced SMS notification will be shown WARNING: Push is in a black list ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/typescript/","content":"TypeScript Example /** * Visitor Design Pattern * * Intent: Lets you separate algorithms from the objects on which they operate. */ /** * The Component interface declares an `accept` method that should take the base * visitor interface as an argument. */ interface Component { accept(visitor: Visitor): void; } /** * Each Concrete Component must implement the `accept` method in such a way that * it calls the visitor's method corresponding to the component's class. */ class ConcreteComponentA implements Component { /** * Note that we're calling `visitConcreteComponentA`, which matches the * current class name. This way we let the visitor know the class of the * component it works with. */ public accept(visitor: Visitor): void { visitor.visitConcreteComponentA(this); } /** * Concrete Components may have special methods that don't exist in their * base class or interface. The Visitor is still able to use these methods * since it's aware of the component's concrete class. */ public exclusiveMethodOfConcreteComponentA(): string { return &quot;A&quot;; } } class ConcreteComponentB implements Component { /** * Same here: visitConcreteComponentB =&gt; ConcreteComponentB */ public accept(visitor: Visitor): void { visitor.visitConcreteComponentB(this); } public specialMethodOfConcreteComponentB(): string { return &quot;B&quot;; } } /** * The Visitor Interface declares a set of visiting methods that correspond to * component classes. The signature of a visiting method allows the visitor to * identify the exact class of the component that it's dealing with. */ interface Visitor { visitConcreteComponentA(element: ConcreteComponentA): void; visitConcreteComponentB(element: ConcreteComponentB): void; } /** * Concrete Visitors implement several versions of the same algorithm, which can * work with all concrete component classes. * * You can experience the biggest benefit of the Visitor pattern when using it * with a complex object structure, such as a Composite tree. In this case, it * might be helpful to store some intermediate state of the algorithm while * executing visitor's methods over various objects of the structure. */ class ConcreteVisitor1 implements Visitor { public visitConcreteComponentA(element: ConcreteComponentA): void { console.log( `${element.exclusiveMethodOfConcreteComponentA()} + ConcreteVisitor1` ); } public visitConcreteComponentB(element: ConcreteComponentB): void { console.log( `${element.specialMethodOfConcreteComponentB()} + ConcreteVisitor1` ); } } class ConcreteVisitor2 implements Visitor { public visitConcreteComponentA(element: ConcreteComponentA): void { console.log( `${element.exclusiveMethodOfConcreteComponentA()} + ConcreteVisitor2` ); } public visitConcreteComponentB(element: ConcreteComponentB): void { console.log( `${element.specialMethodOfConcreteComponentB()} + ConcreteVisitor2` ); } } /** * The client code can run visitor operations over any set of elements without * figuring out their concrete classes. The accept operation directs a call to * the appropriate operation in the visitor object. */ function clientCode(components: Component[], visitor: Visitor) { // ... for (const component of components) { component.accept(visitor); } // ... } const components = [new ConcreteComponentA(), new ConcreteComponentB()]; console.log( &quot;The client code works with all visitors via the base Visitor interface:&quot; ); const visitor1 = new ConcreteVisitor1(); clientCode(components, visitor1); console.log(&quot;&quot;); console.log( &quot;It allows the same client code to work with different types of visitors:&quot; ); const visitor2 = new ConcreteVisitor2(); clientCode(components, visitor2); The client code works with all visitors via the base Visitor interface: A + ConcreteVisitor1 B + ConcreteVisitor1 It allows the same client code to work with different types of visitors: A + ConcreteVisitor2 B + ConcreteVisitor2 ","keywords":""},{"title":"Creational Patterns","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/","content":"","keywords":""},{"title":"Abstract Factory​","type":1,"pageTitle":"Creational Patterns","url":"docs/interviewPrep/designPatterns/Creational_patterns/#abstract-factory","content":"factory of factoriesProvide an interface for creating families of related or dependent objects without specifying their concrete classesAs long as your code creates objects via this interface, you don't have to worry about creating the wrong variant of a product which doesn't match the products already created by your appDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extentan alternative to PrototypeDesign patterns can address the issue of objects being able to vary tremendously in size and number Abstract Factory: yield objects whose only responsibilities are creating other objects "},{"title":"Builder​","type":1,"pageTitle":"Creational Patterns","url":"docs/interviewPrep/designPatterns/Creational_patterns/#builder","content":"Separate the construction of a complex object from its representationso that the same construction process can create different representationsDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extentDesign patterns can address the issue of objects being able to vary tremendously in size and number Builder patterns: yield objects whose only responsibilities are creating other objects "},{"title":"Factory Method​","type":1,"pageTitle":"Creational Patterns","url":"docs/interviewPrep/designPatterns/Creational_patterns/#factory-method","content":"Define an interface for creating an object, but let subclasses decide which class to instantiateFactory method lets a class defer instantiation to subclassesDeal with relationships between classes &amp; their subclasses (focus on class relationships)relationships are established through inheritance, so they are static-fixed at compile time "},{"title":"Prototype​","type":1,"pageTitle":"Creational Patterns","url":"docs/interviewPrep/designPatterns/Creational_patterns/#prototype","content":"Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototypeDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extentan alternative to Abstract Factory "},{"title":"Singleton​","type":1,"pageTitle":"Creational Patterns","url":"docs/interviewPrep/designPatterns/Creational_patterns/#singleton","content":"Ensure a class only has 1 instance, and provide a global point of access to itDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extent "},{"title":"Abstract Factory","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/","content":"","keywords":""},{"title":"Allows you to create families of related objects without specifying a concrete class for each object​","type":1,"pageTitle":"Abstract Factory","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/#allows-you-to-create-families-of-related-objects-without-specifying-a-concrete-class-for-each-object","content":""},{"title":"Analogy:​","type":1,"pageTitle":"Abstract Factory","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/#analogy","content":"Imagine that you're a clothing designerYou need to build types of clothing e.g.: shirts, sweaters, jeans You also need sizes of clothing e.g.: petites, regular, tall To build these with Abstract Factory pattern create an interface to build the clothing type (e.g.: sweater)create another interface to build the size (e.g.: petites) These 2 interfaces will work together to generate a (petite-sized sweater) "},{"title":"Coding terms:​","type":1,"pageTitle":"Abstract Factory","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/#coding-terms","content":"Imagine you're creating a &quot;submit&quot; button that will be used on windows and mac operating systemsThe button is the same object with the same functionality only with a different class (Windows or Mac) depending on the operating system "},{"title":"Structure​","type":1,"pageTitle":"Abstract Factory","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/#structure","content":" Abstract Products declare interfaces for a set of distinct but related products which make up a product family Concrete Products are various implementations of abstract products, grouped by variants. Each abstract product (chair/sofa) must be implemented in all given variants (Victorian/Modern) The Abstract Factory interface declares a set of methods for creating each of the abstract products Concrete Factories implement creation methods of the abstract factory Each concrete factory corresponds to a specific variant of products and creates only those product variants Although concrete factories instantiate concrete products, signatures of their creation methods must return corresponding abstract products This way the client code that uses a factory doesn’t get coupled to the specific variant of the product it gets from a factoryThe Client can work with any concrete factory/product variant, as long as it communicates with their objects via abstract interfaces "},{"title":"Summary​","type":1,"pageTitle":"Abstract Factory","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/#summary","content":"makes the factory process easier by offering a generic interface to build a family of related objects "},{"title":"When to apply​","type":1,"pageTitle":"Abstract Factory","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/#when-to-apply","content":"We should get benefits from usage of the Abstract Factory while working with various families of related products In this case we are removing the dependency on concrete classes of these products and allowing future extensibility The abstract factory encapsulates the details of object creation But client code can still work with all types of created objects, since their interface is initially defined "},{"title":"Pros and Cons​","type":1,"pageTitle":"Abstract Factory","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/#pros-and-cons","content":"pros\tconsensures compatibility of products\tcode becomes more complicated after introducing lots of new interfaces gets rid of coupling\tafter extending abstract factory interface all concrete factories will need to be updated to implement it extracts the product creation code into one place. (Single responsibility) introducing new variants without breaking existing code. (Open/Closed)\t "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; #include &lt;string&gt; /** * Abstract Factory Design Pattern * * Intent: Lets you produce families of related objects without specifying their * concrete classes. */ /** * Each distinct product of a product family should have a base interface. All * variants of the product must implement this interface. */ class AbstractProductA { public: virtual ~AbstractProductA(){}; virtual std::string UsefulFunctionA() const = 0; }; /** * Concrete Products are created by corresponding Concrete Factories. */ class ConcreteProductA1 : public AbstractProductA { public: std::string UsefulFunctionA() const override { return &quot;The result of the product A1.&quot;; } }; class ConcreteProductA2 : public AbstractProductA { std::string UsefulFunctionA() const override { return &quot;The result of the product A2.&quot;; } }; /** * Here's the the base interface of another product. All products can interact * with each other, but proper interaction is possible only between products of * the same concrete variant. */ class AbstractProductB { /** * Product B is able to do its own thing... */ public: virtual ~AbstractProductB(){}; virtual std::string UsefulFunctionB() const = 0; /** * ...but it also can collaborate with the ProductA. * * The Abstract Factory makes sure that all products it creates are of the * same variant and thus, compatible. */ virtual std::string AnotherUsefulFunctionB(const AbstractProductA &amp;collaborator) const = 0; }; /** * Concrete Products are created by corresponding Concrete Factories. */ class ConcreteProductB1 : public AbstractProductB { public: std::string UsefulFunctionB() const override { return &quot;The result of the product B1.&quot;; } /** * The variant, Product B1, is only able to work correctly with the variant, * Product A1. Nevertheless, it accepts any instance of AbstractProductA as an * argument. */ std::string AnotherUsefulFunctionB(const AbstractProductA &amp;collaborator) const override { const std::string result = collaborator.UsefulFunctionA(); return &quot;The result of the B1 collaborating with ( &quot; + result + &quot; )&quot;; } }; class ConcreteProductB2 : public AbstractProductB { public: std::string UsefulFunctionB() const override { return &quot;The result of the product B2.&quot;; } /** * The variant, Product B2, is only able to work correctly with the variant, * Product A2. Nevertheless, it accepts any instance of AbstractProductA as an * argument. */ std::string AnotherUsefulFunctionB(const AbstractProductA &amp;collaborator) const override { const std::string result = collaborator.UsefulFunctionA(); return &quot;The result of the B2 collaborating with ( &quot; + result + &quot; )&quot;; } }; /** * The Abstract Factory interface declares a set of methods that return * different abstract products. These products are called a family and are * related by a high-level theme or concept. Products of one family are usually * able to collaborate among themselves. A family of products may have several * variants, but the products of one variant are incompatible with products of * another. */ class AbstractFactory { public: virtual AbstractProductA *CreateProductA() const = 0; virtual AbstractProductB *CreateProductB() const = 0; }; /** * Concrete Factories produce a family of products that belong to a single * variant. The factory guarantees that resulting products are compatible. Note * that signatures of the Concrete Factory's methods return an abstract product, * while inside the method a concrete product is instantiated. */ class ConcreteFactory1 : public AbstractFactory { public: AbstractProductA *CreateProductA() const override { return new ConcreteProductA1(); } AbstractProductB *CreateProductB() const override { return new ConcreteProductB1(); } }; /** * Each Concrete Factory has a corresponding product variant. */ class ConcreteFactory2 : public AbstractFactory { public: AbstractProductA *CreateProductA() const override { return new ConcreteProductA2(); } AbstractProductB *CreateProductB() const override { return new ConcreteProductB2(); } }; /** * The client code works with factories and products only through abstract * types: AbstractFactory and AbstractProduct. This lets you pass any factory or * product subclass to the client code without breaking it. */ void ClientCode(const AbstractFactory &amp;factory) { const AbstractProductA *product_a = factory.CreateProductA(); const AbstractProductB *product_b = factory.CreateProductB(); std::cout &lt;&lt; product_b-&gt;UsefulFunctionB() &lt;&lt; &quot;\\n&quot;; std::cout &lt;&lt; product_b-&gt;AnotherUsefulFunctionB(*product_a) &lt;&lt; &quot;\\n&quot;; delete product_a; delete product_b; } int main() { std::cout &lt;&lt; &quot;Client: Testing client code with the first factory type:\\n&quot;; ConcreteFactory1 *f1 = new ConcreteFactory1(); ClientCode(*f1); delete f1; std::cout &lt;&lt; std::endl; std::cout &lt;&lt; &quot;Client: Testing the same client code with the second factory type:\\n&quot;; ConcreteFactory2 *f2 = new ConcreteFactory2(); ClientCode(*f2); delete f2; return 0; } Client: Testing client code with the first factory type: The result of the product B1. The result of the B1 collaborating with the (The result of the product A1.) Client: Testing the same client code with the second factory type: The result of the product B2. The result of the B2 collaborating with the (The result of the product A2.) ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/cSharp/","content":"C# Example // Abstract Factory Design Pattern // // Intent: Lets you produce families of related objects without specifying their // concrete classes. using System; namespace RefactoringGuru.DesignPatterns.AbstractFactory.Conceptual { // The Abstract Factory interface declares a set of methods that return // different abstract products. These products are called a family and are // related by a high-level theme or concept. Products of one family are // usually able to collaborate among themselves. A family of products may // have several variants, but the products of one variant are incompatible // with products of another. public interface IAbstractFactory { IAbstractProductA CreateProductA(); IAbstractProductB CreateProductB(); } // Concrete Factories produce a family of products that belong to a single // variant. The factory guarantees that resulting products are compatible. // Note that signatures of the Concrete Factory's methods return an abstract // product, while inside the method a concrete product is instantiated. class ConcreteFactory1 : IAbstractFactory { public IAbstractProductA CreateProductA() { return new ConcreteProductA1(); } public IAbstractProductB CreateProductB() { return new ConcreteProductB1(); } } // Each Concrete Factory has a corresponding product variant. class ConcreteFactory2 : IAbstractFactory { public IAbstractProductA CreateProductA() { return new ConcreteProductA2(); } public IAbstractProductB CreateProductB() { return new ConcreteProductB2(); } } // Each distinct product of a product family should have a base interface. // All variants of the product must implement this interface. public interface IAbstractProductA { string UsefulFunctionA(); } // Concrete Products are created by corresponding Concrete Factories. class ConcreteProductA1 : IAbstractProductA { public string UsefulFunctionA() { return &quot;The result of the product A1.&quot;; } } class ConcreteProductA2 : IAbstractProductA { public string UsefulFunctionA() { return &quot;The result of the product A2.&quot;; } } // Here's the the base interface of another product. All products can // interact with each other, but proper interaction is possible only between // products of the same concrete variant. public interface IAbstractProductB { // Product B is able to do its own thing... string UsefulFunctionB(); // ...but it also can collaborate with the ProductA. // // The Abstract Factory makes sure that all products it creates are of // the same variant and thus, compatible. string AnotherUsefulFunctionB(IAbstractProductA collaborator); } // Concrete Products are created by corresponding Concrete Factories. class ConcreteProductB1 : IAbstractProductB { public string UsefulFunctionB() { return &quot;The result of the product B1.&quot;; } // The variant, Product B1, is only able to work correctly with the // variant, Product A1. Nevertheless, it accepts any instance of // AbstractProductA as an argument. public string AnotherUsefulFunctionB(IAbstractProductA collaborator) { var result = collaborator.UsefulFunctionA(); return $&quot;The result of the B1 collaborating with the ({result})&quot;; } } class ConcreteProductB2 : IAbstractProductB { public string UsefulFunctionB() { return &quot;The result of the product B2.&quot;; } // The variant, Product B2, is only able to work correctly with the // variant, Product A2. Nevertheless, it accepts any instance of // AbstractProductA as an argument. public string AnotherUsefulFunctionB(IAbstractProductA collaborator) { var result = collaborator.UsefulFunctionA(); return $&quot;The result of the B2 collaborating with the ({result})&quot;; } } // The client code works with factories and products only through abstract // types: AbstractFactory and AbstractProduct. This lets you pass any // factory or product subclass to the client code without breaking it. class Client { public void Main() { // The client code can work with any concrete factory class. Console.WriteLine(&quot;Client: Testing client code with the first factory type...&quot;); ClientMethod(new ConcreteFactory1()); Console.WriteLine(); Console.WriteLine(&quot;Client: Testing the same client code with the second factory type...&quot;); ClientMethod(new ConcreteFactory2()); } public void ClientMethod(IAbstractFactory factory) { var productA = factory.CreateProductA(); var productB = factory.CreateProductB(); Console.WriteLine(productB.UsefulFunctionB()); Console.WriteLine(productB.AnotherUsefulFunctionB(productA)); } } class Program { static void Main(string[] args) { new Client().Main(); } } } Client: Testing client code with the first factory type... The result of the product B1. The result of the B1 collaborating with the (The result of the product A1.) Client: Testing the same client code with the second factory type... The result of the product B2. The result of the B2 collaborating with the (The result of the product A2.) ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/go/","content":"Go Example interfaces iShirt.go package main type iShirt interface { setLogo(logo string) setSize(size int) getLogo() string getSize() int } type shirt struct { logo string size int } func (s *shirt) setLogo(logo string) { s.logo = logo } func (s *shirt) getLogo() string { return s.logo } func (s *shirt) setSize(size int) { s.size = size } func (s *shirt) getSize() int { return s.size } iShoe.go package main type iShoe interface { setLogo(logo string) setSize(size int) getLogo() string getSize() int } type shoe struct { logo string size int } func (s *shoe) setLogo(logo string) { s.logo = logo } func (s *shoe) getLogo() string { return s.logo } func (s *shoe) setSize(size int) { s.size = size } func (s *shoe) getSize() int { return s.size } iSportsFactory.go package main import &quot;fmt&quot; type iSportsFactory interface { makeShoe() iShoe makeShirt() iShirt } func getSportsFactory(brand string) (iSportsFactory, error) { if brand == &quot;adidas&quot; { return &amp;adidas{}, nil } if brand == &quot;nike&quot; { return &amp;nike{}, nil } return nil, fmt.Errorf(&quot;Wrong brand type passed&quot;) } adidas adidas.go package main type adidas struct { } func (a *adidas) makeShoe() iShoe { return &amp;adidasShoe{ shoe: shoe{ logo: &quot;adidas&quot;, size: 14, }, } } func (a *adidas) makeShirt() iShirt { return &amp;adidasShirt{ shirt: shirt{ logo: &quot;adidas&quot;, size: 14, }, } } adidasShirt.go package main type adidasShirt struct { shirt } adidasShoe.go package main type adidasShoe struct { shoe } nike nike.go package main type nike struct { } func (n *nike) makeShoe() iShoe { return &amp;nikeShoe{ shoe: shoe{ logo: &quot;nike&quot;, size: 14, }, } } func (n *nike) makeShirt() iShirt { return &amp;nikeShirt{ shirt: shirt{ logo: &quot;nike&quot;, size: 14, }, } } nikeShirt.go package main type nikeShirt struct { shirt } nikeShoe.go package main type nikeShoe struct { shoe } main.go package main import &quot;fmt&quot; func main() { adidasFactory, _ := getSportsFactory(&quot;adidas&quot;) nikeFactory, _ := getSportsFactory(&quot;nike&quot;) nikeShoe := nikeFactory.makeShoe() nikeShirt := nikeFactory.makeShirt() adidasShoe := adidasFactory.makeShoe() adidasShirt := adidasFactory.makeShirt() printShoeDetails(nikeShoe) printShirtDetails(nikeShirt) printShoeDetails(adidasShoe) printShirtDetails(adidasShirt) } func printShoeDetails(s iShoe) { fmt.Printf(&quot;Logo: %s&quot;, s.getLogo()) fmt.Println() fmt.Printf(&quot;Size: %d&quot;, s.getSize()) fmt.Println() } func printShirtDetails(s iShirt) { fmt.Printf(&quot;Logo: %s&quot;, s.getLogo()) fmt.Println() fmt.Printf(&quot;Size: %d&quot;, s.getSize()) fmt.Println() } Logo: nike Size: 14 Logo: nike Size: 14 Logo: adidas Size: 14 Logo: adidas Size: 14 ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/javascript/","content":"JavaScript Example Factory pattern class Phone { constructor( serialNum, model = &quot;Generic&quot;, processor = &quot;Generic&quot;, RAM = &quot;2 Gb&quot;, width = 67.3, height = 138.4, depth = 7.3, resolution = &quot;750 x 1334&quot; ) { this.serialNum = serialNum; this.configuration = { model, processor, RAM, width, height, depth, resolution, }; } dial(num) { console.log(`Now dialing ${num}...`); } displayConfig() { console.log(this.configuration); } } module.exports = Phone; const Phone = require(&quot;./PhoneInterface&quot;); class iPhoneXR { constructor(serialNum) { return new Phone( serialNum, &quot;iPhone Xr&quot;, &quot;A12 Bionic&quot;, &quot;3 Gb&quot;, 75.7, 150.9, 8.3, &quot;828 x 1792&quot; ); } } module.exports = iPhoneXR; const Phone = require(&quot;./PhoneInterface&quot;); class iPhoneXS { constructor(serialNum) { return new Phone( serialNum, &quot;iPhone Xs&quot;, &quot;A12 Bionic&quot;, &quot;4 Gb&quot;, 70.9, 143.6, 7.7, &quot;1125 x 2436&quot; ); } } module.exports = iPhoneXS; const Phone = require(&quot;./PhoneInterface&quot;); class iPhoneXSMax { constructor(serialNum) { return new Phone( serialNum, &quot;iPhone Xs Max&quot;, &quot;A12 Bionic&quot;, &quot;4 Gb&quot;, 77.4, 157.5, 7.9, &quot;1242 x 2688&quot; ); } } module.exports = iPhoneXSMax; Abstract Factory pattern utilizing the Factories const iPhoneXR = require(&quot;../../Factory/javascript/IphoneXrFactory&quot;); const iPhoneXS = require(&quot;../../Factory/javascript/IphoneXsFactory&quot;); const iPhoneXSMax = require(&quot;../../Factory/javascript/IphoneXsMaxFactory&quot;); class iPhoneFactory { create(type, serialNum) { switch (type) { case &quot;iPhone Xr&quot;: return new iPhoneXR(serialNum); case &quot;iPhone Xs&quot;: return new iPhoneXS(serialNum); case &quot;iPhone Xs Max&quot;: return new iPhoneXSMax(serialNum); default: { console.log(&quot;Unknown iPhone type...&quot;); } } } } module.exports = new iPhoneFactory(); const iPhoneFactory = require(&quot;./IphoneAbstractFactory&quot;); const iPhoneXR = iPhoneFactory.create(&quot;iPhone Xr&quot;, &quot;xr-0001&quot;); const iPhoneXS = iPhoneFactory.create(&quot;iPhone Xs&quot;, &quot;xs-0002&quot;); const iPhoneXSMax = iPhoneFactory.create(&quot;iPhone Xs Max&quot;, &quot;xsmax-0003&quot;); iPhoneXR.displayConfig(); iPhoneXS.displayConfig(); iPhoneXSMax.displayConfig(); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/python/","content":"Python Example &quot;&quot;&quot; Abstract Factory Design Pattern Intent: Lets you produce families of related objects without specifying their concrete classes. &quot;&quot;&quot; from __future__ import annotations from abc import ABC, abstractmethod class AbstractFactory(ABC): &quot;&quot;&quot; The Abstract Factory interface declares a set of methods that return different abstract products. These products are called a family and are related by a high-level theme or concept. Products of one family are usually able to collaborate among themselves. A family of products may have several variants, but the products of one variant are incompatible with products of another. &quot;&quot;&quot; @abstractmethod def create_product_a(self) -&gt; AbstractProductA: pass @abstractmethod def create_product_b(self) -&gt; AbstractProductB: pass class ConcreteFactory1(AbstractFactory): &quot;&quot;&quot; Concrete Factories produce a family of products that belong to a single variant. The factory guarantees that resulting products are compatible. Note that signatures of the Concrete Factory's methods return an abstract product, while inside the method a concrete product is instantiated. &quot;&quot;&quot; def create_product_a(self) -&gt; AbstractProductA: return ConcreteProductA1() def create_product_b(self) -&gt; AbstractProductB: return ConcreteProductB1() class ConcreteFactory2(AbstractFactory): &quot;&quot;&quot; Each Concrete Factory has a corresponding product variant. &quot;&quot;&quot; def create_product_a(self) -&gt; AbstractProductA: return ConcreteProductA2() def create_product_b(self) -&gt; AbstractProductB: return ConcreteProductB2() class AbstractProductA(ABC): &quot;&quot;&quot; Each distinct product of a product family should have a base interface. All variants of the product must implement this interface. &quot;&quot;&quot; @abstractmethod def useful_function_a(self) -&gt; str: pass &quot;&quot;&quot; Concrete Products are created by corresponding Concrete Factories. &quot;&quot;&quot; class ConcreteProductA1(AbstractProductA): def useful_function_a(self) -&gt; str: return &quot;The result of the product A1.&quot; class ConcreteProductA2(AbstractProductA): def useful_function_a(self) -&gt; str: return &quot;The result of the product A2.&quot; class AbstractProductB(ABC): &quot;&quot;&quot; Here's the the base interface of another product. All products can interact with each other, but proper interaction is possible only between products of the same concrete variant. &quot;&quot;&quot; @abstractmethod def useful_function_b(self) -&gt; None: &quot;&quot;&quot; Product B is able to do its own thing... &quot;&quot;&quot; pass @abstractmethod def another_useful_function_b(self, collaborator: AbstractProductA) -&gt; None: &quot;&quot;&quot; ...but it also can collaborate with the ProductA. The Abstract Factory makes sure that all products it creates are of the same variant and thus, compatible. &quot;&quot;&quot; pass &quot;&quot;&quot; Concrete Products are created by corresponding Concrete Factories. &quot;&quot;&quot; class ConcreteProductB1(AbstractProductB): def useful_function_b(self) -&gt; str: return &quot;The result of the product B1.&quot; &quot;&quot;&quot; The variant, Product B1, is only able to work correctly with the variant, Product A1. Nevertheless, it accepts any instance of AbstractProductA as an argument. &quot;&quot;&quot; def another_useful_function_b(self, collaborator: AbstractProductA) -&gt; str: result = collaborator.useful_function_a() return f&quot;The result of the B1 collaborating with the ({result})&quot; class ConcreteProductB2(AbstractProductB): def useful_function_b(self) -&gt; str: return &quot;The result of the product B2.&quot; def another_useful_function_b(self, collaborator: AbstractProductA): &quot;&quot;&quot; The variant, Product B2, is only able to work correctly with the variant, Product A2. Nevertheless, it accepts any instance of AbstractProductA as an argument. &quot;&quot;&quot; result = collaborator.useful_function_a() return f&quot;The result of the B2 collaborating with the ({result})&quot; def client_code(factory: AbstractFactory) -&gt; None: &quot;&quot;&quot; The client code works with factories and products only through abstract types: AbstractFactory and AbstractProduct. This lets you pass any factory or product subclass to the client code without breaking it. &quot;&quot;&quot; product_a = factory.create_product_a() product_b = factory.create_product_b() print(f&quot;{product_b.useful_function_b()}&quot;) print(f&quot;{product_b.another_useful_function_b(product_a)}&quot;, end=&quot;&quot;) if __name__ == &quot;__main__&quot;: &quot;&quot;&quot; The client code can work with any concrete factory class. &quot;&quot;&quot; print(&quot;Client: Testing client code with the first factory type:&quot;) client_code(ConcreteFactory1()) print(&quot;\\n&quot;) print(&quot;Client: Testing the same client code with the second factory type:&quot;) client_code(ConcreteFactory2()) Client: Testing client code with the first factory type: The result of the product B1. The result of the B1 collaborating with the (The result of the product A1.) Client: Testing the same client code with the second factory type: The result of the product B2. The result of the B2 collaborating with the (The result of the product A2.) ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/python/example2","content":"Example 2 class Shape2DInterface: def draw(self): pass class Shape3DInterface: def build(self): pass # === concrete shape classes === class Circle(Shape2DInterface): def draw(self): print(&quot;Circle.draw&quot;) class Square(Shape2DInterface): def draw(self): print(&quot;Square.draw&quot;) class Sphere(Shape3DInterface): def build(self): print(&quot;Sphere.build&quot;) class Cube(Shape3DInterface): def build(self): print(&quot;Cube.build&quot;) # === Abstract shape factory === class ShapeFactoryInterface: def getShape(sides): pass # === Concrete shape factories === class Shape2DFactory(ShapeFactoryInterface): @staticmethod def getShape(sides): if sides == 1: return Circle() if sides == 4: return Square() assert 0, &quot;Bad 2D shape creation: shape not defined for &quot; + sides + &quot;sides&quot; class Shape3DFactory(ShapeFactoryInterface): @staticmethod def getShape(sides): &quot;&quot;&quot;here, sides refers to the number of faces&quot;&quot;&quot; if sides == 1: return Sphere() if sides == 6: return Cube() assert 0, &quot;Bad 3D shape creation: shape not defined for &quot; + sides + &quot;faces&quot; from AbstractFactory import Shape2DFactory, Shape3DFactory s2 = Shape2DFactory() print(s2.getShape(1)) s2.getShape(1).draw() s3 = Shape3DFactory() print(s3.getShape(1)) s3.getShape(1).build() ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/","content":"Swift Example /// Abstract Factory Design Pattern /// /// Intent: Lets you produce families of related objects without specifying /// their concrete classes. import XCTest /// The Abstract Factory protocol declares a set of methods that return /// different abstract products. These products are called a family and are /// related by a high-level theme or concept. Products of one family are usually /// able to collaborate among themselves. A family of products may have several /// variants, but the products of one variant are incompatible with products of /// another. protocol AbstractFactory { func createProductA() -&gt; AbstractProductA func createProductB() -&gt; AbstractProductB } /// Concrete Factories produce a family of products that belong to a single /// variant. The factory guarantees that resulting products are compatible. Note /// that signatures of the Concrete Factory's methods return an abstract /// product, while inside the method a concrete product is instantiated. class ConcreteFactory1: AbstractFactory { func createProductA() -&gt; AbstractProductA { return ConcreteProductA1() } func createProductB() -&gt; AbstractProductB { return ConcreteProductB1() } } /// Each Concrete Factory has a corresponding product variant. class ConcreteFactory2: AbstractFactory { func createProductA() -&gt; AbstractProductA { return ConcreteProductA2() } func createProductB() -&gt; AbstractProductB { return ConcreteProductB2() } } /// Each distinct product of a product family should have a base protocol. All /// variants of the product must implement this protocol. protocol AbstractProductA { func usefulFunctionA() -&gt; String } /// Concrete Products are created by corresponding Concrete Factories. class ConcreteProductA1: AbstractProductA { func usefulFunctionA() -&gt; String { return &quot;The result of the product A1.&quot; } } class ConcreteProductA2: AbstractProductA { func usefulFunctionA() -&gt; String { return &quot;The result of the product A2.&quot; } } /// The base protocol of another product. All products can interact with each /// other, but proper interaction is possible only between products of the same /// concrete variant. protocol AbstractProductB { /// Product B is able to do its own thing... func usefulFunctionB() -&gt; String /// ...but it also can collaborate with the ProductA. /// /// The Abstract Factory makes sure that all products it creates are of the /// same variant and thus, compatible. func anotherUsefulFunctionB(collaborator: AbstractProductA) -&gt; String } /// Concrete Products are created by corresponding Concrete Factories. class ConcreteProductB1: AbstractProductB { func usefulFunctionB() -&gt; String { return &quot;The result of the product B1.&quot; } /// This variant, Product B1, is only able to work correctly with the /// variant, Product A1. Nevertheless, it accepts any instance of /// AbstractProductA as an argument. func anotherUsefulFunctionB(collaborator: AbstractProductA) -&gt; String { let result = collaborator.usefulFunctionA() return &quot;The result of the B1 collaborating with the (\\(result))&quot; } } class ConcreteProductB2: AbstractProductB { func usefulFunctionB() -&gt; String { return &quot;The result of the product B2.&quot; } /// This variant, Product B2, is only able to work correctly with the /// variant, Product A2. Nevertheless, it accepts any instance of /// AbstractProductA as an argument. func anotherUsefulFunctionB(collaborator: AbstractProductA) -&gt; String { let result = collaborator.usefulFunctionA() return &quot;The result of the B2 collaborating with the (\\(result))&quot; } } /// The client code works with factories and products only through abstract /// types: AbstractFactory and AbstractProduct. This lets you pass any factory /// or product subclass to the client code without breaking it. class Client { // ... static func someClientCode(factory: AbstractFactory) { let productA = factory.createProductA() let productB = factory.createProductB() print(productB.usefulFunctionB()) print(productB.anotherUsefulFunctionB(collaborator: productA)) } // ... } /// Let's see how it all works together. class AbstractFactoryConceptual: XCTestCase { func testAbstractFactoryConceptual() { /// The client code can work with any concrete factory class. print(&quot;Client: Testing client code with the first factory type:&quot;) Client.someClientCode(factory: ConcreteFactory1()) print(&quot;Client: Testing the same client code with the second factory type:&quot;) Client.someClientCode(factory: ConcreteFactory2()) } } Client: Testing client code with the first factory type: The result of the product B1. The result of the B1 collaborating with the (The result of the product A1.) Client: Testing the same client code with the second factory type: The result of the product B2. The result of the B2 collaborating with the (The result of the product A2.) ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/example2","content":"Example 2 import Foundation import UIKit import XCTest enum AuthType { case login case signUp } protocol AuthViewFactory { static func authView(for type: AuthType) -&gt; AuthView static func authController(for type: AuthType) -&gt; AuthViewController } class StudentAuthViewFactory: AuthViewFactory { static func authView(for type: AuthType) -&gt; AuthView { print(&quot;Student View has been created&quot;) switch type { case .login: return StudentLoginView() case .signUp: return StudentSignUpView() } } static func authController(for type: AuthType) -&gt; AuthViewController { let controller = StudentAuthViewController(contentView: authView(for: type)) print(&quot;Student View Controller has been created&quot;) return controller } } class TeacherAuthViewFactory: AuthViewFactory { static func authView(for type: AuthType) -&gt; AuthView { print(&quot;Teacher View has been created&quot;) switch type { case .login: return TeacherLoginView() case .signUp: return TeacherSignUpView() } } static func authController(for type: AuthType) -&gt; AuthViewController { let controller = TeacherAuthViewController(contentView: authView(for: type)) print(&quot;Teacher View Controller has been created&quot;) return controller } } protocol AuthView { typealias AuthAction = (AuthType) -&gt; () var contentView: UIView { get } var authHandler: AuthAction? { get set } var description: String { get } } class StudentSignUpView: UIView, AuthView { private class StudentSignUpContentView: UIView { /// This view contains a number of features available only during a /// STUDENT authorization. } var contentView: UIView = StudentSignUpContentView() /// The handler will be connected for actions of buttons of this view. var authHandler: AuthView.AuthAction? override var description: String { return &quot;Student-SignUp-View&quot; } } class StudentLoginView: UIView, AuthView { private let emailField = UITextField() private let passwordField = UITextField() private let signUpButton = UIButton() var contentView: UIView { return self } /// The handler will be connected for actions of buttons of this view. var authHandler: AuthView.AuthAction? override var description: String { return &quot;Student-Login-View&quot; } } class TeacherSignUpView: UIView, AuthView { class TeacherSignUpContentView: UIView { /// This view contains a number of features available only during a /// TEACHER authorization. } var contentView: UIView = TeacherSignUpContentView() /// The handler will be connected for actions of buttons of this view. var authHandler: AuthView.AuthAction? override var description: String { return &quot;Teacher-SignUp-View&quot; } } class TeacherLoginView: UIView, AuthView { private let emailField = UITextField() private let passwordField = UITextField() private let loginButton = UIButton() private let forgotPasswordButton = UIButton() var contentView: UIView { return self } /// The handler will be connected for actions of buttons of this view. var authHandler: AuthView.AuthAction? override var description: String { return &quot;Teacher-Login-View&quot; } } class AuthViewController: UIViewController { fileprivate var contentView: AuthView init(contentView: AuthView) { self.contentView = contentView super.init(nibName: nil, bundle: nil) } required convenience init?(coder aDecoder: NSCoder) { return nil } } class StudentAuthViewController: AuthViewController { /// Student-oriented features } class TeacherAuthViewController: AuthViewController { /// Teacher-oriented features } private class ClientCode { private var currentController: AuthViewController? private lazy var navigationController: UINavigationController = { guard let vc = currentController else { return UINavigationController() } return UINavigationController(rootViewController: vc) }() private let factoryType: AuthViewFactory.Type init(factoryType: AuthViewFactory.Type) { self.factoryType = factoryType } /// MARK: - Presentation func presentLogin() { let controller = factoryType.authController(for: .login) navigationController.pushViewController(controller, animated: true) } func presentSignUp() { let controller = factoryType.authController(for: .signUp) navigationController.pushViewController(controller, animated: true) } /// Other methods... } class AbstractFactoryRealWorld: XCTestCase { func testFactoryMethodRealWorld() { #if teacherMode let clientCode = ClientCode(factoryType: TeacherAuthViewFactory.self) #else let clientCode = ClientCode(factoryType: StudentAuthViewFactory.self) #endif /// Present LogIn flow clientCode.presentLogin() print(&quot;Login screen has been presented&quot;) /// Present SignUp flow clientCode.presentSignUp() print(&quot;Sign up screen has been presented&quot;) } } Teacher View has been created Teacher View Controller has been created Login screen has been presented Teacher View has been created Teacher View Controller has been created Sign up screen has been presented ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/typescript/","content":"TypeScript Example /** * Abstract Factory Design Pattern * * Intent: Lets you produce families of related objects without specifying their * concrete classes. */ /** * The Abstract Factory interface declares a set of methods that return * different abstract products. These products are called a family and are * related by a high-level theme or concept. Products of one family are usually * able to collaborate among themselves. A family of products may have several * variants, but the products of one variant are incompatible with products of * another. */ interface AbstractFactory { createProductA(): AbstractProductA; createProductB(): AbstractProductB; } /** * Concrete Factories produce a family of products that belong to a single * variant. The factory guarantees that resulting products are compatible. Note * that signatures of the Concrete Factory's methods return an abstract product, * while inside the method a concrete product is instantiated. */ class ConcreteFactory1 implements AbstractFactory { public createProductA(): AbstractProductA { return new ConcreteProductA1(); } public createProductB(): AbstractProductB { return new ConcreteProductB1(); } } /** * Each Concrete Factory has a corresponding product variant. */ class ConcreteFactory2 implements AbstractFactory { public createProductA(): AbstractProductA { return new ConcreteProductA2(); } public createProductB(): AbstractProductB { return new ConcreteProductB2(); } } /** * Each distinct product of a product family should have a base interface. All * variants of the product must implement this interface. */ interface AbstractProductA { usefulFunctionA(): string; } /** * These Concrete Products are created by corresponding Concrete Factories. */ class ConcreteProductA1 implements AbstractProductA { public usefulFunctionA(): string { return &quot;The result of the product A1.&quot;; } } class ConcreteProductA2 implements AbstractProductA { public usefulFunctionA(): string { return &quot;The result of the product A2.&quot;; } } /** * Here's the the base interface of another product. All products can interact * with each other, but proper interaction is possible only between products of * the same concrete variant. */ interface AbstractProductB { /** * Product B is able to do its own thing... */ usefulFunctionB(): string; /** * ...but it also can collaborate with the ProductA. * * The Abstract Factory makes sure that all products it creates are of the * same variant and thus, compatible. */ anotherUsefulFunctionB(collaborator: AbstractProductA): string; } /** * These Concrete Products are created by corresponding Concrete Factories. */ class ConcreteProductB1 implements AbstractProductB { public usefulFunctionB(): string { return &quot;The result of the product B1.&quot;; } /** * The variant, Product B1, is only able to work correctly with the variant, * Product A1. Nevertheless, it accepts any instance of AbstractProductA as * an argument. */ public anotherUsefulFunctionB(collaborator: AbstractProductA): string { const result = collaborator.usefulFunctionA(); return `The result of the B1 collaborating with the (${result})`; } } class ConcreteProductB2 implements AbstractProductB { public usefulFunctionB(): string { return &quot;The result of the product B2.&quot;; } /** * The variant, Product B2, is only able to work correctly with the variant, * Product A2. Nevertheless, it accepts any instance of AbstractProductA as * an argument. */ public anotherUsefulFunctionB(collaborator: AbstractProductA): string { const result = collaborator.usefulFunctionA(); return `The result of the B2 collaborating with the (${result})`; } } /** * The client code works with factories and products only through abstract * types: AbstractFactory and AbstractProduct. This lets you pass any factory or * product subclass to the client code without breaking it. */ function clientCode(factory: AbstractFactory) { const productA = factory.createProductA(); const productB = factory.createProductB(); console.log(productB.usefulFunctionB()); console.log(productB.anotherUsefulFunctionB(productA)); } /** * The client code can work with any concrete factory class. */ console.log(&quot;Client: Testing client code with the first factory type...&quot;); clientCode(new ConcreteFactory1()); console.log(&quot;&quot;); console.log( &quot;Client: Testing the same client code with the second factory type...&quot; ); clientCode(new ConcreteFactory2()); Client: Testing client code with the first factory type... The result of the product B1. The result of the B1 collaborating with the (The result of the product A1.) Client: Testing the same client code with the second factory type... The result of the product B2. The result of the B2 collaborating with the (The result of the product A2.) ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/typescript/example2","content":"Example 2 interface Door { getDescription(); } class WoodenDoor implements Door { public getDescription() { return &quot;I am a wooden door&quot;; } } class IronDoor implements Door { public getDescription() { return &quot;I am a iron door&quot;; } } interface DoorFittingExpert { getDescription(); } class Welder implements DoorFittingExpert { public getDescription() { return &quot;I can only fit iron doors&quot;; } } class Carpenter implements DoorFittingExpert { public getDescription() { return &quot;I can only fit wooden doors&quot;; } } interface DoorFactory { makeDoor(): Door; makeFittingExpert(): DoorFittingExpert; } class WoodenDoorFactory implements DoorFactory { public makeDoor(): Door { return new WoodenDoor(); } public makeFittingExpert(): DoorFittingExpert { return new Carpenter(); } } class IronDoorFactory implements DoorFactory { public makeDoor(): Door { return new IronDoor(); } public makeFittingExpert(): DoorFittingExpert { return new Welder(); } } ","keywords":""},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; /** * Builder Design Pattern * * Intent: Lets you construct complex objects step by step. The pattern allows * you to produce different types and representations of an object using the * same construction code. */ /** * It makes sense to use the Builder pattern only when your products are quite * complex and require extensive configuration. * * Unlike in other creational patterns, different concrete builders can produce * unrelated products. In other words, results of various builders may not * always follow the same interface. */ class Product1{ public: std::vector&lt;std::string&gt; parts_; void ListParts()const{ std::cout &lt;&lt; &quot;Product parts: &quot;; for (size_t i=0;i&lt;parts_.size();i++){ if(parts_[i]== parts_.back()){ std::cout &lt;&lt; parts_[i]; }else{ std::cout &lt;&lt; parts_[i] &lt;&lt; &quot;, &quot;; } } std::cout &lt;&lt; &quot;\\n\\n&quot;; } }; /** * The Builder interface specifies methods for creating the different parts of * the Product objects. */ class Builder{ public: virtual ~Builder(){} virtual void ProducePartA() const =0; virtual void ProducePartB() const =0; virtual void ProducePartC() const =0; }; /** * The Concrete Builder classes follow the Builder interface and provide * specific implementations of the building steps. Your program may have several * variations of Builders, implemented differently. */ class ConcreteBuilder1 : public Builder{ private: Product1* product; /** * A fresh builder instance should contain a blank product object, which is * used in further assembly. */ public: ConcreteBuilder1(){ this-&gt;Reset(); } ~ConcreteBuilder1(){ delete product; } void Reset(){ this-&gt;product= new Product1(); } /** * All production steps work with the same product instance. */ void ProducePartA()const override{ this-&gt;product-&gt;parts_.push_back(&quot;PartA1&quot;); } void ProducePartB()const override{ this-&gt;product-&gt;parts_.push_back(&quot;PartB1&quot;); } void ProducePartC()const override{ this-&gt;product-&gt;parts_.push_back(&quot;PartC1&quot;); } /** * Concrete Builders are supposed to provide their own methods for * retrieving results. That's because various types of builders may create * entirely different products that don't follow the same interface. * Therefore, such methods cannot be declared in the base Builder interface * (at least in a statically typed programming language). Note that PHP is a * dynamically typed language and this method CAN be in the base interface. * However, we won't declare it there for the sake of clarity. * * Usually, after returning the end result to the client, a builder instance * is expected to be ready to start producing another product. That's why * it's a usual practice to call the reset method at the end of the * `getProduct` method body. However, this behavior is not mandatory, and * you can make your builders wait for an explicit reset call from the * client code before disposing of the previous result. */ /** * Please be careful here with the memory ownership. Once you call * GetProduct the user of this function is responsable to release this * memory. Here could be a better option to use smart pointers to avoid * memory leaks */ Product1* GetProduct() { Product1* result= this-&gt;product; this-&gt;Reset(); return result; } }; /** * The Director is only responsible for executing the building steps in a * particular sequence. It is helpful when producing products according to a * specific order or configuration. Strictly speaking, the Director class is * optional, since the client can control builders directly. */ class Director{ /** * @var Builder */ private: Builder* builder; /** * The Director works with any builder instance that the client code passes * to it. This way, the client code may alter the final type of the newly * assembled product. */ public: void set_builder(Builder* builder){ this-&gt;builder=builder; } /** * The Director can construct several product variations using the same * building steps. */ void BuildMinimalViableProduct(){ this-&gt;builder-&gt;ProducePartA(); } void BuildFullFeaturedProduct(){ this-&gt;builder-&gt;ProducePartA(); this-&gt;builder-&gt;ProducePartB(); this-&gt;builder-&gt;ProducePartC(); } }; /** * The client code creates a builder object, passes it to the director and then * initiates the construction process. The end result is retrieved from the * builder object. */ /** * I used raw pointers for simplicity however you may prefer to use smart * pointers here */ void ClientCode(Director&amp; director) { ConcreteBuilder1* builder = new ConcreteBuilder1(); director.set_builder(builder); std::cout &lt;&lt; &quot;Standard basic product:\\n&quot;; director.BuildMinimalViableProduct(); Product1* p= builder-&gt;GetProduct(); p-&gt;ListParts(); delete p; std::cout &lt;&lt; &quot;Standard full featured product:\\n&quot;; director.BuildFullFeaturedProduct(); p= builder-&gt;GetProduct(); p-&gt;ListParts(); delete p; // Remember, the Builder pattern can be used without a Director class. std::cout &lt;&lt; &quot;Custom product:\\n&quot;; builder-&gt;ProducePartA(); builder-&gt;ProducePartC(); p=builder-&gt;GetProduct(); p-&gt;ListParts(); delete p; delete builder; } int main(){ Director* director= new Director(); ClientCode(*director); delete director; return 0; } Standard basic product: Product parts: PartA1 Standard full featured product: Product parts: PartA1, PartB1, PartC1 Custom product: Product parts: PartA1, PartC1 ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/cSharp/","content":"C# Example // Builder Design Pattern // // Intent: Lets you construct complex objects step by step. The pattern allows // you to produce different types and representations of an object using the // same construction code. using System; using System.Collections.Generic; namespace RefactoringGuru.DesignPatterns.Builder.Conceptual { // The Builder interface specifies methods for creating the different parts // of the Product objects. public interface IBuilder { void BuildPartA(); void BuildPartB(); void BuildPartC(); } // The Concrete Builder classes follow the Builder interface and provide // specific implementations of the building steps. Your program may have // several variations of Builders, implemented differently. public class ConcreteBuilder : IBuilder { private Product _product = new Product(); // A fresh builder instance should contain a blank product object, which // is used in further assembly. public ConcreteBuilder() { this.Reset(); } public void Reset() { this._product = new Product(); } // All production steps work with the same product instance. public void BuildPartA() { this._product.Add(&quot;PartA1&quot;); } public void BuildPartB() { this._product.Add(&quot;PartB1&quot;); } public void BuildPartC() { this._product.Add(&quot;PartC1&quot;); } // Concrete Builders are supposed to provide their own methods for // retrieving results. That's because various types of builders may // create entirely different products that don't follow the same // interface. Therefore, such methods cannot be declared in the base // Builder interface (at least in a statically typed programming // language). // // Usually, after returning the end result to the client, a builder // instance is expected to be ready to start producing another product. // That's why it's a usual practice to call the reset method at the end // of the `GetProduct` method body. However, this behavior is not // mandatory, and you can make your builders wait for an explicit reset // call from the client code before disposing of the previous result. public Product GetProduct() { Product result = this._product; this.Reset(); return result; } } // It makes sense to use the Builder pattern only when your products are // quite complex and require extensive configuration. // // Unlike in other creational patterns, different concrete builders can // produce unrelated products. In other words, results of various builders // may not always follow the same interface. public class Product { private List&lt;object&gt; _parts = new List&lt;object&gt;(); public void Add(string part) { this._parts.Add(part); } public string ListParts() { string str = string.Empty; for (int i = 0; i &lt; this._parts.Count; i++) { str += this._parts[i] + &quot;, &quot;; } str = str.Remove(str.Length - 2); // removing last &quot;,c&quot; return &quot;Product parts: &quot; + str + &quot;\\n&quot;; } } // The Director is only responsible for executing the building steps in a // particular sequence. It is helpful when producing products according to a // specific order or configuration. Strictly speaking, the Director class is // optional, since the client can control builders directly. public class Director { private IBuilder _builder; public IBuilder Builder { set { _builder = value; } } // The Director can construct several product variations using the same // building steps. public void BuildMinimalViableProduct() { this._builder.BuildPartA(); } public void BuildFullFeaturedProduct() { this._builder.BuildPartA(); this._builder.BuildPartB(); this._builder.BuildPartC(); } } class Program { static void Main(string[] args) { // The client code creates a builder object, passes it to the // director and then initiates the construction process. The end // result is retrieved from the builder object. var director = new Director(); var builder = new ConcreteBuilder(); director.Builder = builder; Console.WriteLine(&quot;Standard basic product:&quot;); director.BuildMinimalViableProduct(); Console.WriteLine(builder.GetProduct().ListParts()); Console.WriteLine(&quot;Standard full featured product:&quot;); director.BuildFullFeaturedProduct(); Console.WriteLine(builder.GetProduct().ListParts()); // Remember, the Builder pattern can be used without a Director // class. Console.WriteLine(&quot;Custom product:&quot;); builder.BuildPartA(); builder.BuildPartC(); Console.Write(builder.GetProduct().ListParts()); } } } Standard basic product: Product parts: PartA1 Standard full featured product: Product parts: PartA1, PartB1, PartC1 Custom product: Product parts: PartA1, PartC1 ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/java/","content":"Java Example app/Application.java package refactoring_guru.abstract_factory.example.app; import refactoring_guru.abstract_factory.example.buttons.Button; import refactoring_guru.abstract_factory.example.checkboxes.Checkbox; import refactoring_guru.abstract_factory.example.factories.GUIFactory; /** * Factory users don't care which concrete factory they use since they work with * factories and products through abstract interfaces. */ public class Application { private Button button; private Checkbox checkbox; public Application(GUIFactory factory) { button = factory.createButton(); checkbox = factory.createCheckbox(); } public void paint() { button.paint(); checkbox.paint(); } } buttons buttons/Button.java package refactoring_guru.abstract_factory.example.buttons; /** * Abstract Factory assumes that you have several families of products, * structured into separate class hierarchies (Button/Checkbox). All products of * the same family have the common interface. * * This is the common interface for buttons family. */ public interface Button { void paint(); } buttons/MacOSButton.java package refactoring_guru.abstract_factory.example.buttons; /** * All products families have the same varieties (MacOS/Windows). * * This is a MacOS variant of a button. */ public class MacOSButton implements Button { @Override public void paint() { System.out.println(&quot;You have created MacOSButton.&quot;); } } buttons/WindowsButton.java package refactoring_guru.abstract_factory.example.buttons; /** * All products families have the same varieties (MacOS/Windows). * * This is another variant of a button. */ public class WindowsButton implements Button { @Override public void paint() { System.out.println(&quot;You have created WindowsButton.&quot;); } } checkboxes checkboxes/Checkbox.java package refactoring_guru.abstract_factory.example.checkboxes; /** * Checkboxes is the second product family. It has the same variants as buttons. */ public interface Checkbox { void paint(); } checkboxes/MacOSCheckbox.java package refactoring_guru.abstract_factory.example.checkboxes; /** * All products families have the same varieties (MacOS/Windows). * * This is a variant of a checkbox. */ public class MacOSCheckbox implements Checkbox { @Override public void paint() { System.out.println(&quot;You have created MacOSCheckbox.&quot;); } } checkboxes/WindowsCheckbox.java package refactoring_guru.abstract_factory.example.checkboxes; /** * All products families have the same varieties (MacOS/Windows). * * This is another variant of a checkbox. */ public class WindowsCheckbox implements Checkbox { @Override public void paint() { System.out.println(&quot;You have created WindowsCheckbox.&quot;); } } factories factories/GUIFactory.java package refactoring_guru.abstract_factory.example.factories; import refactoring_guru.abstract_factory.example.buttons.Button; import refactoring_guru.abstract_factory.example.checkboxes.Checkbox; /** * Abstract factory knows about all (abstract) product types. */ public interface GUIFactory { Button createButton(); Checkbox createCheckbox(); } factories/MacOSFactory.java package refactoring_guru.abstract_factory.example.factories; import refactoring_guru.abstract_factory.example.buttons.Button; import refactoring_guru.abstract_factory.example.buttons.MacOSButton; import refactoring_guru.abstract_factory.example.checkboxes.Checkbox; import refactoring_guru.abstract_factory.example.checkboxes.MacOSCheckbox; /** * Each concrete factory extends basic factory and responsible for creating * products of a single variety. */ public class MacOSFactory implements GUIFactory { @Override public Button createButton() { return new MacOSButton(); } @Override public Checkbox createCheckbox() { return new MacOSCheckbox(); } } factories/WindowsFactory.java package refactoring_guru.abstract_factory.example.factories; import refactoring_guru.abstract_factory.example.buttons.Button; import refactoring_guru.abstract_factory.example.buttons.WindowsButton; import refactoring_guru.abstract_factory.example.checkboxes.Checkbox; import refactoring_guru.abstract_factory.example.checkboxes.WindowsCheckbox; /** * Each concrete factory extends basic factory and responsible for creating * products of a single variety. */ public class WindowsFactory implements GUIFactory { @Override public Button createButton() { return new WindowsButton(); } @Override public Checkbox createCheckbox() { return new WindowsCheckbox(); } } Demo.java package refactoring_guru.abstract_factory.example; import refactoring_guru.abstract_factory.example.app.Application; import refactoring_guru.abstract_factory.example.factories.GUIFactory; import refactoring_guru.abstract_factory.example.factories.MacOSFactory; import refactoring_guru.abstract_factory.example.factories.WindowsFactory; /** * Demo class. Everything comes together here. */ public class Demo { /** * Application picks the factory type and creates it in run time (usually at * initialization stage), depending on the configuration or environment * variables. */ private static Application configureApplication() { Application app; GUIFactory factory; String osName = System.getProperty(&quot;os.name&quot;).toLowerCase(); if (osName.contains(&quot;mac&quot;)) { factory = new MacOSFactory(); app = new Application(factory); } else { factory = new WindowsFactory(); app = new Application(factory); } return app; } public static void main(String[] args) { Application app = configureApplication(); app.paint(); } } You create WindowsButton. You created WindowsCheckbox. ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/go/","content":"Go Example package main type director struct { builder iBuilder } func newDirector(b iBuilder) *director { return &amp;director{ builder: b, } } func (d *director) setBuilder(b iBuilder) { d.builder = b } func (d *director) buildHouse() house { d.builder.setDoorType() d.builder.setWindowType() d.builder.setNumFloor() return d.builder.getHouse() } package main type house struct { windowType string doorType string floor int } package main type iBuilder interface { setWindowType() setDoorType() setNumFloor() getHouse() house } func getBuilder(builderType string) iBuilder { if builderType == &quot;normal&quot; { return &amp;normalBuilder{} } if builderType == &quot;igloo&quot; { return &amp;iglooBuilder{} } return nil } package main type iglooBuilder struct { windowType string doorType string floor int } func newIglooBuilder() *iglooBuilder { return &amp;iglooBuilder{} } func (b *iglooBuilder) setWindowType() { b.windowType = &quot;Snow Window&quot; } func (b *iglooBuilder) setDoorType() { b.doorType = &quot;Snow Door&quot; } func (b *iglooBuilder) setNumFloor() { b.floor = 1 } func (b *iglooBuilder) getHouse() house { return house{ doorType: b.doorType, windowType: b.windowType, floor: b.floor, } } package main type normalBuilder struct { windowType string doorType string floor int } func newNormalBuilder() *normalBuilder { return &amp;normalBuilder{} } func (b *normalBuilder) setWindowType() { b.windowType = &quot;Wooden Window&quot; } func (b *normalBuilder) setDoorType() { b.doorType = &quot;Wooden Door&quot; } func (b *normalBuilder) setNumFloor() { b.floor = 2 } func (b *normalBuilder) getHouse() house { return house{ doorType: b.doorType, windowType: b.windowType, floor: b.floor, } } package main import &quot;fmt&quot; func main() { normalBuilder := getBuilder(&quot;normal&quot;) iglooBuilder := getBuilder(&quot;igloo&quot;) director := newDirector(normalBuilder) normalHouse := director.buildHouse() fmt.Printf(&quot;Normal House Door Type: %s\\n&quot;, normalHouse.doorType) fmt.Printf(&quot;Normal House Window Type: %s\\n&quot;, normalHouse.windowType) fmt.Printf(&quot;Normal House Num Floor: %d\\n&quot;, normalHouse.floor) director.setBuilder(iglooBuilder) iglooHouse := director.buildHouse() fmt.Printf(&quot;\\nIgloo House Door Type: %s\\n&quot;, iglooHouse.doorType) fmt.Printf(&quot;Igloo House Window Type: %s\\n&quot;, iglooHouse.windowType) fmt.Printf(&quot;Igloo House Num Floor: %d\\n&quot;, iglooHouse.floor) } Normal House Door Type: Wooden Door Normal House Window Type: Wooden Window Normal House Num Floor: 2 Igloo House Door Type: Snow Door Igloo House Window Type: Snow Window Igloo House Num Floor: 1 ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/javascript/","content":"JavaScript Example function Pizza() { this.pizza = {}; this.setBase = (base) =&gt; (this.pizza.base = base); this.setSauce = (sauce) =&gt; (this.pizza.sauce = sauce); this.setCheese = (cheese) =&gt; (this.pizza.cheese = cheese); this.setToppings = (toppings) =&gt; (this.pizza.toppings = toppings); this.bake = () =&gt; console.log(this.pizza); } module.exports = Pizza; const Pizza = require(&quot;./PizzaBuilder&quot;); const pepperoni = new Pizza(); pepperoni.setBase(&quot;Whole Wheat&quot;); pepperoni.setSauce(&quot;Tomato Basil&quot;); pepperoni.setCheese(&quot;Smoked Mozzarella&quot;); pepperoni.setToppings([&quot;Pepperoni&quot;, &quot;Basil&quot;]); pepperoni.bake(); ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/javascript/example2","content":"Example 2 User const {randomBytes} = require(&quot;crypto&quot;); class User { constructor(name, email, age, photo) { return new Promise((resolve, reject) =&gt; { this.name = name; this.email = email; this.age = age; this.photo = photo; resolve(this._doSignup()); }); } _setPhoto() { console.log(`- New photo ${this.photo} uploaded for ${this.name}`); } _doSignup() { if (this.photo) { this._setPhoto(); } console.log(`- ${this.name} signed up as a new user!`); return randomBytes(12).toString(&quot;hex&quot;); } } module.exports = User; User Preference class UserPref { constructor(userId, nickname, favouriteTopics, isSME, isModerator, isAdmin) { return new Promise((resolve, reject) =&gt; { this.userId = userId; if (nickname) { this._setNickname(nickname); } if (favouriteTopics) { this._favTopics(favouriteTopics); } if (isSME) { this._setSME(isSME); } if (isModerator) { this._isModerator(isModerator); } if (isAdmin) { this._isAdmin(isAdmin); } resolve(true); }); } _setNickname(nickname) { console.log(`- Nickname (${nickname}) set...`); } _favTopics(topics) { console.log(`- User favourite topics (${topics.join(&quot;,&quot;)}) subscribed!`); } _setSME(topics) { if (topics) { console.log(`- User is now an SME for ${topics.join(&quot;,&quot;)}...`); } } _isModerator(opt) { if (opt) { console.log(`- User registered as a Moderator!`); } } _isAdmin() { console.log(&quot;- User is now an Administrator!&quot;); } } module.exports = UserPref; Sign up interfaces const User = require(&quot;./UserClass&quot;); const UserPref = require(&quot;./UserPrefClass&quot;); // normal method class Signup { async create( name, email, age, photo, nickname, favoriteTopics, isSME, isModerator, isAdmin ) { const newUser = await new User(name, email, age, photo); await new UserPref( newUser, nickname, favoriteTopics, isSME, isModerator, isAdmin ); } } // using builder method class Signup2 { async create({ name, email, age, photo, nickname, favoriteTopics, isSME, isModerator, isAdmin, }) { const newUser = await new User(name, email, age, photo); await new UserPref( newUser, nickname, favoriteTopics, isSME, isModerator, isAdmin ); } } module.exports = { SignupNormalMethod: new Signup(), SignupWithBuilderMethod: new Signup2(), }; Sign up Builder const {SignupWithBuilderMethod} = require(&quot;./SignupSingletonInterface&quot;); class SignupBuilder { constructor(name, email, age) { this.name = name; this.email = email; this.age = age; } setNick(name) { this.nickname = name; return this; } setPhoto(photo) { this.photo = photo; return this; } setTopics(topics) { this.favoriteTopics = topics; return this; } setSME(topics) { this.isSME = topics; return this; } setModerator() { this.isModerator = true; return this; } setAdmin() { this.isAdmin = true; return this; } create() { return SignupWithBuilderMethod.create(this); } } module.exports = SignupBuilder; main normal method const {SignupNormalMethod} = require(&quot;./SignupSingletonInterface&quot;); // normal method SignupNormalMethod.create( &quot;John Doe&quot;, &quot;john@email.com&quot;, 25, &quot;johndoe.jpg&quot;, &quot;john_D&quot;, [&quot;JavaScript&quot;, &quot;Node.js&quot;], [&quot;Node.js&quot;], true, false ); using builder method const SignupBuilder = require(&quot;./SignupBuilderClass&quot;); // using builder method // free to rearrange or exclude new SignupBuilder(&quot;John Doe&quot;, &quot;john@email.com&quot;, 25) .setPhoto(&quot;johndoe.jpg&quot;) .setNick(&quot;John_D&quot;) .setTopics([&quot;Node.js&quot;, &quot;JavaScript&quot;]) .setSME([&quot;Node.js&quot;]) .setModerator() .setAdmin() .create(); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/python/","content":"Python Example &quot;&quot;&quot; Builder Design Pattern Intent: Lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code. &quot;&quot;&quot; from __future__ import annotations from abc import ABC, abstractmethod, abstractproperty from typing import Any class Builder(ABC): &quot;&quot;&quot; The Builder interface specifies methods for creating the different parts of the Product objects. &quot;&quot;&quot; @abstractproperty def product(self) -&gt; None: pass @abstractmethod def produce_part_a(self) -&gt; None: pass @abstractmethod def produce_part_b(self) -&gt; None: pass @abstractmethod def produce_part_c(self) -&gt; None: pass class ConcreteBuilder1(Builder): &quot;&quot;&quot; The Concrete Builder classes follow the Builder interface and provide specific implementations of the building steps. Your program may have several variations of Builders, implemented differently. &quot;&quot;&quot; def __init__(self) -&gt; None: &quot;&quot;&quot; A fresh builder instance should contain a blank product object, which is used in further assembly. &quot;&quot;&quot; self.reset() def reset(self) -&gt; None: self._product = Product1() @property def product(self) -&gt; Product1: &quot;&quot;&quot; Concrete Builders are supposed to provide their own methods for retrieving results. That's because various types of builders may create entirely different products that don't follow the same interface. Therefore, such methods cannot be declared in the base Builder interface (at least in a statically typed programming language). Usually, after returning the end result to the client, a builder instance is expected to be ready to start producing another product. That's why it's a usual practice to call the reset method at the end of the `getProduct` method body. However, this behavior is not mandatory, and you can make your builders wait for an explicit reset call from the client code before disposing of the previous result. &quot;&quot;&quot; product = self._product self.reset() return product def produce_part_a(self) -&gt; None: self._product.add(&quot;PartA1&quot;) def produce_part_b(self) -&gt; None: self._product.add(&quot;PartB1&quot;) def produce_part_c(self) -&gt; None: self._product.add(&quot;PartC1&quot;) class Product1(): &quot;&quot;&quot; It makes sense to use the Builder pattern only when your products are quite complex and require extensive configuration. Unlike in other creational patterns, different concrete builders can produce unrelated products. In other words, results of various builders may not always follow the same interface. &quot;&quot;&quot; def __init__(self) -&gt; None: self.parts = [] def add(self, part: Any) -&gt; None: self.parts.append(part) def list_parts(self) -&gt; None: print(f&quot;Product parts: {', '.join(self.parts)}&quot;, end=&quot;&quot;) class Director: &quot;&quot;&quot; The Director is only responsible for executing the building steps in a particular sequence. It is helpful when producing products according to a specific order or configuration. Strictly speaking, the Director class is optional, since the client can control builders directly. &quot;&quot;&quot; def __init__(self) -&gt; None: self._builder = None @property def builder(self) -&gt; Builder: return self._builder @builder.setter def builder(self, builder: Builder) -&gt; None: &quot;&quot;&quot; The Director works with any builder instance that the client code passes to it. This way, the client code may alter the final type of the newly assembled product. &quot;&quot;&quot; self._builder = builder &quot;&quot;&quot; The Director can construct several product variations using the same building steps. &quot;&quot;&quot; def build_minimal_viable_product(self) -&gt; None: self.builder.produce_part_a() def build_full_featured_product(self) -&gt; None: self.builder.produce_part_a() self.builder.produce_part_b() self.builder.produce_part_c() if __name__ == &quot;__main__&quot;: &quot;&quot;&quot; The client code creates a builder object, passes it to the director and then initiates the construction process. The end result is retrieved from the builder object. &quot;&quot;&quot; director = Director() builder = ConcreteBuilder1() director.builder = builder print(&quot;Standard basic product: &quot;) director.build_minimal_viable_product() builder.product.list_parts() print(&quot;\\n&quot;) print(&quot;Standard full featured product: &quot;) director.build_full_featured_product() builder.product.list_parts() print(&quot;\\n&quot;) # Remember, the Builder pattern can be used without a Director class. print(&quot;Custom product: &quot;) builder.produce_part_a() builder.produce_part_b() builder.product.list_parts() Standard basic product: Product parts: PartA1 Standard full featured product: Product parts: PartA1, PartB1, PartC1 Custom product: Product parts: PartA1, PartB1 ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/python/example2","content":"Example 2 class Car: def __init__(self): self.__wheels = list() self.__engine = None self.__body = None def setBody(self, body): self.__body = body def attachWheel(self, wheel): self.__wheels.append(wheel) def setEngine(self, engine): self.__engine = engine def specification(self): print(&quot;body: %s&quot; % self.__body.shape) print(&quot;engine horsepower: %d&quot; % self.__engine.horsepower) print(&quot;tire size: %d\\'&quot; % self.__wheels[0].size) # === Car parts === class Wheel: size = None class Engine: horsepower = None class Body: shape = None class Director: __builder = None def setBuilder(self, builder): self.__builder = builder # The algorithm for assembling a car def getCar(self): car = Car() # First goes the body body = self.__builder.getBody() car.setBody(body) # Then engine engine = self.__builder.getEngine() car.setEngine(engine) # And four wheels i = 0 while i &lt; 4: wheel = self.__builder.getWheel() car.attachWheel(wheel) i += 1 return car class BuilderInterface: def getWheel(self): pass def getEngine(self): pass def getBody(self): pass class JeepBuilder(BuilderInterface): def getWheel(self): wheel = Wheel() wheel.size = 22 return wheel def getEngine(self): engine = Engine() engine.horsepower = 400 return engine def getBody(self): body = Body() body.shape = &quot;SUV&quot; return body class NissanBuilder(BuilderInterface): def getWheel(self): wheel = Wheel() wheel.size = 16 return wheel def getEngine(self): engine = Engine() engine.horsepower = 100 return engine def getBody(self): body = Body() body.shape = &quot;hatchback&quot; return body from CarBuilder import JeepBuilder, NissanBuilder, Director d = Director() d.setBuilder(JeepBuilder()) print(d.getCar()) d.getCar().specification() d2 = Director() d2.setBuilder(NissanBuilder()) print(d2.getCar()) d2.getCar().specification() ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/swift/","content":"Swift Example /// Builder Design Pattern /// /// Intent: Lets you construct complex objects step by step. The pattern allows /// you to produce different types and representations of an object using the /// same construction code. import XCTest /// The Builder interface specifies methods for creating the different parts of /// the Product objects. protocol Builder { func producePartA() func producePartB() func producePartC() } /// The Concrete Builder classes follow the Builder interface and provide /// specific implementations of the building steps. Your program may have /// several variations of Builders, implemented differently. class ConcreteBuilder1: Builder { /// A fresh builder instance should contain a blank product object, which is /// used in further assembly. private var product = Product1() func reset() { product = Product1() } /// All production steps work with the same product instance. func producePartA() { product.add(part: &quot;PartA1&quot;) } func producePartB() { product.add(part: &quot;PartB1&quot;) } func producePartC() { product.add(part: &quot;PartC1&quot;) } /// Concrete Builders are supposed to provide their own methods for /// retrieving results. That's because various types of builders may create /// entirely different products that don't follow the same interface. /// Therefore, such methods cannot be declared in the base Builder interface /// (at least in a statically typed programming language). /// /// Usually, after returning the end result to the client, a builder /// instance is expected to be ready to start producing another product. /// That's why it's a usual practice to call the reset method at the end of /// the `getProduct` method body. However, this behavior is not mandatory, /// and you can make your builders wait for an explicit reset call from the /// client code before disposing of the previous result. func retrieveProduct() -&gt; Product1 { let result = self.product reset() return result } } /// The Director is only responsible for executing the building steps in a /// particular sequence. It is helpful when producing products according to a /// specific order or configuration. Strictly speaking, the Director class is /// optional, since the client can control builders directly. class Director { private var builder: Builder? /// The Director works with any builder instance that the client code passes /// to it. This way, the client code may alter the final type of the newly /// assembled product. func update(builder: Builder) { self.builder = builder } /// The Director can construct several product variations using the same /// building steps. func buildMinimalViableProduct() { builder?.producePartA() } func buildFullFeaturedProduct() { builder?.producePartA() builder?.producePartB() builder?.producePartC() } } /// It makes sense to use the Builder pattern only when your products are quite /// complex and require extensive configuration. /// /// Unlike in other creational patterns, different concrete builders can produce /// unrelated products. In other words, results of various builders may not /// always follow the same interface. class Product1 { private var parts = [String]() func add(part: String) { self.parts.append(part) } func listParts() -&gt; String { return &quot;Product parts: &quot; + parts.joined(separator: &quot;, &quot;) + &quot;\\n&quot; } } /// The client code creates a builder object, passes it to the director and then /// initiates the construction process. The end result is retrieved from the /// builder object. class Client { // ... static func someClientCode(director: Director) { let builder = ConcreteBuilder1() director.update(builder: builder) print(&quot;Standard basic product:&quot;) director.buildMinimalViableProduct() print(builder.retrieveProduct().listParts()) print(&quot;Standard full featured product:&quot;) director.buildFullFeaturedProduct() print(builder.retrieveProduct().listParts()) // Remember, the Builder pattern can be used without a Director class. print(&quot;Custom product:&quot;) builder.producePartA() builder.producePartC() print(builder.retrieveProduct().listParts()) } // ... } /// Let's see how it all comes together. class BuilderConceptual: XCTestCase { func testBuilderConceptual() { let director = Director() Client.someClientCode(director: director) } } Standard basic product: Product parts: PartA1 Standard full featured product: Product parts: PartA1, PartB1, PartC1 Custom product: Product parts: PartA1, PartC1 ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/swift/example2","content":"Example 2 import Foundation import XCTest class BaseQueryBuilder&lt;Model: DomainModel&gt; { typealias Predicate = (Model) -&gt; (Bool) func limit(_ limit: Int) -&gt; BaseQueryBuilder&lt;Model&gt; { return self } func filter(_ predicate: @escaping Predicate) -&gt; BaseQueryBuilder&lt;Model&gt; { return self } func fetch() -&gt; [Model] { preconditionFailure(&quot;Should be overridden in subclasses.&quot;) } } class RealmQueryBuilder&lt;Model: DomainModel&gt;: BaseQueryBuilder&lt;Model&gt; { enum Query { case filter(Predicate) case limit(Int) /// ... } fileprivate var operations = [Query]() @discardableResult override func limit(_ limit: Int) -&gt; RealmQueryBuilder&lt;Model&gt; { operations.append(Query.limit(limit)) return self } @discardableResult override func filter(_ predicate: @escaping Predicate) -&gt; RealmQueryBuilder&lt;Model&gt; { operations.append(Query.filter(predicate)) return self } override func fetch() -&gt; [Model] { print(&quot;RealmQueryBuilder: Initializing CoreDataProvider with \\(operations.count) operations:&quot;) return RealmProvider().fetch(operations) } } class CoreDataQueryBuilder&lt;Model: DomainModel&gt;: BaseQueryBuilder&lt;Model&gt; { enum Query { case filter(Predicate) case limit(Int) case includesPropertyValues(Bool) /// ... } fileprivate var operations = [Query]() override func limit(_ limit: Int) -&gt; CoreDataQueryBuilder&lt;Model&gt; { operations.append(Query.limit(limit)) return self } override func filter(_ predicate: @escaping Predicate) -&gt; CoreDataQueryBuilder&lt;Model&gt; { operations.append(Query.filter(predicate)) return self } func includesPropertyValues(_ toggle: Bool) -&gt; CoreDataQueryBuilder&lt;Model&gt; { operations.append(Query.includesPropertyValues(toggle)) return self } override func fetch() -&gt; [Model] { print(&quot;CoreDataQueryBuilder: Initializing CoreDataProvider with \\(operations.count) operations.&quot;) return CoreDataProvider().fetch(operations) } } /// Data Providers contain a logic how to fetch models. Builders accumulate /// operations and then update providers to fetch the data. class RealmProvider { func fetch&lt;Model: DomainModel&gt;(_ operations: [RealmQueryBuilder&lt;Model&gt;.Query]) -&gt; [Model] { print(&quot;RealmProvider: Retrieving data from Realm...&quot;) for item in operations { switch item { case .filter(_): print(&quot;RealmProvider: executing the 'filter' operation.&quot;) /// Use Realm instance to filter results. break case .limit(_): print(&quot;RealmProvider: executing the 'limit' operation.&quot;) /// Use Realm instance to limit results. break } } /// Return results from Realm return [] } } class CoreDataProvider { func fetch&lt;Model: DomainModel&gt;(_ operations: [CoreDataQueryBuilder&lt;Model&gt;.Query]) -&gt; [Model] { /// Create a NSFetchRequest print(&quot;CoreDataProvider: Retrieving data from CoreData...&quot;) for item in operations { switch item { case .filter(_): print(&quot;CoreDataProvider: executing the 'filter' operation.&quot;) /// Set a 'predicate' for a NSFetchRequest. break case .limit(_): print(&quot;CoreDataProvider: executing the 'limit' operation.&quot;) /// Set a 'fetchLimit' for a NSFetchRequest. break case .includesPropertyValues(_): print(&quot;CoreDataProvider: executing the 'includesPropertyValues' operation.&quot;) /// Set an 'includesPropertyValues' for a NSFetchRequest. break } } /// Execute a NSFetchRequest and return results. return [] } } protocol DomainModel { /// The protocol groups domain models to the common interface } private struct User: DomainModel { let id: Int let age: Int let email: String } class BuilderRealWorld: XCTestCase { func testBuilderRealWorld() { print(&quot;Client: Start fetching data from Realm&quot;) clientCode(builder: RealmQueryBuilder&lt;User&gt;()) print() print(&quot;Client: Start fetching data from CoreData&quot;) clientCode(builder: CoreDataQueryBuilder&lt;User&gt;()) } fileprivate func clientCode(builder: BaseQueryBuilder&lt;User&gt;) { let results = builder.filter({ $0.age &lt; 20 }) .limit(1) .fetch() print(&quot;Client: I have fetched: &quot; + String(results.count) + &quot; records.&quot;) } } Client: Start fetching data from Realm RealmQueryBuilder: Initializing CoreDataProvider with 2 operations: RealmProvider: Retrieving data from Realm... RealmProvider: executing the 'filter' operation. RealmProvider: executing the 'limit' operation. Client: I have fetched: 0 records. Client: Start fetching data from CoreData CoreDataQueryBuilder: Initializing CoreDataProvider with 2 operations. CoreDataProvider: Retrieving data from CoreData... CoreDataProvider: executing the 'filter' operation. CoreDataProvider: executing the 'limit' operation. Client: I have fetched: 0 records. ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/typescript/","content":"TypeScript Example /** * Builder Design Pattern * * Intent: Lets you construct complex objects step by step. The pattern allows * you to produce different types and representations of an object using the * same construction code. */ /** * The Builder interface specifies methods for creating the different parts of * the Product objects. */ interface Builder { producePartA(): void; producePartB(): void; producePartC(): void; } /** * The Concrete Builder classes follow the Builder interface and provide * specific implementations of the building steps. Your program may have several * variations of Builders, implemented differently. */ class ConcreteBuilder1 implements Builder { private product: Product1; /** * A fresh builder instance should contain a blank product object, which is * used in further assembly. */ constructor() { this.reset(); } public reset(): void { this.product = new Product1(); } /** * All production steps work with the same product instance. */ public producePartA(): void { this.product.parts.push(&quot;PartA1&quot;); } public producePartB(): void { this.product.parts.push(&quot;PartB1&quot;); } public producePartC(): void { this.product.parts.push(&quot;PartC1&quot;); } /** * Concrete Builders are supposed to provide their own methods for * retrieving results. That's because various types of builders may create * entirely different products that don't follow the same interface. * Therefore, such methods cannot be declared in the base Builder interface * (at least in a statically typed programming language). * * Usually, after returning the end result to the client, a builder instance * is expected to be ready to start producing another product. That's why * it's a usual practice to call the reset method at the end of the * `getProduct` method body. However, this behavior is not mandatory, and * you can make your builders wait for an explicit reset call from the * client code before disposing of the previous result. */ public getProduct(): Product1 { const result = this.product; this.reset(); return result; } } /** * It makes sense to use the Builder pattern only when your products are quite * complex and require extensive configuration. * * Unlike in other creational patterns, different concrete builders can produce * unrelated products. In other words, results of various builders may not * always follow the same interface. */ class Product1 { public parts: string[] = []; public listParts(): void { console.log(`Product parts: ${this.parts.join(&quot;, &quot;)}\\n`); } } /** * The Director is only responsible for executing the building steps in a * particular sequence. It is helpful when producing products according to a * specific order or configuration. Strictly speaking, the Director class is * optional, since the client can control builders directly. */ class Director { private builder: Builder; /** * The Director works with any builder instance that the client code passes * to it. This way, the client code may alter the final type of the newly * assembled product. */ public setBuilder(builder: Builder): void { this.builder = builder; } /** * The Director can construct several product variations using the same * building steps. */ public buildMinimalViableProduct(): void { this.builder.producePartA(); } public buildFullFeaturedProduct(): void { this.builder.producePartA(); this.builder.producePartB(); this.builder.producePartC(); } } /** * The client code creates a builder object, passes it to the director and then * initiates the construction process. The end result is retrieved from the * builder object. */ function clientCode(director: Director) { const builder = new ConcreteBuilder1(); director.setBuilder(builder); console.log(&quot;Standard basic product:&quot;); director.buildMinimalViableProduct(); builder.getProduct().listParts(); console.log(&quot;Standard full featured product:&quot;); director.buildFullFeaturedProduct(); builder.getProduct().listParts(); // Remember, the Builder pattern can be used without a Director class. console.log(&quot;Custom product:&quot;); builder.producePartA(); builder.producePartC(); builder.getProduct().listParts(); } const director = new Director(); clientCode(director); Standard basic product: Product parts: PartA1 Standard full featured product: Product parts: PartA1, PartB1, PartC1 Custom product: Product parts: PartA1, PartC1 ","keywords":""},{"title":"Factory","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/","content":"","keywords":""},{"title":"Analogy​","type":1,"pageTitle":"Factory","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/#analogy","content":"assume a phone in an elementary form has a model name, processor type, amount of RAM, dimensions, screen resolutions a phone factory can manufacture all kinds of phones only need to supply a combination of feature attributes to get the job doneonce a combinations of specs listed as model A, B, and C are available do not need to specify the specs again in conclusion, the factory pattern allows generation of preconfigured custom objects easily without the need to pass in constructor options each time "},{"title":"Structure​","type":1,"pageTitle":"Factory","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/#structure","content":" The Product declares the interface, which is common to all objects that can be produced by the creator and its subclasses. Concrete Products are different implementations of the product interface. The Creator class declares the factory method that returns new product objects. It’s important that the return type of this method matches the product interface.You can declare the factory method as abstract to force all subclasses to implement their own versions of the method.As an alternative, the base factory method can return some default product type.Note, despite its name, product creation is not the primary responsibility of the creator.Usually, the creator class already has some core business logic related to products.The factory method helps to decouple this logic from the concrete product classes.Here is an analogy: a large software development company can have a training department for programmers.However, the primary function of the company as a whole is still writing code, not producing programmers. Concrete Creators override the base factory method so it returns a different type of product. Note that the factory method doesn’t have to create new instances all the time.It can also return existing objects from a cache, an object pool, or another source. "},{"title":"Summary​","type":1,"pageTitle":"Factory","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/#summary","content":"factory pattern provides an interface for constructing pre-configured objectscode is cleaner and resilientpattern is useful when writing packages for public useallows an easy to understand interface to the package functions "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; #include &lt;string&gt; /** * Factory Method Design Pattern * * Intent: Provides an interface for creating objects in a superclass, but * allows subclasses to alter the type of objects that will be created. */ /** * The Product interface declares the operations that all concrete products must * implement. */ class Product { public: virtual ~Product() {} virtual std::string Operation() const = 0; }; /** * Concrete Products provide various implementations of the Product interface. */ class ConcreteProduct1 : public Product { public: std::string Operation() const override { return &quot;{Result of the ConcreteProduct1}&quot;; } }; class ConcreteProduct2 : public Product { public: std::string Operation() const override { return &quot;{Result of the ConcreteProduct2}&quot;; } }; /** * The Creator class declares the factory method that is supposed to return an * object of a Product class. The Creator's subclasses usually provide the * implementation of this method. */ class Creator { /** * Note that the Creator may also provide some default implementation of the * factory method. */ public: virtual ~Creator(){}; virtual Product* FactoryMethod() const = 0; /** * Also note that, despite its name, the Creator's primary responsibility is * not creating products. Usually, it contains some core business logic that * relies on Product objects, returned by the factory method. Subclasses can * indirectly change that business logic by overriding the factory method and * returning a different type of product from it. */ std::string SomeOperation() const { // Call the factory method to create a Product object. Product* product = this-&gt;FactoryMethod(); // Now, use the product. std::string result = &quot;Creator: The same creator's code has just worked with &quot; + product-&gt;Operation(); delete product; return result; } }; /** * Concrete Creators override the factory method in order to change the * resulting product's type. */ class ConcreteCreator1 : public Creator { /** * Note that the signature of the method still uses the abstract product type, * even though the concrete product is actually returned from the method. This * way the Creator can stay independent of concrete product classes. */ public: Product* FactoryMethod() const override { return new ConcreteProduct1(); } }; class ConcreteCreator2 : public Creator { public: Product* FactoryMethod() const override { return new ConcreteProduct2(); } }; /** * The client code works with an instance of a concrete creator, albeit through * its base interface. As long as the client keeps working with the creator via * the base interface, you can pass it any creator's subclass. */ void ClientCode(const Creator&amp; creator) { // ... std::cout &lt;&lt; &quot;Client: I'm not aware of the creator's class, but it still works.\\n&quot; &lt;&lt; creator.SomeOperation() &lt;&lt; std::endl; // ... } /** * The Application picks a creator's type depending on the configuration or * environment. */ int main() { std::cout &lt;&lt; &quot;App: Launched with the ConcreteCreator1.\\n&quot;; Creator* creator = new ConcreteCreator1(); ClientCode(*creator); std::cout &lt;&lt; std::endl; std::cout &lt;&lt; &quot;App: Launched with the ConcreteCreator2.\\n&quot;; Creator* creator2 = new ConcreteCreator2(); ClientCode(*creator2); delete creator; delete creator2; return 0; } App: Launched with the ConcreteCreator1. Client: I'm not aware of the creator's class, but it still works. Creator: The same creator's code has just worked with {Result of the ConcreteProduct1} App: Launched with the ConcreteCreator2. Client: I'm not aware of the creator's class, but it still works. Creator: The same creator's code has just worked with {Result of the ConcreteProduct2} ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/java/","content":"Java Example builders builders/Builder.java package refactoring_guru.builder.example.builders; import refactoring_guru.builder.example.cars.CarType; import refactoring_guru.builder.example.components.Engine; import refactoring_guru.builder.example.components.GPSNavigator; import refactoring_guru.builder.example.components.Transmission; import refactoring_guru.builder.example.components.TripComputer; /** * Builder interface defines all possible ways to configure a product. */ public interface Builder { void setCarType(CarType type); void setSeats(int seats); void setEngine(Engine engine); void setTransmission(Transmission transmission); void setTripComputer(TripComputer tripComputer); void setGPSNavigator(GPSNavigator gpsNavigator); } builders/CarBuilder.java package refactoring_guru.builder.example.builders; import refactoring_guru.builder.example.cars.Car; import refactoring_guru.builder.example.cars.CarType; import refactoring_guru.builder.example.components.Engine; import refactoring_guru.builder.example.components.GPSNavigator; import refactoring_guru.builder.example.components.Transmission; import refactoring_guru.builder.example.components.TripComputer; /** * Concrete builders implement steps defined in the common interface. */ public class CarBuilder implements Builder { private CarType type; private int seats; private Engine engine; private Transmission transmission; private TripComputer tripComputer; private GPSNavigator gpsNavigator; public void setCarType(CarType type) { this.type = type; } @Override public void setSeats(int seats) { this.seats = seats; } @Override public void setEngine(Engine engine) { this.engine = engine; } @Override public void setTransmission(Transmission transmission) { this.transmission = transmission; } @Override public void setTripComputer(TripComputer tripComputer) { this.tripComputer = tripComputer; } @Override public void setGPSNavigator(GPSNavigator gpsNavigator) { this.gpsNavigator = gpsNavigator; } public Car getResult() { return new Car(type, seats, engine, transmission, tripComputer, gpsNavigator); } } builders/CarManualBuilder.java package refactoring_guru.builder.example.builders; import refactoring_guru.builder.example.cars.Manual; import refactoring_guru.builder.example.cars.CarType; import refactoring_guru.builder.example.components.Engine; import refactoring_guru.builder.example.components.GPSNavigator; import refactoring_guru.builder.example.components.Transmission; import refactoring_guru.builder.example.components.TripComputer; /** * Unlike other creational patterns, Builder can construct unrelated products, * which don't have the common interface. * * In this case we build a user manual for a car, using the same steps as we * built a car. This allows to produce manuals for specific car models, * configured with different features. */ public class CarManualBuilder implements Builder{ private CarType type; private int seats; private Engine engine; private Transmission transmission; private TripComputer tripComputer; private GPSNavigator gpsNavigator; @Override public void setCarType(CarType type) { this.type = type; } @Override public void setSeats(int seats) { this.seats = seats; } @Override public void setEngine(Engine engine) { this.engine = engine; } @Override public void setTransmission(Transmission transmission) { this.transmission = transmission; } @Override public void setTripComputer(TripComputer tripComputer) { this.tripComputer = tripComputer; } @Override public void setGPSNavigator(GPSNavigator gpsNavigator) { this.gpsNavigator = gpsNavigator; } public Manual getResult() { return new Manual(type, seats, engine, transmission, tripComputer, gpsNavigator); } } cars cars/Car.java package refactoring_guru.builder.example.cars; import refactoring_guru.builder.example.components.Engine; import refactoring_guru.builder.example.components.GPSNavigator; import refactoring_guru.builder.example.components.Transmission; import refactoring_guru.builder.example.components.TripComputer; /** * Car is a product class. */ public class Car { private final CarType carType; private final int seats; private final Engine engine; private final Transmission transmission; private final TripComputer tripComputer; private final GPSNavigator gpsNavigator; private double fuel = 0; public Car(CarType carType, int seats, Engine engine, Transmission transmission, TripComputer tripComputer, GPSNavigator gpsNavigator) { this.carType = carType; this.seats = seats; this.engine = engine; this.transmission = transmission; this.tripComputer = tripComputer; if (this.tripComputer != null) { this.tripComputer.setCar(this); } this.gpsNavigator = gpsNavigator; } public CarType getCarType() { return carType; } public double getFuel() { return fuel; } public void setFuel(double fuel) { this.fuel = fuel; } public int getSeats() { return seats; } public Engine getEngine() { return engine; } public Transmission getTransmission() { return transmission; } public TripComputer getTripComputer() { return tripComputer; } public GPSNavigator getGpsNavigator() { return gpsNavigator; } } cars/CarType.java package refactoring_guru.builder.example.cars; public enum CarType { CITY_CAR, SPORTS_CAR, SUV } cars/Manual.java package refactoring_guru.builder.example.cars; import refactoring_guru.builder.example.components.Engine; import refactoring_guru.builder.example.components.GPSNavigator; import refactoring_guru.builder.example.components.Transmission; import refactoring_guru.builder.example.components.TripComputer; /** * Car manual is another product. Note that it does not have the same ancestor * as a Car. They are not related. */ public class Manual { private final CarType carType; private final int seats; private final Engine engine; private final Transmission transmission; private final TripComputer tripComputer; private final GPSNavigator gpsNavigator; public Manual(CarType carType, int seats, Engine engine, Transmission transmission, TripComputer tripComputer, GPSNavigator gpsNavigator) { this.carType = carType; this.seats = seats; this.engine = engine; this.transmission = transmission; this.tripComputer = tripComputer; this.gpsNavigator = gpsNavigator; } public String print() { String info = &quot;&quot;; info += &quot;Type of car: &quot; + carType + &quot;\\n&quot;; info += &quot;Count of seats: &quot; + seats + &quot;\\n&quot;; info += &quot;Engine: volume - &quot; + engine.getVolume() + &quot;; mileage - &quot; + engine.getMileage() + &quot;\\n&quot;; info += &quot;Transmission: &quot; + transmission + &quot;\\n&quot;; if (this.tripComputer != null) { info += &quot;Trip Computer: Functional&quot; + &quot;\\n&quot;; } else { info += &quot;Trip Computer: N/A&quot; + &quot;\\n&quot;; } if (this.gpsNavigator != null) { info += &quot;GPS Navigator: Functional&quot; + &quot;\\n&quot;; } else { info += &quot;GPS Navigator: N/A&quot; + &quot;\\n&quot;; } return info; } } components components/Engine.java package refactoring_guru.builder.example.components; /** * Just another feature of a car. */ public class Engine { private final double volume; private double mileage; private boolean started; public Engine(double volume, double mileage) { this.volume = volume; this.mileage = mileage; } public void on() { started = true; } public void off() { started = false; } public boolean isStarted() { return started; } public void go(double mileage) { if (started) { this.mileage += mileage; } else { System.err.println(&quot;Cannot go(), you must start engine first!&quot;); } } public double getVolume() { return volume; } public double getMileage() { return mileage; } } components/GPSNavigator.java package refactoring_guru.builder.example.components; /** * Just another feature of a car. */ public class GPSNavigator { private String route; public GPSNavigator() { this.route = &quot;221b, Baker Street, London to Scotland Yard, 8-10 Broadway, London&quot;; } public GPSNavigator(String manualRoute) { this.route = manualRoute; } public String getRoute() { return route; } } components/Transmission.java package refactoring_guru.builder.example.components; /** * Just another feature of a car. */ public enum Transmission { SINGLE_SPEED, MANUAL, AUTOMATIC, SEMI_AUTOMATIC } components/TripComputer.java package refactoring_guru.builder.example.components; import refactoring_guru.builder.example.cars.Car; /** * Just another feature of a car. */ public class TripComputer { private Car car; public void setCar(Car car) { this.car = car; } public void showFuelLevel() { System.out.println(&quot;Fuel level: &quot; + car.getFuel()); } public void showStatus() { if (this.car.getEngine().isStarted()) { System.out.println(&quot;Car is started&quot;); } else { System.out.println(&quot;Car isn't started&quot;); } } } director director/Director.java package refactoring_guru.builder.example.director; import refactoring_guru.builder.example.builders.Builder; import refactoring_guru.builder.example.cars.CarType; import refactoring_guru.builder.example.components.Engine; import refactoring_guru.builder.example.components.GPSNavigator; import refactoring_guru.builder.example.components.Transmission; import refactoring_guru.builder.example.components.TripComputer; /** * Director defines the order of building steps. It works with a builder object * through common Builder interface. Therefore it may not know what product is * being built. */ public class Director { public void constructSportsCar(Builder builder) { builder.setCarType(CarType.SPORTS_CAR); builder.setSeats(2); builder.setEngine(new Engine(3.0, 0)); builder.setTransmission(Transmission.SEMI_AUTOMATIC); builder.setTripComputer(new TripComputer()); builder.setGPSNavigator(new GPSNavigator()); } public void constructCityCar(Builder builder) { builder.setCarType(CarType.CITY_CAR); builder.setSeats(2); builder.setEngine(new Engine(1.2, 0)); builder.setTransmission(Transmission.AUTOMATIC); builder.setTripComputer(new TripComputer()); builder.setGPSNavigator(new GPSNavigator()); } public void constructSUV(Builder builder) { builder.setCarType(CarType.SUV); builder.setSeats(4); builder.setEngine(new Engine(2.5, 0)); builder.setTransmission(Transmission.MANUAL); builder.setGPSNavigator(new GPSNavigator()); } } Demo.java package refactoring_guru.builder.example; import refactoring_guru.builder.example.builders.CarBuilder; import refactoring_guru.builder.example.builders.CarManualBuilder; import refactoring_guru.builder.example.cars.Car; import refactoring_guru.builder.example.cars.Manual; import refactoring_guru.builder.example.director.Director; /** * Demo class. Everything comes together here. */ public class Demo { public static void main(String[] args) { Director director = new Director(); // Director gets the concrete builder object from the client // (application code). That's because application knows better which // builder to use to get a specific product. CarBuilder builder = new CarBuilder(); director.constructSportsCar(builder); // The final product is often retrieved from a builder object, since // Director is not aware and not dependent on concrete builders and // products. Car car = builder.getResult(); System.out.println(&quot;Car built:\\n&quot; + car.getCarType()); CarManualBuilder manualBuilder = new CarManualBuilder(); // Director may know several building recipes. director.constructSportsCar(manualBuilder); Manual carManual = manualBuilder.getResult(); System.out.println(&quot;\\nCar manual built:\\n&quot; + carManual.print()); } } Car built: SPORTS_CAR Car manual built: Type of car: SPORTS_CAR Count of seats: 2 Engine: volume - 3.0; mileage - 0.0 Transmission: SEMI_AUTOMATIC Trip Computer: Functional GPS Navigator: Functional ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/cSharp/","content":"C# Example // Factory Method Design Pattern // // Intent: Provides an interface for creating objects in a superclass, but // allows subclasses to alter the type of objects that will be created. using System; namespace RefactoringGuru.DesignPatterns.FactoryMethod.Conceptual { // The Creator class declares the factory method that is supposed to return // an object of a Product class. The Creator's subclasses usually provide // the implementation of this method. abstract class Creator { // Note that the Creator may also provide some default implementation of // the factory method. public abstract IProduct FactoryMethod(); // Also note that, despite its name, the Creator's primary // responsibility is not creating products. Usually, it contains some // core business logic that relies on Product objects, returned by the // factory method. Subclasses can indirectly change that business logic // by overriding the factory method and returning a different type of // product from it. public string SomeOperation() { // Call the factory method to create a Product object. var product = FactoryMethod(); // Now, use the product. var result = &quot;Creator: The same creator's code has just worked with &quot; + product.Operation(); return result; } } // Concrete Creators override the factory method in order to change the // resulting product's type. class ConcreteCreator1 : Creator { // Note that the signature of the method still uses the abstract product // type, even though the concrete product is actually returned from the // method. This way the Creator can stay independent of concrete product // classes. public override IProduct FactoryMethod() { return new ConcreteProduct1(); } } class ConcreteCreator2 : Creator { public override IProduct FactoryMethod() { return new ConcreteProduct2(); } } // The Product interface declares the operations that all concrete products // must implement. public interface IProduct { string Operation(); } // Concrete Products provide various implementations of the Product // interface. class ConcreteProduct1 : IProduct { public string Operation() { return &quot;{Result of ConcreteProduct1}&quot;; } } class ConcreteProduct2 : IProduct { public string Operation() { return &quot;{Result of ConcreteProduct2}&quot;; } } class Client { public void Main() { Console.WriteLine(&quot;App: Launched with the ConcreteCreator1.&quot;); ClientCode(new ConcreteCreator1()); Console.WriteLine(&quot;&quot;); Console.WriteLine(&quot;App: Launched with the ConcreteCreator2.&quot;); ClientCode(new ConcreteCreator2()); } // The client code works with an instance of a concrete creator, albeit // through its base interface. As long as the client keeps working with // the creator via the base interface, you can pass it any creator's // subclass. public void ClientCode(Creator creator) { // ... Console.WriteLine(&quot;Client: I'm not aware of the creator's class,&quot; + &quot;but it still works.\\n&quot; + creator.SomeOperation()); // ... } } class Program { static void Main(string[] args) { new Client().Main(); } } } App: Launched with the ConcreteCreator1. Client: I'm not aware of the creator's class, but it still works. Creator: The same creator's code has just worked with {Result of ConcreteProduct1} App: Launched with the ConcreteCreator2. Client: I'm not aware of the creator's class, but it still works. Creator: The same creator's code has just worked with {Result of ConcreteProduct2} ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/go/","content":"Go Example package main type ak47 struct { gun } func newAk47() iGun { return &amp;ak47{ gun: gun{ name: &quot;AK47 gun&quot;, power: 4, }, } } package main type gun struct { name string power int } func (g *gun) setName(name string) { g.name = name } func (g *gun) getName() string { return g.name } func (g *gun) setPower(power int) { g.power = power } func (g *gun) getPower() int { return g.power } package main type iGun interface { setName(name string) setPower(power int) getName() string getPower() int } package main type musket struct { gun } func newMusket() iGun { return &amp;musket{ gun: gun{ name: &quot;Musket gun&quot;, power: 1, }, } } package main import &quot;fmt&quot; func getGun(gunType string) (iGun, error) { if gunType == &quot;ak47&quot; { return newAk47(), nil } if gunType == &quot;musket&quot; { return newMusket(), nil } return nil, fmt.Errorf(&quot;Wrong gun type passed&quot;) } package main import &quot;fmt&quot; func main() { ak47, _ := getGun(&quot;ak47&quot;) musket, _ := getGun(&quot;musket&quot;) printDetails(ak47) printDetails(musket) } func printDetails(g iGun) { fmt.Printf(&quot;Gun: %s&quot;, g.getName()) fmt.Println() fmt.Printf(&quot;Power: %d&quot;, g.getPower()) fmt.Println() } ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/java/","content":"Java Example buttons buttons/Button.java package refactoring_guru.factory_method.example.buttons; /** * Common interface for all buttons. */ public interface Button { void render(); void onClick(); } buttons/HtmlButton.java package refactoring_guru.factory_method.example.buttons; /** * HTML button implementation. */ public class HtmlButton implements Button { public void render() { System.out.println(&quot;&lt;button&gt;Test Button&lt;/button&gt;&quot;); onClick(); } public void onClick() { System.out.println(&quot;Click! Button says - 'Hello World!'&quot;); } } buttons/WindowsButton.java package refactoring_guru.factory_method.example.buttons; import javax.swing.*; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; /** * Windows button implementation. */ public class WindowsButton implements Button { JPanel panel = new JPanel(); JFrame frame = new JFrame(); JButton button; public void render() { frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JLabel label = new JLabel(&quot;Hello World!&quot;); label.setOpaque(true); label.setBackground(new Color(235, 233, 126)); label.setFont(new Font(&quot;Dialog&quot;, Font.BOLD, 44)); label.setHorizontalAlignment(SwingConstants.CENTER); panel.setLayout(new FlowLayout(FlowLayout.CENTER)); frame.getContentPane().add(panel); panel.add(label); onClick(); panel.add(button); frame.setSize(320, 200); frame.setVisible(true); onClick(); } public void onClick() { button = new JButton(&quot;Exit&quot;); button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { frame.setVisible(false); System.exit(0); } }); } } factory factory/Dialog.java package refactoring_guru.factory_method.example.factory; import refactoring_guru.factory_method.example.buttons.Button; /** * Base factory class. Note that &quot;factory&quot; is merely a role for the class. It * should have some core business logic which needs different products to be * created. */ public abstract class Dialog { public void renderWindow() { // ... other code ... Button okButton = createButton(); okButton.render(); } /** * Subclasses will override this method in order to create specific button * objects. */ public abstract Button createButton(); } factory/HtmlDialog.java package refactoring_guru.factory_method.example.factory; import refactoring_guru.factory_method.example.buttons.Button; import refactoring_guru.factory_method.example.buttons.HtmlButton; /** * HTML Dialog will produce HTML buttons. */ public class HtmlDialog extends Dialog { @Override public Button createButton() { return new HtmlButton(); } } factory/WindowsDialog.java package refactoring_guru.factory_method.example.factory; import refactoring_guru.factory_method.example.buttons.Button; import refactoring_guru.factory_method.example.buttons.WindowsButton; /** * Windows Dialog will produce Windows buttons. */ public class WindowsDialog extends Dialog { @Override public Button createButton() { return new WindowsButton(); } } Demo.java package refactoring_guru.factory_method.example; import refactoring_guru.factory_method.example.factory.Dialog; import refactoring_guru.factory_method.example.factory.HtmlDialog; import refactoring_guru.factory_method.example.factory.WindowsDialog; /** * Demo class. Everything comes together here. */ public class Demo { private static Dialog dialog; public static void main(String[] args) { configure(); runBusinessLogic(); } /** * The concrete factory is usually chosen depending on configuration or * environment options. */ static void configure() { if (System.getProperty(&quot;os.name&quot;).equals(&quot;Windows 10&quot;)) { dialog = new WindowsDialog(); } else { dialog = new HtmlDialog(); } } /** * All of the client code should work with factories and products through * abstract interfaces. This way it does not care which factory it works * with and what kind of product it returns. */ static void runBusinessLogic() { dialog.renderWindow(); } } &lt;button&gt;Test Button&lt;/button&gt; Click! Button says - 'Hello World!' ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/javascript/","content":"JavaScript Example class Phone { constructor( serialNum, model = &quot;Generic&quot;, processor = &quot;Generic&quot;, RAM = &quot;2 Gb&quot;, width = 67.3, height = 138.4, depth = 7.3, resolution = &quot;750 x 1334&quot; ) { this.serialNum = serialNum; this.configuration = { model, processor, RAM, width, height, depth, resolution, }; } dial(num) { console.log(`Now dialing ${num}...`); } displayConfig() { console.log(this.configuration); } } module.exports = Phone; const Phone = require(&quot;./PhoneInterface&quot;); class iPhoneXR { constructor(serialNum) { return new Phone( serialNum, &quot;iPhone Xr&quot;, &quot;A12 Bionic&quot;, &quot;3 Gb&quot;, 75.7, 150.9, 8.3, &quot;828 x 1792&quot; ); } } module.exports = iPhoneXR; const Phone = require(&quot;./PhoneInterface&quot;); class iPhoneXS { constructor(serialNum) { return new Phone( serialNum, &quot;iPhone Xs&quot;, &quot;A12 Bionic&quot;, &quot;4 Gb&quot;, 70.9, 143.6, 7.7, &quot;1125 x 2436&quot; ); } } module.exports = iPhoneXS; const Phone = require(&quot;./PhoneInterface&quot;); class iPhoneXSMax { constructor(serialNum) { return new Phone( serialNum, &quot;iPhone Xs Max&quot;, &quot;A12 Bionic&quot;, &quot;4 Gb&quot;, 77.4, 157.5, 7.9, &quot;1242 x 2688&quot; ); } } module.exports = iPhoneXSMax; Method 1 // this is tedious, time consuming and prone to errors // especially if there are more than 1 models to produce const Phone = require(&quot;./PhoneInterface&quot;); const iPhoneXR = new Phone( &quot;XR-0001&quot;, &quot;iphone Xr&quot;, &quot;A12 Bionic&quot;, &quot;3 Gb&quot;, 75.7, 150.9, 8.3, &quot;828 x 1792&quot; ); iPhoneXR.displayConfig(); iPhoneXR.dial(1234567); Method 2 const IPhoneXR = require(&quot;./IphoneXrFactory&quot;); const IPhoneXS = require(&quot;./IphoneXsFactory&quot;); const IPhoneXSMax = require(&quot;./IphoneXsMaxFactory&quot;); const myNewIphoneXr = new IPhoneXR(&quot;XR-0001&quot;); const myNewIphoneXs = new IPhoneXS(&quot;XS-0002&quot;); const myNewIphoneXsMax = new IPhoneXSMax(&quot;XSMAX-0003&quot;); myNewIphoneXr.displayConfig(); myNewIphoneXr.dial(1234567); myNewIphoneXs.displayConfig(); myNewIphoneXs.dial(1234567); myNewIphoneXsMax.displayConfig(); myNewIphoneXsMax.dial(1234567); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/python/","content":"Python Example &quot;&quot;&quot; Factory Method Design Pattern Intent: Provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created. &quot;&quot;&quot; from __future__ import annotations from abc import ABC, abstractmethod class Creator(ABC): &quot;&quot;&quot; The Creator class declares the factory method that is supposed to return an object of a Product class. The Creator's subclasses usually provide the implementation of this method. &quot;&quot;&quot; @abstractmethod def factory_method(self): &quot;&quot;&quot; Note that the Creator may also provide some default implementation of the factory method. &quot;&quot;&quot; pass def some_operation(self) -&gt; str: &quot;&quot;&quot; Also note that, despite its name, the Creator's primary responsibility is not creating products. Usually, it contains some core business logic that relies on Product objects, returned by the factory method. Subclasses can indirectly change that business logic by overriding the factory method and returning a different type of product from it. &quot;&quot;&quot; # Call the factory method to create a Product object. product = self.factory_method() # Now, use the product. result = f&quot;Creator: The same creator's code has just worked with {product.operation()}&quot; return result &quot;&quot;&quot; Concrete Creators override the factory method in order to change the resulting product's type. &quot;&quot;&quot; class ConcreteCreator1(Creator): &quot;&quot;&quot; Note that the signature of the method still uses the abstract product type, even though the concrete product is actually returned from the method. This way the Creator can stay independent of concrete product classes. &quot;&quot;&quot; def factory_method(self) -&gt; Product: return ConcreteProduct1() class ConcreteCreator2(Creator): def factory_method(self) -&gt; Product: return ConcreteProduct2() class Product(ABC): &quot;&quot;&quot; The Product interface declares the operations that all concrete products must implement. &quot;&quot;&quot; @abstractmethod def operation(self) -&gt; str: pass &quot;&quot;&quot; Concrete Products provide various implementations of the Product interface. &quot;&quot;&quot; class ConcreteProduct1(Product): def operation(self) -&gt; str: return &quot;{Result of the ConcreteProduct1}&quot; class ConcreteProduct2(Product): def operation(self) -&gt; str: return &quot;{Result of the ConcreteProduct2}&quot; def client_code(creator: Creator) -&gt; None: &quot;&quot;&quot; The client code works with an instance of a concrete creator, albeit through its base interface. As long as the client keeps working with the creator via the base interface, you can pass it any creator's subclass. &quot;&quot;&quot; print(f&quot;Client: I'm not aware of the creator's class, but it still works.\\n&quot; f&quot;{creator.some_operation()}&quot;, end=&quot;&quot;) if __name__ == &quot;__main__&quot;: print(&quot;App: Launched with the ConcreteCreator1.&quot;) client_code(ConcreteCreator1()) print(&quot;\\n&quot;) print(&quot;App: Launched with the ConcreteCreator2.&quot;) client_code(ConcreteCreator2()) App: Launched with the ConcreteCreator1. Client: I'm not aware of the creator's class, but it still works. Creator: The same creator's code has just worked with {Result of the ConcreteProduct1} App: Launched with the ConcreteCreator2. Client: I'm not aware of the creator's class, but it still works. Creator: The same creator's code has just worked with {Result of the ConcreteProduct2} ","keywords":""},{"title":"Builder","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/","content":"","keywords":""},{"title":"Purpose for using it​","type":1,"pageTitle":"Builder","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/#purpose-for-using-it","content":"some objects are simple and can be created in a single constructor callother objects require a lot of ceremony to createhaving an object with 10 constructor arguments is not productive eg instead of concatenating multiple strings, use a string builder instead instead, opt for piecewise construction eg allow people to construct objects piece by piece builder provides an API for constructing an object step by step "},{"title":"summary: A builder is essentially a separate component, so when piecewise object construction is complicated, provide an API for doing it succinctly​","type":1,"pageTitle":"Builder","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/#summary-a-builder-is-essentially-a-separate-component-so-when-piecewise-object-construction-is-complicated-provide-an-api-for-doing-it-succinctly","content":""},{"title":"Structure​","type":1,"pageTitle":"Builder","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/#structure","content":" The Builder interface declares product construction steps that are common to all types of builders. Concrete Builders provide different implementations of the construction steps. Concrete builders may produce products that don’t follow the common interface. Products are resulting objects. Products constructed by different builders don’t have to belong to the same class hierarchy or interface. The Director class defines the order in which to call construction steps, so you can create and reuse specific configurations of products. The Client must associate one of the builder objects with the director. Usually, it’s done just once, via parameters of the director’s constructor.Then the director uses that builder object for all further construction.However, there’s an alternative approach for when the client passes the builder object to the production method of the director.In this case, you can use a different builder each time you produce something with the director. "},{"title":"Why do we need it​","type":1,"pageTitle":"Builder","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/#why-do-we-need-it","content":"because sometimes you just want a bit of convenience when building up objects especially if those objects are complicated "},{"title":"When to apply​","type":1,"pageTitle":"Builder","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/#when-to-apply","content":"to get rid of a &quot;telescopic constructor&quot; the pattern lets you build objects step by step, using only those steps that you really needAfter implementing the pattern, you do not have to cram dozens of parameters into your constructors anymore to construct complex objects a builder does not expose the unfinished product while running construction stepsThis prevents the client code from fetching an incomplete result "},{"title":"Pros and Cons​","type":1,"pageTitle":"Builder","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/#pros-and-cons","content":"pros\tconsconstructing objects step-by-step, defer construction steps or run steps recursively\tincreases complexity of the code since the pattern requires creating multiple new classes reusing the same construction code when building various representations of products\tclient will be bound to concrete builder classes, since builders interface does not have a method for fetching the result of the construction isolating complex construction code from the business logic of the product\t "},{"title":"example​","type":1,"pageTitle":"Builder","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/#example","content":"the following is an example of not creating a html builder resulting in a tedious method of creating a html "},{"title":"TypeScript​","type":1,"pageTitle":"Builder","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/#typescript","content":"class Car {} interface Builder { reset(); setSeats(n: Number); setEngine(n: String); setTripComputer(n: Boolean); setGPS(n: Boolean); } class CarBuilder implements Builder { private car: Car; constructor() { this.reset(); } reset() { this.car = new Car(); } setSeats() {} setEngine() {} setTripComputer() {} setGPS() {} getProduct(): Car { const product = this.car; this.reset(); return product; } }  class Director { private builder: Builder; setBuilder(b: Builder) { this.builder = b; } makeSportCar(b: Builder = this.builder) { b.reset(); b.setSeats(2); b.setEngine(&quot;V12&quot;); b.setTripComputer(true); b.setGPS(true); } } const director = new Director(); const builder = new CarBuilder(); director.makeSportCar(builder);  "},{"title":"C#​","type":1,"pageTitle":"Builder","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/#c","content":"Not using a html builder public class Program { public static void Main() { string hello = &quot;hello&quot;; // StringBuilder is a type of builder to build strings System.Text.StringBuilder sb = new System.Text.StringBuilder(); sb.Append(&quot;&lt;p&gt;&quot;); sb.Append(hello); sb.Append(&quot;&lt;/p&gt;&quot;); System.Console.WriteLine(sb); string[] words = new[] {&quot;Hello&quot;, &quot;World&quot;}; sb.Clear(); sb.Append(&quot;&lt;ul&gt;&quot;); foreach (string word in words) sb.AppendFormat($&quot;&lt;li&gt;{word}&lt;/li&gt;&quot;); sb.Append(&quot;&lt;/ul&gt;&quot;); System.Console.WriteLine(sb); /* &lt;p&gt;hello&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Hello&lt;/li&gt;&lt;li&gt;World&lt;/li&gt;&lt;/ul&gt; */ } }  Creating a html builder using System.Collections.Generic; public class HtmlElement { public string Name, Text; public List&lt;HtmlElement&gt; Elements = new List&lt;HtmlElement&gt;(); private const int indentSize = 2; public HtmlElement() { } public HtmlElement(string name, string text) { Name = name ?? throw new System.ArgumentNullException(paramName: nameof(name)); Text = text ?? throw new System.ArgumentNullException(paramName: nameof(text)); } private string ToStringImpl(int indent) { System.Text.StringBuilder sb = new System.Text.StringBuilder(); string i = new string(' ', indentSize * indent); sb.AppendLine($&quot;{i}&lt;{Name}&gt;&quot;); if (!string.IsNullOrWhiteSpace(Text)) { sb.Append(new string(' ', indentSize * (indent + 1))); sb.AppendLine(Text); } foreach (var e in Elements) { sb.Append(e.ToStringImpl(indent + 1)); } sb.AppendLine($&quot;{i}&lt;/{Name}&gt;&quot;); return sb.ToString(); } public override string ToString() { return ToStringImpl(0); } } public class HtmlBuilder { private readonly string rootName; HtmlElement root = new HtmlElement(); public HtmlBuilder(string rootName) { this.rootName = rootName; root.Name = rootName; } public void AddChild(string childName, string childText) { HtmlElement e = new HtmlElement(childName, childText); root.Elements.Add(e); } public override string ToString() { return root.ToString(); } public void Clear() { root = new HtmlElement{Name = rootName}; } } public class Program { public static void Main() { HtmlBuilder builder = new HtmlBuilder(&quot;ul&quot;); builder.AddChild(&quot;li&quot;, &quot;hello&quot;); builder.AddChild(&quot;li&quot;, &quot;world&quot;); System.Console.WriteLine(builder.ToString()); /* &lt;ul&gt; &lt;li&gt; hello &lt;/li&gt; &lt;li&gt; world &lt;/li&gt; &lt;/ul&gt; */ } }  Fluent builder enable chaining of methods using System.Collections.Generic; public class HtmlElement { public string Name, Text; public List&lt;HtmlElement&gt; Elements = new List&lt;HtmlElement&gt;(); private const int indentSize = 2; public HtmlElement() { } public HtmlElement(string name, string text) { Name = name ?? throw new System.ArgumentNullException(paramName: nameof(name)); Text = text ?? throw new System.ArgumentNullException(paramName: nameof(text)); } private string ToStringImpl(int indent) { System.Text.StringBuilder sb = new System.Text.StringBuilder(); string i = new string(' ', indentSize * indent); sb.AppendLine($&quot;{i}&lt;{Name}&gt;&quot;); if (!string.IsNullOrWhiteSpace(Text)) { sb.Append(new string(' ', indentSize * (indent + 1))); sb.AppendLine(Text); } foreach (var e in Elements) { sb.Append(e.ToStringImpl(indent + 1)); } sb.AppendLine($&quot;{i}&lt;/{Name}&gt;&quot;); return sb.ToString(); } public override string ToString() { return ToStringImpl(0); } } public class HtmlBuilder { private readonly string rootName; HtmlElement root = new HtmlElement(); public HtmlBuilder(string rootName) { this.rootName = rootName; root.Name = rootName; } // change void to HtmlBuilder to return this object public HtmlBuilder AddChild(string childName, string childText) { HtmlElement e = new HtmlElement(childName, childText); root.Elements.Add(e); return this; } public override string ToString() { return root.ToString(); } public void Clear() { root = new HtmlElement{Name = rootName}; } } public class Program { public static void Main() { HtmlBuilder builder = new HtmlBuilder(&quot;ul&quot;); builder.AddChild(&quot;li&quot;, &quot;hello&quot;).AddChild(&quot;li&quot;, &quot;world&quot;); System.Console.WriteLine(builder.ToString()); } }  "},{"title":"Fluent Builder inheritance with recursive generics​","type":1,"pageTitle":"Builder","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/#fluent-builder-inheritance-with-recursive-generics","content":"builders inherit from other builders will be problematic if used fluent interface approach using System; using System.Collections.Generic; public class Person { public string Name; public string Position; public override string ToString() { return $&quot;{nameof(Name)}: {Name}, {nameof(Position)}: {Position}&quot;; } } public class PersonInfoBuilder { protected Person person = new Person(); public PersonInfoBuilder Called(string name) { person.Name = name; return this; } } public class PersonJobBuilder : PersonInfoBuilder { public PersonJobBuilder WorksAsA(string position) { person.Position = position; return this; } } internal class Program { public static void Main(string[] args) { var builder = new PersonJobBuilder(); builder.Called(&quot;Terence&quot;).WorkAsA // can't call WorkAsA method // The reason why it's not working is because when you call the Called method, you return a PersonInfoBuilder // PersonInfoBuilder doesn't know anything about WorkAsA method because it's not part of its inheritance hierarchy // PersonInfoBuilder just gives you an interface to the PersonInfoBuilder // Therefore the problem with inheritance of fluid interfaces is that you are not allowed to use the containing type as the return type // This makes no sense because if you were to do this, eventually as soon as someone calls the Called method, you are degrading your builder from a PersonJobBuilder to a PersonInfoBuilder } }  1 way to get to get fluent interfaces to inherit is to use recursive generics approach eg. class Foo : Bar\\&lt;Foo&gt; using System; using System.Collections.Generic; public class Person { public string Name; public string Position; // use to expose own builder // can try to prevent accessibility from outside, but is difficult to control effectively // therefore, can make the builder internally and give it an internal constructor // but cannot make it private as it is already being exposed through the api public class Builder : PersonJobBuilder&lt;Builder&gt; { } // whenever a new person is constructed, a new builder will be given public static Builder New =&gt; new Builder(); public override string ToString() { return $&quot;{nameof(Name)}: {Name}, {nameof(Position)}: {Position}&quot;; } } public abstract class PersonBuilder { protected Person person = new Person(); public Person Build() { return person; } } // class Foo : Bar&lt;Foo&gt; public class PersonInfoBuilder&lt;SELF&gt; : PersonBuilder where SELF : PersonInfoBuilder&lt;SELF&gt; // this is used to restrict SELF, and not int, string, etc. { public SELF Called(string name) { person.Name = name; return (SELF) this; // need to cast (SELF) to work } } // this class cannot be initialized directly as there will be type issue at SELF (eg. new PersonJobBuilder&lt;???&gt;) public class PersonJobBuilder&lt;SELF&gt; : PersonInfoBuilder&lt;PersonJobBuilder&lt;SELF&gt;&gt; where SELF : PersonJobBuilder&lt;SELF&gt; // this is used to restrict SELF, and not int, string, etc. { public SELF WorksAsA(string position) { person.Position = position; return (SELF) this; // need to cast (SELF) to work } } internal class Program { public static void Main(string[] args) { var me = Person.New.Called(&quot;Terence&quot;).WorksAsA(&quot;software engineer&quot;).Build(); Console.WriteLine(me); // Name: Terence, Position: software engineer } }  "},{"title":"Functional Builder​","type":1,"pageTitle":"Builder","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/#functional-builder","content":"functional programming style using System; using System.Collections.Generic; public class Person { public string Name, Position; } public class PersonBuilder { private string Name, Position; public readonly List&lt;Action&lt;Person&gt;&gt; Actions = new List&lt;Action&lt;Person&gt;&gt;(); public PersonBuilder Called(string name) { Actions.Add(p =&gt; { p.Name = name; }); return this; } public Person Build() { var p = new Person(); Actions.ForEach(a =&gt; a(p)); Name = p.Name; Position = p.Position; return p; } public override string ToString() { return $&quot;{nameof(Name)}: {Name}, {nameof(Position)}: {Position}&quot;; } } public static class PersonBuilderExtensions { public static PersonBuilder WorkAsA(this PersonBuilder builder, string position) { builder.Actions.Add(p =&gt; { p.Position = position; }); return builder; } } class Program { public static void Main(string[] args) { var pb = new PersonBuilder(); pb.Called(&quot;Terence&quot;).WorkAsA(&quot;software engineer&quot;).Build(); Console.WriteLine(pb); // Name: Terence, Position: software engineer } }  "},{"title":"Faceted Builder​","type":1,"pageTitle":"Builder","url":"docs/interviewPrep/designPatterns/Creational_patterns/Builder/#faceted-builder","content":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/python/example2","content":"Example 2 class ShapeInterface: def draw(self): pass class Circle(ShapeInterface): def draw(self): print(&quot;Circle.draw&quot;) class Square(ShapeInterface): def draw(self): print(&quot;Square.draw&quot;) class ShapeFactory: @staticmethod def getShape(type): if type == 'Cirle': return Circle() if type == 'Square': return Square() assert 0, &quot;Could not find shape &quot; + type from Factory import ShapeFactory F = ShapeFactory() s = F.getShape(&quot;Square&quot;) print(s) s.draw() ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/swift/","content":"Swift Example /// Factory Method Design Pattern /// /// Intent: Provides an interface for creating objects in a superclass, but /// allows subclasses to alter the type of objects that will be created. import XCTest /// The Creator protocol declares the factory method that's supposed to return a /// new object of a Product class. The Creator's subclasses usually provide the /// implementation of this method. protocol Creator { /// Note that the Creator may also provide some default implementation of /// the factory method. func factoryMethod() -&gt; Product /// Also note that, despite its name, the Creator's primary responsibility /// is not creating products. Usually, it contains some core business logic /// that relies on Product objects, returned by the factory method. /// Subclasses can indirectly change that business logic by overriding the /// factory method and returning a different type of product from it. func someOperation() -&gt; String } /// This extension implements the default behavior of the Creator. This behavior /// can be overridden in subclasses. extension Creator { func someOperation() -&gt; String { // Call the factory method to create a Product object. let product = factoryMethod() // Now, use the product. return &quot;Creator: The same creator's code has just worked with &quot; + product.operation() } } /// Concrete Creators override the factory method in order to change the /// resulting product's type. class ConcreteCreator1: Creator { /// Note that the signature of the method still uses the abstract product /// type, even though the concrete product is actually returned from the /// method. This way the Creator can stay independent of concrete product /// classes. public func factoryMethod() -&gt; Product { return ConcreteProduct1() } } class ConcreteCreator2: Creator { public func factoryMethod() -&gt; Product { return ConcreteProduct2() } } /// The Product protocol declares the operations that all concrete products must /// implement. protocol Product { func operation() -&gt; String } /// Concrete Products provide various implementations of the Product protocol. class ConcreteProduct1: Product { func operation() -&gt; String { return &quot;{Result of the ConcreteProduct1}&quot; } } class ConcreteProduct2: Product { func operation() -&gt; String { return &quot;{Result of the ConcreteProduct2}&quot; } } /// The client code works with an instance of a concrete creator, albeit through /// its base protocol. As long as the client keeps working with the creator via /// the base protocol, you can pass it any creator's subclass. class Client { // ... static func someClientCode(creator: Creator) { print(&quot;Client: I'm not aware of the creator's class, but it still works.\\n&quot; + creator.someOperation()) } // ... } /// Let's see how it all works together. class FactoryMethodConceptual: XCTestCase { func testFactoryMethodConceptual() { /// The Application picks a creator's type depending on the /// configuration or environment. print(&quot;App: Launched with the ConcreteCreator1.&quot;) Client.someClientCode(creator: ConcreteCreator1()) print(&quot;\\nApp: Launched with the ConcreteCreator2.&quot;) Client.someClientCode(creator: ConcreteCreator2()) } } App: Launched with the ConcreteCreator1. Client: I'm not aware of the creator's class, but it still works. Creator: The same creator's code has just worked with {Result of the ConcreteProduct1} App: Launched with the ConcreteCreator2. Client: I'm not aware of the creator's class, but it still works. Creator: The same creator's code has just worked with {Result of the ConcreteProduct2} ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/swift/example2","content":"Example 2 import XCTest class FactoryMethodRealWorld: XCTestCase { func testFactoryMethodRealWorld() { let info = &quot;Very important info of the presentation&quot; let clientCode = ClientCode() /// Present info over WiFi clientCode.present(info: info, with: WifiFactory()) /// Present info over Bluetooth clientCode.present(info: info, with: BluetoothFactory()) } } protocol ProjectorFactory { func createProjector() -&gt; Projector func syncedProjector(with projector: Projector) -&gt; Projector } extension ProjectorFactory { /// Base implementation of ProjectorFactory func syncedProjector(with projector: Projector) -&gt; Projector { /// Every instance creates an own projector let newProjector = createProjector() /// sync projectors newProjector.sync(with: projector) return newProjector } } class WifiFactory: ProjectorFactory { func createProjector() -&gt; Projector { return WifiProjector() } } class BluetoothFactory: ProjectorFactory { func createProjector() -&gt; Projector { return BluetoothProjector() } } protocol Projector { /// Abstract projector interface var currentPage: Int { get } func present(info: String) func sync(with projector: Projector) func update(with page: Int) } extension Projector { /// Base implementation of Projector methods func sync(with projector: Projector) { projector.update(with: currentPage) } } class WifiProjector: Projector { var currentPage = 0 func present(info: String) { print(&quot;Info is presented over Wifi: \\(info)&quot;) } func update(with page: Int) { /// ... scroll page via WiFi connection /// ... currentPage = page } } class BluetoothProjector: Projector { var currentPage = 0 func present(info: String) { print(&quot;Info is presented over Bluetooth: \\(info)&quot;) } func update(with page: Int) { /// ... scroll page via Bluetooth connection /// ... currentPage = page } } private class ClientCode { private var currentProjector: Projector? func present(info: String, with factory: ProjectorFactory) { /// Check wheater a client code already present smth... guard let projector = currentProjector else { /// 'currentProjector' variable is nil. Create a new projector and /// start presentation. let projector = factory.createProjector() projector.present(info: info) self.currentProjector = projector return } /// Client code already has a projector. Let's sync pages of the old /// projector with a new one. self.currentProjector = factory.syncedProjector(with: projector) self.currentProjector?.present(info: info) } } Info is presented over Wifi: Very important info of the presentation Info is presented over Bluetooth: Very important info of the presentation ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Factory/typescript/","content":"TypeScript Example /** * Factory Method Design Pattern * * Intent: Provides an interface for creating objects in a superclass, but * allows subclasses to alter the type of objects that will be created. */ /** * The Creator class declares the factory method that is supposed to return an * object of a Product class. The Creator's subclasses usually provide the * implementation of this method. */ abstract class Creator { /** * Note that the Creator may also provide some default implementation of the * factory method. */ public abstract factoryMethod(): Product; /** * Also note that, despite its name, the Creator's primary responsibility is * not creating products. Usually, it contains some core business logic that * relies on Product objects, returned by the factory method. Subclasses can * indirectly change that business logic by overriding the factory method * and returning a different type of product from it. */ public someOperation(): string { // Call the factory method to create a Product object. const product = this.factoryMethod(); // Now, use the product. return `Creator: The same creator's code has just worked with ${product.operation()}`; } } /** * Concrete Creators override the factory method in order to change the * resulting product's type. */ class ConcreteCreator1 extends Creator { /** * Note that the signature of the method still uses the abstract product * type, even though the concrete product is actually returned from the * method. This way the Creator can stay independent of concrete product * classes. */ public factoryMethod(): Product { return new ConcreteProduct1(); } } class ConcreteCreator2 extends Creator { public factoryMethod(): Product { return new ConcreteProduct2(); } } /** * The Product interface declares the operations that all concrete products must * implement. */ interface Product { operation(): string; } /** * Concrete Products provide various implementations of the Product interface. */ class ConcreteProduct1 implements Product { public operation(): string { return &quot;{Result of the ConcreteProduct1}&quot;; } } class ConcreteProduct2 implements Product { public operation(): string { return &quot;{Result of the ConcreteProduct2}&quot;; } } /** * The client code works with an instance of a concrete creator, albeit through * its base interface. As long as the client keeps working with the creator via * the base interface, you can pass it any creator's subclass. */ function clientCode(creator: Creator) { // ... console.log( &quot;Client: I'm not aware of the creator's class, but it still works.&quot; ); console.log(creator.someOperation()); // ... } /** * The Application picks a creator's type depending on the configuration or * environment. */ console.log(&quot;App: Launched with the ConcreteCreator1.&quot;); clientCode(new ConcreteCreator1()); console.log(&quot;&quot;); console.log(&quot;App: Launched with the ConcreteCreator2.&quot;); clientCode(new ConcreteCreator2()); App: Launched with the ConcreteCreator1. Client: I'm not aware of the creator's class, but it still works. Creator: The same creator's code has just worked with {Result of the ConcreteProduct1} App: Launched with the ConcreteCreator2. Client: I'm not aware of the creator's class, but it still works. Creator: The same creator's code has just worked with {Result of the ConcreteProduct2} ","keywords":""},{"title":"Prototype","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/","content":"","keywords":""},{"title":"Why use​","type":1,"pageTitle":"Prototype","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/#why-use","content":"Might wanna use when creation of an object is costly e.g.: a class which requires some configuration data, maybe for a file or database or streamed over some network this class would be required for initializationif you do not want to pay the cost of having to setup each time, especially if the data does not change often in this case, using of the Prototype pattern to create a simple copy of the objects would be preferred "},{"title":"Structure​","type":1,"pageTitle":"Prototype","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/#structure","content":" The Prototype interface declares the cloning methods. In most cases, it’s a single clone method. The Concrete Prototype class implements the cloning method. In addition to copying the original object’s data to the clone, this method may also handle some edge cases of the cloning process related to cloning linked objects, untangling recursive dependencies, etc. The Client can produce a copy of any object that follows the prototype interface. "},{"title":"Usage example​","type":1,"pageTitle":"Prototype","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/#usage-example","content":"A Builder pattern is used to build complex objects, an example a car this is good if only 1 car is being built, but bad if want to build multiple similar cars because it will be troublesome to set up the director every time by using a prototype class with a clone method, creating copies of cars will be easier "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;unordered_map&gt; using std::string; // Prototype Design Pattern // // Intent: Lets you copy existing objects without making your code dependent on // their classes. enum Type { PROTOTYPE_1 = 0, PROTOTYPE_2 }; /** * The example class that has cloning ability. We'll see how the values of field * with different types will be cloned. */ class Prototype { protected: string prototype_name_; float prototype_field_; public: Prototype() {} Prototype(string prototype_name) : prototype_name_(prototype_name) { } virtual ~Prototype() {} virtual Prototype *Clone() const = 0; virtual void Method(float prototype_field) { this-&gt;prototype_field_ = prototype_field; std::cout &lt;&lt; &quot;Call Method from &quot; &lt;&lt; prototype_name_ &lt;&lt; &quot; with field : &quot; &lt;&lt; prototype_field &lt;&lt; std::endl; } }; /** * ConcretePrototype1 is a Sub-Class of Prototype and implement the Clone Method * In this example all data members of Prototype Class are in the Stack. If you * have pointers in your properties for ex: String* name_ ,you will need to * implement the Copy-Constructor to make sure you have a deep copy from the * clone method */ class ConcretePrototype1 : public Prototype { private: float concrete_prototype_field1_; public: ConcretePrototype1(string prototype_name, float concrete_prototype_field) : Prototype(prototype_name), concrete_prototype_field1_(concrete_prototype_field) { } /** * Notice that Clone method return a Pointer to a new ConcretePrototype1 * replica. so, the client (who call the clone method) has the responsability * to free that memory. I you have smart pointer knowledge you may prefer to * use unique_pointer here. */ Prototype *Clone() const override { return new ConcretePrototype1(*this); } }; class ConcretePrototype2 : public Prototype { private: float concrete_prototype_field2_; public: ConcretePrototype2(string prototype_name, float concrete_prototype_field) : Prototype(prototype_name), concrete_prototype_field2_(concrete_prototype_field) { } Prototype *Clone() const override { return new ConcretePrototype2(*this); } }; /** * In PrototypeFactory you have two concrete prototypes, one for each concrete * prototype class, so each time you want to create a bullet , you can use the * existing ones and clone those. */ class PrototypeFactory { private: std::unordered_map&lt;Type, Prototype *, std::hash&lt;int&gt;&gt; prototypes_; public: PrototypeFactory() { prototypes_[Type::PROTOTYPE_1] = new ConcretePrototype1(&quot;PROTOTYPE_1 &quot;, 50.f); prototypes_[Type::PROTOTYPE_2] = new ConcretePrototype2(&quot;PROTOTYPE_2 &quot;, 60.f); } /** * Be carefull of free all memory allocated. Again, if you have smart pointers * knowelege will be better to use it here. */ ~PrototypeFactory() { delete prototypes_[Type::PROTOTYPE_1]; delete prototypes_[Type::PROTOTYPE_2]; } /** * Notice here that you just need to specify the type of the prototype you * want and the method will create from the object with this type. */ Prototype *CreatePrototype(Type type) { return prototypes_[type]-&gt;Clone(); } }; void Client(PrototypeFactory &amp;prototype_factory) { std::cout &lt;&lt; &quot;Let's create a Prototype 1\\n&quot;; Prototype *prototype = prototype_factory.CreatePrototype(Type::PROTOTYPE_1); prototype-&gt;Method(90); delete prototype; std::cout &lt;&lt; &quot;\\n&quot;; std::cout &lt;&lt; &quot;Let's create a Prototype 2 \\n&quot;; prototype = prototype_factory.CreatePrototype(Type::PROTOTYPE_2); prototype-&gt;Method(10); delete prototype; } int main() { PrototypeFactory *prototype_factory = new PrototypeFactory(); Client(*prototype_factory); delete prototype_factory; return 0; } Let's create a Prototype 1 Call Method from PROTOTYPE_1 with field : 90 Let's create a Prototype 2 Call Method from PROTOTYPE_2 with field : 10 ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/cSharp/","content":"C# Example // Prototype Design Pattern // // Intent: Lets you copy existing objects without making your code dependent on // their classes. using System; namespace RefactoringGuru.DesignPatterns.Prototype.Conceptual { public class Person { public int Age; public DateTime BirthDate; public string Name; public IdInfo IdInfo; public Person ShallowCopy() { return (Person) this.MemberwiseClone(); } public Person DeepCopy() { Person clone = (Person) this.MemberwiseClone(); clone.IdInfo = new IdInfo(IdInfo.IdNumber); clone.Name = String.Copy(Name); return clone; } } public class IdInfo { public int IdNumber; public IdInfo(int idNumber) { this.IdNumber = idNumber; } } class Program { static void Main(string[] args) { Person p1 = new Person(); p1.Age = 42; p1.BirthDate = Convert.ToDateTime(&quot;1977-01-01&quot;); p1.Name = &quot;Jack Daniels&quot;; p1.IdInfo = new IdInfo(666); // Perform a shallow copy of p1 and assign it to p2. Person p2 = p1.ShallowCopy(); // Make a deep copy of p1 and assign it to p3. Person p3 = p1.DeepCopy(); // Display values of p1, p2 and p3. Console.WriteLine(&quot;Original values of p1, p2, p3:&quot;); Console.WriteLine(&quot; p1 instance values: &quot;); DisplayValues(p1); Console.WriteLine(&quot; p2 instance values:&quot;); DisplayValues(p2); Console.WriteLine(&quot; p3 instance values:&quot;); DisplayValues(p3); // Change the value of p1 properties and display the values of p1, // p2 and p3. p1.Age = 32; p1.BirthDate = Convert.ToDateTime(&quot;1900-01-01&quot;); p1.Name = &quot;Frank&quot;; p1.IdInfo.IdNumber = 7878; Console.WriteLine(&quot;\\nValues of p1, p2 and p3 after changes to p1:&quot;); Console.WriteLine(&quot; p1 instance values: &quot;); DisplayValues(p1); Console.WriteLine(&quot; p2 instance values (reference values have changed):&quot;); DisplayValues(p2); Console.WriteLine(&quot; p3 instance values (everything was kept the same):&quot;); DisplayValues(p3); } public static void DisplayValues(Person p) { Console.WriteLine(&quot; Name: {0:s}, Age: {1:d}, BirthDate: {2:MM/dd/yy}&quot;, p.Name, p.Age, p.BirthDate); Console.WriteLine(&quot; ID#: {0:d}&quot;, p.IdInfo.IdNumber); } } } Original values of p1, p2, p3: p1 instance values: Name: Jack Daniels, Age: 42, BirthDate: 01/01/77 ID#: 666 p2 instance values: Name: Jack Daniels, Age: 42, BirthDate: 01/01/77 ID#: 666 p3 instance values: Name: Jack Daniels, Age: 42, BirthDate: 01/01/77 ID#: 666 Values of p1, p2 and p3 after changes to p1: p1 instance values: Name: Frank, Age: 32, BirthDate: 01/01/00 ID#: 7878 p2 instance values (reference values have changed): Name: Jack Daniels, Age: 42, BirthDate: 01/01/77 ID#: 7878 p3 instance values (everything was kept the same): Name: Jack Daniels, Age: 42, BirthDate: 01/01/77 ID#: 666 ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/go/","content":"Go Example package main import &quot;fmt&quot; type file struct { name string } func (f *file) print(indentation string) { fmt.Println(indentation + f.name) } func (f *file) clone() inode { return &amp;file{name: f.name + &quot;_clone&quot;} } package main import &quot;fmt&quot; type folder struct { children []inode name string } func (f *folder) print(indentation string) { fmt.Println(indentation + f.name) for _, i := range f.children { i.print(indentation + indentation) } } func (f *folder) clone() inode { cloneFolder := &amp;folder{name: f.name + &quot;_clone&quot;} var tempChildren []inode for _, i := range f.children { copy := i.clone() tempChildren = append(tempChildren, copy) } cloneFolder.children = tempChildren return cloneFolder } package main type inode interface { print(string) clone() inode } package main import &quot;fmt&quot; func main() { file1 := &amp;file{name: &quot;File1&quot;} file2 := &amp;file{name: &quot;File2&quot;} file3 := &amp;file{name: &quot;File3&quot;} folder1 := &amp;folder{ children: []inode{file1}, name: &quot;Folder1&quot;, } folder2 := &amp;folder{ children: []inode{folder1, file2, file3}, name: &quot;Folder2&quot;, } fmt.Println(&quot;\\nPrinting hierarchy for Folder2&quot;) folder2.print(&quot; &quot;) cloneFolder := folder2.clone() fmt.Println(&quot;\\nPrinting hierarchy for clone Folder&quot;) cloneFolder.print(&quot; &quot;) } Printing hierarchy for Folder2 Folder2 Folder1 File1 File2 File3 Printing hierarchy for clone Folder Folder2_clone Folder1_clone File1_clone File2_clone File3_clone ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/java/","content":"Java Example shapes shapes/Circle.java package refactoring_guru.prototype.example.shapes; public class Circle extends Shape { public int radius; public Circle() { } public Circle(Circle target) { super(target); if (target != null) { this.radius = target.radius; } } @Override public Shape clone() { return new Circle(this); } @Override public boolean equals(Object object2) { if (!(object2 instanceof Circle) || !super.equals(object2)) return false; Circle shape2 = (Circle) object2; return shape2.radius == radius; } } shapes/Rectangle.java package refactoring_guru.prototype.example.shapes; public class Rectangle extends Shape { public int width; public int height; public Rectangle() { } public Rectangle(Rectangle target) { super(target); if (target != null) { this.width = target.width; this.height = target.height; } } @Override public Shape clone() { return new Rectangle(this); } @Override public boolean equals(Object object2) { if (!(object2 instanceof Rectangle) || !super.equals(object2)) return false; Rectangle shape2 = (Rectangle) object2; return shape2.width == width &amp;&amp; shape2.height == height; } } shapes/Shape.java package refactoring_guru.prototype.example.shapes; import java.util.Objects; public abstract class Shape { public int x; public int y; public String color; public Shape() { } public Shape(Shape target) { if (target != null) { this.x = target.x; this.y = target.y; this.color = target.color; } } public abstract Shape clone(); @Override public boolean equals(Object object2) { if (!(object2 instanceof Shape)) return false; Shape shape2 = (Shape) object2; return shape2.x == x &amp;&amp; shape2.y == y &amp;&amp; Objects.equals(shape2.color, color); } } Demo.java package refactoring_guru.prototype.example; import refactoring_guru.prototype.example.shapes.Circle; import refactoring_guru.prototype.example.shapes.Rectangle; import refactoring_guru.prototype.example.shapes.Shape; import java.util.ArrayList; import java.util.List; public class Demo { public static void main(String[] args) { List&lt;Shape&gt; shapes = new ArrayList&lt;&gt;(); List&lt;Shape&gt; shapesCopy = new ArrayList&lt;&gt;(); Circle circle = new Circle(); circle.x = 10; circle.y = 20; circle.radius = 15; circle.color = &quot;red&quot;; shapes.add(circle); Circle anotherCircle = (Circle) circle.clone(); shapes.add(anotherCircle); Rectangle rectangle = new Rectangle(); rectangle.width = 10; rectangle.height = 20; rectangle.color = &quot;blue&quot;; shapes.add(rectangle); cloneAndCompare(shapes, shapesCopy); } private static void cloneAndCompare(List&lt;Shape&gt; shapes, List&lt;Shape&gt; shapesCopy) { for (Shape shape : shapes) { shapesCopy.add(shape.clone()); } for (int i = 0; i &lt; shapes.size(); i++) { if (shapes.get(i) != shapesCopy.get(i)) { System.out.println(i + &quot;: Shapes are different objects (yay!)&quot;); if (shapes.get(i).equals(shapesCopy.get(i))) { System.out.println(i + &quot;: And they are identical (yay!)&quot;); } else { System.out.println(i + &quot;: But they are not identical (booo!)&quot;); } } else { System.out.println(i + &quot;: Shape objects are the same (booo!)&quot;); } } } } 0: Shapes are different objects (yay!) 0: And they are identical (yay!) 1: Shapes are different objects (yay!) 1: And they are identical (yay!) 2: Shapes are different objects (yay!) 2: And they are identical (yay!) ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/java/example2","content":"Example 2 this example is an extension of the first example cache cache/BundledShapedCache.java package refactoring_guru.prototype.caching.cache; import refactoring_guru.prototype.example.shapes.Circle; import refactoring_guru.prototype.example.shapes.Rectangle; import refactoring_guru.prototype.example.shapes.Shape; import java.util.HashMap; import java.util.Map; public class BundledShapeCache { private Map&lt;String, Shape&gt; cache = new HashMap&lt;&gt;(); public BundledShapeCache() { Circle circle = new Circle(); circle.x = 5; circle.y = 7; circle.radius = 45; circle.color = &quot;Green&quot;; Rectangle rectangle = new Rectangle(); rectangle.x = 6; rectangle.y = 9; rectangle.width = 8; rectangle.height = 10; rectangle.color = &quot;Blue&quot;; cache.put(&quot;Big green circle&quot;, circle); cache.put(&quot;Medium blue rectangle&quot;, rectangle); } public Shape put(String key, Shape shape) { cache.put(key, shape); return shape; } public Shape get(String key) { return cache.get(key).clone(); } } Demo.java package refactoring_guru.prototype.caching; import refactoring_guru.prototype.caching.cache.BundledShapeCache; import refactoring_guru.prototype.example.shapes.Shape; public class Demo { public static void main(String[] args) { BundledShapeCache cache = new BundledShapeCache(); Shape shape1 = cache.get(&quot;Big green circle&quot;); Shape shape2 = cache.get(&quot;Medium blue rectangle&quot;); Shape shape3 = cache.get(&quot;Medium blue rectangle&quot;); if (shape1 != shape2 &amp;&amp; !shape1.equals(shape2)) { System.out.println(&quot;Big green circle != Medium blue rectangle (yay!)&quot;); } else { System.out.println(&quot;Big green circle == Medium blue rectangle (booo!)&quot;); } if (shape2 != shape3) { System.out.println(&quot;Medium blue rectangles are two different objects (yay!)&quot;); if (shape2.equals(shape3)) { System.out.println(&quot;And they are identical (yay!)&quot;); } else { System.out.println(&quot;But they are not identical (booo!)&quot;); } } else { System.out.println(&quot;Rectangle objects are the same (booo!)&quot;); } } } Big green circle != Medium blue rectangle (yay!) Medium blue rectangles are two different objects (yay!) And they are identical (yay!) ","keywords":""},{"title":"JavaScript","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/javascript/","content":"JavaScript function CustomerPrototype(proto) { this.proto = proto; this.clone = function () { const customer = new Customer(); for (const attr in proto) { customer[attr] = proto[attr]; } return customer; }; } function Customer(first, last, status) { this.first = first; this.last = last; this.status = status; this.say = function () { console.log( &quot;name: &quot; + this.first + &quot; &quot; + this.last + &quot;, status: &quot; + this.status ); }; } function run() { const customer = new Customer(&quot;n/a&quot;, &quot;n/a&quot;, &quot;pending&quot;); customer.say(); const prototype = new CustomerPrototype(customer); const customer2 = prototype.clone(); customer2.say(); } run(); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/python/","content":"Python Example import copy class SelfReferencingEntity: def __init__(self): self.parent = None def set_parent(self, parent): self.parent = parent class SomeComponent: &quot;&quot;&quot; Python provides its own interface of Prototype via `copy.copy` and `copy.deepcopy` functions. And any class that wants to implement custom implementations have to override `__copy__` and `__deepcopy__` member functions. &quot;&quot;&quot; def __init__(self, some_int, some_list_of_objects, some_circular_ref): self.some_int = some_int self.some_list_of_objects = some_list_of_objects self.some_circular_ref = some_circular_ref def __copy__(self): &quot;&quot;&quot; Create a shallow copy. This method will be called whenever someone calls `copy.copy` with this object and the returned value is returned as the new shallow copy. &quot;&quot;&quot; # First, let's create copies of the nested objects. some_list_of_objects = copy.copy(self.some_list_of_objects) some_circular_ref = copy.copy(self.some_circular_ref) # Then, let's clone the object itself, using the prepared clones of the # nested objects. new = self.__class__( self.some_int, some_list_of_objects, some_circular_ref ) new.__dict__.update(self.__dict__) return new def __deepcopy__(self, memo={}): &quot;&quot;&quot; Create a deep copy. This method will be called whenever someone calls `copy.deepcopy` with this object and the returned value is returned as the new deep copy. What is the use of the argument `memo`? Memo is the dictionary that is used by the `deepcopy` library to prevent infinite recursive copies in instances of circular references. Pass it to all the `deepcopy` calls you make in the `__deepcopy__` implementation to prevent infinite recursions. &quot;&quot;&quot; # First, let's create copies of the nested objects. some_list_of_objects = copy.deepcopy(self.some_list_of_objects, memo) some_circular_ref = copy.deepcopy(self.some_circular_ref, memo) # Then, let's clone the object itself, using the prepared clones of the # nested objects. new = self.__class__( self.some_int, some_list_of_objects, some_circular_ref ) new.__dict__ = copy.deepcopy(self.__dict__, memo) return new if __name__ == &quot;__main__&quot;: list_of_objects = [1, {1, 2, 3}, [1, 2, 3]] circular_ref = SelfReferencingEntity() component = SomeComponent(23, list_of_objects, circular_ref) circular_ref.set_parent(component) shallow_copied_component = copy.copy(component) # Let's change the list in shallow_copied_component and see if it changes in # component. shallow_copied_component.some_list_of_objects.append(&quot;another object&quot;) if component.some_list_of_objects[-1] == &quot;another object&quot;: print( &quot;Adding elements to `shallow_copied_component`'s &quot; &quot;some_list_of_objects adds it to `component`'s &quot; &quot;some_list_of_objects.&quot; ) else: print( &quot;Adding elements to `shallow_copied_component`'s &quot; &quot;some_list_of_objects doesn't add it to `component`'s &quot; &quot;some_list_of_objects.&quot; ) # Let's change the set in the list of objects. component.some_list_of_objects[1].add(4) if 4 in shallow_copied_component.some_list_of_objects[1]: print( &quot;Changing objects in the `component`'s some_list_of_objects &quot; &quot;changes that object in `shallow_copied_component`'s &quot; &quot;some_list_of_objects.&quot; ) else: print( &quot;Changing objects in the `component`'s some_list_of_objects &quot; &quot;doesn't change that object in `shallow_copied_component`'s &quot; &quot;some_list_of_objects.&quot; ) deep_copied_component = copy.deepcopy(component) # Let's change the list in deep_copied_component and see if it changes in # component. deep_copied_component.some_list_of_objects.append(&quot;one more object&quot;) if component.some_list_of_objects[-1] == &quot;one more object&quot;: print( &quot;Adding elements to `deep_copied_component`'s &quot; &quot;some_list_of_objects adds it to `component`'s &quot; &quot;some_list_of_objects.&quot; ) else: print( &quot;Adding elements to `deep_copied_component`'s &quot; &quot;some_list_of_objects doesn't add it to `component`'s &quot; &quot;some_list_of_objects.&quot; ) # Let's change the set in the list of objects. component.some_list_of_objects[1].add(10) if 10 in deep_copied_component.some_list_of_objects[1]: print( &quot;Changing objects in the `component`'s some_list_of_objects &quot; &quot;changes that object in `deep_copied_component`'s &quot; &quot;some_list_of_objects.&quot; ) else: print( &quot;Changing objects in the `component`'s some_list_of_objects &quot; &quot;doesn't change that object in `deep_copied_component`'s &quot; &quot;some_list_of_objects.&quot; ) print( f&quot;id(deep_copied_component.some_circular_ref.parent): &quot; f&quot;{id(deep_copied_component.some_circular_ref.parent)}&quot; ) print( f&quot;id(deep_copied_component.some_circular_ref.parent.some_circular_ref.parent): &quot; f&quot;{id(deep_copied_component.some_circular_ref.parent.some_circular_ref.parent)}&quot; ) print( &quot;^^ This shows that deepcopied objects contain same reference, they &quot; &quot;are not cloned repeatedly.&quot; ) Adding elements to `shallow_copied_component`'s some_list_of_objects adds it to `component`'s some_list_of_objects. Changing objects in the `component`'s some_list_of_objects changes that object in `shallow_copied_component`'s some_list_of_objects. Adding elements to `deep_copied_component`'s some_list_of_objects doesn't add it to `component`'s some_list_of_objects. Changing objects in the `component`'s some_list_of_objects doesn't change that object in `deep_copied_component`'s some_list_of_objects. id(deep_copied_component.some_circular_ref.parent): 4429472784 id(deep_copied_component.some_circular_ref.parent.some_circular_ref.parent): 4429472784 ^^ This shows that deepcopied objects contain same reference, they are not cloned repeatedly. ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/python/example2","content":"Example 2 from copy import deepcopy class Car: def __init__(self): self.__wheels = list() self.__engine = None self.__body = None def setBody(self, body): self.__body = body def attachWheel(self, wheel): self.__wheels.append(wheel) def setEngine(self, engine): self.__engine = engine def specification(self): print(&quot;body: %s&quot; % self.__body.shape) print(&quot;engine horsepower: %d&quot; % self.__engine.horsepower) print(&quot;tire size: %d\\'&quot; % self.__wheels[0].size) def clone(self): return deepcopy(self) # === Car parts === class Wheel: size = None class Engine: horsepower = None class Body: shape = None class Director: __builder = None def setBuilder(self, builder): self.__builder = builder # The algorithm for assembling a car def getCar(self): car = Car() # First goes the body body = self.__builder.getBody() car.setBody(body) # Then engine engine = self.__builder.getEngine() car.setEngine(engine) # And four wheels i = 0 while i &lt; 4: wheel = self.__builder.getWheel() car.attachWheel(wheel) i += 1 return car class BuilderInterface: def getWheel(self): pass def getEngine(self): pass def getBody(self): pass class JeepBuilder(BuilderInterface): def getWheel(self): wheel = Wheel() wheel.size = 22 return wheel def getEngine(self): engine = Engine() engine.horsepower = 400 return engine def getBody(self): body = Body() body.shape = &quot;SUV&quot; return body class NissanBuilder(BuilderInterface): def getWheel(self): wheel = Wheel() wheel.size = 16 return wheel def getEngine(self): engine = Engine() engine.horsepower = 100 return engine def getBody(self): body = Body() body.shape = &quot;hatchback&quot; return body from CarBuilderAndPrototype import JeepBuilder, Director d = Director() d.setBuilder(JeepBuilder()) jeep = d.getCar() # check if it is a car print(jeep) jeep.specification() # check if it is a jeep jeep2 = jeep.clone() print(jeep2) # check if another similar jeep has been built ","keywords":""},{"title":"Example 3","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/python/example3","content":"Example 3 from copy import deepcopy class Point: def __init__(self, x, y): self.x = x self.y = y def __str__(self): print(f&quot;({self.x}, {self.y})&quot;) def move(self, x, y): self.x += x self.y += y def clone(self, move_x, move_y): obj = deepcopy(self) obj.move(move_x, move_y) return obj from PointPrototypeCanModifyClone import Point p0 = Point(0, 0) p0.__str__() p1 = p0.clone(1, 1) p1.__str__() ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/swift/","content":"Swift Example /// Prototype Design Pattern /// /// Intent: Lets you copy existing objects without making your code dependent on /// their classes. import XCTest /// Swift has built-in cloning support. To add cloning support to your class, /// you need to implement the NSCopying protocol in that class and provide the /// implementation for the `copy` method. class BaseClass: NSCopying, Equatable { private var intValue = 1 private var stringValue = &quot;Value&quot; required init(intValue: Int = 1, stringValue: String = &quot;Value&quot;) { self.intValue = intValue self.stringValue = stringValue } /// MARK: - NSCopying func copy(with zone: NSZone? = nil) -&gt; Any { let prototype = type(of: self).init() prototype.intValue = intValue prototype.stringValue = stringValue print(&quot;Values defined in BaseClass have been cloned!&quot;) return prototype } /// MARK: - Equatable static func == (lhs: BaseClass, rhs: BaseClass) -&gt; Bool { return lhs.intValue == rhs.intValue &amp;&amp; lhs.stringValue == rhs.stringValue } } /// Subclasses can override the base `copy` method to copy their own data into /// the resulting object. But you should always call the base method first. class SubClass: BaseClass { private var boolValue = true func copy() -&gt; Any { return copy(with: nil) } override func copy(with zone: NSZone?) -&gt; Any { guard let prototype = super.copy(with: zone) as? SubClass else { return SubClass() // oops } prototype.boolValue = boolValue print(&quot;Values defined in SubClass have been cloned!&quot;) return prototype } } /// The client code. class Client { // ... static func someClientCode() { let original = SubClass(intValue: 2, stringValue: &quot;Value2&quot;) guard let copy = original.copy() as? SubClass else { XCTAssert(false) return } /// See implementation of `Equatable` protocol for more details. XCTAssert(copy == original) print(&quot;The original object is equal to the copied object!&quot;) } // ... } /// Let's see how it all works together. class PrototypeConceptual: XCTestCase { func testPrototype_NSCopying() { Client.someClientCode() } } Values defined in BaseClass have been cloned! Values defined in SubClass have been cloned! The original object is equal to the copied object! ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/swift/example2","content":"Example 2 import XCTest class PrototypeRealWorld: XCTestCase { func testPrototypeRealWorld() { let author = Author(id: 10, username: &quot;Ivan_83&quot;) let page = Page(title: &quot;My First Page&quot;, contents: &quot;Hello world!&quot;, author: author) page.add(comment: Comment(message: &quot;Keep it up!&quot;)) /// Since NSCopying returns Any, the copied object should be unwrapped. guard let anotherPage = page.copy() as? Page else { XCTFail(&quot;Page was not copied&quot;) return } /// Comments should be empty as it is a new page. XCTAssert(anotherPage.comments.isEmpty) /// Note that the author is now referencing two objects. XCTAssert(author.pagesCount == 2) print(&quot;Original title: &quot; + page.title) print(&quot;Copied title: &quot; + anotherPage.title) print(&quot;Count of pages: &quot; + String(author.pagesCount)) } } private class Author { private var id: Int private var username: String private var pages = [Page]() init(id: Int, username: String) { self.id = id self.username = username } func add(page: Page) { pages.append(page) } var pagesCount: Int { return pages.count } } private class Page: NSCopying { private(set) var title: String private(set) var contents: String private weak var author: Author? private(set) var comments = [Comment]() init(title: String, contents: String, author: Author?) { self.title = title self.contents = contents self.author = author author?.add(page: self) } func add(comment: Comment) { comments.append(comment) } /// MARK: - NSCopying func copy(with zone: NSZone? = nil) -&gt; Any { return Page(title: &quot;Copy of '&quot; + title + &quot;'&quot;, contents: contents, author: author) } } private struct Comment { let date = Date() let message: String } Original title: My First Page Copied title: Copy of 'My First Page' Count of pages: 2 ","keywords":""},{"title":"TypeScript","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Prototype/typescript/","content":"TypeScript /** * Prototype Design Pattern * * Intent: Lets you copy existing objects without making your code dependent on * their classes. */ /** * The example class that has cloning ability. We'll see how the values of field * with different types will be cloned. */ class Prototype { public primitive: any; public component: object; public circularReference: ComponentWithBackReference; public clone(): this { const clone = Object.create(this); clone.component = Object.create(this.component); // Cloning an object that has a nested object with backreference // requires special treatment. After the cloning is completed, the // nested object should point to the cloned object, instead of the // original object. Spread operator can be handy for this case. clone.circularReference = { ...this.circularReference, prototype: {...this}, }; return clone; } } class ComponentWithBackReference { public prototype; constructor(prototype: Prototype) { this.prototype = prototype; } } /** * The client code. */ function clientCode() { const p1 = new Prototype(); p1.primitive = 245; p1.component = new Date(); p1.circularReference = new ComponentWithBackReference(p1); const p2 = p1.clone(); if (p1.primitive === p2.primitive) { console.log( &quot;Primitive field values have been carried over to a clone. Yay!&quot; ); } else { console.log(&quot;Primitive field values have not been copied. Booo!&quot;); } if (p1.component === p2.component) { console.log(&quot;Simple component has not been cloned. Booo!&quot;); } else { console.log(&quot;Simple component has been cloned. Yay!&quot;); } if (p1.circularReference === p2.circularReference) { console.log(&quot;Component with back reference has not been cloned. Booo!&quot;); } else { console.log(&quot;Component with back reference has been cloned. Yay!&quot;); } if (p1.circularReference.prototype === p2.circularReference.prototype) { console.log( &quot;Component with back reference is linked to original object. Booo!&quot; ); } else { console.log(&quot;Component with back reference is linked to the clone. Yay!&quot;); } } clientCode(); Primitive field values have been carried over to a clone. Yay! Simple component has been cloned. Yay! Component with back reference has been cloned. Yay! Component with back reference is linked to the clone. Yay! ","keywords":""},{"title":"Singleton","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/","content":"","keywords":""},{"title":"Structure​","type":1,"pageTitle":"Singleton","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/#structure","content":" The Singleton class declares the static method getInstance() that returns the same instance of its own class The Singleton’s constructor should be hidden from the client codeCalling the getInstance89 method should be the only way of getting the Singleton object "},{"title":"When to apply​","type":1,"pageTitle":"Singleton","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/#when-to-apply","content":"if a class in your program should have just a single instance available to all clients; for example, a single database object shared by different parts of the programif you need stricter control over global variables "},{"title":"Pros and Cons​","type":1,"pageTitle":"Singleton","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/#pros-and-cons","content":"pros\tconsyou can be sure that a class has only a single instance\tviolates the Single Responsibility Principle you gain a global access point to that instance\tpattern can hide bad design the singleton object is initialized only when it's requested for the first time\trequires special handling in a multithreaded environment you will need to think of a creative way to mock the singleton "},{"title":"Typescript​","type":1,"pageTitle":"Singleton","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/#typescript","content":"class President { private static president: President; private constructor() {} public static getInstance(): President { if (!President.president) { President.president = new President(); } return President.president; } } const president1 = President.getInstance(); const president2 = President.getInstance(); president1 === president2; // true  "},{"title":"Javascript​","type":1,"pageTitle":"Singleton","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/#javascript","content":""},{"title":"The Node.js module system provides a basic framework for implementing a rudimentary singleton​","type":1,"pageTitle":"Singleton","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/#the-nodejs-module-system-provides-a-basic-framework-for-implementing-a-rudimentary-singleton","content":"let num1 = 0; module.exports = { add: (num) =&gt; num1 + num, // module 1 subtract: (num) =&gt; num1 - num, // module 2 };  Creating a singleton with ES5​ When module is imported, only a single instance is created and referred to This is because the module system caches the module the moment it is accessed by using a require statementTherefore, regardless of the number of times imported, the same instance is referred and is will be accessed via the same cached and common instanceHowever, although this behavior behaves like a singleton, it is technically just an instance of the module that is cached upon first access Creating a singleton with ES6 class​ Normal way of exporting and importing Singletons defined with ES6 class with not behave like a singleton as they do not share the same point of access Need to create an instance and export the instance to make it behave like a singleton "},{"title":"Python​","type":1,"pageTitle":"Singleton","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/#python","content":"Python modules are singletons but it is not a good idea to use them for the Singleton pattern because it is error-prone e.g.: if you forget the global statements, variables local to a function will be created instead they pollute the module namespaceno oop benefits like associated methods or reuse through inheritance "},{"title":"Singleton pattern​","type":1,"pageTitle":"Singleton","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/#singleton-pattern","content":"Ensures that a class has only 1 instanceprovide a global point of access to it e.g. a logging class Pros Singletons are allocated once and only oncePolicies can be added to the method that provides access to the singleton pointer Cons Derivatives of Singletons are not automatically SingletonsSingletons must always be accessed through a pointer or reference obtaining this has overhead uses new method​ is the first step of instance creationis called before init is responsible for returning a new instance of the class class Singleton: __instance = None def __new__(cls, val=None): if Singleton.__instance is None: Singleton.__instance = object.__new__(cls) Singleton.__instance.val = val return Singleton.__instance  "},{"title":"Java​","type":1,"pageTitle":"Singleton","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/#java","content":"implementation of Singleton pattern using private constructors // Java program to demonstrate implementation of Singleton // pattern using private constructors. import java.io.*; class MySingleton { static MySingleton instance = null; public int x = 10; // private constructor can't be accessed outside the class private MySingleton() { } // Factory method to provide the users with instances static public MySingleton getInstance() { if (instance == null) instance = new MySingleton(); return instance; } } // Driver Class class Main { public static void main(String args[]) { MySingleton a = MySingleton.getInstance(); MySingleton b = MySingleton.getInstance(); a.x = a.x + 10; System.out.println(&quot;Value of a.x = &quot; + a.x); System.out.println(&quot;Value of b.x = &quot; + b.x); } }  "},{"title":"Borg​","type":1,"pageTitle":"Singleton","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/#borg","content":"Allows a class to have as many instances as one likesensures that they all share the same statePros Derivatives of monostate classes can also be monostateAccess to monostate objects does not have to be through pointers or references Cons No instantiation policy can exist for monostate classesMonostate instances may be allocated and deallocated many times uses init method​ does not return anythingonly responsible for initializing the instance after it has been created class Borg: __shared_state = {} # Attribute dictionary def __init__(self): self.__dict__ = self._shared_state # Make it an attribute dictionary  "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/cPlusPlus/","content":"C++ Example Non Thread Safe #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;thread&gt; /** * Singleton Design Pattern * * Intent: Lets you ensure that a class has only one instance, while providing a * global access point to this instance. */ /** * The Singleton class defines the `GetInstance` method that serves as an * alternative to constructor and lets clients access the same instance of this * class over and over. */ class Singleton { /** * The Singleton's constructor should always be private to prevent direct * construction calls with the `new` operator. */ protected: Singleton(const std::string value): value_(value) { } static Singleton* singleton_; std::string value_; public: /** * Singletons should not be cloneable. */ Singleton(Singleton &amp;other) = delete; /** * Singletons should not be assignable. */ void operator=(const Singleton &amp;) = delete; /** * This is the static method that controls the access to the singleton * instance. On the first run, it creates a singleton object and places it * into the static field. On subsequent runs, it returns the client existing * object stored in the static field. */ static Singleton *GetInstance(const std::string&amp; value); /** * Finally, any singleton should define some business logic, which can be * executed on its instance. */ void SomeBusinessLogic() { // ... } std::string value() const{ return value_; } }; Singleton* Singleton::singleton_= nullptr;; /** * Static methods should be defined outside the class. */ Singleton *Singleton::GetInstance(const std::string&amp; value) { /** * This is a safer way to create an instance. instance = new Singleton is * dangeruous in case two instance threads wants to access at the same time */ if(singleton_==nullptr){ singleton_ = new Singleton(value); } return singleton_; } void ThreadFoo(){ // Following code emulates slow initialization. std::this_thread::sleep_for(std::chrono::milliseconds(1000)); Singleton* singleton = Singleton::GetInstance(&quot;FOO&quot;); std::cout &lt;&lt; singleton-&gt;value() &lt;&lt; &quot;\\n&quot;; } void ThreadBar(){ // Following code emulates slow initialization. std::this_thread::sleep_for(std::chrono::milliseconds(1000)); Singleton* singleton = Singleton::GetInstance(&quot;BAR&quot;); std::cout &lt;&lt; singleton-&gt;value() &lt;&lt; &quot;\\n&quot;; } int main() { std::cout &lt;&lt;&quot;If you see the same value, then singleton was reused (yay!\\n&quot; &lt;&lt; &quot;If you see different values, then 2 singletons were created (booo!!)\\n\\n&quot; &lt;&lt; &quot;RESULT:\\n&quot;; std::thread t1(ThreadFoo); std::thread t2(ThreadBar); t1.join(); t2.join(); return 0; } If you see the same value, then singleton was reused (yay! If you see different values, then 2 singletons were created (booo!!) RESULT: BAR FOO Thread Safe /** * Have in mind it is an ilustrative trivial example, in real world * you may have in mind some more possible issues. */ #include &lt;iostream&gt; #include &lt;mutex&gt; #include &lt;thread&gt; /** * Singleton Design Pattern * * Intent: Lets you ensure that a class has only one instance, while providing a * global access point to this instance. */ /** * The Singleton class defines the `GetInstance` method that serves as an * alternative to constructor and lets clients access the same instance of this * class over and over. */ class Singleton { /** * The Singleton's constructor/destructor should always be private to * prevent direct construction/desctruction calls with the `new`/`delete` * operator. */ private: static Singleton * pinstance_; static std::mutex mutex_; protected: Singleton(const std::string value): value_(value) { } ~Singleton() {} std::string value_; public: /** * Singletons should not be cloneable. */ Singleton(Singleton &amp;other) = delete; /** * Singletons should not be assignable. */ void operator=(const Singleton &amp;) = delete; /** * This is the static method that controls the access to the singleton * instance. On the first run, it creates a singleton object and places it * into the static field. On subsequent runs, it returns the client existing * object stored in the static field. */ static Singleton *GetInstance(const std::string&amp; value); /** * Finally, any singleton should define some business logic, which can be * executed on its instance. */ void SomeBusinessLogic() { // ... } std::string value() const{ return value_; } }; /** * Static methods should be defined outside the class. */ Singleton* Singleton::pinstance_{nullptr}; std::mutex Singleton::mutex_; /** * The first time we call GetInstance we will lock the storage location * and then we make sure again that the variable is null and then we * set the value. RU: */ Singleton *Singleton::GetInstance(const std::string&amp; value) { std::lock_guard&lt;std::mutex&gt; lock(mutex_); if (pinstance_ == nullptr) { pinstance_ = new Singleton(value); } return pinstance_; } void ThreadFoo(){ // Following code emulates slow initialization. std::this_thread::sleep_for(std::chrono::milliseconds(1000)); Singleton* singleton = Singleton::GetInstance(&quot;FOO&quot;); std::cout &lt;&lt; singleton-&gt;value() &lt;&lt; &quot;\\n&quot;; } void ThreadBar(){ // Following code emulates slow initialization. std::this_thread::sleep_for(std::chrono::milliseconds(1000)); Singleton* singleton = Singleton::GetInstance(&quot;BAR&quot;); std::cout &lt;&lt; singleton-&gt;value() &lt;&lt; &quot;\\n&quot;; } int main() { std::cout &lt;&lt;&quot;If you see the same value, then singleton was reused (yay!\\n&quot; &lt;&lt; &quot;If you see different values, then 2 singletons were created (booo!!)\\n\\n&quot; &lt;&lt; &quot;RESULT:\\n&quot;; std::thread t1(ThreadFoo); std::thread t2(ThreadBar); t1.join(); t2.join(); return 0; } If you see the same value, then singleton was reused (yay! If you see different values, then 2 singletons were created (booo!!) RESULT: FOO FOO ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/cSharp/","content":"C# Example Non Thread Safe // Singleton Design Pattern // // Intent: Lets you ensure that a class has only one instance, while providing a // global access point to this instance. using System; namespace Singleton { // The Singleton class defines the `GetInstance` method that serves as an // alternative to constructor and lets clients access the same instance of // this class over and over. class Singleton { // The Singleton's constructor should always be private to prevent // direct construction calls with the `new` operator. private Singleton() { } // The Singleton's instance is stored in a static field. There there are // multiple ways to initialize this field, all of them have various pros // and cons. In this example we'll show the simplest of these ways, // which, however, doesn't work really well in multithreaded program. private static Singleton _instance; // This is the static method that controls the access to the singleton // instance. On the first run, it creates a singleton object and places // it into the static field. On subsequent runs, it returns the client // existing object stored in the static field. public static Singleton GetInstance() { if (_instance == null) { _instance = new Singleton(); } return _instance; } // Finally, any singleton should define some business logic, which can // be executed on its instance. public static void someBusinessLogic() { // ... } } class Program { static void Main(string[] args) { // The client code. Singleton s1 = Singleton.GetInstance(); Singleton s2 = Singleton.GetInstance(); if (s1 == s2) { Console.WriteLine(&quot;Singleton works, both variables contain the same instance.&quot;); } else { Console.WriteLine(&quot;Singleton failed, variables contain different instances.&quot;); } } } } Singleton works, both variables contain the same instance. Thread Safe // Singleton Design Pattern // // Intent: Lets you ensure that a class has only one instance, while providing a // global access point to this instance. using System; using System.Threading; namespace Singleton { // This Singleton implementation is called &quot;double check lock&quot;. It is safe // in multithreaded environment and provides lazy initialization for the // Singleton object. class Singleton { private Singleton() { } private static Singleton _instance; // We now have a lock object that will be used to synchronize threads // during first access to the Singleton. private static readonly object _lock = new object(); public static Singleton GetInstance(string value) { // This conditional is needed to prevent threads stumbling over the // lock once the instance is ready. if (_instance == null) { // Now, imagine that the program has just been launched. Since // there's no Singleton instance yet, multiple threads can // simultaneously pass the previous conditional and reach this // point almost at the same time. The first of them will acquire // lock and will proceed further, while the rest will wait here. lock (_lock) { // The first thread to acquire the lock, reaches this // conditional, goes inside and creates the Singleton // instance. Once it leaves the lock block, a thread that // might have been waiting for the lock release may then // enter this section. But since the Singleton field is // already initialized, the thread won't create a new // object. if (_instance == null) { _instance = new Singleton(); _instance.Value = value; } } } return _instance; } // We'll use this property to prove that our Singleton really works. public string Value { get; set; } } class Program { static void Main(string[] args) { // The client code. Console.WriteLine( &quot;{0}\\n{1}\\n\\n{2}\\n&quot;, &quot;If you see the same value, then singleton was reused (yay!)&quot;, &quot;If you see different values, then 2 singletons were created (booo!!)&quot;, &quot;RESULT:&quot; ); Thread process1 = new Thread(() =&gt; { TestSingleton(&quot;FOO&quot;); }); Thread process2 = new Thread(() =&gt; { TestSingleton(&quot;BAR&quot;); }); process1.Start(); process2.Start(); process1.Join(); process2.Join(); } public static void TestSingleton(string value) { Singleton singleton = Singleton.GetInstance(value); Console.WriteLine(singleton.Value); } } } FOO FOO ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/go/","content":"Go Example package main import ( &quot;fmt&quot; &quot;sync&quot; ) var lock = &amp;sync.Mutex{} type single struct { } var singleInstance *single func getInstance() *single { if singleInstance == nil { lock.Lock() defer lock.Unlock() if singleInstance == nil { fmt.Println(&quot;Creating single instance now.&quot;) singleInstance = &amp;single{} } else { fmt.Println(&quot;Single instance already created.&quot;) } } else { fmt.Println(&quot;Single instance already created.&quot;) } return singleInstance } package main import ( &quot;fmt&quot; ) func main() { for i := 0; i &lt; 30; i++ { go getInstance() } // Scanln is similar to Scan, but stops scanning at a newline and // after the final item there must be a newline or EOF. fmt.Scanln() } Creating single instance now. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. Single instance already created. ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/go/example2","content":"Example 2 package main import ( &quot;fmt&quot; &quot;sync&quot; ) var once sync.Once type single struct { } var singleInstance *single func getInstance() *single { if singleInstance == nil { once.Do( func() { fmt.Println(&quot;Creating single instance now.&quot;) singleInstance = &amp;single{} }) } else { fmt.Println(&quot;Single instance already created.&quot;) } return singleInstance } package main import ( &quot;fmt&quot; ) func main() { for i := 0; i &lt; 30; i++ { go getInstance() } // Scanln is similar to Scan, but stops scanning at a newline and // after the final item there must be a newline or EOF. fmt.Scanln() } Creating single instance now. Single instance already created. Single instance already created. ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/java/","content":"","keywords":""},{"title":"Non Thread Safe​","type":1,"pageTitle":"Java Example","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/java/#non-thread-safe","content":"Singleton package refactoring_guru.singleton.example.non_thread_safe; public final class Singleton { private static Singleton instance; public String value; private Singleton(String value) { // The following code emulates slow initialization. try { Thread.sleep(1000); } catch (InterruptedException ex) { ex.printStackTrace(); } this.value = value; } public static Singleton getInstance(String value) { if (instance == null) { instance = new Singleton(value); } return instance; } }  Multi Thread package refactoring_guru.singleton.example.non_thread_safe; public class DemoMultiThread { public static void main(String[] args) { System.out.println(&quot;If you see the same value, then singleton was reused (yay!)&quot; + &quot;\\n&quot; + &quot;If you see different values, then 2 singletons were created (booo!!)&quot; + &quot;\\n\\n&quot; + &quot;RESULT:&quot; + &quot;\\n&quot;); Thread threadFoo = new Thread(new ThreadFoo()); Thread threadBar = new Thread(new ThreadBar()); threadFoo.start(); threadBar.start(); } static class ThreadFoo implements Runnable { @Override public void run() { Singleton singleton = Singleton.getInstance(&quot;FOO&quot;); System.out.println(singleton.value); } } static class ThreadBar implements Runnable { @Override public void run() { Singleton singleton = Singleton.getInstance(&quot;BAR&quot;); System.out.println(singleton.value); } } }  If you see the same value, then singleton was reused (yay!) If you see different values, then 2 singletons were created (booo!!) RESULT: FOO BAR  Single Thread package refactoring_guru.singleton.example.non_thread_safe; public class DemoSingleThread { public static void main(String[] args) { System.out.println(&quot;If you see the same value, then singleton was reused (yay!)&quot; + &quot;\\n&quot; + &quot;If you see different values, then 2 singletons were created (booo!!)&quot; + &quot;\\n\\n&quot; + &quot;RESULT:&quot; + &quot;\\n&quot;); Singleton singleton = Singleton.getInstance(&quot;FOO&quot;); Singleton anotherSingleton = Singleton.getInstance(&quot;BAR&quot;); System.out.println(singleton.value); System.out.println(anotherSingleton.value); } }  If you see the same value, then singleton was reused (yay!) If you see different values, then 2 singletons were created (booo!!) RESULT: FOO FOO  "},{"title":"Thread Safe​","type":1,"pageTitle":"Java Example","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/java/#thread-safe","content":"Singleton package refactoring_guru.singleton.example.thread_safe; public final class Singleton { // The field must be declared volatile so that double check lock would work // correctly. private static volatile Singleton instance; public String value; private Singleton(String value) { this.value = value; } public static Singleton getInstance(String value) { // The approach taken here is called double-checked locking (DCL). It // exists to prevent race condition between multiple threads that may // attempt to get singleton instance at the same time, creating separate // instances as a result. // // It may seem that having the `result` variable here is completely // pointless. There is, however, a very important caveat when // implementing double-checked locking in Java, which is solved by // introducing this local variable. // // You can read more info DCL issues in Java here: // https://refactoring.guru/java-dcl-issue Singleton result = instance; if (result != null) { return result; } synchronized(Singleton.class) { if (instance == null) { instance = new Singleton(value); } return instance; } } }  Multi Thread package refactoring_guru.singleton.example.thread_safe; public class DemoMultiThread { public static void main(String[] args) { System.out.println(&quot;If you see the same value, then singleton was reused (yay!)&quot; + &quot;\\n&quot; + &quot;If you see different values, then 2 singletons were created (booo!!)&quot; + &quot;\\n\\n&quot; + &quot;RESULT:&quot; + &quot;\\n&quot;); Thread threadFoo = new Thread(new ThreadFoo()); Thread threadBar = new Thread(new ThreadBar()); threadFoo.start(); threadBar.start(); } static class ThreadFoo implements Runnable { @Override public void run() { Singleton singleton = Singleton.getInstance(&quot;FOO&quot;); System.out.println(singleton.value); } } static class ThreadBar implements Runnable { @Override public void run() { Singleton singleton = Singleton.getInstance(&quot;BAR&quot;); System.out.println(singleton.value); } } }  If you see the same value, then singleton was reused (yay!) If you see different values, then 2 singletons were created (booo!!) RESULT: BAR BAR  "},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/javascript/","content":"JavaScript Example example 1 let cash = 0; // a private variable const CashRegister = { credit(amount) { cash += amount; return cash; }, debit(amount) { if (amount &lt;= cash) { cash -= amount; return true; } return false; }, total() { return cash; }, }; module.exports = CashRegister; const cashRegister1 = require(&quot;./Singleton&quot;); const cashRegister2 = require(&quot;./Singleton&quot;); cashRegister1.credit(25); cashRegister2.credit(5); console.log(`Total amount in cashRegister2 is ${cashRegister2.total()}`); // 30 example 2 class Scoreboard { constructor() { this.board = []; } join(name) { this.board.push({ name, points: 0, }); } leave(name) { this.board = this.board.filter((player) =&gt; player.name !== name); } update(name, points) { const player = this.board.findIndex((player) =&gt; player.name === name); if (player &gt; -1) { this.board[player].points += points; } } getBoard() { return this.board; } sort() { return this.board.sort((x, y) =&gt; y.points - x.points); } } /* scoreboard will show two players, but their points are 0 the reason is because although module is cached, scoreboard is being instantiated to 2 separate instances into Game class and Player class therefore it does not behave like a singleton To make this into a singleton, both the Player and Game class must access a single and common instance of the scoreboard class */ // module.exports = Scoreboard; // wrong singleton implementation module.exports = new Scoreboard(); // correct singleton implementation const Scores = require(&quot;./Scoreboard&quot;); // correct singleton import implementation class Game { join(player) { Scores.join(player.getName()); } scores() { return Scores.getBoard(); } getWinner() { return Scores.sort()[0]; } } module.exports = Game; const Scores = require(&quot;./Scoreboard&quot;); // correct singleton import implementation class Player { constructor(name) { this.name = name; } getName() { return this.name; } wins(points) { Scores.update(this.name, points); } loses(points) { Scores.update(this.name, -points); } } module.exports = Player; const Game = require(&quot;./Game&quot;); const Player = require(&quot;./Player&quot;); const Pete = new Player(&quot;Pete&quot;); const Mike = new Player(&quot;Mike&quot;); const Poker = new Game(); Poker.join(Pete); Poker.join(Mike); Pete.wins(20); Mike.wins(30); Mike.wins(40); Pete.wins(1000); Pete.loses(500); console.log(&quot;Scoreboard: &quot;, Poker.scores()); console.log( `Winner: ${Poker.getWinner().name} with ${Poker.getWinner().points} points` ); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/python/","content":"Python Example Non Thread Safe &quot;&quot;&quot; Singleton Design Pattern Intent: Lets you ensure that a class has only one instance, while providing a global access point to this instance. One instance per each subclass (if any). &quot;&quot;&quot; class SingletonMeta(type): &quot;&quot;&quot; The Singleton class can be implemented in different ways in Python. Some possible methods include: base class, decorator, metaclass. We will use the metaclass because it is best suited for this purpose. &quot;&quot;&quot; _instances = {} def __call__(cls, *args, **kwargs): &quot;&quot;&quot; Possible changes to the value of the `__init__` argument do not affect the returned instance. &quot;&quot;&quot; if cls not in cls._instances: instance = super().__call__(*args, **kwargs) cls._instances[cls] = instance return cls._instances[cls] class Singleton(metaclass=SingletonMeta): def some_business_logic(self): &quot;&quot;&quot; Finally, any singleton should define some business logic, which can be executed on its instance. &quot;&quot;&quot; # ... if __name__ == &quot;__main__&quot;: # The client code. s1 = Singleton() s2 = Singleton() if id(s1) == id(s2): print(&quot;Singleton works, both variables contain the same instance.&quot;) else: print(&quot;Singleton failed, variables contain different instances.&quot;) Singleton works, both variables contain the same instance. Thread Safe &quot;&quot;&quot; Singleton Design Pattern Intent: Lets you ensure that a class has only one instance, while providing a global access point to this instance. One instance per each subclass (if any). &quot;&quot;&quot; from threading import Lock, Thread class SingletonMeta(type): &quot;&quot;&quot; This is a thread-safe implementation of Singleton. &quot;&quot;&quot; _instances = {} _lock: Lock = Lock() &quot;&quot;&quot; We now have a lock object that will be used to synchronize threads during first access to the Singleton. &quot;&quot;&quot; def __call__(cls, *args, **kwargs): &quot;&quot;&quot; Possible changes to the value of the `__init__` argument do not affect the returned instance. &quot;&quot;&quot; # Now, imagine that the program has just been launched. Since there's no # Singleton instance yet, multiple threads can simultaneously pass the # previous conditional and reach this point almost at the same time. The # first of them will acquire lock and will proceed further, while the # rest will wait here. with cls._lock: # The first thread to acquire the lock, reaches this conditional, # goes inside and creates the Singleton instance. Once it leaves the # lock block, a thread that might have been waiting for the lock # release may then enter this section. But since the Singleton field # is already initialized, the thread won't create a new object. if cls not in cls._instances: instance = super().__call__(*args, **kwargs) cls._instances[cls] = instance return cls._instances[cls] class Singleton(metaclass=SingletonMeta): value: str = None &quot;&quot;&quot; We'll use this property to prove that our Singleton really works. &quot;&quot;&quot; def __init__(self, value: str) -&gt; None: self.value = value def some_business_logic(self): &quot;&quot;&quot; Finally, any singleton should define some business logic, which can be executed on its instance. &quot;&quot;&quot; def test_singleton(value: str) -&gt; None: singleton = Singleton(value) print(singleton.value) if __name__ == &quot;__main__&quot;: # The client code. print(&quot;If you see the same value, then singleton was reused (yay!)\\n&quot; &quot;If you see different values, &quot; &quot;then 2 singletons were created (booo!!)\\n\\n&quot; &quot;RESULT:\\n&quot;) process1 = Thread(target=test_singleton, args=(&quot;FOO&quot;,)) process2 = Thread(target=test_singleton, args=(&quot;BAR&quot;,)) process1.start() process2.start() If you see the same value, then singleton was reused (yay!) If you see different values, then 2 singletons were created (booo!!) RESULT: FOO FOO ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/python/example2","content":"Example 2 class Singleton: __instance = None def __new__(cls, val=None): if Singleton.__instance is None: Singleton.__instance = object.__new__(cls) Singleton.__instance.val = val return Singleton.__instance x = Singleton() x.val = &quot;burger&quot; print(x.val) # &quot;burger&quot; y = Singleton() y.val = &quot;chips&quot; print(y.val) # &quot;chips&quot; print(x.val) # &quot;chips&quot; ","keywords":""},{"title":"Example 3: Singleton Borg","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/python/example3","content":"Example 3: Singleton Borg class Borg: &quot;&quot;&quot;Borg class making class attributes global&quot;&quot;&quot; _shared_state = {} # Attribute dictionary def __init__(self): self.__dict__ = self._shared_state # Make it an attribute dictionary class Singleton(Borg): # Inherits from the Borg class &quot;&quot;&quot;This class now shares all its attributes among its various instances&quot;&quot;&quot; # This essentially makes the singleton objects an object-oriented global variable def __init__(self, **kwargs): Borg.__init__(self) # Update the attribute dictionary by inserting a new key-value pair self._shared_state.update(kwargs) def __str__(self): # Returns the attribute dictionary for printing return str(self._shared_state) # create a singleton object and add first acronym x = Singleton(HTTP=&quot;Hyper Text Transfer Protocol&quot;) # print the object print(x) # {'HTTP': 'Hyper Text Transfer Protocol'} # create another singleton object and if it refers to the same attribute dictionary by adding another acronym y = Singleton(SNMP=&quot;Single Network Management Protocol&quot;) # print the object print(y) # {'HTTP': 'Hyper Text Transfer Protocol', 'SNMP': 'Single Network Management Protocol'} ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/swift/","content":"Swift Example /// Singleton Design Pattern /// /// Intent: Lets you ensure that a class has only one instance, while providing /// a global access point to this instance. import XCTest /// The Singleton class defines the `shared` field that lets clients access the /// unique singleton instance. class Singleton { /// The static field that controls the access to the singleton instance. /// /// This implementation let you extend the Singleton class while keeping /// just one instance of each subclass around. static var shared: Singleton = { let instance = Singleton() // ... configure the instance // ... return instance }() /// The Singleton's initializer should always be private to prevent direct /// construction calls with the `new` operator. private init() {} /// Finally, any singleton should define some business logic, which can be /// executed on its instance. func someBusinessLogic() -&gt; String { // ... return &quot;Result of the 'someBusinessLogic' call&quot; } } /// Singletons should not be cloneable. extension Singleton: NSCopying { func copy(with zone: NSZone? = nil) -&gt; Any { return self } } /// The client code. class Client { // ... static func someClientCode() { let instance1 = Singleton.shared let instance2 = Singleton.shared if (instance1 === instance2) { print(&quot;Singleton works, both variables contain the same instance.&quot;) } else { print(&quot;Singleton failed, variables contain different instances.&quot;) } } // ... } /// Let's see how it all works together. class SingletonConceptual: XCTestCase { func testSingletonConceptual() { Client.someClientCode() } } Singleton works, both variables contain the same instance. ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/swift/example2","content":"Example 2 import XCTest /// Singleton Design Pattern /// /// Intent: Ensure that class has a single instance, and provide a global point /// of access to it. class SingletonRealWorld: XCTestCase { func testSingletonRealWorld() { /// There are two view controllers. /// /// MessagesListVC displays a list of last messages from a user's chats. /// ChatVC displays a chat with a friend. /// /// FriendsChatService fetches messages from a server and provides all /// subscribers (view controllers in our example) with new and removed /// messages. /// /// FriendsChatService is used by both view controllers. It can be /// implemented as an instance of a class as well as a global variable. /// /// In this example, it is important to have only one instance that /// performs resource-intensive work. let listVC = MessagesListVC() let chatVC = ChatVC() listVC.startReceiveMessages() chatVC.startReceiveMessages() /// ... add view controllers to the navigation stack ... } } class BaseVC: UIViewController, MessageSubscriber { func accept(new messages: [Message]) { /// handle new messages in the base class } func accept(removed messages: [Message]) { /// handle removed messages in the base class } func startReceiveMessages() { /// The singleton can be injected as a dependency. However, from an /// informational perspective, this example calls FriendsChatService /// directly to illustrate the intent of the pattern, which is: &quot;...to /// provide the global point of access to the instance...&quot; FriendsChatService.shared.add(subscriber: self) } } class MessagesListVC: BaseVC { override func accept(new messages: [Message]) { print(&quot;MessagesListVC accepted 'new messages'&quot;) /// handle new messages in the child class } override func accept(removed messages: [Message]) { print(&quot;MessagesListVC accepted 'removed messages'&quot;) /// handle removed messages in the child class } override func startReceiveMessages() { print(&quot;MessagesListVC starts receive messages&quot;) super.startReceiveMessages() } } class ChatVC: BaseVC { override func accept(new messages: [Message]) { print(&quot;ChatVC accepted 'new messages'&quot;) /// handle new messages in the child class } override func accept(removed messages: [Message]) { print(&quot;ChatVC accepted 'removed messages'&quot;) /// handle removed messages in the child class } override func startReceiveMessages() { print(&quot;ChatVC starts receive messages&quot;) super.startReceiveMessages() } } /// Protocol for call-back events protocol MessageSubscriber { func accept(new messages: [Message]) func accept(removed messages: [Message]) } /// Protocol for communication with a message service protocol MessageService { func add(subscriber: MessageSubscriber) } /// Message domain model struct Message { let id: Int let text: String } class FriendsChatService: MessageService { static let shared = FriendsChatService() private var subscribers = [MessageSubscriber]() func add(subscriber: MessageSubscriber) { /// In this example, fetching starts again by adding a new subscriber subscribers.append(subscriber) /// Please note, the first subscriber will receive messages again when /// the second subscriber is added startFetching() } func startFetching() { /// Set up the network stack, establish a connection... /// ...and retrieve data from a server let newMessages = [Message(id: 0, text: &quot;Text0&quot;), Message(id: 5, text: &quot;Text5&quot;), Message(id: 10, text: &quot;Text10&quot;)] let removedMessages = [Message(id: 1, text: &quot;Text0&quot;)] /// Send updated data to subscribers receivedNew(messages: newMessages) receivedRemoved(messages: removedMessages) } } private extension FriendsChatService { func receivedNew(messages: [Message]) { subscribers.forEach { item in item.accept(new: messages) } } func receivedRemoved(messages: [Message]) { subscribers.forEach { item in item.accept(removed: messages) } } } MessagesListVC starts receive messages MessagesListVC accepted 'new messages' MessagesListVC accepted 'removed messages' ======== At this point, the second subscriber is added ====== ChatVC starts receive messages MessagesListVC accepted 'new messages' ChatVC accepted 'new messages' MessagesListVC accepted 'removed messages' ChatVC accepted 'removed messages' ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Creational_patterns/Singleton/typescript/","content":"TypeScript Example /** * Singleton Design Pattern * * Intent: Lets you ensure that a class has only one instance, while providing a * global access point to this instance. */ /** * The Singleton class defines the `getInstance` method that lets clients access * the unique singleton instance. */ class Singleton { private static instance: Singleton; /** * The Singleton's constructor should always be private to prevent direct * construction calls with the `new` operator. */ private constructor() {} /** * The static method that controls the access to the singleton instance. * * This implementation let you subclass the Singleton class while keeping * just one instance of each subclass around. */ public static getInstance(): Singleton { if (!Singleton.instance) { Singleton.instance = new Singleton(); } return Singleton.instance; } /** * Finally, any singleton should define some business logic, which can be * executed on its instance. */ public someBusinessLogic() { // ... } } /** * The client code. */ function clientCode() { const s1 = Singleton.getInstance(); const s2 = Singleton.getInstance(); if (s1 === s2) { console.log(&quot;Singleton works, both variables contain the same instance.&quot;); } else { console.log(&quot;Singleton failed, variables contain different instances.&quot;); } } clientCode(); Singleton works, both variables contain the same instance. ","keywords":""},{"title":"Structural Patterns","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/","content":"","keywords":""},{"title":"Adapter​","type":1,"pageTitle":"Structural Patterns","url":"docs/interviewPrep/designPatterns/Structural_patterns/#adapter","content":"Convert the interface of a class into another interface clients expectAdapter lets classes work together that couldn't otherwise because of incompatible interfacesDeal with relationships between classes &amp; their subclasses (focus on class relationships)relationships are established through inheritance, so they are static-fixed at compile timeDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extent "},{"title":"Bridge​","type":1,"pageTitle":"Structural Patterns","url":"docs/interviewPrep/designPatterns/Structural_patterns/#bridge","content":"Decouple an abstraction from its implementation so that the two can vary independentlyDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extent "},{"title":"Composite​","type":1,"pageTitle":"Structural Patterns","url":"docs/interviewPrep/designPatterns/Structural_patterns/#composite","content":"Compose objects into tree structures to represent part-whole hierarchiesComposite lets clients treat individual objects and compositions of objects uniformlyDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extentoften used with Iterator or Visitorhave similar designs but different intents with DecoratorMany objects in a design come from the analysis model, but often end up with classes that have no counterparts in the real world higher-level classes: introduces an abstraction for treating objects uniformly that doesn't have a physical counterpartstrict modeling of the real world leads to a system that reflects today's realities but not necessarily tomorrow'sabstractions that emerge during design are key to making a design flexible "},{"title":"Decorator​","type":1,"pageTitle":"Structural Patterns","url":"docs/interviewPrep/designPatterns/Structural_patterns/#decorator","content":"Attach additional responsibilities to an object dynamicallyDecorators provide a flexible alternative to subclassing for extending functionalityDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extenthave similar designs but different intents with CompositeDesign patterns specify relationships between interfaces, by requiring some classes to have similar interfaces or placing constraints on the interfaces of some classes Decorator pattern require the interfaces of Decorator objects to be identical to the decorated objects "},{"title":"Facade​","type":1,"pageTitle":"Structural Patterns","url":"docs/interviewPrep/designPatterns/Structural_patterns/#facade","content":"Provide a unified interface to a set of interfaces in a subsystemFacade defines a higher-level interface that makes the subsystem easier to useDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extentDesign patterns can address the issue of objects being able to vary tremendously in size and number Facade pattern: describes how to represent complete subsystems as objects "},{"title":"Flyweight​","type":1,"pageTitle":"Structural Patterns","url":"docs/interviewPrep/designPatterns/Structural_patterns/#flyweight","content":"Use sharing to support large numbers of fine-grained objects efficientlyDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extentDesign patterns can address the issue of objects being able to vary tremendously in size and number Flyweight pattern: describes how to support huge numbers of objects at the finest granularities "},{"title":"Proxy​","type":1,"pageTitle":"Structural Patterns","url":"docs/interviewPrep/designPatterns/Structural_patterns/#proxy","content":"Provide a surrogate or placeholder for another object to control access to itDeal with object relationships, which can be changed at run time and are more dynamicAlmost all patterns use inheritance to some extentDesign patterns specify relationships between interfaces, by requiring some classes to have similar interfaces or placing constraints on the interfaces of some classes Proxy pattern require the interfaces of Proxy objects to be identical to the proxied objects "},{"title":"Adapter","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/","content":"","keywords":""},{"title":"When to use​","type":1,"pageTitle":"Adapter","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/#when-to-use","content":"Make old component usable in a new systemMake an &quot;off-the-shelf&quot; solution usable in a system that is not fully compatibleexample if we are using a class, and a consumer is using the methodsthen we need to switch from the current class to a better class the better class offers a different interface and will require the client code to be refactored to use itmigration will not be easy, especially if it is a large enterprise app where methods are deeply integrated and extensively used will need a decoupled solution which is easy to implement and does not involve refactoring as much as possible by using the adapter pattern, refactoring can be minimizeddone by mapping methods from better class to how our clients expects the adapter helps the consumer adapt to a new interface by using the pattern "},{"title":"Structure​","type":1,"pageTitle":"Adapter","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/#structure","content":" The Client is a class that contains the existing business logic of the program. The Client Interface describes a protocol that other classes must follow to be able to collaborate with the client code. The Service is some useful class (usually 3rd-party or legacy). The client can’t use this class directly because it has an incompatible interface. The Adapter is a class that’s able to work with both the client and the service: it implements the client interface, while wrapping the service object. The adapter receives calls from the client via the adapter interface and translates them into calls to the wrapped service object in a format it can understand. The client code doesn’t get coupled to the concrete adapter class as long as it works with the adapter via the client interface. Thanks to this, you can introduce new types of adapters into the program without breaking the existing client code.This can be useful when the interface of the service class gets changed or replaced: you can just create a new adapter class without changing the client code. "},{"title":"Summary​","type":1,"pageTitle":"Adapter","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/#summary","content":"the adapter pattern is used to create a bridge between 2 different interfacesremoves incompatibilities between the interfacesprevents or minimizes refactoring client application codelets you build packages with an opinionated API, with custom adapters for maximum compatibility "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/cPlusPlus/","content":"C++ Example #include &lt;algorithm&gt; #include &lt;iostream&gt; #include &lt;string&gt; /** * Adapter Design Pattern * * Intent: Provides a unified interface that allows objects with incompatible * interfaces to collaborate. */ /** * The Target defines the domain-specific interface used by the client code. */ class Target { public: virtual ~Target() = default; virtual std::string Request() const { return &quot;Target: The default target's behavior.&quot;; } }; /** * The Adaptee contains some useful behavior, but its interface is incompatible * with the existing client code. The Adaptee needs some adaptation before the * client code can use it. */ class Adaptee { public: std::string SpecificRequest() const { return &quot;.eetpadA eht fo roivaheb laicepS&quot;; } }; /** * The Adapter makes the Adaptee's interface compatible with the Target's * interface. */ class Adapter : public Target { private: Adaptee *adaptee_; public: Adapter(Adaptee *adaptee) : adaptee_(adaptee) {} std::string Request() const override { std::string to_reverse = this-&gt;adaptee_-&gt;SpecificRequest(); std::reverse(to_reverse.begin(), to_reverse.end()); return &quot;Adapter: (TRANSLATED) &quot; + to_reverse; } }; /** * The client code supports all classes that follow the Target interface. */ void ClientCode(const Target *target) { std::cout &lt;&lt; target-&gt;Request(); } int main() { std::cout &lt;&lt; &quot;Client: I can work just fine with the Target objects:\\n&quot;; Target *target = new Target; ClientCode(target); std::cout &lt;&lt; &quot;\\n\\n&quot;; Adaptee *adaptee = new Adaptee; std::cout &lt;&lt; &quot;Client: The Adaptee class has a weird interface. See, I don't understand it:\\n&quot;; std::cout &lt;&lt; &quot;Adaptee: &quot; &lt;&lt; adaptee-&gt;SpecificRequest(); std::cout &lt;&lt; &quot;\\n\\n&quot;; std::cout &lt;&lt; &quot;Client: But I can work with it via the Adapter:\\n&quot;; Adapter *adapter = new Adapter(adaptee); ClientCode(adapter); std::cout &lt;&lt; &quot;\\n&quot;; delete target; delete adaptee; delete adapter; return 0; } Client: I can work just fine with the Target objects: Target: The default target's behavior. Client: The Adaptee class has a weird interface. See, I don't understand it: Adaptee: .eetpadA eht fo roivaheb laicepS Client: But I can work with it via the Adapter: Adapter: (TRANSLATED) Special behavior of the Adaptee. ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/cPlusPlus/example2","content":"Example 2 #include &lt;algorithm&gt; #include &lt;iostream&gt; #include &lt;string&gt; /** * Adapter Design Pattern * * Intent: Provides a unified interface that allows objects with incompatible * interfaces to collaborate. */ /** * The Target defines the domain-specific interface used by the client code. */ class Target { public: virtual ~Target() = default; virtual std::string Request() const { return &quot;Target: The default target's behavior.&quot;; } }; /** * The Adaptee contains some useful behavior, but its interface is incompatible * with the existing client code. The Adaptee needs some adaptation before the * client code can use it. */ class Adaptee { public: std::string SpecificRequest() const { return &quot;.eetpadA eht fo roivaheb laicepS&quot;; } }; /** * The Adapter makes the Adaptee's interface compatible with the Target's * interface using multiple inheritance. */ class Adapter : public Target, public Adaptee { public: Adapter() {} std::string Request() const override { std::string to_reverse = SpecificRequest(); std::reverse(to_reverse.begin(), to_reverse.end()); return &quot;Adapter: (TRANSLATED) &quot; + to_reverse; } }; /** * The client code supports all classes that follow the Target interface. */ void ClientCode(const Target *target) { std::cout &lt;&lt; target-&gt;Request(); } int main() { std::cout &lt;&lt; &quot;Client: I can work just fine with the Target objects:\\n&quot;; Target *target = new Target; ClientCode(target); std::cout &lt;&lt; &quot;\\n\\n&quot;; Adaptee *adaptee = new Adaptee; std::cout &lt;&lt; &quot;Client: The Adaptee class has a weird interface. See, I don't understand it:\\n&quot;; std::cout &lt;&lt; &quot;Adaptee: &quot; &lt;&lt; adaptee-&gt;SpecificRequest(); std::cout &lt;&lt; &quot;\\n\\n&quot;; std::cout &lt;&lt; &quot;Client: But I can work with it via the Adapter:\\n&quot;; Adapter *adapter = new Adapter; ClientCode(adapter); std::cout &lt;&lt; &quot;\\n&quot;; delete target; delete adaptee; delete adapter; return 0; } Client: I can work just fine with the Target objects: Target: The default target's behavior. Client: The Adaptee class has a weird interface. See, I don't understand it: Adaptee: .eetpadA eht fo roivaheb laicepS Client: But I can work with it via the Adapter: Adapter: (TRANSLATED) Special behavior of the Adaptee. ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/cSharp/","content":"C# Example // Adapter Design Pattern // // Intent: Provides a unified interface that allows objects with incompatible // interfaces to collaborate. using System; namespace RefactoringGuru.DesignPatterns.Adapter.Conceptual { // The Target defines the domain-specific interface used by the client code. public interface ITarget { string GetRequest(); } // The Adaptee contains some useful behavior, but its interface is // incompatible with the existing client code. The Adaptee needs some // adaptation before the client code can use it. class Adaptee { public string GetSpecificRequest() { return &quot;Specific request.&quot;; } } // The Adapter makes the Adaptee's interface compatible with the Target's // interface. class Adapter : ITarget { private readonly Adaptee _adaptee; public Adapter(Adaptee adaptee) { this._adaptee = adaptee; } public string GetRequest() { return $&quot;This is '{this._adaptee.GetSpecificRequest()}'&quot;; } } class Program { static void Main(string[] args) { Adaptee adaptee = new Adaptee(); ITarget target = new Adapter(adaptee); Console.WriteLine(&quot;Adaptee interface is incompatible with the client.&quot;); Console.WriteLine(&quot;But with adapter client can call it's method.&quot;); Console.WriteLine(target.GetRequest()); } } } Adaptee interface is incompatible with the client. But with adapter client can call it's method. This is 'Specific request.' ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/go/","content":"Go Example package main import &quot;fmt&quot; type client struct { } func (c *client) insertLightningConnectorIntoComputer(com computer) { fmt.Println(&quot;Client inserts Lightning connector into computer.&quot;) com.insertIntoLightningPort() } package main type computer interface { insertIntoLightningPort() } package main import &quot;fmt&quot; type mac struct { } func (m *mac) insertIntoLightningPort() { fmt.Println(&quot;Lightning connector is plugged into mac machine.&quot;) } package main import &quot;fmt&quot; type windows struct{} func (w *windows) insertIntoUSBPort() { fmt.Println(&quot;USB connector is plugged into windows machine.&quot;) } package main import &quot;fmt&quot; type windowsAdapter struct { windowMachine *windows } func (w *windowsAdapter) insertIntoLightningPort() { fmt.Println(&quot;Adapter converts Lightning signal to USB.&quot;) w.windowMachine.insertIntoUSBPort() } package main func main() { client := &amp;client{} mac := &amp;mac{} client.insertLightningConnectorIntoComputer(mac) windowsMachine := &amp;windows{} windowsMachineAdapter := &amp;windowsAdapter{ windowMachine: windowsMachine, } client.insertLightningConnectorIntoComputer(windowsMachineAdapter) } Client inserts Lightning connector into computer. Lightning connector is plugged into mac machine. Client inserts Lightning connector into computer. Adapter converts Lightning signal to USB. USB connector is plugged into windows machine. ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/java/","content":"Java Example adapters adapters/SquarePegAdapter.java package refactoring_guru.adapter.example.adapters; import refactoring_guru.adapter.example.round.RoundPeg; import refactoring_guru.adapter.example.square.SquarePeg; /** * Adapter allows fitting square pegs into round holes. */ public class SquarePegAdapter extends RoundPeg { private SquarePeg peg; public SquarePegAdapter(SquarePeg peg) { this.peg = peg; } @Override public double getRadius() { double result; // Calculate a minimum circle radius, which can fit this peg. result = (Math.sqrt(Math.pow((peg.getWidth() / 2), 2) * 2)); return result; } } round round/RoundHole.java package refactoring_guru.adapter.example.round; /** * RoundHoles are compatible with RoundPegs. */ public class RoundHole { private double radius; public RoundHole(double radius) { this.radius = radius; } public double getRadius() { return radius; } public boolean fits(RoundPeg peg) { boolean result; result = (this.getRadius() &gt;= peg.getRadius()); return result; } } round/RoundPeg.java package refactoring_guru.adapter.example.round; /** * RoundPegs are compatible with RoundHoles. */ public class RoundPeg { private double radius; public RoundPeg() {} public RoundPeg(double radius) { this.radius = radius; } public double getRadius() { return radius; } } square square/SquarePeg.java package refactoring_guru.adapter.example.square; /** * SquarePegs are not compatible with RoundHoles (they were implemented by * previous development team). But we have to integrate them into our program. */ public class SquarePeg { private double width; public SquarePeg(double width) { this.width = width; } public double getWidth() { return width; } public double getSquare() { double result; result = Math.pow(this.width, 2); return result; } } Demo.java package refactoring_guru.adapter.example; import refactoring_guru.adapter.example.adapters.SquarePegAdapter; import refactoring_guru.adapter.example.round.RoundHole; import refactoring_guru.adapter.example.round.RoundPeg; import refactoring_guru.adapter.example.square.SquarePeg; /** * Somewhere in client code... */ public class Demo { public static void main(String[] args) { // Round fits round, no surprise. RoundHole hole = new RoundHole(5); RoundPeg rpeg = new RoundPeg(5); if (hole.fits(rpeg)) { System.out.println(&quot;Round peg r5 fits round hole r5.&quot;); } SquarePeg smallSqPeg = new SquarePeg(2); SquarePeg largeSqPeg = new SquarePeg(20); // hole.fits(smallSqPeg); // Won't compile. // Adapter solves the problem. SquarePegAdapter smallSqPegAdapter = new SquarePegAdapter(smallSqPeg); SquarePegAdapter largeSqPegAdapter = new SquarePegAdapter(largeSqPeg); if (hole.fits(smallSqPegAdapter)) { System.out.println(&quot;Square peg w2 fits round hole r5.&quot;); } if (!hole.fits(largeSqPegAdapter)) { System.out.println(&quot;Square peg w20 does not fit into round hole r5.&quot;); } } } Round peg r5 fits round hole r5. Square peg w2 fits round hole r5. Square peg w20 does not fit into round hole r5. ","keywords":""},{"title":"JavaScript","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/javascript/","content":"JavaScript class Db { constructor(db) { this.db = db; } init(collection) { return this.db.defaults({[collection]: []}).write(); } add({collection, data}) { return this.db.get(collection).push(data).write(); } get(collection) { return this.db.get(collection).value(); } } module.exports = Db; class LokiAdapter { constructor(lokiDb) { this.lokiDb = lokiDb; this.collection = null; this.op = null; } defaults(obj) { this.collection = Object.keys(obj)[0]; this.op = &quot;INIT&quot;; return this; } get(collection) { this.collection = this.lokiDb.getCollection(collection); return this; } push(data) { this.dataToPush = data; this.op = &quot;WRITE&quot;; return this; } value() { return this.collection.find(); } write() { if (this.op) { switch (this.op) { case &quot;INIT&quot;: this.lokiDb.addCollection(this.collection); this.collection = null; this.op = null; break; case &quot;WRITE&quot;: this.collection.insert(this.dataToPush); this.dataToPush = null; this.collection = null; this.op = null; break; } this.lokiDb.saveDatabase(); } return this; } } module.exports = LokiAdapter; { &quot;filename&quot;: &quot;dbs.json&quot;, &quot;collections&quot;: [ { &quot;name&quot;: &quot;users&quot;, &quot;data&quot;: [ { &quot;name&quot;: &quot;John Doe&quot;, &quot;age&quot;: 32, &quot;meta&quot;: {&quot;revision&quot;: 0, &quot;created&quot;: 1608665527485, &quot;version&quot;: 0}, &quot;$loki&quot;: 1 } ], &quot;idIndex&quot;: null, &quot;binaryIndices&quot;: {}, &quot;constraints&quot;: null, &quot;uniqueNames&quot;: [], &quot;transforms&quot;: {}, &quot;objType&quot;: &quot;users&quot;, &quot;dirty&quot;: false, &quot;cachedIndex&quot;: null, &quot;cachedBinaryIndex&quot;: null, &quot;cachedData&quot;: null, &quot;adaptiveBinaryIndices&quot;: true, &quot;transactional&quot;: false, &quot;cloneObjects&quot;: false, &quot;cloneMethod&quot;: &quot;parse-stringify&quot;, &quot;asyncListeners&quot;: false, &quot;disableMeta&quot;: false, &quot;disableChangesApi&quot;: true, &quot;disableDeltaChangesApi&quot;: true, &quot;autoupdate&quot;: false, &quot;serializableIndices&quot;: true, &quot;disableFreeze&quot;: true, &quot;ttl&quot;: null, &quot;maxId&quot;: 1, &quot;DynamicViews&quot;: [], &quot;events&quot;: { &quot;insert&quot;: [], &quot;update&quot;: [], &quot;pre-insert&quot;: [], &quot;pre-update&quot;: [], &quot;close&quot;: [], &quot;flushbuffer&quot;: [], &quot;error&quot;: [], &quot;delete&quot;: [null], &quot;warning&quot;: [null] }, &quot;changes&quot;: [], &quot;dirtyIds&quot;: [] } ], &quot;databaseVersion&quot;: 1.5, &quot;engineVersion&quot;: 1.5, &quot;autosave&quot;: false, &quot;autosaveInterval&quot;: 5000, &quot;autosaveHandle&quot;: null, &quot;throttledSaves&quot;: true, &quot;options&quot;: {&quot;serializationMethod&quot;: &quot;normal&quot;, &quot;destructureDelimiter&quot;: &quot;$&lt;\\n&quot;}, &quot;persistenceMethod&quot;: &quot;fs&quot;, &quot;persistenceAdapter&quot;: null, &quot;verbose&quot;: false, &quot;events&quot;: { &quot;init&quot;: [null], &quot;loaded&quot;: [], &quot;flushChanges&quot;: [], &quot;close&quot;: [], &quot;changes&quot;: [], &quot;warning&quot;: [] }, &quot;ENV&quot;: &quot;NODEJS&quot; } const Db = require(&quot;./Db&quot;); const {join} = require(&quot;path&quot;); // Database File const dbFile = join(&quot;dbs.json&quot;); // old class // LowDB // const low = require(&quot;lowdb&quot;); // const FileSync = require(&quot;lowdb/adapters/FileSync&quot;); // const adapter = new FileSync(dbFile); // const dbs = low(adapter); // DB module instance // const db = new Db(dbs); // new class // LokiJS const loki = require(&quot;lokijs&quot;); const LokiAdapter = require(&quot;./LokiAdapter&quot;); const ldb = new loki(dbFile); const LokiAdp = new LokiAdapter(ldb); // DB module instance const db = new Db(LokiAdp); db.init(&quot;users&quot;); db.add({ collection: &quot;users&quot;, data: { name: &quot;John Doe&quot;, age: 32, }, }); console.log(db.get(&quot;users&quot;)); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/python/","content":"Python Example &quot;&quot;&quot; Adapter Design Pattern Intent: Provides a unified interface that allows objects with incompatible interfaces to collaborate. &quot;&quot;&quot; class Target: &quot;&quot;&quot; The Target defines the domain-specific interface used by the client code. &quot;&quot;&quot; def request(self) -&gt; str: return &quot;Target: The default target's behavior.&quot; class Adaptee: &quot;&quot;&quot; The Adaptee contains some useful behavior, but its interface is incompatible with the existing client code. The Adaptee needs some adaptation before the client code can use it. &quot;&quot;&quot; def specific_request(self) -&gt; str: return &quot;.eetpadA eht fo roivaheb laicepS&quot; class Adapter(Target, Adaptee): &quot;&quot;&quot; The Adapter makes the Adaptee's interface compatible with the Target's interface via multiple inheritance. &quot;&quot;&quot; def request(self) -&gt; str: return f&quot;Adapter: (TRANSLATED) {self.specific_request()[::-1]}&quot; def client_code(target: &quot;Target&quot;) -&gt; None: &quot;&quot;&quot; The client code supports all classes that follow the Target interface. &quot;&quot;&quot; print(target.request(), end=&quot;&quot;) if __name__ == &quot;__main__&quot;: print(&quot;Client: I can work just fine with the Target objects:&quot;) target = Target() client_code(target) print(&quot;\\n&quot;) adaptee = Adaptee() print(&quot;Client: The Adaptee class has a weird interface. &quot; &quot;See, I don't understand it:&quot;) print(f&quot;Adaptee: {adaptee.specific_request()}&quot;, end=&quot;\\n\\n&quot;) print(&quot;Client: But I can work with it via the Adapter:&quot;) adapter = Adapter() client_code(adapter) Client: I can work just fine with the Target objects: Target: The default target's behavior. Client: The Adaptee class has a weird interface. See, I don't understand it: Adaptee: .eetpadA eht fo roivaheb laicepS Client: But I can work with it via the Adapter: Adapter: (TRANSLATED) Special behavior of the Adaptee. ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/python/example2","content":"Example 2 # Adapter (source) interface class EuropeanSocketInterface: def voltage(self): pass def live(self): pass def neutral(self): pass def earth(self): pass # Target interface class USASocketInterface: def voltage(self): pass def live(self): pass def neutral(self): pass class EuropeanSocket(EuropeanSocketInterface): def voltage(self): return 230 def live(self): return 1 def neutral(self): return -1 def earth(self): return 0 class AmericanKettle: __power = None def __init__(self, power): self.__power = power def boil(self): if self.__power.voltage() &gt; 110: print(&quot;Kettle on fire!&quot;) else: if self.__power.live() == 1 and self.__power.neutral() == -1: print(&quot;Coffee time!&quot;) else: print(&quot;No power.&quot;) class Adapter(USASocketInterface): __socket = None def __init__(self, socket): self.__socket = socket def voltage(self): return 110 def live(self): return self.__socket.live() def neutral(self): return self.__socket.neutral() from adapter import EuropeanSocket, AmericanKettle, Adapter socket = EuropeanSocket() kettle = AmericanKettle(socket) kettle.boil() adapter = Adapter(socket) kettle = AmericanKettle(adapter) kettle.boil() ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/swift/","content":"Swift Example /// Adapter Design Pattern /// /// Intent: Provides a unified interface that allows objects with incompatible /// interfaces to collaborate. import XCTest /// The Target defines the domain-specific interface used by the client code. class Target { func request() -&gt; String { return &quot;Target: The default target's behavior.&quot; } } /// The Adaptee contains some useful behavior, but its interface is incompatible /// with the existing client code. The Adaptee needs some adaptation before the /// client code can use it. class Adaptee { public func specificRequest() -&gt; String { return &quot;.eetpadA eht fo roivaheb laicepS&quot; } } /// The Adapter makes the Adaptee's interface compatible with the Target's /// interface. class Adapter: Target { private var adaptee: Adaptee init(_ adaptee: Adaptee) { self.adaptee = adaptee } override func request() -&gt; String { return &quot;Adapter: (TRANSLATED) &quot; + adaptee.specificRequest().reversed() } } /// The client code supports all classes that follow the Target interface. class Client { // ... static func someClientCode(target: Target) { print(target.request()) } // ... } /// Let's see how it all works together. class AdapterConceptual: XCTestCase { func testAdapterConceptual() { print(&quot;Client: I can work just fine with the Target objects:&quot;) Client.someClientCode(target: Target()) let adaptee = Adaptee() print(&quot;Client: The Adaptee class has a weird interface. See, I don't understand it:&quot;) print(&quot;Adaptee: &quot; + adaptee.specificRequest()) print(&quot;Client: But I can work with it via the Adapter:&quot;) Client.someClientCode(target: Adapter(adaptee)) } } Client: I can work just fine with the Target objects: Target: The default target's behavior. Client: The Adaptee class has a weird interface. See, I don't understand it: Adaptee: .eetpadA eht fo roivaheb laicepS Client: But I can work with it via the Adapter: Adapter: (TRANSLATED) Special behavior of the Adaptee. ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/swift/example2","content":"Example 2 import XCTest import UIKit /// Adapter Design Pattern /// /// Intent: Convert the interface of a class into the interface clients expect. /// Adapter lets classes work together that couldn't work otherwise because of /// incompatible interfaces. class AdapterRealWorld: XCTestCase { /// Example. Let's assume that our app perfectly works with Facebook /// authorization. However, users ask you to add sign in via Twitter. /// /// Unfortunately, Twitter SDK has a different authorization method. /// /// Firstly, you have to create the new protocol 'AuthService' and insert /// the authorization method of Facebook SDK. /// /// Secondly, write an extension for Twitter SDK and implement methods of /// AuthService protocol, just a simple redirect. /// /// Thirdly, write an extension for Facebook SDK. You should not write any /// code at this point as methods already implemented by Facebook SDK. /// /// It just tells a compiler that both SDKs have the same interface. func testAdapterRealWorld() { print(&quot;Starting an authorization via Facebook&quot;) startAuthorization(with: FacebookAuthSDK()) print(&quot;Starting an authorization via Twitter.&quot;) startAuthorization(with: TwitterAuthSDK()) } func startAuthorization(with service: AuthService) { /// The current top view controller of the app let topViewController = UIViewController() service.presentAuthFlow(from: topViewController) } } protocol AuthService { func presentAuthFlow(from viewController: UIViewController) } class FacebookAuthSDK { func presentAuthFlow(from viewController: UIViewController) { /// Call SDK methods and pass a view controller print(&quot;Facebook WebView has been shown.&quot;) } } class TwitterAuthSDK { func startAuthorization(with viewController: UIViewController) { /// Call SDK methods and pass a view controller print(&quot;Twitter WebView has been shown. Users will be happy :)&quot;) } } extension TwitterAuthSDK: AuthService { /// This is an adapter /// /// Yeah, we are able to not create another class and just extend an /// existing one func presentAuthFlow(from viewController: UIViewController) { print(&quot;The Adapter is called! Redirecting to the original method...&quot;) self.startAuthorization(with: viewController) } } extension FacebookAuthSDK: AuthService { /// This extension just tells a compiler that both SDKs have the same /// interface. } Starting an authorization via Facebook Facebook WebView has been shown /// Starting an authorization via Twitter The Adapter is called! Redirecting to the original method... Twitter WebView has been shown. Users will be happy :) ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Adapter/typescript/","content":"TypeScript Example /** * Adapter Design Pattern * * Intent: Provides a unified interface that allows objects with incompatible * interfaces to collaborate. */ /** * The Target defines the domain-specific interface used by the client code. */ class Target { public request(): string { return &quot;Target: The default target's behavior.&quot;; } } /** * The Adaptee contains some useful behavior, but its interface is incompatible * with the existing client code. The Adaptee needs some adaptation before the * client code can use it. */ class Adaptee { public specificRequest(): string { return &quot;.eetpadA eht fo roivaheb laicepS&quot;; } } /** * The Adapter makes the Adaptee's interface compatible with the Target's * interface. */ class Adapter extends Target { private adaptee: Adaptee; constructor(adaptee: Adaptee) { super(); this.adaptee = adaptee; } public request(): string { const result = this.adaptee.specificRequest().split(&quot;&quot;).reverse().join(&quot;&quot;); return `Adapter: (TRANSLATED) ${result}`; } } /** * The client code supports all classes that follow the Target interface. */ function clientCode(target: Target) { console.log(target.request()); } console.log(&quot;Client: I can work just fine with the Target objects:&quot;); const target = new Target(); clientCode(target); console.log(&quot;&quot;); const adaptee = new Adaptee(); console.log( &quot;Client: The Adaptee class has a weird interface. See, I don't understand it:&quot; ); console.log(`Adaptee: ${adaptee.specificRequest()}`); console.log(&quot;&quot;); console.log(&quot;Client: But I can work with it via the Adapter:&quot;); const adapter = new Adapter(adaptee); clientCode(adapter); Client: I can work just fine with the Target objects: Target: The default target's behavior. Client: The Adaptee class has a weird interface. See, I don't understand it: Adaptee: .eetpadA eht fo roivaheb laicepS Client: But I can work with it via the Adapter: Adapter: (TRANSLATED) Special behavior of the Adaptee. ","keywords":""},{"title":"Bridge","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Bridge/","content":"","keywords":""},{"title":"Why use the Bridge pattern​","type":1,"pageTitle":"Bridge","url":"docs/interviewPrep/designPatterns/Structural_patterns/Bridge/#why-use-the-bridge-pattern","content":"it is useful for dealing with cross-platform appssupporting multiple types of database serversworking with several API providers of a certain kind e.g.: cloud platforms, social networks "},{"title":"Structure​","type":1,"pageTitle":"Bridge","url":"docs/interviewPrep/designPatterns/Structural_patterns/Bridge/#structure","content":" The Abstraction provides high-level control logic. It relies on the implementation object to do the actual low-level work. The Implementation declares the interface that’s common for all concrete implementations. An abstraction can only communicate with an implementation object via methods that are declared here.The abstraction may list the same methods as the implementation, but usually the abstraction declares some complex behaviors that rely on a wide variety of primitive operations declared by the implementation. Concrete Implementations contain platform-specific code. Refined Abstractions provide variants of control logic. Like their parent, they work with different implementations via the general implementation interface. Usually, the Client is only interested in working with the abstraction. However, it’s the client’s job to link the abstraction object with one of the implementation objects. "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Bridge/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; #include &lt;string&gt; /** * Bridge Design Pattern * * Intent: Lets you split a large class or a set of closely related classes into * two separate hierarchies—abstraction and implementation—which can be * developed independently of each other. * * A * / \\ A N * Aa Ab ===&gt; / \\ / \\ * / \\ / \\ Aa(N) Ab(N) 1 2 * Aa1 Aa2 Ab1 Ab2 */ /** * The Implementation defines the interface for all implementation classes. It * doesn't have to match the Abstraction's interface. In fact, the two * interfaces can be entirely different. Typically the Implementation interface * provides only primitive operations, while the Abstraction defines higher- * level operations based on those primitives. */ class Implementation { public: virtual ~Implementation() {} virtual std::string OperationImplementation() const = 0; }; /** * Each Concrete Implementation corresponds to a specific platform and * implements the Implementation interface using that platform's API. */ class ConcreteImplementationA : public Implementation { public: std::string OperationImplementation() const override { return &quot;ConcreteImplementationA: Here's the result on the platform A.\\n&quot;; } }; class ConcreteImplementationB : public Implementation { public: std::string OperationImplementation() const override { return &quot;ConcreteImplementationB: Here's the result on the platform B.\\n&quot;; } }; /** * The Abstraction defines the interface for the &quot;control&quot; part of the two class * hierarchies. It maintains a reference to an object of the Implementation * hierarchy and delegates all of the real work to this object. */ class Abstraction { /** * @var Implementation */ protected: Implementation* implementation_; public: Abstraction(Implementation* implementation) : implementation_(implementation) { } virtual ~Abstraction() { } virtual std::string Operation() const { return &quot;Abstraction: Base operation with:\\n&quot; + this-&gt;implementation_-&gt;OperationImplementation(); } }; /** * You can extend the Abstraction without changing the Implementation classes. */ class ExtendedAbstraction : public Abstraction { public: ExtendedAbstraction(Implementation* implementation) : Abstraction(implementation) { } std::string Operation() const override { return &quot;ExtendedAbstraction: Extended operation with:\\n&quot; + this-&gt;implementation_-&gt;OperationImplementation(); } }; /** * Except for the initialization phase, where an Abstraction object gets linked * with a specific Implementation object, the client code should only depend on * the Abstraction class. This way the client code can support any abstraction- * implementation combination. */ void ClientCode(const Abstraction&amp; abstraction) { // ... std::cout &lt;&lt; abstraction.Operation(); // ... } /** * The client code should be able to work with any pre-configured abstraction- * implementation combination. */ int main() { Implementation* implementation = new ConcreteImplementationA; Abstraction* abstraction = new Abstraction(implementation); ClientCode(*abstraction); std::cout &lt;&lt; std::endl; delete implementation; delete abstraction; implementation = new ConcreteImplementationB; abstraction = new ExtendedAbstraction(implementation); ClientCode(*abstraction); delete implementation; delete abstraction; return 0; } Abstraction: Base operation with: ConcreteImplementationA: Here's the result on the platform A. ExtendedAbstraction: Extended operation with: ConcreteImplementationB: Here's the result on the platform B. ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Bridge/cSharp/","content":"C# Example // Bridge Design Pattern // // Intent: Lets you split a large class or a set of closely related classes into // two separate hierarchies—abstraction and implementation—which can be // developed independently of each other. // // A // / \\ A N // Aa Ab ===&gt; / \\ / \\ // / \\ / \\ Aa(N) Ab(N) 1 2 // Aa1 Aa2 Ab1 Ab2 using System; namespace RefactoringGuru.DesignPatterns.Bridge.Conceptual { // The Abstraction defines the interface for the &quot;control&quot; part of the two // class hierarchies. It maintains a reference to an object of the // Implementation hierarchy and delegates all of the real work to this // object. class Abstraction { protected IImplementation _implementation; public Abstraction(IImplementation implementation) { this._implementation = implementation; } public virtual string Operation() { return &quot;Abstract: Base operation with:\\n&quot; + _implementation.OperationImplementation(); } } // You can extend the Abstraction without changing the Implementation // classes. class ExtendedAbstraction : Abstraction { public ExtendedAbstraction(IImplementation implementation) : base(implementation) { } public override string Operation() { return &quot;ExtendedAbstraction: Extended operation with:\\n&quot; + base._implementation.OperationImplementation(); } } // The Implementation defines the interface for all implementation classes. // It doesn't have to match the Abstraction's interface. In fact, the two // interfaces can be entirely different. Typically the Implementation // interface provides only primitive operations, while the Abstraction // defines higher- level operations based on those primitives. public interface IImplementation { string OperationImplementation(); } // Each Concrete Implementation corresponds to a specific platform and // implements the Implementation interface using that platform's API. class ConcreteImplementationA : IImplementation { public string OperationImplementation() { return &quot;ConcreteImplementationA: The result in platform A.\\n&quot;; } } class ConcreteImplementationB : IImplementation { public string OperationImplementation() { return &quot;ConcreteImplementationA: The result in platform B.\\n&quot;; } } class Client { // Except for the initialization phase, where an Abstraction object gets // linked with a specific Implementation object, the client code should // only depend on the Abstraction class. This way the client code can // support any abstraction-implementation combination. public void ClientCode(Abstraction abstraction) { Console.Write(abstraction.Operation()); } } class Program { static void Main(string[] args) { Client client = new Client(); Abstraction abstraction; // The client code should be able to work with any pre-configured // abstraction-implementation combination. abstraction = new Abstraction(new ConcreteImplementationA()); client.ClientCode(abstraction); Console.WriteLine(); abstraction = new ExtendedAbstraction(new ConcreteImplementationB()); client.ClientCode(abstraction); } } } Abstract: Base operation with: ConcreteImplementationA: The result in platform A. ExtendedAbstraction: Extended operation with: ConcreteImplementationA: The result in platform B. ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Bridge/go/","content":"Go Example package main type printer interface { printFile() } package main import &quot;fmt&quot; type epson struct { } func (p *epson) printFile() { fmt.Println(&quot;Printing by a EPSON Printer&quot;) } package main import &quot;fmt&quot; type hp struct { } func (p *hp) printFile() { fmt.Println(&quot;Printing by a HP Printer&quot;) } package main type computer interface { print() setPrinter(printer) } package main import &quot;fmt&quot; type mac struct { printer printer } func (m *mac) print() { fmt.Println(&quot;Print request for mac&quot;) m.printer.printFile() } func (m *mac) setPrinter(p printer) { m.printer = p } package main import &quot;fmt&quot; type windows struct { printer printer } func (w *windows) print() { fmt.Println(&quot;Print request for windows&quot;) w.printer.printFile() } func (w *windows) setPrinter(p printer) { w.printer = p } package main import &quot;fmt&quot; func main() { hpPrinter := &amp;hp{} epsonPrinter := &amp;epson{} macComputer := &amp;mac{} macComputer.setPrinter(hpPrinter) macComputer.print() fmt.Println() macComputer.setPrinter(epsonPrinter) macComputer.print() fmt.Println() winComputer := &amp;windows{} winComputer.setPrinter(hpPrinter) winComputer.print() fmt.Println() winComputer.setPrinter(epsonPrinter) winComputer.print() fmt.Println() } Print request for mac Printing by a HP Printer Print request for mac Printing by a EPSON Printer Print request for windows Printing by a HP Printer Print request for windows ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Bridge/java/","content":"Java Example devices devices/Device.java package refactoring_guru.bridge.example.devices; public interface Device { boolean isEnabled(); void enable(); void disable(); int getVolume(); void setVolume(int percent); int getChannel(); void setChannel(int channel); void printStatus(); } devices/Radio.java package refactoring_guru.bridge.example.devices; public class Radio implements Device { private boolean on = false; private int volume = 30; private int channel = 1; @Override public boolean isEnabled() { return on; } @Override public void enable() { on = true; } @Override public void disable() { on = false; } @Override public int getVolume() { return volume; } @Override public void setVolume(int volume) { if (volume &gt; 100) { this.volume = 100; } else if (volume &lt; 0) { this.volume = 0; } else { this.volume = volume; } } @Override public int getChannel() { return channel; } @Override public void setChannel(int channel) { this.channel = channel; } @Override public void printStatus() { System.out.println(&quot;------------------------------------&quot;); System.out.println(&quot;| I'm radio.&quot;); System.out.println(&quot;| I'm &quot; + (on ? &quot;enabled&quot; : &quot;disabled&quot;)); System.out.println(&quot;| Current volume is &quot; + volume + &quot;%&quot;); System.out.println(&quot;| Current channel is &quot; + channel); System.out.println(&quot;------------------------------------\\n&quot;); } } devices/Tv.java package refactoring_guru.bridge.example.devices; public class Tv implements Device { private boolean on = false; private int volume = 30; private int channel = 1; @Override public boolean isEnabled() { return on; } @Override public void enable() { on = true; } @Override public void disable() { on = false; } @Override public int getVolume() { return volume; } @Override public void setVolume(int volume) { if (volume &gt; 100) { this.volume = 100; } else if (volume &lt; 0) { this.volume = 0; } else { this.volume = volume; } } @Override public int getChannel() { return channel; } @Override public void setChannel(int channel) { this.channel = channel; } @Override public void printStatus() { System.out.println(&quot;------------------------------------&quot;); System.out.println(&quot;| I'm TV set.&quot;); System.out.println(&quot;| I'm &quot; + (on ? &quot;enabled&quot; : &quot;disabled&quot;)); System.out.println(&quot;| Current volume is &quot; + volume + &quot;%&quot;); System.out.println(&quot;| Current channel is &quot; + channel); System.out.println(&quot;------------------------------------\\n&quot;); } } remotes remotes/AdvancedRemote.java package refactoring_guru.bridge.example.remotes; import refactoring_guru.bridge.example.devices.Device; public class AdvancedRemote extends BasicRemote { public AdvancedRemote(Device device) { super.device = device; } public void mute() { System.out.println(&quot;Remote: mute&quot;); device.setVolume(0); } } remotes/BasicRemote.java package refactoring_guru.bridge.example.remotes; import refactoring_guru.bridge.example.devices.Device; public class BasicRemote implements Remote { protected Device device; public BasicRemote() {} public BasicRemote(Device device) { this.device = device; } @Override public void power() { System.out.println(&quot;Remote: power toggle&quot;); if (device.isEnabled()) { device.disable(); } else { device.enable(); } } @Override public void volumeDown() { System.out.println(&quot;Remote: volume down&quot;); device.setVolume(device.getVolume() - 10); } @Override public void volumeUp() { System.out.println(&quot;Remote: volume up&quot;); device.setVolume(device.getVolume() + 10); } @Override public void channelDown() { System.out.println(&quot;Remote: channel down&quot;); device.setChannel(device.getChannel() - 1); } @Override public void channelUp() { System.out.println(&quot;Remote: channel up&quot;); device.setChannel(device.getChannel() + 1); } } remotes/Remote.java package refactoring_guru.bridge.example.remotes; public interface Remote { void power(); void volumeDown(); void volumeUp(); void channelDown(); void channelUp(); } Demo.java package refactoring_guru.bridge.example; import refactoring_guru.bridge.example.devices.Device; import refactoring_guru.bridge.example.devices.Radio; import refactoring_guru.bridge.example.devices.Tv; import refactoring_guru.bridge.example.remotes.AdvancedRemote; import refactoring_guru.bridge.example.remotes.BasicRemote; public class Demo { public static void main(String[] args) { testDevice(new Tv()); testDevice(new Radio()); } public static void testDevice(Device device) { System.out.println(&quot;Tests with basic remote.&quot;); BasicRemote basicRemote = new BasicRemote(device); basicRemote.power(); device.printStatus(); System.out.println(&quot;Tests with advanced remote.&quot;); AdvancedRemote advancedRemote = new AdvancedRemote(device); advancedRemote.power(); advancedRemote.mute(); device.printStatus(); } } Tests with basic remote. Remote: power toggle ------------------------------------ | I'm TV set. | I'm enabled | Current volume is 30% | Current channel is 1 ------------------------------------ Tests with advanced remote. Remote: power toggle Remote: mute ------------------------------------ | I'm TV set. | I'm disabled | Current volume is 0% | Current channel is 1 ------------------------------------ Tests with basic remote. Remote: power toggle ------------------------------------ | I'm radio. | I'm enabled | Current volume is 30% | Current channel is 1 ------------------------------------ Tests with advanced remote. Remote: power toggle Remote: mute ------------------------------------ | I'm radio. | I'm disabled | Current volume is 0% | Current channel is 1 ------------------------------------ ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Bridge/python/","content":"Python Example &quot;&quot;&quot; Bridge Design Pattern Intent: Lets you split a large class or a set of closely related classes into two separate hierarchies—abstraction and implementation—which can be developed independently of each other. A / \\ A N Aa Ab ===&gt; / \\ / \\ / \\ / \\ Aa(N) Ab(N) 1 2 Aa1 Aa2 Ab1 Ab2 &quot;&quot;&quot; from __future__ import annotations from abc import ABC, abstractmethod class Abstraction: &quot;&quot;&quot; The Abstraction defines the interface for the &quot;control&quot; part of the two class hierarchies. It maintains a reference to an object of the Implementation hierarchy and delegates all of the real work to this object. &quot;&quot;&quot; def __init__(self, implementation: Implementation) -&gt; None: self.implementation = implementation def operation(self) -&gt; str: return (f&quot;Abstraction: Base operation with:\\n&quot; f&quot;{self.implementation.operation_implementation()}&quot;) class ExtendedAbstraction(Abstraction): &quot;&quot;&quot; You can extend the Abstraction without changing the Implementation classes. &quot;&quot;&quot; def operation(self) -&gt; str: return (f&quot;ExtendedAbstraction: Extended operation with:\\n&quot; f&quot;{self.implementation.operation_implementation()}&quot;) class Implementation(ABC): &quot;&quot;&quot; The Implementation defines the interface for all implementation classes. It doesn't have to match the Abstraction's interface. In fact, the two interfaces can be entirely different. Typically the Implementation interface provides only primitive operations, while the Abstraction defines higher- level operations based on those primitives. &quot;&quot;&quot; @abstractmethod def operation_implementation(self) -&gt; str: pass &quot;&quot;&quot; Each Concrete Implementation corresponds to a specific platform and implements the Implementation interface using that platform's API. &quot;&quot;&quot; class ConcreteImplementationA(Implementation): def operation_implementation(self) -&gt; str: return &quot;ConcreteImplementationA: Here's the result on the platform A.&quot; class ConcreteImplementationB(Implementation): def operation_implementation(self) -&gt; str: return &quot;ConcreteImplementationB: Here's the result on the platform B.&quot; def client_code(abstraction: Abstraction) -&gt; None: &quot;&quot;&quot; Except for the initialization phase, where an Abstraction object gets linked with a specific Implementation object, the client code should only depend on the Abstraction class. This way the client code can support any abstraction- implementation combination. &quot;&quot;&quot; # ... print(abstraction.operation(), end=&quot;&quot;) # ... if __name__ == &quot;__main__&quot;: &quot;&quot;&quot; The client code should be able to work with any pre-configured abstraction- implementation combination. &quot;&quot;&quot; implementation = ConcreteImplementationA() abstraction = Abstraction(implementation) client_code(abstraction) print(&quot;\\n&quot;) implementation = ConcreteImplementationB() abstraction = ExtendedAbstraction(implementation) client_code(abstraction) Abstraction: Base operation with: ConcreteImplementationA: Here's the result on the platform A. ExtendedAbstraction: Extended operation with: ConcreteImplementationB: Here's the result on the platform B. ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Bridge/python/example2","content":"Example 2 class BlueConcreteImplementation: def log(self): return &quot;blue&quot; class RedConcreteImplementation: def log(self): return &quot;red&quot; class ShapeAbstract: def __init__(self, color): self.color = color def log_me(self): print(f&quot;I am a {self.color.log()} shape.&quot;) from ShapeAbstract import ShapeAbstract class TriangleAbstraction(ShapeAbstract): def __init__(self, color): super().__init__(color) from ShapeAbstract import ShapeAbstract class CircleRefinedAbstraction(ShapeAbstract): def __init__(self, color): super().__init__(color) def log_me(self): print(f&quot;I am a {self.color.log()} circle.&quot;) from CircleRefinedAbstraction import CircleRefinedAbstraction from TriangleAbstraction import TriangleAbstraction from RedConcreteImplementation import RedConcreteImplementation from BlueConcreteImplementation import BlueConcreteImplementation if __name__ == &quot;__main__&quot;: circle = CircleRefinedAbstraction(RedConcreteImplementation()) triangle = TriangleAbstraction(BlueConcreteImplementation()) circle.log_me() triangle.log_me() ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Bridge/swift/","content":"Swift Example /// Bridge Design Pattern /// /// Intent: Lets you split a large class or a set of closely related classes /// into two separate hierarchies—abstraction and implementation—which can be /// developed independently of each other. /// /// A /// / \\ A N /// Aa Ab ===&gt; / \\ / \\ /// / \\ / \\ Aa(N) Ab(N) 1 2 /// Aa1 Aa2 Ab1 Ab2 import XCTest /// The Abstraction defines the interface for the &quot;control&quot; part of the two /// class hierarchies. It maintains a reference to an object of the /// Implementation hierarchy and delegates all of the real work to this object. class Abstraction { fileprivate var implementation: Implementation init(_ implementation: Implementation) { self.implementation = implementation } func operation() -&gt; String { let operation = implementation.operationImplementation() return &quot;Abstraction: Base operation with:\\n&quot; + operation } } /// You can extend the Abstraction without changing the Implementation classes. class ExtendedAbstraction: Abstraction { override func operation() -&gt; String { let operation = implementation.operationImplementation() return &quot;ExtendedAbstraction: Extended operation with:\\n&quot; + operation } } /// The Implementation defines the interface for all implementation classes. It /// doesn't have to match the Abstraction's interface. In fact, the two /// interfaces can be entirely different. Typically the Implementation interface /// provides only primitive operations, while the Abstraction defines higher- /// level operations based on those primitives. protocol Implementation { func operationImplementation() -&gt; String } /// Each Concrete Implementation corresponds to a specific platform and /// implements the Implementation interface using that platform's API. class ConcreteImplementationA: Implementation { func operationImplementation() -&gt; String { return &quot;ConcreteImplementationA: Here's the result on the platform A.\\n&quot; } } class ConcreteImplementationB: Implementation { func operationImplementation() -&gt; String { return &quot;ConcreteImplementationB: Here's the result on the platform B\\n&quot; } } /// Except for the initialization phase, where an Abstraction object gets linked /// with a specific Implementation object, the client code should only depend on /// the Abstraction class. This way the client code can support any abstraction- /// implementation combination. class Client { // ... static func someClientCode(abstraction: Abstraction) { print(abstraction.operation()) } // ... } /// Let's see how it all works together. class BridgeConceptual: XCTestCase { func testBridgeConceptual() { // The client code should be able to work with any pre-configured // abstraction-implementation combination. let implementation = ConcreteImplementationA() Client.someClientCode(abstraction: Abstraction(implementation)) let concreteImplementation = ConcreteImplementationB() Client.someClientCode(abstraction: ExtendedAbstraction(concreteImplementation)) } } Abstraction: Base operation with: ConcreteImplementationA: Here's the result on the platform A ExtendedAbstraction: Extended operation with: ConcreteImplementationB: Here's the result on the platform B ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Bridge/swift/example2","content":"Example 2 import XCTest private class BridgeRealWorld: XCTestCase { func testBridgeRealWorld() { print(&quot;Client: Pushing Photo View Controller...&quot;) push(PhotoViewController()) print() print(&quot;Client: Pushing Feed View Controller...&quot;) push(FeedViewController()) } func push(_ container: SharingSupportable) { let instagram = InstagramSharingService() let facebook = FaceBookSharingService() container.accept(service: instagram) container.update(content: foodModel) container.accept(service: facebook) container.update(content: foodModel) } var foodModel: Content { return FoodDomainModel(title: &quot;This food is so various and delicious!&quot;, images: [UIImage(), UIImage()], calories: 47) } } private protocol SharingSupportable { /// Abstraction func accept(service: SharingService) func update(content: Content) } class BaseViewController: UIViewController, SharingSupportable { fileprivate var shareService: SharingService? func update(content: Content) { /// ...updating UI and showing a content... /// ... /// ... then, a user will choose a content and trigger an event print(&quot;\\(description): User selected a \\(content) to share&quot;) /// ... shareService?.share(content: content) } func accept(service: SharingService) { shareService = service } } class PhotoViewController: BaseViewController { /// Custom UI and features override var description: String { return &quot;PhotoViewController&quot; } } class FeedViewController: BaseViewController { /// Custom UI and features override var description: String { return &quot;FeedViewController&quot; } } protocol SharingService { /// Implementation func share(content: Content) } class FaceBookSharingService: SharingService { func share(content: Content) { /// Use FaceBook API to share a content print(&quot;Service: \\(content) was posted to the Facebook&quot;) } } class InstagramSharingService: SharingService { func share(content: Content) { /// Use Instagram API to share a content print(&quot;Service: \\(content) was posted to the Instagram&quot;, terminator: &quot;\\n\\n&quot;) } } protocol Content: CustomStringConvertible { var title: String { get } var images: [UIImage] { get } } struct FoodDomainModel: Content { var title: String var images: [UIImage] var calories: Int var description: String { return &quot;Food Model&quot; } } Client: Pushing Photo View Controller... PhotoViewController: User selected a Food Model to share Service: Food Model was posted to the Instagram PhotoViewController: User selected a Food Model to share Service: Food Model was posted to the Facebook Client: Pushing Feed View Controller... FeedViewController: User selected a Food Model to share Service: Food Model was posted to the Instagram FeedViewController: User selected a Food Model to share Service: Food Model was posted to the Facebook ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Bridge/typescript/","content":"TypeScript Example /** * Bridge Design Pattern * * Intent: Lets you split a large class or a set of closely related classes into * two separate hierarchies—abstraction and implementation—which can be * developed independently of each other. * * A * / \\ A N * Aa Ab ===&gt; / \\ / \\ * / \\ / \\ Aa(N) Ab(N) 1 2 * Aa1 Aa2 Ab1 Ab2 */ /** * The Abstraction defines the interface for the &quot;control&quot; part of the two class * hierarchies. It maintains a reference to an object of the Implementation * hierarchy and delegates all of the real work to this object. */ class Abstraction { protected implementation: Implementation; constructor(implementation: Implementation) { this.implementation = implementation; } public operation(): string { const result = this.implementation.operationImplementation(); return `Abstraction: Base operation with:\\n${result}`; } } /** * You can extend the Abstraction without changing the Implementation classes. */ class ExtendedAbstraction extends Abstraction { public operation(): string { const result = this.implementation.operationImplementation(); return `ExtendedAbstraction: Extended operation with:\\n${result}`; } } /** * The Implementation defines the interface for all implementation classes. It * doesn't have to match the Abstraction's interface. In fact, the two * interfaces can be entirely different. Typically the Implementation interface * provides only primitive operations, while the Abstraction defines higher- * level operations based on those primitives. */ interface Implementation { operationImplementation(): string; } /** * Each Concrete Implementation corresponds to a specific platform and * implements the Implementation interface using that platform's API. */ class ConcreteImplementationA implements Implementation { public operationImplementation(): string { return &quot;ConcreteImplementationA: Here's the result on the platform A.&quot;; } } class ConcreteImplementationB implements Implementation { public operationImplementation(): string { return &quot;ConcreteImplementationB: Here's the result on the platform B.&quot;; } } /** * Except for the initialization phase, where an Abstraction object gets linked * with a specific Implementation object, the client code should only depend on * the Abstraction class. This way the client code can support any abstraction- * implementation combination. */ function clientCode(abstraction: Abstraction) { // .. console.log(abstraction.operation()); // .. } /** * The client code should be able to work with any pre-configured abstraction- * implementation combination. */ let implementation = new ConcreteImplementationA(); let abstraction = new Abstraction(implementation); clientCode(abstraction); console.log(&quot;&quot;); implementation = new ConcreteImplementationB(); abstraction = new ExtendedAbstraction(implementation); clientCode(abstraction); Abstraction: Base operation with: ConcreteImplementationA: Here's the result on the platform A. ExtendedAbstraction: Extended operation with: ConcreteImplementationB: Here's the result on the platform B. ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Bridge/typescript/example2","content":"Example 2 // Bridge Implementation // Define an interface for the Implementation /** * The Implementation defines the interface for all implementation classes. It * doesn't have to match the Abstraction's interface. In fact, the two * interfaces can be entirely different. Typically the Implementation interface * provides only primitive operations, while the Abstraction defines higher- * level operations based on those primitives. */ export default interface ColorInterface { log(): string; } import ColorInterface from &quot;./ColorInterface&quot;; // Create a Concrete Implementation /** * Each Concrete Implementation corresponds to a specific platform and * implements the Implementation interface using that platform's API. */ export default class BlueConcreteImplementation implements ColorInterface { log() { return &quot;blue&quot;; } } import ColorInterface from &quot;./ColorInterface&quot;; // Create a Concrete Implementation /** * Each Concrete Implementation corresponds to a specific platform and * implements the Implementation interface using that platform's API. */ export default class RedConcreteImplementation implements ColorInterface { log() { return &quot;red&quot;; } } // Bridge Abstraction import ColorInterface from &quot;./ColorInterface&quot;; // Define an abstract class for the Abstraction /** * The Abstraction defines the interface for the &quot;control&quot; part of the two class * hierarchies. It maintains a reference to an object of the Implementation * hierarchy and delegates all of the real work to this object. */ export default abstract class ShapeAbstract { color: ColorInterface; constructor(color: ColorInterface) { this.color = color; } logMe() { console.log(`I am a ${this.color.log()} shape.`); } } import ShapeAbstract from &quot;./ShapeAbstract&quot;; import ColorInterface from &quot;./ColorInterface&quot;; // You can extend the Abstraction without changing the Implementation classes export default class TriangleAbstraction extends ShapeAbstract { constructor(color: ColorInterface) { super(color); } } import ShapeAbstract from &quot;./ShapeAbstract&quot;; import ColorInterface from &quot;./ColorInterface&quot;; // You can extend the Abstraction without changing the Implementation classes export default class CircleRefinedAbstraction extends ShapeAbstract { constructor(color: ColorInterface) { super(color); } // Create a refined Abstraction that behaves slightly differently logMe() { console.log(`I am a ${this.color.log()} circle.`); } } import CircleRefinedAbstraction from &quot;./CircleRefinedAbstraction&quot;; import TriangleAbstraction from &quot;./TriangleAbstraction&quot;; import RedConcreteImplementation from &quot;./RedConcreteImplementation&quot;; import BlueConcreteImplementation from &quot;./BlueConcreteImplementation&quot;; // Bridge pattern is to link the abstraction and implementation which had been separated // Instantiate the circle with a concrete implementation /** * The client code should be able to work with any pre-configured abstraction- * implementation combination. */ const circle = new CircleRefinedAbstraction(new RedConcreteImplementation()); const triangle = new TriangleAbstraction(new BlueConcreteImplementation()); circle.logMe(); // Output: I am a red circle. triangle.logMe(); // Output: I am a blue shape. ","keywords":""},{"title":"Composite","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/","content":"","keywords":""},{"title":"Structure​","type":1,"pageTitle":"Composite","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/#structure","content":" The Component interface describes operations that are common to both simple and complex elements of the tree. The Leaf is a basic element of a tree that doesn’t have sub-elements. Usually, leaf components end up doing most of the real work, since they don’t have anyone to delegate the work to. The Container (aka composite) is an element that has sub-elements: leaves or other containers. A container doesn’t know the concrete classes of its children.It works with all sub-elements only via the component interface.Upon receiving a request, a container delegates the work to its sub-elements, processes intermediate results and then returns the final result to the client. The Client works with all elements through the component interface. As a result, the client can work in the same way with both simple or complex elements of the tree. "},{"title":"Example​","type":1,"pageTitle":"Composite","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/#example","content":"The first element in this pattern is an abstract class that sits at the root of the hierarchical tree that this pattern aims to define. This abstract class, known as a component, should contain primitive properties as well as operations that would be shared with its derivatives. from the abstract component class, we get two kinds of derivative classes a primitive element, known as a leaf, cannot have any children of their own The leaf represents a single element - for instance, a student or an employee or a product. a composite, which are collections of primitives can host a collection of primitives (leaves) or composites as their children. a composite of primitives could be a catalog of mobile phones or a science class with studentsor the Quality Assurance department with employees. a composite of composites could be a catalog of mobile phones, laptops, and other products where each category is a sub-catalog a school with multiple subjects, each with multiple students. both leaves and composites must implement a shared and uniform interface, as laid down by the parent class. This ensures uniformity across the structure.Additional methods may be added to the composites as needed, but they must adhere to the base interface. This ensures that the client sees uniformity across composites and primitives, and uses the same interface. "},{"title":"Summary​","type":1,"pageTitle":"Composite","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/#summary","content":"Composite pattern allows you to define relationships and hierarchical trees of objects that stem from a base component classthe structure allows you to define 2 kinds of nodes A leaf node or a single entity like a product or a person requests to leaf node are handled directly A composite that contains collections of entities composites can also be collection of compositesrequests sent to composites are first forwarded to member leaves, where they are individually handled both leaves and composites implement a uniform interface for the client, and are great for describing a relationship between objects "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/cPlusPlus/","content":"C++ Example #include &lt;algorithm&gt; #include &lt;iostream&gt; #include &lt;list&gt; #include &lt;string&gt; /** * Composite Design Pattern * * Intent: Lets you compose objects into tree structures and then work with * these structures as if they were individual objects. */ /** * The base Component class declares common operations for both simple and * complex objects of a composition. */ class Component { /** * @var Component */ protected: Component *parent_; /** * Optionally, the base Component can declare an interface for setting and * accessing a parent of the component in a tree structure. It can also * provide some default implementation for these methods. */ public: virtual ~Component() {} void SetParent(Component *parent) { this-&gt;parent_ = parent; } Component *GetParent() const { return this-&gt;parent_; } /** * In some cases, it would be beneficial to define the child-management * operations right in the base Component class. This way, you won't need to * expose any concrete component classes to the client code, even during the * object tree assembly. The downside is that these methods will be empty for * the leaf-level components. */ virtual void Add(Component *component) {} virtual void Remove(Component *component) {} /** * You can provide a method that lets the client code figure out whether a * component can bear children. */ virtual bool IsComposite() const { return false; } /** * The base Component may implement some default behavior or leave it to * concrete classes (by declaring the method containing the behavior as * &quot;abstract&quot;). */ virtual std::string Operation() const = 0; }; /** * The Leaf class represents the end objects of a composition. A leaf can't have * any children. * * Usually, it's the Leaf objects that do the actual work, whereas Composite * objects only delegate to their sub-components. */ class Leaf : public Component { public: std::string Operation() const override { return &quot;Leaf&quot;; } }; /** * The Composite class represents the complex components that may have children. * Usually, the Composite objects delegate the actual work to their children and * then &quot;sum-up&quot; the result. */ class Composite : public Component { /** * @var \\SplObjectStorage */ protected: std::list&lt;Component *&gt; children_; public: /** * A composite object can add or remove other components (both simple or * complex) to or from its child list. */ void Add(Component *component) override { this-&gt;children_.push_back(component); component-&gt;SetParent(this); } /** * Have in mind that this method removes the pointer to the list but doesn't * frees the * memory, you should do it manually or better use smart pointers. */ void Remove(Component *component) override { children_.remove(component); component-&gt;SetParent(nullptr); } bool IsComposite() const override { return true; } /** * The Composite executes its primary logic in a particular way. It traverses * recursively through all its children, collecting and summing their results. * Since the composite's children pass these calls to their children and so * forth, the whole object tree is traversed as a result. */ std::string Operation() const override { std::string result; for (const Component *c : children_) { if (c == children_.back()) { result += c-&gt;Operation(); } else { result += c-&gt;Operation() + &quot;+&quot;; } } return &quot;Branch(&quot; + result + &quot;)&quot;; } }; /** * The client code works with all of the components via the base interface. */ void ClientCode(Component *component) { // ... std::cout &lt;&lt; &quot;RESULT: &quot; &lt;&lt; component-&gt;Operation(); // ... } /** * Thanks to the fact that the child-management operations are declared in the * base Component class, the client code can work with any component, simple or * complex, without depending on their concrete classes. */ void ClientCode2(Component *component1, Component *component2) { // ... if (component1-&gt;IsComposite()) { component1-&gt;Add(component2); } std::cout &lt;&lt; &quot;RESULT: &quot; &lt;&lt; component1-&gt;Operation(); // ... } /** * This way the client code can support the simple leaf components... */ int main() { Component *simple = new Leaf; std::cout &lt;&lt; &quot;Client: I've got a simple component:\\n&quot;; ClientCode(simple); std::cout &lt;&lt; &quot;\\n\\n&quot;; /** * ...as well as the complex composites. */ Component *tree = new Composite; Component *branch1 = new Composite; Component *leaf_1 = new Leaf; Component *leaf_2 = new Leaf; Component *leaf_3 = new Leaf; branch1-&gt;Add(leaf_1); branch1-&gt;Add(leaf_2); Component *branch2 = new Composite; branch2-&gt;Add(leaf_3); tree-&gt;Add(branch1); tree-&gt;Add(branch2); std::cout &lt;&lt; &quot;Client: Now I've got a composite tree:\\n&quot;; ClientCode(tree); std::cout &lt;&lt; &quot;\\n\\n&quot;; std::cout &lt;&lt; &quot;Client: I don't need to check the components classes even when managing the tree:\\n&quot;; ClientCode2(tree, simple); std::cout &lt;&lt; &quot;\\n&quot;; delete simple; delete tree; delete branch1; delete branch2; delete leaf_1; delete leaf_2; delete leaf_3; return 0; } Client: I've got a simple component: RESULT: Leaf Client: Now I've got a composite tree: RESULT: Branch(Branch(Leaf+Leaf)+Branch(Leaf)) Client: I don't need to check the components classes even when managing the tree: RESULT: Branch(Branch(Leaf+Leaf)+Branch(Leaf)+Leaf) ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/cSharp/","content":"C# Example // Composite Design Pattern // // Intent: Lets you compose objects into tree structures and then work with // these structures as if they were individual objects. using System; using System.Collections.Generic; namespace RefactoringGuru.DesignPatterns.Composite.Conceptual { // The base Component class declares common operations for both simple and // complex objects of a composition. abstract class Component { public Component() { } // The base Component may implement some default behavior or leave it to // concrete classes (by declaring the method containing the behavior as // &quot;abstract&quot;). public abstract string Operation(); // In some cases, it would be beneficial to define the child-management // operations right in the base Component class. This way, you won't // need to expose any concrete component classes to the client code, // even during the object tree assembly. The downside is that these // methods will be empty for the leaf-level components. public virtual void Add(Component component) { throw new NotImplementedException(); } public virtual void Remove(Component component) { throw new NotImplementedException(); } // You can provide a method that lets the client code figure out whether // a component can bear children. public virtual bool IsComposite() { return true; } } // The Leaf class represents the end objects of a composition. A leaf can't // have any children. // // Usually, it's the Leaf objects that do the actual work, whereas Composite // objects only delegate to their sub-components. class Leaf : Component { public override string Operation() { return &quot;Leaf&quot;; } public override bool IsComposite() { return false; } } // The Composite class represents the complex components that may have // children. Usually, the Composite objects delegate the actual work to // their children and then &quot;sum-up&quot; the result. class Composite : Component { protected List&lt;Component&gt; _children = new List&lt;Component&gt;(); public override void Add(Component component) { this._children.Add(component); } public override void Remove(Component component) { this._children.Remove(component); } // The Composite executes its primary logic in a particular way. It // traverses recursively through all its children, collecting and // summing their results. Since the composite's children pass these // calls to their children and so forth, the whole object tree is // traversed as a result. public override string Operation() { int i = 0; string result = &quot;Branch(&quot;; foreach (Component component in this._children) { result += component.Operation(); if (i != this._children.Count - 1) { result += &quot;+&quot;; } i++; } return result + &quot;)&quot;; } } class Client { // The client code works with all of the components via the base // interface. public void ClientCode(Component leaf) { Console.WriteLine($&quot;RESULT: {leaf.Operation()}\\n&quot;); } // Thanks to the fact that the child-management operations are declared // in the base Component class, the client code can work with any // component, simple or complex, without depending on their concrete // classes. public void ClientCode2(Component component1, Component component2) { if (component1.IsComposite()) { component1.Add(component2); } Console.WriteLine($&quot;RESULT: {component1.Operation()}&quot;); } } class Program { static void Main(string[] args) { Client client = new Client(); // This way the client code can support the simple leaf // components... Leaf leaf = new Leaf(); Console.WriteLine(&quot;Client: I get a simple component:&quot;); client.ClientCode(leaf); // ...as well as the complex composites. Composite tree = new Composite(); Composite branch1 = new Composite(); branch1.Add(new Leaf()); branch1.Add(new Leaf()); Composite branch2 = new Composite(); branch2.Add(new Leaf()); tree.Add(branch1); tree.Add(branch2); Console.WriteLine(&quot;Client: Now I've got a composite tree:&quot;); client.ClientCode(tree); Console.Write(&quot;Client: I don't need to check the components classes even when managing the tree:\\n&quot;); client.ClientCode2(tree, leaf); } } } Client: I get a simple component: RESULT: Leaf Client: Now I've got a composite tree: RESULT: Branch(Branch(Leaf+Leaf)+Branch(Leaf)) Client: I don't need to check the components classes even when managing the tree: RESULT: Branch(Branch(Leaf+Leaf)+Branch(Leaf)+Leaf) ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/go/","content":"Go Example package main type component interface { search(string) } package main import &quot;fmt&quot; type file struct { name string } func (f *file) search(keyword string) { fmt.Printf(&quot;Searching for keyword %s in file %s\\n&quot;, keyword, f.name) } func (f *file) getName() string { return f.name } package main import &quot;fmt&quot; type folder struct { components []component name string } func (f *folder) search(keyword string) { fmt.Printf(&quot;Serching recursively for keyword %s in folder %s\\n&quot;, keyword, f.name) for _, composite := range f.components { composite.search(keyword) } } func (f *folder) add(c component) { f.components = append(f.components, c) } package main func main() { file1 := &amp;file{name: &quot;File1&quot;} file2 := &amp;file{name: &quot;File2&quot;} file3 := &amp;file{name: &quot;File3&quot;} folder1 := &amp;folder{ name: &quot;Folder1&quot;, } folder1.add(file1) folder2 := &amp;folder{ name: &quot;Folder2&quot;, } folder2.add(file2) folder2.add(file3) folder2.add(folder1) folder2.search(&quot;rose&quot;) } Serching recursively for keyword rose in folder Folder2 Searching for keyword rose in file File2 Searching for keyword rose in file File3 Serching recursively for keyword rose in folder Folder1 Searching for keyword rose in file File1 ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/javascript/","content":"JavaScript Example class Item { constructor(name, type) { this.name = name; this.type = type; } getTyoe() { return this.type; } getName() { return this.name; } getDetails() {} } module.exports = Item; const Item = require(&quot;./Item&quot;); class Catalog extends Item { constructor(name) { super(name, &quot;Catalog&quot;); this.collection = []; } add(product) { this.collection.push(product); return this; } getDetails() { console.log(this.getName().toUpperCase()); this.collection.forEach((item) =&gt; item.getDetails()); } } module.exports = Catalog; const Item = require(&quot;./Item&quot;); class Laptop extends Item { constructor(name, model, cost) { super(name, &quot;Laptop&quot;); this.model = model; this.cost = cost; } getDetails() { console.log(`${this.getName()} ${this.model}, priced at ${this.cost}`); } } module.exports = Laptop; const Item = require(&quot;./Item&quot;); class MobilePhone extends Item { constructor(name, color, cost) { super(name, &quot;Mobile Phone&quot;); this.color = color; this.cost = cost; } getDetails() { console.log( `${this.getName()} :: ${this.color} color, priced at ${this.cost}` ); } } module.exports = MobilePhone; const MobilePhone = require(&quot;./MobilePhone&quot;); const Laptop = require(&quot;./Laptop&quot;); const Catalog = require(&quot;./CatalogCreateComposite&quot;); // Phone const iPhoneXS = new MobilePhone(&quot;Apple iPhone XS&quot;, &quot;White&quot;, 89000); const onePlus = new MobilePhone(&quot;OnePlus&quot;, &quot;Midnight Black&quot;, 46000); const galaxy = new MobilePhone(&quot;Samsung Galaxy&quot;, &quot;Ocean Blue&quot;, 12000); iPhoneXS.getDetails(); onePlus.getDetails(); galaxy.getDetails(); // Phone Catalog const Phones = new Catalog(&quot;** Mobile Phones **&quot;); Phones.add(iPhoneXS).add(onePlus).add(galaxy); // Laptops const MacbookPro = new Laptop(&quot;Apple&quot;, &quot;Mackbook Pro 16&quot;, 150000); const DellInspiron = new Laptop(&quot;Dell&quot;, &quot;Inspiron 5370&quot;, 63000); MacbookPro.getDetails(); DellInspiron.getDetails(); // Laptop Catalog const Laptops = new Catalog(&quot;** Laptops **&quot;); Laptops.add(MacbookPro).add(DellInspiron); Phones.getDetails(); Laptops.getDetails(); // Shopping Catalog: Composites can also be collections of other composites const PrimeProducts = new Catalog(&quot;** Prime Products 2020 **&quot;); PrimeProducts.add(Phones).add(Laptops); PrimeProducts.getDetails(); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/python/","content":"Python Example &quot;&quot;&quot; Composite Design Pattern Intent: Lets you compose objects into tree structures and then work with these structures as if they were individual objects. &quot;&quot;&quot; from __future__ import annotations from abc import ABC, abstractmethod from typing import List class Component(ABC): &quot;&quot;&quot; The base Component class declares common operations for both simple and complex objects of a composition. &quot;&quot;&quot; @property def parent(self) -&gt; Component: return self._parent @parent.setter def parent(self, parent: Component): &quot;&quot;&quot; Optionally, the base Component can declare an interface for setting and accessing a parent of the component in a tree structure. It can also provide some default implementation for these methods. &quot;&quot;&quot; self._parent = parent &quot;&quot;&quot; In some cases, it would be beneficial to define the child-management operations right in the base Component class. This way, you won't need to expose any concrete component classes to the client code, even during the object tree assembly. The downside is that these methods will be empty for the leaf-level components. &quot;&quot;&quot; def add(self, component: Component) -&gt; None: pass def remove(self, component: Component) -&gt; None: pass def is_composite(self) -&gt; bool: &quot;&quot;&quot; You can provide a method that lets the client code figure out whether a component can bear children. &quot;&quot;&quot; return False @abstractmethod def operation(self) -&gt; str: &quot;&quot;&quot; The base Component may implement some default behavior or leave it to concrete classes (by declaring the method containing the behavior as &quot;abstract&quot;). &quot;&quot;&quot; pass class Leaf(Component): &quot;&quot;&quot; The Leaf class represents the end objects of a composition. A leaf can't have any children. Usually, it's the Leaf objects that do the actual work, whereas Composite objects only delegate to their sub-components. &quot;&quot;&quot; def operation(self) -&gt; str: return &quot;Leaf&quot; class Composite(Component): &quot;&quot;&quot; The Composite class represents the complex components that may have children. Usually, the Composite objects delegate the actual work to their children and then &quot;sum-up&quot; the result. &quot;&quot;&quot; def __init__(self) -&gt; None: self._children: List[Component] = [] &quot;&quot;&quot; A composite object can add or remove other components (both simple or complex) to or from its child list. &quot;&quot;&quot; def add(self, component: Component) -&gt; None: self._children.append(component) component.parent = self def remove(self, component: Component) -&gt; None: self._children.remove(component) component.parent = None def is_composite(self) -&gt; bool: return True def operation(self) -&gt; str: &quot;&quot;&quot; The Composite executes its primary logic in a particular way. It traverses recursively through all its children, collecting and summing their results. Since the composite's children pass these calls to their children and so forth, the whole object tree is traversed as a result. &quot;&quot;&quot; results = [] for child in self._children: results.append(child.operation()) return f&quot;Branch({'+'.join(results)})&quot; def client_code(component: Component) -&gt; None: &quot;&quot;&quot; The client code works with all of the components via the base interface. &quot;&quot;&quot; print(f&quot;RESULT: {component.operation()}&quot;, end=&quot;&quot;) def client_code2(component1: Component, component2: Component) -&gt; None: &quot;&quot;&quot; Thanks to the fact that the child-management operations are declared in the base Component class, the client code can work with any component, simple or complex, without depending on their concrete classes. &quot;&quot;&quot; if component1.is_composite(): component1.add(component2) print(f&quot;RESULT: {component1.operation()}&quot;, end=&quot;&quot;) if __name__ == &quot;__main__&quot;: # This way the client code can support the simple leaf components... simple = Leaf() print(&quot;Client: I've got a simple component:&quot;) client_code(simple) print(&quot;\\n&quot;) # ...as well as the complex composites. tree = Composite() branch1 = Composite() branch1.add(Leaf()) branch1.add(Leaf()) branch2 = Composite() branch2.add(Leaf()) tree.add(branch1) tree.add(branch2) print(&quot;Client: Now I've got a composite tree:&quot;) client_code(tree) print(&quot;\\n&quot;) print(&quot;Client: I don't need to check the components classes even when managing the tree:&quot;) client_code2(tree, simple) Client: I've got a simple component: RESULT: Leaf Client: Now I've got a composite tree: RESULT: Branch(Branch(Leaf+Leaf)+Branch(Leaf)) Client: I don't need to check the components classes even when managing the tree: RESULT: Branch(Branch(Leaf+Leaf)+Branch(Leaf)+Leaf) ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/python/example2","content":"Example 2 class Item: def __init__(self, name, type): self.name = name self.type = type def getTyoe(self): return self.type def getName(self): return self.name def getDetails(self): pass from Item import Item class Catalog(Item): def __init__(self, name): super().__init__(name, &quot;Catalog&quot;) self.collection = [] def add(self, product): self.collection.append(product) return self def getDetails(self): print(self.getName().upper()) for item in self.collection: item.getDetails() from Item import Item class Laptop(Item): def __init__(self, name, model, cost): super().__init__(name, &quot;Laptop&quot;) self.model = model self.cost = cost def getDetails(self): print(f&quot;{self.getName()} {self.model}, priced at {self.cost}&quot;) from Item import Item class MobilePhone(Item): def __init__(self, name, color, cost): super().__init__(name, &quot;Mobile Phone&quot;) self.color = color self.cost = cost def getDetails(self): print(f&quot;{self.getName()} :: {self.color} color, priced at {self.cost}&quot;) from MobilePhone import MobilePhone from Laptop import Laptop from CatalogCreateComposite import Catalog # Phone iPhoneXS = MobilePhone(&quot;Apple iPhone XS&quot;, &quot;White&quot;, 89000) onePlus = MobilePhone(&quot;OnePlus&quot;, &quot;Midnight Black&quot;, 46000) galaxy = MobilePhone(&quot;Samsung Galaxy&quot;, &quot;Ocean Blue&quot;, 12000) iPhoneXS.getDetails() onePlus.getDetails() galaxy.getDetails() # Phone Catalog Phones = Catalog(&quot;** Mobile Phones **&quot;) Phones.add(iPhoneXS).add(onePlus).add(galaxy) # Laptops MacbookPro = Laptop(&quot;Apple&quot;, &quot;Mackbook Pro 16&quot;, 150000) DellInspiron = Laptop(&quot;Dell&quot;, &quot;Inspiron 5370&quot;, 63000) MacbookPro.getDetails() DellInspiron.getDetails() # Laptop Catalog Laptops = Catalog(&quot;** Laptops **&quot;) Laptops.add(MacbookPro).add(DellInspiron) Phones.getDetails() Laptops.getDetails() # Shopping Catalog: Composites can also be collections of other composites PrimeProducts = Catalog(&quot;** Prime Products 2020 **&quot;) PrimeProducts.add(Phones).add(Laptops) PrimeProducts.getDetails() ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/swift/","content":"Swift Example /// Composite Design Pattern /// /// Intent: Lets you compose objects into tree structures and then work with /// these structures as if they were individual objects. import XCTest /// The base Component class declares common operations for both simple and /// complex objects of a composition. protocol Component { /// The base Component may optionally declare methods for setting and /// accessing a parent of the component in a tree structure. It can also /// provide some default implementation for these methods. var parent: Component? { get set } /// In some cases, it would be beneficial to define the child-management /// operations right in the base Component class. This way, you won't need /// to expose any concrete component classes to the client code, even during /// the object tree assembly. The downside is that these methods will be /// empty for the leaf-level components. func add(component: Component) func remove(component: Component) /// You can provide a method that lets the client code figure out whether a /// component can bear children. func isComposite() -&gt; Bool /// The base Component may implement some default behavior or leave it to /// concrete classes. func operation() -&gt; String } extension Component { func add(component: Component) {} func remove(component: Component) {} func isComposite() -&gt; Bool { return false } } /// The Leaf class represents the end objects of a composition. A leaf can't /// have any children. /// /// Usually, it's the Leaf objects that do the actual work, whereas Composite /// objects only delegate to their sub-components. class Leaf: Component { var parent: Component? func operation() -&gt; String { return &quot;Leaf&quot; } } /// The Composite class represents the complex components that may have /// children. Usually, the Composite objects delegate the actual work to their /// children and then &quot;sum-up&quot; the result. class Composite: Component { var parent: Component? /// This fields contains the conponent subtree. private var children = [Component]() /// A composite object can add or remove other components (both simple or /// complex) to or from its child list. func add(component: Component) { var item = component item.parent = self children.append(item) } func remove(component: Component) { // ... } func isComposite() -&gt; Bool { return true } /// The Composite executes its primary logic in a particular way. It /// traverses recursively through all its children, collecting and summing /// their results. Since the composite's children pass these calls to their /// children and so forth, the whole object tree is traversed as a result. func operation() -&gt; String { let result = children.map({ $0.operation() }) return &quot;Branch(&quot; + result.joined(separator: &quot; &quot;) + &quot;)&quot; } } class Client { /// The client code works with all of the components via the base interface. static func someClientCode(component: Component) { print(&quot;Result: &quot; + component.operation()) } /// Thanks to the fact that the child-management operations are also /// declared in the base Component class, the client code can work with both /// simple or complex components. static func moreComplexClientCode(leftComponent: Component, rightComponent: Component) { if leftComponent.isComposite() { leftComponent.add(component: rightComponent) } print(&quot;Result: &quot; + leftComponent.operation()) } } /// Let's see how it all comes together. class CompositeConceptual: XCTestCase { func testCompositeConceptual() { /// This way the client code can support the simple leaf components... print(&quot;Client: I've got a simple component:&quot;) Client.someClientCode(component: Leaf()) /// ...as well as the complex composites. let tree = Composite() let branch1 = Composite() branch1.add(component: Leaf()) branch1.add(component: Leaf()) let branch2 = Composite() branch2.add(component: Leaf()) branch2.add(component: Leaf()) tree.add(component: branch1) tree.add(component: branch2) print(&quot;\\nClient: Now I've got a composite tree:&quot;) Client.someClientCode(component: tree) print(&quot;\\nClient: I don't need to check the components classes even when managing the tree:&quot;) Client.moreComplexClientCode(leftComponent: tree, rightComponent: Leaf()) } } Client: I've got a simple component: Result: Leaf Client: Now I've got a composite tree: Result: Branch(Branch(Leaf Leaf) Branch(Leaf Leaf)) Client: I don't need to check the components classes even when managing the tree: Result: Branch(Branch(Leaf Leaf) Branch(Leaf Leaf) Leaf) ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/swift/example2","content":"Example 2 import UIKit import XCTest protocol Component { func accept&lt;T: Theme&gt;(theme: T) } extension Component where Self: UIViewController { func accept&lt;T: Theme&gt;(theme: T) { view.accept(theme: theme) view.subviews.forEach({ $0.accept(theme: theme) }) } } extension UIView: Component {} extension UIViewController: Component {} extension Component where Self: UIView { func accept&lt;T: Theme&gt;(theme: T) { print(&quot;\\t\\(description): has applied \\(theme.description)&quot;) backgroundColor = theme.backgroundColor } } extension Component where Self: UILabel { func accept&lt;T: LabelTheme&gt;(theme: T) { print(&quot;\\t\\(description): has applied \\(theme.description)&quot;) backgroundColor = theme.backgroundColor textColor = theme.textColor } } extension Component where Self: UIButton { func accept&lt;T: ButtonTheme&gt;(theme: T) { print(&quot;\\t\\(description): has applied \\(theme.description)&quot;) backgroundColor = theme.backgroundColor setTitleColor(theme.textColor, for: .normal) setTitleColor(theme.highlightedColor, for: .highlighted) } } protocol Theme: CustomStringConvertible { var backgroundColor: UIColor { get } } protocol ButtonTheme: Theme { var textColor: UIColor { get } var highlightedColor: UIColor { get } /// other properties } protocol LabelTheme: Theme { var textColor: UIColor { get } /// other properties } /// Button Themes struct DefaultButtonTheme: ButtonTheme { var textColor = UIColor.red var highlightedColor = UIColor.white var backgroundColor = UIColor.orange var description: String { return &quot;Default Buttom Theme&quot; } } struct NightButtonTheme: ButtonTheme { var textColor = UIColor.white var highlightedColor = UIColor.red var backgroundColor = UIColor.black var description: String { return &quot;Night Buttom Theme&quot; } } /// Label Themes struct DefaultLabelTheme: LabelTheme { var textColor = UIColor.red var backgroundColor = UIColor.black var description: String { return &quot;Default Label Theme&quot; } } struct NightLabelTheme: LabelTheme { var textColor = UIColor.white var backgroundColor = UIColor.black var description: String { return &quot;Night Label Theme&quot; } } class CompositeRealWorld: XCTestCase { func testCompositeRealWorld() { print(&quot;\\nClient: Applying 'default' theme for 'UIButton'&quot;) apply(theme: DefaultButtonTheme(), for: UIButton()) print(&quot;\\nClient: Applying 'night' theme for 'UIButton'&quot;) apply(theme: NightButtonTheme(), for: UIButton()) print(&quot;\\nClient: Let's use View Controller as a composite!&quot;) /// Night theme print(&quot;\\nClient: Applying 'night button' theme for 'WelcomeViewController'...&quot;) apply(theme: NightButtonTheme(), for: WelcomeViewController()) print() print(&quot;\\nClient: Applying 'night label' theme for 'WelcomeViewController'...&quot;) apply(theme: NightLabelTheme(), for: WelcomeViewController()) print() /// Default Theme print(&quot;\\nClient: Applying 'default button' theme for 'WelcomeViewController'...&quot;) apply(theme: DefaultButtonTheme(), for: WelcomeViewController()) print() print(&quot;\\nClient: Applying 'default label' theme for 'WelcomeViewController'...&quot;) apply(theme: DefaultLabelTheme(), for: WelcomeViewController()) print() } func apply&lt;T: Theme&gt;(theme: T, for component: Component) { component.accept(theme: theme) } } class WelcomeViewController: UIViewController { class ContentView: UIView { var titleLabel = UILabel() var actionButton = UIButton() override init(frame: CGRect) { super.init(frame: frame) setup() } required init?(coder decoder: NSCoder) { super.init(coder: decoder) setup() } func setup() { addSubview(titleLabel) addSubview(actionButton) } } override func loadView() { view = ContentView() } } /// Let's override a description property for the better output extension WelcomeViewController { open override var description: String { return &quot;WelcomeViewController&quot; } } extension WelcomeViewController.ContentView { override var description: String { return &quot;ContentView&quot; } } extension UIButton { open override var description: String { return &quot;UIButton&quot; } } extension UILabel { open override var description: String { return &quot;UILabel&quot; } } Client: Applying 'default' theme for 'UIButton' UIButton: has applied Default Buttom Theme Client: Applying 'night' theme for 'UIButton' UIButton: has applied Night Buttom Theme Client: Let's use View Controller as a composite! Client: Applying 'night button' theme for 'WelcomeViewController'... ContentView: has applied Night Buttom Theme UILabel: has applied Night Buttom Theme UIButton: has applied Night Buttom Theme ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/typescript/","content":"TypeScript Example /** * Composite Design Pattern * * Intent: Lets you compose objects into tree structures and then work with * these structures as if they were individual objects. */ /** * The base Component class declares common operations for both simple and * complex objects of a composition. */ abstract class Component { protected parent: Component; /** * Optionally, the base Component can declare an interface for setting and * accessing a parent of the component in a tree structure. It can also * provide some default implementation for these methods. */ public setParent(parent: Component) { this.parent = parent; } public getParent(): Component { return this.parent; } /** * In some cases, it would be beneficial to define the child-management * operations right in the base Component class. This way, you won't need to * expose any concrete component classes to the client code, even during the * object tree assembly. The downside is that these methods will be empty * for the leaf-level components. */ public add(component: Component): void {} public remove(component: Component): void {} /** * You can provide a method that lets the client code figure out whether a * component can bear children. */ public isComposite(): boolean { return false; } /** * The base Component may implement some default behavior or leave it to * concrete classes (by declaring the method containing the behavior as * &quot;abstract&quot;). */ public abstract operation(): string; } /** * The Leaf class represents the end objects of a composition. A leaf can't have * any children. * * Usually, it's the Leaf objects that do the actual work, whereas Composite * objects only delegate to their sub-components. */ class Leaf extends Component { public operation(): string { return &quot;Leaf&quot;; } } /** * The Composite class represents the complex components that may have children. * Usually, the Composite objects delegate the actual work to their children and * then &quot;sum-up&quot; the result. */ class Composite extends Component { protected children: Component[] = []; /** * A composite object can add or remove other components (both simple or * complex) to or from its child list. */ public add(component: Component): void { this.children.push(component); component.setParent(this); } public remove(component: Component): void { const componentIndex = this.children.indexOf(component); this.children.splice(componentIndex, 1); component.setParent(null); } public isComposite(): boolean { return true; } /** * The Composite executes its primary logic in a particular way. It * traverses recursively through all its children, collecting and summing * their results. Since the composite's children pass these calls to their * children and so forth, the whole object tree is traversed as a result. */ public operation(): string { const results = []; for (const child of this.children) { results.push(child.operation()); } return `Branch(${results.join(&quot;+&quot;)})`; } } /** * The client code works with all of the components via the base interface. */ function clientCode(component: Component) { // ... console.log(`RESULT: ${component.operation()}`); // ... } /** * This way the client code can support the simple leaf components... */ const simple = new Leaf(); console.log(&quot;Client: I've got a simple component:&quot;); clientCode(simple); console.log(&quot;&quot;); /** * ...as well as the complex composites. */ const tree = new Composite(); const branch1 = new Composite(); branch1.add(new Leaf()); branch1.add(new Leaf()); const branch2 = new Composite(); branch2.add(new Leaf()); tree.add(branch1); tree.add(branch2); console.log(&quot;Client: Now I've got a composite tree:&quot;); clientCode(tree); console.log(&quot;&quot;); /** * Thanks to the fact that the child-management operations are declared in the * base Component class, the client code can work with any component, simple or * complex, without depending on their concrete classes. */ function clientCode2(component1: Component, component2: Component) { // ... if (component1.isComposite()) { component1.add(component2); } console.log(`RESULT: ${component1.operation()}`); // ... } console.log( &quot;Client: I don't need to check the components classes even when managing the tree:&quot; ); clientCode2(tree, simple); Client: I've got a simple component: RESULT: Leaf Client: Now I've got a composite tree: RESULT: Branch(Branch(Leaf+Leaf)+Branch(Leaf)) Client: I don't need to check the components classes even when managing the tree: RESULT: Branch(Branch(Leaf+Leaf)+Branch(Leaf)+Leaf) ","keywords":""},{"title":"Decorator","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/","content":"","keywords":""},{"title":"Definition​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#definition","content":"original definition Attach additional responsibilities to an object dynamicallydecorators provide a flexible alternative to sub classing for extending functionality a good way to define pluggable behaviors and features for clients that do not alter their original function but add extra abilitiesalso known as a wrapper pattern when used with functions, a decorator ingests a function and returns back a function this way it behaves as a higher order function example the react framework uses the concept of higher order components which results in a component gaining extra abilities and functionality "},{"title":"Problem​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#problem","content":"In a notification library which lets other programs notify their users about important events the initial version of the library was based on the Notifier class that had a few fields, a constructor and a single send methodthe method could accept a message argument from a client and send the message to a list of emails that were passed to the notifier via its constructor a 3rd party app which acted as a client was supposed to create and configure the notifier object once and then use it each time something important happened then you realize that users of the library expect more than just email notifications many of them want to receive SMS about critical issuesothers want to be notified on Facebookcorporate users want to get Slack notifications if you try to extend the Notifier class and put the additional notification methods into new subclasses now the client needs to instantiate the desire notification classand use it for all further notifications but if someone asked you to use several notification types at once can try to address that problem by creating special subclasses which combined several notification methods within 1 class however, this approach would bloat the code immensely for both the library code and the client code thus a need to find some other way to structure notifications classes so that their number won't accidentally break some record "},{"title":"Solution​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#solution","content":"extending a class is the 1st thing that comes to mind when needed to alter an object's behavior however, inheritance has several serious caveats that we need to be aware of inheritance is static we can't alter behavior of an existing object at runtimecan only replace the whole object with another 1 that's created from a different subclass subclasses can have just 1 parent class in most languages, inheritance doesn't let a class inherit behaviors of multiple classes at the same time To overcome these caveats is by using Aggregation or Composition instead of inheritance both alternatives work almost the same way 1 object has a reference to another and delegates it some workwhereas with inheritance, the object itself is able to do that work inheriting the behavior from its superclass with this new approach, can easily substitute the linked helper object with another changing the behavior of the container at runtimean object can use the behavior of various classes having references to multiple objects and delegating them all kinds of work aggregation / composition is the key principle behind many design patterns including decorator Wrapper is the alternative nickname for the Decorator pattern that clearly expresses the main idea of the pattern a wrapper is an object that can be linked with some target objectthe wrapper contains the same set of methods as the target and delegates to it all requests it receivedhowever, the wrapper may alter the result by doing something either before or after it passes the request to the target when does the wrapper become a real decorator the wrapper implements the same interface as the wrapped object from the client's perspective, these objects are identical make the wrapper's reference field accept any object that follows that interface this will let you cover an object in multiple wrappers, adding the combined behavior of all the wrappers to it in the notification example, leave the simple email notification behavior inside the base Notifier class but turn all other notification methods into decoratorsthe client code would need to wrap a basic notifier object into a set of decorators that match the client's preferences the resulting objects will be structures as a stack the last decorator in the stack would be the object that the client actually works withsince all decorators implement the same interface as the base notifier the rest of the client code won't care whether it works with the pure notifier object or the decorated one the same approach could be applied to other behaviors such as formatting messages or composing the recipient list the client can decorate the object with any custom decorates as long as they follow the same interface as the others "},{"title":"Analogy​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#analogy","content":"wearing clothes is an example of decorators when you're cold, you wrap yourself in a sweaterif you're cold with a sweater, you can wear a jacket on topif it's raining, you can put on a raincoatall of these garments extend your basic behavior but aren't part of you you can easily take off any piece of clothing whenever you don't need it "},{"title":"Structure​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#structure","content":" The Component declares the common interface for both wrappers and wrapped objects. Concrete Component is a class of objects being wrapped. It defines the basic behavior, which can be altered by decorators. The Base Decorator class has a field for referencing a wrapped object. The field’s type should be declared as the component interface so it can contain both concrete components and decorators.The base decorator delegates all operations to the wrapped object. Concrete Decorators define extra behaviors that can be added to components dynamically. Concrete decorators override methods of the base decorator and execute their behavior either before or after calling the parent method. The Client can wrap components in multiple layers of decorators, as long as it works with all objects via the component interface. "},{"title":"When to use​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#when-to-use","content":"Use the Decorator pattern when you need to be able to assign extra behaviors to objects at runtime without breaking the code that uses these objects The Decorator lets you structure your business logic into layers, create a decorator for each layerand compose objects with various combinations of this logic at runtime The client code can treat all these objects in the same way, since they all follow a common interface Use the pattern when it’s awkward or not possible to extend an object’s behavior using inheritance Many programming languages have the final keyword that can be used to prevent further extension of a class For a final class, the only way to reuse the existing behavior would be to wrap the class with your own wrapper, using the Decorator pattern "},{"title":"How to implement​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#how-to-implement","content":"Make sure your business domain can be represented as a primary component with multiple optional layers over itFigure out what methods are common to both the primary component and the optional layers Create a component interface and declare those methods there Create a concrete component class and define the base behavior in itCreate a base decorator class It should have a field for storing a reference to a wrapped objectThe field should be declared with the component interface type to allow linking to concrete components as well as decoratorsThe base decorator must delegate all work to the wrapped object Make sure all classes implement the component interfaceCreate concrete decorators by extending them from the base decorator A concrete decorator must execute its behavior before or after the call to the parent method (which always delegates to the wrapped object) The client code must be responsible for creating decorators and composing them in the way the client needs "},{"title":"Pros & Cons​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#pros--cons","content":""},{"title":"Pros​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#pros","content":"can extend an object’s behavior without making a new subclasscan add or remove responsibilities from an object at runtimecan combine several behaviors by wrapping an object into multiple decoratorsSingle Responsibility Principle can divide a monolithic class that implements many possible variants of behavior into several smaller classes "},{"title":"Cons​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#cons","content":"It’s hard to remove a specific wrapper from the wrappers stackIt’s hard to implement a decorator in such a way that its behavior doesn’t depend on the order in the decorators stackThe initial configuration code of layers might look pretty ugly "},{"title":"Summary​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#summary","content":"the decorator pattern, ingests a function and returns back a functiondecorators can be used to add features and function to existing objects dynamicallyimplemented as higher order functions "},{"title":"Example​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#example","content":""},{"title":"Typescript​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#typescript","content":"interface Coffee { getCost(); getDescription(); } class SimpleCoffee implements Coffee { public getCost() { return 10; } public getDescription() { return &quot;Simple coffee&quot;; } } class CoffeeDecorator implements Coffee { protected wrappee: Coffee; constructor(coffee: Coffee) { this.wrappee = coffee; } public getCost() { return this.wrappee.getCost(); } public getDescription() { return this.wrappee.getDescription(); } }  class MilkCoffeeDecorator extends CoffeeDecorator { public getCost(): number { return this.wrappee.getCost() + 2; } public getDescription(): string { return this.wrappee.getDescription() + &quot;with milk&quot;; } } class WhipCoffeeDecorator extends CoffeeDecorator { public getCost(): number { return this.wrappee.getCost() + 3; } public getDescription(): string { return this.wrappee.getDescription() + &quot;and with whip&quot;; } } let someCoffee = new SimpleCoffee(); someCoffee.getCost(); // 10 someCoffee.getDescription(); // Simple Coffee someCoffee = new MilkCoffeeDecorator(someCoffee); someCoffee.getCost(); // 12 someCoffee = new WhipCoffeeDecorator(someCoffee); someCoffee.getDescription(); // Simple Coffee with milk and whip  "},{"title":"Javascript​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#javascript","content":"the TC39 has proposed the decorator (@decorator) syntax for use with classes and class methodsuntil the format is released, the decorator syntax can be implemented using the babel complier "},{"title":"Python​","type":1,"pageTitle":"Decorator","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/#python","content":"the decorator design pattern is NOT the same as the python decorator / function wrapper "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; #include &lt;string&gt; /** * Decorator Design Pattern * * Intent: Lets you attach new behaviors to objects by placing these objects * inside special wrapper objects that contain the behaviors. */ /** * The base Component interface defines operations that can be altered by * decorators. */ class Component { public: virtual ~Component() {} virtual std::string Operation() const = 0; }; /** * Concrete Components provide default implementations of the operations. There * might be several variations of these classes. */ class ConcreteComponent : public Component { public: std::string Operation() const override { return &quot;ConcreteComponent&quot;; } }; /** * The base Decorator class follows the same interface as the other components. * The primary purpose of this class is to define the wrapping interface for all * concrete decorators. The default implementation of the wrapping code might * include a field for storing a wrapped component and the means to initialize * it. */ class Decorator : public Component { /** * @var Component */ protected: Component* component_; public: Decorator(Component* component) : component_(component) { } /** * The Decorator delegates all work to the wrapped component. */ std::string Operation() const override { return this-&gt;component_-&gt;Operation(); } }; /** * Concrete Decorators call the wrapped object and alter its result in some way. */ class ConcreteDecoratorA : public Decorator { /** * Decorators may call parent implementation of the operation, instead of * calling the wrapped object directly. This approach simplifies extension of * decorator classes. */ public: ConcreteDecoratorA(Component* component) : Decorator(component) { } std::string Operation() const override { return &quot;ConcreteDecoratorA(&quot; + Decorator::Operation() + &quot;)&quot;; } }; /** * Decorators can execute their behavior either before or after the call to a * wrapped object. */ class ConcreteDecoratorB : public Decorator { public: ConcreteDecoratorB(Component* component) : Decorator(component) { } std::string Operation() const override { return &quot;ConcreteDecoratorB(&quot; + Decorator::Operation() + &quot;)&quot;; } }; /** * The client code works with all objects using the Component interface. This * way it can stay independent of the concrete classes of components it works * with. */ void ClientCode(Component* component) { // ... std::cout &lt;&lt; &quot;RESULT: &quot; &lt;&lt; component-&gt;Operation(); // ... } int main() { /** * This way the client code can support both simple components... */ Component* simple = new ConcreteComponent; std::cout &lt;&lt; &quot;Client: I've got a simple component:\\n&quot;; ClientCode(simple); std::cout &lt;&lt; &quot;\\n\\n&quot;; /** * ...as well as decorated ones. * * Note how decorators can wrap not only simple components but the other * decorators as well. */ Component* decorator1 = new ConcreteDecoratorA(simple); Component* decorator2 = new ConcreteDecoratorB(decorator1); std::cout &lt;&lt; &quot;Client: Now I've got a decorated component:\\n&quot;; ClientCode(decorator2); std::cout &lt;&lt; &quot;\\n&quot;; delete simple; delete decorator1; delete decorator2; return 0; } Client: I've got a simple component: RESULT: ConcreteComponent Client: Now I've got a decorated component: RESULT: ConcreteDecoratorB(ConcreteDecoratorA(ConcreteComponent)) ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/cSharp/","content":"C# Example // Decorator Design Pattern // // Intent: Lets you attach new behaviors to objects by placing these objects // inside special wrapper objects that contain the behaviors. using System; namespace RefactoringGuru.DesignPatterns.Composite.Conceptual { // The base Component interface defines operations that can be altered by // decorators. public abstract class Component { public abstract string Operation(); } // Concrete Components provide default implementations of the operations. // There might be several variations of these classes. class ConcreteComponent : Component { public override string Operation() { return &quot;ConcreteComponent&quot;; } } // The base Decorator class follows the same interface as the other // components. The primary purpose of this class is to define the wrapping // interface for all concrete decorators. The default implementation of the // wrapping code might include a field for storing a wrapped component and // the means to initialize it. abstract class Decorator : Component { protected Component _component; public Decorator(Component component) { this._component = component; } public void SetComponent(Component component) { this._component = component; } // The Decorator delegates all work to the wrapped component. public override string Operation() { if (this._component != null) { return this._component.Operation(); } else { return string.Empty; } } } // Concrete Decorators call the wrapped object and alter its result in some // way. class ConcreteDecoratorA : Decorator { public ConcreteDecoratorA(Component comp) : base(comp) { } // Decorators may call parent implementation of the operation, instead // of calling the wrapped object directly. This approach simplifies // extension of decorator classes. public override string Operation() { return $&quot;ConcreteDecoratorA({base.Operation()})&quot;; } } // Decorators can execute their behavior either before or after the call to // a wrapped object. class ConcreteDecoratorB : Decorator { public ConcreteDecoratorB(Component comp) : base(comp) { } public override string Operation() { return $&quot;ConcreteDecoratorB({base.Operation()})&quot;; } } public class Client { // The client code works with all objects using the Component interface. // This way it can stay independent of the concrete classes of // components it works with. public void ClientCode(Component component) { Console.WriteLine(&quot;RESULT: &quot; + component.Operation()); } } class Program { static void Main(string[] args) { Client client = new Client(); var simple = new ConcreteComponent(); Console.WriteLine(&quot;Client: I get a simple component:&quot;); client.ClientCode(simple); Console.WriteLine(); // ...as well as decorated ones. // // Note how decorators can wrap not only simple components but the // other decorators as well. ConcreteDecoratorA decorator1 = new ConcreteDecoratorA(simple); ConcreteDecoratorB decorator2 = new ConcreteDecoratorB(decorator1); Console.WriteLine(&quot;Client: Now I've got a decorated component:&quot;); client.ClientCode(decorator2); } } } Client: I get a simple component: RESULT: ConcreteComponent Client: Now I've got a decorated component: RESULT: ConcreteDecoratorB(ConcreteDecoratorA(ConcreteComponent)) ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/go/","content":"Go Example package main type cheeseTopping struct { pizza pizza } func (c *cheeseTopping) getPrice() int { pizzaPrice := c.pizza.getPrice() return pizzaPrice + 10 } package main type pizza interface { getPrice() int } package main type tomatoTopping struct { pizza pizza } func (c *tomatoTopping) getPrice() int { pizzaPrice := c.pizza.getPrice() return pizzaPrice + 7 } package main type veggeMania struct { } func (p *veggeMania) getPrice() int { return 15 } package main import &quot;fmt&quot; func main() { pizza := &amp;veggeMania{} //Add cheese topping pizzaWithCheese := &amp;cheeseTopping{ pizza: pizza, } //Add tomato topping pizzaWithCheeseAndTomato := &amp;tomatoTopping{ pizza: pizzaWithCheese, } fmt.Printf(&quot;Price of veggeMania with tomato and cheese topping is %d\\n&quot;, pizzaWithCheeseAndTomato.getPrice()) } ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/java/","content":"Java Example decorators decorators/CompressionDecorator.java package refactoring_guru.decorator.example.decorators; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.InputStream; import java.util.Base64; import java.util.zip.Deflater; import java.util.zip.DeflaterOutputStream; import java.util.zip.InflaterInputStream; public class CompressionDecorator extends DataSourceDecorator { private int compLevel = 6; public CompressionDecorator(DataSource source) { super(source); } public int getCompressionLevel() { return compLevel; } public void setCompressionLevel(int value) { compLevel = value; } @Override public void writeData(String data) { super.writeData(compress(data)); } @Override public String readData() { return decompress(super.readData()); } private String compress(String stringData) { byte[] data = stringData.getBytes(); try { ByteArrayOutputStream bout = new ByteArrayOutputStream(512); DeflaterOutputStream dos = new DeflaterOutputStream(bout, new Deflater(compLevel)); dos.write(data); dos.close(); bout.close(); return Base64.getEncoder().encodeToString(bout.toByteArray()); } catch (IOException ex) { return null; } } private String decompress(String stringData) { byte[] data = Base64.getDecoder().decode(stringData); try { InputStream in = new ByteArrayInputStream(data); InflaterInputStream iin = new InflaterInputStream(in); ByteArrayOutputStream bout = new ByteArrayOutputStream(512); int b; while ((b = iin.read()) != -1) { bout.write(b); } in.close(); iin.close(); bout.close(); return new String(bout.toByteArray()); } catch (IOException ex) { return null; } } } decorators/DataSource.java package refactoring_guru.decorator.example.decorators; public interface DataSource { void writeData(String data); String readData(); } decorators/DataSourceDecorator.java package refactoring_guru.decorator.example.decorators; public class DataSourceDecorator implements DataSource { private DataSource wrappee; DataSourceDecorator(DataSource source) { this.wrappee = source; } @Override public void writeData(String data) { wrappee.writeData(data); } @Override public String readData() { return wrappee.readData(); } } decorators/EncryptionDecorator.java package refactoring_guru.decorator.example.decorators; import java.util.Base64; public class EncryptionDecorator extends DataSourceDecorator { public EncryptionDecorator(DataSource source) { super(source); } @Override public void writeData(String data) { super.writeData(encode(data)); } @Override public String readData() { return decode(super.readData()); } private String encode(String data) { byte[] result = data.getBytes(); for (int i = 0; i &lt; result.length; i++) { result[i] += (byte) 1; } return Base64.getEncoder().encodeToString(result); } private String decode(String data) { byte[] result = Base64.getDecoder().decode(data); for (int i = 0; i &lt; result.length; i++) { result[i] -= (byte) 1; } return new String(result); } } decorators/FileDataSource.java package refactoring_guru.decorator.example.decorators; import java.io.*; public class FileDataSource implements DataSource { private String name; public FileDataSource(String name) { this.name = name; } @Override public void writeData(String data) { File file = new File(name); try (OutputStream fos = new FileOutputStream(file)) { fos.write(data.getBytes(), 0, data.length()); } catch (IOException ex) { System.out.println(ex.getMessage()); } } @Override public String readData() { char[] buffer = null; File file = new File(name); try (FileReader reader = new FileReader(file)) { buffer = new char[(int) file.length()]; reader.read(buffer); } catch (IOException ex) { System.out.println(ex.getMessage()); } return new String(buffer); } } Demo.java package refactoring_guru.decorator.example; import refactoring_guru.decorator.example.decorators.*; public class Demo { public static void main(String[] args) { String salaryRecords = &quot;Name,Salary\\nJohn Smith,100000\\nSteven Jobs,912000&quot;; DataSourceDecorator encoded = new CompressionDecorator( new EncryptionDecorator( new FileDataSource(&quot;out/OutputDemo.txt&quot;))); encoded.writeData(salaryRecords); DataSource plain = new FileDataSource(&quot;out/OutputDemo.txt&quot;); System.out.println(&quot;- Input ----------------&quot;); System.out.println(salaryRecords); System.out.println(&quot;- Encoded --------------&quot;); System.out.println(plain.readData()); System.out.println(&quot;- Decoded --------------&quot;); System.out.println(encoded.readData()); } } - Input ---------------- Name,Salary John Smith,100000 Steven Jobs,912000 - Encoded -------------- Zkt7e1Q5eU8yUm1Qe0ZsdHJ2VXp6dDBKVnhrUHtUe0sxRUYxQkJIdjVLTVZ0dVI5Q2IwOXFISmVUMU5rcENCQmdxRlByaD4+ - Decoded -------------- Name,Salary John Smith,100000 Steven Jobs,912000 ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/javascript/","content":"JavaScript Example /** * The base Component interface defines operations that can be altered by * decorators. */ class Component { operation() {} } module.exports = Component; const Component = require(&quot;./Component&quot;); /** * The base Decorator class follows the same interface as the other components. * The primary purpose of this class is to define the wrapping interface for all * concrete decorators. The default implementation of the wrapping code might * include a field for storing a wrapped component and the means to initialize * it. */ class Decorator extends Component { constructor(component) { super(); this.component = component; } /** * The Decorator delegates all work to the wrapped component. */ operation() { return this.component.operation(); } } module.exports = Decorator; const Component = require(&quot;./Component&quot;); /** * Concrete Components provide default implementations of the operations. There * might be several variations of these classes. */ class ConcreteComponent extends Component { operation() { return &quot;ConcreteComponent&quot;; } } module.exports = ConcreteComponent; const Decorator = require(&quot;./Decorator&quot;); /** * Concrete Decorators call the wrapped object and alter its result in some way. */ class ConcreteDecoratorA extends Decorator { /** * Decorators may call parent implementation of the operation, instead of * calling the wrapped object directly. This approach simplifies extension * of decorator classes. * Decorators can execute their behavior either before or after the call to a * wrapped object. */ operation() { return `ConcreteDecoratorA(${super.operation()})`; } } module.exports = ConcreteDecoratorA; const Decorator = require(&quot;./Decorator&quot;); /** * Concrete Decorators call the wrapped object and alter its result in some way. */ class ConcreteDecoratorB extends Decorator { /** * Decorators may call parent implementation of the operation, instead of * calling the wrapped object directly. This approach simplifies extension * of decorator classes. * Decorators can execute their behavior either before or after the call to a * wrapped object. */ operation() { return `ConcreteDecoratorB(${super.operation()})`; } } module.exports = ConcreteDecoratorB; const ConcreteComponent = require(&quot;./ConcreteComponent&quot;); const ConcreteDecoratorA = require(&quot;./ConcreteDecoratorA&quot;); const ConcreteDecoratorB = require(&quot;./ConcreteDecoratorB&quot;); /** * Decorator Design Pattern * * Intent: Lets you attach new behaviors to objects by placing these objects * inside special wrapper objects that contain the behaviors. */ /** * The client code works with all objects using the Component interface. This * way it can stay independent of the concrete classes of components it works * with. */ function clientCode(component) { // ... console.log(`RESULT: ${component.operation()}`); // ... } /** * This way the client code can support both simple components... */ const simple = new ConcreteComponent(); console.log(&quot;Client: I've got a simple component:&quot;); clientCode(simple); console.log(&quot;&quot;); /** * ...as well as decorated ones. * * Note how decorators can wrap not only simple components but the other * decorators as well. */ const decorator1 = new ConcreteDecoratorA(simple); const decorator2 = new ConcreteDecoratorB(decorator1); console.log(&quot;Client: Now I've got a decorated component:&quot;); clientCode(decorator2); ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/javascript/example2","content":"Example 2 import axios from &quot;axios&quot;; export const CurrencyConverter = (fn) =&gt; async (qty, price, base, to) =&gt; { const result = await fn(qty, price); // Call the original function const currencyRate = await axios( `https://free.currconv.com/api/v7/convert?q=${to.toUpperCase()}_${base.toUpperCase()}&amp;compact=y&amp;apiKey=84d74466e0748caf6de3` ); return ( currencyRate.data[`${to.toUpperCase()}_${base.toUpperCase()}`][&quot;val&quot;] * result ); }; export const CurrencyConverterDecorator = (base, to) =&gt; { return function (target, name, descriptor) { try { const fn = descriptor.value; // The original function descriptor.value = async (...args) =&gt; { // Define the decorator const result = await fn.call(this, ...args); const currencyRate = await axios( `https://free.currconv.com/api/v7/convert?q=${to.toUpperCase()}_${base.toUpperCase()}&amp;compact=y&amp;apiKey=84d74466e0748caf6de3` ); return await (currencyRate.data[ `${to.toUpperCase()}_${base.toUpperCase()}` ][&quot;val&quot;] * result); }; return descriptor; } catch (error) { console.log(error); } }; }; import { CurrencyConverter, CurrencyConverterDecorator, } from &quot;./CurrencyConverter&quot;; const cost = (qty, price) =&gt; Promise.resolve(qty * price); cost(20, 5).then((result) =&gt; console.log(result)); // with converter const costPlus = CurrencyConverter(cost); costPlus(20, 5, &quot;SGD&quot;, &quot;USD&quot;).then((result) =&gt; console.log(result)); class Cost { @CurrencyConverterDecorator(&quot;INR&quot;, &quot;USD&quot;) compute(qty, price) { return Promise.resolve(qty * price); } } const price = new Cost(); price.compute(20, 5).then((result) =&gt; console.log(result)); ","keywords":""},{"title":"how to run","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/javascript/realExample/","content":"how to run npm run devnpm run start","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/python/","content":"Python Example &quot;&quot;&quot; Decorator Design Pattern Intent: Lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors. &quot;&quot;&quot; class Component(): &quot;&quot;&quot; The base Component interface defines operations that can be altered by decorators. &quot;&quot;&quot; def operation(self) -&gt; str: pass class ConcreteComponent(Component): &quot;&quot;&quot; Concrete Components provide default implementations of the operations. There might be several variations of these classes. &quot;&quot;&quot; def operation(self) -&gt; str: return &quot;ConcreteComponent&quot; class Decorator(Component): &quot;&quot;&quot; The base Decorator class follows the same interface as the other components. The primary purpose of this class is to define the wrapping interface for all concrete decorators. The default implementation of the wrapping code might include a field for storing a wrapped component and the means to initialize it. &quot;&quot;&quot; _component: Component = None def __init__(self, component: Component) -&gt; None: self._component = component @property def component(self) -&gt; str: &quot;&quot;&quot; The Decorator delegates all work to the wrapped component. &quot;&quot;&quot; return self._component def operation(self) -&gt; str: return self._component.operation() class ConcreteDecoratorA(Decorator): &quot;&quot;&quot; Concrete Decorators call the wrapped object and alter its result in some way. &quot;&quot;&quot; def operation(self) -&gt; str: &quot;&quot;&quot; Decorators may call parent implementation of the operation, instead of calling the wrapped object directly. This approach simplifies extension of decorator classes. &quot;&quot;&quot; return f&quot;ConcreteDecoratorA({self.component.operation()})&quot; class ConcreteDecoratorB(Decorator): &quot;&quot;&quot; Decorators can execute their behavior either before or after the call to a wrapped object. &quot;&quot;&quot; def operation(self) -&gt; str: return f&quot;ConcreteDecoratorB({self.component.operation()})&quot; def client_code(component: Component) -&gt; None: &quot;&quot;&quot; The client code works with all objects using the Component interface. This way it can stay independent of the concrete classes of components it works with. &quot;&quot;&quot; # ... print(f&quot;RESULT: {component.operation()}&quot;, end=&quot;&quot;) # ... if __name__ == &quot;__main__&quot;: # This way the client code can support both simple components... simple = ConcreteComponent() print(&quot;Client: I've got a simple component:&quot;) client_code(simple) print(&quot;\\n&quot;) # ...as well as decorated ones. # # Note how decorators can wrap not only simple components but the other # decorators as well. decorator1 = ConcreteDecoratorA(simple) decorator2 = ConcreteDecoratorB(decorator1) print(&quot;Client: Now I've got a decorated component:&quot;) client_code(decorator2) Client: I've got a simple component: RESULT: ConcreteComponent Client: Now I've got a decorated component: RESULT: ConcreteDecoratorB(ConcreteDecoratorA(ConcreteComponent)) ","keywords":""},{"title":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","type":0,"sectionRef":"#","url":"docs/","content":"","keywords":""},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c","content":"#include &lt;iostream&gt; int main() { std::cout &lt;&lt; &quot;Hello, World!&quot;; return 0; }  "},{"title":"groovy​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#groovy","content":"using dynamic type method println &quot;Hello World&quot;  using static type method class HelloWorld { static void main(String[] args) { println(&quot;Hello World&quot;); } }  "},{"title":"assembly​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#assembly","content":"; x86 32 bit Mac OSX ; to run file, compile and run with the following command ; nasm -f macho hello_world32.asm &amp;&amp; ld -macosx_version_min 10.7.0 -o hello_world32 hello_world32.o &amp;&amp; ./hello_world32 global start section .text start: push dword msg.len push dword msg push dword 1 mov eax, 4 sub esp, 4 int 0x80 add esp, 16 push dword 0 mov eax, 1 sub esp, 12 int 0x80 section .data msg: db &quot;Hello, world!&quot;, 10 .len: equ $ - msg  ; x86_64 64 bit Mac OSX ; to run file, compile and run with the following command ; nasm -f macho64 hello_world64.asm &amp;&amp; ld -macosx_version_min 10.7.0 -lSystem -o hello_world64 hello_world64.o &amp;&amp; ./hello_world64 global start section .text start: mov rax, 0x2000004 ; write mov rdi, 1 ; stdout mov rsi, msg mov rdx, msg.len syscall mov rax, 0x2000001 ; exit mov rdi, 0 syscall section .data msg: db &quot;Hello, world!&quot;, 10 .len: equ $ - msg  back to top "},{"title":"Comments​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#comments","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3","content":"# Single line comment &quot;&quot;&quot; multi-line comments &quot;&quot;&quot;  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-1","content":"// Single line comment /* multi-line comments */  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-1","content":"# Single line comment =begin multi-line comments =end  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-1","content":"// Single line comment /* multi-line comments */ /** * javadoc &lt;b&gt;comments&lt;/b&gt; for classes, javadocs can be used to auto generate documentation documents for code commented with javadocs */ /** * javadoc &lt;b&gt;comments&lt;/b&gt; for methods with parameters - example main method * @param args - an array of string values */  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-1","content":"// Single line comment /* multi-line comments */  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-2","content":"// Single line comment /* multi-line comments */  "},{"title":"assembly​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#assembly-1","content":"; Single line comment  back to top "},{"title":"Data types​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#data-types","content":""},{"title":"python​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python","content":"8 main data types​ Text type str, x = &quot;Hello World&quot; , x = str(&quot;Hello World&quot;) Numeric types int, x = 20 , x = int(20)float, x = 20.5, x = float(20.5)complex, x = 1j, x = complex(1j) Sequence types list, x = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;], x = list((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;))tuple, x = (&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;), x = tuple((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;))range, x = range(6), x = range(6) Mapping type dict, x = {&quot;name&quot; : &quot;John&quot;, &quot;age&quot; : 36}, x = dict(name=&quot;John&quot;, age=36) Set types set, x = {&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;}, x = set((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;))frozenset, x = frozenset({&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;}), x = frozenset((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;))``` Boolean type bool, x = True, x = bool(5) Binary types bytes, x = b&quot;Hello&quot;, x = bytes(5)bytearray, x = bytearray(5), x = bytearray(5)memoryview, x = memoryview(bytes(5)), x = memoryview(bytes(5)) None type None, x = None "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-2","content":"1 primitive structural root​ null unknown values – a standalone type that has a single value null 2 Structual types​ object for more complex data structuresnew Object, new Array, new Map, new Set, new WeakMap, new Date, new ... 6 basic primitive data types​ number for numbers of any kind: integer or floating-point, integers are limited by ±(2^53-1) === ±9007199254740991contain regular numbers let n = 123; floats let n = 1.23; special numeric values Infinity let n = 1 / 0; let n2 = Infinity; -InfinityNaN let n = &quot;not a number&quot; / 2; // NaN bigint no maximum limit to a BigInt let bigInt = 1234567890123456789012345678901234567890n; // ends with n string may have zero or more characters, there’s no separate single-character type boolean true / false. undefined unassigned values – a standalone type that has a single value undefined symbol for unique identifiers // id is a new symbol let id = Symbol(); // can give symbol a description (also called a symbol name), mostly useful for debugging purposes let _id = Symbol(&quot;id2&quot;); // symbol in an object literal let obj = { [_id]: 123 // not &quot;id&quot;: 123 }; // guaranteed to be unique let id1 = Symbol(&quot;id&quot;); let id2 = Symbol(&quot;id&quot;); console.log(id1 == id2); // false // convert symbol to string id1.toString(); // &quot;Symbol(id)&quot; // get symbol description id1.description; // &quot;id&quot; Symbols allow us to create “hidden” properties of an object, that no other part of code can accidentally access or overwrite let user = { // belongs to another code name: &quot;John&quot; }; let id = Symbol(&quot;id&quot;); user[id] = 1; console.log(user[id]); // 1 console.log(user); // { name: 'John', [Symbol(id)]: 1 } benefit of using symbol over string objects belongs to another code, and that code also works with them, we shouldn’t just add any fields to itsymbol cannot be accessed accidentally, the third-party code probably won’t even see it Symbols are skipped by for...in loop let id = Symbol(&quot;id&quot;); let user = { name: &quot;John&quot;, age: 30, [id]: 123 }; for (let key in user) console.log(key); // name age undefined Symbol can be cloned with Object.assign let id = Symbol(&quot;id&quot;); let user = { [id]: 123 }; let clone = Object.assign({}, user); console.log(clone); // { [Symbol(id)]: 123 } global symbols use if want same-named symbols to be same entities // get symbol by name let id1 = Symbol.for(&quot;id&quot;); let id2 = Symbol.for(&quot;id&quot;); console.log(id1 === id2); // true // get name by symbol, can only use for global symbol console.log(Symbol.keyFor(id1)); // &quot;id&quot;  "},{"title":"java 8​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-8","content":"2 major data types​ Primitive data types stored in fastest available memorynames are all camel caseJava class library includes helper classes for each primitive helper classes support conversion and formatting toolsimport java.lang.Byte; import not required from java.lang libraries all primitive numeric variables default to 0 public class Main { private static int myInt; // must be declared as static of a class to have default value public static void main(String args[]) { System.out.println(myInt); // 0 } } data types numbers byte 8 bits-128 to 127default value 0helper class Byte short 16 bits-32,768 to 32,767default value 0helper class Short int 32 bits-2,147,483,648 to 2,147,483,647default value 0helper class Integer long 64 bits-9.22337E+18 to 9.22337E+18default value 0Lhelper class Long float 32 bitsdefault value 0.0f or 0.0F or .0f or .0Fhelper class Float double 64 bitsdefault value 0.0d or 0.0D or .0d or .0Dhelper class Double double doubleValue = 156.5d; Double doubleObj = new Double(doubleValue); // declare instance of the double class int intValue = doubleObj.intValue(); // 156, use helper object to convert to desired numeric data type characters '\\u0000' (or 0) to '\\uffff' (or 65,535 inclusive)default value '\\u0000' booleans default value false Objects an object is an instance of a classnonprimitive variables are references to objectsobjects can have multiple referencesObject data types String a complex objectis an instance of the string classis an array of charactersstring objects are immutablereasigning the string value creates a new object the old object can be cleared from memory thrown garbage collection process helper class is java.lang.String, thus import not required String string1 = new String(&quot;Hello&quot;);  back to top "},{"title":"Variable declaration int​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#variable-declaration-int","content":"integer ...-2, -1, 0, 1, 2... "},{"title":"python 2​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2-1","content":"# int: -2147483648 ~ 2147483647 integer_name = 123 # long: -9223372036854775808L ~ 9223372036854775807L long_name = 123L # int beyond int size will automatically be converted to long  "},{"title":"python 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-3-1","content":"# python 3: int and long are combined into int integer_name = 123  "},{"title":"javascript ES5​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es5","content":"// method 1 var integer_name; integer_name = 123; // accessible within the function // method 2 var integer_name = 123;  "},{"title":"javascript ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6","content":"// method 1 let integer_name; integer_name = 123; // accessible only within the block {} // method 2 let integer_name = 123; // method 3 const integer_name = 123; // variable value cannot be reassigned  "},{"title":"typescript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#typescript","content":"let integer_name: number = 123; // method 1 let integer_name2 = 123; // method 2, not required to declare type if assigning to value let integer_name3: number; // must declare the value type integer_name3 = 123; let decimal: number = 6; let hex: number = 0xf00d; let binary: number = 0b1010; let octal: number = 0o744;  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-2","content":"integer_name = 123  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-2","content":"// public/private/protected static final byte/short/int/long integerName = 123; /* public: visible to all classes protected: visible to class they belong and any subclasses private (most restricted): visible only to class they belong static: can be accessed without creating a class instance final: constant value, value cannot be changed */ // byte: -128 ~ 127, 8 bits byte byteName = 123; // short: -32768 ~ 32767, 16 bits short shortName = 123; // int: -2147483648 ~ 2147483647, -2_147_483_648 ~ 2_147_483_647, 32 bits int integerName; integerName = 123; int integerName2 = 123; // default is visible within the same package // long: -9223372036854775808L ~ 9223372036854775807L, can use _ same as int, 64 bits long longName1 = 123l; // 123 long longName2 = 123L; // 123 long longName3 = 10_000; // 10000, introduced in java 7, just makes it easier to read  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-3","content":"// var can be used to handle declarations when the data type is unknown // once a variable is declared with var, the variable cannot be reassigned to a different data type var variableName = 123; variableName = &quot;123&quot;; // error CS0029: Cannot implicitly convert type `string' to `int' // byte: -128 ~ 127, 8 bits byte byteName = 123; // type Byte System.Byte byteName2 = 123; // short: -32768 ~ 32767, 16 bits short shortName = 123; // type Int16 System.Int16 shortName2 = 123; // int: -2,147,483,648 ~ 2,147,483,647 int integerName1 = 123; // type Int32 int integerName2 = int.MaxValue; // 2147483647 System.Int32 integerName3 = 123; // Add const before variable declaration to make it a constant const int integerName3 = 123; // long: -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807 long longName1 = 123; // type Int64 long longName2 = long.MaxValue; // 9223372036854775807 System.Int64 longName3 = 123; // decimal: max value 79,228,162,514,264,337,593,543,950,335 decimal decimalName1 = 123; // type Decimal decimal decimalName2 = 123m; decimal decimalName3 = decimal.MaxValue; // 79228162514264337593543950335 System.Decimal decimalName4 = 123; // use System.Numerics.BigInteger for larger values (need add references to System.Numerics.dll)  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-4","content":"// const unsigned char/short/int/long/long long integer_name = 123; /* const: constant value, value cannot be changed integer are signed by default: can assign both positive &amp; negative values unsigned integer (use when dealing with bit values): 0 ~ ... e.g. char: -128 ~ 127 e.g. unsigned char: 0 ~ 255 // 128 + 127 = 255 */ // char: 1 byte, -128 ~ 127, use C code to print &quot;#include＜stdio.h＞ printf(&quot;%d&quot;, char_name);&quot; // 1 char has 8 bits char char_name; char_name = 123; // similar to the rest of int variable declaration // short/short int: 16 bits, 2 bytes, -32768 ~ 32767 short short_name; short_name = 123; short int short_name; short_name = 123; // similar to the rest of int variable declaration // int: 16 bits, 4 bytes, -2147483648 ~ 2147483647 int integer_name; integer_name = 123; // uninitialized int integer_name = 123; // C-like initialization int integer_name (123); // Constructor initialization int age {123}; // C++11 list initialization syntax // long/long int: 32 bits, 4 bytes, -2147483648 ~ 2147483647 bytes long long_name; long_name = 123; long int long_name; long_name = 123; // similar to the rest of int variable declaration // long long/long long int: 64 bits, 8 bytes, -9223372036854775808 ~ 9223372036854775807 long long long_name; long_name = 123; long long int long_name; long_name = 123; // similar to the rest of int variable declaration  back to top "},{"title":"Variable declaration float​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#variable-declaration-float","content":"float, double "},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-1","content":"float_name = 1.123 float_name = 0.1123e1 # equals to 1.123 float_name = 0.1123E1 # equals to 1.123 float_name = 1123e-3 # equals to 1.123 float_name = 1123E-3 # equals to 1.123  float have inaccurate values print(.1 + .2 + .3) # 0.6000000000000001 # use the decimal library to make it accurate from decimal import * # do not do this Decimal(.1) + Decimal(.2) + Decimal(.3) # Decimal('0.6000000000000000055511151231') # do this: convert float to a string first x = Decimal(&quot;.1&quot;) + Decimal(&quot;.2&quot;) + Decimal(&quot;.3&quot;) # Decimal('0.6') f&quot;{x}&quot; # &quot;0.6 print(type(x)) # &lt;class 'decimal.Decimal'&gt;  "},{"title":"javascript ES5​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es5-1","content":"var float_name = 1.123;  "},{"title":"javascript ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6-1","content":"let float_name = 1.123; const float_name = 1.123;  "},{"title":"typescript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#typescript-1","content":"let float_name: number = 1.123;  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-3","content":""},{"title":"java:​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-3","content":"// float: 32 bits, 4 bytes float float_name = 1.123f; // 1.123, have 7 decimal digits float float_name = (float) 1.123; // double: 64 bits, 8 bytes double double_name = 1.123d; // 1.123, have 16 decimal digits double double_name = 1.123; // using BigDecimal math class import java.math.BigDecimal; public class Main { public static void main(String[] args) { double value = .012; double pSum = value + value + value; System.out.println(pSum); // 0.036000000000000004 String strValue = Double.toString(value); System.out.println(strValue); // 0.012 BigDecimal bigValue1 = new BigDecimal(value); BigDecimal bSum1 = bigValue1.add(bigValue1).add(bigValue1); System.out.println(bSum1.toString()); // 0.0360000000000000007494005416219806647859513759613037109375 BigDecimal bigValue2 = new BigDecimal(strValue); BigDecimal bSum2 = bigValue2.add(bigValue2).add(bigValue2); System.out.println(bSum2.toString()); // 0.036 } }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-5","content":"// float: 32 bit max value with 7 decimals of precision 3.402823E+38 float floatName1 = 1.123f; // type Single float floatName2 = float.MaxValue; // 3.402823E+38 System.Single floatName3 = 1.123f; // double: 64 bit max value with 15 decimals of precision 1.79769313486232E+308 double doubleName1 = 1.123d; // type Double double doubleName2 = 1.123; // all floats are double by default double doubleName3 = double.MaxValue; // 1.79769313486232E+308 System.Double doubleName4 = 1.123;  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-6","content":"// float: 4 bytes float float_name; float_name = 1.123; // have 7 decimal digits // similar to the rest of int variable declaration // double: 8 bytes double double_name; double_name = 1.123; // have 15 decimal digits // similar to the rest of int variable declaration // long double: 12 bytes long double double_name; double_name = 1.123; // have 19 decimal digits // similar to the rest of int variable declaration  back to top "},{"title":"Variable declaration None​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#variable-declaration-none","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-2","content":"variable_name = None # nan in python import math math.inf - math.inf # nan  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-3","content":"// undefined is reserved for variables whose values have not yet been set. let variable_name; // undefined //null is reserved for variables whose values are explicitly nothing — instead of just “not yet defined.” let variable_name2 = null; // NaN is a special numeric value meaning “Not a Number” let variable_name3 = NaN;  "},{"title":"typescript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#typescript-2","content":"let variable_name: void = undefined; // method 1 let variable_name2 = undefined; // method 2 let variable_name: undefined; // method 3 let variable_name2: void = null; let variable_name3: number = NaN;  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-4","content":"variable_name = nil # nil is returned when no values are assigned, but nothing is displayed on screen  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-4","content":"String stringName = null; // NaN is produced if a floating point operation float floatName = Float.NaN; // NaN double doubleName = Double.NaN; // NaN Double x = new Double(-2.0/0.0); // -Infinity Double y = new Double(0.0/0.0); // NaN x.isNaN(); // false y.isNaN(); // true System.out.println(2.0 / 0); // Infinity // set infinity value double inf = Double.POSITIVE_INFINITY; // Infinity double inf = Double.NEGATIVE_INFINITY; // -Infinty  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-7","content":"string stringName = null; string stringName2 = String.Empty; // method 1: use the nullable method Nullable&lt;int&gt; integerName1 = null; // method 2: value type requires ? during declaration int? integerName2 = null;  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-8","content":"back to top "},{"title":"Strings​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#strings","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-3","content":"string_name = &quot;string&quot; string_name = 'string' # back slash not required, but will produce a new line if not given string_name = &quot;&quot;&quot;multi-line \\ string\\ &quot;&quot;&quot; # raw strings (ignore escape characters) string_name = r&quot;\\n raw string&quot; # &quot;\\n raw string&quot; len(string_name) # 6 # Character unicode point # only accepts 1 character ord(&quot;b&quot;) # 98 # reverse string string_name = string_name[::-1] # &quot;gnirts&quot; string_name = &quot;Gnirts&quot; string_name = string_name.swapcase() # &quot;gNIRTS&quot; string_name = string_name.upper() # &quot;GNIRTS&quot; string_name = string_name.lower() # &quot;gnirts&quot; # casefold: it is more aggressive than lower(), it removes all case distinctions even in unicode string_name_casefold = &quot;Hello World ß&quot; string_name_casefold.casefold() # &quot;hello world ss&quot; # capitalize string string_name_caps = &quot;test me&quot; string_name_caps.title() # &quot;Test Me&quot; string_name_caps.capitalize() # &quot;Test me&quot; # Replace string in string, string_name.replace(old, new, max) string_name = string_name.replace(&quot;g&quot;, &quot;xxx&quot;) # &quot;xxxnirts&quot; string_name = string_name.replace(&quot;x&quot;, &quot;g&quot;, 1) # &quot;gxxnirts&quot; # Find character or string in string and return the index of the 1st character, return -1 if not found string_name.find(&quot;x&quot;) # 1 string_name.find(&quot;v&quot;) # -1 # string slicing # extract characters from a string, from start position to but not including end position new_string_name = string_name[1:4] # &quot;xxn&quot; # Split strings, string_name.split(separator, max) string_name = string_name.split() # [&quot;gxxnirts&quot;] only works for string without spaces string_name = &quot;test string&quot; string_name1 = string_name.split() # [&quot;test&quot;, &quot;string&quot;] string_name2 = string_name.split(&quot;s&quot;) # [&quot;te&quot;, &quot;t &quot;, &quot;tring&quot;] string_name3 = string_name.split(&quot;s&quot;, 1) # [&quot;te&quot;, &quot;t string&quot;] # Split string into an array of letters string_name4 = list(string_name) # ['t', 'e', 's', 't', ' ', 's', 't', 'r', 'i', 'n', 'g'] # Remove empty spaces string_name = &quot; string &quot; # remove all left spaces string_name1 = string_name.lstrip() # &quot;string &quot; # remove all right spaces string_name2 = string_name.rstrip() # &quot; string&quot; # remove all spaces string_name3 = string_name.strip() # &quot;string&quot; # Check if string has alphabet and integer characters string_name3.isalnum() # False string_name = &quot;123&quot; string_name.isalnum() # True string_name = &quot;s 123&quot; string_name.isalnum() # False string_name = &quot;s123&quot; string_name.isalnum() # True # Check if string has all alphabet characters string_name3.isalpha() # True string_name = &quot;A e&quot; string_name.isalpha() # False string_name = &quot;a2&quot; string_name.isalpha() # False # Check if string has all digit characters string_name = &quot;123&quot; string_name.isdigit() # True string_name = &quot;12 3&quot; string_name.isdigit() # False string_name = &quot;12d&quot; string_name.isdigit() # False # Join an array of string elements arr = [&quot;a&quot;, &quot;b&quot;] &quot;_&quot;.join(arr) # &quot;a_b&quot;  "},{"title":"javascript ES5​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es5-2","content":"var stringName = &quot;string&quot;; var stringName = 'string'; // back slash required var stringName = &quot;multi-line \\ string&quot;; stringName.length; // 6 // Character unicode point string.charCodeAt(stringIndex) &quot;abc&quot;.charCodeAt(1) // 98 // reverse string stringName.split(&quot;&quot;).reverse().join(&quot;&quot;); // &quot;gnirts&quot; stringName = stringName.toUpperCase(); // &quot;GNIRTS&quot; stringName = stringName.toLowerCase(); // &quot;gnirts&quot; // capitalize string stringName = stringName.charAt(0).toUpperCase() + stringName.slice(1); // &quot;Gnirts&quot; // replace 1 string occurance with string, stringName.replace(old, new) stringName = stringName.replace(&quot;G&quot;, &quot;xxx&quot;); // &quot;xxxnirts&quot; let stringName0 = &quot;test_test_123&quot;; // replace all string occurances with string, stringName.replaceAll(old, new) stringName0 = stringName0.replaceAll(&quot;_&quot;, &quot; &quot;); // &quot;test test 123&quot; // extract characters from a string, from start position to but not including end position newStringName = stringName.substring(1, 4); // &quot;xxn&quot; // Split string into arrays stringName = &quot;test string&quot; stringName1 = stringName.split() // [&quot;test string&quot;] stringName2 = stringName.split(&quot;&quot;) // ['t', 'e', 's', 't', ' ', 's', 't', 'r', 'i', 'n', 'g'] stringName3 = stringName.split(&quot;s&quot;) // [&quot;te&quot;, &quot;t &quot;, &quot;tring&quot;]  "},{"title":"javascript ES6 // Almost all of ES5 are included in ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6---almost-all-of-es5-are-included-in-es6","content":"// back slash not required, but will produce a new line if not given var stringName = `multi-line \\ string`; let stringName = &quot;string&quot;; const stringName = &quot;string&quot;; // raw strings (ignore escape characters) String.raw`\\n raw string`; // &quot;\\n raw string&quot;  "},{"title":"typescript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#typescript-3","content":"let stringName: string = &quot;string&quot;; // declare string and/or other types let strOrNum: (string | number); strOrNum = &quot;abc&quot;; strOrNum = 123; // can be reassigned to a declared type  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-5","content":"string_name = &lt;&lt;EOM this is a multi line string EOM string_name = &lt;&lt;eom this is a multi line string eom string_name = 'string' string_name = &quot;string&quot; string_name.length # 6 string_name = string_name.reverse # &quot;gnirts&quot; string_name = string_name.upcase # &quot;GNIRTS&quot; string_name = string_name.swapcase # &quot;gnirts&quot; string_name = string_name.swapcase # &quot;GNIRTS&quot; string_name = string_name.downcase # &quot;gnirts&quot; string_name = string_name.capitalize # &quot;Gnirts&quot; # replace string in string, string_name.gsub!(/old/, new) string_name = string_name.gsub!(/G/, &quot;xxx&quot;) # &quot;xxxnirts&quot; # Split strings into an array string_name = string_name.split(&quot;i&quot;) # [&quot;xxxn&quot;, &quot;rts&quot;] string_name = &quot;string&quot; string_name = string_name.split(&quot;&quot;) # [&quot;s&quot;, &quot;t&quot;, &quot;r&quot;, &quot;i&quot;, &quot;n&quot;, &quot;g&quot;] # check if a string exists within a string nameExist = &quot;full name&quot; nameExist.include?(&quot;name&quot;) # returns true # search and count the total number of declared alphabets that exist in the string nameExist.count(&quot;l&quot;) # returns 2 nameExist.count(&quot;ln&quot;) # (l + l + n) therefore returns 3 # search and count the total number of the opposite of the declared alphabets that exist in the string nameExist.count(&quot;^l&quot;) # returns everything except &quot;l&quot;, therefore returns 7 # check if a string that starts with the declared string exists nameExist.start_with?(&quot;ful&quot;) # returns true nameExist.start_with?(&quot;nam&quot;) # returns false # find the index of a searched string, returns the index of the first searched letter nameExist.index(&quot;ll&quot;) # returns 2 # remove empty spaces from string removeStr = &quot; string &quot; removeStr.lstrip # &quot;string &quot; removeStr.rstrip # &quot; string&quot; removeStr.strip # &quot;string&quot; # format string moveString = &quot;string&quot; moveString.rjust(10, &quot;.&quot;) # &quot;....string&quot; moveString.ljust(10, &quot;.&quot;) # &quot;string....&quot; moveString.center(10, &quot;.&quot;) # &quot;..string..&quot; # Slice end of string newStr = &quot;string&quot; newStr.chop # &quot;strin&quot; # state the last letters to remove from string newStr.chomp(&quot;ng&quot;) # &quot;stri&quot; # remove all listed letters from string removeStr = &quot;sstring&quot; removeStr.delete(&quot;si&quot;) # &quot;trng&quot; # SYMBOLS: strings that are immutable, must use letters or underscores (_) # used mainly for memory conservation or speed string comparison # use a symbol if need a string to be immutable and not need to access string methods # commonly used in hashed for keys variable_name = :symbolStringWithoutQuotes puts variable_name # symbolStringWithoutQuotes  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-5","content":"// character: 16 bits, 2 bytes, only 1 letter or symbol, must use single quotes '' char charName1 = 'a'; char charName2 = '\\u0061'; // unicode character for the letter a // modify character cases Character.toUpperCase(charName1); // 'A' Character.toLowerCase(charName1); // 'a' // convert Char Array to a string char[] chars = {'H', 'e', 'l', 'l', 'o'}; String s = new String(chars); // &quot;Hello&quot; // convert string to char array char[] chars2 = s.toCharArray(); for (char c : chars2) { // for each loop System.out.print(c); // &quot;Hello&quot; } // convert primitive values to string int intValue = 42; String fromInt = Integer.toString(intValue); // &quot;42&quot; boolean boolValue = true; String fromBool = Boolean.toString(boolValue); // &quot;true&quot; // strings: must use double quotes &quot;&quot; String stringName = new String(&quot;Hello&quot;); // method 1 String stringName1 = &quot;string&quot;; // method 2 String stringName2 = &quot;multi-line &quot; + &quot;string&quot;; // get character of string with index char indexChar = stringName1.charAt(0); // 's' // modify string cases String stringName3 = stringName1.toUpperCase(); // &quot;STRING&quot; String stringName4 = stringName3.toLowerCase(); // &quot;string&quot; // get length of string stringName4.length(); // 6 // get index of substring int index = stringName4.indexOf(&quot;ng&quot;); // 4 // get substring with index String sub1 = stringName4.substring(4); // &quot;ng&quot; String sub2 = stringName4.substring(4, 6); // &quot;ng&quot; from starting index to but exclude last index // trim whitespaces from beginning and ending of string String trimStr = &quot; test &quot;; String newStr = trimStr.trim(); // &quot;test&quot; // toString method: convert primitive numeric values to string double doubleValue = .5d; String stringName5 = Double.toString(doubleValue); // &quot;0.5&quot; // comparing strings String str1 = &quot;Hello&quot;; // object 1 String str2 = &quot;Hello&quot;; // str2 points to str1, thus is still object 1 str1 == str2; // true String part1 = &quot;Hello &quot;; String part2 = &quot;World&quot;; String str3 = part1 + part2; // object 1 String str4 = &quot;Hello World&quot;; // object 2 str3 == str4; // false // need to use .equals() str3.equals(str4); // true  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-9","content":"Strings (immutable) each operation that appears to be modifying a string is actually creating a new stringmodifying a string repeatedly can cause a significant performance penaltywhen to use string when number of changes that your app will make to a string is small string builder might offer negligible or no performance improvement when performing a fixed number of concatenation operations is required compiler might combine the concatenation operations into a single operation when performing extensive search operations while building a string is required string builder lacks search methods (IndexOf, StartsWith)thus will need to convert string builder to a string for these operationsthis can negate the performance benefit from using string builder // character: 16 bits char charName1 = 'a'; // type Char char charName2 = '\\u0061'; // unicode character for the letter a System.Char charName3 = 'a'; // strings string stringName = &quot;string&quot;; // type String System.String stringName2 = &quot;string&quot;; // multiline strings // method 1 string multilineString1 = &quot;multi-line\\n&quot; + &quot;string&quot;; // method 2 string multilineString2 = @&quot;multi-line string&quot;; // method 3 string multilineString3 = System.String.Join( System.Environment.NewLine, &quot;multi-line&quot;, &quot;string&quot; ); // raw strings (ignore escape characters string rawString = @&quot;\\n raw string&quot;; // &quot;\\n raw string&quot; // check if string is empty String.IsNullOrEmpty(stringName); // False String.IsNullOrEmpty(&quot;&quot;); // True // check for white space or empty String.IsNullOrWhiteSpace(stringName); // False String.IsNullOrWhiteSpace(&quot; &quot;); // True String.IsNullOrWhiteSpace(&quot;&quot;); // True String.IsNullOrWhiteSpace(&quot; test &quot;); // False // get length of a string stringName.Length; // 6 // get index of the 1st character or word in a string stringName.IndexOf(&quot;s&quot;); // 0 stringName.IndexOf(&quot;unknown&quot;); // -1 // convert string to uppercase stringName.ToUpper(); // &quot;STRING&quot; // convert string to lowercase stringName.ToLower(); // &quot;string&quot; // split string to an array of characters stringName.ToCharArray(); // ['s', 't', 'r', 'i', 'n', 'g'] // split string into an array of strings (must have separator) stringName.Split('r'); // [&quot;st&quot;, &quot;ing&quot;] // get substring from a string (if length is not declared, the entire string from startIndex onwards will be returned) int startIndex = 0; int length = 2; stringName.Substring(startIndex, length); // &quot;str&quot; // replace string with another string, stringName.Replace(old, new); stringName.Replace(&quot;test&quot;, &quot;newTest&quot;); // &quot; newTest &quot; // comparing strings string s1 = &quot;test&quot;; string s2 = &quot;test&quot;; string s3 = &quot;test1&quot;.Substring(0, 4); object s4 = s3; Console.WriteLine(&quot;{0} {1} {2}&quot;, object.ReferenceEquals(s1, s2), s1 == s2, s1.Equals(s2)); // True True True Console.WriteLine(&quot;{0} {1} {2}&quot;, object.ReferenceEquals(s1, s3), s1 == s3, s1.Equals(s3)); // False True True Console.WriteLine(&quot;{0} {1} {2}&quot;, object.ReferenceEquals(s1, s4), s1 == s4, s1.Equals(s4)); // False False True // check if a string starts with a character or words string sampleString = &quot;some random words&quot;; sampleString.StartsWith(&quot;some&quot;); // True // check if a string ends with a character or words sampleString.EndsWith(&quot;words&quot;); // True // remove white spaces from both left and right string stringName3 = &quot; test &quot;; stringName3.Trim(); // &quot;test&quot; // remove white spaces from left stringName3.TrimStart(); // &quot;test &quot; // remove white spaces from right stringName3.TrimEnd(); // &quot; test&quot; // string slicing from start index // count is the number of characters to delete from the start index int startIndex = 3; int count = 3; stringName.Remove(startIndex, count); // &quot;str&quot; stringName.Remove(startIndex); // &quot;str&quot; stringName.Remove(startIndex, 2); // &quot;strg&quot;  String builder (muttable) maintains a buffer to accommodate expansions to the stringnew data is appended to the buffer if room is available otherwise, a larger buffer is allocateddata from the original buffer is copied to the new bufferthen the new data is appended to the new buffer when to use string builder when expecting an unknown number of changes to a string at design time (when using a loop to concatenate a random number of strings that contain user input)when expecting to make a significant number of changes to a string // Declaration // method 1 System.Text.StringBuilder builder = new System.Text.StringBuilder(); // '' // method 2 using System.Text; // import the prefix var builder2 = new StringBuilder(); // '' // method 3 var builder3 = new StringBuilder(&quot;starting string&quot;); // &quot;starting string&quot; // check if string builder is empty // method 1 if (builder == 0) System.Console.WriteLine(&quot;true&quot;); // &quot;true&quot; // method 2 if (System.String.IsNullOrEmpty(builder.ToString())) System.Console.WriteLine(&quot;true&quot;); // &quot;true&quot; // append an array of similar characters builder.Append('-', 3); // &quot;---&quot; // append a new line in string builder.AppendLine(); // new line is counted as 1 character // append a string builder.Append(&quot;Header&quot;); /* &quot;--- Header&quot; */ // replace a character with a new character or a string with new string builder.Replace('-', '+'); builder.Replace(&quot;er&quot;, &quot;ing&quot;); /* &quot;+++ Heading&quot; */ // remove characters from startIndex for totalCharacters int startIndex = 0; int totalCharacters = 3; builder.Remove(startIndex, totalCharacters); /* &quot; Heading&quot; */ // insert an array of similar characters at index builder.Insert(startIndex, new string('+', 4)); /* &quot;++++ Heading&quot; */ // get character of string builder at index builder[0]; // '+'  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-10","content":"// character: only have 1 character, must use single quotes '' char charName; charName = 'a'; char charName = 'a'; char charName ('a'); char charName {'a'}; // strings // C-style strings: an ARRAY of characters, must use double quotes &quot;&quot; // THIS IS NOT A TRUE STRING, IT IS AN ARRAY OF CHARACTERS!!!!!!! char * stringName = &quot;string&quot;; const char * stringName = &quot;string&quot;; // const is normally used char stringName[] = &quot;string&quot;; // creates array of 7 chars, last char is null &quot;\\0&quot; char stringName[7] = &quot;string&quot;; // need give 7 slots for chars and null char char stringName[7] = {'s', 't', 'r', 'i', 'n', 'g', 0}; // no 0 = error char stringName[7] = {'s', 't', 'r', 'i', 'n', 'g', '\\0'}; // no '\\0' = error //C++ strings: must add at the top &quot;#include＜string＞&quot;, must use double quotes &quot;&quot; #include＜string＞ std::string stringName; stringName = &quot;string&quot;; // back slash not required, but can use if want to std::string stringName = &quot;multi-line&quot; &quot;string&quot;; std::string stringName (&quot;string&quot;);  back to top "},{"title":"Boolean​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#boolean","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-4","content":"boolean_name = True boolean_name = False not True # False not False # True  "},{"title":"javascript ES5​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es5-3","content":"var boolean_name; boolean_name = true; var boolean_name = false; !true // false !false // true  truthy: &quot;xxx&quot;, 1, -1, 2.5, truefalsey: false, 0, &quot;&quot;, null, undefined, NaN "},{"title":"javascript ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6-2","content":"let boolean_name; boolean_name = true; let boolean_name = false; const boolean_name = true;  "},{"title":"typescript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#typescript-4","content":"let isDone: boolean = false;  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-6","content":"boolean_name = true boolean_name = false  truthy: true, 0, 1, -1, &quot;&quot;, falsey: false, nilCheck if method exist obj.respond_to?(:method) example 1 [1, 2, 3].respond_to?(:push) # true example 2 123.respond_to?(:next) # true example 3: false because array can't be turned into a symbol [1, 2, 3].respond_to?(:to_sym) # false "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-6","content":"boolean booleanName1 = true; boolean booleanName2 = false; boolean booleanName3 = !booleanName2; // true String sBoolean = &quot;true&quot;; boolean booleanName4 = Boolean.parseBoolean(sBoolean); // true  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-11","content":"type Boolean bool booleanName = true; // displayed as True when printed bool booleanName = false; // displayed as False when printed System.Boolean booleanName = false;  "},{"title":"c++: 8 bits​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-8-bits","content":"bool boolean_name; boolean_name = true; // produces a 1 output bool boolean_name = false; // produces a 0 output bool boolean_name (true); bool boolean_name {false};  back to top "},{"title":"Arithmetic Operators​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#arithmetic-operators","content":""},{"title":"python 2​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2-2","content":"addition: +subtraction: -multiplication: *division: 3.0/2 # output 1.5, 3/2 output 1modulus: %exponent: **floor division: 3//2 # output 1 "},{"title":"python 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-3-2","content":"division: 3/2 # output 1.5floor division: 3//2 # output 1 "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-4","content":"addition: +subtraction: -multiplication: *division: 3/2 // output 1.5modulus: %exponent: **floor division: Math.floor(3/2) // output 1 "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-7","content":"addition: +subtraction: -multiplication: *division: 3.0/2 # output 1.5, 3/2 output 1modulus: %exponent: **floor division: 3/2.floor "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-7","content":"addition: +subtraction: -multiplication: *division: double double_name = 3.0/2; // output 1.5, 3/2 output 1modulus: %exponent: Math.pow(3, 2); // output 9floor division: int integer_name = 3/2; // output 1 "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-12","content":"addition: +subtraction: -multiplication: *division: 3.0/2; // output 1.5, 3/2 output 1modulus: %exponent: Math.Pow(3, 2); // output 9floor division: 3/2; // output 1 "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-13","content":"addition: +subtraction: -multiplication: *division: double double_name = 3.0/2 // output 1.5, 3/2 output 1modulus: %exponent: must add this to the top #include＜cmath＞int integer_name = pow(3, 2); // output 9 floor division: 3/2 // output 1 back to top "},{"title":"Comparison Operators​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#comparison-operators","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-5","content":"== condition is True if both operand have equal contents list1 = [] list2 = [] list1 == list2 # True  is condition is True if both operand points to the same identical object list1 = [] list2 = [] list1 is list2 # False list1 = None list2 = None list1 is list2 # True  != condition is True if both operand do not have equal contentsis not condition is True if both operand do not points to the same identical object&lt;&gt; py2 only, condition is True if both operands do not equal contents&gt; condition is True if right operand is less than left operand&lt; condition is True if left operand is less than right operand&gt;= condition is True if right operand is less than or equal to left operand&lt;= condition is True is left operand is less than or equal to right operand "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-5","content":"== not type-safe, e.g.: string or int will be automatically converted before comparison, only checks the value var x = 5; x == 5; // is true x == &quot;5&quot; // is also true  === string or int will NOT be converted before comparison, checks both the value and type NaN and NaN comparison are not equal+0 and -0 are equal var x = 5; x === 5; // is true x === &quot;5&quot; // is false  Object.is(var1, var2); similar to === NaN and NaN comparison are equal+0 and -0 are not equal !=!==&gt;&lt;&gt;=&lt;=?? Nullish coalescing operator: returns right-hand side operand when left-hand side operand is null or undefined, and otherwise returns its left-hand side operand const foo = null ?? 'default string'; console.log(foo); // expected output: &quot;default string&quot; const baz = 0 ?? 42; console.log(baz); // expected output: 0  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-8","content":"==!=&gt;&lt;&gt;=&lt;=&lt;=&gt; Combined Comparison Operatorobject1.equal?object2 string1 = &quot;string&quot; string2 = &quot;string&quot; string1 == string2 # returns true string1.equal?string2 # returns false string1.equal?string1 # returns true num1 = 2 num2 = 5 puts num1 &lt;=&gt; num2 # -1 puts num2 &lt;=&gt; num1 # 1 num1 = 3 num2 = 3 puts num1 &lt;=&gt; num2 # 0 string1 = &quot;b&quot; # looks at only the 1st letter, &quot;bz&quot; will not change the outcome, unless both strings start with the same 1st letter string2 = &quot;e&quot; puts string1 &lt;=&gt; string2 # -1 puts string2 &lt;=&gt; string1 # 1 string1 = &quot;c&quot; string2 = &quot;c&quot; puts string1 &lt;=&gt; string2 # 0  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-9","content":"== reference comparison String s1 = new String(&quot;string value&quot;); String s2 = new String(&quot;string value&quot;); System.out.println(s1 == s2); // false use equals method to compare string values String s1 = new String(&quot;string value&quot;); String s2 = new String(&quot;string value&quot;); System.out.println(s1.equals(s2)); // true !=&gt;&lt;&gt;=&lt;=instanceof class membership String s = &quot;Hello&quot;; if (s instanceof java.lang.String) { System.out.println(true); }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-14","content":"==!=&gt;&lt;&gt;=&lt;= "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-15","content":"==!=&gt;&lt;&gt;=&lt;= back to top "},{"title":"Logical Operators​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#logical-operators","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-6","content":"andornot "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-6","content":"&amp;&amp; and|| or! nottruthy and falsey examples truthy1 &amp;&amp; truthy2 truthy2falsey &amp;&amp; truthy falseytruthy &amp;&amp; falsey falseyfalsey1 &amp;&amp; falsey2 falsey1truthy1 || truthy2 truthy1truthy || falsey truthyfalsey1 || falsey2 falsey2 "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-9","content":"&amp;&amp; and|| or! not "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-10","content":"&amp;&amp; and|| or^ exclusive or! not "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-16","content":"&amp;&amp; and|| or^ exclusive or! not "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-17","content":"back to top "},{"title":"Getting Input​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#getting-input","content":""},{"title":"python 2​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2-3","content":"raw_input(&quot;What's your name?&quot;) # input must be the same data type as xxx else return an error input(xxx)  "},{"title":"python 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-3-3","content":"input(&quot;What's your name?&quot;)  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-7","content":"// install readline-sync package locally via npm i readline-sync var readlineSync = require('readline-sync'); // import package var getInput = readlineSync.question(&quot;What's your name?&quot;);  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-10","content":"# print question print &quot;What's your name?&quot; # get input name = gets.chomp  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-11","content":"must import scanner library  import java.util.Scanner;  // print question System.out.println(&quot;What's your name?&quot;); // get raw input Scanner scanner = new Scanner(System.in); // convert raw value to string type // can read the input only till the space // It can't read two words separated by a space // places the cursor in the same line after reading the input String input = scanner.next(); // reads input including space between the words till the end of line \\n // Once the input is read, positions the cursor in the next line String input1 = scanner.nextLine(); // convert raw value to int type Int input2 = scanner.nextInt();  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-18","content":"// print question System.Console.WriteLine(&quot;What's your name?&quot;); // get input string name = System.Console.ReadLine();  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-19","content":"back to top "},{"title":"Bitwise Operators​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#bitwise-operators","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-7","content":"# Each digit is 1 bit, all bitwise operators converts to signed 32-bit integers, except for zero-fill right shift which results to unsigned 32 bit integer a = 60 # 60 = ...0011 1100 b = 13 # 13 = ...0000 1101 c = 9 # 9 = ...0000 1001 # &amp; is binary AND, return 1 if both a and b are 1 a &amp; b # 12 = ...0000 1100 # | is binary OR, return 1 if either a and or b HAVE a 1 a | b # 61 = ...0011 1101 # ^ is binary XOR, return 1 if both a and b are not 1 or 0 a ^ b # 49 = ...0011 0001 # ~ is binary ones complement, invert everything, 1 change to 0 and vice versa ~a # -61 = ...1100 0011 # &lt;&lt; is binary left shift, shift everything to the left by n digit(s) a &lt;&lt; 2 # 240 = ...1111 0000 # &gt;&gt; is binary right shift, shift everything to the right by n digit(s) a &gt;&gt; 2 # 15 = ...0000 1111 c &gt;&gt; 2 # 3 = ...0000 0010, count the 1s c = -9 # -9 = ...1111 0111 c &gt;&gt; 2 # -3 = ...1111 1101, count the 0s # Zero fill right shift, shift everything to the right by n digits(s), leftmost will add n 0s def zero_fill_right_shift(val, n): return (val &gt;&gt; n) if val &gt;= 0 else ((val + 0x100000000) &gt;&gt; n) zero_fill_right_shift(9, 2) # 2 = ...0000 0010, count the 1s c = -9 # -9 = ...1111 0111 zero_fill_right_shift(-9, 2) # 1073741821 = 0011...1111 1101, count the 0s  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-8","content":"// Each digit is 1 bit, all bitwise operators converts to signed 32-bit integers, except for zero-fill right shift which results to unsigned 32 bit integer let a = 60 // 60 = ...0011 1100 let b = 13 // 13 = ...0000 1101 let c = 9 // 9 = ...0000 1001 // &amp; is binary AND, return 1 if both a and b are 1, count the 1s a &amp; b // 12 = ...0000 1100 // | is binary OR, return 1 if either a and or b HAVE a 1 a | b // 61 = ...0011 1101 // ^ is binary XOR, return 1 if both a and b are not 1 or 0 a ^ b // 49 = ...0011 0001 // ~ is binary ones complement, invert everything, 1 change to 0 and vice versa, count the 0s ~a // -61 = ...1100 0011 // &lt;&lt; is binary left shift, shift everything to the left by n digit(s) a &lt;&lt; 2 // 240 = ...1111 0000 // &gt;&gt; is Sign-propagating right shift, a binary right shift, shift everything to the right by n digit(s) a &gt;&gt; 2 // 15 = ...0000 1111 c &gt;&gt; 2 // 3 = ...0000 0010, count the 1s c = -9 // -9 = ...1111 0111 c &gt;&gt; 2 // -3 = ...1111 1101, count the 0s // &gt;&gt;&gt; is Zero fill right shift, shift everything to the right by n digits(s), leftmost will add n 0s c &gt;&gt;&gt; 2 // 2 = ...0000 0010, count the 1s c = -9 // -9 = ...1111 0111 c &gt;&gt;&gt; 2 // 1073741821 = 0011...1111 1101, count the 0s  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-11","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-12","content":"// &amp; is binary AND, return 1 if both a and b are 1, count the 1s a &amp; b // 12 = ...0000 1100 // | is binary OR, return 1 if either a and or b HAVE a 1 a | b // 61 = ...0011 1101 // ^ is binary XOR, return 1 if both a and b are not 1 or 0 a ^ b // 49 = ...0011 0001 // ~ is binary ones complement, invert everything, 1 change to 0 and vice versa, count the 0s ~a // -61 = ...1100 0011 // &lt;&lt; is binary left shift, shift everything to the left by n digit(s) a &lt;&lt; 2 // 240 = ...1111 0000 // &gt;&gt; is Sign-propagating right shift, a binary right shift, shift everything to the right by n digit(s) a &gt;&gt; 2 // 15 = ...0000 1111 c &gt;&gt; 2 // 3 = ...0000 0010, count the 1s c = -9 // -9 = ...1111 0111 c &gt;&gt; 2 // -3 = ...1111 1101, count the 0s // &gt;&gt;&gt; is Zero fill right shift, shift everything to the right by n digits(s), leftmost will add n 0s c &gt;&gt;&gt; 2 // 2 = ...0000 0010, count the 1s c = -9 // -9 = ...1111 0111 c &gt;&gt;&gt; 2 // 1073741821 = 0011...1111 1101, count the 0s  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-20","content":"// &amp; is binary AND, return 1 if both a and b are 1, count the 1s a &amp; b // 12 = ...0000 1100 // | is binary OR, return 1 if either a and or b HAVE a 1 a | b // 61 = ...0011 1101  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-21","content":"back to top "},{"title":"Increment​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#increment","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-8","content":"x = x + 1 incrementx += 1 "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-9","content":"x = x + 1; add 1 nowx += 1; add 1 now++x; preincrement, add 1 nowx++; postincrement, display without addition now then add 1 later when called again "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-12","content":"x = x + 1 incrementx += 1 "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-13","content":"x = x + 1;x += 1;++x; preincrement, add 1 nowx++; postincrement, display without addition now then add 1 later when called again "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-22","content":"x = x + 1;x += 1;++x; preincrement, add 1 nowx++; postincrement, display without addition now then add 1 later when called again "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-23","content":"x = x + 1;x += 1;++x; preincrement, add 1 nowx++; postincrement, display without addition now then add 1 later when called again back to top "},{"title":"Arrays and Lists​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#arrays-and-lists","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-9","content":"# Empty list list_name = [] # List with elements list_name = [1, &quot;one&quot;, True] # Nested lists list_name = [1, [&quot;two&quot;, 3]] # Find list size len(list_name) # Get index of element, return ValueError if element does not exist list_name.index(element) # Add element to list (left to right) list_name.append(element) # Add element to list at index list_name.insert(index, element) # Extends list by appending elements from the iterable list_name = [1, 2] list_name.extend([3, 4]) # [1, 2, 3, 4] # Access an element list_name[index] # Modify an element list_name[index] = element # Remove element from list (right to left) list_name.pop() # Remove element from list at index list_name.pop(index) # Remove any element from list at element list_name.remove(element) # Method 1: remove all elements del list_name[:] # Method 2: remove all elements list_name = [] # Method 3: remove all elements, only in python 3 list_name.clear() Slice notation # items start through stop-1 list_name[start:stop] # items start through the rest of the array list_name[start:] # items from the beginning through stop-1 list_name[:stop] # a copy of the whole array list_name[:] # start through not past stop, by step list_name[start:stop:step] list_name = [1, 2, 3, 4, 5] list_name[::2] # [1, 3, 5] # last item in the array list_name[-1] # last two items in the array list_name[-2:] # everything except the last two items list_name[:-2] # all items in the array, reversed list_name[::-1] # the first two items, reversed list_name[1::-1] # the last two items, reversed list_name[:-3:-1] # everything except the last two items, reversed list_name[-3::-1] # Reverse an array list_name.reverse() # Merge 2 or more arrays together new_list = list_name + list_name2 # Sort an array in ascending order list_name = [2, 3, 1, 4] # method 1 list_name2 = sorted(list_name) # [1, 2, 3, 4] # method 2 list_name.sort() # [1, 2, 3, 4] # sort an array of dictionaries in ascending order dict_name = [{&quot;key_name&quot;: value1}, {&quot;key_name&quot;: value2}] # sort by value dict_name2 = sorted(dict_name, key=lambda k: k[&quot;key_name&quot;]) # Sort an array in descending order # method 1 list_name2 = sorted(list_name2, reverse=True) # [4, 3, 2, 1] # method 2 list_name.sort(reverse=True) # [4, 3, 2, 1] # sort an array of dictionaries in descending order # sort by value dict_name2 = sorted(dict_name, key=lambda k: k[&quot;key_name&quot;], reverse=True) # Join array into a string list_name = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] x = &quot;, &quot;.join(list_name) print(x) # &quot;a, b, c&quot; # Split string into an array y = x.split(&quot;, &quot;) print(y) # ['a', 'b', 'c']  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-10","content":"// Method 1: empty list var list_name = []; // Method 2: empty list var list_name = new Array(); // create list of empty elements var list_name = new Array(3); // [undefined, undefined, undefined] var list_name = Array.from({ length: 3}); // [undefined, undefined, undefined] // List with elements var list_name = [1, &quot;one&quot;, true]; var list_name = new Array(3).fill(&quot;-&quot;) // [&quot;-&quot;, &quot;-&quot;, &quot;-&quot;] // Nested lists var list_name = [1, [&quot;two&quot;, 3]]; var list_name = new Array(3).fill(new Array(2).fill(&quot;-&quot;)) // [[&quot;-&quot;, &quot;-&quot;], [&quot;-&quot;, &quot;-&quot;], [&quot;-&quot;, &quot;-&quot;]] // Modify an element list_name[index] = element; // Access an element list_name[index]; // Remove element from list (right to left) list_name.pop(); // Remove element from list (left to right) list_name.shift(); // Remove number of elements (left to right) from index and insert new elements (left to right) list_name.splice(index, number_of_element); // Add element to list (left to right) list_name.push(element); // Add element to list (right to left) list_name.unshift(element); // Add element to list at index (left to right) list_name.splice(index, 0, new_element1, new_element2...); // Add &amp; Remove elements to &amp; from list at index (left to right) list_name.splice(index, number_of_element, new_element1, new_element2...); // Return the selected elements in an array, as a new array object list_name.slice(); // Return the elements starting at the given 1st argument, // and ends at, but does not include, the given 2nd argument list_name.slice(1, 3); list_name.slice(1); // if 1 argument is given, return all elements from array from the 1st argument index // Find list size list_name.length; // Remove all elements list_name = []; // Merge 2 or more arrays together list_name1 = [1, 2, 3]; list_name2 = [4, 5, 6]; new_list = list_name1.concat(list_name2); // Get index of element, return -1 if not present list_name = [&quot;element1&quot;, &quot;element2&quot;, &quot;element1&quot;] list_name.indexOf(&quot;element1&quot;) // returns index of 0 list_name.indexOf(&quot;element1&quot;, 1); // returns index of 2 list_name.indexOf(&quot;element1&quot;, 2); // also returns index of 2 list_name.indexOf(&quot;element1&quot;, 0); // returns index of 0 // Sort array in ascending order list_name = [2, 3, 1, 4]; list_name.sort(); // [1, 2, 3, 4] work only only positive integers and strings list_name = [2, -1, 4, 3]; list_name.sort((a, b) =&gt; a - b); // [ -1, 2, 3, 4 ] work for negative and positive integers // Sort array in descending order list_name.sort((a, b) =&gt; (b - a)); // [4, 3, 2, 1] work for negative and positive integers list_nameStr = [&quot;b&quot;, &quot;a&quot;, &quot;c&quot;]; // method 1: most optimal list_nameStr.sort().reverse(); // [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;] // method 2 list_nameStr.sort((a, b) =&gt; (a &gt; b ? -1 : 1)); // method 3 list_nameStr.sort((a, b) =&gt; b.localeCompare(a)); // Determine whether an array contains a specified element list_name = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;] console.log(list_name.includes(&quot;b&quot;)) // true // Determine whether an array contains a specified element from starting index console.log(list_name.includes(&quot;b&quot;, 2) // false console.log(list_name.includes(&quot;a&quot;, 2) // true // Flatten nested arrays list_name = [1, 2, [3, 4]]; list_name.flat() // [1, 2, 3, 4] // Check if all elements in array pass the conditional check function helper(currentValue) { return currentValue &lt; 3; } list_name = [1, 2, 3, 4]; list_name.every(helper); // false list_name = [1, 2]; list_name.every(helper); // true  "},{"title":"typescript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#typescript-5","content":"// method 1 let numArr: number[] = [1, 2, 3]; let strArr: string[] = [&quot;a&quot;, &quot;bc&quot;, &quot;def&quot;]; // method 2 let numArr2: Array&lt;number&gt; = [1, 2, 3]; let strArr2: Array&lt;string&gt; = [&quot;a&quot;, &quot;bc&quot;, &quot;def&quot;]; // declare more than 1 type // with tuples let strOrNumArr1: [string, number] = [&quot;a&quot;, 1]; // must follow and limited to declared format // with union let strOrNumArr2: (string | number)[]; // allows unlimited mixture of number and/or string values in 1 array  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-13","content":"# Empty list list_name = [] # method 1 list_name = Array.new # method 2 # List with elements list_name = [1, &quot;one&quot;, True] list_name = Array.new(3) # creates 3 slots of nil in array [nil, nil, nil] list_name = Array.new(3, &quot;new&quot;) # creates 3 slots of object in array [&quot;new&quot;, &quot;new&quot;, &quot;new&quot;] # Nested lists list_name = [1, [&quot;two&quot;, 3]] # join elements in array at index into a string (to join all elements, all indexes must be listed) list_name.values_at(0, 1).join(&quot;, &quot;) # &quot;1, two, 3&quot; # join all elements in array into a string list_name.join(&quot;, &quot;) # &quot;1, two, 3&quot; # Add element to list (left to right) # method 1 list_name.push(element); # method 2 list_name &lt;&lt; element; # Add element to list (right to left) list_name.unshift(&quot;new&quot;) # [&quot;new&quot;, 1, [&quot;two&quot;, 3]] # delete element from list (right to left) list_name.pop() # [&quot;new&quot;, 1] # delete element from list (left to right) list_name.shift() # [1] # concat 2 arrays # method 1 [1] + [2] # [1, 2] # method 2 [1].concat([2]) # [1, 2] # find length of array [1, 2].size # 2 # check if element exist in array [1, 2].include?(1) # true # count how many similar elements are in the array [1, 2, 1].count(1) # 2 # check if array is empty [1, 2].empty? # false # Add 0 to 10 to an array (0..10).to_a # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # Add 0 to 10 excluding 10 to an array (0...10).to_a # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # Access an elment list_name[index] # Sort an array in ascending list_name = [3, 4, 1, 2] # method 1 list_name1 = list_name.sort # [1, 2, 3, 4] # method 2 list_name.sort! # [1, 2, 3, 4] # Reverse sort an array, only works on already sorted array # arrays that are not sorted will be reversed without sorting # method 1 (modify list_name temporarily) list_name1 = list_name.reverse # [4, 3, 2, 1] # method 2 (directly modify list_name) list_name.reverse! # Modifies every value in an array # (modify list_name temporarily) # method 1 list_name2 = list_name.collect {|num| num * 2} # [8, 6, 4, 2] # method 2 list_name2 = list_name.map {|num| num * 2} # [8, 6, 4, 2] # (directly modify list_name) # method 1 list_name.collect! {|num| num * 2} # [8, 6, 4, 2] # method 2 list_name.map! {|num| num / 2} # [4, 3, 2, 1]  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-14","content":"// Arrays: can only have 1 data type: string, int, etc. // printing this only shows the memory // Empty string array of desired array size String[] string_array = new String[length_of_desired_array]; // New string array with elements inside String [] string_array = new String [] {string1, string2,...}; // Method 1 String[] string_array = {string1, string2,...}; // Method 2 // Add string array element, limited to array size // Modify string array element value string_array[index] = element; // Access an element string_array[index]; // Find array size string_array.length; // Sort array, can sort numbers, strings, etc. // must import // import java.util.Arrays; String[] sourceArr = {&quot;orange&quot;, &quot;apple&quot;, &quot;pear&quot;}; Arrays.sort(sourceArr); // {&quot;apple&quot;, &quot;orange&quot;, &quot;pear&quot;} // Copy array int sourceArrStartingIndex = 1; int destinationArrStartingIndex = 0; int copiedArrLen = 2; String[] copiedArr = new String[copiedArrLen]; System.arraycopy(sourceArr, sourceArrStartingIndex, copiedArr, destinationArrStartingIndex, copiedArrLen); // {&quot;apple&quot;, &quot;pear&quot;} // multidimensional array String[][] states = new String[3][2]; states[0][0] = &quot;Japan&quot;; states[0][1] = &quot;Tokyo&quot;; // Arraylists: it is a class, extends the AbstractList class and implements List interface // can be instantiated // used to create a dynamic array that contains objects // creates an array of objects where the array can grow dynamically // can only have 1 data type: string, int, etc. // import java.util.ArrayList; // Must import to use // Empty string arrayList ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;(); // Add element to string arrayList (left to right) arrayList.add(element); // Modify an element at index arrayList.set(index, element); // Access an element arrayList.get(index); // Remove element from arrayList at index arrayList.remove(index); // Find arrayList size arrayList.size(); // Remove all elements arrayList.clear(); // List: it is an interface, extends the Collection framework // cannot be instantiated // used to create a list of elements(objects) which are associated with their index numbers // creates a collection of elements that are stored in a sequence and they are identified and accessed using the index // print this shows the actual array // import java.util.List; // must import to use // import java.util.ArrayList; // Must import to use List&lt;String&gt; list = new ArrayList&lt;&gt;(); // from java 7 onwards redundent &lt;String&gt; is not required, can just use &lt;&gt; // Add element to string List (left to right) list.add(element); // Remove element from list at index list.remove(index); // Access an element list.get(index); // Find index of an element list.indexOf(element);  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-24","content":"Arrays: can only have 1 data type: string, int, etc. (size cannot be modified after declaration) // Empty string array of desired array size string[] stringArray = new string[lengthOfDesiredArray]; // New string array with elements inside string [] stringArray2 = new string [] {string1, string2, ...}; // Method 1, size is determined by number of elements declared string [] stringArray2 = new string [2] {string1, string2}; // Method 2, size is determined by the array size declared string[] stringArray3 = {string1, string2, ...}; // Method 3, size is determined by number of elements declared string[] stringArray5 = new[] {string1, string2, ...}; // Method 4 var stringArray6 = new[] {string1, string2, ...}; // Method 5, use var to auto determine data type // Multi-dimensional Rectangular Arrays int[] rectArray = new int[3, 5]; int[] rectArray2 = new int[3, 5] { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15} }; // Multi-dimensional Jagged Arrays int[] jaggedArray = new int[3][]; // create an array of 3 empty arrays jaggedArray[0] = new int[4]; // create an array of size 4 jaggedArray[1] = new int[5]; // create an array of size 5 jaggedArray[2] = new int[3]; // create an array of size 3 // Add string array element, limited to array size // Modify string array element value stringArray[index] = element; // Access an element stringArray[index]; rectArray2[index1, index2]; jaggedArray[0][0]; // Find array size string[] strArr = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}; strArr.Length; // 3 // Find index of an element in an array string element = &quot;a&quot;; int index = System.Array.IndexOf(strArr, element); // 0 // Clear the element in the array (0 for int, false for bool, null for other objects), exclude the endIndex value int startIndex = 0; int endIndex = 1; System.Array.Clear(strArr, startIndex, endIndex); // Copy the elements into a new array int firstFewElem = 3; string[] copiedStrArr = new string[3]; System.Array.Copy(strArr, copiedStrArr, firstFewElem); // Sort (ascending order) System.Array.Sort(strArr); // Reverse (only works on sorted arrays) System.Array.Reverse(strArr); // [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;] System.Array.Reverse(strArr); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] // Join elements of an array into a string System.String.Join(&quot;&quot;, strArr); // &quot;abc&quot; System.String.Join(&quot;,&quot;, strArr); // &quot;a,b,c&quot;  List (dynamic array) // Empty int array of desired array size System.Collections.Generic.List&lt;int&gt; intList = new System.Collections.Generic.List&lt;int&gt;(); // empty list System.Collections.Generic.List&lt;int&gt; intList2 = new System.Collections.Generic.List&lt;int&gt;() {1, 2, 3, 4}; // list with values // import to write less code when declaring using System.Collections.Generic; List&lt;int&gt; intList3 = new List&lt;int&gt;(); // empty list List&lt;int&gt; intList4 = new List&lt;int&gt;() {1, 2, 3, 4}; // list with values // Add 1 new element to the list (left to right) intList4.Add(5); // [1, 2, 3, 4, 5] // Add a range of elements to the list with an array intList4.AddRange(new int[3] {6, 7, 8}); // [1, 2, 3, 4, 5, 6, 7, 8] // Find index of an element in a list (return -1 if element is not found) intList4.IndexOf(2); // 1 // Find last index of elements with similar values in a list int[] intList5 = new List&lt;int&gt;() {1, 2, 1, 3}; intList5.LastIndexOf(1); // 2 // Get length of list intList4.Count; // 8 // Remove an element at element in list intList4.Remove(2); // [1, 3, 4, 5, 6, 7, 8] // Remove an element at index of list intList4.RemoveAt(0); // [3, 4, 5, 6, 7, 8] // Remove all elements from the list intList4.Clear(); // [];  ArrayList (dynamic list of multiple data types, does not offer the best performance) // Empty array list System.Collections.ArrayList list = new System.Collections.ArrayList(); // empty list // Add 1 new element to the list (left to right) list.Add(1); // [1] list.Add(&quot;abc&quot;) // [1, &quot;abc&quot;] // methods are similar to List  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-25","content":"// Arrays // Empty int array of desired array size int int_array[length_of_desired_array]; // New int array with elements inside int int_array [length_of_desired_array] {element1, element2,...}; // size declared int int_array[] = {element1, element2,...}; // size automatically calculated // Assign int element, limited to array size // Modify int element value int_array[index] = element; // Access an element int_array[index]; // Find array size: size of array (bytes) / size of an element of an array (bytes) sizeof(int_array) / sizeof(int_array[0]); // Vectors: a type of dynamic array #include &lt;vector&gt; // Must import to use // Empty int vector of desired vector size, each element of 0 value will automatically be included std::vector &lt;int&gt; int_vector (length_of_desired_array); // New int vector with elements inside std::vector &lt;int&gt; int_vector {element1, element2,...}; // New int vector with length of desired array and all value in parameter // Method 1 std::vector &lt;int&gt; int_vector (length_of_desired_array, constant_value_for_all_elements); // Method 2 std::vector &lt;int&gt; int_vector; int_vector.assign(length_of_desired_array, constant_value_for_all_elements); // Assign int element int_vector[index] = element; // Access an element int_vector[index]; int_vector.at(index); // Add element to vector (left to right), vector size will automatically increase int_vector.push_back(element); // Add element to vector at index std::vector&lt;int&gt;::iterator it; // Must create iterator for inserting or emplacing to work it = int_vector.begin() // Set it at index 0 // insert method: copies or moves the elements into the container by calling copy constructor or move constructor int_vector.insert(it + index, element); // Add element at index // emplace method: elements are constructed in place, no copy or move operations are performed (better performance) int_vector.emplace(it + index, element); // Add element at index // Remove element from vector at index std::vector&lt;int&gt;::iterator it; // Must create iterator for erase to work it = int_vector.begin() // Set it at index 0 int_vector.erase(it + index) // Remove element at index int_vector.erase(it + index, it + index) // Remove a range of elements in the vector // Remove element from vector (right to left) int_vector.pop_back(); // does not return value // Find vector size int_vector.size(); // Resize vector int_vector.resize(length_of_desired_array); // Remove all elements int_vector.clear();  back to top "},{"title":"Conditional Statement​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#conditional-statement","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-10","content":"# If else statement if condition_a: do_A elif condition_b: do_B else: do_something_else # Ternary operator do_A if condition_a else do_B # Switch Statement is not available in python, but can create similar function def switch(choice): case = { 1: do_A, 2: do_B, } case.get(choice, do_something_else) # comparing between 2 objects (array, dictionaries, etc.) is allowed x = [1, 2, 3] y = [1, 2, 3] x == y # returns True  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-11","content":"// If else statement if (condition_a) { do_A; } else if (condition_b) { do_B; } else { do_something_else; } // Ternary operator condition_a ? do_A : do_B; // Switch statement switch(choice) { case choice_A: do_A; break; case choice_B: do_B; break; default: do_something_else; } // comparing between 2 objects (array, object, etc.) is NOT allowed var x = [1, 2, 3] var y = [1, 2, 3] x === y ? true : false; // returns false // solution: use JSON.stringify() JSON.stringify(x) === JSON.stringify(y) ? true : false // return true  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-14","content":"# If else statement if condition_a do_A elsif condition_b do_B else do_something_else end # Unless statement condition_variable = boolValue do_A unless condition_variable # Unless else statement # Check if something is false unless condition_a do_A else do_something_else end # check if a string exist in a string if word.include? alphabet do_something end # check if value is nil, if not nil return false object.nil? # if object != nil returns false, else returns true # check if array, hash, set, string is empty, return true if empty else false object.empty? # if object == [] or {} or &quot;&quot; or Set.new, return true # Ternary operator condition_a ? (do_A) : (do_B); # example 1 puts true ? &quot;yes&quot; : &quot;no&quot; # example 2 true ? (puts &quot;yes&quot;) : (puts &quot;no&quot;) # Simpler if do_A if condition_a # One line Unless do_A unless condition_a # do_A if condition_a is false # Case expression (similar to switch statement) case choice when choice_A: do_A; when choice_B: do_B; else do_something_else end # Conditional Assignment: assign only if variable is nil favorite_book = nil favorite_book ||= &quot;book 1&quot; puts favorite_book # &quot;book 1&quot; favorite_book ||= &quot;book 2&quot; puts favorite_book # &quot;book 1&quot;  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-15","content":"// If else statement if (condition_a) { do_A; } else if (condition_b) { do_B; } else { do_something_else; } // {} not required if statement is a single line if (condition_a) do_A; // Single line statement else if (condition_b) do_B; // Single line statement else do_something_else; // Single line statement // Ternary operator condition_a ? do_A : do_B; // Switch statement switch(choice) { // choice value can only be primitive values in java 7, since java 8 strings are also accepted case choice_A: do_A; break; case choice_B: do_B; break; default: do_something_else; break; // not required, but good to have in Java }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-26","content":"// If else statement if (condition_a) { do_A; } else if (condition_b) { do_B; } else { do_something_else; } // Ternary operator condition_a ? do_A : do_B; // Switch statement switch(choice) { case choiceA: doA; break; case choiceB: doB; goto doSomethingSpecial; // go to a special case that is written outside the switch statement and run it (not advised to use it default: do_something_else; break; } doSomethingSpecial: doingSomething;  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-27","content":"// If else statement if (condition_a) { do_A; } else if (condition_b) { do_B; } else { do_something_else; } // {} not required if statement is a single line if (condition_a) do_A; // Single line statement else if (condition_b) do_B; // Single line statement else do_something_else; // Single line statement // Ternary operator condition_a ? do_A : do_B; // Null coalescing operator return_this_variable_value_if_not_null ?? else_return_this_value // Switch statement switch(choice) { case choice_A: do_A; break; case choice_B: do_B; break; default: do_something_else; }  back to top "},{"title":"Loops​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#loops","content":""},{"title":"python 2​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2-4","content":"# While loop # declare_initial_conditional_value i = 0 # Set condition while i&lt;5: # Start from 0 to 4 do_this # Include condition_increment_or_decrement i += 1 # Can use break, continue, and pass statements to add additional functionality, or not use any break # Breaks out of the current closest enclosing loop continue # Goes to the top of the closest enclosing loop pass # Does nothing at all # For loop # range() creates a list in python 2 # Looping with xrange() for i in xrange(5): # Starts from 0 to 4 (5 - 1) do_this # Can use break, continue, and pass statements to add additional functionality, or not use any break # Breaks out of the current closest enclosing loop continue # Goes to the top of the closest enclosing loop pass # Does nothing at all # Looping with xrange() and multiple parameters for i in xrange(0, 5, 2): # Start from 0 to 4 at every 2 steps (0,2,4) do_this # Reverse loop for i in xrange(4, -1, -1): # Start from 4 to 0 at every -1 steps do_this # Looping and getting each value for value in list_name: # [i1_value, i2_value, i3_value,...] print value # Looping and getting index and value for index, value in enumerate(list_name): print index, value # output index, value  "},{"title":"python 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-3-4","content":"# For loop # Looping with range() for i in range(5): # Starts from 0 to (5 - 1) do_this # Can use break, continue, and pass statements to add additional functionality, or not use any break # Breaks out of the current closest enclosing loop continue # Goes to the top of the closest enclosing loop pass # Does nothing at all # Looping with range() and multiple parameters for i in range(0, 5, 2): # Start from 0 to 4 at every 2 steps (0,2,4) do_this # Reverse loop for i in range(4, -1, -1): # Start from 4 to 0 at every -1 steps do_this # Looping and getting each value for value in list_name: # [value1, value2, value3,...] print(value) # Looping and getting index and value for index, value in enumerate(list_name): print(index, value) # output index, value # Loops and getting both key and value of a dict x = { &quot;one&quot;: 1, &quot;two&quot;: 2} for k, v in x.items(): print(f&quot;k: {k}, v: {v}&quot;)  "},{"title":"javascript ES5​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es5-4","content":"// While loop // declare_initial_conditional_value var i = 0; // Set condition while (i&lt;5) { // Start from 0 to 4 do_this; // Include condition_increment_or_decrement; i++; // Can use break or continue to add additional functionality, or not use any break; // Breaks out of the current closest enclosing loop continue; // Goes to the top of the closest enclosing loop } // Do While loop var i = 0; do { do_this; i++; } while (i&lt;5); // For loop for (var i=0; i&lt;5; i++) { // Start from 0 to 4 do_this; // Can use break or continue to add additional functionality, or not use any break; // Breaks out of the current closest enclosing loop continue; // Goes to the top of the closest enclosing loop } // Reverse loop for (var i=4; i&gt;=0; i--) { // Start from 4 to 0 do_this; } // forEach loop // Looping through a list while calling a function list_name.forEach(function(value, index, list){ // do not need to include all 3 parameters, but must be in order console.log(index, value, list); // outputs index value list });  "},{"title":"javascript ES6: Use let in loops when declaring​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6-use-let-in-loops-when-declaring","content":"// For of loop // Looping and getting each value for (let value of list_name) { // [value1, value2, value3,...] console.log(value); // output value } // Looping and getting index and value for (let index_and_value of list_name.entries()) { console.log(index_and_value); // output a list [index, value] } // For in loop for (let index in list_name) { console.log(list_name[index]); } // For in loop normally used to get values from objects (hash table, dictionaries) than to arrays // object = {key1:value1, key2:value2,...} for (let key in object) { console.log(object[key]); // outputs value, normally calling this way will not output value from objects }  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-15","content":"# While loop # declare_initial_conditional_value i = 0 # Set condition while i&lt;5 do # Start from 0 to 4, do keyword is not mandatory do_this # Include condition_increment_or_decrement i += 1 end # Until loop, backward while loop i = 0 until i == 4 # Start from 0 to 4 i += 1 end # For loop, with ... (3 dots) for i in numStart...numEnd # for i in the range numStart up to but don't include numEnd do_this end # For loop, with .. (2 dots) for i in numStart..numEnd ## for i in the range numStart up to and include numEnd dot_this end # Loop method, an infinite loop, requireds break to stop loop i = 4 loop do i -= 1 break if i ==0 # Breaks out of the current closest enclosing loop end # Next keyword: used to skip over certain steps in loop for i in 0...5 next if i % 2 == 0 # do not do anything if i is an even number do_this end # Each Iterator array = [1, 2, 3, 4, 5] array2 = [] array.each { |value| # Method 1: using {} value += 10 array2.push(value) } puts array2 # [11, 12, 13, 14, 15] array3 = [] array2.each do |value| # Method 2: using do keyword value -= 10 array3.push(value) end puts array3 # [1, 2, 3, 4, 5] # Iterating over Multidimensional Arrays with Each Iterator multiArray = [[1, 2], [3, 4], [5, 6]] multiArray.each { |sub_array| sub_array.each { |value| do_something } } # Times Iterator n.times { do_this } # do_this will repeat n times # Upto Iterator # method 1: number 0.upto(5) { |num| print num, &quot; &quot; } # 0 1 2 3 4 5 # method 2: alphabet &quot;A&quot;.upto(&quot;D&quot;) { |letter| prints letter, &quot; &quot; } # A B C D # Downto Iterator, &quot;string&quot; don't work 100.downto(95) { |num| print num, &quot; &quot; } # 100 99 98 97 96 95  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-16","content":"// While loop // declare_initial_conditional_value int i = 0; // Set condition while (i&lt;5) { // Start from 0 to 4 doThis; // Include condition_increment_or_decrement; i++; // Can use break or continue to add additional functionality, or not use any break; // Breaks out of the current closest enclosing loop continue; // Goes to the top of the closest enclosing loop } // Do while loop: execute first before setting conditions // declare_initial_conditional_value int i = 0; do { // Start from 0 to 4 doThis; // Include condition_increment_or_decrement; i++; // Set condition } while (i&lt;5); // For loop for (int i=0; i&lt;5; i++) { // Start from 0 to 4 doThis; // Can use break or continue to add additional functionality, or not use any break; // Breaks out of the current closest enclosing loop continue; // Goes to the top of the closest enclosing loop } // Reverse loop for (int i=4; i&gt;=0; i--) { // Start from 4 to 0 doThis; } // for each loop, can also loop collections with iterators char[] chars = {'H', 'e', 'l', 'l', 'o'}; // an array can only have a single data type for (char c : chars) { // for each element in the array doThis; }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-28","content":"// While loop // declare_initial_conditional_value int i = 0; // Set condition while (i&lt;5) { // Start from 0 to 4 do_this; // Include condition_increment_or_decrement; i++; // Can use break or continue to add additional functionality, or not use any break; // Breaks out of the current closest enclosing loop continue; // Goes to the top of the closest enclosing loop } // Do while loop: execute first before setting conditions // declare_initial_conditional_value int i = 0; do { // Start from 0 to 4 do_this; // Include condition_increment_or_decrement; i++; // Set condition } while (i&lt;5); // For loop for (int i=0; i&lt;5; i++) { // Start from 0 to 4 do_this; // Can use break or continue to add additional functionality, or not use any break; // Breaks out of the current closest enclosing loop continue; // Goes to the top of the closest enclosing loop } // Reverse loop for (int i=4; i&gt;=0; i--) { // Start from 4 to 0 do_this; } // For each loop: cycles through every item in an array or collection (List) // Modifications of an array or collection is not allowed, need to use normal loops string stringName = &quot;a random string of characters&quot;; foreach(char c in stringName) { do_this; }  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-29","content":"// While loop // declare_initial_conditional_value int i = 0; // Set condition while (i&lt;5) { // Start from 0 to 4 do_this; // Include condition_increment_or_decrement; i++; // Can use break or continue to add additional functionality, or not use any break; // Breaks out of the current closest enclosing loop continue; // Goes to the top of the closest enclosing loop } // Do while loop: execute first before setting conditions // declare_initial_conditional_value int i = 0; do { // Start from 0 to 4 do_this; // Include condition_increment_or_decrement; i++; // Set condition } while (i&lt;5); // For loop for (int i=0; i&lt;5; i++) { // Start from 0 to 4 do_this; // Can use break or continue to add additional functionality, or not use any break; // Breaks out of the current closest enclosing loop continue; // Goes to the top of the closest enclosing loop } // Reverse loop for (int i=4; i&gt;=0; i--) { // Start from 4 to 0 do_this; } // Range-based for loop // Looping and getting each value for (int value : int_array) { cout &lt;&lt; value &lt;&lt; endl; // output value per line } // Use auto to automatically detect array data type for (auto value : array_name) { cout &lt;&lt; value &lt;&lt; endl; } // Infinite for loops for (;;) cout &lt;&lt; &quot;This will print forever&quot; &lt;&lt; endl;  back to top "},{"title":"Instantiation​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#instantiation","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-11","content":"t = Thing() # everything  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-12","content":"v = getValue(); // plain function t = new Thing(); // instantiation  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-16","content":"t = thing.new # instantiation t = thing.new(argument) # instantiation with arguments  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-17","content":"public class ClassName { public String type; // instance variable public static void main(String[] args) { ClassName t = new ClassName(); // instantiation t.type = &quot;something&quot;; t.display(); doSomething(); // can call static method directly } // instance method private void display() {} // static method static void doSomething() {} }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-30","content":"// method 1 ClassName t = new ClassName(); // instantiation ClassName t = new ClassName(argument); // instantiation with arguments // method 2 var t = new ClassName(); // instantiation var t = new ClassName(argument); // instantiation with arguments public class Person { public int Age; } public class Program { public static void Main() { Person person = new Person() {Age=20}; // instantiation &amp; assigning value increment(person); System.Console.WriteLine(person.Age); } public static void increment(Person person) { person.Age += 10; } }  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-31","content":"back to top "},{"title":"Functions​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#functions","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-12","content":"Function returns None by default if return statement is not declared # Normal function, use return to return values def myFunction(): do_something # Normal function with parameters def myFunction(a): do_something_with_a # Default parameters def myFunction(a=value): do_something_with_a # Lambda function: a small anonymous function # can take any number of arguments, but can only have 1 expression myFunction = lambda a : do_something_with_a myFunction = lambda a, b : do_something_with_a_and_b # Function annotation (python 3) def get_sum(num1: int, num2: int): return num1 + num2 # Function annotation with default parameters (python 3) def get_sum(num1: int=1, num2: int=2): return num1 + num2  "},{"title":"javascript ES5​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es5-5","content":"Function returns undefined by default if return statement is not declared // Normal function, use return to return values function myFunction() { do_something; } // Normal function with parameters function myFunction(a) { do_something_with_a; } // Function expression let myFunction = function() { do_something; } // Function expression with parameters let myFunction = function(a) { do_something_with_a; } // Arrow function: do not have their own &quot;this&quot; keyword // 1 line arrow function let myFunction = () =&gt; do_something; // () at (do_something) not necessary if on single line // 1 line arrow function with arguments let myFunction = (a) =&gt; ( do_something_with_a ); // arrow function, must use return keyword let myFunction = () =&gt; { return do_something }; // arrow function with arguments let myFunction = (a) =&gt; { return do_something_with_a }; // Immediately Invoked Function Expressions (IIFE) // method 1 (function() { do_something; })(); // method 2 (function() { do_something; }()); // method 3: no returning of value !function() { do_something; }();  "},{"title":"javascript ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6-3","content":"// Default parameters function myFunction(a=value) { do_something_with_a; }  "},{"title":"typescript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#typescript-6","content":"// return void function greetByName(name: string): void { console.log('Well hi there,', name); } function makeGreen(name: string): string { const newName = `Green ${name}`; return newName; } function getStr(): string { return &quot;string&quot;; } function getNum(): number { return 123; } function getArr(): object { return [1, &quot;string&quot;]; } // accept multiple types in the parameter with &quot;|&quot; function totalLength(x: string | any[], y: string | any[]): number { // allow mix of string and array parameters let total: number = x.length + y.length; return total; } // function overloading function totalLength(x: string, y: string): number; // allows either only string parameters function totalLength(x: any[], y: any[]): number; // or only array parameters function totalLength(x: string | any[], y: string | any[]): number { // does not allow mix of string and array parameters var total: number = x.length + y.length; return total; } // using anonymous types function totalLength(x: {length: number}, y: {length: number}): number { // in this case, allow any parameter types that is able to calculate length (string, array) var total: number = x.length + y.length; return total; }  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-17","content":"Function returns result regardless of whether return statement is declared or not Reason: ruby applies Implicit Return feature # Normal function, use return to return values def myFunction do_something end # Normal function with parameters def myFunction(parameter) do_something end # Default parameters def myFunction(a=value) do_something_with_a end # Blocks: nameless methods, similar to anonymous functions in JavaScript or lambdas in Python # can replace &quot;do&quot; and &quot;end&quot; with {} # 1st type # original way arrayName.each do |num| do_something_with_num end # blocks way arrayName.each { |num| do_something_with_num } # 2nd type: Yield def myFunction yield # can have multpile yield yield end myFunction { print &quot;test&quot; } # &quot;testtest&quot; def myFunction yield(1) # can pass any number of arguments to yield yield 2 # () is not a must end myFunction { |num| print num * 10 } # 1020 # Explicit Blocks def myFunction(&amp;blockName) # &amp; is used to define the block's name blockName.call end myFunction { print &quot;test&quot; } # &quot;test&quot; # Lambda # lambda checks the number of arguments passed to it # when a lambda returns, it passes control back to the calling method # method 1 myFunction = -&gt; { puts &quot;test&quot; } myFunction.call # &quot;test&quot;, call is required to call the lambda function # method 2 myFunction = lambda { puts &quot;test&quot; } myFunction.call # Procs: a saved block # it is a full-fledged objects, so they have all the powers and abilities of objects (blocks do not) # Unlike blocks, procs can be called over and over without rewriting them # procs does not checks the number of arguments passed to it # when a proc returns, it does so immediately, without going back to the calling method blockName = Proc.new do |n| do_something_with_n end  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-18","content":"// Normal functions public static void myFunction() { do_something; } // Normal function with parameters public static void myFunction(dataType a){ do_something_with_a } // Normal function with return value (change void to data type to return) public static int sum(int a){ return a + 1; } // lamda // store returning function interface StringFunction { String run(String str); } StringFunction strFunc = (s) -&gt; s; strFunc.run(&quot;test&quot;); // &quot;test&quot; // store non returning function // import java.util.ArrayList; // import java.util.function.Consumer; // must import ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;(); numbers.add(5); Consumer&lt;Integer&gt; method = (n) -&gt; { System.out.println(n); }; numbers.forEach( method ); // using inside forEach loop numbers.forEach( (n) -&gt; { System.out.println(n); } );  method overloading static double addValues(String s1, String s2) { double d1 = Double.parseDouble(s1); double d2 = Double.parseDouble(s2); double result = d1 + d2; return result; } static double addValues(String s1, String s2, String s3) { double d1 = Double.parseDouble(s1); double d2 = Double.parseDouble(s2); double d3 = Double.parseDouble(s3); double result = d1 + d2 + d3; return result; }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-32","content":"// Normal functions public static void MyFunction() { do_something } // Normal function with parameters public static void MyFunction(dataType a){ do_something_with_a } // Normal function with default parameters public static void MyFunction(dataType a=value) { do_something_with_a; } // Normal function with return value (change void to data type to return) public static int Sum(int a){ return a + 1; } // Lambda expression public static void MyFunction() =&gt; do_something; // Lambda expression with parameters public static void MyFunction(dataType a) =&gt; do_something_with_a; // () not required if single input, use {} if have multi-lines var MyFunction = (dataType a) =&gt; do_something_with_a; var MyFunction = dataType a =&gt; do_something_with_a; var MyFunction = (dataType a) =&gt; { do_something_with_a; }; var MyFunction = dataType a =&gt; { do_something_with_a; }; // dataType not required if data type is obvious var MyFunction = a =&gt; do_something_with_a; var MyFunction = a =&gt; { do_something_with_a; }; // Lambda expression with default parameters public static void MyFunction(dataType a=someValue) =&gt; do_something_with_a;  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-33","content":"Function Signature: return type | name of function | (parameters)Signature / prototype Normally add these in a .hpp or .h file then #include it into the .cpp file public void functionName(); public void functionName2(int arg1, int arg2);  Function definition void functionName() { // do something }  Function prototype // prototype int sumTwoNumbers(int a, int b); int main() { int result = sumTwoNumbers(2, 2); return 0; } // function definition int sumTwoNumbers(int a, int b) { return a + b; }  back to top "},{"title":"Higher order functions​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#higher-order-functions","content":""},{"title":"python 2​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2-5","content":"# Map: applies a given function to each item of an iterable (list, tuple etc.) and returns a list of the results # map(function, iterable, ...) arr = [1, 2, 3] def add(n): return n + n map(add, arr) # return &lt;map object at 0x10473e518&gt; list(map(add, arr)) # return [2, 4, 6] # Filter: filter and return a new array based on the conditions # filter(function, iterable) arr = [1, 2, 3] def condition(n): if n &lt; 3: return n filter(condition, arr) # return &lt;filter object at 0x10473e550&gt; list(filter(condition, arr)) # return [1, 2] # Reduce: executes a function on each element, resulting in a single output value arr = [1, 2, 3] def compute(n, m): return n * m reduce(compute, arr) # return 6 # Zip: combines 2 arrays or tuples into an array of tuples arr1 = [1, 2, 3] arr2 = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;] zpp(arr1, arr2) # [(1, '1'), (2, '2'), (3, '3')]  "},{"title":"python 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-3-5","content":"# Reduce: executes a function on each element, resulting in a single output value arr = [1, 2, 3] def compute(n, m): return n * m from functools import reduce # requires import in python 3 reduce(compute, arr) # return 6 # Zip: must call a list() or tuple() on the zip method list(zip(s, t)) # [(1, '1'), (2, '2'), (3, '3')] tuple(zip(s, t)) # ((1, '1'), (2, '2'), (3, '3'))  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-13","content":"// Map: create a new array from a current array // array.map(element, currentIndex, originalArray) const companies = [ {name: &quot;company1&quot;, category: &quot;industry1&quot;}, {name: &quot;company2&quot;, category: &quot;industry2&quot;} ]; // callback method const companyNames = companies.map(function(company) { return company.name; } // arrow function method const companynames = companies.map((company) =&gt; company.name); // Filter: creates a new array with all elements that pass the condition implemented by the provided function // array.filter(element, currentIndex, originalArray) const ages = [age1, age2, age3]; // callback method const canDrink = ages.filter(function(age) { if (condition) { return true; } } // arrow function method const canDrink = ages.filter(age =&gt; condition); // Reduce: executes a function on each element of the array, resulting in a single output value // array.reduce(function(accumulator, currentValue){ do_something }, initialValue) let arr = [1, 2, 3]; // no initial value arr.reduce(function(accumulator, currentValue) { return accumulator + currentValue; }); // returns a value of 6 /* accumulator | currentValue | returned value 1 | 2 | 3 3 | 3 | 6 */ // initial value included arr.reduce(function(accumulator, currentValue) { return accumulator + currentValue; }, 10); // returns a value of 16 /* accumulator | currentValue | returned value 10 | 1 | 11 11 | 2 | 13 13 | 3 | 16 */ // Sort: sorts the elements of an array in place and returns the sorted array // array.sort(compareFunction) // if compareFunction is not used, all sorted elements will be sorted based on it's string value let array = [&quot;1&quot;, 30, 4, 21, 100000]; array.sort(); // returns [&quot;1&quot;, 100000, 21, 30, 4] // sort in ascending order array.sort((a, b) =&gt; a - b); // returns [&quot;1&quot;, 4, 21, 30, 100000] // sort in descending order array.sort((a, b) =&gt; b - a); // returns [100000, 30, 21, 4, &quot;1&quot;] // Zip is not available in Javascript, use Maps instead const arr1 = [1, 2, 3]; const arr2 = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]; function zip(arrays) { return arrays[0].map(function(_,i){ return arrays.map(function(array){return array[i]}) }); } zip([arr1, arr2]); // [[1, '1'], [2, '2'], [3, '3']]  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-18","content":"# Zip: combine 2 arrays arr1 = [1, 2, 3] arr2 = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;] puts arr1.zip(arr2) # [[1, '1'], [2, '2'], [3, '3']]  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-19","content":""},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-34","content":"back to top "},{"title":"Hash Tables​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#hash-tables","content":"Hash Tables, Dictionaries, Objects "},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-13","content":"# Create dictionary newDict = {} # Create dictionary and assign key value pairs # method 1 newDict = { &quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: 123, &quot;key3&quot;: True, &quot;key4&quot;: myFunction } # method 2 newDict = dict(key1=&quot;value1&quot;, key2=&quot;value2&quot;) # Add or reassign key value pair newDict[&quot;Key&quot;] = &quot;Value&quot; # method 1 newDict.update({&quot;key&quot;: &quot;value&quot;}) # method 2 # Set multiple keys with a similar value newKeys = (&quot;key1&quot;, &quot;key2&quot;, &quot;key3&quot;) newValue = value newDict = dict.fromkeys(newKeys, newValue) # Return value of the item with the specified key # If the key does not exist, insert the key, with the specified value newVariable = newDict.setdefault(&quot;key&quot;, &quot;newValue&quot;) # Get value newDict[&quot;key&quot;] # method 1 # return KeyError if key does not exist newDict.get(&quot;key&quot;) # method 2 # return None if key does not exist # Get list of keys list(newDict.keys()) # Get list of values list(newDict.values()) # Get list of key value tuples list(newDict.items()) # Loop through Dictionary and get each key # method 1 for key in newDict: print(key) # method 2 for key in newDict.keys(): print(key) # Loop through Dictionary and get each value # method 1 for key in newDict: print(newDict[key]) # method 2 for value in newDict.values(): print(value) # Loop through both keys and values for key, value in newDict.items(): print(key, value) # Check if key exists if &quot;key&quot; in newDict: return True # Get dictionary length len(newDict) # Copy dictionary # cannot copy just from dict2 = dict1 as it is just referencing to dict1 # method 1 newDict2 = newDict.copy() # method 2 newDict2 = dict(newDict) # Remove items newDict.pop(&quot;key&quot;) # method 1 del newDict[&quot;key1&quot;] # method 2 # Remove last inserted item newDict.popitem() # Delete entire dictionary del newDict # method 1 newDict.clear() # method 2  "},{"title":"javascript ES5​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es5-6","content":"// Objects // Create object let newObj = new Object(); // method 1 let newObj = {}; // method 2, literal notation // Create object and assign values // keys can only be strings without quotes let newObj = { key1: &quot;stringValue&quot;, key2: 123, key3: true, key4: [&quot;array&quot;, &quot;array2&quot;], key5: {anotherKey: anotherValue}, key6: function(arg){return do_something_with_arg} }; // dynamic key let myKey = &quot;emotion&quot; let newObj2 = { [myKey]: &quot;Happy&quot;, }; // key = &quot;emotion&quot; // Creates a new object, using an existing object as the prototype of the newly created object // method 1 newObj2 = Object.create(newObj); // copies the prototype of newObj, key value pairs will become inherited let newObj2pt2 = Object.create(null, { // creates a new object but without default object properties, default object properties can't be used key1: value, }); let newObj2pt3 = Object.create(null, { // set object configuration key: { value: &quot;something&quot;, writable: true, enumerable: true, configurable: true, } }); let newObj2pt4 = Object.create(Object.prototype, { // creates a new object with all default object properties key: { value: &quot;something&quot;, writable: true, enumerable: true, configurable: true, } }); // method 2: merge 2 object together newObj2 = Object.assign(oldObj, newObj); // Assign and Reassign values newObj[&quot;key1&quot;] = &quot;newString&quot;; // method 1, bracket notation newObj.key1 = &quot;newString2&quot;; // method 2, dot notation // Copy the values of all enumerable own properties from one or more source objects to a target object // return the target object const target = { a: 1, b: 2 }; const source = { b: 4, c: 5 }; const newObj = Object.assign(target, source); // newObj, target = { a: 1, b: 4, c: 5 } // Copy without mutating the target source const target2 = { a: 1, b: 2 }; const source2 = { b: 4, c: 5 }; const newObj2 = Object.assign({}, target2, source2); // newObj2 = { a: 1, b: 4, c: 5 }, target2 = { a: 1, b: 2 } // Get value newObj[&quot;key1&quot;]; // method 1 newObj.key1; // method 2 // Get an array of keys Object.keys(newObj); // Get an array of values Object.values(newObj); // Loop through all key value pairs // must be (key, value) for (let [key, value] of Object.entries(newObj)) {console.log(`Key: ${key}, Value: ${value}`);} // Defines a new property directly on an object, or modifies an existing property on an object, and returns the object // Object.defineProperty(obj, propertyName, descriptor) Object.defineProperty(newObj, &quot;property1&quot;, { value: &quot;123&quot;, writable: true, enumerable: true, configurable: false, }); // newObj.property1 = 123 let descriptor = Object.getOwnPropertyDescriptor(newObj, &quot;property1&quot;); console.log(descriptor); /* { value: 123, writable: true, // if false cannot reassign new primitive values, but can reassign values of an object enumerable: true, // if false will skip this property when looping configurable: true, // if false cannot delete and redefine property (except writable); once set to false, cannot change back to true } */ // Seals an object // prevent addition of properties, however defined properties still can be changed Object.seal(newObj); // Freeze an object // makes the object immutable, meaning no change to defined property allowed, unless they are objects. Object.freeze(newObj);  "},{"title":"javascript ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6-4","content":"// Merge 2 objects const target = { a: 1, b: 2 }; const source = { b: 4, c: 5 }; const newObj = {...target, ...source}; // { a: 1, b: 4, c: 5 } // Maps or Hash tables // Create new Map or hash table const newDict = new Map(); // Add key value pair data // keys does not need to be strings, can be numbers, booleans, etc. newDict.set(key1, value1); newDict.set(key2, value2); // Get all keys newDict.keys(); // Get all values newDict.values(); // Iterate over Maps to get each key for (let key of newDict.keys()) { console.log(key); } // Iterate over Maps to get each value for (let value of newDict.values()) { console.log(value); } // Get value newDict.get(key); // Get hash table size newDict.size; // Check if key value pair exist with key input newDict.has(key); // Loop through all key value pairs // method 1, must be (value, key) newDict.forEach((value, key) =&gt; console.log(`Key: ${key}, Value: ${value}`)); // method 2, must be (key, value) for (let [key, value] of newDict.entries()) {console.log(`Key: ${key}, Value: ${value}`);} // Delete key value pair newDict.delete(key); // Delete all key value pairs newDict.clear() // WeakMap: similar to Map, but all keys must be objects // Create new weak map const newDict = new WeakMap(); // Add key value pair data // key MUST be and Object newDict.set(obj1, value1); newDict.set(obj2, value2); // Get value newDict.get(obj); // Delete key value pair newDict.delete(obj); // Check if key value pair exist with key input newDict.has(obj);  "},{"title":"typescript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#typescript-7","content":"// object is a type that represents the non-primitive type, i.e. anything that is not number, string, boolean, symbol, null, or undefined let objName: object = { key1: 123, key2: &quot;string&quot; }  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-19","content":"# Hash literal notation, OLD SYNTAX hash_name = { key1 =&gt; value1, &quot;name&quot; =&gt; &quot;myName&quot;, &quot;age&quot; =&gt; 123, &quot;hungry?&quot; =&gt; true, 111 =&gt; &quot;one one one&quot;, false =&gt; &quot;weird&quot; } # NEW SYNTAX # keys are symbols in this case hash_name = { key1: value1, name: &quot;myName&quot;, age: 123, hungry: true, } # Hash constructor notation # Create a new empty hash hash_name = Hash.new # Adding to a Hash hash_name[&quot;newKey&quot;] = &quot;new value&quot; # Accessing hash value hash_name[&quot;hungry&quot;] # true # Delete a key value pair hash_name.delete(key) # Update hash (duplicates will be removed) hash_name.update(hash_name2) # Merge hash (duplicates will not be removed) hash_name.merge(hash_name2) # Check if key exist hash_name.has_key?(&quot;keyName&quot;) # Check if value exit hash_name.has_value?(&quot;valueName&quot;) # Check if hash is empty hash_name.empty? # Get hash size hash_name.size # Iterating over Hashes hash_name.each do [keyName, valueName| do_something_with_keyName_and_valueName end # sort_by: Maps Hash into an array and then sort them via values in ascending order colors = { &quot;blue&quot; =&gt; 3, &quot;green&quot; =&gt; 1, &quot;red&quot; =&gt; 2 } colors = colors.sort_by do |color, count| count end puts colors # [[&quot;green&quot;, 1], [&quot;red&quot;, 2], [&quot;blue&quot;, 3]] # nil does not display anything myHash = Hash.new() puts myHash # {} puts myHash[&quot;nonexistent key&quot;] # display nothing # Replace nil and Set default value when key does not exist myHash = Hash.new(&quot;no such key&quot;) puts myHash # {} puts myHash[&quot;nonexistent key&quot;] # &quot;no such key&quot; # Symbols used in Hashes myHash = { :cat =&gt; &quot;meow&quot;, :number =&gt; 123 } # Select method: Grab specific value(s) from a hash with key or value grades = { alice: 100, bob: 92, chris: 95, dave: 97 } newHash = grades.select { |nameKey, gradeValue| gradeValue &lt; 97 } # Grab values with value puts newHash # { :bob =&gt; 92, :chris =&gt; 95 } newHash = grades.select { |nameKey, gradeValue| nameKey == :alice } # Grab values with key puts newHash # { :alice =&gt; 100 } # Loop all keys grades.each_key { |key| print key, &quot; &quot; } # alice bob chris dave # Loop all values grades.each_value { |value| print value, &quot; &quot; } # 100 92 95 97  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-20","content":"// Map: it is an interface used to store data in key-value pair // import java.util.Map; // must import // HashMap: it is the implementation class of the Map interface // import java.util.HashMap; // must import // declaration Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); // add key value pair map.put(&quot;jp&quot;, &quot;Japan&quot;); map.put(&quot;sg&quot;, &quot;Singapore&quot;); map.put(&quot;usa&quot;, &quot;United States&quot;); System.out.println(map); // { jp=Japan, sg=Singapore, usa=United States } // get value with key map.get(&quot;jp&quot;); // &quot;Japan&quot; // remove key value pair with key map.remove(&quot;sg&quot;); // { jp=Japan, usa=United States } // get a set of keys // import java.util.Set; // must import Set&lt;String&gt; keys = map.keySet(); // [ usa, jp ]  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-35","content":"// method 1 (can be used within a method) System.Collections.Generic.Dictionary&lt;string, string&gt; _dictionary = new System.Collections.Generic.Dictionary&lt;string, string&gt;(); // declaration _dictionary[&quot;name&quot;] = &quot;xyz&quot; // assigning key value pairs System.Console.WriteLine(_dictionary[&quot;name&quot;]); // getting value with key // method 2: indexer (need to create a class) public class Person { private readonly System.Collections.Generic.Dictionary&lt;string, string&gt; _dictionary = new System.Collections.Generic.Dictionary&lt;string, string&gt;(); public string this[string key] { // this keyword is required get { return _dictionary[key]; } set { _dictionary[key] = value; } // value is a keyword } } class MainClass { public static void Main() { Person p = new Person(); p[&quot;name&quot;] = &quot;xyz&quot;; System.Console.WriteLine(p[&quot;name&quot;]); // &quot;xyz&quot; } }  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-36","content":"back to top "},{"title":"Destructuring​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#destructuring","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-14","content":"# Tuples xVariable, yVariable = (xValue, yValue) # Arrays xVariable, yVariable = [xValue, yValue] # String xVariable, yVariable = &quot;xy&quot; # Dictionaries xKey, yKey = {&quot;xKey&quot;: xValue, &quot;yKey&quot;: yValue}  "},{"title":"javascript ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6-5","content":"// Arrays const [xVariable, yVariable] = [xValue, yValue]; // Objects const obj = { xKey: xValue, yKey: yValue } // declaring variables const {xKey, yKey} = obj; // variable names must be the same as object key names // assigning different variable names const {xKey: xNewKey, yKey: yNewKey} = obj; // Set default values if extracted variables does not exist const { xKey, yKey, zKey=&quot;test&quot; } = obj; // Use optional chaining for async code where data type will change let data = null; // value before fetch const { a=&quot;&quot;, b=&quot;&quot; } = data?.[0] || []; // checks if data is undefined or null, then checks if there is value inside array console.log(a); // &quot;&quot; data = [{ a: &quot;hello&quot;, b: &quot;world&quot; }]; // value after fetch const { a=&quot;&quot;, b=&quot;&quot; } = data?.[0] || []; // checks if data is undefined or null, then checks if there is value inside array console.log(a); // &quot;hello&quot;  "},{"title":"typescript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#typescript-8","content":"type myFunctionProps = { arg1: string, [k: string]: any, // to enable ...rest }; function myFunction({arg1, ...rest}: myFunctionProps) { let argsObj = rest; // args is an object of arguments }  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-20","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-21","content":""},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-37","content":"back to top "},{"title":"Spread Operator​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#spread-operator","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-15","content":"# *args (splat) # Takes an array and transform (unpacks) it into single values # Must utitlize all of the element of the array to work myFunction(a, b, c) # normal method myFunction(*Tuple) # (a, b, c) myFunction(*List) # [a, b, c] myFunction(*String) # &quot;abc&quot; myFunction(*Dict) # {&quot;a&quot;: value1, &quot;b&quot;: value2} only utilize the keys # **kwargs myFunction(**Dict) # {&quot;a&quot;: value1, &quot;b&quot;: value2} utilize both keys and values  "},{"title":"javascript ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6-6","content":"// Takes an array and transform (unpacks) it into single values // Must utitlize all of the element of the array to work let arr = [a, b, c]; myFunction(a, b, c); // normal method myFunction.apply(null, arr) // using the apply() method myFunction(...arr); // spread method // join multiple arrays together let arr1 = [a, b, c]; let arr2 = [d, e, f]; let totalArr = arr1.concat(arr2); // concat method let totalArr = [...arr1, ...arr2];  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-21","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-22","content":""},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-38","content":"back to top "},{"title":"Rest parameters​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#rest-parameters","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-16","content":"# *args # Receive a couple of single values and transform them into an array def myFunction(*args): newArr = args # args is an array of arugments # **kwargs # Receive a couple of keys and values and transform them into a dictionary def myFunction(**kwargs): newDict = kwargs # kwargs is a dictionary of keys and values # calling example myFunction(var1=value1, var2=value2)  "},{"title":"javascript ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6-7","content":"// Receive a couple of single values and transform them into an array function myFunction(...args) { let argsArr = args; // args is an array of arguments }  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-22","content":"# *parameter # Receive a couple of single values and transform them into an array def myFunction(*parameter): newArr = args # args is an array of arugments end  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-23","content":"static double myFunction(String ... args) { String[] argsArr = args; // args is an array of arguments }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-39","content":"// hard coded method public class Calculator1 { public in Add(int n1, int n2){ return n1 + n2; } public in Add(int n1, int n2, int n3){ return n1 + n2 + n3; } } // dynamic method public class Calculator2 { public in Add(int[] numbers){ int result = 0; foreach (int num in numbers) result += num return result; } } class MainClass { public static void Main(string[] args) { Calculator cal = new Calculator2(); int result = cal.Add(new int[]{1, 2}); // need to initialize a new array } } // Using Params Modifier public class Calculator3 { public in Add(params int[] numbers){ // add params keyword int result = 0; foreach (int num in numbers) result += num return result; } } class MainClass { public static void Main(string[] args) { Calculator cal = new Calculator3(); int result = cal.Add(new int[]{1, 2}); // method 1: initialize a new array int result2 = cal.Add(1, 2); // method 2: only possible if used params keyword } }  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-40","content":"back to top "},{"title":"Class​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#class","content":""},{"title":"python 2​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2-6","content":"class MathClass: def __init__(self, arg1, arg2): self.arg1 = arg1 self.arg2 = arg2 self.total = self.outterAdd(arg1, arg2) def innerAdd(self, arg3): return self.arg1 + self.arg2 + arg3 # Static method knows nothing about the class and just deals with the parameters def outterAdd(number1, number2): return number1 + number2 outterAdd = staticmethod(outterAdd) test = MathClass(2, 4) print (test.total) # 6 print (test.innerAdd(2)) # 8 print (test.outterAdd(3, 7)) # 10 print (MathClass.outterAdd(4, 5) # 9  "},{"title":"python 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-3-6","content":"class MathClass: def __init__(self, arg1, arg2): self.arg1 = arg1 self.arg2 = arg2 self.total = self.outterAdd(arg1, arg2) def innerAdd(self, arg3): return self.arg1 + self.arg2 + arg3 # Static method knows nothing about the class and just deals with the parameters @staticmethod def outterAdd(number1, number2): return number1 + number2 test = MathClass(2, 4) print(test.total) # 6 print(test.innerAdd(2)) # 8 print(test.outterAdd(3, 7)) # 10 print(MathClass.outterAdd(4, 5)) # 9 # Using classmethod: method 1 class Person: name = &quot;Default name&quot; @classmethod def change_name(clas, new_name): cls.name = new_name person1 = Person() print(person1.name) # Default name person1.change_name(&quot;New name&quot;) print(person1.name) # New name # Using classmethod: method 2 class Person2: def __init__(self, name): self.name = name @classmethod def use_default_name(cls): return cls(&quot;Default name&quot;) person2 = Person2(&quot;My name&quot;) print(person2.name) # My name person3 = Person2.use_default_name() print(person3.name) # Default name # Inheritance class Employee: # parent raise_amt = 1.04 def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay def apply_raise(self): self.pay = int(self.pay * self.raise_amt) class Developer(Employee): # child raise_amt = 1.1 def __init__(self, first, last, pay, prog_lang): super().__init__(first, last, pay) # method 1: implement parent class init method Employee.__init__(self, first, last, pay) # method 2: implement parent class init method self.prog_lang = prog_lang dev = Developer(&quot;abc&quot;, &quot;xyz&quot;, 5000, &quot;Python&quot;) print(dev.pay) # 5000 dev.apply_raise() print(dev.pay) # 5500  python magic method guide https://rszalski.github.io/magicmethods/ "},{"title":"javascript ES5​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es5-7","content":"// method 1 var MathClass = { arg1: 2, arg2: 0, get getTotal() { return this.arg1 + this.arg2; }, set getTotal(arg2) { // can only have 1 parameter this.arg2 = arg2; }, } MathClass.getTotal; // 2 MathClass.getTotal = 4; MathClass.getTotal; // 6 // method 2 // Constructor var MathClass = function(arg1) { this.arg1 = arg1; this.arg2 = 0; } // Instantiation var test = new MathClass(2); // Add method MathClass.prototype.innerAdd = function(arg3) { return this.arg1 + this.arg2 + arg3; } test.innerAdd(4); // 6 // Add getter and setter Object.defineProperty(MathClass.prototype, &quot;getTotal&quot;, { get: function() { return this.arg1 + this.arg2; }, set: function(arg2) { // can only have 1 parameter this.arg2 = arg2; } }); var total = new MathClass(2); total.getTotal; // 2 total.getTotal = 4; total.getTotal; // 6 // inheritance function Employee(first, last, pay) { this.raiseAmt = 1.04; this.first = first; this.last = last; this.pay = pay; } Employee.prototype.applyRaise = function() { this.pay = parseInt(this.pay * this.raiseAmt); } function Developer(first, last, pay, progLang) { Employee.call(this, first, last, pay); this.raiseAmt = 1.1; this.progLang = progLang; } Developer.prototype = Object.create(Employee.prototype); Developer.prototype.constructor = Developer; const dev = new Developer(&quot;abc&quot;, &quot;xyz&quot;, 5000, &quot;Javascript&quot;) console.log(dev.pay) // 5000 dev.applyRaise() console.log(dev.pay) // 5500  "},{"title":"javascript ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6-8","content":"// Case 1: normal javascript way class MathClass { #privateVariable // required if want to declare private variable constructor(arg1, arg2) { this.arg1 = arg1; this.arg2 = arg2; this.#privateVariable = &quot;this is a real private variable&quot;; // cannot be accessed directly this.total = this.constructor.outterAdd(arg1, arg2); } innerAdd(arg3) { return this.arg1 + this.arg2 + arg3; } // Static method knows nothing about the class and just deals with the parameters static outterAdd(number1, number2) { return number1 + number2; } get privateVariable() { return this.#privateVariable; } set privateVariable(newValue) { // can only have 1 parameter this.#privateVariable = newValue; } } const test = new MathClass(2, 4); console.log(test.total); // 6 console.log(test.innerAdd(2)); // 8 console.log(test.constructor.outterAdd(3, 7)); // 10 console.log(MathClass.outterAdd(4, 5)); // 9 console.log(test.privateVariable); // &quot;this is a real private variable&quot; test.privateVariable = &quot;changed private variable value&quot;; console.log(test.privateVariable); // &quot;changed private variable value&quot; // Case 2: event handlers in React class MathClass { constructor() { this.arg1 = 2; this.arg2 = 4; this.innerAdd = this.innerAdd.bind(this); // this is required to prevent TypeError } innerAdd(arg3) { return this.arg1 + this.arg2 + arg3; } } const test = new MathClass(); console.log(test.innerAdd(2)); // 8 // Inheritance class Employee { // parent raiseAmt = 1.04; constructor(first, last, pay) { this.first = first; this.last = last; this.pay = pay; } applyRaise() { this.pay = parseInt(this.pay * this.raiseAmt); } } class Developer extends Employee { // child raiseAmt = 1.1; constructor(first, last, pay, progLang) { super(first, last, pay) // implement parent class init method this.progLang = progLang; } } const dev = new Developer(&quot;abc&quot;, &quot;xyz&quot;, 5000, &quot;Javascript&quot;) console.log(dev.pay) // 5000 dev.applyRaise() console.log(dev.pay) // 5500  "},{"title":"typescript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#typescript-9","content":"class Person { name: string; age: number; isWorking: boolean; } class Page { private content: string; constructor(content: string = '') { this.content = content; } public getContent(): string { return this.content; } } class Book { private pages: Page[] = []; public add(page: Page): void { this.pages.push(page); } } // Interface interface ClockInterface { h: number; m: number; tick(): void; } class DigitalClock implements ClockInterface { h: number; // must be declared to use &quot;this.h&quot; m: number; constructor(h: number, m: number) { this.h = h; this.m = m; } tick(): void { console.log(`beep beep ${this.h}:${this.m}`); } } class AnalogClock implements ClockInterface { h: number; m: number; constructor(h: number, m: number) { this.h = h; this.m = m; } tick(): void { console.log(`tick tok ${this.h}:${this.m}`); } } const digital = new DigitalClock(12, 17); const analog = new AnalogClock(7, 32) digital.tick(); analog.tick(); // abstract abstract class Department { constructor(public name: string) {} printName(): void { console.log(`Department name: ${this.name}`); } abstract printMeeting(): void; // must be implemented in derived classes } class AccountingDepartment extends Department { // must use all and only methods declared in the abstract class constructor() { super(&quot;Accounting and Auditing&quot;); // constructors in derived classes must call super() } printMeeting(): void { // methods can be customized and modified console.log(&quot;The Accounting Department meets each Monday at 10am.&quot;); } generateReports(): void { // does not exist in the abstract class, will produce an error if run console.log(&quot;Generating accounting reports...&quot;); } } let department: Department; // ok to create a reference to an abstract type //department = new Department(); // error: cannot create an instance of an abstract class department = new AccountingDepartment(); // ok to create and assign a non-abstract subclass department.printName(); department.printMeeting(); //department.generateReports(); // error: method doesn't exist on declared abstract type  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-23","content":"class variables (@@variableName) are like instance variables but belongs to the classglobal variables ($variableName) must be declared with a $ symbol, if declared within the class class MathClass $globalVariable = &quot;global variable&quot; @@count = 0 def initialize(arg1, arg2) # constructor @arg1 = arg1 # @ signify that it's an instance variable @arg2 = arg2 end def innerAdd(arg3) @@count += 1 return @arg1 + @arg2 + arg3 end end # Instantiation test = MathClass.new(2, 4) puts test.innerAdd(2) # 8 # Setters &amp; Getters # method 1 class Student def initialize puts &quot;New student&quot; end def set_name(new_name) @name = new_name end def get_name @name end end test = Student.new test.set_name(&quot;Foo&quot;) puts test.get_name # &quot;Foo&quot; # method 2 class Student2 attr_reader :name attr_writer :name end test2 = Student2.new test2.name = &quot;Foo2&quot; puts test2.name # &quot;Foo2&quot; # method 3 class Student3 attr_accessor :name end test3 = Student3.new test3.name = &quot;Foo3&quot; puts test3.name # &quot;Foo3&quot; # Module: similar to classes, but cannot be instantiated module MathClass def innerAdd(arg1, arg2) return arg1 + arg2 end end # method 1 class CalculatorClass1 include MathClass # use this to enable method override def innerAdd(arg1, arg2) return arg1 + arg1 end end calculate1 = CalculatorClass1.new calculate1.innerAdd(1, 3) # 2 # method 2 class CalculatorClass2 prepend MathClass # use this to disable method override def innerAdd(arg1, arg2) return arg1 + arg1 end end calculate2 = CalculatorClass2.new calculate2.innerAdd(1, 3) # 4 # Inheritance class CalculatorClass &lt; MathClass end calculate = CalculatorClass.new(2, 4) puts calculate.innerAdd(2) # 8 # override parent method class CalculatorClass &lt; MathClass def innerAdd(arg3) return (@arg1 + @arg2 + arg3) / 3 end end calculate = CalculatorClass.new(2, 4) puts calculate.innerAdd(2) # 2 # use super to access parent's attributes or methods of an overridden class method class CalculatorClass &lt; MathClass def innerAdd(arg3) print super print &quot; &quot; return (@arg1 + @arg2 + arg3) / 3 end end calculate = CalculatorClass.new(2, 4) puts calculate.innerAdd(2) # 8 2  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-24","content":"class if not constructor has been defined, a constructor with no args will be auto generatedif a constructor with args has been defined, a constructor with no args will not be auto generated public class Math { public int arg1; public int arg2; public int total; public static final String NAME = &quot;Math&quot;; // declaring a constant variable // constructor (must have the same name as class name, no return data type) public Math(int arg1, int arg2) { // this keyword is not a must, however, variable name must be different from the parameter this.arg1 = arg1; this.arg2 = arg2; this.total = OuterAdd(arg1, arg2); } public int InnerAdd(int arg3) { return this.arg1 + this.arg2 + arg3; } public static int OuterAdd(int number1, int number2) { return number1 + number2; } } class MainClass { public static void main(String[] args) { Math test = new Math(2, 4); // instantiation // non-static variables or methods requires instantiation System.out.println(test.total); // 6 System.out.println(test.InnerAdd(2)); // 8 // static variables or methods does not requires instantiation System.out.println(Math.OutterAdd(4, 5)); // 9 } }  private key public class Person { private int age = 0; // cannot be accessed other than within the class // age can only be modified with the setter method public void setAge(int age) { this.age = age; } // age can only be retrieve with the getter method public int getAge() { return this.age; } }  protected key // class with protected method package p1; // Class A public class A { protected void display() { System.out.println(&quot;test&quot;); } } Calling protected function without extending the parent class package p2; // import all classes in package p1 import p1.*; class B { public static void main(String args[]) { B obj = new B(); // not be able to access the function “display” since child class has not inherited its value from the main class obj.display(); // throw an exception } } throw an error Exception in thread &quot;main&quot; java.lang.RuntimeException: Uncompilable source code - Erroneous sym type: p2.B.display Accessing a protected class package p1; // Class A protected class A { void display() { System.out.println(&quot;test&quot;); } } package p2; // import all classes in package p1 import p1.*; // Class B is a subclass of A class B extends A { public static void main(String args[]) { B obj = new B(); obj.display(); // throw an exception } } throw an error Exception in thread &quot;main&quot; java.lang.RuntimeException: Uncompilable source code - Erroneous sym type: p2.B.display Accessing display function from the same package but different class public class C { public static void main(String args[]) { A obj = new A(); obj.display(); // test } } Accessing display function from a different package package p2; // import all classes in package p1 import p1.*; // Class B is a subclass of A class B extends A { public static void main(String args[]) { B obj = new B(); obj.display(); // test } } Accessing a protected class by overriding to sub-class within same package public class C extends A { // overridden function protected void display() { System.out.println(&quot;overridden&quot;); } public static void main(String args[]) { C obj1 = new C(); obj1.display(); // overridden } } Anonymous classes import java.util.Scanner; public class Calculator { public static void main(String[] args) { ClassName c = new ClassName(); c.calculate(); } // can be accessed from within the same class, subclasses of same packages, // different classes of same packages, subclasses of different packages protected void calculate() { InputHelper helper = new InputHelper(); String s1 = helper.getInput(&quot;Please do something&quot;); } // only Calculator class can use this class InputHelper { // can only be accessed from the same class private String getInput(String prompt) { System.out.println(prompt); Scanner sc = new Scanner(System.in); return sc.nextLine(); } } }  inheritance // enum public enum Names { JOHN, PETER; } // parent / base / superclass public class Person { private int age; private Names name; public Person(int age, Names name) { this.age = age; this.name = name; } public void setAge(int age) { this.age = age; } public int getAge() { return this.age; } public Names getName() { return this.name; } public void whoAmI() { System.out.println(&quot;I am a Person&quot;); } } // Inheritance: child / derived / subclass public class John extends Person { public John() { super(25, Names.JOHN); } // Polymorphism: overriding the parent's method @Override // use this even if it is not required for 2 benefits: take adv of compiler check, easier to read public void whoAmI() { System.out.println(&quot;I a John&quot;); } } public class Main { public static void main(String[] args) { Person p = new Person(0, Names.JOHN); p.whoAmI(); // &quot;I am a Person John j = new John(); j.setAge(25); System.out.println(j.getAge()); System.out.println(j.getName()); j.whoAmI(); // &quot;I am John&quot; } }  interface it is a contract that defines a set of methods with a particular signaturesany class that implement that interface must implement those methods // enum public enum Names { JOHN, PETER; } // interface: declaring of implementations are not required // declaring of implementations in Android might be required during instantiation public interface Human { public void setAge(int age); public int getAge(); public Names getName(); public void whoAmI(); } // class that implements an interface // if not all of the methods declared in the interface are implemented, an error will occur // additional methods not declared in the interface can be declared public class Person implements Human { private int age; private Names name; public Person(int age, Names name) { this.age = age; this.name = name; } @Override // not required but better to be explicit public void setAge(int age) { this.age = age; } @Override public int getAge() { return this.age; } @Override public Names getName() { return this.name1; } @Override public void whoAmI() { System.out.println(&quot;I am a Person&quot;); } }  abstract the abstract keyword is addedit can contain a mixture of fully implemented methods &amp; abstract methods abstract method is similar to a method in an interface no implementation &amp; only indicates method signatureany subclasses of an abstract method must implement that method cannot be instantiated directly, only their subclasses can be instantiated // enum public enum Names { JOHN, PETER; } // interface public interface Human { public void setAge(int age); public int getAge(); public Names getName(); public void whoAmI(); } // abstract parent / base / superclass public abstract class Person implements Human { private int age; private Names name; public Person(int age, Names name) { this.age = age; this.name = name; } @Override public void setAge(int age) { this.age = age; } @Override public int getAge() { return this.age; } @Override public Names getName() { return this.name1; } @Override public void whoAmI() { System.out.println(&quot;I am a Person&quot;); } // this means that every subclass of this class must declare its own origin public abstract String getOrigin(); } // child / derived / subclass public class John extends Person { public John() { super(25, Names.JOHN); } @Override public void whoAmI() { System.out.println(&quot;I a John&quot;); } @Override public String getOrigin() { // this must be declared here, else an error will occur return &quot;Japan&quot;; } } public class Main { public static void main(String[] args) { // Person p = new Person(0, Names.JOHN); // abstract classes cannot be instantiated and will cause an error John j = new John(); j.setAge(25); System.out.println(j.getAge()); System.out.println(j.getName()); j.whoAmI(); // &quot;I am John&quot; } }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-41","content":"Struct vs Class https://github.com/reshinto/Basic_technologies_revision/blob/master/c%23_summary.md#classes-vs-structs Stuct (structures) public struct Math { public int arg1; public int arg2; public int total; // constructor (must have the same name as class name, must have parameters) public Math(int arg1, int arg2) { // this keyword is not a must, however, variable name must be different from the parameter this.arg1 = arg1; this.arg2 = arg2; this.total = OuterAdd(arg1, arg2); } public int InnerAdd(int arg3) { return this.arg1 + this.arg2 + arg3; } public static int OuterAdd(int number1, int number2) { return number1 + number2; } } class MainClass { public static void Main() { Math test = new Math(2, 4); System.Console.WriteLine(test.total); // 6 System.Console.WriteLine(test.InnerAdd(2)); // 8 System.Console.WriteLine(Math.OutterAdd(4, 5)); // 9 } }  Class public class Math { public int arg1; public int arg2; public int total; // constructor (must have the same name as class name, no return data type) public Math(int arg1, int arg2) { // this keyword is not a must, however, variable name must be different from the parameter this.arg1 = arg1; this.arg2 = arg2; this.total = OuterAdd(arg1, arg2); } public int InnerAdd(int arg3) { return this.arg1 + this.arg2 + arg3; } public static int OuterAdd(int number1, int number2) { return number1 + number2; } } class MainClass { public static void Main() { Math test = new Math(2, 4); System.Console.WriteLine(test.total); // 6 System.Console.WriteLine(test.InnerAdd(2)); // 8 System.Console.WriteLine(Math.OutterAdd(4, 5)); // 9 } }  Inheritance public class Employee { // parent protected float raiseAmt = 1.04f; // use protected to allow modification from other classes protected string first; protected string last; public int pay; // only public allows display of value externally public Employee(string first, string last, int pay) { this.first = first; this.last = last; this.pay = pay; } public void applyRaise() { this.pay = System.Convert.ToInt32(this.pay * this.raiseAmt); } } public class Developer : Employee { // child private string progLang; public Developer(string first, string last, int pay, string progLang) : base(first, last, pay) { // base initiates the parent's constructor raiseAmt = 1.1f; // this will modifiy the base variable value in the parent class this.progLang = progLang; } } class MainClass { public static void Main(string[] args){ Developer developer = new Developer(&quot;abc&quot;, &quot;xyz&quot;, 5000, &quot;c#&quot;); System.Console.WriteLine(developer.pay); // 5000 developer.applyRaise(); System.Console.WriteLine(developer.pay); // 5500 // Upcasting: reduce the methods avaliable to only the parent class Empoyee employee = developer; // Downcasting: add methods avaliable to the child class Developer developer2 = (Developer) employee; // return an exception if cannot be converted // use &quot;as&quot; keyword if not sure about the runtime type of the object Developer developer3 = employee as Developer; // return a null if cannot be converted if (developer3 != null) { do_something; } // use &quot;is&quot; keyword to check if (employee is Developer) { Developer developer4 = (Developer) e; } } }  Composition public class Employee { // parent protected float raiseAmt; protected string first; protected string last; public int pay; public Employee(string first, string last, int pay, float raiseAmt = 1.04f) { this.first = first; this.last = last; this.pay = pay; this.raiseAmt = raiseAmt; } public void applyRaise() { this.pay = System.Convert.ToInt32(this.pay * this.raiseAmt); } } public class Developer { // child private string progLang; public readonly Employee _employee; public Developer(Employee employee, string progLang) { _employee = employee; this.progLang = progLang; } } class MainClass { public static void Main(string[] args) { Developer d = new Developer(new Employee(&quot;abc&quot;, &quot;xyz&quot;, 5000, 1.1f), &quot;c#&quot;); Console.WriteLine(d._employee.pay); // 5000 d._employee.applyRaise(); Console.WriteLine(d._employee.pay); // 5500 } }  Polymorphism public class Subject { public string subjName; public virtual void Study() { System.Console.WriteLine(&quot;Study all subjects&quot;); } } public class Math : Subject { public string mathName; public override void Study() { System.Console.WriteLine(&quot;Study Maths&quot;); } } class MainClass { public static void Main() { Subject s = new Subject(); s.Study(); // &quot;Study all subjects&quot; s.subjName; // accessible // polymorphism Subject sm = new Math(); // create a Subject object but override the Study method with the Math object sm.Study(); // &quot;Study Maths&quot; sm.subjName; // only subjName is accessible, mathName is not } }  Properties Properties is a kind of class member that is used for providing access to fields of a classbest practive to declare fields as private &amp; create public properties to provide access to thema property encapsulates a get and a set method // method 1 public class Person { private string _name; public void SetName(string name) { this._name = name; } public string GetName() { return _name; } } class MainClass { public static void Main() { Person p = new Person(); p.SetName(&quot;xyz&quot;); System.WriteLine(p.GetName()); // &quot;xyz&quot; } } // method 2: using setter and getter properties public class Person { private string _name; public string name { get { return _name; } set { _name = value; } // value is a keyword } } class MainClass { public static void Main() { Person p = new Person(); p.name = &quot;xyz&quot;; System.WriteLine(p.name); // &quot;xyz&quot; } } // method 3: using auto-implemented properties (does not work if logic is involved in get or set method, use method 2 instead) public class Person { public string name { get; set; } } class MainClass { public static void Main() { Person p = new Person(); p.name = &quot;xyz&quot;; System.WriteLine(p.name); // &quot;xyz&quot; } } // method 4: using auto-implemented properties with private set method public class Person { public string name { get; private set; } // if private keyword is used, need constructor to set public Person(string inputName) { // constructor name = inputName; } } class MainClass { public static void Main() { Person p = new Person(&quot;xyz&quot;); System.WriteLine(p.name); // &quot;xyz&quot; } }  Interfaces it is similar to a class but with abstract methodsuse of &quot;interface&quot; keyword is requireddoes not have implementations (similar to abstract methods)does not have access modifiers (eg: public, private, etc) in methodsinterface is for building loosely-coupled extensible and testable apps enable easy modifications with less or 0 impact on other components has polymorphism behavior public interface IFeatureName { // in .net all interfaces start with &quot;I&quot; convention int Method1 { get; set; } void Method2(); void Method3(int arg); } public class ProductName : IFeatureName { // similar to inheritance, but different because methods have to be declared public int Method1 { get; set; } public void Method2() { do_something; } public void Method3(int arg) { do_something } } class MainClass { public static void Main() { ProductName p = new ProductName(); if (p is IFeatureName) { // check if IFeatureName exists p.Method2(); } } } // Multiple Interfaces public interface IFeatureName1 { void MethodName1(); } public interface IFeatureName2 { void MethodName2(); } public class ProductName : IFeatureName1, IFeatureName2 { public void MethodName1() { do_something; } public void MethodName2() { do_something; } }  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-42","content":"// Math.h class Math { private: int num1 = 2; int num2; public: Math(); // constructor int sumOfValues(); // class method prototype }; // Math.cpp #include &lt;iostream&gt; #include &quot;Math.h&quot; Math::Math() // class constructor definition { num2 = 5; } int Math::sumOfValues() // class method definition { return num1 + num2; } int main() { Math math; std::cout &lt;&lt; math.sumOfValues(); }  back to top "},{"title":"Importing Libraries​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#importing-libraries","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-17","content":"# import module from libraries import module_name # must call module_name to use # Using alias import module_name as mn # must call mn to use # import class or function from a module from module_name import function_name from module_name import function_name1, function_name2 # multiple imports # Absoute imports within the same project (file extensions not required) from folder1 import module1 # example 1 from folder1.module2 import function1 # example 2 from folder2 import class1 # example 3 from folder2.subfolder1.module5 import function2 # example 4 # Relative imports (dot feature is similar to terminal) from .module1 import class1 # example 1 from ..folder2 import function1 # example 2 from . import class2 # example 3  "},{"title":"javascript ES5​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es5-8","content":"// Before a module can be imported, it has to be exported first var objectName.functionName = function(); module.exports = objectName; // can be an object of functions // alternative exports, import rules also change exports.moduleName = objectName; // preset a name to the module // importing a module // moduleName can be path too var mn = require(&quot;moduleName&quot;); // must call mn to use var {function1, function2} = require(&quot;moduleName&quot;); // importing multiple functions from a module // import for alternative export var mn = require(&quot;moduleName&quot;).moduleName;  "},{"title":"javascript ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6-9","content":"// Before a module can be imported, it has to be exported first export default objectName; // exporting a single or nested functions or class // {} must be used when importing // method 1 export {functionName}; // export only 1 class or function (can be used for importing multiple functions or classes // method 2, can be function, class, objects, etc. export const functionName = () =&gt; {do_something} // import class or function from module import &quot;moduleName&quot;; // import module import name from &quot;moduleName&quot;; // name can be anything if only have 1 export import * as name from &quot;moduleName&quot;; // import multiple exports as name import {function1} from &quot;moduleName&quot;; // import a function from a module of multiple exports import {function1 as f1} from &quot;moduleName&quot;; // import a function with alias import {function1, function2} from &quot;moduleName&quot;; // import multiple functions import name, {function1} from &quot;/modules/path/moduleName&quot;; // function1 can be used directly or via name.function1  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-24","content":"# import another ruby file load &quot;./anotherFile.rb&quot; # ./ not mandatory # import module files require_relative &quot;moduleFileName&quot; # extension not required  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-25","content":"// folder name that the current file is in, all other files that are in this folder can be imported without additional code package com.example.demoapi.student; // importing of custom nested class import com.example.demoapi.student.utilities.Helper; import java.time.LocalDate; import java.time.Period; // allows imports of all static members of the class import static java.time.LocalDate.*; import javax.persistence.Entity; import javax.persistence.Id; import javax.persistence.Table; import javax.persistence.Transient; // method 2 import javax.persistence.*; // allows imports of all classes @Entity @Table public class Student { @Id private Long id; @Transient private Integer age; // using import java.time.LocalDate; public Integer getAge1() { return Period.between(dob, LocalDate.now()).getYears(); } // using import static java.time.LocalDate.*; public Integer getAge() { return Period.between(dob, now()).getYears(); } }  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-43","content":"back to top "},{"title":"Type Conversions​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#type-conversions","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-18","content":"# Convert to Integer, floats will round down int(type_to_convert) # Convert to floats float(type_to_convert) # Convert to strings str(type_to_convert) # Convert to arrays list(type_to_convert) # cannot be a number # Convert to tuples tuple(type_to_convert) # cannot be a number # Convert to sets set(type_to_convert) # cannot be a number  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-14","content":"// number to string let num = 123; let str = String(num); // &quot;123&quot; // number to bigInt let bigNum = BigInt(num); // &quot;123n&quot; // bigInt to number let bigInt = 1234n; // method 1 num = parseInt(bigInt); // 1234 // method 2 num = Number(bigInt); // 1234 // string to integer (remove all non numbers automatically) str = &quot;12 kg&quot;; num = parseInt(str); // 12 // string to float (remove all non number automatically) str = &quot;12.5 kg&quot;; num = parseFloat(str) // 12.5 //string to integer or float (return NaN if non number in string) str = &quot;12&quot; num = Number(str) // 12 str = 12.5&quot;; num = Number(str) // 12.5 str = &quot;12.5 kg&quot;; num = Number(str); // NaN  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-25","content":"# String to symbol # method 1 &quot;string&quot;.to_sym # :string # method 2 &quot;string&quot;.intern # :string # Object to string :string.to_s # &quot;string&quot; 123.to_s # &quot;123&quot; # String to integer &quot;123&quot;.to_i # 123 # array of strings to array of integers strings = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;] nums = strings.map(&amp;:to_i) # [1, 2, 3] # array of integers to array of strings nums = [1, 2, 3] strings = nums.map(&amp;:to_s)  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-26","content":"// implicit type conversion (small value to big only) byte b = 1; int i = b; float f = i; // casting // explicit type conversion (can convert big value to small, however, data loss will occur) float pi = 3.14f; int intPi = (int) pi; // 3 int num = 256; byte b = (byte) num; // 0 (surplus value will assigned if converting big data type value to smaller data type value) int num2 = 255; byte b2 = (byte) num2; // 255 // convert number to strings (user helper class) int i = 1234; String str = Integer.toString(i); // &quot;1234&quot; // convert string to double String s = &quot;423&quot;; double d1 = Double.parseDouble(s); System.out.println(d1); // 423.0  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-44","content":"// implicit type conversion (small value to big only) byte b = 1; int i = b; float f = i; // casting // explicit type conversion (can convert big value to small, however, data loss will occur) float pi = 3.14f; int intPi = (int) pi; // 3 int num = 256; byte b = (byte) num; // 0 (surplus value will assigned if converting big data type value to smaller data type value) int num2 = 255; byte b2 = (byte) num2; // 255 // convert non-compatible types // string to integer string s = &quot;1&quot;; // method 1 int i = Systen.Convert.ToInt32(s); // returns 0 if string is null // method 2 int j = int.Parse(s); // returns an exception if string is null /* other methods ToByte() ToInt16() // short ToInt32() // integer ToInt64() // long */ // convert number to strings // convert to normal string int i = 1234; string str = i.ToString(); // &quot;1234&quot; // convert to currency with decimal places string floatCurrency = i.ToString(&quot;C&quot;); // &quot;$1,234.00&quot; // convert to currency without decimal places string currency = i.ToString(&quot;C0&quot;); // &quot;$1,234&quot; /* Format strings format specific | description | example c or C | currency | 123456 (C) -&gt; $123,456 d or D | decimal | 1234 (D6) -&gt; 001234 e or E | exponential | 1052.0329112756 (E) -&gt; 1.052033E+003 f or F | fixed point | 1234.567 (F1) -&gt; 1234.5 x or X | Hexadecimal | 255 (X) -&gt; FF */  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-45","content":"back to top "},{"title":"Find Data Type​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#find-data-type","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-19","content":"# Get data type num = 123 type(num) # int # Get boolean value isinstance(num, int) # True isinstance(num, str) # False # check if all characters in string are uppercase &quot;abc&quot;.isupper() # False &quot;Abc&quot;.isupper() # False &quot;ABC&quot;.isupper() # True &quot;AB1&quot;.isupper() # True # check if all characters in string are lowercase &quot;abC&quot;.islower() # False &quot;abc&quot;.islower() # True &quot;ab1&quot;.islower() # True # check if all characters in string are digits &quot;ab1&quot;.isdigit() # False &quot;123&quot;.isdigit() # True # check if 2 objects are exactly the same even if they have the same value # primitive values have the exact same objects x = 1 y = 1 id(x) # 4357474608 id(y) # 4357474608 # reference type objects are different even if they have the same value x = [1] y = [1] id(x) # 4360090688 id(y) # 4359972032  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-15","content":"// Get data type: &quot;number&quot;, &quot;string&quot;, &quot;boolean&quot;, &quot;object&quot;, &quot;undefined&quot;, &quot;function&quot; // null and arrays are classified as object // classes and methods are classfied as function let num = 123; typeof num; // &quot;number&quot; let array = [1, 2, 3]; typeof array; // &quot;object&quot; let variable1 = 10 / undefined; // NaN Number.isNaN(variable1); // true  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-26","content":"# Get data type, function won't provide a specify class type puts &quot;test&quot;.class # String puts :stringSym.class # Symbol puts 123.class # Fixnum puts 1.23.class # Float puts true.class # TrueClass puts false.class # FalseClass puts nil.class # NilClass puts [1, 2].class # Array hashName = Hash.new() puts hashName.class # Hash class Myclass def myFunc do_something end end puts Myclass.class # Class # Get id of object puts &quot;string&quot;.object_id # 2343215, some random number where object is stored in memory # check if object is the correct type, obj.is_a? data_type [1, 2].is_a? Array # true  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-27","content":""},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-46","content":"typeof: takes a type name (which you specify at compile time)GetType: gets the runtime type of an instanceis: returns true if an instance is in the inheritance tree public class Animal { } public class Dog : Animal { } public class MainClass { public static void Main() { Dog spot = new Dog(); PrintTypes(spot); int num = 123; System.Console.WriteLine(num.GetType()); // System.Int32 System.Console.WriteLine(num.GetTypeCode()); // Int32 System.Console.WriteLine(num.GetType() == typeof(int)); // true (System.Int32 == System.Int32) } public static void PrintTypes(Animal a) { System.Console.WriteLine(a.GetType() + &quot; &quot; + typeof(Animal)); // Dog Animal System.System.Console.WriteLine(a.GetType() == typeof(Animal)); // false System.Console.WriteLine(a is Animal); // true (Dog is Animal) System.Console.WriteLine(a.GetType() + &quot; &quot; + typeof(Dog)); // Dog Dog System.Console.WriteLine(a.GetType() == typeof(Dog)); // true System.Console.WriteLine(a is Dog); // true (Dog is Dog) } }  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-47","content":"back to top "},{"title":"String Concatenation​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#string-concatenation","content":""},{"title":"python 2​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2-7","content":"string_name = &quot;string1&quot; + &quot;string2&quot; # &quot;string1string2&quot; # String formatting # % string operator: old style, soon to be deprecated string_name = &quot;%s %s&quot; % (&quot;string1&quot;, &quot;string2&quot;) # &quot;string1 string2&quot; # {} operator: python 2.6 and above # method 1 string_name = &quot;{} {}&quot;.format(&quot;string1&quot;, &quot;string2&quot;) # &quot;string1 string2&quot; # method 2 string_name = &quot;{0} {1}&quot;.format(&quot;string1&quot;, &quot;string2&quot;) # &quot;string1 string2&quot;  "},{"title":"python 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-3-7","content":"# f string: python 3.6 and above string1 = &quot;string1&quot; string2 = &quot;string2&quot; string_name = f&quot;{string1} {string2}&quot; # &quot;string1 string2&quot;  string formatting for numbers a = 8 # set number of digits # add spaces to the right for missing digits print(f&quot;{a:&lt;2}&quot;) # &quot;8 &quot; #add 0s (can only be number 0) to the right for missing digits print(f&quot;{a:&lt;02}&quot;) # &quot;80&quot; # add spaces to the left for missing digits print(f&quot;{a:&gt;2}&quot;) # &quot; 8&quot; # add 0s (can only be number 0) to the right for missing digits print(f&quot;{a:&gt;02}&quot;) # &quot;08&quot;  "},{"title":"javascript ES5​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es5-9","content":"// javascript allows data type mashups, numbers will be converted to strings when concatenated with a string. let stringName = &quot;string1&quot; + &quot;string2&quot; + 123; // &quot;string1string2123&quot;  "},{"title":"javascript ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6-10","content":"let string1 = &quot;string 1 value&quot;; let string2 = &quot;string 2 value&quot;; let stringName = `${string1} ${string2} 123`; // &quot;string 1 value string 2 value 123&quot;  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-27","content":"string1 = &quot;string1&quot; string2 = &quot;string2&quot; string_name = &quot;#{string1} #{string2}&quot; # &quot;string1 string2&quot; string_name &lt;&lt; &quot;string 3&quot; # &quot;string1 string2string3&quot; # to_s: numbers need to be converted to a string to be concatenated puts &quot;one&quot; + 1.to_s # &quot;one1&quot; # %s for strings, %d for integers, %f for floats, %.3f for float with 3 decimals printf &quot;%s %s&quot;, &quot;string1&quot;, &quot;string2&quot; # &quot;string1 string2&quot;  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-28","content":"String string1 = &quot;string&quot;; int num1 = 1; // method 1 String stringName1 = string1 + num1; // &quot;string1&quot; // method 2 StringBuilder sb1 = new StringBuilder(string1); sb1.append(num1); // &quot;string1&quot; // or StringBuilder sb2 = new StringBuilder(); sb2.append(string1).append(num1); // &quot;string1&quot; sb2.delete(1, sb2.length()); // &quot;s&quot; // method 3 StringBuffer sBuffer1 = new StringBuffer(string1); sBuffer1.append(num1); sBuffer1.toString(); // &quot;string1&quot; // or StringBuffer sBuffer2 = new StringBuffer(); sBuffer2.append(string1).append(num1); sBuffer2.toString(); // &quot;string1&quot; // method 4 (concat value must be string type) String newString1 = string1.concat(Integer.toString(num1)); // &quot;string1&quot; // method 5 (%s = string, %d = &quot;byte, short, int, long, bigint&quot;, %c = char) String newString2 = String.format(&quot;%s%d&quot;, string1, num1); // &quot;string1&quot;  String format reference "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-48","content":"string string1 = &quot;string 1 value&quot;; string string2 = &quot;string 2 value&quot;; // method 1 string stringName1 = string1 + string2; // &quot;string 1 value string 2 value&quot; // method 2 string stringName2 = String.Format(&quot;{0} {1}&quot;, string1, string2); // &quot;string 1 value string 2 value&quot; // method 3 string stringName3 = $&quot;{string1} {string2}&quot;; // &quot;string 1 value string 2 value&quot;  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-49","content":"back to top "},{"title":"JSON​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#json","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-20","content":"import json # must import to use # python objects that can be converted: dict, list, tuple, string, int, float, True, False, None # Convert JSON to python json.loads(json_object) # Convert python to JSON json.dumps(python_object)  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-16","content":"// JSON (JavaScript Object Notation): a lightweight, text-based data format that's based on JavaScript. // convert js to JSON let objName = {title: 'Black Panther'}; objName = JSON.stringify(objName); // convert JSON to js let objName = {&quot;title&quot;: &quot;Black Panther&quot;}; objName = JSON.parse(objName);  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-28","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-29","content":""},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-50","content":"back to top "},{"title":"Program Entry Point​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#program-entry-point","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-21","content":"if __name__ === &quot;__main__&quot;: # do something  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-17","content":"// only works in node js if (require.main === module) { // do something }  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-29","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-30","content":""},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-51","content":"class MainClass { public static void Main(string[] args) { // do something } }  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-52","content":"back to top "},{"title":"Swapping values​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#swapping-values","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-22","content":"a, b = 1, 2 # method 1 temp = a a = b b = temp # method 2 a, b = b, a  "},{"title":"javascript ES5​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es5-10","content":"let a = 1; let b = 2; const temp = a; a = b; b = temp;  "},{"title":"javascript ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6-11","content":"[a, b] = [b, a];  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-30","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-31","content":""},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-53","content":"back to top "},{"title":"Error Handling​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#error-handling","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-23","content":"try: lets you test a block of code for errorsexcept: except block lets you handle the error covers all error types except: define exception type (can write multiple except statements) except NameError: save error to variable e except ValueError as e: list of important error types AssertionError, AttributeError, EOFError, FloatingPointError, GeneratorExit, ImportError, IndexError, KeyErrorKeyboardInterrupt, MemoryError, NameError, NotImplementedError, OSError, OverflowError, ReferenceError, RuntimeErrorStopIteration, SyntaxError, IndentationError, TabError, SystemError, TypeError, UnboundLocalError, UnicodeErrorUnicodeEncodeError, UnicodeDecodeError, UnicodeTranslateError, ValueError, ZeroDivisionError else: code to be executed if no errors were raisedfinally: if specified, will be executed regardless if the try block raises an error or not useful to close objects and clean up resources # similar to if else try: # must start with try do_something except: # must have to handle errors do_something_if_error_occurs else: # not required do_something_if_no_error finally: # not required do_something_when_try_&amp;_except_or_else_is_completed  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-18","content":"try: lets you test a block of code for errorscatch: lets you handle the errorfinally: lets you execute code, after try and catch, regardless of the result try { doSomething; } catch(error) { doSomethingIfErrorOccurs; } finally { doSomethingWhenTryAndCatchIsCompleted; }  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-31","content":"begin: something which might raise an exceptionrescue: code that deals with some exceptionelse: code that runs only if no exception was raisedensure: ensure that this code always runs, no matter what begin doSomething rescue SomeExceptionClass =&gt; storeErrorToThisVariable doSomethingIfErrorOccurs else doSomethingIfNoError ensure doSomethingWhenEverythingIsCompleted end  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-32","content":"try: lets you test a block of code for errorscatch: lets you handle the error use &quot;Exception&quot; keyword to catch all exception typesuse specific exception types to catch that specific exception exceptions are from java.lang library, so no imports are required catch block can be chained (specific exception with highest priority should come first) finally: lets you execute code, after try and catch, regardless of the result very important for closing a file when an opened file in the try block triggered an exception try { doSomething; } catch(SomeSpecificException e) { doSomethingIfErrorOccursRelatedToSomESpecificException; } catch(Exception e) { // e is an arg (mandatory), e can be used to print general or more detailed error doSomethingIfErrorOccursRelatedToAllExceptions; } finally { doSomethingWhenTryAndCatchIsCompleted; }  try with resources statement only for java 8 or later versions, can't be used on androidit is a try statement that declares 1 or more ressourcesa resource is an object that must be closed after the program is finished with it // type 1 import java.io.FileReader; import java.io.BufferedReader; import java.io.FileWriter; public class Main { // try-with-resources try (BufferedReader bReader = new BufferedReader(new FileReader(sourceFile))) { return bReader.readLine(); } catch (Exception e) { e.printStackTrace(); } } } // type 2 import java.io.FileReader; import java.io.BufferedReader; import java.io.FileWriter; public class Main { public static void main(String[] args) { String sourceFile = &quot;textfile&quot;; // textfile path String targetFile = &quot;newtextfile&quot;; // newtextfile path // try-with-resources try ( FileReader fReader = new FileReader(sourceFile); // read file BufferedReader bReader = new BufferedReader(fReader); // read lines in file FileWriter writer = new FileWriter(targetFile); // write file ) { while (true) { String line = bReader.readLine(); if (line == null) { break; } else { writer.write(line + &quot;\\n&quot;); } } System.out.println(&quot;File copied&quot;); } catch (Exception e) { e.printStackTrace(); } } }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-54","content":"try: lets you test a block of code for errorscatch: lets you handle the error use &quot;Exception&quot; keyword to catch all exception typesuse specific exception types to catch that specific exceptioncatch block can be chained (specific exception with highest priority should come first) finally: lets you execute code, after try and catch, regardless of the result very important for closing a file when an opened file in the try block triggered an exception try { doSomething; } catch(SomeSpecificException e) { doSomethingIfErrorOccursRelatedToSomESpecificException; } catch(Exception e) { // e is an arg (is not mandatory), e can be used to print general or more detailed error doSomethingIfErrorOccursRelatedToAllExceptions; } finally { doSomethingWhenTryAndCatchIsCompleted; }  Create custom exception public class NewExceptionName : System.Exception { public NewExceptionName(string message, System.Exception innerException) : base(message, innerException) {} }  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-55","content":"back to top "},{"title":"Custom Error​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#custom-error","content":""},{"title":"python 2 & 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-2--3-24","content":"# raise generic exception raise Exception(&quot;custom message&quot;) # raise specific exception raise ValueError(&quot;custom message&quot;)  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-19","content":"throw &quot;custom message&quot;; // throw a text throw 123; // throw a number  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-32","content":"# method 1 raise errorType, &quot;custom error message&quot; # method 2 raise errorType.new(&quot;custom error message&quot;)  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-33","content":"must use either try catch statements or be inside a conditional statement to work // if using try catch, both throw and catch must handle the same Exception type try { // raise specific exception throw new SpecificExceptionName(&quot;custom message&quot;); // raise generic exception throw new Exception(&quot;custom message&quot;); } catch (SpecificExceptionName e) { } catch (Exception e) { } if (true) { // raise generic exception throw new Exception(&quot;custom message&quot;); }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-56","content":"// raise generic exception throw new System.Exception(&quot;custom message&quot;); // raise specific exception throw new SpecificExceptionName(&quot;custom message&quot;);  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-57","content":"back to top "},{"title":"Asynchronous​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#asynchronous","content":"Handling asynchronous code (making it synchronous) "},{"title":"python​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-1","content":""},{"title":"javascript ES5​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es5-11","content":"var posts = [{title: &quot;Post 1&quot;, body: &quot;body of post 1&quot;}, {title: &quot;Post 2&quot;, body: &quot;body of post 2&quot;}]; // callback is required if need getPost to display data after createPost is called // reason is because createPost takes longer time to complete compared to getPost function createPost(post, callback) { setTimeout(() =&gt; { posts.push(post); callback(); }, 2000); } // method 1 // callback function function getPosts() { setTimeout(() =&gt; { var output = &quot;&quot;; posts.forEach((post, index) =&gt; { output += post.title; }); console.log(output); }, 1000); } createPost({title: &quot;Post 3&quot;, body: &quot;body of post 3&quot;}, getPosts); // method 2: // Using anonymous callback function can lead to callback hell if over used createPost({title: &quot;Post 3&quot;, body: &quot;body of post 3&quot;}, function() { setTimeout(() =&gt; { var output = &quot;&quot;; posts.forEach((post, index) =&gt; { output += post.title; }); console.log(output); }, 1000); });  "},{"title":"javascript ES6​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es6-12","content":"// Change createPost to return a Promise function createPost(post) { return new Promise((resolve, reject) =&gt; { setTimeout(() =&gt; { if (post) { posts.push(post) resolve(); } else { reject(&quot;error&quot;) } }, 2000); }); } // method 3 // use .then() instead of callback createPost({title: &quot;Post 3&quot;, body: &quot;body of post 3&quot;}) .then(getPosts) // can chain multiple promises by adding .then(do_something) .catch(error =&gt; console.log(error)); // method 4 // use Promise.all Promise.all([ // can chain multiple promises createPost({title: &quot;Post 3&quot;, body: &quot;body of post 3&quot;}), ]) .then(values =&gt; { getPosts(); console.log(values) // output array of results e.g [promise1_output, promise2_output, ...] });  "},{"title":"javascript ES8​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-es8","content":"// method 5 // use async / await when calling functions async function init() { await createPost({title: &quot;Post 3&quot;, body: &quot;body of post 3&quot;}); getPosts(); } init();  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-33","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-34","content":""},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-58","content":"class MainClass { public static void Main(string[] args) { System.Console.WriteLine(&quot;Starting&quot;); Worker worker = new Worker(); worker.DoWork(); // since this is any async function, add this to stack then move on while (!worker.IsComplete) { System.Threading.Thread.Sleep(100); System.Console.Write(&quot;.&quot;); } System.Console.WriteLine(&quot;Done&quot;); } public static System.Threading.Tasks.Task DelayOperation() { return System.Threading.Tasks.Task.Factory.StartNew(() =&gt; { System.Threading.Thread.Sleep(2000); }); } } public class Worker { public bool IsComplete { get; private set; } public async void DoWork() { // add async to make function an async this.IsComplete = false; System.Console.WriteLine(&quot;Doing work&quot;); await LongOperation(); // wait for the function to finish before proceeding IsComplete = true; System.Console.WriteLine(&quot;Work completed&quot;); } private System.Threading.Tasks.Task LongOperation() { return System.Threading.Tasks.Task.Factory.StartNew(() =&gt; { System.Console.WriteLine(&quot;Working!&quot;); System.Threading.Thread.Sleep(2000); }); } }  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-59","content":"back to top "},{"title":"Math​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#math","content":""},{"title":"python 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-3-8","content":"import math print(&quot;abs(-1) &quot;, abs(-1)) # abs(-1) 1 print(&quot;max(5, 4) &quot;, max(5, 4)) # max(5, 4) 5 print(&quot;min(5, 4) &quot;, min(5, 4)) # min(5, 4) 4 print(&quot;pow(2, 2) &quot;, pow(2, 2)) # pow(2, 2) 4 print(&quot;ceil(4.5) &quot;, math.ceil(4.5)) # ceil(4.5) 5 print(&quot;floor(4.5) &quot;, math.floor(4.5)) # floor(4.5) 4 print(&quot;round(4.5) &quot;, round(4.5)) # round(4.5) 4 print(&quot;exp(1) &quot;, math.exp(1)) # e**x # exp(1) 2.718281828459045 print(&quot;log(e) &quot;, math.log(math.exp(1))) # log(e) 1.0 print(&quot;log(100) &quot;, math.log(100, 10)) # Base 10 Log # log(100) 2.0 print(&quot;sqrt(100) &quot;, math.sqrt(100)) # sqrt(100) 10.0 print(&quot;sin(0) &quot;, math.sin(0)) # sin(0) 0.0 print(&quot;cos(0) &quot;, math.cos(0)) # cos(0) 1.0 print(&quot;tan(0) &quot;, math.tan(0)) # tan(0) 0.0 print(&quot;asin(0) &quot;, math.asin(0)) # asin(0) 0.0 print(&quot;acos(0) &quot;, math.acos(0)) # acos(0) 1.5707963267948966 print(&quot;atan(0) &quot;, math.atan(0)) # atan(0) 0.0 print(&quot;sinh(0) &quot;, math.sinh(0)) # sinh(0) 0.0 print(&quot;cosh(0) &quot;, math.cosh(0)) # cosh(0) 1.0 print(&quot;tanh(0) &quot;, math.tanh(0)) # tanh(0) 0.0 print(&quot;asinh(0) &quot;, math.asinh(0)) # asinh(0) 0.0 print(&quot;acosh(pi) &quot;, math.acosh(math.pi)) # acosh(pi) 1.811526272460853 print(&quot;atanh(0) &quot;, math.atanh(0)) # atanh(0) 0.0 print(&quot;hypot(0) &quot;, math.hypot(10, 10)) # sqrt(x*x + y*y) # hypot(0) 14.142135623730951 print(&quot;radians(0) &quot;, math.radians(0)) # radians(0) 0.0 print(&quot;degrees(pi) &quot;, math.degrees(math.pi)) # degrees(pi) 180.0 # infinity value math.inf import random # random integer random.randint(1, 3) # any number from 1 to 3  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-20","content":"Math.abs(-1); // 1 Math.pow(-4, 2) // 16, same as (-4) ** 2 // random integer from 0 to 9 Math.floor(Math.random() * 10); // similar to ~~(Math.random() * 10); // random integer from 0 to 10 Math.floor(Math.random() * 11); // random integer from 0 to 10 Math.floor(Math.random() * 11); // random integer from 1 to 10 Math.floor(Math.random() * 10) + 1;  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-34","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-35","content":"import java.util.Random; double number1 = 10.5; double number2 = 15; System.out.println(&quot;Math.abs(number1) &quot; + (Math.abs(number1))); // Math.abs(number1) 10.5 System.out.println(&quot;Math.ceil(number1) &quot; + (Math.ceil(number1))); // Math.ceil(number1) 11 System.out.println(&quot;Math.floor(number1) &quot; + (Math.floor(number1))); // Math.floor(number1) 10 System.out.println(&quot;Math.max(number1, number2) &quot; + (Math.max(number1, number2))); // Math.max(number1, number2) 15 System.out.println(&quot;Math.min(number1, number2) &quot; + (Math.min(number1, number2))); // Math.min(number1, number2) 10.5 System.out.println(&quot;Math.pow(number1, 2) &quot; + (Math.pow(number1, 2))); // Math.pow(number1, 2) 110.25 System.out.println(&quot;Math.round(number1) &quot; + (Math.round(number1))); // Math.round(number1) 10 System.out.println(&quot;Math.sqrt(number1) &quot; + (Math.sqrt(number1))); // Math.sqrt(number1) 3.24037034920393 System.out.println(&quot;Random Number Between 0 and 10 = &quot; + (int)(Math.random() * 11 + 1 + 0)); // Math.random() * (max - min + 1) + min2 = change min2 to 1 to become between 1 and 10 Random rand = new Random(); System.out.println(&quot;Random Number Between 0 and 10 &quot; + (rand.nextInt(11))); System.out.println(&quot;Random Number Between 1 and 10 &quot; + (rand.nextInt(10 - 1 + 1) + 1)); // rand.nextInt((max - min) + 1) + min;  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-60","content":"double number1 = 10.5; double number2 = 15; System.Console.WriteLine(&quot;Math.Abs(number1) &quot; + (Math.Abs(number1))); // Math.Abs(number1) 10.5 System.Console.WriteLine(&quot;Math.Ceiling(number1) &quot; + (Math.Ceiling(number1))); // Math.Ceiling(number1) 11 System.Console.WriteLine(&quot;Math.Floor(number1) &quot; + (Math.Floor(number1))); // Math.Floor(number1) 10 System.Console.WriteLine(&quot;Math.Max(number1, number2) &quot; + (Math.Max(number1, number2))); // Math.Max(number1, number2) 15 System.Console.WriteLine(&quot;Math.Min(number1, number2) &quot; + (Math.Min(number1, number2))); // Math.Min(number1, number2) 10.5 System.Console.WriteLine(&quot;Math.Pow(number1, 2) &quot; + (Math.Pow(number1, 2))); // Math.Pow(number1, 2) 110.25 System.Console.WriteLine(&quot;Math.Round(number1) &quot; + (Math.Round(number1))); // Math.Round(number1) 10 System.Console.WriteLine(&quot;Math.Sqrt(number1) &quot; + (Math.Sqrt(number1))); // Math.Sqrt(number1) 3.24037034920393 Random rand = new Random(); System.Console.WriteLine(&quot;Random Number Between 1 and 10 &quot; + (rand.Next(1,11)));  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-61","content":"// Seed the random number generator with the time method, then convert value to integer srand((int)time(0)); // Get the random number from the seed &amp; save it to a variable int randomNumber = rand() % 100; // number range from 0 to 99  back to top "},{"title":"Date and Time​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#date-and-time","content":""},{"title":"python3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python3","content":"from datetime import date, datetime, timedelta import calendar # get today's date from the today method from the date class today = date.today() print(&quot;Today's date is &quot;, today) # Today's date is 2021-07-16 # print out the date's individual components print(&quot;Date components: &quot;, today.day, today.month, today.year) # Date components: 16 7 2021 # retrieve today's weekday (0=Monday, 6=Sunday) print(&quot;Today's weekday # is: &quot;, today.weekday()) # Today's weekday # is: 4 # get today's date from the datetime class today = datetime.now() print(&quot;The current date and time is &quot;, today) # The current date and time is 2021-07-16 18:33:33.510322 # get the current time t = datetime.time(datetime.now()) print(t) # 18:34:40.676073 # Times and dates can be formatted using a set of predefined string control codes now = datetime.now() # Date formatting # %y/%Y - year, %a/%A - weekday, %b/%B - month, %d - day of month print(now.strftime(&quot;%a/%A, %d %D %b/%B, %y/%Y&quot;)) # Fri/Friday, 16 07/16/21 Jul/July, 21/2021 # %c - locale's date and time, %x - locale's date, %X - locale's time print(now.strftime(&quot;Locale date and time: %c&quot;)) # Locale date and time: Fri Jul 16 18:47:27 2021 print(now.strftime(&quot;Locale date: %x&quot;)) # Locale date: 07/16/21 print(now.strftime(&quot;Locale time: %X&quot;)) # Locale time: 18:48:32 # Time formatting # %I/%H - 12/24 hour, %M - minute, %S - second, %p - locale's AM/PM print(now.strftime(&quot;Current time: %I:%M:%S %p&quot;)) # Current time: 06:58:10 PM print(now.strftime(&quot;24-hour time: %H:%M&quot;)) # 24-hour time: 18:58 # construct a basic timedelta print(timedelta(days=365, hours=5, minutes=1)) # 365 days, 5:01:00 # today's date now = datetime.now() print(&quot;today is: &quot;, str(now)) # today is: 2021-07-16 19:05:19.744915 # today's date 1 year from now print(&quot;one year from now it will be: &quot;, str(now + timedelta(days=365))) # one year from now it will be: 2022-07-16 19:06:45.299792 # create a timedelta that uses more than one argument print(&quot;In 2 days and 3 weeks, it will be &quot;, str(now + timedelta(days=2, weeks=3))) # In 2 days and 3 weeks, it will be 2021-08-08 19:40:39.554060 # calculate the date 1 week ago, formatted as a string t = datetime.now() - timedelta(weeks=1) s = t.strftime(&quot;%A %B %d, %Y&quot;) print(&quot;One week ago it was: &quot;, s) # One week ago it was: Friday July 09, 2021 # How many days until April Fools' Day today = date.today() # 2021-07-16 afd = date(today.year, 4, 1) # 2021-04-01 print((today - afd).days) # 106 afd = afd.replace(year=today.year + 1) # 2022-04-01 # calculate the amount of time until April Fool's day time_to_afd = afd - today # 259 # create a text calendar # the day (SUNDAY) states the 1st day of the week in the calendar c = calendar.TextCalendar(calendar.SUNDAY) st = c.formatmonth(2017, 1, 0, 0) print(st) ''' January 2017 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ''' # create an HTML formatted calendar hc = calendar.HTMLCalendar(calendar.SUNDAY) st = hc.formatmonth(2017, 1) print(st) # bunch of html tags # loop over the days of a month # 0s mean that the day of the week is in an overlapping month for i in c.itermonthdays(2017, 8): print(i) # Calendar module provides useful utilities for the given locale # such as the names of days and months in both full and abbreviated forms for month_name in calendar.month_name: print(month_name) for day_name in calendar.day_name: print(day_name) # calculate all the first Fridays of every month for m in range(1, 13): cal = calendar.monthcalendar(2018, m) weekone = cal[0] weektwo = cal[1] meetday = weekone[calendar.FRIDAY] if weekone[calendar.FRIDAY] != 0 else weektwo[calendar.FRIDAY] print(&quot;%10s %2d&quot; % (calendar.month_name[m], meetday))  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-21","content":""},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-35","content":"# get current date and time Time.now  "},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-36","content":"must import import java.util.Date; import java.util.GregorianCalendar; import java.text.DateFormat; import java.util.Locale; import java.time.LocalDateTime; // java 8 import java.time.LocalDate; import java.time.format.DateTimeFormatter;  Date d = new Date(); // Fri Jul 09 00:46:09 SGT 2021 // January = 0, Feburary = 1, ... GregorianCalendar gc = new GregorianCalendar(2009, 1, 28); gc.add(GregorianCalendar.DATE, 1); // add a day Date d2 = gc.getTime(); // Sun Mar 01 00:00:00 SGT 2009 // format date // method 1, with no specific style and locale DateFormat df = DateFormat.getDateInstance(); System.out.println(df.format(d2)); // Mar 1, 2009 // method 2, with style and no locale DateFormat df2 = DateFormat.getDateInstance(DateFormat.FULL); System.out.println(df2.format(d2)); // Sunday, March 1, 2009 // method 3, with style and locale Locale locale = new Locale(&quot;en_SG&quot;, &quot;SGP&quot;); // set as Singapore DateFormat df3 = DateFormat.getDateInstance(DateFormat.FULL, locale); System.out.println(df3.format(d2)); // 2009 Mar 1, Sun LocalDateTime ldt = LocalDateTime.now(); // 2021-07-09T01:03:50.874932 // January = 1, Feburary = 2, ... LocalDate ld = LocalDate.of(2009, 1, 28); // 2009-01-28 DateTimeFormatter dtf = DateTimeFormatter.ISO_DATE; System.out.println(dtf.format(ld)); // 2009-01-28 // format with a specific pattern DateTimeFormatter dtf2 = DateTimeFormatter.ofPattern(&quot;M/d/yyyy&quot;); System.out.println(dtf2.format(ld)); // 1/28/2009  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-62","content":"// Set date (time set to default at 12:00:00 AM) System.DateTime newDate = new System.DateTime(2015, 1, 1); // Get current date (time set to default at 12:00:00 AM) System.DateTime todayDate = System.DateTime.Today; // 1/14/2020 12:00:00 AM // Get current date and time System.DateTime now = System.DateTime.Now; // 1/14/2020 10:19:54 AM // Add or reduce days now.AddDays(1); // add 1 day now.AddDays(-10; // reduce 1 day // Display formats System.Console.WriteLine(now); // 1/14/2020 10:23:09 AM System.Console.WriteLine(now.ToLongDateString()); // Tuesday, January 14, 2020 System.Console.WriteLine(now.ToShortDateString()); // 1/14/2020 System.Console.WriteLine(now.ToLongTimeString()); // 10:23:09 AM System.Console.WriteLine(now.ToShortTimeString()); // 10:23 AM System.Console.WriteLine(now.ToString()); // 1/14/2020 10:23:09 AM System.Console.WriteLine(now.ToString(&quot;yyyy-MM-dd&quot;)); // 2020-01-14 System.Console.WriteLine(now.ToString(&quot;yyyy-MM-dd HH:mm&quot;)); // 2020-01-14 10:26  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-63","content":"back to top "},{"title":"File System​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#file-system","content":""},{"title":"python​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-4","content":"Modifying files # Open a file for writing and create file if it doesn't exist # file will be rewritten if contents already exists f = open(&quot;textfile&quot;, &quot;w+&quot;) for i in range(10): # write some lines of data to the file f.write(f&quot;this is line {str(i)}\\r\\n&quot;) f.close() # close file when done # Open a file and append text to the end f = open(&quot;textfile&quot;, &quot;a&quot;) for i in range(10): f.write(f&quot;this is line {str(i)}\\r\\n&quot;) f.close() # Open and read file f = open(&quot;textfile&quot;, &quot;r&quot;) if f.mode == &quot;r&quot;: contents = f.read() # reads the entire content print(contents) f = open(&quot;textfile&quot;, &quot;r&quot;) if f.mode == &quot;r&quot;: fl = f.readlines() # reads per line for x in fl: print(x)  path utilities import os from os import path import datetime import time print(os.name) # get OS name # check if file exist and file type print(path.exists(&quot;textfile&quot;)) # True print(path.isfile(&quot;textfile&quot;)) # True print(path.isdir(&quot;textfile&quot;)) # False # get file paths print(path.realpath(&quot;textfile&quot;)) # /path/to/textfile print(path.split(path.realpath(&quot;textfile&quot;))) # ('/path/to', 'textfile') # get modificaton time t = time.ctime(path.getmtime(&quot;textfile&quot;)) # method 1 print(t) # Sun Jul 18 00:16:20 2021 t2 = datetime.datetime.fromtimestamp(path.getmtime(&quot;textfile&quot;)) # method 2 print(t2) # 2021-07-18 00:16:20.360159 # calculate how long ago file was modified td = datetime.datetime.now() - datetime.datetime.fromtimestamp( path.getmtime(&quot;textfile&quot;) ) print(td) # 0:19:02.185160 print(td.total_seconds()) # 1142.18516  copy and zip files import os from os import path import shutil from shutil import make_archive from zipfile import ZipFile if path.exists(&quot;textfile&quot;): src = path.realpath(&quot;textfile&quot;) # get path of file in current directory dst = src + &quot;.bak&quot; # create a backup copy by appending &quot;bak&quot; shutil.copy(src, dst) # copy over only the the contents of file shutil.copytree(src, dst) # copy over contents and all other metadata of file os.rename(&quot;textfile&quot;, &quot;newtextfile&quot;) # zip files root_dir, tail = path.split(src) shutil.make_archive(&quot;archive&quot;, &quot;zip&quot;, root_dir) # zip all files in the folder with ZipFile(&quot;testzip.zip&quot;, &quot;w&quot;) as newzip: # zip only selected files newzip.write(&quot;textfile&quot;) newzip.write(&quot;textfile.bak&quot;)  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-22","content":""},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-36","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-37","content":"import java.io.FileReader; import java.io.BufferedReader; import java.io.FileWriter; public class Main { public static void main(String[] args) { String sourceFile = &quot;textfile&quot;; // sourceFile path String targetFile = &quot;newtextfile&quot;; // targetFile path // try with resources statement, only available for java 8 and later versions // can't be used on android try ( FileReader fReader = new FileReader(sourceFile); // read file BufferedReader bReader = new BufferedReader(fReader); // read lines in file FileWriter writer = new FileWriter(targetFile); // write file ) { while (true) { String line = bReader.readLine(); if (line == null) { break; } else { writer.write(line + &quot;\\n&quot;); } } System.out.println(&quot;File copied&quot;); } catch (Exception e) { e.printStackTrace(); } } }  import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.nio.file.StandardCopyOption; import java.io.IOException; public class Main { public static void main(String[] args) { String subDirectory = &quot;&quot;; // parent folder where the file is located String sourceFilename = &quot;textfile&quot;; String targetFilename = &quot;newtargetfile3&quot;; // only for java 7 or later versions, not available for android Path sourceFile = Paths.get(subDirectory, sourceFilename); Path targetFile = Paths.get(subDirectory, targetFilename); try { // copy existing file contents into the new file Files.copy(sourceFile, targetFile, StandardCopyOption.REPLACE_EXISTING); } catch (IOException e) { e.printStackTrace(); } } }  using commons-io library to copy file for latest versions and for androiddownload the commons-io jar filecreate a lib folder inside the root folder of your project and move the commons-io jar file into itthen add the jar file into the class path import org.apache.commons.io.FileUtils; // common-io library import java.io.File; import java.io.IOException; public class Main { public static void main(String[] args) { File sourceFile = new File(&quot;path/to/file.txt&quot;); File targetFile = new File(&quot;path/to/newfile.txt&quot;); try { // use commons-io FileUtils.copyFile(sourceFile, targetFile); } catch (IOException e) { e.printStackTrace(); } } }  reading a text file over the internet import java.net.URL; import java.io.InputStream; import java.io.BufferedInputStream; import java.io.IOException; public class Main { private static final String FLOWERS_FEED = &quot;https://services.hanselandpetal.com/feeds/flowers.xml&quot;; // adding the throws block allow code to run safely without having to write another try catch statement in the finally block public static void main(String[] args) throws IOException { InputStream stream = null; BufferedInputStream buf = null; try { URL url = new URL(FLOWERS_FEED); stream = url.openStream(); buf = new BufferedInputStream(stream); StringBuilder sb = new StringBuilder(); while (true) { int data = buf.read(); // gets a single character from stream, returns a character integer value if found else returns -1 if (data == -1) { break; } else { sb.append((char) data); // translate the integer value into a character } } System.out.println(sb); } catch(IOException e) { e.printStackTrace(); } finally { // use finally to explicitly close the stream stream.close(); buf.close(); } } }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-64","content":"// Create or Save file string filename = @&quot;/my/file/path/fileFolder/filename.txt&quot;; string textString = &quot;data to save in file&quot;; System.IO.File.WriteAllText(filename, textString); // existing file will be overwritten // Copy file bool overwrite = true; // overwrite file if exist, else return an File already exists exception string toBeCopiedFile = @&quot;/my/file/path/fileFolder/filename.txt&quot;; string toPasteFile = @&quot;/my/file/path/fileFolder/filenameCopied&quot;; // method 1 System.IO.File.Copy(toBeCopiedFile, toPasteFile, overwrite); // method 2 System.IO.FileInfo file = new System.IO.FileInfo(toBeCopiedFile); file.CopyTo(toPasteFile, overwrite); // Check if file exists // method 1 System.IO.File.Exists(toPasteFile); // true // method 2 file.Exists; // true // Get text from file string content = System.IO.File.ReadAllText(toPasteFile); // Delete file System.IO.File.Delete(toPasteFile); // method 1 file.Delete(); // method 2 (deletes toBeCopiedFile) // Create new folder string folder = @&quot;/my/file/path/folderName&quot;; System.IO.Directory.CreateDirectory(folder); // does not overwrite if folder already exists // Get file in folder // method 1 string searchPattern = &quot;*.*&quot;; // eg. get only .jpg files -&gt; &quot;*.jpg&quot; string[] filesArray = System.IO.Directory.GetFiles(folder, searchPattern, SearchOption.AllDirectories); // method 2 System.IO.DirectoryInfo dirInfo = new System.IO.DirectoryInfo(folder); System.IO.FileInfo[] filesArray2 = dirInfo.GetFiles(&quot;*&quot;, SearchOption.AllDirectories); // Get folders in folder string[] foldersArray = System.IO.Directory.GetDirectories(folder, searchPattern, SearchOption.AllDirectories); System.IO.DirectoryInfo[] foldersArray = dirInfo.GetDirectories(); // Check if folder exists System.IO.Directory.Exists(folder); // true // Get filename of a file from path Path.GetFileName(toBeCopiedFile); // &quot;filename.txt&quot; // Get file extension of a file from path Path.GetExtension(toBeCopiedFile); // &quot;.txt&quot; // Get filename without file extension of a file from path Path.GetFileNameWithoutExtension(toBeCopiedFile); // &quot;filename&quot; // Get directory name of a file from path Path.GetDirectoryName(toBeCopiedFile); // &quot;fileFolder&quot; // Open file (not in app) System.Diagnostics.Process.Start(filename);  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-65","content":"back to top "},{"title":"Access modifier​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#access-modifier","content":"use to hide the implementation details of a class "},{"title":"python​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-5","content":""},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-23","content":""},{"title":"typescript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#typescript-10","content":"3 types Public: By default, members (properties and methods) of TypeScript class are publicPublic members are accessible everywhere without restrictions Private: A private member cannot be accessed outside of its containing classPrivate members can be accessed only within the class. Protected: A protected member cannot be accessed outside of its containing classProtected members can be accessed only within the class and by the instance of its sub/child class. "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-37","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-38","content":""},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-66","content":"6 types public: accessible from everywhere in project, no accessibility restrictions class NumberClass { public int number = 10; } class MainClass { static void Main(string[] args) { NumberClass num = new NumberClass(); System.Console.WriteLine(num.number); // This is OK. The number variable has the public access modifier. } }  private: accessible only from inside a class or a structure, can't access them outside the class they are created class NumberClass { private int number = 10; } class MainClass { static void Main(string[] args) { NumberClass num = new NumberClass(); System.Console.WriteLine(num.number); // Error. We can't access the number variable because // it has the private access modifier and its only accessible in the NumberClass class } }  protected: object is accessible inside the class and in all classes that derive from that class class NumberClass { protected int number = 10; // we can access this variable inside this class } class DerivedClass: NumberClass // this is inheritance. DerivedClass derives from the NumberClass class { void Print() { System.Console.WriteLine(number); // we can access it in this class as well because it derives from the NumberClass class } } class MainClass { void Print() { NumberClass num = new NumberClass(); System.Console.WriteLine(num.number); // Error. The number variable is inaccessible due to its protection level. // The Program class doesn't derive from the NumberClass } }  internal: object is accessible only inside its own assembly (project) but not in other assemblies (projects) //First Project (ASSEMBLY) public class NumberClassInFirstProject { internal int number = 10; // we can access this variable inside this class } class Program1 { public static void Main() { NumberClassInFirstProject num = new NumberClassInFirstProject(); System.Console.WriteLine(num.number); // This is OK. Anywhere in this project (assembly) // we can access the number variable. } } //Second project (ASSEMBLY) class Program2 { public static void Main() { NumberClassInFirstProject num = new NumberClassInFirstProject(); System.Console.WriteLine(num.number); // Error. The number variable is inaccessible due to its protection level. // The Program class in second project can't access the internal members from another project } }  protected internal: a combination of protected and internal, can access the protected internal member only in the same assembly (project) or in a derived class in other assemblies (projects) //First Project (ASSEMBLY) public class NumberClassInFirstProject { protected internal int number = 10; // we can access this variable inside this class } class Program1 { public static void Main() { NumberClassInFirstProject num = new NumberClassInFirstProject(); System.Console.WriteLine(num.number); // This is OK. Anywhere in this project (assembly) we can access the number variable. } } //Second project (ASSEMBLY) class Program2: NumberClassInFirstProject // Inheritance { public static void Main() { System.Console.WriteLine(number); // This is OK as well. The class Program derives from the NumberClassInFirstProject class. } }  private protected: a combination of private and protected, can access members inside the containing class or in a class that derives from a containing class, but only in the same assembly (project) "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-67","content":"back to top "},{"title":"Iterators​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#iterators","content":""},{"title":"python​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-6","content":""},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-24","content":"let i = [1, 2]; let iterator = i[Symbol.iterator](); iterator.next(); // { value: 1, done: false } iterator.next(); // { value: 2, done: false } iterator.next(); // { value: undefined, done: true }  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-38","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-39","content":"using iterators to loop through collections // import java.util.List; // import java.util.ArrayList; // import java.util.Iterator; // must import List&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(&quot;Japan&quot;); list.add(&quot;China&quot;); list.add(&quot;USA&quot;); // method 1: using Iterator Iterator&lt;String&gt; iterator = list.iterator(); while (iterator.hasNext()) { String value = iterator.next(); System.out.println(value); } // method 2: using forEach loop for (String value: list) { System.out.println(value); } // method 3: using List's forEach method, only available for Java 8 onwards, not included in android java 8 list.forEach(System.out::println); // method 1 list.forEach((s) -&gt; {System.out.println(s}); // method 2 // loop hash maps with Iterator // import java.util.Map; // import java.util.HashMap; // import java.util.Set; // import java.Iterator; Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); map.put(&quot;jp&quot;, &quot;Japan&quot;); map.put(&quot;sg&quot;, &quot;Singapore&quot;); map.put(&quot;usa&quot;, &quot;United States&quot;); Set&lt;String&gt; keys = map.keySet(); Iterator&lt;String&gt; iterator = keys.iterator(); while (iterator.hasNext()) { String key = iterator.next(); System.out.println(map.get(key)); } // loop has maps with forEach for (String key : keys) { System.out.println(map.get(key)); }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-68","content":""},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-69","content":"back to top "},{"title":"Generators​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#generators","content":""},{"title":"python​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-7","content":"def generator_example(): yield 1 x = generator_example(): next(x) # 1 def infinite_maker(): i = 0 while True: yield i i += 1 x = infinite_maker() next(x) # 0 next(x) # 1 # generator expression y = (i for i in range(10)) print(next(y)) # 0 print(next(y)) # 1 # send, throw, close method def generator_ex(): num = 0 while True: j = yield num if j is not None: num = j num += 1 x = generator_ex() for i in x: print(i) # prints out the yield result of num digits = len(str(i)) if (i &gt; 100): # method 1 x.throw(ValueError(&quot;value is above 100&quot;)) # method 2 x.close() # raises StopIteration, an exception used to signal the end of a finite iterator # when a yield result is available, return the new value into the generator (eg.: j takes the new value) x.send(10 ** (digits)) # 0 12 102  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-25","content":"function* generatorExample1() { yield 1; yield 2; } function *generatorExample2() { yield 1; yield 2; } let iterator1 = generatorExample1(); let iterator2 = generatorExample2(); iterator1.next(); // { value: 1, done: false } iterator1.next(); // { value: 2, done: false } iterator1.next(); // { value: undefined, done: true } iterator2.next(); // { value: 1, done: false } iterator2.next(); // { value: 2, done: false } iterator2.next(); // { value: undefined, done: true } // does not cause stackoverflow for infinite loops function* infiniteMaker() { let i = 0; while (true) { yield i; i++; } } let iterator3 = infiteMaker(); iterator3.next(); // { value: 0, done: false } iterator3.next(); // { value: 1, done: false } // nested generators function* nestedGenerator() { yield* generatorExample1(); // add * after yield to add another generator yield 3; } let iterator4 = nestedGenerator(); iterator4.next(); // { value: 1, done: false } iterator4.next(); // { value: 2, done: false } iterator4.next(); // { value: 3, done: false } iterator4.next(); // { value: undefined, done: true } // using return keyword will stop the generator function* generatorWithReturn() { yield 1; return &quot;hello&quot;; // done will become true here yield 2; } let iterator5 = generatorWithReturn(); iterator5.next(); // { value: 1, done: false } iterator5.next(); // { value: &quot;hello&quot;, done: true } iterator5.next(); // { value: undefined, done: true }  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-39","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-40","content":""},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-70","content":""},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-71","content":"back to top "},{"title":"Fetching Web Data​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#fetching-web-data","content":""},{"title":"python​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-8","content":"fetching a webpage import urllib.request response = urllib.request.urlopen(&quot;http://www.google.com&quot;) print(response.getcode()) # get response status code data = response.read() print(data) # google html tags  fetching a json from an api import urllib.request import json def print_json(raw_data): get_json_data = json.loads(raw_data) # load string data into a dictionary if &quot;title&quot; in get_json_data[&quot;metadata&quot;]: print(get_json_data[&quot;metadata&quot;][&quot;title&quot;]) count = get_json_data[&quot;metadata&quot;][&quot;count&quot;] print(count) for feature in get_json_data[&quot;features&quot;]: print(feature[&quot;properties&quot;][&quot;place&quot;]) api_url = &quot;https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_day.geojson&quot; # open the URL and read the data response = urllib.request.urlopen(api_url) status_code = response.getcode() print(status_code) if (status_code == 200): data = response.read() print_json(data) else: print(&quot;Error&quot;)  manipulate XML import xml.dom.minidom doc = xml.dom.minidom.parse(&quot;samplexml.xml&quot;) # parse the xml file print(doc.nodeName) print(doc.firstChild.tagName) skills = doc.getElementsByTagName(&quot;skill&quot;) print(f&quot;%d skills: {skills.length}&quot;) for skill in skills: print(skill.getAttribute(&quot;name&quot;)) # create a new XML tag and add it into the document new_skill = doc.createElement(&quot;skill&quot;) # create a new skill tag new_skill.setAttribute(&quot;name&quot;, &quot;jQuery&quot;) doc.firstChild.appendChild(new_skill) # adds to memory but not persisted skills = doc.getElementsByTagName(&quot;skill&quot;) print(f&quot;%d skills: {skills.length}&quot;) for skill in skills: print(skill.getAttribute(&quot;name&quot;))  "},{"title":"Javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-26","content":""},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-40","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-41","content":""},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-72","content":""},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-73","content":"back to top "},{"title":"Enum​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#enum","content":""},{"title":"python 3​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-3-9","content":"from enum import Enum  class Methods(Enum): GET = &quot;GET_VALUE&quot; # get value print(Method.GET.value) # &quot;GET_VALUE&quot; print(Method(&quot;GET_VALUE&quot;).value) # &quot;GET_VALUE&quot; # get key print(Method.GET.name) # &quot;GET&quot; print(Method(&quot;GET_VALUE&quot;).name) # &quot;GET&quot; # check if value exist in Enum print(&quot;GET_VALUE&quot; in Methods._value2member_map_) # True print(&quot;GET&quot; in Methods._value2member_map_) # False # check if name exist in Enum print(&quot;GET_VALUE&quot; in Methods._member_names_) # False print(&quot;GET&quot; in Methods._member_names_) # True  "},{"title":"Javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-27","content":"const color = { Red: 1, Green: 2, Blue: 3, };  "},{"title":"Typescript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#typescript-11","content":"Enum: By default, enums begin numbering their members starting at 0 enum Color { Red, Green, Blue, } let c: Color = Color.Green; // 1 let colorName: string = Color[1]; // &quot;Green&quot; enum Color { Red = 1, Green, Blue, } let c: Color = Color.Green; // 2 let colorName: string = Color[2]; // &quot;Green&quot;  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-41","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-42","content":"ENUMEnumerations are lists of possible values that you can use for any particular variableAn enumeration in java is called an enum class. // usual enums public enum Names1 { JOHN, PETER; } // setting a string value for enums public enum Names2 { JOHN(&quot;John&quot;), PETER(&quot;Peter&quot;); private String name; Names2(String name) { this.name = name; } @Override public String toString() { return this.name; } } public class Person { private Names1 name1 = Names1.JOHN; // using enum to set a constant variable private Names2 name2 = Names2.JOHN; public Names1 getName1() { return this.name1; } public Names2 getName2() { return this.name2; } } public class Main { public static void main(String[] args) { Person p = new Person(); System.out.println(p.getName1()); // &quot;JOHN&quot; System.out.println(p.getName2()); // &quot;John&quot; } }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-74","content":"Enum Used to manage number type constants for better clarity and maintainabilityCan be declared in namespace, in classesBy default, enums begin numbering their members starting at 0 // not reccommended method const int RegularAirMail = 1; const int RegisteredAirMail = 2; const int Express = 3; // Use enums for better management and for clarity // default data type is an integer public enum ShippingMethod : byte // use : byte to change default data type { // if value is not assigned, 1st value will start with 0 // subsequent value will be incremented by 1 automatically if value is not assigned RegularAirMail = 1, RegisteredAirMail = 2, Express = 3 } // get string value (ToString method not required if using System.Console.WriteLine) ShippingMethod method = ShippingMethod.Express.ToString(); // Express // get number value ShippingMethod method = (int) ShippingMethod.Express; // 3 // retrieve string value with number value ShippingMethod methodType = (ShippingMethod) 3; // Express  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-75","content":"enum Color { red, green, blue }; // enum limitations // 2 enumerations cannot share the same names (use enum class instead) enum Color2 { red, green, blue }; // throws a compilation error // no variable can have a name which is already in some enumeration int red = 0; // throws a compilation error // enums are not type safe enum Gender { male, female }; Gender gender = male; Color color = red; if (gender == color) // gender != color but will return true as both value are 0 { cout &lt;&lt; &quot;Equal&quot;; }  Enum class / scoped enumerations makes enumeration both strongly typed &amp; strongly scopeddoes not allow implicit conversion to intdoes not compare enumerators from a different enumerations // Declaration enum class Color{ Red, Green, Blue}; // Initialisation Color col = Color::Red;  back to top "},{"title":"Language Specific​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#language-specific","content":""},{"title":"python​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#python-9","content":"Shebang line / hashbang it is a common pattern for unix based systemsallows a script to be invoked from the command linewritten on the first line in the python file#! marks the shebang #!/usr/bin/env python3  # List comprehension # original method arr = [] for i in range(5): arr.append(i) print(arr) # [0, 1, 2, 3, 4] # List comprehension method arr = [i for i in range(5)] print(arr) # [0, 1, 2, 3, 4] # List comprehension with conditional statement arr = [i for i in range(5) if i &lt; 3] print(arr) # [0, 1, 2] # Tuples (similar to list, but are immutable) tuple1 = (1, 2, &quot;3&quot;) # Sets (only have unique values) # create set set1 = set([1, 2]) # method 1 set2 = {1, 2} # method 2 # join 2 sets together set3 = set1 | set2 # {1, 2} # add element to set set1.add(3) # {1, 2, 3} # add set2 to set1 set1 |= set2 # {1, 2, 3} # remove element from set from element set1.discard(2) # {1, 3} # Get intersection of 2 sets set1.intersection(set2) # {1} # Get unique value from the 2 sets set1.symmetric_difference(set2) # {2, 3} # Get values from set1 that set2 does not have set1.difference(set2) # {3} # delete all values from set set1.clear() # set() # Create a set that cannot be modified set_fixed = frozenset([1, 2, 3])  # modify global variable from local var = &quot;from global&quot; print(var) # from global def convert_local_to_global: global var # without the keyword global, cannot modify global variable var locally unlike javascript var = &quot;from local&quot; print(var) # from local  # undefine an existing variable var = 123 print(var) # 123 del var print(var) # NameError: name 'var' is not defined  # find the sum of values that are True in an array sum([True, False, True]) # 2  # convert character to number ord(&quot;a&quot;) # 97 # convert number to character chr(97) # a  function annotatinsint, float, bool, str, bytes, Nonepython 3.8 &amp; earlier, list, set, dict, tuple list[int], dict[float, str], Tuple[int, ...] python 3.9+ can import types from typing library from typing import List, Set, Dict, Tuple, Optional, Callable, Iterator, Union, Any, cast, Mapping, MutableMapping, Sequence, Match, AnyStr, IO isValid: bool = True; def foo(a:”int”, b:”float”=5.0) -&gt; ”int”: pass x: Optional[str] = some_function() # use Optional[] for values that could be None x: Callable[[int, float], float] = f # A generator function that yields ints is secretly just a function that # returns an iterator of ints, def g(n: int) -&gt; Iterator[int]: i = 0 while i &lt; n: yield i i += 1 # can also split a function annotation over multiple lines def send_email(address: Union[str, List[str]], sender: str, cc: Optional[List[str]], bcc: Optional[List[str]], subject='', body: Optional[List[str]] = None ) -&gt; bool: # An argument can be declared positional-only by giving it a name starting with two underscores: def quux(__x: int) -&gt; None: pass quux(3) # Fine quux(__x=3) # Error # To find out what type mypy infers for an expression anywhere in # your program, wrap it in reveal_type(). Mypy will print an error # message with the type; remove it again before running the code. reveal_type(1) # -&gt; Revealed type is &quot;builtins.int&quot; # Use Union when something could be one of a few types x: List[Union[int, str]] = [3, 5, &quot;test&quot;, &quot;fun&quot;] # Use Any if you don't know the type of something or it's too # dynamic to write a type for x: Any = mystery_function() # If you initialize a variable with an empty container or &quot;None&quot; # you may have to help mypy a bit by providing a type annotation x: List[str] = [] x: Optional[str] = None # This makes each positional arg and each keyword arg a &quot;str&quot; def call(self, *args: str, **kwargs: str) -&gt; str: request = make_request(*args, **kwargs) return self.do_api_query(request) # Use a &quot;type: ignore&quot; comment to suppress errors on a given line, # when your code confuses mypy or runs into an outright bug in mypy. # Good practice is to comment every &quot;ignore&quot; with a bug link # (in mypy, typeshed, or your own code) or an explanation of the issue. x = confusing_function() # type: ignore # https://github.com/python/mypy/issues/1167 # &quot;cast&quot; is a helper function that lets you override the inferred # type of an expression. It's only for mypy -- there's no runtime check. a = [4] b = cast(List[int], a) # Passes fine c = cast(List[str], a) # Passes fine (no runtime check) reveal_type(c) # -&gt; Revealed type is &quot;builtins.list[builtins.str]&quot; print(c) # -&gt; [4]; the object is not cast # If you want dynamic attributes on your class, have it override &quot;__setattr__&quot; # or &quot;__getattr__&quot; in a stub or in your source code. # # &quot;__setattr__&quot; allows for dynamic assignment to names # &quot;__getattr__&quot; allows for dynamic access to names class A: # This will allow assignment to any A.x, if x is the same type as &quot;value&quot; # (use &quot;value: Any&quot; to allow arbitrary types) def __setattr__(self, name: str, value: int) -&gt; None: ... # This will allow access to any A.x, if x is compatible with the return type def __getattr__(self, name: str) -&gt; int: ... a.foo = 42 # Works a.bar = 'Ex-parrot' # Fails type checking # Use Iterable for generic iterables (anything usable in &quot;for&quot;), # and Sequence where a sequence (supporting &quot;len&quot; and &quot;__getitem__&quot;) is # required def f(ints: Iterable[int]) -&gt; List[str]: return [str(x) for x in ints] f(range(1, 3)) # Mapping describes a dict-like object (with &quot;__getitem__&quot;) that we won't # mutate, and MutableMapping one (with &quot;__setitem__&quot;) that we might def f(my_mapping: Mapping[int, str]) -&gt; List[int]: my_mapping[5] = 'maybe' # if we try this, mypy will throw an error... return list(my_mapping.keys()) f({3: 'yes', 4: 'no'}) def f(my_mapping: MutableMapping[int, str]) -&gt; Set[str]: my_mapping[5] = 'maybe' # ...but mypy is OK with this. return set(my_mapping.values()) f({3: 'yes', 4: 'no'}) # User-defined classes are valid as types in annotations x: MyClass = MyClass() # &quot;typing.Match&quot; describes regex matches from the re module import re x: Match[str] = re.match(r'[0-9]+', &quot;15&quot;) # Use IO[] for functions that should accept or return any # object that comes from an open() call (IO[] does not # distinguish between reading, writing or other modes) def get_sys_IO(mode: str = 'w') -&gt; IO[str]: if mode == 'w': return sys.stdout elif mode == 'r': return sys.stdin else: return sys.stdout  Async await import asyncio # A coroutine is typed like a normal function async def countdown35(tag: str, count: int) -&gt; str: while count &gt; 0: print('T-minus {} ({})'.format(count, tag)) await asyncio.sleep(0.1) count -= 1 return &quot;Blastoff!&quot;  "},{"title":"javascript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#javascript-28","content":"Set // Create a Set const letters = new Set([&quot;a&quot;, &quot;b&quot;]); // or new Set(); // Add Values to the Set letters.add(&quot;c&quot;); // size of set letters.size; // 3 // check if value exist letters.has(&quot;a&quot;); // true // delete an element letters.delete(&quot;a&quot;); // loop through a set, keys and values are the same for (const letter of letters.keys()) { // similar to letters.values console.log(letter); } // loop through a set and get both keys and values for (const letter of letters.entries()) { // similar to letters.values console.log(letter); // [&quot;b&quot;, &quot;b&quot;] } // delete everything in the set letters.clear();  // convert character at index 0 to number &quot;a&quot;.charCodeAt(); // 97 // convert character at a specific index to number &quot;abc&quot;.charCodeAt(1); // 98 // convert number to character String.fromCharCode(97); // &quot;a&quot;  Explicit Binding choose what we want the context of &quot;this&quot; to be by using call, apply or bindby refering to the call, apply, or bind methods, you can determine the value of &quot;this&quot;can only be used on FUNCTIONS /* NAME OF METHOD | PARAMETERS | INVOKE IMMEDIATELY? CALL | thisArg,a,b,c,... | Yes APPLY | thisArg,[a,b,c,...] | Yes BIND | thisArg,a,b,c,... | No CALL args can be set to anything and can have infinite arguments, function is immediately invoked APPLY only takes 2 args, the 2nd arg is an array of infinite arguments, function is immediately invoked BIND can have infinite arguments, and is a method that returns a function definition */ var foo = { firstName: &quot;Foo&quot;, say: function() { return &quot;Hi &quot; + this.firstName; }, add: function(a, b, c) { return this.firstName + &quot; just calculated &quot; + (a + b + c); } } var bar = { firstName: &quot;Bar&quot; } // Call: allow this to be referenced to bar instead of foo, all arguments must not be undefined foo.say() // returns &quot;Hi Foo&quot; foo.say.call(bar) // returns &quot;Hi Bar&quot; foo.add.call(bar, 1, 2, 3); // returns &quot;Bar just calculated 6&quot; // Apply: simlar to Call for the 1st argument, 2nd argument has to be an array of values, all arguments must not be undefined foo.say.apply(bar) // returns &quot;Hi Bar&quot; foo.add.apply(bar, [1, 2, 3]); // returns &quot;Bar just calculated 6&quot; // Bind: returns the function, then requires it to be called // all agruments need not be defined upfront, but must provide remaining arguments when calling var say = foo.say.bind(bar); say(); // returns &quot;Hi Bar&quot; var add = foo.add.bind(bar, 1, 2); add(3); // returns &quot;Bar just calculated 6&quot; // Bind is commonly used when dealing with asynchronous code var foo = { firstName: &quot;Foo&quot;, say: function() { setTimeout(function() { console.log(&quot;Hi &quot; + this.firstName; }.bind(this), 1000); } } foo.say(); // prints &quot;Hi Foo&quot;, if without bind(this), prints &quot;Hi undefined&quot;  Proxy checks for the number of times the field in the object has been accessedeach time the field has been accessed, the defined logic will occur const target = {}; const handler = { get: function (targetObj, field) { if (field === &quot;nextId&quot;) { // field name must be the same when called if (targetObj[field] === undefined) { targetObj[field] = 1; return targetObj[field]; } targetObj[field]++; return targetObj[field]; } return undefined; }, }; const proxy = new Proxy(target, handler); console.log(proxy.nextId); // 1 (field name must be the same as when doing the conditional check) console.log(proxy.nextId); // 2 console.log(proxy.nextId); // 3  "},{"title":"typescript​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#typescript-12","content":"Declaring with type as &quot;any&quot;: use to declare variable type if you do not know its type will receive an error if use methods for the wrong type (no auto checking) let notSure: any = 4; notSure = &quot;maybe a string instead&quot;; notSure = false; // okay, definitely a boolean  Tuples: allow you to express an array with a fixed number of elements whose types are known, but need not be the same (immutable) // Declare a tuple type let x: [string, number]; // Initialize it x = [&quot;hello&quot;, 10]; // OK // Initialize it incorrectly x = [10, &quot;hello&quot;]; // Error  Generics // &quot;T&quot; can be name as anything, used &quot;T&quot; due to convention function genericFunc&lt;T&gt;(value: T): T { // T is the type base on the value type given in the parameter when called return value; } console.log(genericFunc(&quot;str type&quot;)); // type are declared base on the input value type console.log(genericFunc(123)); console.log(genericFunc(false));  "},{"title":"ruby​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#ruby-42","content":""},{"title":"java​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#java-43","content":"Number formatting long longValue = 10_000_000; // method 1 // using &quot;import java.text.NumberFormat;&quot; NumberFormat formatter = NumberFormat.getNumberInstance(); String formatted = formatter.format(lognValue); // &quot;10,000,000&quot; (us locale) // method 2 // using &quot;import java.util.Locale;&quot; Locale locale = new Locale(&quot;da&quot;, &quot;DK&quot;); // set as Denmark NumberFormat formatter = NumberFormat.getNumberInstance(locale); String formatted = formatter.format(lognValue); // &quot;10.000.000&quot; (dk locale)  Currency formatting long longValue = 10_000_000.00; // method 1 // using &quot;import java.text.NumberFormat;&quot; NumberFormat formatter = NumberFormat.getCurrencyInstance(); String formatted = formatter.format(lognValue); // &quot;$10,000,000.00&quot; (us locale) // method 2 // using &quot;import java.util.Locale;&quot; Locale locale = new Locale(&quot;da&quot;, &quot;DK&quot;); // set as Denmark NumberFormat formatter = NumberFormat.getCurrencyInstance(locale); String formatted = formatter.format(lognValue); // &quot;kr10.000.000,00&quot; (dk locale)  Integer formatting long longValue = 10_000_000.89; // method 1 // using &quot;import java.text.NumberFormat;&quot; NumberFormat formatter = NumberFormat.getIntegerInstance(); String formatted = formatter.format(lognValue); // &quot;10,000,001&quot; (us locale) // method 2 // using &quot;import java.util.Locale;&quot; Locale locale = new Locale(&quot;da&quot;, &quot;DK&quot;); // set as Denmark NumberFormat formatter = NumberFormat.getIntegerInstance(locale); String formatted = formatter.format(lognValue); // &quot;10.000.001&quot; (dk locale)  double colon operator / method reference operator &lt;Class name&gt;::&lt;method name&gt; can be used for a static method import java.util.*; class GFG { // static function to be called static void someFunction(String s) { System.out.println(s); } public static void main(String[] args) { List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;Geeks&quot;); list.add(&quot;For&quot;); list.add(&quot;GEEKS&quot;); // call the static method // using double colon operator list.forEach(GFG::someFunction); } } an instance method import java.util.*; class GFG { // instance function to be called void someFunction(String s) { System.out.println(s); } public static void main(String[] args) { List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;Geeks&quot;); list.add(&quot;For&quot;); list.add(&quot;GEEKS&quot;); // call the instance method // using double colon operator list.forEach((new GFG())::someFunction); } } super method import java.util.*; import java.util.function.*; class Test { // super function to be called String print(String str) { return (&quot;Hello &quot; + str + &quot;\\n&quot;); } } class GFG extends Test { // instance method to override super method @Override String print(String s) { // call the super method // using double colon operator Function&lt;String, String&gt; func = super::print; String newValue = func.apply(s); newValue += &quot;Bye &quot; + s + &quot;\\n&quot;; System.out.println(newValue); return newValue; } // Driver code public static void main(String[] args) { List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;Geeks&quot;); list.add(&quot;For&quot;); list.add(&quot;GEEKS&quot;); // call the instance method // using double colon operator list.forEach(new GFG()::print); } } Instance method of an arbitrary object of a particular type import java.util.*; class Test { String str=null; Test(String s) { this.str=s; } // instance function to be called void someFunction() { System.out.println(this.str); } } class GFG { public static void main(String[] args) { List&lt;Test&gt; list = new ArrayList&lt;Test&gt;(); list.add(new Test(&quot;Geeks&quot;)); list.add(new Test(&quot;For&quot;)); list.add(new Test(&quot;GEEKS&quot;)); // call the instance method // using double colon operator list.forEach(Test::someFunction); } } a constructor import java.util.*; class GFG { // Class constructor public GFG(String s) { System.out.println(&quot;Hello &quot; + s); } // Driver code public static void main(String[] args) { List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;Geeks&quot;); list.add(&quot;For&quot;); list.add(&quot;GEEKS&quot;); // call the class constructor // using double colon operator list.forEach(GFG::new); } }  "},{"title":"c#​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-76","content":"Overloading having multiple similar methods with different signaturesallows multiple different input data types for the same feature // Overloading constructors // overloaded constructors are separate public class Print { public Print() { System.Console.Write(&quot;test&quot;); } public Print(string x) { System.Console.Write(x); } } class MainClass { public static void Main(string[] args) { Print print = new Print(); // &quot;first&quot; Print print2 = new Print(&quot;second&quot;); // &quot;second&quot; } } // overloaded constructors are linked public class Print { public Print() { System.Console.Write(&quot;first&quot;); } public Print(string x) : this() { // add &quot;: this()&quot; to link with default constructor System.Console.Write(x); } } class MainClass { public static void Main(string[] args) { Print print = new Print(&quot;second&quot;); // &quot;firstsecond&quot; } } // Overloading methods public class Point { public int X; public int Y; public Point(int x, int y) { // constructor this.X = x; this.Y = y; } public void Move (int x, int y) { this.X = x; this.Y = y; } public void Move(Point newLocation) { // overloading the 1st Move method Move(newLocation.X, newLocation.Y); } }  Overflowing c# does not check for overflow this means that value of a variable can be modified during runtime and when the value goes beyond the boundary of it's data type, overflow will occure.g.: byte num = 255; num++; // num value will be the surplus value (in this case 0) // If overflow is not desired, use checked keyword to enable overflow checking // In the following example, increment will not occur and an exception will be thrown, which will cause an error checked { byte number = 255; number++; }  Ref Modifier Modifies value typewhen pasing a value type to a method, a copy of the variable is sent to the method changes applied to that variable in the method will not be visible upon return from the method the value type can be modified using the ref modifier when the ref modifier is used, a reference to the original variable will be sent to the target method // typical value type cannot be modified case public class Calculator { public int Add(int num){ num += 2; } } class MainClass { public static void Main(string[] args) { Calculator cal = new Calculator3(); int num = 1; cal.Add(num); System.Console.WriteLine(num); // 1 } } // using Ref Modifier public class Calculator { public int Add(ref int num){ // add ref keyword num += 2; } } class MainClass { public static void Main(string[] args) { Calculator cal = new Calculator3(); int num = 1; cal.Add(ref num); // add ref keyword System.Console.WriteLine(num); // 3 } }  Out Modifier use to return multiple values from a methodany parameter declared with the out modifier is expected to receive a value at the end of the method // not using the &quot;out&quot; keyword will result in an error public class Person { public void GetName(string name){ name = &quot;myName&quot;; } } class MainClass { public static void Main(string[] args) { Person person = new Person(); string name; // unassigned local variable error person.GetName(name); System.Console.WriteLine(name); } } // using the &quot;out&quot; keyword public class Person { public void GetName(out string name){ name = &quot;myName&quot;; } } class MainClass { public static void Main(string[] args) { Person person = new Person(); string name; person.GetName(out name); System.Console.WriteLine(name); // &quot;myName&quot; } }  Readonly modifier Prevents accidental overwriting of the value // without readonly modifier public System.Collections.Generic.List&lt;int&gt; orders = new System.Collections.Generic.List&lt;int&gt;(); public void MakeOrder() { orders = new System.Collections.Generic.List&lt;int&gt;(); // a new list will be reassigned } // using readonly modifier public readonly System.Collections.Generic.List&lt;int&gt; orders = new System.Collections.Generic.List&lt;int&gt;(); public void MakeOrder() { orders = new System.Collections.Generic.List&lt;int&gt;(); // this will produce an error that the variable cannot be assigned }  Abstract modifier (polymorphism) what? indicates that a class or a member (method) is missing implementationif a method is declared as abstract, the containing class needs to be declared as abstract toothe abstract methods must be implemented in the child classabstract classes cannot be instantiated why? use abstract when you want to provide some common behavior, while forcing other developers to follow your design public abstract class ParentClassName { // if a method has an abstract keyword, the class must also have the abstract keyword public abstract void FunctionName(); // this will allow the child class to override this method }  Virtual modifier (polymorphism) Used to modify a method, property, indexer, or event declaration and allow for it to be overridden in a derived (child) classcannot be used with the static, abstract, private, or override modifiers public class ParentClassName { public virtual void FunctionName() { // this will allow the child class to override this method do_something; } }  Override modifier (polymorphism) required to extend or modify the abstract or virtual implementation of an inherited method, property, indexer, or event public class ChildClassName : ParentClassName { public override void FunctionName() { // this will override the inherited method do_something; } }  Sealed modifier (polymorphism) prevents other classes from inheriting from itit is the opposite of abstract classesUse sealed modifier because selaed classes are slightly faster due to some run-time optimizations // method 1: applying sealed modifier to the child class will prevent us from being able to create a class that derives from the child class public sealed class ChildClassName : ParentClassName { // new class will not be able to inherit from ChildClassName public override void FunctionName() { do_something; } } // method 2: applying sealed modifier to the overriding methods public class ChildClassName : ParentClassName { public sealed override void FunctionName() { // new class will be able to inherit from ChildClassName but will be unable to override the FunctionName that is sealed do_something; } }  Dynamic type does not work on Apple products (Mac, IOS)converting dynamic to static type does not require casting // static type string a = &quot;test&quot;; // cannot reassign to a different data type // dynamic type dynamic b = &quot;test&quot;; // allows variable to be reassigned to a different data type b = 123;  Generics allows the creating of types that use other typesmake classes reusable and with type-safety public class Stack&lt;T&gt; { // let data type be T public T testValue { get; set; } private System.Collections.Generic.List&lt;T&gt; stack = new System.Collections.Generic.List&lt;T&gt;(); // use data type public T Peek() { // set return data type as T try { return stack[stack.Count - 1]; } catch (System.ArgumentOutOfRangeException) { return default(T); // return default value of data type T } } public void Push(T data) { // set arg data type as T stack.Add(data); } public T Pop() { int lastIndex = stack.Count - 1; T val = stack[lastIndex]; // set data type as T stack.RemoveAt(lastIndex); return val; } } public class Printer { public void Print&lt;T&gt;(Stack&lt;T&gt; stack) { System.Console.WriteLine(stack.testValue); } } class MainClass { public static void Main() { Stack&lt;string&gt; s = new Stack&lt;string&gt;() {testValue=&quot;abc&quot;}; // method 1 // Stack&lt;string&gt; s = new Stack&lt;string&gt; {testValue=&quot;abc&quot;}; // method 2 // Stack&lt;string&gt; s = new Stack&lt;string&gt;(); // method 3 Printer p = new Printer(); p.Print(s); // &quot;abc&quot;, method 3 will cause this to result with &quot;&quot; } }  Generic contraints Contraints are validations that we can put on generic type parameterat the instantiation time of generic class, if client provides invalid type parameter then compiler will give an error6 types of contraints where T : InterfaceName // method 1: defining generics in methods with contraints public class Maths { public int Max(int a, int b) { // normal method return a &gt; b ? a : b; } public T Max&lt;T&gt;(T a, T b) where T : System.IComparable { // return a &gt; b ? a : b; // this will produce an error return a.CompareTo(b) &gt; 0 ? a : b; } } class MainClass { public static void Main() { Maths m = new Maths(); int max1 = m.Max(2, 8); // 8 float max2 = m.Max(3.3f, 6.5f); // 6.5 } } // method 2: defining generics at class with contraints public class Maths&lt;T&gt; where T : System.IComparable { public int Max(int a, int b) { // normal method return a &gt; b ? a : b; } public T Max(T a, T b) { return a.CompareTo(b) &gt; 0 ? a : b; } } class MainClass { public static void Main() { Maths&lt;int&gt; m = new Maths&lt;int&gt;(); int max1 = m.Max(2, 8); // 8 Maths&lt;float&gt; m = new Maths&lt;float&gt;(); float max2 = m.Max(3.3f, 6.5f); // 6.5 } }  where T : parentClass public class Product { public string Title { get; set; } public float Price { get; set; } } public class Calculator&lt;T&gt; where T : Product { public float Cost(T product) { return product.Price; } } class MainClass { public static void Main() { Product p = new Product { Price = 2.3f }; Calculator&lt;Product&gt; c = new Calculator&lt;Product&gt;(); System.Console.WriteLine(c.Cost(p)); // 2.3 } }  where T : struct public class Nullable&lt;T&gt; where T : struct { private object _value; public bool HasValue { get { return _value != null; } } public Nullable() { } public Nullable(T value) { _value = value; } public T GetValueOrDefault() { if (HasValue) return (T)_value; return default(T); } } class MainClass { public static void Main() { Nullable&lt;int&gt; num = new Nullable&lt;int&gt;(5); System.Console.WriteLine(num.HasValue); // true System.Console.WriteLine(num.GetValueOrDefault()); // 5 Nullable&lt;int&gt; num2 = new Nullable&lt;int&gt;(); System.Console.WriteLine(num2.HasValue); // false System.Console.WriteLine(num2.GetValueOrDefault()); // 0 Nullable&lt;string&gt; str = new Nullable&lt;string&gt;(); // error as string is not a value type } }  where T : class public class NodeList&lt;T&gt; where T : class {} class MainClass { public static void Main(string[] args) { NodeList&lt;int&gt; nodesOfInt = new NodeList&lt;int&gt;(); // error as int is a value type NodeList&lt;string&gt; nodesOfString = new NodeList&lt;string&gt;(); // string is a reference type NodeList&lt;Employee&gt; nodesOfEmployee = new NodeList&lt;Employee&gt;(); // Employee is a reference type NodeList&lt;EventHandler&gt; nodesOfAction = new NodeList&lt;EventHandler&gt;(); //EventHandler is a delegate and a reference type } }  where T : new() new() represents default constructorno parameters allowed public class NodeList&lt;T&gt; where T : new() {} public class ClassName1 { public ClassName1() {} } public class ClassName2 { public ClassName2(dataType argName) {} } class MainClass { public static void Main(string[] args){ NodeList&lt;ClassName1&gt; c1 = new NodeList&lt;ClassName1&gt;(); // no error NodeList&lt;ClassName2&gt; c2 = new NodeList&lt;ClassName2&gt;(); // error as parameters are not allowed } }  where T : U 2 argument types (T and U)U can be an interface, abstract class, or simple classT must inherit or implements the U class public class NodeList&lt;T, U&gt; where T : U { public void DoWork(T subClass, U baseClass) {} } public interface IEmployee {} public class Employee : IEmployee {} class MainClass{ public static void Main() { NodeList&lt;Employee, IEmployee&gt; employeeNodes = new NodeList&lt;Employee, IEmployee&gt;(); } }  Delegates it is an object that knows how to call a method (or a group of methods)it is a reference or a pointer to a functionit is for designing extensible and flexible apps (eg frameworks) // without parameters public delegate void DelegateName(); // use of &quot;delegate&quot; keyword is required class MainClass { public static void Main() { // initialize delegate DelegateName delegateName = new DelegateName(DoSomethingMethod); // method 1 delegateName(); // run delegate DelegateName delegateName2 = DoSomethingMethod; // method 2 delegateName2(); DelegateName delegateName3 = DoSomethingMethod; RunDelegate(delegateName3); // method 3 DelegateName delegateName4 = GetMyDelegate(); // method 4 RunDelegate(delegateName4); DelegateName delegateName5 = delegate() { doSomething; } // method 5: using anonymous methods delegateName5(); DelegateName delegateName6 = delegate() { return doSomething; } // method 6: return value with anonymous methods dataType variableName = delegateName6(); DelegateName delegateName7 = () =&gt; { return doSomething; } // method 7: return value with lambda expression dataType variableName = delegateName7(); } public static void DoSomethingMethod() { doSomething; } public static void RunDelegate(DelegateName delegateName3) { delegateName3(); } public static DelegateName GetMyDelegate() { return new DelegateName(DoSomethingMethod); } } // with parameters public delegate void DelegateName(dataType argName); // dataType must be the same as the pointed function class MainClass { public static void Main() { // initialize delegate DelegateName delegateName = new DelegateName(DoSomethingMethod); // method 1 delegateName(argName_contents); // must pass in argument DelegateName delegateName2 = DoSomethingMethod; // method 2 delegateName2(argName_contents); // must pass in argument DelegateName delegateName3 = DoSomethingMethod; RunDelegate(delegateName3); // method 3 DelegateName delegateName4 = GetMyDelegate(); // method 4 RunDelegate(delegateName4); DelegateName delegateName5 = delegate(dataType argName) { doSomethingWith_argName; } // method 5: using anonymous methods delegateName5(argName_contents); DelegateName delegateName6 = delegate(dataType argName) { return doSomethingWith_argName; } // method 6: return value with anonymous methods dataType variableName = delegateName6(argName_contents); DelegateName delegateName7 = (dataType argName) =&gt; { return doSomethingWith_argName; } // method 7: return value with lambda expression dataType variableName = delegateName7(argName_contents); } public static void DoSomethingMethod(dataType argName) { // dataType must be the same as the delegate doSomethingWith_argName; } public static void RunDelegate(DelegateName delegateName3) { delegateName3(argName_contents); // must pass in argument } public static DelegateName GetMyDelegate() { return new DelegateName(DoSomethingMethod); } } // usage example public delegate void Operation(int num); class MainClass { public static void Main(string[] args) { // method 1 Operation op = Double; ExecuteOperation(2, op); // result 4, display 4 op = Triple; ExecuteOperation(2, op); // result 6, display 46 // method 2: use chaining Operation op2 = Double; op2 += Triple; ExecuteOperation(2, op2); // 46 } public static void Double(int num) { System.Console.Write(num * 2); } public static void Triple(int num) { System.Console.Write(num * 3); } public static void ExecuteOperation(int num, Operation operation) { operation(num); } }  Generic Delegates Action: does not return a valueFunc: returns a value class MainClass { public static void Main(string[] args) { // Declares delegate and operation in 1 line, does not return a value System.Action&lt;int&gt; op = num =&gt; { System.Console.WriteLine(num * 2); }; // similar to the Double example above op(3); // 4 // Declares delegate and operation in 1 line, returns a value // set input dataTypes first then output dataType System.Func&lt;int, int&gt; op2 = num =&gt; { return num * 3; }; System.Console.WriteLine(op2(2)); // 6 } }  Events it is a way for 1 object to subscribe to events that are happening within another object and then do some sort of logic around that // naive way of writing events public class Person { private string _name; private ClockTower _tower; public Person(string name, ClockTower tower) { _name = name; _tower = tower; // chain events _tower.Chime += () =&gt; System.Console.WriteLine($&quot;{_name} heard the chime.&quot;); } } public delegate void ChimeEventHandler(); public class ClockTower { public event ChimeEventHandler Chime; // more events can be created to handle the different chime timings but it is hard coding public void ChimeFivePM() { Chime(); } public void ChimeSixAM() { Chime(); } } class MainClass { static void Main(string[] args) { // 1 tower ClockTower tower = new ClockTower(); // 1 tower watched by multiple People Person person1 = new Person(&quot;John&quot;, tower); Person person2 = new Person(&quot;Sally&quot;, tower); tower.ChimeFivePM(); // can't tell the difference between the 2 events /* John heard the chime. Sally heard the chime. */ tower.ChimeSixAM(); // can't tell the difference between the 2 events /* John heard the chime. Sally heard the chime. */ } } // Using Event args public class Person { // subscriber private string _name; private ClockTower _tower; public Person(string name, ClockTower tower) { _name = name; _tower = tower; // chain events with += // use event args in switch case to manage multiple cases _tower.Chime += (object sender, ClockTowerEventArgs args) =&gt; { System.Console.WriteLine($&quot;{_name} heard the chime from {((ClockTower)sender).name}.&quot;); switch(args.Time) { case 6: System.Console.WriteLine($&quot;{_name} is waking up!&quot;); break; case 17: System.Console.WriteLine($&quot;{_name} is going home!&quot;); break; default: break; } }; } } public class ClockTowerEventArgs : System.EventArgs { // create event class to distinsh between multiple cases public int Time { get; set; } } public delegate void ChimeEventHandler(object sender, ClockTowerEventArgs args); // add event args to enable handling of multiple cases for 1 event type public class ClockTower { // publisher public string name = &quot;tower A&quot;; public event ChimeEventHandler Chime; // 1 event type to handle multiple cases public void ChimeFivePM() { Chime(this, new ClockTowerEventArgs { Time = 17 }); // use event class to create unique case } public void ChimeSixAM() { Chime(this, new ClockTowerEventArgs { Time = 6 }); // use event class to create unique case } } class MainClass { static void Main(string[] args) { // 1 tower ClockTower tower = new ClockTower(); // 1 tower watched by multiple People Person person1 = new Person(&quot;John&quot;, tower); Person person2 = new Person(&quot;Sally&quot;, tower); tower.ChimeSixAM(); /* John heard the chime from tower A. John is waking up! Sally heard the chime from tower A. Sally is waking up! */ tower.ChimeFivePM(); /* John heard the chime from tower A. John is going home! Sally heard the chime from tower A. Sally is going home! */ } } // Using System.EventHandler (auto generate delegates) public class Person { // subscriber private string _name; private ClockTower _tower; public Person(string name, ClockTower tower) { _name = name; _tower = tower; // chain events with += // use event args in switch case to manage multiple cases _tower.Chime += (object sender, ClockTowerEventArgs args) =&gt; { System.Console.WriteLine($&quot;{_name} heard the chime from {((ClockTower)sender).name}.&quot;); switch(args.Time) { case 6: System.Console.WriteLine($&quot;{_name} is waking up!&quot;); break; case 17: System.Console.WriteLine($&quot;{_name} is going home!&quot;); break; default: break; } }; } } public class ClockTowerEventArgs : System.EventArgs { // create event class to distinsh between multiple cases public int Time { get; set; } } // public delegate void ChimeEventHandler(object sender, ClockTowerEventArgs args); // not required public class ClockTower { public string name = &quot;tower A&quot;; // public event ChimeEventHandler Chime; // convert to the following public event System.EventHandler&lt;ClockTowerEventArgs&gt; Chime; // by using Sysmtem.EventHandler it handles the delegate declaration for us public void ChimeFivePM() { Chime(this, new ClockTowerEventArgs { Time = 17 }); } public void ChimeSixAM() { Chime(this, new ClockTowerEventArgs { Time = 6 }); } } class MainClass { static void Main(string[] args) { ClockTower tower = new ClockTower(); Person person1 = new Person(&quot;John&quot;, tower); Person person2 = new Person(&quot;Sally&quot;, tower); tower.ChimeSixAM(); tower.ChimeFivePM(); } }  Extension methods allow us to add methods to an existing class without changing its source code or creating a new class that inherits from itif have source code, modify source code instead of creating extension methods public class Person { // given to us by others, this source code we can't see or modify directly public string Name { get; set; } public int Age { get; set; } } public static class Extensions { // creates an extension of the Person class by using the static in class declaration public static void SayHello(this Person person, Person person2) { // this keyword must be added only for the 1st arg System.Console.WriteLine($&quot;{person.Name} says hello to {person2.Name}&quot;); } } class MainClass { static void Main(string[] args) { Person p = new Person { Name = &quot;John&quot;, Age = 21 }; Person p2 = new Person { Name = &quot;Sally&quot;, Age = 25 }; p.SayHello(p2); // &quot;John says hello to Sally&quot; } }  LINQ: Language Integrated Query gives the capability to query objectscan qury objects in memory, eg collections (LINQ to Objects)Databases (LINQ to Entities)XML (LINQ to XML)ADO.NET Data Sets (LINQ to Data Sets) keywords where: set conditionsorderby ascending order orderby variableName descending order orderby variableName descending select cannot be used with group keywordquery result will become an array of valuesmust end with a ; select variableName; group cannot be used with select keywordquery result will become an array of dictionariesmust end with a ; group variableName by variableName;  // simple example using System.Linq; // this is required for query usage class MainClass { public static void Main() { string sample = &quot;The quick brown fox jumps over the lazy dog.&quot;; var resultArr = from c in sample.ToLower() where c== 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' orderby c select c; // group c by c; foreach (var c in resultArr) System.Console.WriteLine(c); // use for select to get value // System.Console.WriteLine(c.Key); // use for group to get value } } // realistic example using System.Linq; public class Person { public string FirstName { get; set; } public string LastName { get; set; } public int Age { get; set; } } class MainClass { public static void Main() { System.Collections.Generic.List&lt;Person&gt; people = new System.Collections.Generic.List&lt;Person&gt; { new Person{FirstName=&quot;John&quot;, LastName=&quot;Doe&quot;, Age=25}, new Person{FirstName=&quot;John2&quot;, LastName=&quot;Doe2&quot;, Age=26}, new Person{FirstName=&quot;John3&quot;, LastName=&quot;Doe3&quot;, Age=20}, }; // method 1: LINQ Query Operators var resultArr = from p in people where p.Age &lt; 25 select p; // method 2: LINQ Extension methods // var resultArr = person.Where(p =&gt; p.Age &lt; 25).Select(p =&gt; p); foreach (var item in resultArr) System.Console.WriteLine(item.FirstName); // prints out firstnames of those with age less than 25 } }  Reflection public class Sample { public string Name { get; set; } public int Age; public void MyMethod() { } } class Program { static void Main(string[] args) { var assembly = System.Reflection.Assembly.GetExecutingAssembly(); System.Console.WriteLine(assembly.FullName); // Override, Version=1.0.7333.32664, Culture=neutral, PublicKeyToken=null var types = assembly.GetTypes(); foreach (var type in types) { System.Console.WriteLine(&quot;class: &quot; + type.Name + &quot; BaseType: &quot; + type.BaseType); // class: Program BaseType: System.Object var props = type.GetProperties(); foreach (var prop in props) System.Console.WriteLine(&quot;Property name: &quot; + prop.Name + &quot; Property type: &quot; + prop.PropertyType); // Property name: Name Property type: System.String var fields = type.GetFields(); foreach (var field in fields) System.Console.WriteLine(&quot;Field: &quot; + field.Name); // Field: Age var methods = type.GetMethods(); foreach (var method in methods) System.Console.WriteLine(&quot;Method: &quot; + method.Name); /* // class: Program Method: Equals Method: GetHashCode Method: GetType Method: ToString // class: Sample Method: get_Name Method: set_Name Method: MyMethod Method: Equals Method: GetHashCode Method: GetType Method: ToString */ } } }  "},{"title":"c++​","type":1,"pageTitle":"PROGRAMMING LANGUAGE SYNTAX COMPARISON","url":"docs/#c-77","content":"References // using without references int num = 10; int newNum = num; num++; // num = 11, newNum = 10 newNum++; // num = 11, newNum = 11 // using references int num = 10; int&amp; referenceNum = num; // add &amp; when referencing num++; // num = 11, referenceNum = 11 referenceNum++; // num = 12, referenceNum = 12  back to top "},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/python/example2","content":"Example 2 class WindowInterface: def build(self): pass class AbstractWindowDecorator(WindowInterface): &quot;&quot;&quot; Maintains a reference to a window object and define an interface that conforms to a window's interface. &quot;&quot;&quot; def __init__(self, window): self._window = window def build(self): pass class Window(WindowInterface): def build(self): print(&quot;Building window&quot;) class BorderDecorator(AbstractWindowDecorator): def add_border(self): print(&quot;Adding border&quot;) def build(self): self.add_border() self._window.build() class VerticalSBDecorator(AbstractWindowDecorator): def add_vertical_scroll_bar(self): print(&quot;Adding vertical scroll bar&quot;) def build(self): self.add_vertical_scroll_bar() self._window.build() class HorizontalSBDecorator(AbstractWindowDecorator): def add_horizontal_scroll_bar(self): print(&quot;Adding horizontal scroll bar&quot;) def build(self): self.add_horizontal_scroll_bar() self._window.build() from Decorator import Window, BorderDecorator, VerticalSBDecorator, HorizontalSBDecorator # Build a window w = Window() w.build() # Add a border to the window before building a window wb = BorderDecorator(w) wb.build() # Add a vertical scroll, then border before building a window wbv = VerticalSBDecorator(wb) wbv.build() # Add a horizontal scroll, then vertical scroll, then border before building a window best_window = HorizontalSBDecorator(wbv) best_window.build() ","keywords":""},{"title":"Example 3","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/python/example3","content":"Example 3 class Component: &quot;&quot;&quot; The base Component interface defines operations that can be altered by decorators. &quot;&quot;&quot; def operation(self) -&gt; str: pass from Component import Component class Decorator(Component): &quot;&quot;&quot; The base Decorator class follows the same interface as the other components. The primary purpose of this class is to define the wrapping interface for all concrete decorators. The default implementation of the wrapping code might include a field for storing a wrapped component and the means to initialize it. &quot;&quot;&quot; _component: Component = None def __init__(self, component: Component) -&gt; None: self._component = component @property def component(self) -&gt; str: &quot;&quot;&quot; The Decorator delegates all work to the wrapped component. &quot;&quot;&quot; return self._component def operation(self) -&gt; str: return self._component.operation() from Component import Component class ConcreteComponent(Component): &quot;&quot;&quot; Concrete Components provide default implementations of the operations. There might be several variations of these classes. &quot;&quot;&quot; def operation(self) -&gt; str: return &quot;ConcreteComponent&quot; from Decorator import Decorator class ConcreteDecoratorA(Decorator): &quot;&quot;&quot; Concrete Decorators call the wrapped object and alter its result in some way. &quot;&quot;&quot; def operation(self) -&gt; str: &quot;&quot;&quot; Decorators may call parent implementation of the operation, instead of calling the wrapped object directly. This approach simplifies extension of decorator classes. &quot;&quot;&quot; return f&quot;ConcreteDecoratorA({self.component.operation()})&quot; from Decorator import Decorator class ConcreteDecoratorB(Decorator): &quot;&quot;&quot; Decorators can execute their behavior either before or after the call to a wrapped object. &quot;&quot;&quot; def operation(self) -&gt; str: return f&quot;ConcreteDecoratorB({self.component.operation()})&quot; &quot;&quot;&quot; Decorator Design Pattern Intent: Lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors. &quot;&quot;&quot; from Component import Component from ConcreteComponent import ConcreteComponent from ConcreteDecoratorA import ConcreteDecoratorA from ConcreteDecoratorB import ConcreteDecoratorB def client_code(component: Component) -&gt; None: &quot;&quot;&quot; The client code works with all objects using the Component interface. This way it can stay independent of the concrete classes of components it works with. &quot;&quot;&quot; # ... print(f&quot;RESULT: {component.operation()}&quot;, end=&quot;&quot;) # ... if __name__ == &quot;__main__&quot;: # This way the client code can support both simple components... simple = ConcreteComponent() print(&quot;Client: I've got a simple component:&quot;) client_code(simple) print(&quot;\\n&quot;) # ...as well as decorated ones. # # Note how decorators can wrap not only simple components but the other # decorators as well. decorator1 = ConcreteDecoratorA(simple) decorator2 = ConcreteDecoratorB(decorator1) print(&quot;Client: Now I've got a decorated component:&quot;) client_code(decorator2) ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/swift/","content":"Swift Example /// Decorator Design Pattern /// /// Intent: Lets you attach new behaviors to objects by placing these objects /// inside special wrapper objects that contain the behaviors. import XCTest /// The base Component interface defines operations that can be altered by /// decorators. protocol Component { func operation() -&gt; String } /// Concrete Components provide default implementations of the operations. There /// might be several variations of these classes. class ConcreteComponent: Component { func operation() -&gt; String { return &quot;ConcreteComponent&quot; } } /// The base Decorator class follows the same interface as the other components. /// The primary purpose of this class is to define the wrapping interface for /// all concrete decorators. The default implementation of the wrapping code /// might include a field for storing a wrapped component and the means to /// initialize it. class Decorator: Component { private var component: Component init(_ component: Component) { self.component = component } /// The Decorator delegates all work to the wrapped component. func operation() -&gt; String { return component.operation() } } /// Concrete Decorators call the wrapped object and alter its result in some /// way. class ConcreteDecoratorA: Decorator { /// Decorators may call parent implementation of the operation, instead of /// calling the wrapped object directly. This approach simplifies extension /// of decorator classes. override func operation() -&gt; String { return &quot;ConcreteDecoratorA(&quot; + super.operation() + &quot;)&quot; } } /// Decorators can execute their behavior either before or after the call to a /// wrapped object. class ConcreteDecoratorB: Decorator { override func operation() -&gt; String { return &quot;ConcreteDecoratorB(&quot; + super.operation() + &quot;)&quot; } } /// The client code works with all objects using the Component interface. This /// way it can stay independent of the concrete classes of components it works /// with. class Client { // ... static func someClientCode(component: Component) { print(&quot;Result: &quot; + component.operation()) } // ... } /// Let's see how it all works together. class DecoratorConceptual: XCTestCase { func testDecoratorConceptual() { // This way the client code can support both simple components... print(&quot;Client: I've got a simple component&quot;) let simple = ConcreteComponent() Client.someClientCode(component: simple) // ...as well as decorated ones. // // Note how decorators can wrap not only simple components but the other // decorators as well. let decorator1 = ConcreteDecoratorA(simple) let decorator2 = ConcreteDecoratorB(decorator1) print(&quot;\\nClient: Now I've got a decorated component&quot;) Client.someClientCode(component: decorator2) } } Client: I've got a simple component Result: ConcreteComponent Client: Now I've got a decorated component Result: ConcreteDecoratorB(ConcreteDecoratorA(ConcreteComponent)) ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/swift/example2","content":"Example 2 import UIKit import XCTest protocol ImageEditor: CustomStringConvertible { func apply() -&gt; UIImage } class ImageDecorator: ImageEditor { private var editor: ImageEditor required init(_ editor: ImageEditor) { self.editor = editor } func apply() -&gt; UIImage { print(editor.description + &quot; applies changes&quot;) return editor.apply() } var description: String { return &quot;ImageDecorator&quot; } } extension UIImage: ImageEditor { func apply() -&gt; UIImage { return self } open override var description: String { return &quot;Image&quot; } } class BaseFilter: ImageDecorator { fileprivate var filter: CIFilter? init(editor: ImageEditor, filterName: String) { self.filter = CIFilter(name: filterName) super.init(editor) } required init(_ editor: ImageEditor) { super.init(editor) } override func apply() -&gt; UIImage { let image = super.apply() let context = CIContext(options: nil) filter?.setValue(CIImage(image: image), forKey: kCIInputImageKey) guard let output = filter?.outputImage else { return image } guard let coreImage = context.createCGImage(output, from: output.extent) else { return image } return UIImage(cgImage: coreImage) } override var description: String { return &quot;BaseFilter&quot; } } class BlurFilter: BaseFilter { required init(_ editor: ImageEditor) { super.init(editor: editor, filterName: &quot;CIGaussianBlur&quot;) } func update(radius: Double) { filter?.setValue(radius, forKey: &quot;inputRadius&quot;) } override var description: String { return &quot;BlurFilter&quot; } } class ColorFilter: BaseFilter { required init(_ editor: ImageEditor) { super.init(editor: editor, filterName: &quot;CIColorControls&quot;) } func update(saturation: Double) { filter?.setValue(saturation, forKey: &quot;inputSaturation&quot;) } func update(brightness: Double) { filter?.setValue(brightness, forKey: &quot;inputBrightness&quot;) } func update(contrast: Double) { filter?.setValue(contrast, forKey: &quot;inputContrast&quot;) } override var description: String { return &quot;ColorFilter&quot; } } class Resizer: ImageDecorator { private var xScale: CGFloat = 0 private var yScale: CGFloat = 0 private var hasAlpha = false convenience init(_ editor: ImageEditor, xScale: CGFloat = 0, yScale: CGFloat = 0, hasAlpha: Bool = false) { self.init(editor) self.xScale = xScale self.yScale = yScale self.hasAlpha = hasAlpha } required init(_ editor: ImageEditor) { super.init(editor) } override func apply() -&gt; UIImage { let image = super.apply() let size = image.size.applying(CGAffineTransform(scaleX: xScale, y: yScale)) UIGraphicsBeginImageContextWithOptions(size, !hasAlpha, UIScreen.main.scale) image.draw(in: CGRect(origin: .zero, size: size)) let scaledImage = UIGraphicsGetImageFromCurrentImageContext() UIGraphicsEndImageContext() return scaledImage ?? image } override var description: String { return &quot;Resizer&quot; } } class DecoratorRealWorld: XCTestCase { func testDecoratorRealWorld() { let image = loadImage() print(&quot;Client: set up an editors stack&quot;) let resizer = Resizer(image, xScale: 0.2, yScale: 0.2) let blurFilter = BlurFilter(resizer) blurFilter.update(radius: 2) let colorFilter = ColorFilter(blurFilter) colorFilter.update(contrast: 0.53) colorFilter.update(brightness: 0.12) colorFilter.update(saturation: 4) clientCode(editor: colorFilter) } func clientCode(editor: ImageEditor) { let image = editor.apply() /// Note. You can stop an execution in Xcode to see an image preview. print(&quot;Client: all changes have been applied for \\(image)&quot;) } } private extension DecoratorRealWorld { func loadImage() -&gt; UIImage { let urlString = &quot;https:// refactoring.guru/images/content-public/logos/logo-new-3x.png&quot; /// Note: /// Do not download images the following way in a production code. guard let url = URL(string: urlString) else { fatalError(&quot;Please enter a valid URL&quot;) } guard let data = try? Data(contentsOf: url) else { fatalError(&quot;Cannot load an image&quot;) } guard let image = UIImage(data: data) else { fatalError(&quot;Cannot create an image from data&quot;) } return image } } Client: set up an editors stack BlurFilter applies changes Resizer applies changes Image applies changes Client: all changes have been applied for Image ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Decorator/typescript/","content":"TypeScript Example /** * Decorator Design Pattern * * Intent: Lets you attach new behaviors to objects by placing these objects * inside special wrapper objects that contain the behaviors. */ /** * The base Component interface defines operations that can be altered by * decorators. */ interface Component { operation(): string; } /** * Concrete Components provide default implementations of the operations. There * might be several variations of these classes. */ class ConcreteComponent implements Component { public operation(): string { return &quot;ConcreteComponent&quot;; } } /** * The base Decorator class follows the same interface as the other components. * The primary purpose of this class is to define the wrapping interface for all * concrete decorators. The default implementation of the wrapping code might * include a field for storing a wrapped component and the means to initialize * it. */ class Decorator implements Component { protected component: Component; constructor(component: Component) { this.component = component; } /** * The Decorator delegates all work to the wrapped component. */ public operation(): string { return this.component.operation(); } } /** * Concrete Decorators call the wrapped object and alter its result in some way. */ class ConcreteDecoratorA extends Decorator { /** * Decorators may call parent implementation of the operation, instead of * calling the wrapped object directly. This approach simplifies extension * of decorator classes. */ public operation(): string { return `ConcreteDecoratorA(${super.operation()})`; } } /** * Decorators can execute their behavior either before or after the call to a * wrapped object. */ class ConcreteDecoratorB extends Decorator { public operation(): string { return `ConcreteDecoratorB(${super.operation()})`; } } /** * The client code works with all objects using the Component interface. This * way it can stay independent of the concrete classes of components it works * with. */ function clientCode(component: Component) { // ... console.log(`RESULT: ${component.operation()}`); // ... } /** * This way the client code can support both simple components... */ const simple = new ConcreteComponent(); console.log(&quot;Client: I've got a simple component:&quot;); clientCode(simple); console.log(&quot;&quot;); /** * ...as well as decorated ones. * * Note how decorators can wrap not only simple components but the other * decorators as well. */ const decorator1 = new ConcreteDecoratorA(simple); const decorator2 = new ConcreteDecoratorB(decorator1); console.log(&quot;Client: Now I've got a decorated component:&quot;); clientCode(decorator2); Client: I've got a simple component: RESULT: ConcreteComponent Client: Now I've got a decorated component: RESULT: ConcreteDecoratorB(ConcreteDecoratorA(ConcreteComponent)) ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Composite/java/","content":"Java Example editor editor/ImageEditor.java package refactoring_guru.composite.example.editor; import refactoring_guru.composite.example.shapes.CompoundShape; import refactoring_guru.composite.example.shapes.Shape; import javax.swing.*; import javax.swing.border.Border; import java.awt.*; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; public class ImageEditor { private EditorCanvas canvas; private CompoundShape allShapes = new CompoundShape(); public ImageEditor() { canvas = new EditorCanvas(); } public void loadShapes(Shape... shapes) { allShapes.clear(); allShapes.add(shapes); canvas.refresh(); } private class EditorCanvas extends Canvas { JFrame frame; private static final int PADDING = 10; EditorCanvas() { createFrame(); refresh(); addMouseListener(new MouseAdapter() { @Override public void mousePressed(MouseEvent e) { allShapes.unSelect(); allShapes.selectChildAt(e.getX(), e.getY()); e.getComponent().repaint(); } }); } void createFrame() { frame = new JFrame(); frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); frame.setLocationRelativeTo(null); JPanel contentPanel = new JPanel(); Border padding = BorderFactory.createEmptyBorder(PADDING, PADDING, PADDING, PADDING); contentPanel.setBorder(padding); frame.setContentPane(contentPanel); frame.add(this); frame.setVisible(true); frame.getContentPane().setBackground(Color.LIGHT_GRAY); } public int getWidth() { return allShapes.getX() + allShapes.getWidth() + PADDING; } public int getHeight() { return allShapes.getY() + allShapes.getHeight() + PADDING; } void refresh() { this.setSize(getWidth(), getHeight()); frame.pack(); } public void paint(Graphics graphics) { allShapes.paint(graphics); } } } shapes shapes/BaseShape.java package refactoring_guru.composite.example.shapes; import java.awt.*; abstract class BaseShape implements Shape { public int x; public int y; public Color color; private boolean selected = false; BaseShape(int x, int y, Color color) { this.x = x; this.y = y; this.color = color; } @Override public int getX() { return x; } @Override public int getY() { return y; } @Override public int getWidth() { return 0; } @Override public int getHeight() { return 0; } @Override public void move(int x, int y) { this.x += x; this.y += y; } @Override public boolean isInsideBounds(int x, int y) { return x &gt; getX() &amp;&amp; x &lt; (getX() + getWidth()) &amp;&amp; y &gt; getY() &amp;&amp; y &lt; (getY() + getHeight()); } @Override public void select() { selected = true; } @Override public void unSelect() { selected = false; } @Override public boolean isSelected() { return selected; } void enableSelectionStyle(Graphics graphics) { graphics.setColor(Color.LIGHT_GRAY); Graphics2D g2 = (Graphics2D) graphics; float dash1[] = {2.0f}; g2.setStroke(new BasicStroke(1.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 2.0f, dash1, 0.0f)); } void disableSelectionStyle(Graphics graphics) { graphics.setColor(color); Graphics2D g2 = (Graphics2D) graphics; g2.setStroke(new BasicStroke()); } @Override public void paint(Graphics graphics) { if (isSelected()) { enableSelectionStyle(graphics); } else { disableSelectionStyle(graphics); } // ... } } ``` shapes/Circle.java package refactoring_guru.composite.example.shapes; import java.awt.*; public class Circle extends BaseShape { public int radius; public Circle(int x, int y, int radius, Color color) { super(x, y, color); this.radius = radius; } @Override public int getWidth() { return radius * 2; } @Override public int getHeight() { return radius * 2; } public void paint(Graphics graphics) { super.paint(graphics); graphics.drawOval(x, y, getWidth() - 1, getHeight() - 1); } } shapes/CompoundShape.java package refactoring_guru.composite.example.shapes; import java.awt.*; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class CompoundShape extends BaseShape { protected List&lt;Shape&gt; children = new ArrayList&lt;&gt;(); public CompoundShape(Shape... components) { super(0, 0, Color.BLACK); add(components); } public void add(Shape component) { children.add(component); } public void add(Shape... components) { children.addAll(Arrays.asList(components)); } public void remove(Shape child) { children.remove(child); } public void remove(Shape... components) { children.removeAll(Arrays.asList(components)); } public void clear() { children.clear(); } @Override public int getX() { if (children.size() == 0) { return 0; } int x = children.get(0).getX(); for (Shape child : children) { if (child.getX() &lt; x) { x = child.getX(); } } return x; } @Override public int getY() { if (children.size() == 0) { return 0; } int y = children.get(0).getY(); for (Shape child : children) { if (child.getY() &lt; y) { y = child.getY(); } } return y; } @Override public int getWidth() { int maxWidth = 0; int x = getX(); for (Shape child : children) { int childsRelativeX = child.getX() - x; int childWidth = childsRelativeX + child.getWidth(); if (childWidth &gt; maxWidth) { maxWidth = childWidth; } } return maxWidth; } @Override public int getHeight() { int maxHeight = 0; int y = getY(); for (Shape child : children) { int childsRelativeY = child.getY() - y; int childHeight = childsRelativeY + child.getHeight(); if (childHeight &gt; maxHeight) { maxHeight = childHeight; } } return maxHeight; } @Override public void move(int x, int y) { for (Shape child : children) { child.move(x, y); } } @Override public boolean isInsideBounds(int x, int y) { for (Shape child : children) { if (child.isInsideBounds(x, y)) { return true; } } return false; } @Override public void unSelect() { super.unSelect(); for (Shape child : children) { child.unSelect(); } } public boolean selectChildAt(int x, int y) { for (Shape child : children) { if (child.isInsideBounds(x, y)) { child.select(); return true; } } return false; } @Override public void paint(Graphics graphics) { if (isSelected()) { enableSelectionStyle(graphics); graphics.drawRect(getX() - 1, getY() - 1, getWidth() + 1, getHeight() + 1); disableSelectionStyle(graphics); } for (refactoring_guru.composite.example.shapes.Shape child : children) { child.paint(graphics); } } } shapes/Dot.java package refactoring_guru.composite.example.shapes; import java.awt.*; public class Dot extends BaseShape { private final int DOT_SIZE = 3; public Dot(int x, int y, Color color) { super(x, y, color); } @Override public int getWidth() { return DOT_SIZE; } @Override public int getHeight() { return DOT_SIZE; } @Override public void paint(Graphics graphics) { super.paint(graphics); graphics.fillRect(x - 1, y - 1, getWidth(), getHeight()); } } shapes/Rectangle.java package refactoring_guru.composite.example.shapes; import java.awt.*; public class Rectangle extends BaseShape { public int width; public int height; public Rectangle(int x, int y, int width, int height, Color color) { super(x, y, color); this.width = width; this.height = height; } @Override public int getWidth() { return width; } @Override public int getHeight() { return height; } @Override public void paint(Graphics graphics) { super.paint(graphics); graphics.drawRect(x, y, getWidth() - 1, getHeight() - 1); } } shapes/Shape.java package refactoring_guru.composite.example.shapes; import java.awt.*; public interface Shape { int getX(); int getY(); int getWidth(); int getHeight(); void move(int x, int y); boolean isInsideBounds(int x, int y); void select(); void unSelect(); boolean isSelected(); void paint(Graphics graphics); } Demo.java package refactoring_guru.composite.example; import refactoring_guru.composite.example.editor.ImageEditor; import refactoring_guru.composite.example.shapes.Circle; import refactoring_guru.composite.example.shapes.CompoundShape; import refactoring_guru.composite.example.shapes.Dot; import refactoring_guru.composite.example.shapes.Rectangle; import java.awt.*; public class Demo { public static void main(String[] args) { ImageEditor editor = new ImageEditor(); editor.loadShapes( new Circle(10, 10, 10, Color.BLUE), new CompoundShape( new Circle(110, 110, 50, Color.RED), new Dot(160, 160, Color.RED) ), new CompoundShape( new Rectangle(250, 250, 100, 100, Color.GREEN), new Dot(240, 240, Color.GREEN), new Dot(240, 360, Color.GREEN), new Dot(360, 360, Color.GREEN), new Dot(360, 240, Color.GREEN) ) ); } } ","keywords":""},{"title":"Facade","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/","content":"","keywords":""},{"title":"Structure​","type":1,"pageTitle":"Facade","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/#structure","content":" The Facade provides convenient access to a particular part of the subsystem’s functionality. It knows where to direct the client’s request and how to operate all the moving parts. An Additional Facade class can be created to prevent polluting a single facade with unrelated features that might make it yet another complex structure. Additional facades can be used by both clients and other facades. The Complex Subsystem consists of dozens of various objects. To make them all do something meaningful, you have to dive deep into the subsystem’s implementation details, such as initializing objects in the correct order and supplying them with data in the proper format.Subsystem classes aren’t aware of the facade’s existence.They operate within the system and work with each other directly. The Client uses the facade instead of calling the subsystem objects directly. "},{"title":"Why use​","type":1,"pageTitle":"Facade","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/#why-use","content":"make a library easier to use, understand, and test since the facade has convenient methods for common tasks reduce dependencies of outside code on the inner workings of a library allowing more flexibility in developing the system wrap a poorly designed collection of APIs with a single well-designed API "},{"title":"When to apply​","type":1,"pageTitle":"Facade","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/#when-to-apply","content":"when need a limited but straightforward interface to a complex subsystemto structure a subsystem into layers: create facades to define entry points to each level of a subsystem You can reduce coupling between multiple subsystems by requiring them to communicate only through facades "},{"title":"Pros and Cons​","type":1,"pageTitle":"Facade","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/#pros-and-cons","content":"pros\tconsyou can isolate your code from the complexity of a subsystem\ta facade can become a god object coupled to all classes of an app "},{"title":"Example​","type":1,"pageTitle":"Facade","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/#example","content":"class Computer { public getElectricShock() { return &quot;Ouch!&quot;; } public makeSound() { return &quot;Beep beep!&quot;; } public showLoadingScreen() { return &quot;Loading..&quot;; } public bam() { return &quot;Ready to be used!&quot;; } public closeEverything() { return &quot;Zzzzzz bup&quot;; } public sooth() { return &quot;shhshh&quot;; } }  class ComputerFacade { constructor(protected computer: Computer) {} public turnOn() { this.computer.getElectricShock(); this.computer.makeSound(); this.computer.showLoadingScreen(); this.computer.bam(); } public turnOff() { this.computer.closeEverything(); this.computer.sooth(); } } const computer = new ComputerFacade(new Computer()); computer.turnOn(); computer.turnOff();  "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; #include &lt;string&gt; /** * Facade Design Pattern * * Intent: Provides a simplified interface to a library, a framework, or any * other complex set of classes. */ /** * The Subsystem can accept requests either from the facade or client directly. * In any case, to the Subsystem, the Facade is yet another client, and it's not * a part of the Subsystem. */ class Subsystem1 { public: std::string Operation1() const { return &quot;Subsystem1: Ready!\\n&quot;; } // ... std::string OperationN() const { return &quot;Subsystem1: Go!\\n&quot;; } }; /** * Some facades can work with multiple subsystems at the same time. */ class Subsystem2 { public: std::string Operation1() const { return &quot;Subsystem2: Get ready!\\n&quot;; } // ... std::string OperationZ() const { return &quot;Subsystem2: Fire!\\n&quot;; } }; /** * The Facade class provides a simple interface to the complex logic of one or * several subsystems. The Facade delegates the client requests to the * appropriate objects within the subsystem. The Facade is also responsible for * managing their lifecycle. All of this shields the client from the undesired * complexity of the subsystem. */ class Facade { protected: Subsystem1 *subsystem1_; Subsystem2 *subsystem2_; /** * Depending on your application's needs, you can provide the Facade with * existing subsystem objects or force the Facade to create them on its own. */ public: /** * In this case we will delegate the memory ownership to Facade Class */ Facade( Subsystem1 *subsystem1 = nullptr, Subsystem2 *subsystem2 = nullptr) { this-&gt;subsystem1_ = subsystem1 ?: new Subsystem1; this-&gt;subsystem2_ = subsystem2 ?: new Subsystem2; } ~Facade() { delete subsystem1_; delete subsystem2_; } /** * The Facade's methods are convenient shortcuts to the sophisticated * functionality of the subsystems. However, clients get only to a fraction of * a subsystem's capabilities. */ std::string Operation() { std::string result = &quot;Facade initializes subsystems:\\n&quot;; result += this-&gt;subsystem1_-&gt;Operation1(); result += this-&gt;subsystem2_-&gt;Operation1(); result += &quot;Facade orders subsystems to perform the action:\\n&quot;; result += this-&gt;subsystem1_-&gt;OperationN(); result += this-&gt;subsystem2_-&gt;OperationZ(); return result; } }; /** * The client code works with complex subsystems through a simple interface * provided by the Facade. When a facade manages the lifecycle of the subsystem, * the client might not even know about the existence of the subsystem. This * approach lets you keep the complexity under control. */ void ClientCode(Facade *facade) { // ... std::cout &lt;&lt; facade-&gt;Operation(); // ... } /** * The client code may have some of the subsystem's objects already created. In * this case, it might be worthwhile to initialize the Facade with these objects * instead of letting the Facade create new instances. */ int main() { Subsystem1 *subsystem1 = new Subsystem1; Subsystem2 *subsystem2 = new Subsystem2; Facade *facade = new Facade(subsystem1, subsystem2); ClientCode(facade); delete facade; return 0; } Facade initializes subsystems: Subsystem1: Ready! Subsystem2: Get ready! Facade orders subsystems to perform the action: Subsystem1: Go! Subsystem2: Fire! ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/cSharp/","content":"C# Example // Facade Design Pattern // // Intent: Provides a simplified interface to a library, a framework, or any // other complex set of classes. using System; namespace RefactoringGuru.DesignPatterns.Facade.Conceptual { // The Facade class provides a simple interface to the complex logic of one // or several subsystems. The Facade delegates the client requests to the // appropriate objects within the subsystem. The Facade is also responsible // for managing their lifecycle. All of this shields the client from the // undesired complexity of the subsystem. public class Facade { protected Subsystem1 _subsystem1; protected Subsystem2 _subsystem2; public Facade(Subsystem1 subsystem1, Subsystem2 subsystem2) { this._subsystem1 = subsystem1; this._subsystem2 = subsystem2; } // The Facade's methods are convenient shortcuts to the sophisticated // functionality of the subsystems. However, clients get only to a // fraction of a subsystem's capabilities. public string Operation() { string result = &quot;Facade initializes subsystems:\\n&quot;; result += this._subsystem1.operation1(); result += this._subsystem2.operation1(); result += &quot;Facade orders subsystems to perform the action:\\n&quot;; result += this._subsystem1.operationN(); result += this._subsystem2.operationZ(); return result; } } // The Subsystem can accept requests either from the facade or client // directly. In any case, to the Subsystem, the Facade is yet another // client, and it's not a part of the Subsystem. public class Subsystem1 { public string operation1() { return &quot;Subsystem1: Ready!\\n&quot;; } public string operationN() { return &quot;Subsystem1: Go!\\n&quot;; } } // Some facades can work with multiple subsystems at the same time. public class Subsystem2 { public string operation1() { return &quot;Subsystem2: Get ready!\\n&quot;; } public string operationZ() { return &quot;Subsystem2: Fire!\\n&quot;; } } class Client { // The client code works with complex subsystems through a simple // interface provided by the Facade. When a facade manages the lifecycle // of the subsystem, the client might not even know about the existence // of the subsystem. This approach lets you keep the complexity under // control. public static void ClientCode(Facade facade) { Console.Write(facade.Operation()); } } class Program { static void Main(string[] args) { // The client code may have some of the subsystem's objects already // created. In this case, it might be worthwhile to initialize the // Facade with these objects instead of letting the Facade create // new instances. Subsystem1 subsystem1 = new Subsystem1(); Subsystem2 subsystem2 = new Subsystem2(); Facade facade = new Facade(subsystem1, subsystem2); Client.ClientCode(facade); } } } Facade initializes subsystems: Subsystem1: Ready! Subsystem2: Get ready! Facade orders subsystems to perform the action: Subsystem1: Go! Subsystem2: Fire! ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/go/","content":"Go Example package main import &quot;fmt&quot; type account struct { name string } func newAccount(accountName string) *account { return &amp;account{ name: accountName, } } func (a *account) checkAccount(accountName string) error { if a.name != accountName { return fmt.Errorf(&quot;Account Name is incorrect&quot;) } fmt.Println(&quot;Account Verified&quot;) return nil } package main import &quot;fmt&quot; type ledger struct { } func (s *ledger) makeEntry(accountID, txnType string, amount int) { fmt.Printf(&quot;Make ledger entry for accountId %s with txnType %s for amount %d\\n&quot;, accountID, txnType, amount) return } package main import &quot;fmt&quot; type notification struct { } func (n *notification) sendWalletCreditNotification() { fmt.Println(&quot;Sending wallet credit notification&quot;) } func (n *notification) sendWalletDebitNotification() { fmt.Println(&quot;Sending wallet debit notification&quot;) } package main import &quot;fmt&quot; type securityCode struct { code int } func newSecurityCode(code int) *securityCode { return &amp;securityCode{ code: code, } } func (s *securityCode) checkCode(incomingCode int) error { if s.code != incomingCode { return fmt.Errorf(&quot;Security Code is incorrect&quot;) } fmt.Println(&quot;SecurityCode Verified&quot;) return nil } package main import &quot;fmt&quot; type wallet struct { balance int } func newWallet() *wallet { return &amp;wallet{ balance: 0, } } func (w *wallet) creditBalance(amount int) { w.balance += amount fmt.Println(&quot;Wallet balance added successfully&quot;) return } func (w *wallet) debitBalance(amount int) error { if w.balance &lt; amount { return fmt.Errorf(&quot;Balance is not sufficient&quot;) } fmt.Println(&quot;Wallet balance is Sufficient&quot;) w.balance = w.balance - amount return nil } package main import &quot;fmt&quot; type walletFacade struct { account *account wallet *wallet securityCode *securityCode notification *notification ledger *ledger } func newWalletFacade(accountID string, code int) *walletFacade { fmt.Println(&quot;Starting create account&quot;) walletFacacde := &amp;walletFacade{ account: newAccount(accountID), securityCode: newSecurityCode(code), wallet: newWallet(), notification: &amp;notification{}, ledger: &amp;ledger{}, } fmt.Println(&quot;Account created&quot;) return walletFacacde } func (w *walletFacade) addMoneyToWallet(accountID string, securityCode int, amount int) error { fmt.Println(&quot;Starting add money to wallet&quot;) err := w.account.checkAccount(accountID) if err != nil { return err } err = w.securityCode.checkCode(securityCode) if err != nil { return err } w.wallet.creditBalance(amount) w.notification.sendWalletCreditNotification() w.ledger.makeEntry(accountID, &quot;credit&quot;, amount) return nil } func (w *walletFacade) deductMoneyFromWallet(accountID string, securityCode int, amount int) error { fmt.Println(&quot;Starting debit money from wallet&quot;) err := w.account.checkAccount(accountID) if err != nil { return err } err = w.securityCode.checkCode(securityCode) if err != nil { return err } err = w.wallet.debitBalance(amount) if err != nil { return err } w.notification.sendWalletDebitNotification() w.ledger.makeEntry(accountID, &quot;credit&quot;, amount) return nil } package main import ( &quot;fmt&quot; &quot;log&quot; ) func main() { fmt.Println() walletFacade := newWalletFacade(&quot;abc&quot;, 1234) fmt.Println() err := walletFacade.addMoneyToWallet(&quot;abc&quot;, 1234, 10) if err != nil { log.Fatalf(&quot;Error: %s\\n&quot;, err.Error()) } fmt.Println() err = walletFacade.deductMoneyFromWallet(&quot;abc&quot;, 1234, 5) if err != nil { log.Fatalf(&quot;Error: %s\\n&quot;, err.Error()) } } Starting create account Account created Starting add money to wallet Account Verified SecurityCode Verified Wallet balance added successfully Sending wallet credit notification Make ledger entry for accountId abc with txnType credit for amount 10 Starting debit money from wallet Account Verified SecurityCode Verified Wallet balance is Sufficient Sending wallet debit notification Make ledger entry for accountId abc with txnType debit for amount 5 ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/java/","content":"Java Example facade/VideoConversionFacade.java package refactoring_guru.facade.example.facade; import refactoring_guru.facade.example.some_complex_media_library.*; import java.io.File; public class VideoConversionFacade { public File convertVideo(String fileName, String format) { System.out.println(&quot;VideoConversionFacade: conversion started.&quot;); VideoFile file = new VideoFile(fileName); Codec sourceCodec = CodecFactory.extract(file); Codec destinationCodec; if (format.equals(&quot;mp4&quot;)) { destinationCodec = new OggCompressionCodec(); } else { destinationCodec = new MPEG4CompressionCodec(); } VideoFile buffer = BitrateReader.read(file, sourceCodec); VideoFile intermediateResult = BitrateReader.convert(buffer, destinationCodec); File result = (new AudioMixer()).fix(intermediateResult); System.out.println(&quot;VideoConversionFacade: conversion completed.&quot;); return result; } } someComplexMediaLibrary someComplexMediaLibrary/AudioMixer.java package refactoring_guru.facade.example.some_complex_media_library; import java.io.File; public class AudioMixer { public File fix(VideoFile result){ System.out.println(&quot;AudioMixer: fixing audio...&quot;); return new File(&quot;tmp&quot;); } } someComplexMediaLibrary/BitrateReader.java package refactoring_guru.facade.example.some_complex_media_library; public class BitrateReader { public static VideoFile read(VideoFile file, Codec codec) { System.out.println(&quot;BitrateReader: reading file...&quot;); return file; } public static VideoFile convert(VideoFile buffer, Codec codec) { System.out.println(&quot;BitrateReader: writing file...&quot;); return buffer; } } someComplexMediaLibrary/Codec.java package refactoring_guru.facade.example.some_complex_media_library; public interface Codec { } someComplexMediaLibrary/CodecFactory.java package refactoring_guru.facade.example.some_complex_media_library; public class CodecFactory { public static Codec extract(VideoFile file) { String type = file.getCodecType(); if (type.equals(&quot;mp4&quot;)) { System.out.println(&quot;CodecFactory: extracting mpeg audio...&quot;); return new MPEG4CompressionCodec(); } else { System.out.println(&quot;CodecFactory: extracting ogg audio...&quot;); return new OggCompressionCodec(); } } } someComplexMediaLibrary/MPEG4CompressionCodec.java package refactoring_guru.facade.example.some_complex_media_library; public class MPEG4CompressionCodec implements Codec { public String type = &quot;mp4&quot;; } someComplexMediaLibrary/OggCompressionCodec.java package refactoring_guru.facade.example.some_complex_media_library; public class OggCompressionCodec implements Codec { public String type = &quot;ogg&quot;; } someComplexMediaLibrary/VideoFile.java package refactoring_guru.facade.example.some_complex_media_library; public class VideoFile { private String name; private String codecType; public VideoFile(String name) { this.name = name; this.codecType = name.substring(name.indexOf(&quot;.&quot;) + 1); } public String getCodecType() { return codecType; } public String getName() { return name; } } Demo.java package refactoring_guru.facade.example; import refactoring_guru.facade.example.facade.VideoConversionFacade; import java.io.File; public class Demo { public static void main(String[] args) { VideoConversionFacade converter = new VideoConversionFacade(); File mp4Video = converter.convertVideo(&quot;youtubevideo.ogg&quot;, &quot;mp4&quot;); // ... } } VideoConversionFacade: conversion started. CodecFactory: extracting ogg audio... BitrateReader: reading file... BitrateReader: writing file... AudioMixer: fixing audio... VideoConversionFacade: conversion completed. ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/javascript/","content":"JavaScript Example class Engine { constructor() { // how much the motor is spinning in revs per minute this.spin = 0; } start(spin) { this.spin = Math.min(spin, 3000); } } class StarterMotor { constructor() { // how much the starter motor is spinning in revs per minute this.spin = 0; } start(charge) { // if there is enough power then spin fast if (charge &gt; 50) { this.spin = 2500; } } } class Battery { constructor() { // % charged, starts flat this.charge = 0; } } class Car { // the facade object that deals with the battery, engine and starter motor constructor() { this.battery = new Battery(); this.starter = new StarterMotor(); this.engine = new Engine(); } turnKey() { this.starter.start(this.battery.charge); this.engine.start(this.starter.spin); if (this.engine.spin &gt; 0) { console.log(&quot;Engine started&quot;); } else { console.log(&quot;Engine not started&quot;); } } jump() { this.battery.charge = 100; console.log(&quot;Jumped&quot;); } } module.exports = Car; const Car = require(&quot;./facade&quot;); const c = new Car(); c.turnKey(); // engine not started because there is no charge c.jump(); c.turnKey(); // engine starts because it has been charged ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/python/","content":"Python Example &quot;&quot;&quot; Facade Design Pattern Intent: Provides a simplified interface to a library, a framework, or any other complex set of classes. &quot;&quot;&quot; from __future__ import annotations class Facade: &quot;&quot;&quot; The Facade class provides a simple interface to the complex logic of one or several subsystems. The Facade delegates the client requests to the appropriate objects within the subsystem. The Facade is also responsible for managing their lifecycle. All of this shields the client from the undesired complexity of the subsystem. &quot;&quot;&quot; def __init__(self, subsystem1: Subsystem1, subsystem2: Subsystem2) -&gt; None: &quot;&quot;&quot; Depending on your application's needs, you can provide the Facade with existing subsystem objects or force the Facade to create them on its own. &quot;&quot;&quot; self._subsystem1 = subsystem1 or Subsystem1() self._subsystem2 = subsystem2 or Subsystem2() def operation(self) -&gt; str: &quot;&quot;&quot; The Facade's methods are convenient shortcuts to the sophisticated functionality of the subsystems. However, clients get only to a fraction of a subsystem's capabilities. &quot;&quot;&quot; results = [] results.append(&quot;Facade initializes subsystems:&quot;) results.append(self._subsystem1.operation1()) results.append(self._subsystem2.operation1()) results.append(&quot;Facade orders subsystems to perform the action:&quot;) results.append(self._subsystem1.operation_n()) results.append(self._subsystem2.operation_z()) return &quot;\\n&quot;.join(results) class Subsystem1: &quot;&quot;&quot; The Subsystem can accept requests either from the facade or client directly. In any case, to the Subsystem, the Facade is yet another client, and it's not a part of the Subsystem. &quot;&quot;&quot; def operation1(self) -&gt; str: return &quot;Subsystem1: Ready!&quot; # ... def operation_n(self) -&gt; str: return &quot;Subsystem1: Go!&quot; class Subsystem2: &quot;&quot;&quot; Some facades can work with multiple subsystems at the same time. &quot;&quot;&quot; def operation1(self) -&gt; str: return &quot;Subsystem2: Get ready!&quot; # ... def operation_z(self) -&gt; str: return &quot;Subsystem2: Fire!&quot; def client_code(facade: Facade) -&gt; None: &quot;&quot;&quot; The client code works with complex subsystems through a simple interface provided by the Facade. When a facade manages the lifecycle of the subsystem, the client might not even know about the existence of the subsystem. This approach lets you keep the complexity under control. &quot;&quot;&quot; print(facade.operation(), end=&quot;&quot;) if __name__ == &quot;__main__&quot;: # The client code may have some of the subsystem's objects already created. # In this case, it might be worthwhile to initialize the Facade with these # objects instead of letting the Facade create new instances. subsystem1 = Subsystem1() subsystem2 = Subsystem2() facade = Facade(subsystem1, subsystem2) client_code(facade) Facade initializes subsystems: Subsystem1: Ready! Subsystem2: Get ready! Facade orders subsystems to perform the action: Subsystem1: Go! Subsystem2: Fire! ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/python/example2","content":"Example 2 class Engine: def __init__(self): # how much the motor is spinning in revs per minute self.spin = 0 def start(self, spin): self.spin = min(spin, 3000) class StarterMotor: def __init__(self): # how much the starter motor is spinning in revs per minute self.spin = 0 def start(self, charge): # if there is enough power then spin fast if (charge &gt; 50): self.spin = 2500 class Battery: def __init__(self): # % charged, starts flat self.charge = 0 class Car: # the facade object that deals with the battery, engine and starter motor def __init__(self): self.battery = Battery() self.starter = StarterMotor() self.engine = Engine() def turn_key(self): self.starter.start(self.battery.charge) self.engine.start(self.starter.spin) if (self.engine.spin &gt; 0): print(&quot;Engine started&quot;) else: print(&quot;Engine not started&quot;) def jump(self): self.battery.charge = 100 print(&quot;Jumped&quot;) from facade import Car c = Car() c.turn_key() # engine not started because there is no charge c.jump() c.turn_key() # engine starts because it has been charged ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/swift/","content":"Swift Example /// Facade Design Pattern /// /// Intent: Provides a simplified interface to a library, a framework, or any /// other complex set of classes. import XCTest /// The Facade class provides a simple interface to the complex logic of one or /// several subsystems. The Facade delegates the client requests to the /// appropriate objects within the subsystem. The Facade is also responsible for /// managing their lifecycle. All of this shields the client from the undesired /// complexity of the subsystem. class Facade { private var subsystem1: Subsystem1 private var subsystem2: Subsystem2 /// Depending on your application's needs, you can provide the Facade with /// existing subsystem objects or force the Facade to create them on its /// own. init(subsystem1: Subsystem1 = Subsystem1(), subsystem2: Subsystem2 = Subsystem2()) { self.subsystem1 = subsystem1 self.subsystem2 = subsystem2 } /// The Facade's methods are convenient shortcuts to the sophisticated /// functionality of the subsystems. However, clients get only to a fraction /// of a subsystem's capabilities. func operation() -&gt; String { var result = &quot;Facade initializes subsystems:&quot; result += &quot; &quot; + subsystem1.operation1() result += &quot; &quot; + subsystem2.operation1() result += &quot;\\n&quot; + &quot;Facade orders subsystems to perform the action:\\n&quot; result += &quot; &quot; + subsystem1.operationN() result += &quot; &quot; + subsystem2.operationZ() return result } } /// The Subsystem can accept requests either from the facade or client directly. /// In any case, to the Subsystem, the Facade is yet another client, and it's /// not a part of the Subsystem. class Subsystem1 { func operation1() -&gt; String { return &quot;Sybsystem1: Ready!\\n&quot; } // ... func operationN() -&gt; String { return &quot;Sybsystem1: Go!\\n&quot; } } /// Some facades can work with multiple subsystems at the same time. class Subsystem2 { func operation1() -&gt; String { return &quot;Sybsystem2: Get ready!\\n&quot; } // ... func operationZ() -&gt; String { return &quot;Sybsystem2: Fire!\\n&quot; } } /// The client code works with complex subsystems through a simple interface /// provided by the Facade. When a facade manages the lifecycle of the /// subsystem, the client might not even know about the existence of the /// subsystem. This approach lets you keep the complexity under control. class Client { // ... static func clientCode(facade: Facade) { print(facade.operation()) } // ... } /// Let's see how it all works together. class FacadeConceptual: XCTestCase { func testFacadeConceptual() { /// The client code may have some of the subsystem's objects already /// created. In this case, it might be worthwhile to initialize the /// Facade with these objects instead of letting the Facade create new /// instances. let subsystem1 = Subsystem1() let subsystem2 = Subsystem2() let facade = Facade(subsystem1: subsystem1, subsystem2: subsystem2) Client.clientCode(facade: facade) } } Facade initializes subsystems: Sybsystem1: Ready! Sybsystem2: Get ready! Facade orders subsystems to perform the action: Sybsystem1: Go! Sybsystem2: Fire! ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/swift/example2","content":"Example 2 import XCTest /// Facade Design Pattern /// /// Intent: Provides a simplified interface to a library, a framework, or any /// other complex set of classes. class FacadeRealWorld: XCTestCase { /// In the real project, you probably will use third-party libraries. For /// instance, to download images. /// /// Therefore, facade and wrapping it is a good way to use a third party API /// in the client code. Even if it is your own library that is connected to /// a project. /// /// The benefits here are: /// /// 1) If you need to change a current image downloader it should be done /// only in the one place of a project. A number of lines of the client code /// will stay work. /// /// 2) The facade provides an access to a fraction of a functionality that /// fits most client needs. Moreover, it can set frequently used or default /// parameters. func testFacedeRealWorld() { let imageView = UIImageView() print(&quot;Let's set an image for the image view&quot;) clientCode(imageView) print(&quot;Image has been set&quot;) XCTAssert(imageView.image != nil) } fileprivate func clientCode(_ imageView: UIImageView) { let url = URL(string: &quot;www.example.com/logo&quot;) imageView.downloadImage(at: url) } } private extension UIImageView { /// This extension plays a facede role. func downloadImage(at url: URL?) { print(&quot;Start downloading...&quot;) let placeholder = UIImage(named: &quot;placeholder&quot;) ImageDownloader().loadImage(at: url, placeholder: placeholder, completion: { image, error in print(&quot;Handle an image...&quot;) /// Crop, cache, apply filters, whatever... self.image = image }) } } private class ImageDownloader { /// Third party library or your own solution (subsystem) typealias Completion = (UIImage, Error?) -&gt; () typealias Progress = (Int, Int) -&gt; () func loadImage(at url: URL?, placeholder: UIImage? = nil, progress: Progress? = nil, completion: Completion) { /// ... Set up a network stack /// ... Downloading an image /// ... completion(UIImage(), nil) } } Let's set an image for the image view Start downloading... Handle an image... Image has been set ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Facade/typescript/","content":"TypeScript Example /** * Facade Design Pattern * * Intent: Provides a simplified interface to a library, a framework, or any * other complex set of classes. */ /** * The Facade class provides a simple interface to the complex logic of one or * several subsystems. The Facade delegates the client requests to the * appropriate objects within the subsystem. The Facade is also responsible for * managing their lifecycle. All of this shields the client from the undesired * complexity of the subsystem. */ class Facade { protected subsystem1: Subsystem1; protected subsystem2: Subsystem2; /** * Depending on your application's needs, you can provide the Facade with * existing subsystem objects or force the Facade to create them on its own. */ constructor(subsystem1: Subsystem1 = null, subsystem2: Subsystem2 = null) { this.subsystem1 = subsystem1 || new Subsystem1(); this.subsystem2 = subsystem2 || new Subsystem2(); } /** * The Facade's methods are convenient shortcuts to the sophisticated * functionality of the subsystems. However, clients get only to a fraction * of a subsystem's capabilities. */ public operation(): string { let result = &quot;Facade initializes subsystems:\\n&quot;; result += this.subsystem1.operation1(); result += this.subsystem2.operation1(); result += &quot;Facade orders subsystems to perform the action:\\n&quot;; result += this.subsystem1.operationN(); result += this.subsystem2.operationZ(); return result; } } /** * The Subsystem can accept requests either from the facade or client directly. * In any case, to the Subsystem, the Facade is yet another client, and it's not * a part of the Subsystem. */ class Subsystem1 { public operation1(): string { return &quot;Subsystem1: Ready!\\n&quot;; } // ... public operationN(): string { return &quot;Subsystem1: Go!\\n&quot;; } } /** * Some facades can work with multiple subsystems at the same time. */ class Subsystem2 { public operation1(): string { return &quot;Subsystem2: Get ready!\\n&quot;; } // ... public operationZ(): string { return &quot;Subsystem2: Fire!&quot;; } } /** * The client code works with complex subsystems through a simple interface * provided by the Facade. When a facade manages the lifecycle of the subsystem, * the client might not even know about the existence of the subsystem. This * approach lets you keep the complexity under control. */ function clientCode(facade: Facade) { // ... console.log(facade.operation()); // ... } /** * The client code may have some of the subsystem's objects already created. In * this case, it might be worthwhile to initialize the Facade with these objects * instead of letting the Facade create new instances. */ const subsystem1 = new Subsystem1(); const subsystem2 = new Subsystem2(); const facade = new Facade(subsystem1, subsystem2); clientCode(facade); Facade initializes subsystems: Subsystem1: Ready! Subsystem2: Get ready! Facade orders subsystems to perform the action: Subsystem1: Go! Subsystem2: Fire! ","keywords":""},{"title":"Flyweight","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/","content":"","keywords":""},{"title":"Structure​","type":1,"pageTitle":"Flyweight","url":"docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/#structure","content":" The Flyweight pattern is merely an optimization. Before applying it, make sure your program does have the RAM consumption problem related to having a massive number of similar objects in memory at the same time.Make sure that this problem can’t be solved in any other meaningful way. The Flyweight class contains the portion of the original object’s state that can be shared between multiple objects. The same flyweight object can be used in many different contexts.The state stored inside a flyweight is called intrinsic.The state passed to the flyweight’s methods is called extrinsic. The Context class contains the extrinsic state, unique across all original objects. When a context is paired with one of the flyweight objects, it represents the full state of the original object. Usually, the behavior of the original object remains in the flyweight class. In this case, whoever calls a flyweight’s method must also pass appropriate bits of the extrinsic state into the method’s parameters.On the other hand, the behavior can be moved to the context class, which would use the linked flyweight merely as a data object. The Client calculates or stores the extrinsic state of flyweights. From the client’s perspective, a flyweight is a template object which can be configured at runtime by passing some contextual data into parameters of its methods. The Flyweight Factory manages a pool of existing flyweights. With the factory, clients don’t create flyweights directly.Instead, they call the factory, passing it bits of the intrinsic state of the desired flyweight.The factory looks over previously created flyweights and either returns an existing one that matches search criteria or creates a new one if nothing is found. "},{"title":"When to use​","type":1,"pageTitle":"Flyweight","url":"docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/#when-to-use","content":"it has a single purpose, which is to minimize memory intake thus it is not required if program doesn't struggle with a shortage of RAM "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; #include &lt;unordered_map&gt; /** * Flyweight Design Pattern * * Intent: Lets you fit more objects into the available amount of RAM by sharing * common parts of state between multiple objects, instead of keeping all of the * data in each object. */ struct SharedState { std::string brand_; std::string model_; std::string color_; SharedState(const std::string &amp;brand, const std::string &amp;model, const std::string &amp;color) : brand_(brand), model_(model), color_(color) { } friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const SharedState &amp;ss) { return os &lt;&lt; &quot;[ &quot; &lt;&lt; ss.brand_ &lt;&lt; &quot; , &quot; &lt;&lt; ss.model_ &lt;&lt; &quot; , &quot; &lt;&lt; ss.color_ &lt;&lt; &quot; ]&quot;; } }; struct UniqueState { std::string owner_; std::string plates_; UniqueState(const std::string &amp;owner, const std::string &amp;plates) : owner_(owner), plates_(plates) { } friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const UniqueState &amp;us) { return os &lt;&lt; &quot;[ &quot; &lt;&lt; us.owner_ &lt;&lt; &quot; , &quot; &lt;&lt; us.plates_ &lt;&lt; &quot; ]&quot;; } }; /** * The Flyweight stores a common portion of the state (also called intrinsic * state) that belongs to multiple real business entities. The Flyweight accepts * the rest of the state (extrinsic state, unique for each entity) via its * method parameters. */ class Flyweight { private: SharedState *shared_state_; public: Flyweight(const SharedState *shared_state) : shared_state_(new SharedState(*shared_state)) { } Flyweight(const Flyweight &amp;other) : shared_state_(new SharedState(*other.shared_state_)) { } ~Flyweight() { delete shared_state_; } SharedState *shared_state() const { return shared_state_; } void Operation(const UniqueState &amp;unique_state) const { std::cout &lt;&lt; &quot;Flyweight: Displaying shared (&quot; &lt;&lt; *shared_state_ &lt;&lt; &quot;) and unique (&quot; &lt;&lt; unique_state &lt;&lt; &quot;) state.\\n&quot;; } }; /** * The Flyweight Factory creates and manages the Flyweight objects. It ensures * that flyweights are shared correctly. When the client requests a flyweight, * the factory either returns an existing instance or creates a new one, if it * doesn't exist yet. */ class FlyweightFactory { /** * @var Flyweight[] */ private: std::unordered_map&lt;std::string, Flyweight&gt; flyweights_; /** * Returns a Flyweight's string hash for a given state. */ std::string GetKey(const SharedState &amp;ss) const { return ss.brand_ + &quot;_&quot; + ss.model_ + &quot;_&quot; + ss.color_; } public: FlyweightFactory(std::initializer_list&lt;SharedState&gt; share_states) { for (const SharedState &amp;ss : share_states) { this-&gt;flyweights_.insert(std::make_pair&lt;std::string, Flyweight&gt;(this-&gt;GetKey(ss), Flyweight(&amp;ss))); } } /** * Returns an existing Flyweight with a given state or creates a new one. */ Flyweight GetFlyweight(const SharedState &amp;shared_state) { std::string key = this-&gt;GetKey(shared_state); if (this-&gt;flyweights_.find(key) == this-&gt;flyweights_.end()) { std::cout &lt;&lt; &quot;FlyweightFactory: Can't find a flyweight, creating new one.\\n&quot;; this-&gt;flyweights_.insert(std::make_pair(key, Flyweight(&amp;shared_state))); } else { std::cout &lt;&lt; &quot;FlyweightFactory: Reusing existing flyweight.\\n&quot;; } return this-&gt;flyweights_.at(key); } void ListFlyweights() const { size_t count = this-&gt;flyweights_.size(); std::cout &lt;&lt; &quot;\\nFlyweightFactory: I have &quot; &lt;&lt; count &lt;&lt; &quot; flyweights:\\n&quot;; for (std::pair&lt;std::string, Flyweight&gt; pair : this-&gt;flyweights_) { std::cout &lt;&lt; pair.first &lt;&lt; &quot;\\n&quot;; } } }; // ... void AddCarToPoliceDatabase( FlyweightFactory &amp;ff, const std::string &amp;plates, const std::string &amp;owner, const std::string &amp;brand, const std::string &amp;model, const std::string &amp;color) { std::cout &lt;&lt; &quot;\\nClient: Adding a car to database.\\n&quot;; const Flyweight &amp;flyweight = ff.GetFlyweight({brand, model, color}); // The client code either stores or calculates extrinsic state and passes it // to the flyweight's methods. flyweight.Operation({owner, plates}); } /** * The client code usually creates a bunch of pre-populated flyweights in the * initialization stage of the application. */ int main() { FlyweightFactory *factory = new FlyweightFactory({{&quot;Chevrolet&quot;, &quot;Camaro2018&quot;, &quot;pink&quot;}, {&quot;Mercedes Benz&quot;, &quot;C300&quot;, &quot;black&quot;}, {&quot;Mercedes Benz&quot;, &quot;C500&quot;, &quot;red&quot;}, {&quot;BMW&quot;, &quot;M5&quot;, &quot;red&quot;}, {&quot;BMW&quot;, &quot;X6&quot;, &quot;white&quot;}}); factory-&gt;ListFlyweights(); AddCarToPoliceDatabase(*factory, &quot;CL234IR&quot;, &quot;James Doe&quot;, &quot;BMW&quot;, &quot;M5&quot;, &quot;red&quot;); AddCarToPoliceDatabase(*factory, &quot;CL234IR&quot;, &quot;James Doe&quot;, &quot;BMW&quot;, &quot;X1&quot;, &quot;red&quot;); factory-&gt;ListFlyweights(); delete factory; return 0; } FlyweightFactory: I have 5 flyweights: BMW_X6_white Mercedes Benz_C500_red Mercedes Benz_C300_black BMW_M5_red Chevrolet_Camaro2018_pink Client: Adding a car to database. FlyweightFactory: Reusing existing flyweight. Flyweight: Displaying shared ([ BMW , M5 , red ]) and unique ([ CL234IR , James Doe ]) state. Client: Adding a car to database. FlyweightFactory: Can't find a flyweight, creating new one. Flyweight: Displaying shared ([ BMW , X1 , red ]) and unique ([ CL234IR , James Doe ]) state. FlyweightFactory: I have 6 flyweights: BMW_X1_red Mercedes Benz_C300_black BMW_X6_white Mercedes Benz_C500_red BMW_M5_red Chevrolet_Camaro2018_pink ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/cSharp/","content":"C# Example // Flyweight Design Pattern // // Intent: Lets you fit more objects into the available amount of RAM by sharing // common parts of state between multiple objects, instead of keeping all of the // data in each object. using System; using System.Collections.Generic; using System.Linq; // Use Json.NET library, you can download it from NuGet Package Manager using Newtonsoft.Json; namespace RefactoringGuru.DesignPatterns.Flyweight.Conceptual { // The Flyweight stores a common portion of the state (also called intrinsic // state) that belongs to multiple real business entities. The Flyweight // accepts the rest of the state (extrinsic state, unique for each entity) // via its method parameters. public class Flyweight { private Car _sharedState; public Flyweight(Car car) { this._sharedState = car; } public void Operation(Car uniqueState) { string s = JsonConvert.SerializeObject(this._sharedState); string u = JsonConvert.SerializeObject(uniqueState); Console.WriteLine($&quot;Flyweight: Displaying shared {s} and unique {u} state.&quot;); } } // The Flyweight Factory creates and manages the Flyweight objects. It // ensures that flyweights are shared correctly. When the client requests a // flyweight, the factory either returns an existing instance or creates a // new one, if it doesn't exist yet. public class FlyweightFactory { private List&lt;Tuple&lt;Flyweight, string&gt;&gt; flyweights = new List&lt;Tuple&lt;Flyweight, string&gt;&gt;(); public FlyweightFactory(params Car[] args) { foreach (var elem in args) { flyweights.Add(new Tuple&lt;Flyweight, string&gt;(new Flyweight(elem), this.getKey(elem))); } } // Returns a Flyweight's string hash for a given state. public string getKey(Car key) { List&lt;string&gt; elements = new List&lt;string&gt;(); elements.Add(key.Model); elements.Add(key.Color); elements.Add(key.Company); if (key.Owner != null &amp;&amp; key.Number != null) { elements.Add(key.Number); elements.Add(key.Owner); } elements.Sort(); return string.Join(&quot;_&quot;, elements); } // Returns an existing Flyweight with a given state or creates a new // one. public Flyweight GetFlyweight(Car sharedState) { string key = this.getKey(sharedState); if (flyweights.Where(t =&gt; t.Item2 == key).Count() == 0) { Console.WriteLine(&quot;FlyweightFactory: Can't find a flyweight, creating new one.&quot;); this.flyweights.Add(new Tuple&lt;Flyweight, string&gt;(new Flyweight(sharedState), key)); } else { Console.WriteLine(&quot;FlyweightFactory: Reusing existing flyweight.&quot;); } return this.flyweights.Where(t =&gt; t.Item2 == key).FirstOrDefault().Item1; } public void listFlyweights() { var count = flyweights.Count; Console.WriteLine($&quot;\\nFlyweightFactory: I have {count} flyweights:&quot;); foreach (var flyweight in flyweights) { Console.WriteLine(flyweight.Item2); } } } public class Car { public string Owner { get; set; } public string Number { get; set; } public string Company { get; set; } public string Model { get; set; } public string Color { get; set; } } class Program { static void Main(string[] args) { // The client code usually creates a bunch of pre-populated // flyweights in the initialization stage of the application. var factory = new FlyweightFactory( new Car { Company = &quot;Chevrolet&quot;, Model = &quot;Camaro2018&quot;, Color = &quot;pink&quot; }, new Car { Company = &quot;Mercedes Benz&quot;, Model = &quot;C300&quot;, Color = &quot;black&quot; }, new Car { Company = &quot;Mercedes Benz&quot;, Model = &quot;C500&quot;, Color = &quot;red&quot; }, new Car { Company = &quot;BMW&quot;, Model = &quot;M5&quot;, Color = &quot;red&quot; }, new Car { Company = &quot;BMW&quot;, Model = &quot;X6&quot;, Color = &quot;white&quot; } ); factory.listFlyweights(); addCarToPoliceDatabase(factory, new Car { Number = &quot;CL234IR&quot;, Owner = &quot;James Doe&quot;, Company = &quot;BMW&quot;, Model = &quot;M5&quot;, Color = &quot;red&quot; }); addCarToPoliceDatabase(factory, new Car { Number = &quot;CL234IR&quot;, Owner = &quot;James Doe&quot;, Company = &quot;BMW&quot;, Model = &quot;X1&quot;, Color = &quot;red&quot; }); factory.listFlyweights(); } public static void addCarToPoliceDatabase(FlyweightFactory factory, Car car) { Console.WriteLine(&quot;\\nClient: Adding a car to database.&quot;); var flyweight = factory.GetFlyweight(new Car { Color = car.Color, Model = car.Model, Company = car.Company }); // The client code either stores or calculates extrinsic state and // passes it to the flyweight's methods. flyweight.Operation(car); } } } FlyweightFactory: I have 5 flyweights: Camaro2018_Chevrolet_pink black_C300_Mercedes Benz C500_Mercedes Benz_red BMW_M5_red BMW_white_X6 Client: Adding a car to database. FlyweightFactory: Reusing existing flyweight. Flyweight: Displaying shared {&quot;Owner&quot;:null,&quot;Number&quot;:null,&quot;Company&quot;:&quot;BMW&quot;,&quot;Model&quot;:&quot;M5&quot;,&quot;Color&quot;:&quot;red&quot;} and unique {&quot;Owner&quot;:&quot;James Doe&quot;,&quot;Number&quot;:&quot;CL234IR&quot;,&quot;Company&quot;:&quot;BMW&quot;,&quot;Model&quot;:&quot;M5&quot;,&quot;Color&quot;:&quot;red&quot;} state. Client: Adding a car to database. FlyweightFactory: Can't find a flyweight, creating new one. Flyweight: Displaying shared {&quot;Owner&quot;:null,&quot;Number&quot;:null,&quot;Company&quot;:&quot;BMW&quot;,&quot;Model&quot;:&quot;X1&quot;,&quot;Color&quot;:&quot;red&quot;} and unique {&quot;Owner&quot;:&quot;James Doe&quot;,&quot;Number&quot;:&quot;CL234IR&quot;,&quot;Company&quot;:&quot;BMW&quot;,&quot;Model&quot;:&quot;X1&quot;,&quot;Color&quot;:&quot;red&quot;} state. FlyweightFactory: I have 6 flyweights: Camaro2018_Chevrolet_pink black_C300_Mercedes Benz C500_Mercedes Benz_red BMW_M5_red BMW_white_X6 BMW_red_X1 ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/go/","content":"Go Example package main type counterTerroristDress struct { color string } func (c *counterTerroristDress) getColor() string { return c.color } func newCounterTerroristDress() *counterTerroristDress { return &amp;counterTerroristDress{color: &quot;green&quot;} } package main type dress interface { getColor() string } package main import &quot;fmt&quot; const ( //TerroristDressType terrorist dress type TerroristDressType = &quot;tDress&quot; //CounterTerrroristDressType terrorist dress type CounterTerrroristDressType = &quot;ctDress&quot; ) var ( dressFactorySingleInstance = &amp;dressFactory{ dressMap: make(map[string]dress), } ) type dressFactory struct { dressMap map[string]dress } func (d *dressFactory) getDressByType(dressType string) (dress, error) { if d.dressMap[dressType] != nil { return d.dressMap[dressType], nil } if dressType == TerroristDressType { d.dressMap[dressType] = newTerroristDress() return d.dressMap[dressType], nil } if dressType == CounterTerrroristDressType { d.dressMap[dressType] = newCounterTerroristDress() return d.dressMap[dressType], nil } return nil, fmt.Errorf(&quot;Wrong dress type passed&quot;) } func getDressFactorySingleInstance() *dressFactory { return dressFactorySingleInstance } package main type game struct { terrorists []*player counterTerrorists []*player } func newGame() *game { return &amp;game{ terrorists: make([]*player, 1), counterTerrorists: make([]*player, 1), } } func (c *game) addTerrorist(dressType string) { player := newPlayer(&quot;T&quot;, dressType) c.terrorists = append(c.terrorists, player) return } func (c *game) addCounterTerrorist(dressType string) { player := newPlayer(&quot;CT&quot;, dressType) c.counterTerrorists = append(c.counterTerrorists, player) return } package main type player struct { dress dress playerType string lat int long int } func newPlayer(playerType, dressType string) *player { dress, _ := getDressFactorySingleInstance().getDressByType(dressType) return &amp;player{ playerType: playerType, dress: dress, } } func (p *player) newLocation(lat, long int) { p.lat = lat p.long = long } package main type terroristDress struct { color string } func (t *terroristDress) getColor() string { return t.color } func newTerroristDress() *terroristDress { return &amp;terroristDress{color: &quot;red&quot;} } package main import &quot;fmt&quot; func main() { game := newGame() //Add Terrorist game.addTerrorist(TerroristDressType) game.addTerrorist(TerroristDressType) game.addTerrorist(TerroristDressType) game.addTerrorist(TerroristDressType) //Add CounterTerrorist game.addCounterTerrorist(CounterTerrroristDressType) game.addCounterTerrorist(CounterTerrroristDressType) game.addCounterTerrorist(CounterTerrroristDressType) dressFactoryInstance := getDressFactorySingleInstance() for dressType, dress := range dressFactoryInstance.dressMap { fmt.Printf(&quot;DressColorType: %s\\nDressColor: %s\\n&quot;, dressType, dress.getColor()) } } ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/java/","content":"Java Example forest forest/Forest.java package refactoring_guru.flyweight.example.forest; import refactoring_guru.flyweight.example.trees.Tree; import refactoring_guru.flyweight.example.trees.TreeFactory; import refactoring_guru.flyweight.example.trees.TreeType; import javax.swing.*; import java.awt.*; import java.util.ArrayList; import java.util.List; public class Forest extends JFrame { private List&lt;Tree&gt; trees = new ArrayList&lt;&gt;(); public void plantTree(int x, int y, String name, Color color, String otherTreeData) { TreeType type = TreeFactory.getTreeType(name, color, otherTreeData); Tree tree = new Tree(x, y, type); trees.add(tree); } @Override public void paint(Graphics graphics) { for (Tree tree : trees) { tree.draw(graphics); } } } trees trees/Tree.java package refactoring_guru.flyweight.example.trees; import java.awt.*; public class Tree { private int x; private int y; private TreeType type; public Tree(int x, int y, TreeType type) { this.x = x; this.y = y; this.type = type; } public void draw(Graphics g) { type.draw(g, x, y); } } trees/TreeFactory.java package refactoring_guru.flyweight.example.trees; import java.awt.*; import java.util.HashMap; import java.util.Map; public class TreeFactory { static Map&lt;String, TreeType&gt; treeTypes = new HashMap&lt;&gt;(); public static TreeType getTreeType(String name, Color color, String otherTreeData) { TreeType result = treeTypes.get(name); if (result == null) { result = new TreeType(name, color, otherTreeData); treeTypes.put(name, result); } return result; } } trees/TreeType.java package refactoring_guru.flyweight.example.trees; import java.awt.*; public class TreeType { private String name; private Color color; private String otherTreeData; public TreeType(String name, Color color, String otherTreeData) { this.name = name; this.color = color; this.otherTreeData = otherTreeData; } public void draw(Graphics g, int x, int y) { g.setColor(Color.BLACK); g.fillRect(x - 1, y, 3, 5); g.setColor(color); g.fillOval(x - 5, y - 10, 10, 10); } } Demo.java package refactoring_guru.flyweight.example; import refactoring_guru.flyweight.example.forest.Forest; import java.awt.*; public class Demo { static int CANVAS_SIZE = 500; static int TREES_TO_DRAW = 1000000; static int TREE_TYPES = 2; public static void main(String[] args) { Forest forest = new Forest(); for (int i = 0; i &lt; Math.floor(TREES_TO_DRAW / TREE_TYPES); i++) { forest.plantTree(random(0, CANVAS_SIZE), random(0, CANVAS_SIZE), &quot;Summer Oak&quot;, Color.GREEN, &quot;Oak texture stub&quot;); forest.plantTree(random(0, CANVAS_SIZE), random(0, CANVAS_SIZE), &quot;Autumn Oak&quot;, Color.ORANGE, &quot;Autumn Oak texture stub&quot;); } forest.setSize(CANVAS_SIZE, CANVAS_SIZE); forest.setVisible(true); System.out.println(TREES_TO_DRAW + &quot; trees drawn&quot;); System.out.println(&quot;---------------------&quot;); System.out.println(&quot;Memory usage:&quot;); System.out.println(&quot;Tree size (8 bytes) * &quot; + TREES_TO_DRAW); System.out.println(&quot;+ TreeTypes size (~30 bytes) * &quot; + TREE_TYPES + &quot;&quot;); System.out.println(&quot;---------------------&quot;); System.out.println(&quot;Total: &quot; + ((TREES_TO_DRAW * 8 + TREE_TYPES * 30) / 1024 / 1024) + &quot;MB (instead of &quot; + ((TREES_TO_DRAW * 38) / 1024 / 1024) + &quot;MB)&quot;); } private static int random(int min, int max) { return min + (int) (Math.random() * ((max - min) + 1)); } } 1000000 trees drawn --------------------- Memory usage: Tree size (8 bytes) * 1000000 + TreeTypes size (~30 bytes) * 2 --------------------- Total: 7MB (instead of 36MB) ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/javascript/","content":"JavaScript Example /** * The Flyweight stores a common portion of the state (also called intrinsic * state) that belongs to multiple real business entities. The Flyweight accepts * the rest of the state (extrinsic state, unique for each entity) via its * method parameters. */ class Flyweight { constructor(sharedState) { this.sharedState = sharedState; } operation(uniqueState) { const s = JSON.stringify(this.sharedState); const u = JSON.stringify(uniqueState); console.log(`Flyweight: Displaying shared (${s}) and unique (${u}) state.`); } } module.exports = Flyweight; const Flyweight = require(&quot;./Flyweight&quot;); /** * The Flyweight Factory creates and manages the Flyweight objects. It ensures * that flyweights are shared correctly. When the client requests a flyweight, * the factory either returns an existing instance or creates a new one, if it * doesn't exist yet. */ class FlyweightFactory { constructor(initialFlyweights) { this.flyweights = {}; for (const state of initialFlyweights) { this.flyweights[this.getKey(state)] = new Flyweight(state); } } // Returns a Flyweight's string hash for a given state. getKey(state) { return state.join(&quot;_&quot;); } // Returns an existing Flyweight with a given state or creates a new one. getFlyweight(sharedState) { const key = this.getKey(sharedState); if (!(key in this.flyweights)) { console.log( &quot;FlyweightFactory: Can't find a flyweight, creating new one.&quot; ); this.flyweights[key] = new Flyweight(sharedState); } else { console.log(&quot;FlyweightFactory: Reusing existing flyweight.&quot;); } return this.flyweights[key]; } listFlyweights() { const count = Object.keys(this.flyweights).length; console.log(`\\nFlyweightFactory: I have ${count} flyweights:`); for (const key in this.flyweights) { console.log(key); } } } module.exports = FlyweightFactory; const FlyweightFactory = require(&quot;./FlyweightFactory&quot;); /** * The client code usually creates a bunch of pre-populated flyweights in the * initialization stage of the application. */ const factory = new FlyweightFactory([ [&quot;Chevrolet&quot;, &quot;Camaro2018&quot;, &quot;pink&quot;], [&quot;Mercedes Benz&quot;, &quot;C300&quot;, &quot;black&quot;], [&quot;Mercedes Benz&quot;, &quot;C500&quot;, &quot;red&quot;], [&quot;BMW&quot;, &quot;M5&quot;, &quot;red&quot;], [&quot;BMW&quot;, &quot;X6&quot;, &quot;white&quot;], // ... ]); factory.listFlyweights(); // ... function addCarToPoliceDatabase(ff, plates, owner, brand, model, color) { console.log(&quot;\\nClient: Adding a car to database.&quot;); const flyweight = ff.getFlyweight([brand, model, color]); // The client code either stores or calculates extrinsic state and passes it // to the flyweight's methods. flyweight.operation([plates, owner]); } addCarToPoliceDatabase(factory, &quot;CL234IR&quot;, &quot;James Doe&quot;, &quot;BMW&quot;, &quot;M5&quot;, &quot;red&quot;); addCarToPoliceDatabase(factory, &quot;CL234IR&quot;, &quot;James Doe&quot;, &quot;BMW&quot;, &quot;X1&quot;, &quot;red&quot;); factory.listFlyweights(); ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/python/","content":"Python Example &quot;&quot;&quot; Flyweight Design Pattern Intent: Lets you fit more objects into the available amount of RAM by sharing common parts of state between multiple objects, instead of keeping all of the data in each object. &quot;&quot;&quot; import json from typing import Dict class Flyweight(): &quot;&quot;&quot; The Flyweight stores a common portion of the state (also called intrinsic state) that belongs to multiple real business entities. The Flyweight accepts the rest of the state (extrinsic state, unique for each entity) via its method parameters. &quot;&quot;&quot; def __init__(self, shared_state: str) -&gt; None: self._shared_state = shared_state def operation(self, unique_state: str) -&gt; None: s = json.dumps(self._shared_state) u = json.dumps(unique_state) print(f&quot;Flyweight: Displaying shared ({s}) and unique ({u}) state.&quot;, end=&quot;&quot;) class FlyweightFactory(): &quot;&quot;&quot; The Flyweight Factory creates and manages the Flyweight objects. It ensures that flyweights are shared correctly. When the client requests a flyweight, the factory either returns an existing instance or creates a new one, if it doesn't exist yet. &quot;&quot;&quot; _flyweights: Dict[str, Flyweight] = {} def __init__(self, initial_flyweights: Dict) -&gt; None: for state in initial_flyweights: self._flyweights[self.get_key(state)] = Flyweight(state) def get_key(self, state: Dict) -&gt; str: &quot;&quot;&quot; Returns a Flyweight's string hash for a given state. &quot;&quot;&quot; return &quot;_&quot;.join(sorted(state)) def get_flyweight(self, shared_state: Dict) -&gt; Flyweight: &quot;&quot;&quot; Returns an existing Flyweight with a given state or creates a new one. &quot;&quot;&quot; key = self.get_key(shared_state) if not self._flyweights.get(key): print(&quot;FlyweightFactory: Can't find a flyweight, creating new one.&quot;) self._flyweights[key] = Flyweight(shared_state) else: print(&quot;FlyweightFactory: Reusing existing flyweight.&quot;) return self._flyweights[key] def list_flyweights(self) -&gt; None: count = len(self._flyweights) print(f&quot;FlyweightFactory: I have {count} flyweights:&quot;) print(&quot;\\n&quot;.join(map(str, self._flyweights.keys())), end=&quot;&quot;) def add_car_to_police_database( factory: FlyweightFactory, plates: str, owner: str, brand: str, model: str, color: str ) -&gt; None: print(&quot;\\n\\nClient: Adding a car to database.&quot;) flyweight = factory.get_flyweight([brand, model, color]) # The client code either stores or calculates extrinsic state and passes it # to the flyweight's methods. flyweight.operation([plates, owner]) if __name__ == &quot;__main__&quot;: &quot;&quot;&quot; The client code usually creates a bunch of pre-populated flyweights in the initialization stage of the application. &quot;&quot;&quot; factory = FlyweightFactory([ [&quot;Chevrolet&quot;, &quot;Camaro2018&quot;, &quot;pink&quot;], [&quot;Mercedes Benz&quot;, &quot;C300&quot;, &quot;black&quot;], [&quot;Mercedes Benz&quot;, &quot;C500&quot;, &quot;red&quot;], [&quot;BMW&quot;, &quot;M5&quot;, &quot;red&quot;], [&quot;BMW&quot;, &quot;X6&quot;, &quot;white&quot;], ]) factory.list_flyweights() add_car_to_police_database( factory, &quot;CL234IR&quot;, &quot;James Doe&quot;, &quot;BMW&quot;, &quot;M5&quot;, &quot;red&quot;) add_car_to_police_database( factory, &quot;CL234IR&quot;, &quot;James Doe&quot;, &quot;BMW&quot;, &quot;X1&quot;, &quot;red&quot;) print(&quot;\\n&quot;) factory.list_flyweights() FlyweightFactory: I have 5 flyweights: Camaro2018_Chevrolet_pink C300_Mercedes Benz_black C500_Mercedes Benz_red BMW_M5_red BMW_X6_white Client: Adding a car to database. FlyweightFactory: Reusing existing flyweight. Flyweight: Displaying shared ([&quot;BMW&quot;, &quot;M5&quot;, &quot;red&quot;]) and unique ([&quot;CL234IR&quot;, &quot;James Doe&quot;]) state. Client: Adding a car to database. FlyweightFactory: Can't find a flyweight, creating new one. Flyweight: Displaying shared ([&quot;BMW&quot;, &quot;X1&quot;, &quot;red&quot;]) and unique ([&quot;CL234IR&quot;, &quot;James Doe&quot;]) state. FlyweightFactory: I have 6 flyweights: Camaro2018_Chevrolet_pink C300_Mercedes Benz_black C500_Mercedes Benz_red BMW_M5_red BMW_X6_white BMW_X1_red ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/swift/","content":"Swift Example /// Flyweight Design Pattern /// /// Intent: Lets you fit more objects into the available amount of RAM by /// sharing common parts of state between multiple objects, instead of keeping /// all of the data in each object. import XCTest /// The Flyweight stores a common portion of the state (also called intrinsic /// state) that belongs to multiple real business entities. The Flyweight /// accepts the rest of the state (extrinsic state, unique for each entity) via /// its method parameters. class Flyweight { private let sharedState: [String] init(sharedState: [String]) { self.sharedState = sharedState } func operation(uniqueState: [String]) { print(&quot;Flyweight: Displaying shared (\\(sharedState)) and unique (\\(uniqueState) state.\\n&quot;) } } /// The Flyweight Factory creates and manages the Flyweight objects. It ensures /// that flyweights are shared correctly. When the client requests a flyweight, /// the factory either returns an existing instance or creates a new one, if it /// doesn't exist yet. class FlyweightFactory { private var flyweights: [String: Flyweight] init(states: [[String]]) { var flyweights = [String: Flyweight]() for state in states { flyweights[state.key] = Flyweight(sharedState: state) } self.flyweights = flyweights } /// Returns an existing Flyweight with a given state or creates a new one. func flyweight(for state: [String]) -&gt; Flyweight { let key = state.key guard let foundFlyweight = flyweights[key] else { print(&quot;FlyweightFactory: Can't find a flyweight, creating new one.\\n&quot;) let flyweight = Flyweight(sharedState: state) flyweights.updateValue(flyweight, forKey: key) return flyweight } print(&quot;FlyweightFactory: Reusing existing flyweight.\\n&quot;) return foundFlyweight } func printFlyweights() { print(&quot;FlyweightFactory: I have \\(flyweights.count) flyweights:\\n&quot;) for item in flyweights { print(item.key) } } } extension Array where Element == String { /// Returns a Flyweight's string hash for a given state. var key: String { return self.joined() } } class FlyweightConceptual: XCTestCase { func testFlyweight() { /// The client code usually creates a bunch of pre-populated flyweights /// in the initialization stage of the application. let factory = FlyweightFactory(states: [ [&quot;Chevrolet&quot;, &quot;Camaro2018&quot;, &quot;pink&quot;], [&quot;Mercedes Benz&quot;, &quot;C300&quot;, &quot;black&quot;], [&quot;Mercedes Benz&quot;, &quot;C500&quot;, &quot;red&quot;], [&quot;BMW&quot;, &quot;M5&quot;, &quot;red&quot;], [&quot;BMW&quot;, &quot;X6&quot;, &quot;white&quot;] ]) factory.printFlyweights() /// ... addCarToPoliceDatabase(factory, &quot;CL234IR&quot;, &quot;James Doe&quot;, &quot;BMW&quot;, &quot;M5&quot;, &quot;red&quot;) addCarToPoliceDatabase(factory, &quot;CL234IR&quot;, &quot;James Doe&quot;, &quot;BMW&quot;, &quot;X1&quot;, &quot;red&quot;) factory.printFlyweights() } func addCarToPoliceDatabase( _ factory: FlyweightFactory, _ plates: String, _ owner: String, _ brand: String, _ model: String, _ color: String) { print(&quot;Client: Adding a car to database.\\n&quot;) let flyweight = factory.flyweight(for: [brand, model, color]) /// The client code either stores or calculates extrinsic state and /// passes it to the flyweight's methods. flyweight.operation(uniqueState: [plates, owner]) } } FlyweightFactory: I have 5 flyweights: Mercedes BenzC500red ChevroletCamaro2018pink Mercedes BenzC300black BMWX6white BMWM5red Client: Adding a car to database. FlyweightFactory: Reusing existing flyweight. Flyweight: Displaying shared ([&quot;BMW&quot;, &quot;M5&quot;, &quot;red&quot;]) and unique ([&quot;CL234IR&quot;, &quot;James Doe&quot;] state. Client: Adding a car to database. FlyweightFactory: Can't find a flyweight, creating new one. Flyweight: Displaying shared ([&quot;BMW&quot;, &quot;X1&quot;, &quot;red&quot;]) and unique ([&quot;CL234IR&quot;, &quot;James Doe&quot;] state. FlyweightFactory: I have 6 flyweights: Mercedes BenzC500red BMWX1red ChevroletCamaro2018pink Mercedes BenzC300black BMWX6white BMWM5red ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/swift/example2","content":"Example 2 import XCTest import UIKit class FlyweightRealWorld: XCTestCase { func testFlyweightRealWorld() { let maineCoon = Animal(name: &quot;Maine Coon&quot;, country: &quot;USA&quot;, type: .cat) let sphynx = Animal(name: &quot;Sphynx&quot;, country: &quot;Egypt&quot;, type: .cat) let bulldog = Animal(name: &quot;Bulldog&quot;, country: &quot;England&quot;, type: .dog) print(&quot;Client: I created a number of objects to display&quot;) /// Displaying objects for the 1-st time. print(&quot;Client: Let's show animals for the 1st time\\n&quot;) display(animals: [maineCoon, sphynx, bulldog]) /// Displaying objects for the 2-nd time. /// /// Note: Cached object of the appearance will be reused this time. print(&quot;\\nClient: I have a new dog, let's show it the same way!\\n&quot;) let germanShepherd = Animal(name: &quot;German Shepherd&quot;, country: &quot;Germany&quot;, type: .dog) display(animals: [germanShepherd]) } } extension FlyweightRealWorld { func display(animals: [Animal]) { let cells = loadCells(count: animals.count) for index in 0..&lt;animals.count { cells[index].update(with: animals[index]) } /// Using cells... } func loadCells(count: Int) -&gt; [Cell] { /// Emulates behavior of a table/collection view. return Array(repeating: Cell(), count: count) } } enum Type: String { case cat case dog } class Cell { private var animal: Animal? func update(with animal: Animal) { self.animal = animal let type = animal.type.rawValue let photos = &quot;photos \\(animal.appearance.photos.count)&quot; print(&quot;Cell: Updating an appearance of a \\(type)-cell: \\(photos)\\n&quot;) } } struct Animal: Equatable { /// This is an external context that contains specific values and an object /// with a common state. /// /// Note: The object of appearance will be lazily created when it is needed let name: String let country: String let type: Type var appearance: Appearance { return AppearanceFactory.appearance(for: type) } } struct Appearance: Equatable { /// This object contains a predefined appearance of every cell let photos: [UIImage] let backgroundColor: UIColor } extension Animal: CustomStringConvertible { var description: String { return &quot;\\(name), \\(country), \\(type.rawValue) + \\(appearance.description)&quot; } } extension Appearance: CustomStringConvertible { var description: String { return &quot;photos: \\(photos.count), \\(backgroundColor)&quot; } } class AppearanceFactory { private static var cache = [Type: Appearance]() static func appearance(for key: Type) -&gt; Appearance { guard cache[key] == nil else { print(&quot;AppearanceFactory: Reusing an existing \\(key.rawValue)-appearance.&quot;) return cache[key]! } print(&quot;AppearanceFactory: Can't find a cached \\(key.rawValue)-object, creating a new one.&quot;) switch key { case .cat: cache[key] = catInfo case .dog: cache[key] = dogInfo } return cache[key]! } } extension AppearanceFactory { private static var catInfo: Appearance { return Appearance(photos: [UIImage()], backgroundColor: .red) } private static var dogInfo: Appearance { return Appearance(photos: [UIImage(), UIImage()], backgroundColor: .blue) } } Client: I created a number of objects to display Client: Let's show animals for the 1st time AppearanceFactory: Can't find a cached cat-object, creating a new one. Cell: Updating an appearance of a cat-cell: photos 1 AppearanceFactory: Reusing an existing cat-appearance. Cell: Updating an appearance of a cat-cell: photos 1 AppearanceFactory: Can't find a cached dog-object, creating a new one. Cell: Updating an appearance of a dog-cell: photos 2 Client: I have a new dog, let's show it the same way! AppearanceFactory: Reusing an existing dog-appearance. Cell: Updating an appearance of a dog-cell: photos 2 ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/typescript/","content":"TypeScript Example /** * Flyweight Design Pattern * * Intent: Lets you fit more objects into the available amount of RAM by sharing * common parts of state between multiple objects, instead of keeping all of the * data in each object. */ /** * The Flyweight stores a common portion of the state (also called intrinsic * state) that belongs to multiple real business entities. The Flyweight accepts * the rest of the state (extrinsic state, unique for each entity) via its * method parameters. */ class Flyweight { private sharedState: any; constructor(sharedState: any) { this.sharedState = sharedState; } public operation(uniqueState): void { const s = JSON.stringify(this.sharedState); const u = JSON.stringify(uniqueState); console.log(`Flyweight: Displaying shared (${s}) and unique (${u}) state.`); } } /** * The Flyweight Factory creates and manages the Flyweight objects. It ensures * that flyweights are shared correctly. When the client requests a flyweight, * the factory either returns an existing instance or creates a new one, if it * doesn't exist yet. */ class FlyweightFactory { private flyweights: {[key: string]: Flyweight} = &lt;any&gt;{}; constructor(initialFlyweights: string[][]) { for (const state of initialFlyweights) { this.flyweights[this.getKey(state)] = new Flyweight(state); } } /** * Returns a Flyweight's string hash for a given state. */ private getKey(state: string[]): string { return state.join(&quot;_&quot;); } /** * Returns an existing Flyweight with a given state or creates a new one. */ public getFlyweight(sharedState: string[]): Flyweight { const key = this.getKey(sharedState); if (!(key in this.flyweights)) { console.log( &quot;FlyweightFactory: Can't find a flyweight, creating new one.&quot; ); this.flyweights[key] = new Flyweight(sharedState); } else { console.log(&quot;FlyweightFactory: Reusing existing flyweight.&quot;); } return this.flyweights[key]; } public listFlyweights(): void { const count = Object.keys(this.flyweights).length; console.log(`\\nFlyweightFactory: I have ${count} flyweights:`); for (const key in this.flyweights) { console.log(key); } } } /** * The client code usually creates a bunch of pre-populated flyweights in the * initialization stage of the application. */ const factory = new FlyweightFactory([ [&quot;Chevrolet&quot;, &quot;Camaro2018&quot;, &quot;pink&quot;], [&quot;Mercedes Benz&quot;, &quot;C300&quot;, &quot;black&quot;], [&quot;Mercedes Benz&quot;, &quot;C500&quot;, &quot;red&quot;], [&quot;BMW&quot;, &quot;M5&quot;, &quot;red&quot;], [&quot;BMW&quot;, &quot;X6&quot;, &quot;white&quot;], // ... ]); factory.listFlyweights(); // ... function addCarToPoliceDatabase( ff: FlyweightFactory, plates: string, owner: string, brand: string, model: string, color: string ) { console.log(&quot;\\nClient: Adding a car to database.&quot;); const flyweight = ff.getFlyweight([brand, model, color]); // The client code either stores or calculates extrinsic state and passes it // to the flyweight's methods. flyweight.operation([plates, owner]); } addCarToPoliceDatabase(factory, &quot;CL234IR&quot;, &quot;James Doe&quot;, &quot;BMW&quot;, &quot;M5&quot;, &quot;red&quot;); addCarToPoliceDatabase(factory, &quot;CL234IR&quot;, &quot;James Doe&quot;, &quot;BMW&quot;, &quot;X1&quot;, &quot;red&quot;); factory.listFlyweights(); FlyweightFactory: I have 5 flyweights: Chevrolet_Camaro2018_pink Mercedes Benz_C300_black Mercedes Benz_C500_red BMW_M5_red BMW_X6_white Client: Adding a car to database. FlyweightFactory: Reusing existing flyweight. Flyweight: Displaying shared ([&quot;BMW&quot;,&quot;M5&quot;,&quot;red&quot;]) and unique ([&quot;CL234IR&quot;,&quot;James Doe&quot;]) state. Client: Adding a car to database. FlyweightFactory: Can't find a flyweight, creating new one. Flyweight: Displaying shared ([&quot;BMW&quot;,&quot;X1&quot;,&quot;red&quot;]) and unique ([&quot;CL234IR&quot;,&quot;James Doe&quot;]) state. FlyweightFactory: I have 6 flyweights: Chevrolet_Camaro2018_pink Mercedes Benz_C300_black Mercedes Benz_C500_red BMW_M5_red BMW_X6_white BMW_X1_red ","keywords":""},{"title":"Proxy","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/","content":"","keywords":""},{"title":"typically, this pattern is used when​","type":1,"pageTitle":"Proxy","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/#typically-this-pattern-is-used-when","content":"need to optimize or preprocessed data when the consumer accesses itcaching remotely access dataloggingencryptionsimulating private and inaccessible propertiesdata validation "},{"title":"Why use a proxy​","type":1,"pageTitle":"Proxy","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/#why-use-a-proxy","content":"use an extra level of indirection to support distributed, controlled, or conditional accessadd a wrapper and delegation to protect the real component from undue complexity "},{"title":"Structure​","type":1,"pageTitle":"Proxy","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/#structure","content":" The Service Interface declares the interface of the Service. The proxy must follow this interface to be able to disguise itself as a service object. The Service is a class that provides some useful business logic. The Proxy class has a reference field that points to a service object. After the proxy finishes its processing (e.g., lazy initialization, logging, access control, caching, etc.), it passes the request to the service object.Usually, proxies manage the full lifecycle of their service objects. The Client should work with both services and proxies via the same interface. This way you can pass a proxy into any code that expects a service object. "},{"title":"Summary​","type":1,"pageTitle":"Proxy","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/#summary","content":"the proxy pattern allows us to create placeholder wrappers for objectsa proxy object allows external access control to the objectimplements the same interface as the original objectthe proxy api (ES6, ES2015) enables the creation of proxy wrappers for objectsproxy implements traps for various kinds of access augmentationgreat for implementing middleware mechanism for caching, logging, encryption, and other kinds of augmented functionality as a virtualized proxy "},{"title":"When to apply​","type":1,"pageTitle":"Proxy","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/#when-to-apply","content":"lazy initialization (virtual proxy) of a heavyweight service object that wastes system resources by being always up, but is needed from time to time Instead of creating the object when the app launches, you can delay the object's initialization to a time when it's really needed access control (protection proxy) for letting only specific clients to be able to use the service object; for instance, when your objects are crucial parts of an operating system and clients are various launched applications (including malicious ones) The proxy can pass the request to the service object only if the client's credentials match some criteria local execution of a remote service (remote proxy) This is when the service object is located on a remote serverIn this case, the proxy passes the client request over the network, handling all the nasty details of working with the network logging requests (logging proxy) This is when you want to keep a history of requests to the service objectThe proxy can log each request before passing it to the service caching request results (caching proxy) This is when you need to cache results of client requests and manage the life cycle of this cache, especially if results are quite largeThe proxy can implement caching for recurring requests that always yield the same resultsThe proxy may use the parameters of requests as the cache keys "},{"title":"Pros and Cons​","type":1,"pageTitle":"Proxy","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/#pros-and-cons","content":"pros\tconscontrolling the service object without clients knowing about it\tovercomplicated code since you need to introduce a lot of new classes managing the lifecycle of the service object when clients don't care about it\tthe response from the service might get delayed the proxy works even if the service object isn't ready or is not available introducing new proxies without changing the service or clients\t "},{"title":"Example​","type":1,"pageTitle":"Proxy","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/#example","content":"// Presume we have an input filed with an ID of inputname: const el = `&lt;input type=&quot;text&quot; id=&quot;inputname&quot; value=&quot;&quot; /&gt;`; // We also have a JS object named myUser with // an id property which references this input const myUser = { id: &quot;inputname&quot;, name: &quot;&quot;, }; // Our first objective is to update myUser.name // when a user changes the input value. This can be achieved // with an onchange event handler on the field: (function inputChange(myObject) { if (!myObject || !myObject.id) return; const input = document.getElementById(myObject.id); input.addEventListener(&quot;onchange&quot;, function (e) { myObject.name = input.value; }); })(myUser);  // create proxy const myUserProxy = new Proxy(myUser, { set: function (target, prop, newValue) { if (prop === &quot;name&quot; &amp;&amp; target.id) { // update object property target[prop] = newValue; // update input field value document.getElementById(target.id).value = newValue; return true; } return false; }, }); // set a new name myUserProxy.name = &quot;Craig&quot;; console.log(myUserProxy.name); // Craig console.log(document.getElementById(&quot;inputname&quot;).value);  "},{"title":"C++ Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/cPlusPlus/","content":"C++ Example #include &lt;iostream&gt; /** * Proxy Design Pattern * * Intent: Provide a surrogate or placeholder for another object to control * access to the original object or to add other responsibilities. */ /** * The Subject interface declares common operations for both RealSubject and the * Proxy. As long as the client works with RealSubject using this interface, * you'll be able to pass it a proxy instead of a real subject. */ class Subject { public: virtual void Request() const = 0; }; /** * The RealSubject contains some core business logic. Usually, RealSubjects are * capable of doing some useful work which may also be very slow or sensitive - * e.g. correcting input data. A Proxy can solve these issues without any * changes to the RealSubject's code. */ class RealSubject : public Subject { public: void Request() const override { std::cout &lt;&lt; &quot;RealSubject: Handling request.\\n&quot;; } }; /** * The Proxy has an interface identical to the RealSubject. */ class Proxy : public Subject { /** * @var RealSubject */ private: RealSubject *real_subject_; bool CheckAccess() const { // Some real checks should go here. std::cout &lt;&lt; &quot;Proxy: Checking access prior to firing a real request.\\n&quot;; return true; } void LogAccess() const { std::cout &lt;&lt; &quot;Proxy: Logging the time of request.\\n&quot;; } /** * The Proxy maintains a reference to an object of the RealSubject class. It * can be either lazy-loaded or passed to the Proxy by the client. */ public: Proxy(RealSubject *real_subject) : real_subject_(new RealSubject(*real_subject)) { } ~Proxy() { delete real_subject_; } /** * The most common applications of the Proxy pattern are lazy loading, * caching, controlling the access, logging, etc. A Proxy can perform one of * these things and then, depending on the result, pass the execution to the * same method in a linked RealSubject object. */ void Request() const override { if (this-&gt;CheckAccess()) { this-&gt;real_subject_-&gt;Request(); this-&gt;LogAccess(); } } }; /** * The client code is supposed to work with all objects (both subjects and * proxies) via the Subject interface in order to support both real subjects and * proxies. In real life, however, clients mostly work with their real subjects * directly. In this case, to implement the pattern more easily, you can extend * your proxy from the real subject's class. */ void ClientCode(const Subject &amp;subject) { // ... subject.Request(); // ... } int main() { std::cout &lt;&lt; &quot;Client: Executing the client code with a real subject:\\n&quot;; RealSubject *real_subject = new RealSubject; ClientCode(*real_subject); std::cout &lt;&lt; &quot;\\n&quot;; std::cout &lt;&lt; &quot;Client: Executing the same client code with a proxy:\\n&quot;; Proxy *proxy = new Proxy(real_subject); ClientCode(*proxy); delete real_subject; delete proxy; return 0; } Client: Executing the client code with a real subject: RealSubject: Handling request. Client: Executing the same client code with a proxy: Proxy: Checking access prior to firing a real request. RealSubject: Handling request. Proxy: Logging the time of request. ","keywords":""},{"title":"C# Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/cSharp/","content":"C# Example // Proxy Design Pattern // // Intent: Lets you provide a substitute or placeholder for another object. A // proxy controls access to the original object, allowing you to perform // something either before or after the request gets through to the original // object. using System; namespace RefactoringGuru.DesignPatterns.Proxy.Conceptual { // The Subject interface declares common operations for both RealSubject and // the Proxy. As long as the client works with RealSubject using this // interface, you'll be able to pass it a proxy instead of a real subject. public interface ISubject { void Request(); } // The RealSubject contains some core business logic. Usually, RealSubjects // are capable of doing some useful work which may also be very slow or // sensitive - e.g. correcting input data. A Proxy can solve these issues // without any changes to the RealSubject's code. class RealSubject : ISubject { public void Request() { Console.WriteLine(&quot;RealSubject: Handling Request.&quot;); } } // The Proxy has an interface identical to the RealSubject. class Proxy : ISubject { private RealSubject _realSubject; public Proxy(RealSubject realSubject) { this._realSubject = realSubject; } // The most common applications of the Proxy pattern are lazy loading, // caching, controlling the access, logging, etc. A Proxy can perform // one of these things and then, depending on the result, pass the // execution to the same method in a linked RealSubject object. public void Request() { if (this.CheckAccess()) { this._realSubject.Request(); this.LogAccess(); } } public bool CheckAccess() { // Some real checks should go here. Console.WriteLine(&quot;Proxy: Checking access prior to firing a real request.&quot;); return true; } public void LogAccess() { Console.WriteLine(&quot;Proxy: Logging the time of request.&quot;); } } public class Client { // The client code is supposed to work with all objects (both subjects // and proxies) via the Subject interface in order to support both real // subjects and proxies. In real life, however, clients mostly work with // their real subjects directly. In this case, to implement the pattern // more easily, you can extend your proxy from the real subject's class. public void ClientCode(ISubject subject) { // ... subject.Request(); // ... } } class Program { static void Main(string[] args) { Client client = new Client(); Console.WriteLine(&quot;Client: Executing the client code with a real subject:&quot;); RealSubject realSubject = new RealSubject(); client.ClientCode(realSubject); Console.WriteLine(); Console.WriteLine(&quot;Client: Executing the same client code with a proxy:&quot;); Proxy proxy = new Proxy(realSubject); client.ClientCode(proxy); } } } Client: Executing the client code with a real subject: RealSubject: Handling Request. Client: Executing the same client code with a proxy: Proxy: Checking access prior to firing a real request. RealSubject: Handling Request. Proxy: Logging the time of request. ","keywords":""},{"title":"Go Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/go/","content":"Go Example package main type application struct { } func (a *application) handleRequest(url, method string) (int, string) { if url == &quot;/app/status&quot; &amp;&amp; method == &quot;GET&quot; { return 200, &quot;Ok&quot; } if url == &quot;/create/user&quot; &amp;&amp; method == &quot;POST&quot; { return 201, &quot;User Created&quot; } return 404, &quot;Not Ok&quot; } package main type nginx struct { application *application maxAllowedRequest int rateLimiter map[string]int } func newNginxServer() *nginx { return &amp;nginx{ application: &amp;application{}, maxAllowedRequest: 2, rateLimiter: make(map[string]int), } } func (n *nginx) handleRequest(url, method string) (int, string) { allowed := n.checkRateLimiting(url) if !allowed { return 403, &quot;Not Allowed&quot; } return n.application.handleRequest(url, method) } func (n *nginx) checkRateLimiting(url string) bool { if n.rateLimiter[url] == 0 { n.rateLimiter[url] = 1 } if n.rateLimiter[url] &gt; n.maxAllowedRequest { return false } n.rateLimiter[url] = n.rateLimiter[url] + 1 return true } package main type server interface { handleRequest(string, string) (int, string) } package main import &quot;fmt&quot; func main() { nginxServer := newNginxServer() appStatusURL := &quot;/app/status&quot; createuserURL := &quot;/create/user&quot; httpCode, body := nginxServer.handleRequest(appStatusURL, &quot;GET&quot;) fmt.Printf(&quot;\\nUrl: %s\\nHttpCode: %d\\nBody: %s\\n&quot;, appStatusURL, httpCode, body) httpCode, body = nginxServer.handleRequest(appStatusURL, &quot;GET&quot;) fmt.Printf(&quot;\\nUrl: %s\\nHttpCode: %d\\nBody: %s\\n&quot;, appStatusURL, httpCode, body) httpCode, body = nginxServer.handleRequest(appStatusURL, &quot;GET&quot;) fmt.Printf(&quot;\\nUrl: %s\\nHttpCode: %d\\nBody: %s\\n&quot;, appStatusURL, httpCode, body) httpCode, body = nginxServer.handleRequest(createuserURL, &quot;POST&quot;) fmt.Printf(&quot;\\nUrl: %s\\nHttpCode: %d\\nBody: %s\\n&quot;, appStatusURL, httpCode, body) httpCode, body = nginxServer.handleRequest(createuserURL, &quot;GET&quot;) fmt.Printf(&quot;\\nUrl: %s\\nHttpCode: %d\\nBody: %s\\n&quot;, appStatusURL, httpCode, body) } Url: /app/status HttpCode: 200 Body: Ok Url: /app/status HttpCode: 200 Body: Ok Url: /app/status HttpCode: 403 Body: Not Allowed Url: /app/status HttpCode: 201 Body: User Created Url: /app/status HttpCode: 404 Body: Not Ok ","keywords":""},{"title":"Java Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/java/","content":"Java Example downloader/YouTubeDownloader.java package refactoring_guru.proxy.example.downloader; import refactoring_guru.proxy.example.some_cool_media_library.ThirdPartyYouTubeLib; import refactoring_guru.proxy.example.some_cool_media_library.Video; import java.util.HashMap; public class YouTubeDownloader { private ThirdPartyYouTubeLib api; public YouTubeDownloader(ThirdPartyYouTubeLib api) { this.api = api; } public void renderVideoPage(String videoId) { Video video = api.getVideo(videoId); System.out.println(&quot;\\n-------------------------------&quot;); System.out.println(&quot;Video page (imagine fancy HTML)&quot;); System.out.println(&quot;ID: &quot; + video.id); System.out.println(&quot;Title: &quot; + video.title); System.out.println(&quot;Video: &quot; + video.data); System.out.println(&quot;-------------------------------\\n&quot;); } public void renderPopularVideos() { HashMap&lt;String, Video&gt; list = api.popularVideos(); System.out.println(&quot;\\n-------------------------------&quot;); System.out.println(&quot;Most popular videos on YouTube (imagine fancy HTML)&quot;); for (Video video : list.values()) { System.out.println(&quot;ID: &quot; + video.id + &quot; / Title: &quot; + video.title); } System.out.println(&quot;-------------------------------\\n&quot;); } } proxy/YouTubeCacheProxy.java package refactoring_guru.proxy.example.proxy; import refactoring_guru.proxy.example.some_cool_media_library.ThirdPartyYouTubeClass; import refactoring_guru.proxy.example.some_cool_media_library.ThirdPartyYouTubeLib; import refactoring_guru.proxy.example.some_cool_media_library.Video; import java.util.HashMap; public class YouTubeCacheProxy implements ThirdPartyYouTubeLib { private ThirdPartyYouTubeLib youtubeService; private HashMap&lt;String, Video&gt; cachePopular = new HashMap&lt;String, Video&gt;(); private HashMap&lt;String, Video&gt; cacheAll = new HashMap&lt;String, Video&gt;(); public YouTubeCacheProxy() { this.youtubeService = new ThirdPartyYouTubeClass(); } @Override public HashMap&lt;String, Video&gt; popularVideos() { if (cachePopular.isEmpty()) { cachePopular = youtubeService.popularVideos(); } else { System.out.println(&quot;Retrieved list from cache.&quot;); } return cachePopular; } @Override public Video getVideo(String videoId) { Video video = cacheAll.get(videoId); if (video == null) { video = youtubeService.getVideo(videoId); cacheAll.put(videoId, video); } else { System.out.println(&quot;Retrieved video '&quot; + videoId + &quot;' from cache.&quot;); } return video; } public void reset() { cachePopular.clear(); cacheAll.clear(); } } some_cool_media_library some_cool_media_library/ThirdPartyYouTubeClass.java package refactoring_guru.proxy.example.some_cool_media_library; import java.util.HashMap; public class ThirdPartyYouTubeClass implements ThirdPartyYouTubeLib { @Override public HashMap&lt;String, Video&gt; popularVideos() { connectToServer(&quot;http://www.youtube.com&quot;); return getRandomVideos(); } @Override public Video getVideo(String videoId) { connectToServer(&quot;http://www.youtube.com/&quot; + videoId); return getSomeVideo(videoId); } // ----------------------------------------------------------------------- // Fake methods to simulate network activity. They as slow as a real life. private int random(int min, int max) { return min + (int) (Math.random() * ((max - min) + 1)); } private void experienceNetworkLatency() { int randomLatency = random(5, 10); for (int i = 0; i &lt; randomLatency; i++) { try { Thread.sleep(100); } catch (InterruptedException ex) { ex.printStackTrace(); } } } private void connectToServer(String server) { System.out.print(&quot;Connecting to &quot; + server + &quot;... &quot;); experienceNetworkLatency(); System.out.print(&quot;Connected!&quot; + &quot;\\n&quot;); } private HashMap&lt;String, Video&gt; getRandomVideos() { System.out.print(&quot;Downloading populars... &quot;); experienceNetworkLatency(); HashMap&lt;String, Video&gt; hmap = new HashMap&lt;String, Video&gt;(); hmap.put(&quot;catzzzzzzzzz&quot;, new Video(&quot;sadgahasgdas&quot;, &quot;Catzzzz.avi&quot;)); hmap.put(&quot;mkafksangasj&quot;, new Video(&quot;mkafksangasj&quot;, &quot;Dog play with ball.mp4&quot;)); hmap.put(&quot;dancesvideoo&quot;, new Video(&quot;asdfas3ffasd&quot;, &quot;Dancing video.mpq&quot;)); hmap.put(&quot;dlsdk5jfslaf&quot;, new Video(&quot;dlsdk5jfslaf&quot;, &quot;Barcelona vs RealM.mov&quot;)); hmap.put(&quot;3sdfgsd1j333&quot;, new Video(&quot;3sdfgsd1j333&quot;, &quot;Programing lesson#1.avi&quot;)); System.out.print(&quot;Done!&quot; + &quot;\\n&quot;); return hmap; } private Video getSomeVideo(String videoId) { System.out.print(&quot;Downloading video... &quot;); experienceNetworkLatency(); Video video = new Video(videoId, &quot;Some video title&quot;); System.out.print(&quot;Done!&quot; + &quot;\\n&quot;); return video; } } some_cool_media_library/ThirdPartyYouTubeLib.java package refactoring_guru.proxy.example.some_cool_media_library; import java.util.HashMap; public interface ThirdPartyYouTubeLib { HashMap&lt;String, Video&gt; popularVideos(); Video getVideo(String videoId); } some_cool_media_library/Video.java package refactoring_guru.proxy.example.some_cool_media_library; public class Video { public String id; public String title; public String data; Video(String id, String title) { this.id = id; this.title = title; this.data = &quot;Random video.&quot;; } } Demo.java package refactoring_guru.proxy.example; import refactoring_guru.proxy.example.downloader.YouTubeDownloader; import refactoring_guru.proxy.example.proxy.YouTubeCacheProxy; import refactoring_guru.proxy.example.some_cool_media_library.ThirdPartyYouTubeClass; public class Demo { public static void main(String[] args) { YouTubeDownloader naiveDownloader = new YouTubeDownloader(new ThirdPartyYouTubeClass()); YouTubeDownloader smartDownloader = new YouTubeDownloader(new YouTubeCacheProxy()); long naive = test(naiveDownloader); long smart = test(smartDownloader); System.out.print(&quot;Time saved by caching proxy: &quot; + (naive - smart) + &quot;ms&quot;); } private static long test(YouTubeDownloader downloader) { long startTime = System.currentTimeMillis(); // User behavior in our app: downloader.renderPopularVideos(); downloader.renderVideoPage(&quot;catzzzzzzzzz&quot;); downloader.renderPopularVideos(); downloader.renderVideoPage(&quot;dancesvideoo&quot;); // Users might visit the same page quite often. downloader.renderVideoPage(&quot;catzzzzzzzzz&quot;); downloader.renderVideoPage(&quot;someothervid&quot;); long estimatedTime = System.currentTimeMillis() - startTime; System.out.print(&quot;Time elapsed: &quot; + estimatedTime + &quot;ms\\n&quot;); return estimatedTime; } } Connecting to http://www.youtube.com... Connected! Downloading populars... Done! ------------------------------- Most popular videos on YouTube (imagine fancy HTML) ID: sadgahasgdas / Title: Catzzzz.avi ID: asdfas3ffasd / Title: Dancing video.mpq ID: 3sdfgsd1j333 / Title: Programing lesson#1.avi ID: mkafksangasj / Title: Dog play with ball.mp4 ID: dlsdk5jfslaf / Title: Barcelona vs RealM.mov ------------------------------- Connecting to http://www.youtube.com/catzzzzzzzzz... Connected! Downloading video... Done! ------------------------------- Video page (imagine fancy HTML) ID: catzzzzzzzzz Title: Some video title Video: Random video. ------------------------------- Connecting to http://www.youtube.com... Connected! Downloading populars... Done! ------------------------------- Most popular videos on YouTube (imagine fancy HTML) ID: sadgahasgdas / Title: Catzzzz.avi ID: asdfas3ffasd / Title: Dancing video.mpq ID: 3sdfgsd1j333 / Title: Programing lesson#1.avi ID: mkafksangasj / Title: Dog play with ball.mp4 ID: dlsdk5jfslaf / Title: Barcelona vs RealM.mov ------------------------------- Connecting to http://www.youtube.com/dancesvideoo... Connected! Downloading video... Done! ------------------------------- Video page (imagine fancy HTML) ID: dancesvideoo Title: Some video title Video: Random video. ------------------------------- Connecting to http://www.youtube.com/catzzzzzzzzz... Connected! Downloading video... Done! ------------------------------- Video page (imagine fancy HTML) ID: catzzzzzzzzz Title: Some video title Video: Random video. ------------------------------- Connecting to http://www.youtube.com/someothervid... Connected! Downloading video... Done! ------------------------------- Video page (imagine fancy HTML) ID: someothervid Title: Some video title Video: Random video. ------------------------------- Time elapsed: 9354ms Connecting to http://www.youtube.com... Connected! Downloading populars... Done! ------------------------------- Most popular videos on YouTube (imagine fancy HTML) ID: sadgahasgdas / Title: Catzzzz.avi ID: asdfas3ffasd / Title: Dancing video.mpq ID: 3sdfgsd1j333 / Title: Programing lesson#1.avi ID: mkafksangasj / Title: Dog play with ball.mp4 ID: dlsdk5jfslaf / Title: Barcelona vs RealM.mov ------------------------------- Connecting to http://www.youtube.com/catzzzzzzzzz... Connected! Downloading video... Done! ------------------------------- Video page (imagine fancy HTML) ID: catzzzzzzzzz Title: Some video title Video: Random video. ------------------------------- Retrieved list from cache. ------------------------------- Most popular videos on YouTube (imagine fancy HTML) ID: sadgahasgdas / Title: Catzzzz.avi ID: asdfas3ffasd / Title: Dancing video.mpq ID: 3sdfgsd1j333 / Title: Programing lesson#1.avi ID: mkafksangasj / Title: Dog play with ball.mp4 ID: dlsdk5jfslaf / Title: Barcelona vs RealM.mov ------------------------------- Connecting to http://www.youtube.com/dancesvideoo... Connected! Downloading video... Done! ------------------------------- Video page (imagine fancy HTML) ID: dancesvideoo Title: Some video title Video: Random video. ------------------------------- Retrieved video 'catzzzzzzzzz' from cache. ------------------------------- Video page (imagine fancy HTML) ID: catzzzzzzzzz Title: Some video title Video: Random video. ------------------------------- Connecting to http://www.youtube.com/someothervid... Connected! Downloading video... Done! ------------------------------- Video page (imagine fancy HTML) ID: someothervid Title: Some video title Video: Random video. ------------------------------- Time elapsed: 5875ms Time saved by caching proxy: 3479ms ","keywords":""},{"title":"JavaScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/javascript/","content":"JavaScript Example const Cryptr = require(&quot;cryptr&quot;); const lock = (obj, password) =&gt; { const cryptr = new Cryptr(password); const newObj = {}; for (const i of Object.keys(obj)) { newObj[i] = cryptr.encrypt(obj[i]); } return new Proxy(newObj, { set(target, key, value) { return (target[key] = cryptr.encrypt(value)); }, get(target, key) { return target[key]; }, }); }; const unlock = (obj, password) =&gt; { const cryptr = new Cryptr(password); const newObj = {}; for (const i of Object.keys(obj)) { newObj[i] = cryptr.decrypt(obj[i]); } return new Proxy(newObj, { set() { throw new Error(&quot;This is a readonly object&quot;); }, }); }; module.exports = { lock, unlock, }; // A proxy that generates an observable object, which allows us to attach a function which is executed every time a given object is modified // this kind of behavior is often seen in frameworks like React and Vue, where changes to reactive data properties trigger re-renders on the UI, thus automating and optimizing UI updates const obj = { name: &quot;John Doe&quot;, age: 32, city: &quot;Chicago&quot;, country: &quot;US&quot;, }; const makeReactive = (obj, observer) =&gt; { return new Proxy(obj, { set(target, key, value) { observer({ [key]: value, }); return (target[key] = value); }, }); }; const reactive = makeReactive(obj, (res) =&gt; console.log(res)); // run with nodemon reactive.color = &quot;Green&quot;; // this will cause an update displayed in the nodemon const {lock, unlock} = require(&quot;./Vault.js&quot;); const password = &quot;thisisastrongpassword123&quot;; const obj = { name: &quot;John Doe&quot;, age: 32, city: &quot;Chicago&quot;, country: &quot;US&quot;, }; const person = lock(obj, password); console.log(person); person.favColor = &quot;Red&quot;; person.favFruit = &quot;Apple&quot;; console.log(person); const unlocked = unlock(person, password); console.log(unlocked); unlocked.food = &quot;Pizza&quot;; // gets an error as is readonly ","keywords":""},{"title":"Python Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/python/","content":"Python Example &quot;&quot;&quot; Proxy Design Pattern Intent: Provide a surrogate or placeholder for another object to control access to the original object or to add other responsibilities. &quot;&quot;&quot; from abc import ABC, abstractmethod class Subject(ABC): &quot;&quot;&quot; The Subject interface declares common operations for both RealSubject and the Proxy. As long as the client works with RealSubject using this interface, you'll be able to pass it a proxy instead of a real subject. &quot;&quot;&quot; @abstractmethod def request(self) -&gt; None: pass class RealSubject(Subject): &quot;&quot;&quot; The RealSubject contains some core business logic. Usually, RealSubjects are capable of doing some useful work which may also be very slow or sensitive - e.g. correcting input data. A Proxy can solve these issues without any changes to the RealSubject's code. &quot;&quot;&quot; def request(self) -&gt; None: print(&quot;RealSubject: Handling request.&quot;) class Proxy(Subject): &quot;&quot;&quot; The Proxy has an interface identical to the RealSubject. &quot;&quot;&quot; def __init__(self, real_subject: RealSubject) -&gt; None: self._real_subject = real_subject def request(self) -&gt; None: &quot;&quot;&quot; The most common applications of the Proxy pattern are lazy loading, caching, controlling the access, logging, etc. A Proxy can perform one of these things and then, depending on the result, pass the execution to the same method in a linked RealSubject object. &quot;&quot;&quot; if self.check_access(): self._real_subject.request() self.log_access() def check_access(self) -&gt; bool: print(&quot;Proxy: Checking access prior to firing a real request.&quot;) return True def log_access(self) -&gt; None: print(&quot;Proxy: Logging the time of request.&quot;, end=&quot;&quot;) def client_code(subject: Subject) -&gt; None: &quot;&quot;&quot; The client code is supposed to work with all objects (both subjects and proxies) via the Subject interface in order to support both real subjects and proxies. In real life, however, clients mostly work with their real subjects directly. In this case, to implement the pattern more easily, you can extend your proxy from the real subject's class. &quot;&quot;&quot; # ... subject.request() # ... if __name__ == &quot;__main__&quot;: print(&quot;Client: Executing the client code with a real subject:&quot;) real_subject = RealSubject() client_code(real_subject) print(&quot;&quot;) print(&quot;Client: Executing the same client code with a proxy:&quot;) proxy = Proxy(real_subject) client_code(proxy) Client: Executing the client code with a real subject: RealSubject: Handling request. Client: Executing the same client code with a proxy: Proxy: Checking access prior to firing a real request. RealSubject: Handling request. Proxy: Logging the time of request. ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/python/example2","content":"Example 2 class SubjectInterface: &quot;&quot;&quot; Defined the common interface for RealSubject and Proxy so that a Proxy can be used anywhere a RealSubject is expected. &quot;&quot;&quot; def request(self): pass class Proxy(SubjectInterface): &quot;&quot;&quot; Maintain a reference that lets the proxy access the real subject. Provide an interface identical to Subject's. &quot;&quot;&quot; def __init__(self, real_subject): self._real_subject = real_subject def request(self): print(&quot;Proxy may be doing something, like controlling request access&quot;) self._real_subject.request() class RealSubject(SubjectInterface): &quot;&quot;&quot; Define the real object that the proxy represents. &quot;&quot;&quot; def request(self): print(&quot;The real thing is dealing with the request&quot;) from proxy1 import Proxy, RealSubject rs = RealSubject() rs.request() proxy = Proxy(rs) proxy.request() ","keywords":""},{"title":"Example 3","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/python/example3","content":"Example 3 class Blog: def read(self): print(&quot;Read the blog&quot;) def write(self): print(&quot;Write the blog&quot;) class Proxy: def __init__(self, target): self.target = target def __getattr__(self, attr): return getattr(self.target, attr) class AnonUserBlogProxy(Proxy): def __init__(self, blog): super().__init__(blog) def write(self): print(&quot;Only authorized users can write blog posts.&quot;) from proxy2 import Blog, AnonUserBlogProxy blog = Blog() blog.write() # can write the blog proxy = AnonUserBlogProxy(blog) proxy.write() # only authorized users can write the blog ","keywords":""},{"title":"Swift Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/swift/","content":"Swift Example /// Proxy Design Pattern /// /// Intent: Provide a surrogate or placeholder for another object to control /// access to the original object or to add other responsibilities. import XCTest /// The Subject interface declares common operations for both RealSubject and /// the Proxy. As long as the client works with RealSubject using this /// interface, you'll be able to pass it a proxy instead of a real subject. protocol Subject { func request() } /// The RealSubject contains some core business logic. Usually, RealSubjects are /// capable of doing some useful work which may also be very slow or sensitive - /// e.g. correcting input data. A Proxy can solve these issues without any /// changes to the RealSubject's code. class RealSubject: Subject { func request() { print(&quot;RealSubject: Handling request.&quot;) } } /// The Proxy has an interface identical to the RealSubject. class Proxy: Subject { private var realSubject: RealSubject /// The Proxy maintains a reference to an object of the RealSubject class. /// It can be either lazy-loaded or passed to the Proxy by the client. init(_ realSubject: RealSubject) { self.realSubject = realSubject } /// The most common applications of the Proxy pattern are lazy loading, /// caching, controlling the access, logging, etc. A Proxy can perform one /// of these things and then, depending on the result, pass the execution to /// the same method in a linked RealSubject object. func request() { if (checkAccess()) { realSubject.request() logAccess() } } private func checkAccess() -&gt; Bool { /// Some real checks should go here. print(&quot;Proxy: Checking access prior to firing a real request.&quot;) return true } private func logAccess() { print(&quot;Proxy: Logging the time of request.&quot;) } } /// The client code is supposed to work with all objects (both subjects and /// proxies) via the Subject interface in order to support both real subjects /// and proxies. In real life, however, clients mostly work with their real /// subjects directly. In this case, to implement the pattern more easily, you /// can extend your proxy from the real subject's class. class Client { // ... static func clientCode(subject: Subject) { // ... print(subject.request()) // ... } // ... } /// Let's see how it all works together. class ProxyConceptual: XCTestCase { func test() { print(&quot;Client: Executing the client code with a real subject:&quot;) let realSubject = RealSubject() Client.clientCode(subject: realSubject) print(&quot;\\nClient: Executing the same client code with a proxy:&quot;) let proxy = Proxy(realSubject) Client.clientCode(subject: proxy) } } ","keywords":""},{"title":"Example 2","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/swift/example2","content":"Example 2 import XCTest class ProxyRealWorld: XCTestCase { /// Proxy Design Pattern /// /// Intent: Provide a surrogate or placeholder for another object to control /// access to the original object or to add other responsibilities. /// /// Example: There are countless ways proxies can be used: caching, logging, /// access control, delayed initialization, etc. func testProxyRealWorld() { print(&quot;Client: Loading a profile WITHOUT proxy&quot;) loadBasicProfile(with: Keychain()) loadProfileWithBankAccount(with: Keychain()) print(&quot;\\nClient: Let's load a profile WITH proxy&quot;) loadBasicProfile(with: ProfileProxy()) loadProfileWithBankAccount(with: ProfileProxy()) } func loadBasicProfile(with service: ProfileService) { service.loadProfile(with: [.basic], success: { profile in print(&quot;Client: Basic profile is loaded&quot;) }) { error in print(&quot;Client: Cannot load a basic profile&quot;) print(&quot;Client: Error: &quot; + error.localizedSummary) } } func loadProfileWithBankAccount(with service: ProfileService) { service.loadProfile(with: [.basic, .bankAccount], success: { profile in print(&quot;Client: Basic profile with a bank account is loaded&quot;) }) { error in print(&quot;Client: Cannot load a profile with a bank account&quot;) print(&quot;Client: Error: &quot; + error.localizedSummary) } } } enum AccessField { case basic case bankAccount } protocol ProfileService { typealias Success = (Profile) -&gt; () typealias Failure = (LocalizedError) -&gt; () func loadProfile(with fields: [AccessField], success: Success, failure: Failure) } class ProfileProxy: ProfileService { private let keychain = Keychain() func loadProfile(with fields: [AccessField], success: Success, failure: Failure) { if let error = checkAccess(for: fields) { failure(error) } else { /// Note: /// At this point, the `success` and `failure` closures can be /// passed directly to the original service (as it is now) or /// expanded here to handle a result (for example, to cache). keychain.loadProfile(with: fields, success: success, failure: failure) } } private func checkAccess(for fields: [AccessField]) -&gt; LocalizedError? { if fields.contains(.bankAccount) { switch BiometricsService.checkAccess() { case .authorized: return nil case .denied: return ProfileError.accessDenied } } return nil } } class Keychain: ProfileService { func loadProfile(with fields: [AccessField], success: Success, failure: Failure) { var profile = Profile() for item in fields { switch item { case .basic: let info = loadBasicProfile() profile.firstName = info[Profile.Keys.firstName.raw] profile.lastName = info[Profile.Keys.lastName.raw] profile.email = info[Profile.Keys.email.raw] case .bankAccount: profile.bankAccount = loadBankAccount() } } success(profile) } private func loadBasicProfile() -&gt; [String : String] { /// Gets these fields from a secure storage. return [Profile.Keys.firstName.raw : &quot;Vasya&quot;, Profile.Keys.lastName.raw : &quot;Pupkin&quot;, Profile.Keys.email.raw : &quot;vasya.pupkin@gmail.com&quot;] } private func loadBankAccount() -&gt; BankAccount { /// Gets these fields from a secure storage. return BankAccount(id: 12345, amount: 999) } } class BiometricsService { enum Access { case authorized case denied } static func checkAccess() -&gt; Access { /// The service uses Face ID, Touch ID or a plain old password to /// determine whether the current user is an owner of the device. /// Let's assume that in our example a user forgot a password :) return .denied } } struct Profile { enum Keys: String { case firstName case lastName case email } var firstName: String? var lastName: String? var email: String? var bankAccount: BankAccount? } struct BankAccount { var id: Int var amount: Double } enum ProfileError: LocalizedError { case accessDenied var errorDescription: String? { switch self { case .accessDenied: return &quot;Access is denied. Please enter a valid password&quot; } } } extension RawRepresentable { var raw: Self.RawValue { return rawValue } } extension LocalizedError { var localizedSummary: String { return errorDescription ?? &quot;&quot; } } Client: Loading a profile WITHOUT proxy Client: Basic profile is loaded Client: Basic profile with a bank account is loaded Client: Let's load a profile WITH proxy Client: Basic profile is loaded Client: Cannot load a profile with a bank account Client: Error: Access is denied. Please enter a valid password ","keywords":""},{"title":"TypeScript Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/designPatterns/Structural_patterns/Proxy/typescript/","content":"TypeScript Example /** * Proxy Design Pattern * * Intent: Provide a surrogate or placeholder for another object to control * access to the original object or to add other responsibilities. */ /** * The Subject interface declares common operations for both RealSubject and the * Proxy. As long as the client works with RealSubject using this interface, * you'll be able to pass it a proxy instead of a real subject. */ interface Subject { request(): void; } /** * The RealSubject contains some core business logic. Usually, RealSubjects are * capable of doing some useful work which may also be very slow or sensitive - * e.g. correcting input data. A Proxy can solve these issues without any * changes to the RealSubject's code. */ class RealSubject implements Subject { public request(): void { console.log(&quot;RealSubject: Handling request.&quot;); } } /** * The Proxy has an interface identical to the RealSubject. */ class Proxy implements Subject { private realSubject: RealSubject; /** * The Proxy maintains a reference to an object of the RealSubject class. It * can be either lazy-loaded or passed to the Proxy by the client. */ constructor(realSubject: RealSubject) { this.realSubject = realSubject; } /** * The most common applications of the Proxy pattern are lazy loading, * caching, controlling the access, logging, etc. A Proxy can perform one of * these things and then, depending on the result, pass the execution to the * same method in a linked RealSubject object. */ public request(): void { if (this.checkAccess()) { this.realSubject.request(); this.logAccess(); } } private checkAccess(): boolean { // Some real checks should go here. console.log(&quot;Proxy: Checking access prior to firing a real request.&quot;); return true; } private logAccess(): void { console.log(&quot;Proxy: Logging the time of request.&quot;); } } /** * The client code is supposed to work with all objects (both subjects and * proxies) via the Subject interface in order to support both real subjects and * proxies. In real life, however, clients mostly work with their real subjects * directly. In this case, to implement the pattern more easily, you can extend * your proxy from the real subject's class. */ function clientCode(subject: Subject) { // ... subject.request(); // ... } console.log(&quot;Client: Executing the client code with a real subject:&quot;); const realSubject = new RealSubject(); clientCode(realSubject); console.log(&quot;&quot;); console.log(&quot;Client: Executing the same client code with a proxy:&quot;); const proxy = new Proxy(realSubject); clientCode(proxy); Client: Executing the client code with a real subject: RealSubject: Handling request. Client: Executing the same client code with a proxy: Proxy: Checking access prior to firing a real request. RealSubject: Handling request. Proxy: Logging the time of request. ","keywords":""},{"title":"Memory Leaks","type":0,"sectionRef":"#","url":"docs/interviewPrep/memory/","content":"","keywords":""},{"title":"JavaScript / NodeJS​","type":1,"pageTitle":"Memory Leaks","url":"docs/interviewPrep/memory/#javascript--nodejs","content":""},{"title":"V8 handles 2 main memory categories​","type":1,"pageTitle":"Memory Leaks","url":"docs/interviewPrep/memory/#v8-handles-2-main-memory-categories","content":"Stack - it stores the primitive data types: Number, String, boolean, Null, Undefined, Symbol and references to non-primitive data types ObjectHeap stores the non-primitive data types: Object "},{"title":"V8 has a garbage collector runs mainly Mark and Sweep algorithm​","type":1,"pageTitle":"Memory Leaks","url":"docs/interviewPrep/memory/#v8-has-a-garbage-collector-runs-mainly-mark-and-sweep-algorithm","content":"It checks for all objects' reference paths to the root node, which is the global or window objectIf any reference has no path to the root node, it will be marked as garbage and will be swept laterImportant Note: When the Garbage Collector runs, it pauses your application entirely until it finishes its work so you need to minimize its work by taking care of your objects' references "},{"title":"Global Variables​","type":1,"pageTitle":"Memory Leaks","url":"docs/interviewPrep/memory/#global-variables","content":"As they have a direct path to the root node, they will stay in memory as long as the application is runningso you need to be careful when setting global variables and the amount of data you’ll set to them "},{"title":"Multiple References​","type":1,"pageTitle":"Memory Leaks","url":"docs/interviewPrep/memory/#multiple-references","content":"Setting multiple references to the same object may cause a problemalso as you may remove one ref and forget the other which will keep your object still exists in the Heap "},{"title":"Closures​","type":1,"pageTitle":"Memory Leaks","url":"docs/interviewPrep/memory/#closures","content":"In closures simply you keep references to objects to be used laterthis feature has many advantages but if it’s used without caution it may cause big issues as these references will keep objects in heap and these objects might be large ones, not just simple objects Run app with garbage collector attach to chrome debugger options​ node --expose-gc --inspect=9222 app.js "},{"title":"Programming Paradigm","type":0,"sectionRef":"#","url":"docs/interviewPrep/programmingParadigm/","content":"","keywords":""},{"title":"Declarative Programming​","type":1,"pageTitle":"Programming Paradigm","url":"docs/interviewPrep/programmingParadigm/#declarative-programming","content":"programmer instructs the computer on what is to be computed you do not know how it works, but you know what it does it is a good idea to decouple DOM manipulation from app logic improves the testability of code improves readability of code must define the specification for solving a task e.g.: we describe what the problem's field and how and what kind of result we expect the order of execution and the method of achieving results does not matter common example is HTML it describes the contents of the page, but not the way it should be rendered with declarative programming, the exact path of a program is not deterministic from the perspective of executed code SQL example select upper(name) from people where length(name) &gt; 5 order by name  "},{"title":"Imperative Programming​","type":1,"pageTitle":"Programming Paradigm","url":"docs/interviewPrep/programmingParadigm/#imperative-programming","content":"the script is basically telling the computer how to do somethingimperative phrases which change the global state of a programnot scalablewe describe the system as a process of execution of instructions that change the state of the systemit is commonly considered to be less extensible that the othersexamples: C++, C, Go, JavaScriptnot all languages can be categorized to a single programming paradigm usually a language support 2 or even 3 paradigms at the same timeexample, JavaScript supports imperative, functional, and object-oriented paradigms at the same time with imperative programming, you know exactly what is happening you can dial into the execution of a program and easily debug it all code is imperative in the end when it is executed by the processor result = [] i = 0 start: numPeople = length(people) if i &gt;= numPeople goto finished p = people[i] nameLength = length(p.name) if nameLength &lt;= 5 goto nextOne upperName = toUpper(p.name) addToList(result, upperName) nextOne: i = i + 1 goto start finished: return sort(result)  "},{"title":"Object-Oriented Programming​","type":1,"pageTitle":"Programming Paradigm","url":"docs/interviewPrep/programmingParadigm/#object-oriented-programming","content":"program is defined by object which combine state and behaviorgood for structured and modular codewell suited for big projectsit describes the computer program as a set of specific objects, that are instances of a classthe objects communicate by sending, receiving, and processing the messages the messages may include parameters the objects have state they can change when processing a message objects may create other objects or may send messages when processing a messageit is well-suited for big projects that require having a state within the appits message-oriented approach provides a way for objects to be replaced by other objects of a same type means that the behavior of a program can be changed just by replacing an object same objects as building blocks could be reused in other parts of the same system class Task { public createdDate: string; public completed: boolean; public completedDate?: string; constructor(public name: string) { this.completed = false; this.createdDate = new Date().toString(); } } class TasksList { private tasks: Task[] = []; addTask(name: string): void { this.tasks.push(new Task(name)); } completeTaskByName(name: string): Task | never { const task = this.getTodoTasks().find((task) =&gt; task.name === name); if (!task) { throw new Error(&quot;The task is not found&quot;); } task.completed = true; task.completedDate = new Date().toString(); return task; } getTodoTasks(): Task[] { return this.tasks.filter((task) =&gt; !task.completed); } getCompletedTasks(): Task[] { return this.tasks.filter((task) =&gt; Boolean(task.completed)); } } const tasksList = new TasksList(); tasksList.addTask('Study &quot;Principles of OOP&quot; theory'); tasksList.addTask('Complete &quot;Principles of OOP&quot; home task'); console.log(tasksList.getTodoTasks()); console.log(tasksList.getCompletedTasks()); tasksList.completeTaskByName('Study &quot;Principles of OOP&quot; theory'); console.log(tasksList.getTodoTasks()); console.log(tasksList.getCompletedTasks());  "},{"title":"Functional Programming​","type":1,"pageTitle":"Programming Paradigm","url":"docs/interviewPrep/programmingParadigm/#functional-programming","content":"treats computations as the evaluation of functions and avoids changing state and mutable dataeliminating side effects e.g.: changes in state that do not depend on the function inputs can make it much easier to understand and predict the behavior of a program emphasize using of immutable datait describe the program as a set of functions (not objects or procedures) that are used as building blocks to manipulate data it forces us to use function in their mathematical sense as they just declare a relationship between 2 entities functions do not change the state of a program (also known as pure) they pipe the data through them to produce a result there are no variables, only constantscan have a certain nesting of functions where the result of the function can be expressed as a list of arguments that are passed to the functionhowever, arguments can also be functions programming languages that can pass a function as a parameter to another function are known as first-class citizen function e.g.: JavaScript a program in functional programming is not represented by a specific state, but by a combination of function calls at a certain point in timeit pushes the idea that is is good to use immutable data immutable data is faster because it is put into memory once and it does not change pure functions are functions without side effects when there is a list of parameters as function argumentsa certain logic for handling thema certain result in return the function does not change data and state outside its scopeif you change a variable outside the scope of the function this indicates that the function is impure, having a side effect functional programming assumes that the functions are pure and should follow the principle of single responsibility each function should have a single responsibilitybecause the essence of functional programming is in the combination of various functions with different responsibilities to achieve the result import {flow, map, entries, groupBy, orderBy, take, sumBy} from &quot;lodash/fp&quot;; const driverStandings = [ {name: &quot;Carlos Sainz&quot;, car: &quot;FERRARI&quot;, points: 127}, {name: &quot;Charles Leclerc&quot;, car: &quot;FERRARI&quot;, points: 138}, {name: &quot;George Russell&quot;, car: &quot;MERCEDES&quot;, points: 111}, {name: &quot;Sergio Perez&quot;, car: &quot;RED BULL RACING RBPT&quot;, points: 147}, {name: &quot;Lewis Hamilton&quot;, car: &quot;MERCEDES&quot;, points: 93}, {name: &quot;Max Verstappen&quot;, car: &quot;RED BULL RACING RBPT&quot;, points: 181}, ]; const getTop2CarConstructorStandings = flow( groupBy(&quot;car&quot;), entries, map(([car, driver]) =&gt; ({car, points: sumBy(&quot;points&quot;)(driver)})), orderBy(&quot;points&quot;, &quot;desc&quot;), take(2) ); console.log(getTop2CarConstructorStandings(driverStandings));  "},{"title":"Functional Programming","type":0,"sectionRef":"#","url":"docs/interviewPrep/programmingParadigm/FP/","content":"","keywords":""},{"title":"Imperative programming paradigm​","type":1,"pageTitle":"Functional Programming","url":"docs/interviewPrep/programmingParadigm/FP/#imperative-programming-paradigm","content":"it is one of the oldest programming paradigmsIt has a close connection to machine architectureBy changing the state through assignment statements we are achieving resultsThe state is changing by performing step-by-step tasksThe main concept is how to achieve our goalIf you are following the imperative programming paradigm you have several statements and the result is stored after execution of all of them pro\tconsVery simple to implement\tLess efficient and less productive Parallel programming is not possible example creation of new empty array doubledgoing through array with for loopdouble each elementpush the doubled element into doubled arrayreturn doubled array const doubleMap = (numbers) =&gt; { const doubled = []; for (let i = 0; i &lt; numbers.length; i++) { doubled.push(numbers[i] * 2); } return doubled; }; console.log(doubleMap([2, 3, 4])); // [4, 6, 8]  "},{"title":"Declarative programming paradigm​","type":1,"pageTitle":"Functional Programming","url":"docs/interviewPrep/programmingParadigm/FP/#declarative-programming-paradigm","content":"The main idea is to define what needs to be accomplished by the program, but not how it needs to be implemented instead of instructing how to achieve the desired results we focus only on the result itself It is different from imperative programming which focuses on a set of commands which need to be executed in order to achieve the required solution it describes a particular class of problems that have to be solved and a language implementation takes care of finding the solution With this approach, the resulting program is simpler to read example all routine work is done by mapwe only pass the callback in which we provide the condition which is important to us in this case const doubleMap = (numbers) =&gt; numbers.map((n) =&gt; n * 2); console.log(doubleMap([2, 3, 4])); // [4, 6, 8]  "},{"title":"Is FP imperative or declarative​","type":1,"pageTitle":"Functional Programming","url":"docs/interviewPrep/programmingParadigm/FP/#is-fp-imperative-or-declarative","content":"FP implements most of the declarative rules such as programmers focus on what to do, composition, recursion, immutability, functions as first-class objects, etc. Characteristic\tImperative Approach\tFunctional ApproachDescription\tThe program directly changes computed state\tThe program avoids mutating state and computation data Key points\tDirect assignments, global variables, common data structures\tCompositional, recursion, no side effects Programmer focus\tHow to perform tasks and how to track state changing\tWhat is desired and what transformations are required State changes\tImportant\tNon-existent Order of execution\tImportant\tLow importance Primary flow control\tLoops, conditionals and function calls\tFunction calls, recursion Primary manipulation unit\tInstances of structures or classes\tFunctions as first-class objects and data collections "},{"title":"Functional Language Possibilities","type":0,"sectionRef":"#","url":"docs/interviewPrep/programmingParadigm/FP/functionalLanguagePossibilities","content":"","keywords":""},{"title":"When to use functional approach​","type":1,"pageTitle":"Functional Language Possibilities","url":"docs/interviewPrep/programmingParadigm/FP/functionalLanguagePossibilities#when-to-use-functional-approach","content":"in projects where a lot of math and concurrency is requiredexample digital signal processingdigital image processingdata manipulationsupply chain projectsagricultural projects "},{"title":"First Class Functions​","type":1,"pageTitle":"Functional Language Possibilities","url":"docs/interviewPrep/programmingParadigm/FP/functionalLanguagePossibilities#first-class-functions","content":"a programming language supports first-class functions if it treats functions as first-class citizens language supports first-class functions if it can pass functions as parameters to other functionscan return them as values from other functionscan assign them to variables or can store them in data structures storing function in object data structure example const example = { name: &quot;John&quot;, getName() { return console.log(this.name); }, }; the language must implement the feature passing function as a parameter It is not a functional concept, and it is a language possibility By using this feature we can follow another functional concept such as higher order function (HOF) "},{"title":"Higher Order Function​","type":1,"pageTitle":"Functional Language Possibilities","url":"docs/interviewPrep/programmingParadigm/FP/functionalLanguagePossibilities#higher-order-function","content":"it is any function that takes a function as an argument, returns a function, or both it is often used to: Abstract or isolate actions, effects, or async flow control using callback functions, promises, monads, etc.Create utilities that can act on a wide variety of data typesPartially apply a function to its arguments or create a curried function for the purpose of reuse or function compositionTake a list of functions and return some composition of those input functions example const consoleValue = (value) =&gt; console.log(value); // (1) const logPowerOfTwo = (logFn, value) =&gt; logFn(value * value); // (2) logPowerOfTwo(consoleValue, 5); // 25 (3)  "},{"title":"Currying​","type":1,"pageTitle":"Functional Language Possibilities","url":"docs/interviewPrep/programmingParadigm/FP/functionalLanguagePossibilities#currying","content":"it is a technique that converts function with more than one parameter into the chain of functions with one argument In a math way, it is a process of transforming function with multiple arities in functions with less (usually one) arity Arity: number of function's arguments it is not something that you have to use every time, it is something that is useful in certain situations For example, if you need to call the same function with some of the same parameters a lotThis function can be divided into smaller ones and some of them can be called when needed For example, currying a function foo that takes three arguments creates three functions usual syntax const foo = (a, b, c) =&gt; a + b + c; foo(1, 2, 3); // 6 currying version 1 const curryingSum = (a) =&gt; (b) =&gt; (c) =&gt; a + b + c; curryingSum(1)(2)(3); // 6 currying version 2 const curryingSum = function (a) { return function (b) { return function (c) { return a + b + c; }; }; }; curryingSum(1)(2)(3); // 6  "},{"title":"Functional Programming in JavaScript","type":0,"sectionRef":"#","url":"docs/interviewPrep/programmingParadigm/FP/functionalProgrammingInJS","content":"","keywords":""},{"title":"Functional concepts in JavaScript​","type":1,"pageTitle":"Functional Programming in JavaScript","url":"docs/interviewPrep/programmingParadigm/FP/functionalProgrammingInJS#functional-concepts-in-javascript","content":"Based on the concepts of FP let's see if we can say that JS is implementing a functional programming paradigm "},{"title":"Immutability concept​","type":1,"pageTitle":"Functional Programming in JavaScript","url":"docs/interviewPrep/programmingParadigm/FP/functionalProgrammingInJS#immutability-concept","content":"JavaScript has built-in methods which follow this rule For example, filter, reduce, map example: array mutation not a functional approach const fruit = [&quot;banana&quot;, &quot;orange&quot;]; fruit.push(&quot;kiwi&quot;); console.log(fruit); // [&quot;banana&quot;, &quot;orange&quot;, &quot;kiwi&quot;] example: immutable array a functional approach const fruit = [&quot;banana&quot;, &quot;orange&quot;]; const newFruit = [...fruit, &quot;kiwi&quot;]; console.log(fruit); // [&quot;banana&quot;, &quot;orange&quot;] console.log(newFruit); // [&quot;banana&quot;, &quot;orange&quot;, &quot;kiwi&quot;]  "},{"title":"No Shared State concept​","type":1,"pageTitle":"Functional Programming in JavaScript","url":"docs/interviewPrep/programmingParadigm/FP/functionalProgrammingInJS#no-shared-state-concept","content":"In order to avoid a shared state in JS you can use such a library like Redux, any other similar library, or all suggested approaches in the How to avoid shared state part could be used "},{"title":"Composition concept​","type":1,"pageTitle":"Functional Programming in JavaScript","url":"docs/interviewPrep/programmingParadigm/FP/functionalProgrammingInJS#composition-concept","content":"The main idea of inheritance is to make code more reusableWith the functional way, we can do it without inheritance by using the composition of small functionsIt has some advantages over inheritance it is more flexible, does not require thinking in advance, and is easier to test "},{"title":"Functional possibilities in JavaScript​","type":1,"pageTitle":"Functional Programming in JavaScript","url":"docs/interviewPrep/programmingParadigm/FP/functionalProgrammingInJS#functional-possibilities-in-javascript","content":"First class function is implemented in JS, so we can use it for our purpose example: functions are called one by one not a functional approach const foo = (a, b) =&gt; a + b; const buzz = (c) =&gt; console.log(c); const res = foo(4, 5); buzz(res); example: passing function as an argument a functional approach const foo = (a, b) =&gt; a + b; const buzz = (c) =&gt; console.log(c); buzz(foo(4, 5)); Currying is a technique that has to be supported in the language So functions with more than one argument can be divided into several functions with one argument JavaScript follows all functional rules, but also includes OOP principles thus it is both a FP and OOPcan combine the best features of both approaches in order to achieve good results "},{"title":"Widespread functional JavaScript libraries​","type":1,"pageTitle":"Functional Programming in JavaScript","url":"docs/interviewPrep/programmingParadigm/FP/functionalProgrammingInJS#widespread-functional-javascript-libraries","content":""},{"title":"Ramda​","type":1,"pageTitle":"Functional Programming in JavaScript","url":"docs/interviewPrep/programmingParadigm/FP/functionalProgrammingInJS#ramda","content":"The library is designed specifically for a functional programming style one that makes it easy to create functional pipelines, one that never mutates user data Ramda includes all of the favorite list-manipulation functions you expect e.g. map, filter, reduce, find, etc. Ramda methods are automatically curried For example, The function multiply returns another function, remembers the first arguments, and multiplies the first argument with the second one example const double = R.multiply(2); double(3); // 6  "},{"title":"Lodash​","type":1,"pageTitle":"Functional Programming in JavaScript","url":"docs/interviewPrep/programmingParadigm/FP/functionalProgrammingInJS#lodash","content":"The lodash/fp module promotes more functional programming (FP) friendly style by exporting an instance of lodash with its methods wrapped to produce immutable auto-curried iteratee-first data-last methods Lodash makes JavaScript easier by taking the hassle out of working with arrays, numbers, objects, strings, etc. Lodash modular methods are great for: Iterating arrays, objects, &amp; stringsManipulating &amp; testing valuesCreating composite functions example: array filtering var users = [ {user: &quot;barney&quot;, age: 36, active: true}, {user: &quot;fred&quot;, age: 40, active: false}, ]; _.filter(users, function (o) { return !o.active; }); // [{ user: &quot;fred&quot;, age: 40, active: false }]  "},{"title":"Pros and Cons of Functional Programming​","type":1,"pageTitle":"Functional Programming in JavaScript","url":"docs/interviewPrep/programmingParadigm/FP/functionalProgrammingInJS#pros-and-cons-of-functional-programming","content":"PROS No side effects (if they are not necessary) because we are following the immutability principle Pure functions are easier to understand because they depend only on the given input and don't change any states With the same input, they always give the same outputTheir function signature gives all the information about them The ability of functional programming languages to treat functions as values and pass them to functions as parameters make the code more readable and easily understandableTesting and debugging are easier Since pure functions take only arguments and produce output, they don't produce any changes don't take input, or produce some hidden outputThey use immutable values, so it becomes easier to check some problems in programs written using pure functions It is used to implement concurrency / parallelism because pure functions don't change variables or any other data outside itIt adopts lazy evaluation which avoids repeated evaluation because the value is evaluated and stored only when it is needed CONS The readability can be reduced by a lot of pure functionsLoss of performance could take place, because of the immutability principle "},{"title":"Main Concepts","type":0,"sectionRef":"#","url":"docs/interviewPrep/programmingParadigm/FP/mainConcepts","content":"","keywords":""},{"title":"Immutability​","type":1,"pageTitle":"Main Concepts","url":"docs/interviewPrep/programmingParadigm/FP/mainConcepts#immutability","content":"The main rule of an immutable object is it cannot be modified after creation Conversely, a mutable object is each object which can be modified after creation The data flow in the program is lossy if the immutability principle is not followed that is why it is the main concept of functional programming example: if data is mutated some bugs which are hard to find can be hidden version 1 const stat = [ {name: &quot;John&quot;, score: 1.003}, {name: &quot;Lora&quot;, score: 2}, {name: &quot;Max&quot;, score: 3.76}, ]; // expecting to create a new array, but contents in array got modified instead // this is because inside the stat, item got modified const statScoreInt = stat.map((el) =&gt; { el.score = Math.floor(el.score); el.name = el.name; return el; }); console.log(stat); // [{ name: &quot;John&quot;, score: 1 }, { name: &quot;Lora&quot;, score: 2 }, { name: &quot;Max&quot;, score: 3 }] console.log(statScoreInt); // [{ name: &quot;John&quot;, score: 1 }, { name: &quot;Lora&quot;, score: 2 }, { name: &quot;Max&quot;, score: 3 }] version 2 const stat = [ {name: &quot;John&quot;, score: 1.003}, {name: &quot;Lora&quot;, score: 2}, {name: &quot;Max&quot;, score: 3.76}, ]; // new copied array got created as expected const statScoreInt = stat.map((el) =&gt; { return {score: Math.floor(el.score), ...el}; }); console.log(stat); // [{ name: &quot;John&quot;, score: 1.003 }, { name: &quot;Lora&quot;, score: 2 }, { name: &quot;Max&quot;, score: 3.76 }] console.log(statScoreInt); // [{ name: &quot;John&quot;, score: 1 }, { name: &quot;Lora&quot;, score: 2 }, { name: &quot;Max&quot;, score: 3 }] In JavaScript, it might be easy to confuse const with immutability The variable which cannot be redeclared is created by using const but immutable objects are not created by constYou can't change the object that the binding refers to, but you can still change the properties of the object which means that bindings created with const are mutable Immutable objects can't be changed at all You can make a value truly immutable by deep-freezing the objectJavaScript has a method that freezes an object one-level deep (in order to freeze an object deeply, recursion could be used to freeze each property and nested objects) example There are several libraries in JavaScript which try to follow this principle, for example, Immutable.js const a = Object.freeze({ greeting: &quot;Hello&quot;, subject: &quot;student&quot;, mark: &quot;!&quot;, }); a.greeting = &quot;Goodbye&quot;; // Error: Cannot assign to read only property 'foo' of object Object  "},{"title":"Side Effects​","type":1,"pageTitle":"Main Concepts","url":"docs/interviewPrep/programmingParadigm/FP/mainConcepts#side-effects","content":"it is a side effect if state changes are observable outside the called functionthey are not returned value of the function Side effects include: Modifying any external variable or object property e.g., a global variable, or a variable in the parent function scope chain Logging to the consoleAlertWriting to the screen, in other words, replacing the content of a specific tag querySelector(), getElementById(), etc. Writing to a fileThe HTTP request might have side effects therefore the function that triggers the request transitively have side effects Triggering any external processCalling any other functions with side effects In functional programming side effects are mostly avoided It makes a program much easier to understand, and much easier to test a program without side effects does nothing If the code does not write to or read from a database, does not make any requests, does not change UI, etc. it does not bring any valueSo we cannot completely avoid side effects to isolate side effects from the rest of your software by keeping side effects separately from the rest of the software the application will be much easier to extend, refactor, debug, test, and maintain That is why a lot of front-end frameworks suggest using state management tools along with the library Because it separates components rendering from state managementthey are loosely coupled modulesReactJS and Redux are examples of that "},{"title":"Pure Functions​","type":1,"pageTitle":"Main Concepts","url":"docs/interviewPrep/programmingParadigm/FP/mainConcepts#pure-functions","content":"A function is called pure if it has the following properties: Given the same input, always returns the same outputFunction without side effects A pure function also can be called a deterministic function JS arrays methods such as map, filter, reduce etc., are examples of pure function A pure function does not depend on any state, it only depends on input parameters example 1: Pure function: no side effect there are no side effects because price comes as an argument const doubledPrice = (price) =&gt; price * 2; doubledPrice(2); example 2: not pure function: have side effect there is a side effect because the price is changed inside the function, but price is declared outside the doubledPrice scope let price = 2; const doubledPrice = () =&gt; (price = price * 2); doubledPrice();  "},{"title":"No Shared State​","type":1,"pageTitle":"Main Concepts","url":"docs/interviewPrep/programmingParadigm/FP/mainConcepts#no-shared-state","content":"Shared state is a memory space (could be an object or simple variable) that is reachable from all program parts In other words, it is global and exists in shared scopeIt also could be passed as a property between scopesIf two or more application parts change the same data, then the data is a shared state "},{"title":"Problems with shared state​","type":1,"pageTitle":"Main Concepts","url":"docs/interviewPrep/programmingParadigm/FP/mainConcepts#problems-with-shared-state","content":"If the state is changing from more than one place in the application there is a risk of one modification preventing another part of the application to work with the actual dataSo it might lead to strange hard to track bugs example Functions main() and minor() do something and wants to log an arrFunction logGrocery() logs elements into console However, it removes elements from the array while logging themlogGrocery() breaks minor() and that is why there is an undefined const arr = [&quot;bread&quot;, &quot;milk&quot;, &quot;wine&quot;]; function logGrocery(arr) { for (let i = 0; i &lt;= arr.length + 1; i++) { console.log(arr.shift()); } } function main() { // some code logGrocery(arr); } function minor() { // some code logGrocery(arr); } main(); minor(); // bread // milk // wine // undefined (1)  "},{"title":"How to avoid it​","type":1,"pageTitle":"Main Concepts","url":"docs/interviewPrep/programmingParadigm/FP/mainConcepts#how-to-avoid-it","content":"We can avoid shared state by copying data Until we are reading from a shared state without any modification we are safe Before doing some modifications we need to un-share our state example Functions main() and minor() do something and wants to log an arrFunction logGrocery() logs elements into console The code creates a new variable localArray, a copy of arrSo the localArray is modified, and it is a new declaration on each call Avoiding mutations by updating non-destructively const arr = [&quot;bread&quot;, &quot;milk&quot;, &quot;wine&quot;]; function logGrocery(arr) { const localArr = [...arr]; // important for (let i = 0; i &lt;= localArr.length + 1; i++) { console.log(localArr.shift()); } } function main() { // some code logGrocery(arr); } function minor() { // some code logGrocery(arr); } main(); minor(); // bread // milk // wine // bread // milk // wine example: Preventing mutations by making data immutable We can prevent mutations of shared data by making that data immutable If data is immutable, it can be shared without any risksIn particular, there is no need to copy defensively const shoppingList = [&quot;bread&quot;, &quot;milk&quot;, &quot;wine&quot;]; function addToShoppingList(arr, item) { return [...arr, item]; } function main(item) { // some code return addToShoppingList(arr, item); } const withFruit = main(&quot;fruit&quot;); console.log(withFruit); // ['bread', 'milk', 'wine', 'fruit'] console.log(shoppingList); // ['bread', 'milk', 'wine']  "},{"title":"Composition​","type":1,"pageTitle":"Main Concepts","url":"docs/interviewPrep/programmingParadigm/FP/mainConcepts#composition","content":"Function composition is a combination of two or more functionsThe single function does a small piece which is not valuable for an application in order to achieve the desired result, small functions have to be combined togethercan imagine composing functions as pipes of functions that data has to go through, so that outcome is reached In functional programming, it is preferable to use composition over inheritance "},{"title":"Composition over inheritance​","type":1,"pageTitle":"Main Concepts","url":"docs/interviewPrep/programmingParadigm/FP/mainConcepts#composition-over-inheritance","content":"composition is easier in maintenance and for reusability purposes It is easy to refactor the code if needed Composition is a simple mental model, so there is no need to think in advance of hierarchy, and we can combine all small pieces in the way that we need them to be example: combines the power of objects and functional programming const dog = (name) =&gt; { const self = { name, }; return self; }; const buddy = dog(&quot;Buddy&quot;); example 1: using composition const canSayHi = (self) =&gt; ({ sayHi: () =&gt; console.log(`Hi! I'm ${self.name}`), }); const canEat = () =&gt; ({ eat: (food) =&gt; console.log(`Eating ${food}...`), }); const behaviors = (self) =&gt; Object.assign({}, canSayHi(self), canEat()); const dog = (name) =&gt; { const self = { name, }; const dogBehaviors = (self) =&gt; ({ bark: () =&gt; console.log(&quot;Ruff!&quot;), }); return Object.assign(self, behaviors(self), dogBehaviors(self)); }; const buddy = dog(&quot;Buddy&quot;); buddy.sayHi(); // Hi! I'm Buddy buddy.eat(&quot;Petfood&quot;); // Eating Petfood... buddy.bark(); // Ruff! const cat = (name) =&gt; { const self = { name, }; const catBehaviors = (self) =&gt; ({ meow: () =&gt; console.log(&quot;Meow!&quot;), haveLunch: (food) =&gt; { self.eat(food); }, }); return Object.assign(self, catBehaviors(self), canEat()); }; const kitty = cat(&quot;Kitty&quot;); kitty.haveLunch(&quot;fish&quot;); // Eating fish... kitty.meow(); // Meow! example 2: using composition to create a statistic board with the possibility to sort, find all occurrences, and filter by prop compose function is a self-invoking function that can take any number of parameters and execute right-to-left in other words, performs right-to-left function composition So, you can compose functions the way you needThere is a possibility to filter and sort in one part of the application and filter and find in another without any duplication, by composing small reusable parts self-invoking function is a nameless (anonymous) function that is invoked immediately after its definition const stat = [ {name: &quot;Lora&quot;, score: 1.003}, {name: &quot;Lora&quot;, score: 1.003}, {name: &quot;Lora&quot;, score: 2}, {name: &quot;Max&quot;, score: 3.76}, ]; const sort = (arr) =&gt; { return arr.sort((a, b) =&gt; b.score - a.score); }; const filter = (params) =&gt; { return (arr) =&gt; arr.filter((item) =&gt; item.name === params); }; const findAll = (params) =&gt; { return (arr) =&gt; arr.filter((item) =&gt; item.score === params); }; const compose = (...funcs) =&gt; { return (arr) =&gt; { return funcs.reverse().reduce((acc, func) =&gt; func(acc), arr); }; }; console.log(compose(filter(&quot;Lora&quot;))(stat)); // [{ name: &quot;Lora&quot;, score: 1.003 }, { name: &quot;Lora&quot;, score: 1.003 }, { name: &quot;Lora&quot;, score: 2 }] console.log(compose(findAll(1.003), filter(&quot;Lora&quot;))(stat)); // [{ name: &quot;Lora&quot;, score: 1.003 }, { name: &quot;Lora&quot;, score: 1.003 }] console.log(compose(sort, filter(&quot;Lora&quot;))(stat)); // [{ name: &quot;Lora&quot;,score: 2 }, { name: &quot;Lora&quot;,score: 1.003 }, { name: &quot;Lora&quot;,score: 1.003 }]  "},{"title":"Object Oriented Programming","type":0,"sectionRef":"#","url":"docs/interviewPrep/programmingParadigm/OOP/","content":"","keywords":""},{"title":"4 pillars of OOP​","type":1,"pageTitle":"Object Oriented Programming","url":"docs/interviewPrep/programmingParadigm/OOP/#4-pillars-of-oop","content":""},{"title":"Encapsulation​","type":1,"pageTitle":"Object Oriented Programming","url":"docs/interviewPrep/programmingParadigm/OOP/#encapsulation","content":"a concept that binds together the data and functions that manipulate the data, and that keeps both safe from outside interference and misuse a tool that helps to hide unimportant implementation details out of sight most commonly used in the context of information hiding Public mutable data violates encapsulation because any client of the class can change the internal state of the class object without the notification of the class To achieve encapsulation in the design, two components are distinguished, its public interface and the private part the public part should expose more about what the class does and hide unnecessary implementation details from clients Abstraction and encapsulation complement each other and form some more general holistic picture of the object-oriented programming paradigm play a key role in fighting complexity, providing the ability to design at a higher level, abstracting from implementation details example 1 // procedural programming let baseSalary = 30000; let overtime = 10; let rate = 20; function getWage(baseSalary, overtime, rate) { return baseSalary + overtime * rate; } getWage(baseSalary, overtime, rate); // encapsulation - this is better because getWage method does not requires any parameters // the fewer the number of parameters, the easier it is to use and maintain that function let employee = { baseSalary: 30000, overtime: 10, rate: 20, getWage: function () { return this.baseSalary + this.overtime * this.rate; }, }; employee.getWage(); example 2 Encapsulation is violated class Paystub { private readonly employees: Employee[]; public getEmployees(): Employee[] { return this.employees; } public computePayroll(): number { // using this.employees for calculation return 42; } } const p1 = new Paystub(); // if employees data type changed, we can't add employee const employees = p1.getEmployees(); employees.push(new Employee()); employees.push(new Employee()); p1.computePayroll(); Encapsulation is not violated class Paystub2 { private readonly employees: Employee[]; public addEmployee(employee: Employee): void { this.employees.push(employee); } public computePayroll(): number { // using this.employees for calculation return 42; } } const p2 = new Paystub2(); // there will never be an issue when adding employee p2.addEmployee(new Employee()); p2.addEmployee(new Employee()); p2.computePayroll();  "},{"title":"Abstraction​","type":1,"pageTitle":"Object Oriented Programming","url":"docs/interviewPrep/programmingParadigm/OOP/#abstraction","content":"it highlights some significant parts, meaningful information from a component, no matter whether it is a class or an architectural layer in the system, or a logical unit of our system (summary): it is the highlighting of significant parts or exclusion of insignificant parts from consideration The act of representing essential features without including the background details or explanations In OOP, only data abstraction is considered it is called as abstraction implying a set of the most significant characteristics of an object available for the program it is essential when dealing with system complexity by hiding implementation details and highlighting essential aspects of behavior main idea of abstraction is to describe real life objects and how they interact in a software system play a key role in fighting complexity, providing the ability to design at a higher level, abstracting from implementation details can be implemented using interfaces and abstract classes example 1 function Employee(name, age, baseSalary) { this.name = name; this.age = age; this.baseSalary = baseSalary; let monthlyBonus = 1500; // abstraction creation let calculateFinalSalary = function () { let finalSalary = baseSalary + monthlyBonus; console.log(finalSalary); }; this.getEmployeeDetails = function () { console.log(this.name); calculateFinalSalary; // abstraction implementation; }; } const employee = new Employee(&quot;John&quot;, 30, 2000); employee.getEmployeeDetails(); example 2: implementation details, is the more unstable part of the abstraction, it can change while maintaining the public interface enum CoffeeSelection { FILTER_COFFEE, ESPRESSO, CAPPUCCINO, } class CoffeeBean { // implementation of CoffeeBeen } class Coffee { constructor(selection: CoffeeSelection, volume: number) { // implementation of Coffee } } class Configuration { constructor(weight: number, volume: number) { // implementation of Configuration } } // abstraction // implementation details are changed systematically, the requirements are changed systematically // the main thing is not to change the public interface on which clients depend class CoffeeMachine { private configMap: Map&lt;CoffeeSelection, Configuration&gt;; private beans: Map&lt;CoffeeSelection, CoffeeBean&gt;; constructor(beans: Map&lt;CoffeeSelection, CoffeeBean&gt;) { this.beans = beans; // create coffee configuration this.configMap = new Map&lt;CoffeeSelection, Configuration&gt;(); this.configMap.set(CoffeeSelection.ESPRESSO, new Configuration(8, 28)); this.configMap.set( CoffeeSelection.FILTER_COFFEE, new Configuration(30, 480) ); } // The client knows that the coffee machine has only this method // Everything else, all the settings of the coffee machine, initialization in the constructor of some configuration of everything else // for the client this is not meaningful behavior, it should not depend on it, because it is unstable, it can change public brewCoffee(selection: CoffeeSelection): Coffee { const coffee = new Coffee(selection, 100); console.log(&quot;Making coffee...&quot;); return coffee; } } const main = () =&gt; { // create a |Map of available coffee beans const beans = new Map&lt;CoffeeSelection, CoffeeBean&gt;(); beans.set( CoffeeSelection.ESPRESSO, new CoffeeBean(&quot;My favorite espresso bean&quot;, 1000) ); beans.set( CoffeeSelection.FILTER_COFFEE, new CoffeeBean(&quot;My favorite filter coffee bean&quot;, 1000) ); // get a new CoffeeMachine object const machine = new CoffeeMachine(beans); // brew a fresh coffee const espresso: Coffee = machine.brewCoffee(CoffeeSelection.ESPRESSO); };  "},{"title":"Inheritance​","type":1,"pageTitle":"Object Oriented Programming","url":"docs/interviewPrep/programmingParadigm/OOP/#inheritance","content":"it is a mechanism that allows you to eliminate redundant code it has a relationship between classes that lets you inherit or extend functionality from 1 class to another This is an is or is a relationship a relationship between a base class and descendants This relationship is the strongest and in statically typed languages it cannot be broken this must be considered when assessing the need to use inheritance in this caseIf inheritance were applied in a place where one could do without it this will make it difficult to understand and maintain codebecause the inheritance hierarchy can be 10 classes or moreit is difficult to understand somewhere in the middle or how the last class will behavehard to understand in what places which methods are being overwritten or overriddenTherefore, inheritance must be approached wisely not all Object Oriented languages are the same c++ supports multiple inheritancejava only supports single inheritance each class can extend or inherit functionality from only 1 other classclasses can implement multiple interfaces inheritance relationship Parent/Child, Base/Derived, Superclass/Subclass example class Person { protected name: string; constructor(name: string) { this.name = name; } } class Employee extends Person { private department: string; constructor(name: string, department: string) { super(name); this.department = department; } public getDetails() { return `Hello, my name is ${this.name} and I work in ${this.department}.`; } } const howard = new Employee(&quot;Howard&quot;, &quot;Sales&quot;); console.log(howard.getDetails()); // ok console.log(howard.name); // error console.log(howard.department); // error 3 access modifiers Private not accessible from the outsideonly instances of this current class can work with these propertiesThe Employee class has a department propertyonly objects of the Employee class can work with this property Protected is a little wider than privateonly instances of the current class and classes of descendants can work with themFrom Employee, we can refer to name from Personthey are also closed to the outside world Public public properties and methods are those that are provided to clients in the form of a public interfaceit should be the most stable and the most unchangeable "},{"title":"Polymorphism - literally means many forms​","type":1,"pageTitle":"Object Oriented Programming","url":"docs/interviewPrep/programmingParadigm/OOP/#polymorphism---literally-means-many-forms","content":"The provision of a single interface to entities of different types or the use of a single symbol to represent multiple different types it addresses an object as either super or subtype writes methods that accept supertype as arguments passes instances of subtypes increases code flexibility and reusability has 2 types Compile time polymorphism (static binding / static polymorphism) e.g.: method overloading allows you to implement multiple methods within the same class that use the same name but different types/order/number of parameters Runtime polymorphism (dynamic binding / dynamic polymorphism) e.g.: method overriding does not allow the compiler to determine the executed methodWithin an inheritance hierarchy, a subclass can override a method of its superclass That enables the developer of the subclass to customize or completely replace the behavior of that method Overriding is about same method, same signature but different classes connected through inheritance example 1 class Animal { constructor(name) { this.name = name; } makeSound() { console.log(&quot;Generic animal sound&quot;); } } // polymorphism - override the makeSound method class Dog extends Animal { constructor(name) { super(name); } makeSound() { console.log(&quot;Woof!&quot;); } } const dog = new Dog(&quot;Happy&quot;); dog.makeSound(); // &quot;Woof!&quot; example 2: Static polymorphism: overloading interface Hero { name: string; skill: string; weakness: string; } class HeroService { protected heroes: Hero[] = [ {name: &quot;Superman&quot;, skill: &quot;fly&quot;, weakness: &quot;cryptonit&quot;}, {name: &quot;Spiderman&quot;, skill: &quot;spider-sense&quot;, weakness: &quot;MJ&quot;}, {name: &quot;Batman&quot;, skill: &quot;superhuman power&quot;, weakness: &quot;law&quot;}, {name: &quot;Flash&quot;, skill: &quot;run&quot;, weakness: &quot;unknown&quot;}, ]; public getHero(name: string); public getHero(name: string, skill: string); public getHero(name: string, skill?: string): Hero { if (!skill) { return this.heroes.find((hero) =&gt; hero.name === name); } return this.heroes.find( (hero) =&gt; hero.name === name &amp;&amp; hero.skill === skill ); } } const heroService = new HeroService(); const hero1 = heroService.getHero(&quot;Flash&quot;); const hero2 = heroService.getHero(&quot;Superman&quot;, &quot;fly&quot;); example 3: Dynamic polymorphism: overriding class HeroService { // implementation of HeroService } class AntiHeroService extends HeroService { public getHero(weakness: string): Hero { return this.heroes.find((hero) =&gt; hero.weakness === weakness); } } const antiHeroService = new AntiHeroService(); const hero = antiHeroService.getHero(&quot;law&quot;); in java Method Overloading\tMethod Overridingit is a compile-time polymorphism\tit is a run-time polymorphism It helps to increase the readability of the program\tIt is used to grant the specific implementation of the method which is already provided by its parent class or superclass It occurs within the class\tIt is performed in two classes with inheritance relationships it may or may not require inheritance\tit always needs inheritance methods must have the same name and different signatures\tmethods must have the same name and same signature the return type can or can not be the same, but we just have to change the parameter\tthe return type must be the same or co-variant Static binding is being used for overloaded methods\tDynamic binding is being used for overriding methods It gives better performance. The reason behind this is that the binding of overridden methods is being done at runtime\tPoor performance Private and final methods can be overloaded\tPrivate and final methods can’t be overridden Argument list should be different while doing method overloading\tArgument list should be same in method overriding "},{"title":"Value types vs Reference types​","type":1,"pageTitle":"Object Oriented Programming","url":"docs/interviewPrep/programmingParadigm/OOP/#value-types-vs-reference-types","content":"primitives are copied by their value // example 1 let x = 0; let y = x; x = 20; // y = 0, x = 20 // example 2 let number = 10; function increase(number) { number++; } increase(number); console.log(number); // number = 10  objects are copied by their reference // example 1 let x = {value: 0}; let y = x; x.value = 20; // y = { value: 20 } // example 2 let obj = {value: 10}; function increase(obj) { obj.value++; } increase(obj); console.log(obj); // { value: 11 }  "},{"title":"Value types​","type":1,"pageTitle":"Object Oriented Programming","url":"docs/interviewPrep/programmingParadigm/OOP/#value-types","content":"number, string, boolean, symbol, undefined, null "},{"title":"Reference types​","type":1,"pageTitle":"Object Oriented Programming","url":"docs/interviewPrep/programmingParadigm/OOP/#reference-types","content":"object, function, array "},{"title":"Factory​","type":1,"pageTitle":"Object Oriented Programming","url":"docs/interviewPrep/programmingParadigm/OOP/#factory","content":"// normal code - needs to make multiple of the same objects if have different radius value const circle = { radius: 1, draw: function () { console.log(&quot;draw&quot;); }, }; circle.draw(); // factory function - only need to change the value in the parameter during initialization function createCircle(radius) { return { radius, draw: function () { console.log(&quot;draw&quot;); }, }; } const circle = createCircle(1); circle.draw();  "},{"title":"Constructor​","type":1,"pageTitle":"Object Oriented Programming","url":"docs/interviewPrep/programmingParadigm/OOP/#constructor","content":"// constructor function function Circle(radius) { this.radius = radius; this.draw = function () { console.log(&quot;draw&quot;); }; } const circle = new Circle(1); circle.draw();  "},{"title":"Composition","type":0,"sectionRef":"#","url":"docs/interviewPrep/programmingParadigm/OOP/composition","content":"","keywords":""},{"title":"Composition vs Inheritance​","type":1,"pageTitle":"Composition","url":"docs/interviewPrep/programmingParadigm/OOP/composition#composition-vs-inheritance","content":"Composition uses different relation type inheritance models strong IS-A relation between classes, it means that mountain bike is-a bicyclecomposition models weaker HAS-A relation, mountain bike has-a wheel inheritance example problem: if need continuously extend existing functionality, will notice that spare parts functionality may not change all the timeor will require adjustments because of specific implementations of different subclassesit becomes too difficult to extend spare parts functionality composition will help solve this problem abstract class Bicycle { protected readonly defaultChain = &quot;11-speed&quot;; constructor(opts) { this.style = opts.style; this.chain = opts.chain || this.defaultChain; this.tireSize = opts.tireSize || this.defaultTireSize; } spares() { return { chain: this.chain, tireSize: this.tireSize, }; } } class RoadBike extends Bicycle { protected readonly defaultTireSize = &quot;28&quot;; constructor(opts) { super(opts); this.tapeColor = opts.tapeColor; } spares() { return { ...super.spares(), tapeColor: this.tapeColor, }; } protected get defaultChain() { return &quot;2-speed&quot;; } } class MountainBike extends Bicycle { protected readonly defaultTireSize = &quot;29&quot;; constructor(opts) { super(opts); this.frontShock = opts.frontShock; } spares() { return { ...super.spares(), frontShock: this.frontShock, }; } }  "},{"title":"Moving from Inheritance to Composition​","type":1,"pageTitle":"Composition","url":"docs/interviewPrep/programmingParadigm/OOP/composition#moving-from-inheritance-to-composition","content":"by moving spare parts to Parts class, inheritance will be replaced with composition now we have Parts class with all the spare functionality encapsulated inside itBicycle type depends on provided partswhen spares method is called inside Bicycle, it is delegated to Parts instance, and it decides which exact parts to return class Bicycle { constructor(private size: string, private parts: Parts) {} spares() { return this.parts.spares(); } } class Parts { constructor(private parts: Part[]) {} spares() { return this.parts .filter(({needsSpare}) =&gt; needsSpare) .reduce((spares, {name, value}) =&gt; ({ ...spares, [name]: value, })); } } class Part { constructor( public name: string, public value: string, public needsSpare = true ) {} } const roadBike = new Bicycle( &quot;M&quot;, new Parts([ new Part(&quot;chain&quot;, &quot;11-speed&quot;), new Part(&quot;tireSize&quot;, &quot;28&quot;), new Part(&quot;tapeColor&quot;, &quot;red&quot;), ]) ); const mountainBike = new Bicycle( &quot;L&quot;, new Parts([ new Part(&quot;chain&quot;, &quot;11-speed&quot;), new Part(&quot;tireSize&quot;, &quot;29&quot;), new Part(&quot;readShock&quot;, &quot;fox&quot;, false), new Part(&quot;frontShock&quot;, &quot;manitou&quot;), ]) );  "},{"title":"Accepting the Consequences of Inheritance​","type":1,"pageTitle":"Composition","url":"docs/interviewPrep/programmingParadigm/OOP/composition#accepting-the-consequences-of-inheritance","content":"Inheritance is best suited to adding functionally to existing classes when you will use most of the old code and add relatively small amounts of new code "},{"title":"Benefits of Inheritance​","type":1,"pageTitle":"Composition","url":"docs/interviewPrep/programmingParadigm/OOP/composition#benefits-of-inheritance","content":"Use of inheritance results in code that can be described as open-closed principle hierarchies are open for extension while remaining closed for modificationallows you to easily extend the class behaviour without modifying existing code, this is pretty safe way to get the needed resultwhen the encapsulation is not violated and classes are inherited in a correct way OCP will not be violated Correctly written hierarchies are easy to extend The hierarchy embodies the abstraction and every new subclass plugs in a few concrete differencesThe existing pattern is easy to follow and replicateHierarchies by their nature provide guidance for writing the code to extend them Use Inheritance for IS-A Relationships "},{"title":"Cons of Inheritance​","type":1,"pageTitle":"Composition","url":"docs/interviewPrep/programmingParadigm/OOP/composition#cons-of-inheritance","content":"Choosing inheritance to solve the wrong kind of problemHigh cost of making changes near the top of an incorrectly modeled hierarchy In this case, the leveraging effect works to your disadvantage; small changes break everything Impossibility of adding behavior when new subclasses represent a mixture of types "},{"title":"Accepting the Consequences of Composition​","type":1,"pageTitle":"Composition","url":"docs/interviewPrep/programmingParadigm/OOP/composition#accepting-the-consequences-of-composition","content":"Use composition when the behavior is more than the sum of its parts "},{"title":"Benefits of Composition​","type":1,"pageTitle":"Composition","url":"docs/interviewPrep/programmingParadigm/OOP/composition#benefits-of-composition","content":"When using composition, the natural tendency is to create many small objects that contain straightforward responsibilities that are accessible through clearly defined interfaces Interfaces need to be used when some part depends on (composes) other part, so it also helps to develop the new functionality These small objects have a single responsibility principle and specify their own behavior They are transparentit is easy to understand the code, and it is clear what will happen if it changes Because composed objects deal with their parts via an interface, adding a new kind of part is a simple matter of plugging in a new object that honors the interfaceUse Composition for has-a Relationships "},{"title":"Cons of Composition​","type":1,"pageTitle":"Composition","url":"docs/interviewPrep/programmingParadigm/OOP/composition#cons-of-composition","content":"A composed object relies on its many parts Even if each part is small and easily understood, the combined operation of the whole may be less than obvious The benefits of structural independence are gained at the cost of automatic message delegation The composed object must explicitly know which messages to delegate and to whom As these costs and benefits illustrate, composition is excellent at prescribing rules for assembling an object made of parts but does not provide as much help for the problem of arranging code for a collection of parts that are very nearly identical "},{"title":"Duck Typing","type":0,"sectionRef":"#","url":"docs/interviewPrep/programmingParadigm/OOP/duckTyping","content":"","keywords":""},{"title":"If It Walks Like a Duck and Talks Like a Duck Then It's a Duck​","type":1,"pageTitle":"Duck Typing","url":"docs/interviewPrep/programmingParadigm/OOP/duckTyping#if-it-walks-like-a-duck-and-talks-like-a-duck-then-its-a-duck","content":"example the prepare method will dramatically increase in the number of dependencies it knows every class name, class method names and their arguments the worst is this type of code will only increase its size and dependencies number with time class Mechanic {} class TripCoordinator {} class Driver {} class Trip { bicycles; customers; vehicle; prepare(prepares: object[]) { return prepares.map((preparer) =&gt; { switch (preparer.constructor) { case Mechanic: return preparer.prepareBicycles(this.bicycles); case TripCoordinator: return preparer.buyFood(this.customers); case Driver: preparer.fillTank(this.vehicle); return preparer.fillWaterTank(this.vehicle); } }); } }  "},{"title":"Finding the Duck​","type":1,"pageTitle":"Duck Typing","url":"docs/interviewPrep/programmingParadigm/OOP/duckTyping#finding-the-duck","content":"after identifying the problem, we need to minimize dependencies number to make the Trip functionality easily extensible without usage of switch case and other similar approachesevery preparer class is responsible for preparing something for the Trip we can try to extract some Preparer abstraction and call it a duck typethis becomes something similar to an interface class Trip { prepare(prepares: {prepareTrip(trip: Trip)}[]) { prepares.map((preparer) =&gt; { preparer.prepareTrip(this); }); } } class Driver {} class Mechanic { prepareTrip(trip: Trip) { trip.bicycles.map((bicycle) =&gt; { this.prepareBicycle(bicycle); }); } } class TripCoordinator { prepareTrip(trip: Trip) { this.buyFood(trip); } }  "},{"title":"Writing Code that Relies on Ducks​","type":1,"pageTitle":"Duck Typing","url":"docs/interviewPrep/programmingParadigm/OOP/duckTyping#writing-code-that-relies-on-ducks","content":"Recognizing Hidden Ducks You need to timely understand where the duck types are hidden and how to extract them, pay attention to the next places in the code: Case statements that switch on class similar to the switch..case situation, but here you check if you are working with instance of some specific class instanceof operator when trying to find out which exact class you are working with to apply specific steps to it, this may be a sign of hidden duck type Checking the method exists (if (obj.someMethod) { obj.someMethod() }) It is also a good sign that there may be a hidden duck type when do not need to check the exact class but when you only need some specific method to exist Placing Trust in Your Ducks Let client code trust the duck type, in lack of the trust client code means the next: &quot;I know who you are, so I know what you do&quot;Such knowledge transforms into tight coupling between classes which results into non extensible codeFlexible applications built on top of objects which works on trust – your goal as a developer is to make those objects reliable, to let the trust work Documenting Duck Types Preparer duck type and its open interface is a specific part of the design, but at the same time it is a virtual part of code, because it is neither a class nor a real interfacePreparers are an abstraction, just a convention which gives you the powerful system design tool, but this abstraction makes code less obviousWhen you create a duck type, you must document and cover it with tests Sharing Code between Ducks In the example shared is only prepareTrip method, but when you start using duck types, you may notice that some part of the functionality is common for all the typesShare such functionality using mixins and other available approaches Choosing Your Ducks Wisely The last point, tells us that you do not need to create duck types just to have themYou need to find a balance between resources required for the refactoring, benefit gained, support simplicity and code clarity "},{"title":"Inheritance in Details","type":0,"sectionRef":"#","url":"docs/interviewPrep/programmingParadigm/OOP/inheritanceInDetails","content":"","keywords":""},{"title":"Recognizing Where to Use Inheritance​","type":1,"pageTitle":"Inheritance in Details","url":"docs/interviewPrep/programmingParadigm/OOP/inheritanceInDetails#recognizing-where-to-use-inheritance","content":"problem class Bicycle { constructor(options) { // previous options this.style = options.style; this.frontShock = options.frontShock; } // becomes strange when a new style is added spares() { if (this.style === &quot;road&quot;) { return { chain: &quot;11-speed&quot;, tireSize: &quot;28&quot;, tapeColor: this.tapeColor, }; } return { chain: &quot;11-speed&quot;, tireSize: &quot;29&quot;, frontShock: this.frontShock, }; } } const crossCountryBike = new Bicycle({ style: &quot;XC&quot;, size: &quot;M&quot;, frontShock: &quot;mountain&quot;, }); const roadBike = new Bicycle({style: &quot;road&quot;, size: &quot;M&quot;, tapeColor: &quot;red&quot;});  "},{"title":"Creating an Abstract Superclass with Shared Abstract Behavior​","type":1,"pageTitle":"Inheritance in Details","url":"docs/interviewPrep/programmingParadigm/OOP/inheritanceInDetails#creating-an-abstract-superclass-with-shared-abstract-behavior","content":"abstract class can store both abstract and concrete methods abstract methods must be implemented to use, concrete methods can be used without overriding them all the abstract methods must be implemented in every non-abstract subclass You always need to implement all the abstract methods and there should be no unused behavior in any subclass, if such thing happens this may be a sign of incorrect inheritance structure stores the behavior which is common to all subclasses subclasses inherited an abstract class should fully use its functionality, otherwise you need to review the inheritance structure  solution: use Abstract class and inherit abstract class Bicycle { // keep only common parts } class RoadBike extends Bicycle { constructor(options) { super(options); this.tapeColor = options.tapeColor; } spares() { return { ...super.spares(), tapeColor: this.tapeColor, }; } } class MountainBike extends Bicycle { constructor(options) { super(options); this.frontShock = options.frontShock; } spares() { return { ...super.spares(), frontShock: this.frontShock, }; } } Abstract classes exist in order to inherit from them They provide a common repository that stores the behavior common to all subclasseseach of them is a specialization of an abstract classIt almost never makes sense to create an abstract superclass with a single subclass "},{"title":"Template Method Pattern: Default Implementation​","type":1,"pageTitle":"Inheritance in Details","url":"docs/interviewPrep/programmingParadigm/OOP/inheritanceInDetails#template-method-pattern-default-implementation","content":"This gives subclasses the ability to inject specialization by overriding the default values set in the parent class This technique of describing the basic structure/algorithm in a superclass and redefining parts of this structure/algorithm to those that are already specific for a particular class is called the template method allows you to define the base algorithm in the superclass and control its lifecycle and then override only needed parts in the subclass solution: use Template method abstract class Bicycle { protected readonly defaultChain = &quot;11-speed&quot;; constructor(opts) { // ... this.chain = opts.chain || this.defaultChain; this.tireSize = opts.tireSize || this.defaultTireSize; } } class RoadBike extends Bicycle { protected readonly defaultTireSize = &quot;28&quot;; } class MountainBike extends Bicycle { protected readonly defaultTireSize = &quot;29&quot;; } now there are new problems: Mountain bike and road bike classes depend on their abstract classAbstract class depends on childrenIf you forget to call super methods – the result might not contain all data requiredUsers of road and mountain bike depend on the abstract class, even if they don't know anything about it "},{"title":"Using Hook Messages: Decoupling Subclasses​","type":1,"pageTitle":"Inheritance in Details","url":"docs/interviewPrep/programmingParadigm/OOP/inheritanceInDetails#using-hook-messages-decoupling-subclasses","content":"This strategy removes the knowledge of the algorithm from the subclass and returns control to the superclass Which was done by adding the postInitialize method solution: Using Hook Messages abstract class Bicycle { constructor(opts) { this.size = opts.size; this.chain = opts.chain; this.tireSize = opts.tireSize; this.postInitialize(opts); } protected postInitialize() {} spares() { return { tireSize: this.tireSize, chain: this.chain, ...this.localSpares(), }; } } class RoadBike extends Bicycle { protected postInitialize(opts) { this.tapeColor = opts.tapeColor; } protected localSpares() { return {tapeColor: this.tapeColor}; } } class MountainBike extends Bicycle { protected postInitialize(opts) { this.frontShock = opts.frontShock; } protected localSpares() { return {frontShock: this.frontShock}; } } RoadBike and MountainBike no longer control the initialization process but instead bring specialization to a more abstract algorithmThis algorithm is defined in the abstract superclass Bicycle, which in turn is responsible for sending postInitializeTo achieve this result Bicycle constructor should always be called, this will happen automatically if derived classes will have no constructor This same technique can be used to remove the dispatch of super in the spares method "},{"title":"Summary​","type":1,"pageTitle":"Inheritance in Details","url":"docs/interviewPrep/programmingParadigm/OOP/inheritanceInDetails#summary","content":"Inheritance solves the problem of related types that share a great deal of common behavior but differ across some dimensionThe best way to create an abstract superclass is by pushing code up from concrete subclassesAbstract superclasses use the template method pattern to invite inheritors to supply specializations they use hook methods to allow these inheritors to contribute these specializations without being forced to send super Well-designed inheritance hierarchies are easy to extend with new subclasses, even for programmers who know very little about the applicationwhat is the disadvantage of multiple inheritance ambiguity can arise this will allow you to decouple parent classes from each other and use only the functionality you needwith this inheritance scheme, ambiguity can arise "},{"title":"Interface","type":0,"sectionRef":"#","url":"docs/interviewPrep/programmingParadigm/OOP/interface","content":"","keywords":""},{"title":"Public Interfaces​","type":1,"pageTitle":"Interface","url":"docs/interviewPrep/programmingParadigm/OOP/interface#public-interfaces","content":"Reveal its primary responsibilityAre expected to be invoked by othersWill not change on a whimAre safe for others to depend onAre thoroughly documented in the tests "},{"title":"Private Interfaces​","type":1,"pageTitle":"Interface","url":"docs/interviewPrep/programmingParadigm/OOP/interface#private-interfaces","content":"Handle implementation detailsAre not expected to be sent by other objectsCan change for any reason whatsoeverAre unsafe for others to depend onMay not even be referenced in the tests "},{"title":"When Should a Class Implement an Interface?​","type":1,"pageTitle":"Interface","url":"docs/interviewPrep/programmingParadigm/OOP/interface#when-should-a-class-implement-an-interface","content":"Class implements Strategy pattern, or it is part of family of objects IRepository, IFormatter, IPrecondition Class implements role interface (as a result of ISP: Interface Segregation Principle) ICloneable, IComparable Class implements interface required for connection with other classes Class is an Adapter, the need for an interface is determined by DIP (Dependency Inversion Principle) Class implements interface, because external environment depends on it Provides testability to users of this classThis is not a single reason to create an interface "},{"title":"When Should a Class Depend on an Interface?​","type":1,"pageTitle":"Interface","url":"docs/interviewPrep/programmingParadigm/OOP/interface#when-should-a-class-depend-on-an-interface","content":"getting it through the constructor The arguments of the class indicate that it cannot take some decision on its own, and it needs help from the called classIt's easiest when a class depends on primitives, a little more complicated when it depends on specific classes, and most difficult when it depends on an interface Class deals with family of types the &quot;family of types&quot; exists already and defined by requirements of existing model As a result of DIP class wants to communicate with object of another level, it defines the interface by itself and requires its implementation For testing purposes: useful in case if implementation of the abstraction relies on external environment "},{"title":"Interface vs Abstract Class​","type":1,"pageTitle":"Interface","url":"docs/interviewPrep/programmingParadigm/OOP/interface#interface-vs-abstract-class","content":"Parameters\tInterface\tAbstract classMultiple inheritances\tImplement several interfaces Only\tone abstract class Structure\tAbstract methods\tAbstract &amp; concrete methods When to use\tFuture enhancements\tTo avoid independence Adding new methods\tCould be hard\tEasy to do Access modifiers\tOnly public\tPublic, protected, private Usage\tDefines the peripheral abilities of a class\tDefines the identity of a class An interface is more flexible from a client's point of view: any class can implement any interface But the interface is &quot;stiffer&quot; from the point of view of its developer it is more difficult to change it (the work of all clients will be broken)restrictions cannot be imposed on the client's constructorthe code cannot be reused Important Reasons For Using Interfaces: Interfaces are used to achieve abstractionDesigned to support dynamic method resolution at run timeIt helps you to achieve loose couplingAllows you to separate the definition of a method from the inheritance hierarchy An abstract class is &quot;stiffer&quot; from the clients' point of view: the client will be forced to abandon the current base class But an abstract class is &quot;more flexible&quot; from the point of view of its developer it allows you to reuse coderestrict the constructor of descendantsallow you to make changes (easily add a virtual method without breaking existing clients)more clearly define a &quot;contract&quot; with descendants using Template Methods Important Reasons For Using Abstract Class: Abstract classes offer default functionality for the subclassesProvides a template for future specific classesHelps you to define a common interface for its subclassesAbstract class allows code reusability "},{"title":"Summary: Creating a Message-Based Application​","type":1,"pageTitle":"Interface","url":"docs/interviewPrep/programmingParadigm/OOP/interface#summary-creating-a-message-based-application","content":"Create Explicit Interfaces every time you create a class, declare its interfacesMethods in the public interface should: Be explicitly identified as suchBe more about what than howHave names that, insofar as you can anticipate, will not change Honor the Public Interfaces of Others do your best to interact with other classes using only their public interfaces Exercise Caution When Depending on Private Interfaces despite your best efforts, you may find that you must depend on a private interface, this is a dangerous dependency that should be isolated Minimize Context construct public interfaces with an eye toward minimizing the context they require from othersKeep the what versus how distinction in mindcreate public methods that allow senders to get what they want without knowing how your class implements its behavior "},{"title":"Mixins","type":0,"sectionRef":"#","url":"docs/interviewPrep/programmingParadigm/OOP/mixins","content":"","keywords":""},{"title":"Understanding Roles​","type":1,"pageTitle":"Mixins","url":"docs/interviewPrep/programmingParadigm/OOP/mixins#understanding-roles","content":"Sometimes you need to share some behavior between non-related objects such case is a direct opposite to inheritance hierarchy (IS-A relation)It is rather a role, which object can play on some state of its lifecycle example When you need to use mixin functionality on some object, you can just add it to the object's prototype this will give us the possibility to use mixins methods on this object such approach has some consequences, prototypes functionality is not the most convenient in usage, apart from that, Object.assign() only makes a shallow copy can use existing JavaScript libraries to make mixins usage easier const sayMixin = { say(phrase) { alert(phrase); }, }; const sayHiMixin = { __proto__: sayMixin, sayHi() { super.say(`Hello ${this.name}`); }, sayBye() { super.say(`Bye ${this.name}`); }, }; class User { constructor(public name) {} } Object.assign(User.prototype, sayHiMixin); new User(&quot;Dave&quot;).sayHi();  "},{"title":"Writing the Concrete Code​","type":1,"pageTitle":"Mixins","url":"docs/interviewPrep/programmingParadigm/OOP/mixins#writing-the-concrete-code","content":"example 1 major part of logic is stored in Schedule class the class is used in isSchedulable method of Bicycle it needs two dates, one for the start and one for the end of bookingSchedule instance receives start date with subtracted leadDays so as to provide enough time to prepare the bicycle for a trip we can schedule a bicycle, but we also have other classes like Mechanic and Driver and each of them has its own leadDays value by extracting common logic, we can create Schedulable duck type with the new Schedulable instance, the relation between Bicycle and Schedulable is not IS-A because Bicycle should not be schedulable under normal conditionsThis duck type describes Bicycle specific behavior when it is required to be scheduled for the tripOther parts of the system should not even know that Bicycle is schedulable these classes relations will be better to describe as BEHAVES-AS class Schedule { isScheduled(schedulable, starting, ending) { console.log( `Checking if ${schedulable.constructor.name}` + `is available on ${starting} - ${ending}` ); //do the checks return true; } } class Bicycle { leadDays = 1; constructor(parts, schedule = new Schedule()) { this.schedule = schedule; // ... } isSchedulable(starting, ending) { const withLeadTime = starting - this.leadDays; return this.schedule.isScheduled(this, withLeadTime, ending); } } example 2 by extracting common logic to SchedulableMixin with isSchedulable method now we can easily mix it to any class in the hierarchy, either Bicycle, Mechanic or Driver, so we will have schedulable behavior when we only need itIn this case decorators could be used as an alternative solutionThe only consequence in Schedulable mixin is that we need to store leadDays property in a target class, so it can be used in mixin const SchedulableMixin = (superclass) =&gt; class extends superclass { private _schedule: Schedule; protected leadDays = 0; set schedule(schedule) { this._schedule = schedule; } get schedule() { return this._schedule || new Schedule(); } isSchedulable(starting, ending) { const withLeadDays = starting - this.leadDays; return this.schedule.isScheduled(this, withLeadDays, ending); } }; class Bicycle extends SchedulableMixin(Object) { protected leadDays = 1; } class Vehicle extends SchedulableMixin(Object) { protected leadDays = 3; } class Mechanic extends SchedulableMixin(Object) { protected leadDays = 4; }  "},{"title":"Writing Inheritable Code​","type":1,"pageTitle":"Mixins","url":"docs/interviewPrep/programmingParadigm/OOP/mixins#writing-inheritable-code","content":" mixins adds additional levels to the call stack this makes understanding and debugging of the application less obviousthus need to keep this in mind and use mixins only when they are really needed rules to follow Recognize the Antipatterns There are two antipatterns which may indicate that you can gain a benefit from inheritanceFirst of them is using variables with a type/category to determine a type of object and send it a messageThe second is usage of direct object type checking or switch-case operator rather missed a duck typeDuck types may have not only common interface but also common behavior, which is recommended to extract to mixins Insist on the Abstraction All the code in an abstract superclass which should be used in every subclass, superclasses should not contain a code which is only applied for some subclassesThis limitation is also applicable to mixins, all the mixin functionality should be used in every place where it is mixed inIf you cannot identify an abstraction, then probably it is not existing, and inheritance cannot be applied to solve this problem Honor the Contract Subclasses must honor the contract, so they can be easily replaced with superclasses without any change in a system behaviorThis means that they need to answer on the same messages receiving the same input data and returning the same result dataThereby they cannot do something which will force a client code to check them for a type to understand what to wait from themSubclasses which do not honor the contract cannot work synchronously thus making all the inheritance hierarchy unpredictableThis also violates Liskov Substitution Principle Preemptively Decouple Classes Try to avoid super method call, use template method pattern and so-called hooks instead, they give subclass a possibility to specify the common algorithm which is controlled by superclassRemember that it is not a &quot;silver bullet&quot; and do not follow this approach blindly Create Shallow Hierarchies Try to create as compact hierarchies as it is possibleShallow hierarchies are easy to understand, shallow and wide are slightly more difficult, but they still are easy to understandDeep and narrow hierarchies tend to become wider and much difficult to understand and maintainYou should avoid deep and wide hierarchies, they create a long path to target method or property which is missing in a target classSuch hierarchies are difficult to maintain, and they create a high risk of application failure "},{"title":"Object-oriented Design","type":0,"sectionRef":"#","url":"docs/interviewPrep/programmingParadigm/OOP/OOD","content":"","keywords":""},{"title":"Design Smells​","type":1,"pageTitle":"Object-oriented Design","url":"docs/interviewPrep/programmingParadigm/OOP/OOD#design-smells","content":"bad design smells Rigidity indicates that a system is rigid if it is difficult to change it, or even a small change will entail high costsThis suggests that the system is no longer flexible and extensible Fragility indicates that a system is fragile if a change in some part breaks something in another partwhile the part in which something breaks is not connected in any way and does not explicitly depend on the part in which something has changed Immobility means that a system is immobile if certain parts of it cannot be separated into separate components or into separate modules and reused in another part of this system, and in the best cases, in other systems in general Viscosity The system is viscous if basic operations are difficult or take too long to complete and thus ignoredexample of such operations that are difficult to modify and take a long time slow tests If they are hard to run, if they are hard to writeif they are slow to execute, then most likely no one will support them, no one will write them, no one will run them Needless Complexity / premature optimization indicates that the system is unnecessarily complicated or prematurely optimizedhas too much code that is not currently used, but was written with the intention that it may be needed in the future if the customer wants that functionality this generates dead codecode that is not used, first for days, then months, years, and then everyone forgets who wrote it, why it was written, and are simply afraid to delete it, because, it may be used somewhere, but nobody knows where the main reason for all the listed bad design smells is the lack of flexibility in the system The system must be flexible, or, as per saying software must be soft that is, it must be easy to change that is why we need a good design "},{"title":"What is Design?​","type":1,"pageTitle":"Object-oriented Design","url":"docs/interviewPrep/programmingParadigm/OOP/OOD#what-is-design","content":" lifecycle final product? – An application that solves some specific problems in its domain areacreation process? – The process of interpreting or compiling source codedesign process is the source code itself the design phase is much longer and more expensive than the creation phasethe design phase should be iterative, gradual, with constant feedback from both the product and the client "},{"title":"Why Change is Hard and the Problem Design Solves​","type":1,"pageTitle":"Object-oriented Design","url":"docs/interviewPrep/programmingParadigm/OOP/OOD#why-change-is-hard-and-the-problem-design-solves","content":"reason Object-oriented application is made of parts – objectsInteractions are embodied in the messages that pass between the objectsSender object – Target object creates dependencies between the twoObject-oriented design is about managing dependencies Change will always occur for requirements, product, ecosystem, environment, customer The system needs a design that is ready for such changes the design would consist of certain parts that would interact with each other to create the behavior of something whole a class, a component, an architectural layer, or an applicationparts are objects, interactions between them are implemented using messages that are sent between these objectssending the correct message to the correct recipient-object requires knowledge of where this object is and how to interact with it This knowledge creates a relationship between two or three objects, or generally a huge number of objects in the systemCross dependencies, cycle-dependency and so on arise all these dependencies complicate system change Object-oriented design is essentially dependency management In the absence of design, unmanaged dependencies lead to chaos because objects begin to know too much about each other, and at some point, it is easier to throw everything out and rewrite entire application than to add some next changesSince these dependencies just become unmanageable By changing something in one place, even if there are some tests, we do not exclude the possibility that something will not break in another place "},{"title":"The Purpose of OOD​","type":1,"pageTitle":"Object-oriented Design","url":"docs/interviewPrep/programmingParadigm/OOP/OOD#the-purpose-of-ood","content":"Software must: Satisfy customer's needsBe flexible for change and enhancement the goal of object-oriented design is to satisfy the needs of the customerto be easy to change and be adaptable and ready for such changes and extensions "},{"title":"The Tools of Design​","type":1,"pageTitle":"Object-oriented Design","url":"docs/interviewPrep/programmingParadigm/OOP/OOD#the-tools-of-design","content":"tools Design Principles: SOLIDDRYKISS Design Patterns CreationalBehavioralStructural OOP Principles AbstractionEncapsulationPolymorphismInheritance "},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/01Introduction/","content":"","keywords":""},{"title":"System Design Basics​","type":1,"pageTitle":"Introduction","url":"docs/interviewPrep/system_design/01Introduction/#system-design-basics","content":"Consider 3 things when designing a large system What are the different architectural pieces that can be used?How do these pieces work with each other?How can we best utilize these pieces: what are the right tradeoffs? Importance for good system design: Investing in scaling before it is needed is generally not a smart business propositionPutting forethought into the design can save valuable time and resources in the future "},{"title":"What are design fundamentals","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/02WhatAreDesignFundamentals/","content":"","keywords":""},{"title":"4 categories​","type":1,"pageTitle":"What are design fundamentals","url":"docs/interviewPrep/system_design/02WhatAreDesignFundamentals/#4-categories","content":""},{"title":"Underlying or foundational knowledge​","type":1,"pageTitle":"What are design fundamentals","url":"docs/interviewPrep/system_design/02WhatAreDesignFundamentals/#underlying-or-foundational-knowledge","content":"these are design fundamentals where, if you don't understand them, you will at best have severe gaps in knowledge that will undermine your positions or your ability to defend positions in a system design interview at worst, will make you incapable of even beginning to tackle a system design interviewe.g.: client server model: need to know what it is to design any modern day systemsnetwork protocols: need to have some understanding of how machines communicate and interact with 1 another in order to be able to properly design a complex system "},{"title":"Key characteristics of a system​","type":1,"pageTitle":"What are design fundamentals","url":"docs/interviewPrep/system_design/02WhatAreDesignFundamentals/#key-characteristics-of-a-system","content":"things that you might want the system to havethings that you might be trading off when making certain design decisions e.g.: availability, wait and see, throughput, redundancy, consistency "},{"title":"Actual components of a system​","type":1,"pageTitle":"What are design fundamentals","url":"docs/interviewPrep/system_design/02WhatAreDesignFundamentals/#actual-components-of-a-system","content":"these are gonna be slightly more tangible things that you can either have in a system or that you can implement in a systeme.g.: load balances, proxies, caches, rate limiting, leader electionthese are the key components that are gonna allow your system to have the key characteristics "},{"title":"Actual tech​","type":1,"pageTitle":"What are design fundamentals","url":"docs/interviewPrep/system_design/02WhatAreDesignFundamentals/#actual-tech","content":"real existing products or services that you can actually use in a system, either as actual components in a system or to achieve a certain characteristic in a systemthese are gonna be real tools e.g.: Zookeeper, XCD, Engine X, Reddits, Amazon S3, Google Cloud Storage this category is often overlooked but is very important that can round you off and make you shine in a systems design interview "},{"title":"Client-Server Model","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/03Client-ServerModel/","content":"","keywords":""},{"title":"Question: what happens when you go to a website in your browser?​","type":1,"pageTitle":"Client-Server Model","url":"docs/interviewPrep/system_design/03Client-ServerModel/#question-what-happens-when-you-go-to-a-website-in-your-browser","content":"Your browser (google chrome) is a client, the website is the server (not the actual server)the browser does not actually know what the website is all that it knows is that it can communicate with it (speak to it, request stuff from it)but doesn't actually know what the server representsit will request information from the server and then base on that information (based on the response from the server), it will be able to do stuff when typing the URL bar, at first the browser doesn't even know how to talk to the website (or the server) what it does behind the scenes, actually, is it makes a DNS query to find out what the IP address of the website is only then can the browser really speak directly to the website (the server) once browser knows where the website is with the IP address it sends a HTTP request to the IP address and specify what port to communicate with it basically sends a bunch of bytes or characters that are going to get packed into what we call packets in some special format to the website (servers)the request will also contain the IP address of the browser, or computer this is the called the source address of the request after receiving the IP address information, the server will then know where to send the response to A server usually listens for requests on specific ports any machine that has a distinct IP address has 16,000 ports that programs on the machine can listen totherefore, when communication with another machine, you need to specify what port you want to communicate on most clients actually know the port that they should use, depending on the protocol that they're trying to speak to the server with eg. if the client is trying to speak to a server using the HTTP protocol it is always going to use port 80, which was decided a long time ago if the client is trying to speak to a server using HTTPS it will use port 443 after the server receives the request from the browser, the server understands that you are trying to view the HTML of the website so the server will return the HTML of the website in its response to the clientthe client will receive the response and then renders the HTML on the page for you "},{"title":"DNS query: it is a special request, that goes to a predetermined set of servers to request for the ip address of the URL​","type":1,"pageTitle":"Client-Server Model","url":"docs/interviewPrep/system_design/03Client-ServerModel/#dns-query-it-is-a-special-request-that-goes-to-a-predetermined-set-of-servers-to-request-for-the-ip-address-of-the-url","content":""},{"title":"IP address: it is a unique identifier for a machine​","type":1,"pageTitle":"Client-Server Model","url":"docs/interviewPrep/system_design/03Client-ServerModel/#ip-address-it-is-a-unique-identifier-for-a-machine","content":"all computers connected to the internet, have ways to find public IP addresses, or at least, they have ways to discover routes to those addresses this means that the computers can send data to IP addresses they can send packets of information in the form of bytes, to IP addresses therefore, a website that was granted an IP address could be a cloud provider (such as google cloud platform) so what the website creator did was to go to the cloud platform after creating the website, and requested to be given and to reserve an IP address "},{"title":"HTTP: it is a way to send information, that the server is able to understand​","type":1,"pageTitle":"Client-Server Model","url":"docs/interviewPrep/system_design/03Client-ServerModel/#http-it-is-a-way-to-send-information-that-the-server-is-able-to-understand","content":""},{"title":"Terms used​","type":1,"pageTitle":"Client-Server Model","url":"docs/interviewPrep/system_design/03Client-ServerModel/#terms-used","content":""},{"title":"Client​","type":1,"pageTitle":"Client-Server Model","url":"docs/interviewPrep/system_design/03Client-ServerModel/#client","content":"a machine or process that requests data or service from a servernote that a single machine or piece of software can be both a client and a server at the same time for instance, a single machine could act as a server for end users and as a client for a database "},{"title":"Server​","type":1,"pageTitle":"Client-Server Model","url":"docs/interviewPrep/system_design/03Client-ServerModel/#server","content":"a machine or process that provides data or service for a client usually by listening for incoming network calls note that a single machine or piece of software can be both a client and a server at the same time for instance, a single machine could act as a server for end users and as a client for a database "},{"title":"Client-Server Model​","type":1,"pageTitle":"Client-Server Model","url":"docs/interviewPrep/system_design/03Client-ServerModel/#client-server-model-1","content":"the paradigm by which modern systems are designed, which consists of clients requesting data or service from servers and servers providing data or service to clients "},{"title":"IP Address​","type":1,"pageTitle":"Client-Server Model","url":"docs/interviewPrep/system_design/03Client-ServerModel/#ip-address","content":"an address given to each machine connected to the public internetIPv4 addresses consist of 4 numbers separated by dots: a.b.c.d where all 4 numbers are between 0 and 255 Special values 127.0.0.1: your own local machine, also referred to as localhost192.168.x.y: your private network for instance, your machine and all machines on your private wifi network will usually have the 192.168 prefix "},{"title":"Port​","type":1,"pageTitle":"Client-Server Model","url":"docs/interviewPrep/system_design/03Client-ServerModel/#port","content":"in order for multiple programs to listen for new network connections on the same machine without colliding, they pick a port to listen ona port is an integer between 0 and 65, 532 (2^16 ports total)typically, ports 0 - 1023 are reserved for system ports (also well-known ports) and shouldn't be used by user-level processes certain ports have pre-defined uses, and although you usually won't be required to have them memorized, they can sometimes come in handy 22: secure shell53: DNS lookup80: HTTP443: HTTPS "},{"title":"DNS​","type":1,"pageTitle":"Client-Server Model","url":"docs/interviewPrep/system_design/03Client-ServerModel/#dns","content":"short for Domain Name Systemit describes the entities and protocols involved in the translation from domain names to IP addressestypically, machines makes a DNS query to a well known entity which is responsible for returning the IP address (or multiple ones) of the requested domain name in the response "},{"title":"Network Protocols","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/04NetworkProtocols/","content":"","keywords":""},{"title":"Protocol​","type":1,"pageTitle":"Network Protocols","url":"docs/interviewPrep/system_design/04NetworkProtocols/#protocol","content":"it is an agreed upon set of rules for an interaction between 2 partiesanalogy example when 2 people who vaguely know each other cross each other while walking down a hallway typically, they will have some kind of exchange chat with one another with small talk then say bye "},{"title":"Key Terms​","type":1,"pageTitle":"Network Protocols","url":"docs/interviewPrep/system_design/04NetworkProtocols/#key-terms","content":""},{"title":"IP​","type":1,"pageTitle":"Network Protocols","url":"docs/interviewPrep/system_design/04NetworkProtocols/#ip","content":"stands for Internet Protocolthe modern internet effectively runs on IP meaning that when a machine or a client tries to interact with another machine or a server and it sends data to that other machine that data is going to be sent in the form of IP Packet this network protocol outlines how almost all machine-to-machine communications should happen in the worldother protocols like TCP, UDP and HTTP are built on top of IPIP has 2 versions IPv4: most of the modern day internet usesIPv6: now being used more and more "},{"title":"TCP​","type":1,"pageTitle":"Network Protocols","url":"docs/interviewPrep/system_design/04NetworkProtocols/#tcp","content":"stands for Transimission Control Protocolbuilt on top of the Internet Protocol (IP)allows for ordered, reliable data delivery between machines over the public internet by creating a connectionTCP is usually implemented in the kernel, which exposes sockets to applications that they can use to stream data through an open connectionit is meant to send IP Packets in an ordered way, and in a reliable way guaranteeing that the IP Packets sent will be received by the destination you will know if some packets keep failing from getting received and in the error free way this means that if the data sent was corrupted, you will know and will be able to resend those packets TCP is used in virtually all web applications and allows you to send arbitrarily long pieces of data to other machinesTCP example when a machine wants to communicate with another machine over TCP when your browser wants to communicate with a website's servers 1st it will create a TCP connection with the destination computer / server through a handshake handshake: is a special TCP interaction where 1 computer contacts the other by sending a packet or a few packets stating that it wants to connect with the other computer, the other computer will response and say okthe client that was trying to establish the connection will reresponds again and say that the the 2 computers are connected and there is an open connection once the connection is established, both machines can freely send data to one another however, if one of the 2 machines doesn't send data in a given amount of period, the connection can be timed outif one of the machines wants to end the connection, it can do so be sending a special message to the other machine know about the ending of the connection summary: it is a more powerful and more functional wrapper around IP, but still lacks a robust framework that developers can use to ready define meaningful and easy to use communication channels for clients and servers in the system HTTP solves this issue "},{"title":"HTTP​","type":1,"pageTitle":"Network Protocols","url":"docs/interviewPrep/system_design/04NetworkProtocols/#http","content":"the HyperText Transfer Protocol is a very common network protocol implemented on top of TCPfollows the request response paradigmclients make HTTP requests, and servers respond with a responserequests typically have the following schema host: string (example: algoexpert.io) port: integer (example: 80 or 443) method: string (example: GET, PUT, POST, DELETE, OPTIONS or PATCH) path: string (example: /payments) headers: pair list (example: &quot;Content-Type&quot; =&gt; &quot;application/json&quot;) body: opaque sequence of bytes path: servers might have multiple paths for different services clients will issue requests to these various paths depending on the path, different business logic will occur headers: contain important meta-data about the request responses typically have the following schema status code: integer (example: 200, 401) headers: pair list (example: &quot;Content-Length&quot; =&gt; 1238) body: opaque sequence of bytes  "},{"title":"IP Packet​","type":1,"pageTitle":"Network Protocols","url":"docs/interviewPrep/system_design/04NetworkProtocols/#ip-packet","content":"it is made up (stored in) of bytessometimes more broadly referred to as just a (network) packetan IP Packet is effectively the smallest unit used to describe data being sent over IP from 1 machine to anotherasides from bytes, an IP Packet consists of 2 main sections: an IP header: contains the source and destination IP addresses as well as other information related to the networkthe total size of the packetthe version of the IP packet is operating byheader size is between 20 to 60 bytes a payload: is just the data being sent over the network contains a TCP header contains the information about the ordering of packets the rest will be the actual data portion IP Packet are limited in size are only 2^16 bytes (65,536 bytes)only way to send more data is to use multiple IP Packets if multiple IP Packets are being sent from one machine to another and is only using IP there is no way of guaranteeing that these packets are gonna be received some of the packets might get lost over the network there is no guarantee in the order in which those packets will be read or interpreted TCP is required to solve this issue "},{"title":"HTTP (Hypertext Transfer Protocol)","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/04NetworkProtocols/http","content":"","keywords":""},{"title":"What is http​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#what-is-http","content":"a protocol used to transfer hypertext protocol: a system of rules that allow communication of information between different entitieshypertext: an outdated word for text that displays on a computer screen text contains hyperlinks to other text (web documents) "},{"title":"What is http used for​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#what-is-http-used-for","content":"http protocol is used to send requests &amp; receive responses between servers &amp; browsers during interaction of web contentshttp protocol defines how the information is formatted &amp; transmittedhttp facilitates every transaction made over the WWW (World Wide Web) link: browser sends a request to get the data from the server when clickedsubmit button: browser sends a request to post data to a database on the server when clicked "},{"title":"Core principles of HTTP​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#core-principles-of-http","content":""},{"title":"Plain language and human readable​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#plain-language-and-human-readable","content":"http request methods uses simple human language verbs GET: get specified resource if available public resource only needs the method and URL secured resource needs authorization header contains encrypted username &amp; password pairmay require cookie containing authentication token POST: create a new resource and add it to a collection needs authorization header as it is making changes to the server contains only the contents of the request PUT: update an existing singleton resource based on ID use to update an existing resource by replacing some or all of its contents with the request contents modified contents MUST be sent together with contents that were not modified, else will be removed requires authorization header contains ID of a resource and request contents to be added contents will be added or replaced PATCH: modify an existing singleton resource based on ID carries instructions on how to modify the existing resource without necessarily replacing data ONLY modified contents will be modified, contents that were not modified will remain requires authorization header DELETE: delete a singleton resource based on ID must contain the ID for the resource and an authorization header HEAD: get just the response headers from the resource returns just the HEAD section of the response OPTIONS: get the options available from this resource returns a description of the communication options for the target resource TRACE: create a loopback for the request message creates a loopback of the request message effectively telling the client where the request ended up "},{"title":"HTTP is a stateless protocol​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#http-is-a-stateless-protocol","content":"each individual request sent over the protocol is unique, no request is connected to another requeststatelessness ensures users do not get trapped in or placed in the middle of sequences of content problem: means that it cannot walk their way through sequences because the requests are not connectedsolution: enable sessions store states shared between browser &amp; serverbrowser &amp; server can exchange information about where the visitor is in the sequence by passing information back &amp; forth in the form of cookies HTTP extensibility​ the passing of cookies that allows HTTP to preserve sessionswhen requests &amp; responses are sent back and forth over HTTP can include HTTP headers with additional information headers can carry information about everything type of client that sent the requestserver configurationtime &amp; date of responsehow &amp; for how long the client should store the datawhat format the data is in "},{"title":"HTTP works based on request/response pairs​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#http-works-based-on-requestresponse-pairs","content":"every action performed over http starts with a request using 1 of the HTTP methodsends with a response containing a HTTP status code, headers, and content "},{"title":"HTTP versions​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#http-versions","content":""},{"title":"HTTP/1.1 (old)​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#http11-old","content":"still being used mainly as a fallback protocol in case if HTTP/2 fails "},{"title":"HTTP/2 (new)​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#http2-new","content":"powers 70-80% of all transactions over the webit is faster and more secure than HTTP/1.1uses compression algorithms to speed up requests allows for multi-plexing: multiple files can be sent over the same TCP connection at the same time &amp; requires an encrytion this is used as a fallback protocol in case if HTTPS fails "},{"title":"HTTPS (new)​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#https-new","content":"every HTTP transaction should idealy be done over an encrypted HTTPS connection using HTTP/2 protocol "},{"title":"HTTP flow​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#http-flow","content":"browser opens a TCP connection to the server ensures data can be sent back and forth over the networkensures data sent from 1 end is put together the same way as the other endif the connection happens over HTTPS TLS certificates are exchanged to ensure only the computer and the server can encrypt and decrypt the transmitted data prevents anyone from eavesdropping the conversation between the client and server, and steal the transmitting data browser sends a HTTP message message contains a HTTP method (GET, PUT, etc.)a URL pointing at the requested resourceheaders cookiesauthentication datadata server performs the requested actions and sends a response back to the browser response will contain a HTTP status message indicating what happenedheaders information about the responsedata that was requested can be in HTML document, stylesheet, javscript, image, etc. Once response is fully received, TCP connection is closed "},{"title":"Terms used​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#terms-used","content":""},{"title":"Browser​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#browser","content":"an app used to access &amp; navigate between HTML documentscomes in many varieties regular visual browsers on phone, tablet, computertext-to-speech audio browsers, text-only browsersVR (virtual reality), AR (augmented reality), MR (mixed reality), XR (extended reality) browsers "},{"title":"User agent​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#user-agent","content":"an app that is acting on behalf of the user (commonly referred to as a client app)in http terms, user agent is whatever app that is transporting information from the user to a server and back this jobs is normally the browser's job but not limited to the browserit can also be a middleware or service e.g.: google, or server "},{"title":"TCP (Transmission Control Protocol)​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#tcp-transmission-control-protocol","content":"one of the main internet protocols used by WWW, email, FTPs (file transfer protocol), remote administrationTCP connection is probably being used if you connect a service over the internet "},{"title":"IP (Internet Protocol)​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#ip-internet-protocol","content":"used to transfer data between computers over a networkeach computer connected to the internet has a dedicated IP address, which is used to connect to it "},{"title":"URL (Universal Resource Locator)​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#url-universal-resource-locator","content":"a universally understood address pointing at a resource somewhere on the webURLs are human-readable addresses stored in DNS (Domain Name Servers) and configured to point to the IP addresses of web serversweb address typed in the address bar of the browser is automatically prefixed with either HTTP or HTTPS this means that you are using HTTP to access the resource at the other end of the universal locator has 2 main pieces​ a protocol declaration e.g.: http://states how we are accessing that resource using the HTTP methods and transport layer a URN (Universal Resource Name) e.g.: example.com/page1/page2?somequery=somevalueprovides the location of the resourcemade up of several pieces host e.g.: example.coma domain which is registered at a DNS (domain name service) points to a dedicated server IP address port e.g.: 80 from example.com:80usually invisible, and states which port we want to access on the serverserver usually uses default ports, thus does not need to be declared http default is 80https default is 443 resource path e.g.: /page1/page2the file location within the server default web documents such as index.html or default.htm will be automatically loadedany other named web documents such as about.html needs to be listed in the URN e.g.: /page1/page2/about.html URL query e.g.: ?somequery=somevalue1 or more queries added to the end of the resource path can perform further actions on the servercan be used to track user's ID or filter content, etc. multiple queries can be made via connecting them with a &amp; e.g.: ?somequery1=somevalue1&amp;somequery2=somevalue2 "},{"title":"Server​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#server","content":"it is a computer on the internet running some form of data storage and sharing application most commonly a web server app allowing users to access its data through the HTTP protocol can cache, clear cache, and update specific cache files literally store data for a specified length of time to speed up transfers and performance "},{"title":"Client (website)​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#client-website","content":"an app that talks to a server does so by sending an HTTP request, which contains a request method describing what action is requestedan address pointing to a resourceother information about the client if client is sending information to the server information is packaged in the request as a payloadthe response is the literal response to the request, which contains a status response code explaining what happendinformation about how the responses was handleddata requested (if responses was successful) can cache, clear cache, and update specific cache files literally store data for a specified length of time to speed up transfers and performance "},{"title":"Proxy​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#proxy","content":"a service, either software or hardware acting as a middle person between clients and servers often used when IP address of a server needs to be hidden or when a server or client sits behind some sort of network barrier like a firewall it is literally a proxy handling data back and forth "},{"title":"Header​","type":1,"pageTitle":"HTTP (Hypertext Transfer Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/http#header","content":"contains metadata about the request facilitating communication between clients and serversheader of HTTP request always contain a request method, or verbheader of HTTP response always contain a status response code these are numerical codes from 100 to 500 describing what type of response the client is receiving 200s for successful responses300s for redirection messages400s for client errors500s for server errors "},{"title":"TCP (Transmission Control Protocol) vs UDP (User Datagram Protocol)","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/04NetworkProtocols/TCPvsUDP","content":"","keywords":""},{"title":"TCP​","type":1,"pageTitle":"TCP (Transmission Control Protocol) vs UDP (User Datagram Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/TCPvsUDP#tcp","content":"the reliable, connection based choiceit is stream-oriented used as a continuous flow of datasplit up in chunks by TCPe.g.: phone conversation Uses of TCP when data loss can't be tolerated or in-order delivery is needed e.g.: file transfers, remote access (SSH) when delivery acknowledgements are needed alternative (not worth the effort): use UDP and implement acknowledgements in app for important packets pros\tconsdelivery acknowledgement\tlarger packets (header: 20 bytes) guaranteed delivery: packet would be resent if no receipt acknowledge was made\trequires more bandwidth as it has bigger overhead: retransmission of packets, acknowledgement of packets requires setting up a connection first (3 way handshake)\tslower than UDP congestion control: delays transmission when network is congested\tstateful will send packets in order because segments are numbered\tdata doesn't always get sent out immediately due to side effect of congestion control error detection: no technical improvement from UDP but checksum is mandatory for IPv4 and IPv6 packets\t "},{"title":"TCP Example​","type":1,"pageTitle":"TCP (Transmission Control Protocol) vs UDP (User Datagram Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/TCPvsUDP#tcp-example","content":"tcp.js const net = require(&quot;net&quot;); const server = net.createServer((socket) =&gt; { socket.write(&quot;Hello.&quot;); socket.on(&quot;data&quot;, (data) =&gt; { console.log(data.toString()); }); }); server.listen(8080); Run server node tcp.js Make connection telnet 127.0.0.1 8080 Close connection need to close at server side "},{"title":"UDP​","type":1,"pageTitle":"TCP (Transmission Control Protocol) vs UDP (User Datagram Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/TCPvsUDP#udp","content":"lightweight, connectionless choiceit is message-oriented app sends data in distinct chunkse.g.: email, text messaging Uses of UDP multimedia streaming alternative: TCP when its overhead doesn't deteriorate performancesome firewalls block UDP for security reasons use UDP for less overhead, send delay undesirable, data loss can be masked small transactions e.g. DBS lookupsno need to create and close the connection first Bandwidth-intensive apps that tolerate packet loss pros\tconssmaller packets sizes (header: 8 bytes)\tno acknowledgement less bandwidth\tno guaranteed delivery as it has primitive error detection faster than tcp\tno error recovery when error detection is detected, corrupted segment would most likely be discarded or remains but turn on a warning flag for the app stateless\tno congestion control (packets get dropped more often during congested senario) no connection reqired to create and maintain\tpackets can arrive out of order more control over when data is sent\tno compensation for lost packets checksum is mandatory for only IPv6 packets "},{"title":"UDP Example​","type":1,"pageTitle":"TCP (Transmission Control Protocol) vs UDP (User Datagram Protocol)","url":"docs/interviewPrep/system_design/04NetworkProtocols/TCPvsUDP#udp-example","content":"udp.js const dgram = require(&quot;dgram&quot;); const socket = dgram.createSocket(&quot;udp4&quot;); // for IPv4 // const socket = dgram.createSocket('udp6'); // for IPv6 socket.on(&quot;message&quot;, (msg, rinfo) =&gt; { console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`); }); socket.bind(8081); Run server node udp.js Make connection echo &quot;hi&quot; | nc -w1 -u 127.0.0.1 8081 "},{"title":"Storage","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/05Storage/","content":"","keywords":""},{"title":"Terms used​","type":1,"pageTitle":"Storage","url":"docs/interviewPrep/system_design/05Storage/#terms-used","content":""},{"title":"Databases​","type":1,"pageTitle":"Storage","url":"docs/interviewPrep/system_design/05Storage/#databases","content":"databases are programs that either use disk or memory to do 2 core things record(store) dataquery(retrieve) data they are servers that are long lived and interact with the rest of the application through network calls, with protocols on top of TCP or even HTTPsome databases only keep records in memory, and the users of such databases are aware of the fact that those records may be lost forever if the machine or process diesdatabases need persistence of those records, and cannot use memory means that you have to write the data to diskanything written to disk will remain through power loss or network partitions this is used to keep permanent records since machines die often in a large scale system special disk partitions or volumes are used by the database processes and those volumes can get recovered even if the machine were to go down permanently "},{"title":"Disk​","type":1,"pageTitle":"Storage","url":"docs/interviewPrep/system_design/05Storage/#disk","content":"usually refers to either HDD (Hard-Disk Drive) or SSD(Solid-State Drive)data written to disk will persist through power failures and general machine crashesdisk is also referred to as Non-Volatile StorageSSD is far faster than HDD based on the latencies of accessing data from SSD and HDDit is also far more expensive from a financial point of viewbecause of that, HDD will typically be used for data that's rarely accessed or updatedbut that's stored for a long timeSSD will be used for data that's frequently accessed and updated "},{"title":"Memory​","type":1,"pageTitle":"Storage","url":"docs/interviewPrep/system_design/05Storage/#memory","content":"short for Random Access Memory(RAM)data stored in memory will be lost when the process that has written that data dies1 advantage of using memory over disk is that reading and writing data in memory is much faster than reading or writing data in disk "},{"title":"Persistent Storage​","type":1,"pageTitle":"Storage","url":"docs/interviewPrep/system_design/05Storage/#persistent-storage","content":"usually refers to diskbut in general it is any form of storage that persists if the process in charge of managing it dies "},{"title":"Latency and Throughput","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/06LatencyAndThroughput/","content":"","keywords":""},{"title":"Terms used​","type":1,"pageTitle":"Latency and Throughput","url":"docs/interviewPrep/system_design/06LatencyAndThroughput/#terms-used","content":""},{"title":"Latency (lower is better)​","type":1,"pageTitle":"Latency and Throughput","url":"docs/interviewPrep/system_design/06LatencyAndThroughput/#latency-lower-is-better","content":"it is basically how long it takes for data to traverse a system and more specifically, how long does it take for data to get from 1 point in a system, to another point in the system in other words, it is the time it takes for a certain operation to complete in a systemwhen talking about latency, we might refer to a lot of different kinds of things in a system might be talking about the latency of a network request how long does it take for 1 request to go from a client to a server, and then back from server to clientwe refer to the time that it takes for a request to go from a client to a server, and then back from the server to the client as latency however, if on a machine like for instance a server, and it is reading a piece of data from memory, or reading that piece of data from disk the time that it's gonna take to read that data is also referred as latency basically different things in systems have different latencies therefore, there is a trade off between different ways that a system is built as certain things are gonna have higher latencies, and other things are gonna have lower latencies most often this measure is a time duration, like milliseconds or secondswhen designing a system, you would want to optimize the system by lowering the overall latencies of the systemssome systems needs low latencies such as video games, when you experience lag, it is due to the server being played on is located halfway across the world from you and it takes a while for your computer (the client) to make a network requests to the video games server some systems does not need to care about latencies such as some websites, as its not important if it takes a couple seconds for a page to load what they care about more is maybe the accuracy or up time they want their website to always show accurate information or never to be downbut are ok to lose some latency latencies orders of magnitude examples for different types of data transfers or operations in a system​ reading 1 mb from RAM: 250 µs (0.25 ms)reading 1 mb from SSD: 1,000 µs (1 ms)transfer 1 mb over 1 Gbps network: 10,000 µs (150 ms) does not take into account of distance, this assumes computers are next each other reading 1 mb from HDD: 20,000 µs (150 ms)sending a packet (1,000 or 1,500 bytes) over a network to a different country on a round trip: 150,000 µs (150 ms) why does it take that long? electricity has to travel, and it takes some time when it has to travel halfway across the world "},{"title":"Throughput (higher is better)​","type":1,"pageTitle":"Latency and Throughput","url":"docs/interviewPrep/system_design/06LatencyAndThroughput/#throughput-higher-is-better","content":"how much work can a machine perform in a given period of time throughput in this context normally refer to the amount of work that a computer or machine can perform in a given amount of time this usually refers to how much data can be transferred from 1 point in a system to another point in a system in a given amount of timetypically measure this throughput in gigabits per second, or Kilobits pers second, megabits per second in summary, it is the number of operations that a system can handle properly per time unite.g.: if there are multiple clients trying to make requests to a single server the throughput will be how many requests can the server handle in a given amount of timeor how many bits can the server handle or let through per second how to increase throughput or how to optimize a system for throughput?​ the naive answer just pay for it as normally this is controlled by the cloud providerhowever, increasing throughput does not neccessary fix a potential problem that you might have in a system e.g.: when a server is handling multiple requests from multiple clients that expects to server thousands of requests or even millions of requests per second (such as google search) just trying to blindly increase throughput on this network won't make sense because you will still eventually have some sort of bottleneck better solution is to have multiple servers to handle all of the requests therefore, instead of multiple request going through the same pipeline same bottleneck, they might go to different servers instead "},{"title":"Latency and Throughput are not neccessarily correlated​","type":1,"pageTitle":"Latency and Throughput","url":"docs/interviewPrep/system_design/06LatencyAndThroughput/#latency-and-throughput-are-not-neccessarily-correlated","content":"e.g.: you might have a system, or parts of a system, smaller parts of a system, that have very low latency, which supports really fast data transfersmight also have another part of a system that has very low throughput that ends up with the low latency data transfers or operations that the system had to be canceled out in summary, you cannot make assumptions about latency or throughput based on the other "},{"title":"Availability","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/07Availability/","content":"","keywords":""},{"title":"What is availability​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#what-is-availability","content":""},{"title":"System's Fault Tolerance​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#systems-fault-tolerance","content":"how resistant a system is to failures e.g.: what happens if a server in the system fails what happens if the database fails is the system gonna completely go down or will be still be operational "},{"title":"Percentage of time​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#percentage-of-time","content":"the percentage of time in a given period (like a month or a year) are at least operational enough such that all of its primary functions are statisfied "},{"title":"How availability is measured​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#how-availability-is-measured","content":"it is measured as the percentage of a system's uptime in a given year e.g.: if a system is up and operational for half of an entire year then that system has 50% availability which is very bad when dealing with availability, usually we are dealing with very high percentages therefore we measure availability not exactly in percentages but rather in Nines a system with 5 nines and above are regarded as highly available or high availability "},{"title":"How to improve the availability​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#how-to-improve-the-availability","content":"ensure that the system doesn't have single points of failure single places in the system that if they fail would cause the entire system to failthis can be solved with redundancy need to have a rigorous processes in place to handle system failures because it is possible that system failures will require human intervention e.g.: if server crashes, need human to bring it back up with the processes in place, it will ensure that system failures fix happens in the proper timeframe "},{"title":"Terms used​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#terms-used","content":""},{"title":"Process​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#process","content":"a program that is currently running on a machineshould always assume that any process may gt terminated at any time in a sufficiently large system "},{"title":"Server​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#server","content":"a machine or process that provides data or service for a client usually by listening for incoming network calls a single machine or piece of software can be both a client and a server at the same time e.g.: a single machine could act as a server for end users and as a client for a database "},{"title":"Node/Instance/Host​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#nodeinstancehost","content":"these 3 terms refer to the same thing most of the time a virtual or physical mahcine on which the developer runs processes sometimes the word server also refers to this same concept "},{"title":"Availability​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#availability-1","content":"the odds of a particular server or service being up and running at any point in time usually measured in percentages a server that has 99% availability will be operational 99% of the time this would be described as having 2 nines of availability "},{"title":"High Availability​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#high-availability","content":"used to describe systems that have particularly high levels of availability typically 5 nines or more sometimes abbreviated &quot;HA&quot; "},{"title":"Nines​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#nines","content":"typically refers to percentages of uptime with the number 9 e.g.: 5 nines of availability means an uptime of 99.999% of the timebelow are the downtimes expected per year depending on those 9s: - 99% (2 nines): 87.7 hours - 99.9% (3 nines): 8.8 hours - 99.99%: 52.6 minutes - 99.999%: 5.3 minutes  "},{"title":"Redundancy​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#redundancy","content":"the process of replicating parts of a system in an effort to make it more reliable Passive redundancy​ passive redundancy is when you have multiple components at a given layer in the system if at any point 1 of those components e.g. 1 of the servers or load balancers, dies nothing really gonna happen as the other components are still able to continue running smoothly they might have more load but will be fine until the broken component gets fixed normally used in aiplane engines e.g.: adding more servers if it is server issueadding more load balancers if if it is over loaded Active redundancy​ it is when you have multiple machines that work together in such a way that only 1 or few of the machines are gonna be typically handling traffic or doing workif 1 of the ones that is handling traffic or doing work fails the other machines will know about it and will reconfigure themselves to take over the job of the dead machine this is also known as leader election "},{"title":"SLA (Service-Level Agreement)​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#sla-service-level-agreement","content":"is an agreement on the system's availability between service provider (the people behind the service or system that is being sold or provided) and the customers or end users of this service or of the systemis a collection of guarantees given to a customer by a service providerit typically make guarantees on a system's availability through explicit written SLAs amongst other things, it is made up of 1 or multiple SLOs (Service-Level Objective) SLA e.g.: refer toGoogle Cloud Spanner SLA example "},{"title":"SLO (Service-Level Objective)​","type":1,"pageTitle":"Availability","url":"docs/interviewPrep/system_design/07Availability/#slo-service-level-objective","content":"is a guarantee given to a customer by a service providerit typically make guarantees on a system's availability e.g.: the percentage of uptime guarantee is an SLOamongst other things, SLOs is the components of an SLA (Service-Level Agreement) "},{"title":"Caching","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/08Caching/","content":"","keywords":""},{"title":"Definition​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#definition","content":"It is like short-term memory has a limited amount of spacebut is typically faster than the original data sourcecontains the most recently accessed items caching enables better use of already available resourcesunattainable product requirements feasible take advantage of the locality of reference principle &quot;recently requested data is likely to be requested again&quot;used in almost every layer of computing e.g.: hardware, operating systems, web browsers, web applications, etc can exist at all levels in architecture but are often found at the level nearest to the front end where they are implemented to return data quickly without taxing downstream levels "},{"title":"use cases​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#use-cases","content":"most likely will use caching in all, or almost all of the Systems Design interviewsthe reason for using caching is to avoid redoing the same operations, especially computationally complex operations that might take a lot of time for multiple timestherefore, caching is used to speed up a system, to reduce or improve the latency of a system caching is storing data in a location that's different from the 1 where the data originally is, such that it's faster to access this data from this new location it can also be used in a bunch of places in a system can cache at the client level so that it no longer requires to request data from the servercan also cache at the server level if a client always need to interact with the serverbut the server doesn't always need to go to the database to retrieve the dataso the server will go to the database once and caches it at the server level can also cache in between 2 components in a system e.g.: cache in between a server and a database can also cache at the hardware level there is a lot of caching going on at the hardware level in modern day computers e.g.: CPU caches: are caches that live at the CPU level this makes it faster to retieve data from memory in summary: caching while it is great, has a lot of pitfalls, and we have to watch out for those pitfalls in general, if the data that we are dealing with is static or immutable data then caching is goodhowever, if data is mutable, then things will be trickier because there will be 2 different locations where the data existshave to make sure these locations are in sync else the data might become stale, depending on the use case this might not be good a rule of thumb: consider caching if only storing static or immutable data consider caching if only have a single thing reading or writing that dataconsider caching is data consitency or staleness is not important "},{"title":"Times when caching will be helpful​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#times-when-caching-will-be-helpful","content":"when doing a lot of network requests and you want to avoid doing all of the network requests taking the client -&gt; server -&gt; database model requests from client to server, then to databaseresponse from the database to server, then to client caching at the client level or server level will avoid unneccessary network requests when doing very computationally long operation caching at the logic location where it takes time to compute would help save time when reading from the database multiple times is not desired can either have a single cache at some detached componentwhere all servers to refer to such as a Redis a popular in-memory database which uses a key value store or each server will have its own cache "},{"title":"Cache Invalidation​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#cache-invalidation","content":"Caching requires maintenance for keeping cache coherent with the source of truth (e.g., database)If the data is modified in the database it should be invalidated in the cacheelse can cause inconsistent application behaviorThis problem is solved via Cache Invalidation "},{"title":"Understanding the problem​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#understanding-the-problem","content":"if we are designing a system or web app, where users can read, write, and edit posts we have the client (browser) that the user is interacting withwe have the server where a user who's writing a post makes a request to the server to write the postwe have the database where the post are storedif we want to cache the posts at for example the server level now we have 2 sources of truth posts are now stored in the database and in the server so if user edits a post client makes a network request with the new postserver make a network request to the database and stores the post in the databasepost is also stored at the server as cache when it got displayed in the browser an issue arises: how to deal with these 2 sources of truth how to know when to write to the cache and when to write to the database? do it at the same time? do not do that at the same time? "},{"title":"First popular type: Write through cache​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#first-popular-type-write-through-cache","content":"it is type of caching system where when you make an edit or write to a piece of data the system will write that piece of data both in cache and in the main source of truth (in this case the database) at the same time / operation cached data allows for fast retrievalsame data gets written in the permanent storage this will have complete data consistency between the cache and the storage ensures that nothing will get lost in case of a crash, power failure, or other system disruptions | pros | cons | | -------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | | allows the cache and database to always be in sync | higher latency for write operations, because every write operation must be done twice before returning success to the client | | minimizes the risk of data loss | have to go to the database everytime the cache or database is overwritten, thus doing both things as the same time | "},{"title":"Second popular type: Write back cache​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#second-popular-type-write-back-cache","content":"difference between this and the Write through cache is that the server update only the cache cache will be out of sync with the database the system will asynchronously update the database with the values that are stored in the cache can be done in different ways on certain intervals e.g.: every 5 seconds, 5 minutes, or every 5 hoursor a different type of schedule e.g.: whenever cache gets filled up and requires eviction in summary: whenever a user makes a network request to the server to make any modifications, only the cache will be updated, and then later at a specific schedule, the database will be asynchronously updated pros\tconswrite to the permanent storage is done after specified intervals or under certain conditions, results in low latency and high throughput for write-intensive applications\tthis speed comes with the risk of data loss in case of a crash or other adverse event, because the only copy of the written data is in the cache if something ever happens to the cache, and the data is lost before the database has been asynchronously updated, then the data will be lost permanently data inconsistency or staleness will occur, especially if there are multiple servers with their own cache, for this case, it would be better to have 1 component solely for caching so that all servers can retrieve the similar cache data "},{"title":"Write around cache​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#write-around-cache","content":"similar to write through cache but data is written directly to permanent storage, bypassing the cache pros\tconscan reduce the cache being flooded with write operations that will not subsequently be re-read\ta read request for recently written data will create a “cache miss” must be read from slower back-end storage and experience higher latency "},{"title":"Eviction policies for stale cache data​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#eviction-policies-for-stale-cache-data","content":"determines how we get rid of stale data in caches or what policy or rules we have to follow to get rid of data in caches there are lots of ways to evict data from a cache thus depends on the use case, the product, or system that you are building or designingtherefore need to discuss with interviewer to figure out what things are valued 2 reasons for needing this preventing stale datacaching only most valuable data to save resources "},{"title":"TTL (Time to Live)​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#ttl-time-to-live","content":"set a time period before a cache entry is deleted automaticallyused to prevent stale datatime set can depend on how essential it is for data to be fresh example blog post: very rarely it would be updated, so a longer cache time could be implementedtweet counts: this does not need to be immediately updated, so data can remain stale for few seconds or even a minute "},{"title":"FIFO (First In First Out) policy (most common)​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#fifo-first-in-first-out-policy-most-common","content":"cache evicts the first block accessed first regardless of how often it was accessed before "},{"title":"LIFO (Last In First Out) policy​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#lifo-last-in-first-out-policy","content":"cache evicts the block accessed most recently first regarless of how often it was accessed before "},{"title":"LRU (Least Recently Used) policy​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#lru-least-recently-used-policy","content":"get rid of the least recently used pieces of data when cache is full you have some way of tracking what pieces of data are the least recently used usually based on assumption that a piece of data that was used least recently is the one that we least care about "},{"title":"MRU (Most Recently Used) Policy​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#mru-most-recently-used-policy","content":"Discards, in contrast to LRU, the most recently used items first "},{"title":"LFU (Least Frequently Used) policy​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#lfu-least-frequently-used-policy","content":"get rids of the least frequently used of that data, not necessarily the least recently used track number of times key is accesseddrop lease used when cache is full "},{"title":"RR (Random Replacement) Policy (least common)​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#rr-random-replacement-policy-least-common","content":"Randomly selects a candidate item and discards it to make space when necessary "},{"title":"Caching layers​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#caching-layers","content":" "},{"title":"DNS (Domain Name System) cache​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#dns-domain-name-system-cache","content":"when typing a website address, you would go to an ip address first before being able to retrieve the ip address, you would need to access it from a DNS server by caching the request to the DNS server once and storing it at the client, the client can then go to the ip address directly "},{"title":"CDN (Content Delivery Network)​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#cdn-content-delivery-network","content":"it is a 3rd party service that acts like a cache for your servers for sites serving large amounts of static media sometimes, web apps can be slow for users in a particular region if your servers are located only in another regiona CDN has servers all around the world this means that the latency to a CDN's servers will almost always be far better than the latency to your servers a CDN's servers are often referred to as PoPs (Points of Presence) 2 of the most popular CDNs are Cloudflare and Google Cloud CDN In a typical CDN setup a request will first ask the CDN for a piece of static mediathe CDN will serve that content if it has it locally availableIf it isn’t available the CDN will query the back-end servers for the filecache it locallyserve it to the requesting user If the system we are building isn’t yet large enough to have its own CDN can ease future transition by serving the static media off a separate subdomain (e.g. static.yourservice.com) using a lightweight HTTP server (e.g. Nginx) cut-over the DNS from your servers to a CDN later "},{"title":"Application Server Cache​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#application-server-cache","content":"Placing a cache directly on a request layer node enables the local storage of response dataEach time a request is made to the service, the node will quickly return local cached data if it existsIf it is not in the cache, the requesting node will query the data from diskThe cache on one request layer node could be located in memory (very fast)on the node’s local disk (faster than going to network storage) If the request layer is expanded to multiple nodes possible to have each node host its own cachehowever, if load balancer randomly distributes requests across the nodes the same request will go to different nodes thus increasing cache misses2 choices for overcoming this hurdle: 1) global caches 2) distributed caches  "},{"title":"Database​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#database","content":"most database would have their own internal caching to cache frequent accessed data "},{"title":"Terms used​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#terms-used","content":""},{"title":"Cache​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#cache","content":"a piece of hardware or software that stores data, typically meant to retrieve that data faster than otherwisecaches are often used to store responses to network requests as well as results of computationally-long operationsdata in a cache can become stale if the main source of truth for that data (i.e. the main database behind the cache) gets updates and the cache doesn't "},{"title":"Cache Hit​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#cache-hit","content":"when requested data is found in a cache "},{"title":"Cache Miss​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#cache-miss","content":"when requested data could have been found in a cache but isn'tthis is typically used to refer to a negative consequence of a system failure or of a poor design choice e.g.: if a server goes down, our load balancer will have to forward requests to a new server, which will result in cache misses "},{"title":"Distributed Cache​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#distributed-cache","content":"works same as traditional cachehas built-in functionality to replicate datashard data across servers if amount of data is too big for a single serverand locate proper server for each keyreason for doing this is, at scale, you don't want your entire system to break down just because your single cache server goes down you'll want some replication to ensure system is more reliable whenever an active server is down, the application will detect it and reroute it to a passive server under ideal conditions, the passive servers will not do anythingbefore a passive server gets brought up online, it needs to be warm-up which is to pre-query the database and fill up the cache data  "},{"title":"Code example​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#code-example","content":""},{"title":"Caching retrieval​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#caching-retrieval","content":"def app_request(tweet_id): cache = {} data = cache.get(tweet_id) if data: return data else: data = db_query(tweet_id) # set data in cache cache[tweet_id] = data return data  "},{"title":"Caching writing​","type":1,"pageTitle":"Caching","url":"docs/interviewPrep/system_design/08Caching/#caching-writing","content":"def app_update(tweet_id, data): cache = {} db_update(data) cache.pop(tweet_id)  "},{"title":"Simple cache example with mock database","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/08Caching/example/","content":"Simple cache example with mock database first install dependencies npm install run server node server.js in the url openhttp://localhost:3001/nocache/index.html this will take 3 seconds everytime the page is loaded as there is no cache involvedhttp://localhost:3001/withcache/index.htmlthis will take 3 seconds for the 1st time the page is loaded, and will be instant from the next load onwards","keywords":""},{"title":"Proxies","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/09Proxies/","content":"","keywords":""},{"title":"Terms used​","type":1,"pageTitle":"Proxies","url":"docs/interviewPrep/system_design/09Proxies/#terms-used","content":""},{"title":"Forward Proxy​","type":1,"pageTitle":"Proxies","url":"docs/interviewPrep/system_design/09Proxies/#forward-proxy","content":"a server that sits between clients and servers and acts on behalf of the client, typically used to mask the client's identity (IP address) server would normally only be able to see the proxy IP address and not the clientdo note that there are some proxies that might still make the source IP address retrievable or visible in some way to the server note that forward proxies are often referred to as just proxies the client does a request that's meant to go to the server, but first goes to the forward proxy forward proxy will then forward the request to the serverthen the server gets the request from the proxy and not from the clientwhen the server responds, it will give its response to the proxythe proxy will then return the response to the client this is a simple example of how VPNs work, allowing you to access websites not accessable from your home countrykey point is the server thinks it is interacting with the client directly "},{"title":"Reverse Proxy​","type":1,"pageTitle":"Proxies","url":"docs/interviewPrep/system_design/09Proxies/#reverse-proxy","content":"a server that sits between clients and servers and acts on behalf of the servers typically used for logging, load balancing, or cachingwhen the client makes a DNS query, it will only see the reverse proxy IP address when the client sends a request to the server, it thinks it is sending to the server directly however, it is actually being sent to the reverse proxy configured by the server side firstthe reverse proxy will then forward the request to the serverthen the server will return a response back to the reverse proxythe reverse proxy will then return back the response to the client this is a good tool to have in a system design can be used to filter out requests to ignoreor can be used to take care of logging for the system1 of the best use case is to use the reverse proxy as a load balanceralso can be used for security purposes if there is a malicious client that wishes to bring down the server by issuing a ton of requests to a given server the reverse proxy can act as a shield for that because it will distribute the request as a load balancer evenly amongst the various servers, so that no single server gets all of the requests key point is the client thinks it is interacting with the server directly "},{"title":"Nginx​","type":1,"pageTitle":"Proxies","url":"docs/interviewPrep/system_design/09Proxies/#nginx","content":"a popular webserver that is often used as a reverse proxy and load balancer "},{"title":"Load Balancer​","type":1,"pageTitle":"Proxies","url":"docs/interviewPrep/system_design/09Proxies/#load-balancer","content":"it is something like a server that is gonna effectively distribute or that can distribute load, like request load between a bunch of serverswhen designing a complex system, there will be a bunch of servers then we can use the reverse proxy to work as a load balancer that decides which incoming requests from clients should be made to which server "},{"title":"Forward Proxy example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/09Proxies/forwardProxyExample/","content":"","keywords":""},{"title":"how to setup​","type":1,"pageTitle":"Forward Proxy example","url":"docs/interviewPrep/system_design/09Proxies/forwardProxyExample/#how-to-setup","content":"install dependecies npm install install nginx if it has not been installed brew install nginx modify nginx.conf file backup file before making changeslocation of nginx.conf file for mac is at/usr/local/etc/nginx run nginx brew services start nginx run server node server.js send request curl localhost:3001/hello for client to serversend request curl localhost:8081/hello for client to proxy to server "},{"title":"Load Balancers","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/10LoadBalancers/","content":"","keywords":""},{"title":"How does a load balancer gets updated information on the servers​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#how-does-a-load-balancer-gets-updated-information-on-the-servers","content":"depends on configurationscan either register the new server or deregister a removed server by itselfor someone has to update and configure the information "},{"title":"2 layer types of load balancer​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#2-layer-types-of-load-balancer","content":""},{"title":"Layer 4​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#layer-4","content":"only has access to TCP and UDP datafaster because it does not need to use as much processing power to look at each requestlack of information can lead to uneven trafficmost popular Layer 4 load balancing techniques are: round-robin, weighted round-robin, least connections, weighted least connections "},{"title":"Layer 7​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#layer-7","content":"full access to HTTP protocol and datacan terminate SSL and decrypt trafficcheck for authenticationsmarter routing optionsmore cpu intensive but is no longer a big factor due to the drop in hardware costs over the years the staff who are responsible for the apps themselves need to ensure that their apps are perfectly tuned for optimal application performanceLayer 7 switching directs its requests at the application layer, this type of switching is also known as: Request switching, Application switching, Content based routing "},{"title":"2 types of load balancers​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#2-types-of-load-balancers","content":""},{"title":"Software or Hardware type​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#software-or-hardware-type","content":"SLB (Server Load Balancing) provides network services and content delivery using a series of load balancing algorithmsprioritizes responses to the specific requests from clients over the networkdistributes client traffic to servers to ensure consistent, high-performance application delivery "},{"title":"Software type​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#software-type","content":"can do more compared to hardware type, as it has more power over customization and scalingexamples: Nginx, HAProxy SDN (software-defined networking) separates the control plane from the data plane for application delivery This allows the control of multiple load balancinghelps the network to function like the virtualized versions of compute and storageWith the centralized control networking policies and parameters can be programmed directly for more responsive and efficient application services UDP (User Datagram Protocol) used for live broadcasts and online games when speed is important and there is little need for error correctionhas low latency because it does not provide time-consuming health checks TCP (transmission control protocol) provides a reliable and error-checked stream of packets to IP addresses which can otherwise easily be lost or corrupted Virtual mimic software-driven infrastructure through virtualizationruns the software of a physical load balancing appliance on a virtual machinedo not avoid the architectural challenges of traditional hardware appliances which include limited scalability and automation, and lack of central management Elastic scales traffic to an application as demand changes over timeuses system health checks to learn the status of application pool members (application servers)routes traffic appropriately to available serversmanages fail-over to high availability targetsautomatically spins-up additional capacity LBaaS (Load Balancer as a Service) uses advances in load balancing technology to meet the agility and application traffic demands of organizations implementing private cloud infrastructure Using an as-a-service model creates a simple model for application teams to spin up load balancers "},{"title":"Hardware type: F5, Citrix​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#hardware-type-f5-citrix","content":"they are physical machines that are dedicated to load balancinglimited to the hardware that is givenhardware is often expensive as it could lead to vendor lock-in can handle tons of taffic because they are specifically designed only to be load balancersexamples Geographic redistributes application traffic across data centers in different locations for maximum efficiency and securityuses multiple data centers in many locations local load balancing on the other hand, happens within a single data center Multi-site also known as global server load balancing (GSLB)distributes traffic across servers located in multiple sites or locations around the worldservers can be on-premises or hosted in a public or private cloudimportant for quick disaster recovery and business continuity after a disaster in one location renders a server inoperable "},{"title":"possible ways to solve server overload​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#possible-ways-to-solve-server-overload","content":""},{"title":"Vertically scale the system​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#vertically-scale-the-system","content":"this is to increase the power of the server, however, this will be limited as there is only so much we can do to increase the performance of a single server of a single machine "},{"title":"Horizontally scale the system​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#horizontally-scale-the-system","content":"this is by adding more machines or add more servers to the systemhowever this requires a strategy to be put in place to allow clients to know which server to make the request from in this case, a load balance will be useful "},{"title":"Benefits of Load Balancing​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#benefits-of-load-balancing","content":"Users experience faster, uninterrupted service Users won’t have to wait for a single struggling server to finish its previous tasksrequests are immediately passed on to a more readily available resource Service providers experience less downtime and higher throughput a full server failure won’t affect the end user experience Because load balancer will route around it to a healthy server Load balancing makes it easier for system administrators to handle incoming requests it also decreases wait time for users Smart load balancers provide benefits that determine traffic bottlenecks before they happen e.g.: predictive analyticsthus, smart load balancer gives an organization actionable insightsThese are key to automation and can help drive business decisions System administrators experience fewer failed or stressed components load balancing has several devices perform a little bit of work Instead of a single device performing a lot of work "},{"title":"Load Balancing Algorithms​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#load-balancing-algorithms","content":"How does the load balancer choose the backend server? Load balancers consider 2 factors before forwarding a request to a backend server ensure that the server they choose is actually responding appropriately to requeststhen use a pre-configured algorithm to select one from the set of healthy servers Health Checks Load balancers should only forward traffic to “healthy” backend serversTo monitor the health of a backend server “health checks” regularly attempt to connect to backend servers to ensure that servers are listening If a server fails a health check it is automatically removed from the pooltraffic will not be forwarded to it until it responds to the health checks again Load balancing methods / Server-Selection Strategy Least Connection Method check how much traffic a server is handling at an given timedirects traffic to the server with the fewest active connectionsuseful when there are a large number of persistent client connections which are unevenly distributed between the servers such as chat or streaming apps Least Response Time Method / performance-based selection check how long a server is taking to respond to trafficdirects traffic to the server with the fewest active connections and the lowest average response time Least Bandwidth Method / load-based selection check how much resources a server is usingselects the server that is currently serving the least amount of traffic measured in megabits per second (Mbps) Round Robin Method cycles through a list of servers and sends each new request to the next server in 1 order When it reaches the end of the list, it starts over at the beginningis most useful when the servers are of equal specification and there are not many persistent connections simplest type of routing, but can result in uneven traffic Weighted Round Robin Method designed to better handle servers with different processing capacities Each server is assigned a weight (an integer value that indicates the processing capacity)order of servers from 1st to last will still be followed however, the number of redirection of requests per server will depend on the weight it was givenServers with higher weights receive new connections before those with less weightsservers with higher weights get more connections than those with less weights random selection could cause problems 1 server by chance could get overloaded IP Hash / IP-based routing when load balancer gets requests from clients it hashes the clients IP addresses depending on the value of the hash it will redirect to the server accordingly this strategy can be useful if got caching going on in the servers if we are caching the results of requests in the servers it will be helpful to have requests from a specific client always be redirected to the server in which the response of that particular client's request has been cached this can help you maximize cache hitsuseful for stateful sessions path-based server selection load balancer distributes requests to servers according to the path of the requests for example, it could be split based on features, payments related feature is redirected to payment handled related servers, and other features related requests are redirected to their respective related servers this is useful as if we want to deploy a big change to a service this will only affect the servers that handles this service "},{"title":"Redundant Load Balancers​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#redundant-load-balancers","content":"load balancer can be a single point of failure to overcome this, a second load balancer can be connected to the first to form a clusterEach LB monitors the health of the otherboth of them are equally capable of serving traffic and failure detection - in the event the main load balancer fails, the second load balancer takes over "},{"title":"Terms used​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#terms-used","content":""},{"title":"Hot Spot​","type":1,"pageTitle":"Load Balancers","url":"docs/interviewPrep/system_design/10LoadBalancers/#hot-spot","content":"when distributing a workload across a set of servers, that workload might be spread unevenly this can happen if the sharding key or the hashing function are suboptimalor if workload is naturally skewed some servers receiving a lot more traffic than others, thus creating a hot spot "},{"title":"Weighted Round Robin Load Balancer Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/10LoadBalancers/example/","content":"","keywords":""},{"title":"how to setup​","type":1,"pageTitle":"Weighted Round Robin Load Balancer Example","url":"docs/interviewPrep/system_design/10LoadBalancers/example/#how-to-setup","content":"install dependecies npm install install nginx if it has not been installed brew install nginx modify nginx.conf file backup file before making changeslocation of nginx.conf file for mac is at/usr/local/etc/nginx run nginx brew services start nginx run server 1 PORT=3000 node server.js run server 2 PORT=3001 node server.js send request curl localhost:8081/hello a few times to see how the load balancer works "},{"title":"Hashing","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/11Hashing/","content":"","keywords":""},{"title":"potentional problem with round robin strategy approach of a load balancer​","type":1,"pageTitle":"Hashing","url":"docs/interviewPrep/system_design/11Hashing/#potentional-problem-with-round-robin-strategy-approach-of-a-load-balancer","content":"a client performs a computional heavy request and cache is stored in server a if the same client performs the same heavy request but instead got redirected to a different server, the cache is gone and have to be cached again "},{"title":"naive solution via hashing​","type":1,"pageTitle":"Hashing","url":"docs/interviewPrep/system_design/11Hashing/#naive-solution-via-hashing","content":"first hash the requests that comes into the load balancer then based on the hash value, the request will be redirected to the server located at the hash valueby doing so, all request made by the same client will always be redirected to the same server however, other problems can arise when dealing with large scale distributed systems e.g.: servers can die, or a server is overloaded and requires new serversin the case where a new server is added, or when a server fails we would need to modify the hashing logic to produce different hash values for the server locations however, by doing so, all the clients that were redirected to a specific server would change, causing the servers to compute the cache again therefore, this solution does not work the moment a server fails or a new server is added "},{"title":"Better solution by using Consistent hashing or Rendezvous hashing​","type":1,"pageTitle":"Hashing","url":"docs/interviewPrep/system_design/11Hashing/#better-solution-by-using-consistent-hashing-or-rendezvous-hashing","content":""},{"title":"Terms used​","type":1,"pageTitle":"Hashing","url":"docs/interviewPrep/system_design/11Hashing/#terms-used","content":""},{"title":"Hashing function​","type":1,"pageTitle":"Hashing","url":"docs/interviewPrep/system_design/11Hashing/#hashing-function","content":"a funtion that takes in a specific data type (such as a string or an identifier) and outputs a number different inputs may have the same output but a good hashing function attempts to mnimize those hashing collisions (equivalent to maximizing uniformity) a good hashing function will evenly distribute your data valuesin practice you never write your own hashing function normally use a pre-made industry grade hashing function or hashing algorithm e.g.: MD5, SHA-1, Bcrypt "},{"title":"Consistent hashing​","type":1,"pageTitle":"Hashing","url":"docs/interviewPrep/system_design/11Hashing/#consistent-hashing","content":"a type of hashing that minimizes the number of keys that need to be remapped when a hash table gets resizedit's often used by load balancers to distribute traffic to serversit minimizes the number of requests that get forwarded to different servers when new servers are added or when existing servers are brought downif a server gets removed or is newly added, most of the clients will still be redirected to the same serverthe same server can also be placed at multiple locations to allow more clients to be redirected to it "},{"title":"Rendezvous hashing​","type":1,"pageTitle":"Hashing","url":"docs/interviewPrep/system_design/11Hashing/#rendezvous-hashing","content":"a type of hashing also coined highest random weight hashingallows for minimal re-distribution of mappings when a server goes downfor every client, it will calculate a score or ranks the servers or destinations the client would then be associated with the highest score or ranking of the serverin the event a server fails, a new calculation of the highest score or ranking of the server will be done and thus be associated to the new server "},{"title":"SHA (Secure Hash Algorithms)​","type":1,"pageTitle":"Hashing","url":"docs/interviewPrep/system_design/11Hashing/#sha-secure-hash-algorithms","content":"is a collection of cryptographic hash functions used in the industrySHA-3 is a popular choice to use in a system these days "},{"title":"Rendezvous Hashing example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/11Hashing/rendezvousHashingExample/","content":"","keywords":""},{"title":"how to run​","type":1,"pageTitle":"Rendezvous Hashing example","url":"docs/interviewPrep/system_design/11Hashing/rendezvousHashingExample/#how-to-run","content":"node hashingExample.js "},{"title":"Relational Databases","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/12RelationalDatabases/","content":"","keywords":""},{"title":"SQL databases must use ACID transactions​","type":1,"pageTitle":"Relational Databases","url":"docs/interviewPrep/system_design/12RelationalDatabases/#sql-databases-must-use-acid-transactions","content":"ACID transaction is a transaction or operation in a database that has 4 properties Atomicity​ the operations that constitute the transaction with either all succeed or all failthere is no in-between statee.g.: a bank transfer transaction from 1 bank account to another bank account during this transaction, should it fail at any point before completion, the entire transaction will failthe entire transaction is effectively rolled backonly when the all operations in the transaction passes, will the entire transaction pass Consistency​ the transaction cannot bring the database to an invalid stateafter the transaction is committed or rolled back the rules for each record will still apply, and all future transactions will take into account any past transactions in the databasethere will be not stale state in the database where 1 transaction has executed but another transaction doesn't know that it's executed Isolation​ the execution of multiple transactions concurrently will have the same effect as if they had been executed sequentially like in a queue Durability​ any committed transaction is written to non-volatile storage, effects of that transaction are permanentit will not be undone by a crash, power loss, or network partition "},{"title":"Database Index​","type":1,"pageTitle":"Relational Databases","url":"docs/interviewPrep/system_design/12RelationalDatabases/#database-index","content":"a special auxiliary data structure can be created allow your database to perform certain queries much fasterindexes can typically only exist to reference structured data, like data stored in relational databsesin practice, you create an index on 1 or multiple columns in your database to greatly speed up read queries that you run very often with the downside of slightly longer writes to your database, since writes have to also take place in relevant index Cons of using database index​ because it is an auxiliary data structure, it will take up more spaceit also mean that whenever you write to the database or store data in the table that has a database index you also need to write in the database indexas a result causing the write operations to be a bit slower and take up more space types of indexes​ each types have their own ways of implementatione.g.: bitmap indexes, reverse indexes, dense indexes "},{"title":"Terms used​","type":1,"pageTitle":"Relational Databases","url":"docs/interviewPrep/system_design/12RelationalDatabases/#terms-used","content":""},{"title":"Databases​","type":1,"pageTitle":"Relational Databases","url":"docs/interviewPrep/system_design/12RelationalDatabases/#databases","content":"is a program that either use disk or memory to do 2 core things record data and query data they are also servers that are long lived and interact with the rest of the application through network calls with protocols on top of TCP or even HTTP some databases only keep records in memory users of such databases are aware of the fact that those records may be lost forever if the machine or process dies databases need persistence of those records and cannot use memory this means that you have to write data to diskanything written to disk will remain during power loss or network partitions since machinese die often in a large scale system special disk partitions or volumes are used by the database processesthose volumes can get recovered even if the machine were to go down permanently "},{"title":"Disk​","type":1,"pageTitle":"Relational Databases","url":"docs/interviewPrep/system_design/12RelationalDatabases/#disk","content":"usually refers to either HDD (Hard-disk drive) or SSD (Solid-state drive)data written to disk will persist during power failures and general machine crashesdisk is also referred to as non-volatile storageSSD is far faster than HDD but also far more expensive from a financial point of viewthus HDD will typically be used for data that's rarely accessed or updated but is stored for a long timeSSD is used for data that's frequently accessed and updated "},{"title":"Memory​","type":1,"pageTitle":"Relational Databases","url":"docs/interviewPrep/system_design/12RelationalDatabases/#memory","content":"short for RAM (Random Access Memory)data stored in memory will be lost when the process that has written that data dies "},{"title":"Non-Relational Database​","type":1,"pageTitle":"Relational Databases","url":"docs/interviewPrep/system_design/12RelationalDatabases/#non-relational-database","content":"in contrast with relational database (SQL databases), it is a type of databse that is free of imposed, tabular-like structurenon-relational databases are often referred to as NoSQL databases1 example is Google Cloud Datastore this only had Eventual Consistency "},{"title":"SQL (Structured Query Language)​","type":1,"pageTitle":"Relational Databases","url":"docs/interviewPrep/system_design/12RelationalDatabases/#sql-structured-query-language","content":"relational databases can be used using a derivative of SQL such as PostgreSQL in the case of Postgres "},{"title":"SQL Database​","type":1,"pageTitle":"Relational Databases","url":"docs/interviewPrep/system_design/12RelationalDatabases/#sql-database","content":"any database that supports SQLthis term is often used synonymously with relational databsein practice, not every relational database supports SQL "},{"title":"NoSQL Database​","type":1,"pageTitle":"Relational Databases","url":"docs/interviewPrep/system_design/12RelationalDatabases/#nosql-database","content":"any databse that is not SQL compatible is called NoSQLusually comes with their own special querying language usually does not support complex queries although 1 could write their own python or javascript to perform complex queries however, when dealing with large scale distributed system, you might have terabytes of data writing a python script to query this data, would need to load that data in memory, which is pretty much impossible "},{"title":"Strong Consistency​","type":1,"pageTitle":"Relational Databases","url":"docs/interviewPrep/system_design/12RelationalDatabases/#strong-consistency","content":"usually refers to the consistency of ACID transactions as opposed to Eventual Consistency "},{"title":"Eventual Consistency​","type":1,"pageTitle":"Relational Databases","url":"docs/interviewPrep/system_design/12RelationalDatabases/#eventual-consistency","content":"a consistency model which is unlike Strong Consistencyin this model, reads might return a view of the system that is stalean eventually consistent datastore will give guarantees that the state of the database will eventually reflect writes within a time period (could be 10 seconds or minutes) "},{"title":"Postgres​","type":1,"pageTitle":"Relational Databases","url":"docs/interviewPrep/system_design/12RelationalDatabases/#postgres","content":"a relational databse that uses a dialet of SQL called PostgresSqlprovides ACID transactions "},{"title":"PostgreSQL Relational Database example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/12RelationalDatabases/example/","content":"","keywords":""},{"title":"how to run​","type":1,"pageTitle":"PostgreSQL Relational Database example","url":"docs/interviewPrep/system_design/12RelationalDatabases/example/#how-to-run","content":"Install postgresql brew install postgresql Start postgresql server brew services start postgresql Create database createdb database_name Load sql file into database psql -d database_name -a -f tables.sql Connect to database psql -d database_name Run queries from queries.sql by copy and paste "},{"title":"Atomicity example​","type":1,"pageTitle":"PostgreSQL Relational Database example","url":"docs/interviewPrep/system_design/12RelationalDatabases/example/#atomicity-example","content":"open 2 terminals, both connected to the same database1 starts the BEGIN TRANSACTION while the other does notafter updating the one that has began transaction, the other does not reflect the results this is because COMMIT has not been initiated and thus the transaction has not been fully completed, displaying the atomicity feature "},{"title":"Isolation example​","type":1,"pageTitle":"PostgreSQL Relational Database example","url":"docs/interviewPrep/system_design/12RelationalDatabases/example/#isolation-example","content":"open 2 terminals, both connected to the same databaseboth start the BEGIN TRANSACTIONupdate the 1st terminal, then try updating the 2nd terminal the 1st terminal will be updated successfullythe 2nd terminal will hangthis means that transactions could be runned concurrently, but effectively they will be executed sequentially 2nd terminal will only complete after the 1st terminal perform a COMMIT; "},{"title":"Key-Value Stores","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/13Key-ValueStores/","content":"","keywords":""},{"title":"Popular types​","type":1,"pageTitle":"Key-Value Stores","url":"docs/interviewPrep/system_design/13Key-ValueStores/#popular-types","content":"Amazon DynamoDBETCD is a strong consistent and highly available key-value store that's often used to implement leader election in a system Redis an in memory key-value storedoes offer some persisten storage options but is typically used as a really fast, best-effort caching solutionoften used to implement rate limiting Apache ZooKeeper is a strongly consistent, highly available key-value storeoften used to store important configuration or to perform leader election "},{"title":"Terms Used​","type":1,"pageTitle":"Key-Value Stores","url":"docs/interviewPrep/system_design/13Key-ValueStores/#terms-used","content":""},{"title":"Dynamic Configuration​","type":1,"pageTitle":"Key-Value Stores","url":"docs/interviewPrep/system_design/13Key-ValueStores/#dynamic-configuration","content":"sometimes you might want to have special parameters or constants in your system that different parts of the system can rely on best place to store these special parameters is in a key-value store "},{"title":"Redis Key-Value Store example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/13Key-ValueStores/redisExample/","content":"","keywords":""},{"title":"How to run​","type":1,"pageTitle":"Redis Key-Value Store example","url":"docs/interviewPrep/system_design/13Key-ValueStores/redisExample/#how-to-run","content":"install redis brew install redis run redis service brew services start redis install all dependencies npm i run server node server.js paste link to browser http://localhost:3001/nocache/index.html this will always take 3 seconds to load as there is no cache http://localhost:3001/withcache/index.htmlthis will take 3 seconds to load initiallysubsequent refresh will load instantenouslyhowever, this will expire in 10 seconds and will then take 3 seconds to load again "},{"title":"Specialized Storage Paradigms","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/14SpecializedStorageParadigms/","content":"","keywords":""},{"title":"Blob storage​","type":1,"pageTitle":"Specialized Storage Paradigms","url":"docs/interviewPrep/system_design/14SpecializedStorageParadigms/#blob-storage","content":"widely used kind of storage in small and large systemsthey don't really count as databases, partially because they only allow the user to store and retrieve data based on the name of the blobis similar to key-value store but blob stores have different guarantees it might be slower than key-value stores, but values can be megabytes larger (or gigabytes larger)usually used to store large binaries, database snapshots, or images and other static assets that a website might have blob storage is complicated to have on premise only giant companies like Google and Amazon have infrastructure that supports itso usually in the system design interview context, can assume that you will be able to use Google Cloud Storage or Amazon S3 they cost money depending on how much storage is used and how often you store and retrieve blobs from that storage blob storage e.g.: Google Cloud Storage GCS is a blob storage service provided by Google Amazon S3 S3 is a blob storage service provided by Amazon through Amazon Web Services (AWS) "},{"title":"Time Series Database (TSDB)​","type":1,"pageTitle":"Specialized Storage Paradigms","url":"docs/interviewPrep/system_design/14SpecializedStorageParadigms/#time-series-database-tsdb","content":"it is a special kind of database optimized for storing and analyzing time-indexed data which are data points that specifically occur at a given moment in timeuse cases good if you are monitoring parts of the system e.g: a bunch of events that all occur at a given timestampif you are designing an IoT system, where you got millions of devices that are constantly sending telemetry data or capturing certain data in their environmentsif you are dealing with stock prices that change every second or cryptocurrency prices e.g.: InfluxDB a popular open-source time series-database Prometheus a popular open-source time series database, typically used for monitoring purposes Graphite "},{"title":"Graph Database​","type":1,"pageTitle":"Specialized Storage Paradigms","url":"docs/interviewPrep/system_design/14SpecializedStorageParadigms/#graph-database","content":"a type of database that stores data following the graph data modeldata entries in a graph database can have explicitly defined relationships much like nodes in a graph can have edges graph databases take advantage of their underlying graph structure to perform complex queries on deeply connected data very fastgraph database are thus often preferred to relational databases when dealing with systems where data points naturally form a graph and have multiple levels of relationships e.g.: social networks database e.g.: Neo4j a popular graph database that consists of nodes, relationships, properties, and labels "},{"title":"Cypher​","type":1,"pageTitle":"Specialized Storage Paradigms","url":"docs/interviewPrep/system_design/14SpecializedStorageParadigms/#cypher","content":"a graph query language that was originally developed for the Neo4j graph database but has been standardized to be used with other graph databases in an effort to make it the SQL for graphs Cypher queries are often much simpler than their SQL counterparts e.g.: Cypher query to find data in Neo4j, a popular graph database MATCH (some_node:SomeLabel)-[:SOME_RELATIONSHIP]-&gt;(some_other_node:SomeLabel {some_property:'value'}) "},{"title":"Spatial Database​","type":1,"pageTitle":"Specialized Storage Paradigms","url":"docs/interviewPrep/system_design/14SpecializedStorageParadigms/#spatial-database","content":"a type of database optimized for storing and querying spatial data like locations on a mapSpatial databases rely on spatial indexes like quadtrees to quickly perform spatial queries like finding all locations in the vicinity of a region "},{"title":"what is spatial data?​","type":1,"pageTitle":"Specialized Storage Paradigms","url":"docs/interviewPrep/system_design/14SpecializedStorageParadigms/#what-is-spatial-data","content":"anything that has to do with geometric space, basically locations on a map "},{"title":"use cases​","type":1,"pageTitle":"Specialized Storage Paradigms","url":"docs/interviewPrep/system_design/14SpecializedStorageParadigms/#use-cases","content":"if you are storing hotels in the world, or restaurants in a country, or designing google maps "},{"title":"Spatial indexes examples​","type":1,"pageTitle":"Specialized Storage Paradigms","url":"docs/interviewPrep/system_design/14SpecializedStorageParadigms/#spatial-indexes-examples","content":"there might be times where you might need to implement your own spatial indexes and storing it in memory might be required if you are designing a system that really cares about very fast latencies, dealing with location based system or system that relies on spatial data, and you don't wanna be querying the database all the time in this day and age, a lot of databases e.g.: Postgres are smart and really optimized for all sorts of queries and data types thus is possible that some databases like Postgres might provide out of the box solutions for spatial data this is dependent on the interviewer, discuss with the interviewer to understand what they are looking for Quadtree​ a tree data structure most commonly used to index 2 dimensional spatial dataeach node in a quadtree has either 0 children nodes (and is therefore a leaf node) or exactly 4 children nodestypically quadtree nodes contain some form of spatial data e.g.: locations on a map with a maximum capacity of some specified number nso long as nodes aren't at capacity, they remain leaf nodesonce they reach capacity, they're given 4 children nodes, and their data entries are split across 4 children nodes a quadtree lends itself well to storing spatial data because it can be represented as a grid filled with rectangles that are recursively subdivided into 4 sub-rectangles where each quadtree node is represented by a rectangle and each rectangle represents a spatial regionassuming we're storing locations in the world, we can imagine a quadtree with a maximum node-capacity n as follows the root node, which represents the entire world, is the outermost rectangleif the entire world has more than n locations, the outmost rectangle is divided into 4 quadrants, each representing a region of the worldso long as a region has more than n locations, its corresponding rectangle is subdivided into 4 quadrants (the corresponding node in the quadtree is given 4 children nodes)regions that have fewer than n locations are undivided rectangles (leaf nodes)the parts of the grid that have many subdivided rectangles represent densely populated areas (like rural areas) finding a given location in a perfect quadtree is an extremely fast operation that runs in log4(x) time (where x is the total number of locations), since quadtree nodes have 4 children nodes R-trees​ K-D trees​ M-trees​ "},{"title":"SQL vs Graph Database example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/14SpecializedStorageParadigms/sqlVsGraphDbExample/","content":"","keywords":""},{"title":"How to run​","type":1,"pageTitle":"SQL vs Graph Database example","url":"docs/interviewPrep/system_design/14SpecializedStorageParadigms/sqlVsGraphDbExample/#how-to-run","content":"open Neo4j online sandbox website https://neo4j.com/sandbox/ click on the Launch the Free Sandbox buttonLog in or sign upCreate a new blank project then open itpaste the populate data cql code into the online terminal and runpaste the cql query code into the online terminal and run "},{"title":"Replication and Sharding","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/","content":"","keywords":""},{"title":"Replication​","type":1,"pageTitle":"Replication and Sharding","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/#replication","content":"the act of duplicating the data from 1 database server to others "},{"title":"Using replication to backup a database​","type":1,"pageTitle":"Replication and Sharding","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/#using-replication-to-backup-a-database","content":"this is sometimes used to increase the redundancy of the system and tolerate regional failures replica database must always be up to date with the main database How it works​ whenever the main database is updated, the replica database will also need to be updated and in a synchronous way in the event that the update of the replica database should fail, the update of the main database should not be completed as a result, this will cause the write operation to take longer as both databases has to be updated successfullywhen the main database fails, the replica database will take overwhen the main database is up again, the main databse will take over "},{"title":"Using replication to create database for specific regions​","type":1,"pageTitle":"Replication and Sharding","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/#using-replication-to-create-database-for-specific-regions","content":"other times you can use replication to move data closer to the clients thus decreasing the latency of accessing specific data How it works​ if there are 2 servers, 1 in the US for US users, and 1 in China for Chinese users each server in their respective countries will update their own databases first this will allow native users to have high latency and throughput however the native data in each database has to be in sync with each other since other country's database is not of high priority, other country's database can be updated asynchronously after the native country's database has been updated "},{"title":"Sharding (sometimes called data partitioning)​","type":1,"pageTitle":"Replication and Sharding","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/#sharding-sometimes-called-data-partitioning","content":"it is the act of splitting a database into 2 or more pieces called shardsit is typically done to increase the throughput of the databasepopular sharding strategies sharding based on a client's regionsharding based on the type of data being stored (e.g.: user data gets stored in 1 shard, payments data gets stored in another shard)sharding based on the hash of a column (only for structured data) "},{"title":"When to use​","type":1,"pageTitle":"Replication and Sharding","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/#when-to-use","content":"when a database reaches a bottleneck and can't handle too many requests at once and throughput is too low although scaling vertically by improving the database more powerful would work but there is only so much that can be donescaling horizontally by adding more database servers is also possible, however, if there are tons of data, replicating it might not be an optimal way a better solution would be to split up the data and store parts of the data in their own database server, this is sharding or data partitions e.g.: any paying customers with the name that starts from A to C goes to shard 1, D to F goes to shard 2, etc.this solution however, comes with problems too leading to Hot Spot issuea better way to split up data might be to use hashing that guarantees uniformitya reverse proxy or load balance could be used to configure this logic of determining which shard to use "},{"title":"Hot Spot​","type":1,"pageTitle":"Replication and Sharding","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/#hot-spot","content":"when distributing a workload across a set of server, that workload might be spread unevenlythis can happen if the sharding key or hashing function are suboptimal or if the workload is naturally skewed some servers will receive a lot more traffic than others, thus creating a hot spot "},{"title":"Sharding example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/shardingExample/","content":"","keywords":""},{"title":"How to use​","type":1,"pageTitle":"Sharding example","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/shardingExample/#how-to-use","content":"Install all dependencies npm i open 4 terminals "},{"title":"Create and run Shard 0 database​","type":1,"pageTitle":"Sharding example","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/shardingExample/#create-and-run-shard-0-database","content":"DATA_DIR=aedb_data_0 PORT=3000 node aedb.js "},{"title":"Create and run Shard 1 database​","type":1,"pageTitle":"Sharding example","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/shardingExample/#create-and-run-shard-1-database","content":"DATA_DIR=aedb_data_1 PORT=3001 node aedb.js "},{"title":"Run reverse proxy​","type":1,"pageTitle":"Sharding example","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/shardingExample/#run-reverse-proxy","content":"node aedb_proxy.js "},{"title":"add data to database​","type":1,"pageTitle":"Sharding example","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/shardingExample/#add-data-to-database","content":"curl --header 'Content-Type: application/json' --data '{&quot;data&quot;: &quot;This is some data.&quot;}' localhost:8000/a - ```a``` is the key parameter - due to the hashing function logic, data will be stored in shard 1  curl --header 'Content-Type: application/json' --data '{&quot;data&quot;: &quot;This is some data.&quot;}' localhost:8000/b - due to the hashing function logic, data will be stored in shard 0  "},{"title":"Retreive data from database​","type":1,"pageTitle":"Sharding example","url":"docs/interviewPrep/system_design/15ReplicationAndSharding/shardingExample/#retreive-data-from-database","content":"retreive from shard 0 curl -w &quot;\\n&quot; localhost:8000/a retreive from shard 1 curl -w &quot;\\n&quot; localhost:8000/b "},{"title":"Leader Election","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/16LeaderElection/","content":"","keywords":""},{"title":"When to use example​","type":1,"pageTitle":"Leader Election","url":"docs/interviewPrep/system_design/16LeaderElection/#when-to-use-example","content":"when you need to connect a third party service to a database you would need a service to connect them problem would arise if this single machine or service failssolution would be to introduce redundancy, adding multiple servers a new problem would arise where we do not want to replicate sensitive requests like payments across multiple servers, such requests should only be done oncesolution is to use Leader Election instead of having all servers to do the same thing, via leader election, the servers will elect the leader and only the leader would perform the sensitive request if anything happens to the leader, a new leader will be elected from the rest of the servers and will take overthe act of all servers to provide consensus to allow a server to become the leader is difficult to implement, which is something you do not do by yourselfthe consensus algorithm is used and applied for this case "},{"title":"Terms Used​","type":1,"pageTitle":"Leader Election","url":"docs/interviewPrep/system_design/16LeaderElection/#terms-used","content":""},{"title":"Consensus Algorithm​","type":1,"pageTitle":"Leader Election","url":"docs/interviewPrep/system_design/16LeaderElection/#consensus-algorithm","content":"a type of complex algorithms used to have multiple entities agree on a single data value like who the leader is amongst a group of machines2 popular consensus algorithms are Paxos and Raft Paxos &amp; Raft​ when implemented correctly, allow for the synchronization of certain operations even in a distributed setting Can also use another 3rd tools that implements Paxos &amp; Raft​ Etcd or ZooKeeper these tools aren't meant to be used for leader election but allows you to implement your own leader election a in very easy way Etcd is a strongly consistent and highly available key-value store that's often used to implement leader election in a system implements Raft consensus algorithm ZooKeeper is a strongly consistent, highly available key-value store, often used to store important configuration or to perform leader election How to use Etcd to implement your own simple leader election​ have multiple servers communicate with Etcd with the key-value storeat any given point of time, you would have 1 special key-value pair in the Etcd key-value store that key-value pair would represent who the leader is the key is leader or some special key that represents the leadervalue is the name of the server or IP address of the server because Etcd guarantees high availability and strong consistency you know that the value of the leader in the key-value pair at any given point in time is correct for any machine that is reading from it "},{"title":"Etcd leader election example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/16LeaderElection/etcdExample/","content":"","keywords":""},{"title":"How to run​","type":1,"pageTitle":"Etcd leader election example","url":"docs/interviewPrep/system_design/16LeaderElection/etcdExample/#how-to-run","content":"install etcd brew install etcd start etcd service brew services start etcd install all dependencies pipenv install open 4 terminals and enter into virtual environment for all of them pipenv shell run 1 server in 4 terminals python leader_election.py server1python leader_election.py server2python leader_election.py server3python leader_election.py server4 server1 will be the leader since it is run firstshould any of the follower servers were to crash, nothing will changeshould the leader server crash, a new leader will be selected among the follower servers "},{"title":"Peer-To-Peer Networks","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/17Peer-To-PeerNetworks/","content":"","keywords":""},{"title":"Use cases​","type":1,"pageTitle":"Peer-To-Peer Networks","url":"docs/interviewPrep/system_design/17Peer-To-PeerNetworks/#use-cases","content":"if designing a system where it is able to deploy or transfer large files to thousands of machines at once if we are designing a system for a big tech firm with their own powerful data center we can assume that our system has a total network throughput of 40 gigabits per second which comes down to 5 gigabytes per second since there are 8 bits per byte assuming we have 1 machine, we wanna design our system such that we can deploy or transfer large files (gigabyte files) from 1 machine to 1,000 machines repeatedly a use case is where you get video footage from security cameras multiple times per day, and you wanna send these video files to a 1,000 machines throughout the dayanother use case is where if you are deploying very large machine learning models that you wanna train on the 1,000 machines and you are doing that multiple times a day 1,000 machines will take 1,000 seconds which is 17 minutes and is quite long for this kind of operation especially if we are doing this repeatedly throughout the day thus we can see that we have a bottleneck in our system To improve the system, instead of having only 1 machine serving the 5 GB files, we can have multiple machines for example 10 now when we request for the 5 GB files, we are requesting in a distributed manner from those 10 machinesstill have an issue, transferring 5 GB in 17 minutes / 10 is still more than a minute and is not amazing, depending on our use case it might be quite badalso we would need to replicated all the files to all 10 machines which is not optimal another possible solution could be to sort the files and have them split up amongst the 10 machines we then don't need to replicate all the files across the 10 machineshowever, it goes back to the initial problem where all machinese will request from the same 1 machine for that specific file thus creating a bottleneck again The best solution for this case would be to implement the Peer-To-Peer network we will have 1 machine trying to send the 5 GB file to 1,000 machines the solution would be instead of sending the 5 GB file to each and every 1 of the 1,000 machines, we split up this 5 GB file into very small chunks (e.g.: 1,000 5 MB files) and then send each chunk to each of our peers (in this case, 1,000 5 MB file transfer will take 1 second, transfer of 1 5 MB file will take 0.001 second) then we let our peers communicate with 1 another to grab the missing chunks (999 5 MB files) that they all need to create the final file (which will take 1/1000 * 999 = 0.999 seconds)let the peers build up their own total fileall of the peers could simultaneously talk to each otherpeers are able to send their received chunks to other peers concurrently while the main machine that is sending the 1,000 5 MB files however, in order for this to work, our peers need to know which peers to talk to next this requires peer discovery and peer selection methods "},{"title":"how to perform peer discovery and peer selection​","type":1,"pageTitle":"Peer-To-Peer Networks","url":"docs/interviewPrep/system_design/17Peer-To-PeerNetworks/#how-to-perform-peer-discovery-and-peer-selection","content":"mainly have 2 primary ways of doing this first method: using a tracker​ to have some sort of central database which orchestrates the entire peer-to-peer network or knows at all times or can figure out at any time which peer should talk to next this means that while the peers are communicating with each other, it will also communicate with the central machine or database (also know as a tracker) that will tell them which peer to talk to next second method: using gossip protocol or epidemic protocol​ instead of having a central database or a tracker to tell them what to do, they just talk between themselves and figure it out themselves e.g.: you have a chunk that i need, and you don't seem to have that peer's chunk so go get it every peer carries information about what peer carries what data or what chunk of the file peers essentially carry mappings that map certain peers to certain chunks each peer would have their own hash table where they map a peer IP address to the data chunk this is referred to as a distributed hash table (DHT) technology example​ Kraken "},{"title":"Terms Used​","type":1,"pageTitle":"Peer-To-Peer Networks","url":"docs/interviewPrep/system_design/17Peer-To-PeerNetworks/#terms-used","content":""},{"title":"Gossip Protocol​","type":1,"pageTitle":"Peer-To-Peer Networks","url":"docs/interviewPrep/system_design/17Peer-To-PeerNetworks/#gossip-protocol","content":"when a set of machines talk to each other in a uncoordinated manner in a cluster to spread information through a system without requiring a central source of data "},{"title":"Polling And Streaming","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/18PollingAndStreaming/","content":"","keywords":""},{"title":"When to use​","type":1,"pageTitle":"Polling And Streaming","url":"docs/interviewPrep/system_design/18PollingAndStreaming/#when-to-use","content":"when we are designing a system, if clients wants a piece of data that gets updated or that changes very regularly the clients are gonna have to be able to monitor the data changes (e.g.: temperature outside, or messages from a chat) in real time as the data will change a lot the servers are gonna have this changing data, and clients are gonna need to see all these changes in such cases, Polling and Streaming comes into play to help reflect these regular updates of data "},{"title":"Terms Used​","type":1,"pageTitle":"Polling And Streaming","url":"docs/interviewPrep/system_design/18PollingAndStreaming/#terms-used","content":""},{"title":"Polling​","type":1,"pageTitle":"Polling And Streaming","url":"docs/interviewPrep/system_design/18PollingAndStreaming/#polling","content":"the act of fetching a resource or piece of data regularly at an interval to make sure your data is not too stale e.g.: fetch data at every x number of seconds However, it has limitations for apps like chat apps, you would want to send and receive messages instantlyreducing the interval seconds can mimic the instantenous experience but comes with a trade off of having a lot of load on the server "},{"title":"Streaming​","type":1,"pageTitle":"Polling And Streaming","url":"docs/interviewPrep/system_design/18PollingAndStreaming/#streaming","content":"in networking, it usually refers to the act of continuously getting a feed of information from a server by keeping an open connection between the 2 machines or processes typically referred to as a socket, which is a file that lives on your computer, that your computer can write to and read from, to communicate with another computer in a long lived connection, without having to repeatedly send requests in Streaming, client is actively listening for data, and not requesting for data from servers it is the server's job to send the data to the client whenever the server gets an updatein other words, the server will proactively push data to clients one thing to take note is that, Streaming is not necessary better than polling Polling would be better if you need data updated not too frequently e.g.: a dashboard that monitors stock prices and gives you a snapshot of stock prices at any given point in time, but not to allow users to do live trading "},{"title":"Polling and Streaming Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/18PollingAndStreaming/example/","content":"","keywords":""},{"title":"How to use​","type":1,"pageTitle":"Polling and Streaming Example","url":"docs/interviewPrep/system_design/18PollingAndStreaming/example/#how-to-use","content":"Install all dependencies npm i open 4 terminalsrun server node server.js run client file with stream mode MODE=stream NAME=Clement node client.js - when you chat here, poll mode users will receive your messages at every interval run client file with poll mode MODE=poll NAME=Antoine node client.js - when you chat here, stream mode users will receive your messages instantly test streaming and polling with a script (for i in seq 1 10000; do sleep 1; echo $i; done) | NAME=Bot node client.js "},{"title":"Configuration","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/19Configuration/","content":"","keywords":""},{"title":"Terms Used​","type":1,"pageTitle":"Configuration","url":"docs/interviewPrep/system_design/19Configuration/#terms-used","content":""},{"title":"JSON (JavaScript Object Notation)​","type":1,"pageTitle":"Configuration","url":"docs/interviewPrep/system_design/19Configuration/#json-javascript-object-notation","content":"a file format heavily used in API's and configuration { &quot;version&quot;: 1.0, &quot;name&quot;: &quot;configuration&quot; }  "},{"title":"YAML​","type":1,"pageTitle":"Configuration","url":"docs/interviewPrep/system_design/19Configuration/#yaml","content":"a file format mostly used in configuration version: 1.0 name: configuration  "},{"title":"Static Configuration Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/19Configuration/staticExample/","content":"","keywords":""},{"title":"How to use​","type":1,"pageTitle":"Static Configuration Example","url":"docs/interviewPrep/system_design/19Configuration/staticExample/#how-to-use","content":"install all dependencies npm i open 2 terminalsrun server node server.js run client by curling curl localhost:3000/static/new_feature.html - you will get a ```unauthorized``` message modify the feature to true in the static_config file { &quot;newFeatureLaunched&quot;: true }  then relaunch the server and curl again hello world html contents will be returned "},{"title":"Rate Limiting","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/20RateLimiting/","content":"","keywords":""},{"title":"Issues when storing accesses in memory at the server​","type":1,"pageTitle":"Rate Limiting","url":"docs/interviewPrep/system_design/20RateLimiting/#issues-when-storing-accesses-in-memory-at-the-server","content":"when we have a large scale distributed system with a lot of servers, storing accesses in memory at the server will fall apart because unless we have very rigorous load balancing that specifically rerouting requests of a single user to the same server every time (to make sure that we had that user's access's in memory in the server that the user's requests were being routed to) this rate limiting would fall apart if the client is rerouted to a different server that does not have the accesses stored, the server would not know to return an error to the client "},{"title":"Therefore for large scale distribute system, handle rate limiting in separated service or database​","type":1,"pageTitle":"Rate Limiting","url":"docs/interviewPrep/system_design/20RateLimiting/#therefore-for-large-scale-distribute-system-handle-rate-limiting-in-separated-service-or-database","content":"can use Redis (an in-memory key value database) for this casewhen using this, server will first check the database regarding the rate limiting if the database determines that user made requests over the limit, it will instruct the server to return an error "},{"title":"Terms Used​","type":1,"pageTitle":"Rate Limiting","url":"docs/interviewPrep/system_design/20RateLimiting/#terms-used","content":""},{"title":"DoS Attack (Denial-of-Service Attack)​","type":1,"pageTitle":"Rate Limiting","url":"docs/interviewPrep/system_design/20RateLimiting/#dos-attack-denial-of-service-attack","content":"is an attack in which a malicious user tries to bring down or damage a system in order to render it unavailable to usersmost of the time it consists of flooding the server with traffic, causing the server to not have enough throughput to handle the situationsome DoS attacks are easily preventable with rate limiting while others can be trickier to defend against "},{"title":"DDoS Attack (Distributed Denial-of-Service Attack)​","type":1,"pageTitle":"Rate Limiting","url":"docs/interviewPrep/system_design/20RateLimiting/#ddos-attack-distributed-denial-of-service-attack","content":"is a DoS attack in which the traffic flooding the target system comes from many different sources (like thousands of machines), making it much harder to defend against "},{"title":"Rate Limiting Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/20RateLimiting/example/","content":"","keywords":""},{"title":"How to use​","type":1,"pageTitle":"Rate Limiting Example","url":"docs/interviewPrep/system_design/20RateLimiting/example/#how-to-use","content":"install all dependencies npm i open 3 terminalsrun server node server.js run 1st curl request curl -H 'user: clement' http://localhost:3000/index.html - if to many requests are made within 5 seconds, an error will appear run 2nd curl request curl -H 'user: antoine' http://localhost:3000/index.html - even if other users are getting error of too many request, you will still be able to make your request  "},{"title":"Logging and Monitoring","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/21LoggingAndMonitoring/","content":"","keywords":""},{"title":"Logging​","type":1,"pageTitle":"Logging and Monitoring","url":"docs/interviewPrep/system_design/21LoggingAndMonitoring/#logging","content":"the act of collecting and storing logs or useful information about events in your systemtypically your programs will output log messages to its STDOUT or STDERR pipes which will automatically get aggregated into a centralized logging solution "},{"title":"Storing logs​","type":1,"pageTitle":"Logging and Monitoring","url":"docs/interviewPrep/system_design/21LoggingAndMonitoring/#storing-logs","content":"requires some sort of system or service to collect all the logs and store them in a database for future reference tools used to store logs Google Cloud's operations suite formerly known as Stackdriver "},{"title":"Formating logs​","type":1,"pageTitle":"Logging and Monitoring","url":"docs/interviewPrep/system_design/21LoggingAndMonitoring/#formating-logs","content":"depending on the language that you are using, might need a special library to format these logs 2 popular formats for logs syslog-ngJSON "},{"title":"When to use example​","type":1,"pageTitle":"Logging and Monitoring","url":"docs/interviewPrep/system_design/21LoggingAndMonitoring/#when-to-use-example","content":"in the event a customer complains that they tried to purchase a product, receive a success product purchased message, credit card got charged, but didn't get access to the product this kind of issue is hard to understand and to reproduce, therefore requires logs to get more information (such as errors, operations, requests) to allow us to debug "},{"title":"Monitoring​","type":1,"pageTitle":"Logging and Monitoring","url":"docs/interviewPrep/system_design/21LoggingAndMonitoring/#monitoring","content":"the process of having visibility into a system's key metricsit is typically implemented by collecting important events in a system and aggregating them in human-readable chartsprovides you with insights that could be useful if you are designing, building and maintaining a systemin summary when it comes down to system design, monitoring comes down to making sure that in your overall system you've got systems in play to monitor important metrics about your overall system "},{"title":"When to use example​","type":1,"pageTitle":"Logging and Monitoring","url":"docs/interviewPrep/system_design/21LoggingAndMonitoring/#when-to-use-example-1","content":"as the system grows, you would want to have visibility into the operations on the systeme.g.: you might want to see are users getting a lot of errors, latencies? how is the payment service and authentication services working?how many sales you are getting per week, per day, per hour?how many people are logging into your platform everyday?what authentication service are they using? "},{"title":"Ways to gather metrics​","type":1,"pageTitle":"Logging and Monitoring","url":"docs/interviewPrep/system_design/21LoggingAndMonitoring/#ways-to-gather-metrics","content":"build some sort of service or use a pre-built tool to scrape your logs (good logs must be implemented) and create metrics out of them however, you are limited to your logs, thus, logs must contain all the information you requireanother limitation is that if you decide to change your logs, you risk breaking the metrics or monitoring system another popular way of gathering metrics is to use a time-series database (a database that is specialized for data related to time or data that will be measured over time) e.g.: InfluxDB, Graphite, Prometheushave servers to periodically send metrics to these databases or a central database you then can query that databasecan also use tools that make pretty graphs out of the values stored in the database e.g.: Grafana "},{"title":"Alerting​","type":1,"pageTitle":"Logging and Monitoring","url":"docs/interviewPrep/system_design/21LoggingAndMonitoring/#alerting","content":"the process through which system administrators get notified when critical system issues occurcan be set up by defining specific thresholds on monitoring charts when the thresholds limits has been past, alerts are sent to a communication channel like Slack "},{"title":"Publish / Subscribe Pattern","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/22PublishSubscribePattern/","content":"","keywords":""},{"title":"When to use example​","type":1,"pageTitle":"Publish / Subscribe Pattern","url":"docs/interviewPrep/system_design/22PublishSubscribePattern/#when-to-use-example","content":"in the chat application, we can use streaming paradigm as a solution however, if we need to expand the system, we would get some issues the moment the system becomes a distributed system, then we would need to think about how to handle network partitions what do we do if our clients lose their connection with the servers, or servers die, what will happen to the messages, does it disappear, will clients be able to retrieve the messages if they lost connection? in a stock broker example, if we have clients who were streaming or listening to servers for data about stock prices they were relying on those stock prices to execute important trades what would happen if there were network partition? therefore, the moment we start to deal with distributed systems, we have to deal with persistent storage for a lot of parts of our system however, in this typical case an asynchronous operation made by the client would go to the server and then will take some time for it to be completed before going back to the client this might not be something you would want to store in the typical database solution if response speed is important a naive solution would be to store the data at the server level, where the clients are issuing the asynchronous operations to however, you probably don't want to have your storage solution or custom built storage solution at the server level the business logic which is what the server is doing should likely be separated out from the storage solutionit would be better to separate the duties in the system this is where the pub/sub system comes into play "},{"title":"Pub/Sub tools​","type":1,"pageTitle":"Publish / Subscribe Pattern","url":"docs/interviewPrep/system_design/22PublishSubscribePattern/#pubsub-tools","content":""},{"title":"Apache Kafka​","type":1,"pageTitle":"Publish / Subscribe Pattern","url":"docs/interviewPrep/system_design/22PublishSubscribePattern/#apache-kafka","content":"a distributed messaging system created by LinkedInvery useful when using the streaming paradigm as opposed to polling "},{"title":"Google Cloud Pub/Sub​","type":1,"pageTitle":"Publish / Subscribe Pattern","url":"docs/interviewPrep/system_design/22PublishSubscribePattern/#google-cloud-pubsub","content":"a highly-scalable Pub/Sub messaging service created by GoogleGurantees at-least-once delivery of messages and supports &quot;rewinding&quot; in order to reprocess messagesthings like sharding at the topic level, end-to-end encryption are all taken care of "},{"title":"Terms Used​","type":1,"pageTitle":"Publish / Subscribe Pattern","url":"docs/interviewPrep/system_design/22PublishSubscribePattern/#terms-used","content":""},{"title":"Idempotent Operation​","type":1,"pageTitle":"Publish / Subscribe Pattern","url":"docs/interviewPrep/system_design/22PublishSubscribePattern/#idempotent-operation","content":"an operation that has the same ultimate outcome regardless of how many times it's performedit is idempotent if an operation can be performed multiple times without changing its overall effectOperations performed through a Pub/Sub messaging system typically have to be idempotent since Pub/Sub systems tend to allow the same messages to be consumed multiple times e.g.: increasing an integer value in a database is not an idempotent operation since repeating this operation will not have the same effect as if it had been performed only onceconversly, setting a value to &quot;COMPLETE&quot; is an idempotent operation, since repeating this operation will always yield the same result the value will be &quot;COMPLETE&quot; "},{"title":"Publish / Subscribe Example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/22PublishSubscribePattern/example/","content":"","keywords":""},{"title":"How to use​","type":1,"pageTitle":"Publish / Subscribe Example","url":"docs/interviewPrep/system_design/22PublishSubscribePattern/example/#how-to-use","content":"install all dependencies npm i open 7 terminals1st terminal run server node server.js 2nd terminal run 1st subscriber TOPIC_ID=stock_prices node subscriber.js 3rd terminal run 2nd subscriber with the same topic as the 1st subscriber TOPIC_ID=stock_prices node subscriber.js 4th terminal run 3rd subscriber with different topic TOPIC_ID=news_alerts node subscriber.js 5th terminal run 1st publisher (for i in seq 1 10000; do sleep 1; echo New Stock Price; done) | NAME=STOCK_BROKER TOPIC_ID=stock_prices node publisher.js - 1st and 2nd subscriber will receive the notifications 6th terminal run 2nd publisher (for i in seq 1 10000; do sleep 1; echo Breaking News; done) | NAME=NEWS_STATION TOPIC_ID=news_alerts node publisher.js - only the 3rd subscriber will receive the notifications 7th terminal run 3rd publisher (for i in seq 1 10000; do sleep 1; echo Youtube Notification; done) | NAME=YOUTUBE TOPIC_ID=youtube_notifications node publisher.js - none of the subscriber will receive any notifications  "},{"title":"MapReduce","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/23MapReduce/","content":"","keywords":""},{"title":"Why MapReduce was used​","type":1,"pageTitle":"MapReduce","url":"docs/interviewPrep/system_design/23MapReduce/#why-mapreduce-was-used","content":"when dealing with very large data sets, there is only so much you can do with vertical scaling eventually, you have to horizontally scale the system, by adding machines to the system as a result, engineers have to process these large data sets that were stored across hundreds or thousands of machines what is normally simple, becomes very difficult when processing large data sets you have to handle failures like network partitions or machine failures "},{"title":"Important points about MapReduce model​","type":1,"pageTitle":"MapReduce","url":"docs/interviewPrep/system_design/23MapReduce/#important-points-about-mapreduce-model","content":"1st is when dealing with a MapReduce model, we assume that we have a distributed file system this means that we have some large data set that is split up into chunks these chunks are likely replicated and spread out across multiple machines in the order of hundreds or thousands of machines then the distributed file system has some sort of central control plane that is aware of everything going on in the MapReduce job or process this means that the central control plane knows where all of the chunks of data reside it knows how to communicate with the various machines that store all of these datait knows how to communicate with the machines that are gonna be performing the Map opertions (also known as worker machines)similarily for the Reduce step, it knows how to communicate with the various reduce workersit knows where your output is gonna live 2nd is that often times because we are dealing with very large datasets, we don't actually want to move the large data set we want to leave the data set wherever it resides, letting all the chunks of data live on their respective machines what we do is we have the map functions move to the data and operate on the data locally 3rd is that the intermediate key value pairs structure of the data is very important important because, when you reduce data values especially data values that come from multiple chunks of the same data set, you are likely looking for some sort of commonality in these various pieces of data thus some keys would be similar, which can then aggregated together and be reduced into 1 single meaningful value based on that key 4th is that 1 of the main things that this model tries to accomplish is to handle faults and failures e.g.: if there is a network partition or a machine failure to handle these a MapReduce job (the central control plane) would re-perform a map or reduce operation where a failure occurred this will give us new key value pairs, move to the reduce step and we get our final outputthis is assuming that the map and reduce function are idempotent this means that regardless of how many times the map and reduce functions were conducted, the outcome must be the same 5th is that as the engineer or system administrator who is dealing with a MapReduce job the main thing that you care about is what Map and Reduce function you are gonna specify, and what the various inputs and outputs of those functions is gonna be "},{"title":"MapReduce example​","type":1,"pageTitle":"MapReduce","url":"docs/interviewPrep/system_design/23MapReduce/#mapreduce-example","content":"count the total number of occurances of every letter in some large data set that spread out across multiple machines "},{"title":"When to use​","type":1,"pageTitle":"MapReduce","url":"docs/interviewPrep/system_design/23MapReduce/#when-to-use","content":"if you have a bunch of youtube videos stored in some data set and you have the metadata about those youtube videos you want to get maybe the total number of views or likes per user or per youtube channelcan use MapReduce to get that data from the huge data set of youtube videos if you had some huge data set of logs in the system from various services e.g.: logs from payment service, authentication serviceyou want to count the total number of logs per serviceor you want to count the total number of logs in some interval of timecan use MapReducer for that "},{"title":"Terms Used​","type":1,"pageTitle":"MapReduce","url":"docs/interviewPrep/system_design/23MapReduce/#terms-used","content":""},{"title":"File System​","type":1,"pageTitle":"MapReduce","url":"docs/interviewPrep/system_design/23MapReduce/#file-system","content":"an abstraction over a storage medium that defines how to manage datawhile there exist many different types of file systems, most follow a hierarchical structure that consists of directories and files, like the Unix file system's structure "},{"title":"Distributed File System (DFS)​","type":1,"pageTitle":"MapReduce","url":"docs/interviewPrep/system_design/23MapReduce/#distributed-file-system-dfs","content":"it is an abstraction over a (usually large) cluster of machines that allows them to act like 1 large file system the 2 most popular implementations of a DFS are Google File System now known as Colossus and Hadoop Distributed File System typically DFSs take care of the classic availability and replication guarantees that can be tricky to obtain in a distributed system setting the overarching idea is that files are split into chunks of a certain size (4MB or 64MB) those chunks are sharded across a large cluster of machines a central control plane is in charge of deciding where each chunk resides, routing reads to the right nodes, and handling communication between machines Different DFS implementations have slightly different APIs and semantics, but they achieve the same common goal extremely large scale persistent storage "},{"title":"Hadoop​","type":1,"pageTitle":"MapReduce","url":"docs/interviewPrep/system_design/23MapReduce/#hadoop","content":"a popular open source framework that supports MapReduce jobs and many other kinds of data-processing pipelinesits central component is Hadoop Distributed File System (HDFS), on top of which other technologies have been developed "},{"title":"MapReducer example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/23MapReduce/example/","content":"","keywords":""},{"title":"How to use​","type":1,"pageTitle":"MapReducer example","url":"docs/interviewPrep/system_design/23MapReduce/example/#how-to-use","content":"run shell file with bash bash run.sh allow chmod permission chmod a+x run.sh run shell file without bash ./run.sh "},{"title":"How it works​","type":1,"pageTitle":"MapReducer example","url":"docs/interviewPrep/system_design/23MapReduce/example/#how-it-works","content":"the shell script is meant to replicate what the central control plane of the distributed file system would do it knows where the data lives, it determines what the Map and Reduce functions are gonna be, where the programs are gonna live latencies are checked if it is over 10 seconds and will be written as 1 each per line in the over_10_seconds.txt file in their respective host/map_results folderlatencies are also checked if it is under 10 seconds and will be written as 1 each per line in the under_10_seconds.txt file in their respective host/map_results foldertotal number of latencies that are over 10 seconds will be accumulated and be written in the map_results foldertotal number of latencies that are under 10 seconds will be accumulated and be written in the mpa_results foldertotal count of the number of latencies over 10 seconds will be counted and be written in the reduce_results foldertotal count of the number of latencies under 10 seconds will be counted and be written in the reduce_results folder "},{"title":"Security and HTTPS","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/24SecurityAndHttps/","content":"","keywords":""},{"title":"Man-In-The-Middle Attack (MITM)​","type":1,"pageTitle":"Security and HTTPS","url":"docs/interviewPrep/system_design/24SecurityAndHttps/#man-in-the-middle-attack-mitm","content":"an attack in which the attacker intercepts a line of communication that is thought to be private by its 2 communicating partiesif a malicious actor intercepted and mutated an IP packet on its way from a client to a server, that would be a man-in-the-middle attackMITM attacks are the primary threat that encryption and HTTPS aim to defend against "},{"title":"Symmetric Encryption​","type":1,"pageTitle":"Security and HTTPS","url":"docs/interviewPrep/system_design/24SecurityAndHttps/#symmetric-encryption","content":"a type of encryption that relies on only a single key to both encrypt and decrypt datathe key must be known to all parties involved in communication and must be shared between parties at 1 point or anotherSymmetric-key algorithms tend to be faster than their asymmetric counterpartsthe most widely used symmetric-key algorithms are part of the Advanced Encryption Standard (AES)Symmetric encryption by itself would not solve the HTTP vulnerability this is because sharing of common key between the client and server requires it to be shared over a security communications channel otherwise it will still be vulnerable to MITM attack "},{"title":"Asymmetric Encryption​","type":1,"pageTitle":"Security and HTTPS","url":"docs/interviewPrep/system_design/24SecurityAndHttps/#asymmetric-encryption","content":"also known as public-key encryption, it relies on 2 keys a public key and private key to encrypt and decrypt data the keys are generated using cryptographic algorithms and are mathematically connected such that data encrypted with the public key can only be decrypted with the private keywhile the private key must be kept secure to maintain the fidelity of this encryption paradigm, the public key can be openly sharedasymmetric-key algorithms tend to be slower than their symmetric counterparts "},{"title":"Advanced Encryption Standard (AES)​","type":1,"pageTitle":"Security and HTTPS","url":"docs/interviewPrep/system_design/24SecurityAndHttps/#advanced-encryption-standard-aes","content":"is a widely used encryption standard that has 3 symmetric-key algorithms AES-128, AES-192, AES-256 AES is considered to be the &quot;gold standard&quot; in encryption and is even used by the US National Security Agency to encrypt top secret information "},{"title":"HyperText Transfer Protocol Secure (HTTPS)​","type":1,"pageTitle":"Security and HTTPS","url":"docs/interviewPrep/system_design/24SecurityAndHttps/#hypertext-transfer-protocol-secure-https","content":"it is an extension of HTTP that's used for secure communication onlineit requires servers to have trusted certificates (usually SSL certificates) uses the Transport Layer Security (TLS), a security protocol built on top of Transmission Control Protocol (TCP) to encrypt data communicated between a client and a server "},{"title":"Transport Layer Security (TLS)​","type":1,"pageTitle":"Security and HTTPS","url":"docs/interviewPrep/system_design/24SecurityAndHttps/#transport-layer-security-tls","content":"is a security protocol over which HTTP runs in order to achieve secure communication onlineHTTP over TLS is also known as HTTPS "},{"title":"Secure Sockets Layer (SSL) Certificate​","type":1,"pageTitle":"Security and HTTPS","url":"docs/interviewPrep/system_design/24SecurityAndHttps/#secure-sockets-layer-ssl-certificate","content":"is a digital certificate granted to a server by a certificate authoritycontains the server's public key, to be used as part of the TLS handshake process in HTTPS connectionan SSL certificate effectively confirms that a public key belongs to the server claiming it belongs to themSSL certificates are a crucial defense against mam-in-the-middle attacks "},{"title":"Certificate Authority​","type":1,"pageTitle":"Security and HTTPS","url":"docs/interviewPrep/system_design/24SecurityAndHttps/#certificate-authority","content":"a trusted entity that signs digital certificates namely SSL certificates that are relied on in HTTPS connections "},{"title":"TLS Handshake​","type":1,"pageTitle":"Security and HTTPS","url":"docs/interviewPrep/system_design/24SecurityAndHttps/#tls-handshake","content":"the process through which a client and a server communicating over HTTPS exchange encryption related information and establish a secure communicationthe typical steps in a TLS handshake are roughly as follows the client sends a client hello &quot;a string of random bytes&quot; to the serverthe server responds with a server hello &quot;another string of random bytes&quot; as well as its SSL certificate, which contains its public keythe client verifies that the certificate was issued by a certificate authority and sends a premaster secret yet another string of random bytes, this time encrypted with the server's public key to the server the client and the server use the client hello, the server hello, and the premaster secret to then generate same symmetric-encryption session keys - to be used to encrypt and decrypt all data communicated during the remainder of the connection "},{"title":"Symmetric Encryption example","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/24SecurityAndHttps/symmetricEncryptionExample/","content":"","keywords":""},{"title":"How to use​","type":1,"pageTitle":"Symmetric Encryption example","url":"docs/interviewPrep/system_design/24SecurityAndHttps/symmetricEncryptionExample/#how-to-use","content":"install all dependencies npm i run file node encryption.js "},{"title":"Application Programming Interface (API) Design","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/25ApiDesign/","content":"","keywords":""},{"title":"types of clarifying questions to ask during an API design interview​","type":1,"pageTitle":"Application Programming Interface (API) Design","url":"docs/interviewPrep/system_design/25ApiDesign/#types-of-clarifying-questions-to-ask-during-an-api-design-interview","content":"what part of the app are we designing this API forare we just designing the API that supports the functionality on a certain page of the appis it for the trending tabis it for the settings tabwho's gonna be consuming our API "},{"title":"during the API design interview​","type":1,"pageTitle":"Application Programming Interface (API) Design","url":"docs/interviewPrep/system_design/25ApiDesign/#during-the-api-design-interview","content":"write an outline of sorts of the APIwrite out the various entities or resources that this API is gonna rely on write out what these entities or resources look likewhat properties or attributes they have write out the outline various API endpoints that the API needs to havewrite out the various parameters that the API endpoints take, the various responses that the API end points return "},{"title":"Access-Control List (ACL)​","type":1,"pageTitle":"Application Programming Interface (API) Design","url":"docs/interviewPrep/system_design/25ApiDesign/#access-control-list-acl","content":"used to refer to a permissioning model which users in a system can perform which operationsAPIs often come with ACLs defining which users can delete, edit or view certain entities "},{"title":"Pagination​","type":1,"pageTitle":"Application Programming Interface (API) Design","url":"docs/interviewPrep/system_design/25ApiDesign/#pagination","content":"when a network request potentially warrants a really large response the relevant API might be designed to return only a single page of that response (a limited portion of the response) accompanied by an identifier or token for the client to request the next page if desired pagination is often used when designing list endpoints e.g.: an endpoint to list videos on youtube trending page could return a huge list of videos this wouldn't perform well on mobile devices due to the lower network speeds, and is also not optimal since most users will only scroll through the first 10 or 20 videos therefore, API could be designed to respond with only the first few videos of that list this is where API response is paginated "},{"title":"Create, Read, Update, Delete (CRUD) Operations​","type":1,"pageTitle":"Application Programming Interface (API) Design","url":"docs/interviewPrep/system_design/25ApiDesign/#create-read-update-delete-crud-operations","content":"these 4 operations often serve as the bedrock of a functioning systemtherefore it is the core of many APIs "},{"title":"API design outline during an interview","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/25ApiDesign/example/","content":"API design outline during an interview ask if interviewer is fine with your writing stylecan choose to use the bullet points text style or use the swagger formatthe swagger format examples are incomplete and is just for illustration purposes","keywords":""},{"title":"REpresentational State Transfer (REST)","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/25ApiDesign/rest","content":"","keywords":""},{"title":"6 constraints of REST​","type":1,"pageTitle":"REpresentational State Transfer (REST)","url":"docs/interviewPrep/system_design/25ApiDesign/rest#6-constraints-of-rest","content":"if a web-based API meets these 6 constraints, it can be considered a RESTful API Client-server architecture the client manages user interface concerns while the server manages data storage concerns this allows a highly portable system where 1 REST server can serve multiple clients have a complete separation between the content and its presentation and interaction Statelessness no client context or information (state) can be stored on the server between requeststhe client is responsible for keeping track of its own session stateall requests sent from a client must be self-contained and completeif the client's session state is relevant, it must be sent along with a requestif the server needs to store the state, it must pass it on to a database or similar service for a specific time Cacheability all REST responses must be clearly marked as cacheable or not cacheable Layered system the client cannot know, and shouldn't care, whether it's connected directly to the server or to an intermediary like a CDN or mirror ensures scalability and helps with security Code on demand servers are allowed to transfer executable code like JavaScript and compiled components to clientsless commonly used of REST Uniform interface Resource identification in request the URI request must specify what resource it is looking for and what format the response should use Resource manipulation through representations once a client has a representation of a resource, it can modify or delate the resource Self-descriptive messages a uniform interface must issue self-descriptive messages for both sending and receiving REST dataeach representation must describe its own data format Hypermedia as the engine of application state a uniform interface must use hypermedia as the engine of application stateonce a client has access to a REST service, it should be able to discover all available resources and methods through the hyperlinks provided "},{"title":"CAP Theorem","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/cap_theorem","content":"CAP Theorem CAP theorem states that it is impossible for a distributed software system to simultaneously provide more than 2 out of 3 of the following guarantees (CAP) Consistency, Availability, and Partition tolerance When we design a distributed system, trading off among CAP is almost the first thing we want to considerCAP theorem says while designing a distributed system we can pick only 2 of the following three options: ### Consistency All nodes see the same data at the same time Consistency is achieved by updating several nodes before allowing further reads ### Availability Every request gets a response on success/failure Availability is achieved by replicating the data across different servers ### Partition tolerance The system continues to work despite message loss or partial failure A system that is partition-tolerant can sustain any amount of network failure that doesn’t result in a failure of the entire network Data is sufficiently replicated across combinations of nodes * and networks to keep the system up through intermittent outages We cannot build a general data store that is continually available, sequentially consistent, and tolerant to any partition failuresWe can only build a system that has any 2 of these three properties Because, to be consistent, all nodes should see the same set of updates in the same order But if the network suffers a partition updates in one partition might not make it to the other partitions before a client reads from the out-of-date partition after having read from the up-to-date one The only thing that can be done to cope with this possibility is to stop serving requests from the out-of-date partition but then the service is no longer 100% available","keywords":""},{"title":"Consistent Hashing","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/consistent_hashing","content":"","keywords":""},{"title":"What is Consistent Hashing?​","type":1,"pageTitle":"Consistent Hashing","url":"docs/interviewPrep/system_design/consistent_hashing#what-is-consistent-hashing","content":"Consistent hashing is a very useful strategy for distributed caching system and DHTsIt allows us to distribute data across a cluster in such a way that will minimize reorganization when nodes are added or removedHence, the caching system will be easier to scale up or scale down In Consistent Hashing, when the hash table is resized (e.g. a new cache host is added to the system)only ‘k/n’ keys need to be remapped where ‘k’ is the total number of keys and ‘n’ is the total number of servers Recall that in a caching system using the ‘mod’ as the hash function, all keys need to be remapped In Consistent Hashing, objects are mapped to the same host if possible When a host is removed from the system, the objects on that host are shared by other hostswhen a new host is added, it takes its share from a few hosts without touching other’s shares "},{"title":"How does it work?​","type":1,"pageTitle":"Consistent Hashing","url":"docs/interviewPrep/system_design/consistent_hashing#how-does-it-work","content":"As a typical hash function, consistent hashing maps a key to an integerSuppose the output of the hash function is in the range of [0, 256)Imagine that the integers in the range are placed on a ring such that the values are wrapped aroundHere’s how consistent hashing works: Given a list of cache servers, hash them to integers in the rangeTo map a key to a server Hash it to a single integer Move clockwise on the ring until finding the first cache it encounters * That cache is the one that contains the key. "},{"title":"Data Partitioning","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/data_partitioning","content":"","keywords":""},{"title":"Partitioning Methods​","type":1,"pageTitle":"Data Partitioning","url":"docs/interviewPrep/system_design/data_partitioning#partitioning-methods","content":"3 most popular schemes used by various large scale applications Horizontal partitioning put different rows into different tablesalso called as range based partitioning as we are storing different ranges of data in separate tables also called as Data Shardingkey problem if the value whose range is used for partitioning isn’t chosen carefully the partitioning scheme will lead to unbalanced servers Vertical Partitioning divide our data to store tables related to a specific feature in their own serverit is straightforward to implement and has a low impact on the applicationmain problem if our application experiences additional growth it may be necessary to further partition a feature specific DB across various servers Directory Based Partitioning A loosely coupled approach to work around issues mentioned in the above schemes is to create a lookup service which knows your current partitioning scheme and abstracts it away from the DB access code to find out where a particular data entity resides we query the directory server that holds the mapping between each tuple key to its DB server loosely coupled approach means can perform tasks like adding servers to the DB poolchanging our partitioning scheme without having an impact on the application "},{"title":"Partitioning Criteria​","type":1,"pageTitle":"Data Partitioning","url":"docs/interviewPrep/system_design/data_partitioning#partitioning-criteria","content":"Key or Hash-based partitioning apply a hash function to some key attributes of the entity we are storing; that yields the partition numberThis approach should ensure a uniform allocation of data among serversfundamental problem it effectively fixes the total number of DB servers adding new servers = changing the hash function this would require redistribution of data and downtime for the service A workaround for this problem is to use Consistent Hashing List partitioning each partition is assigned a list of values whenever we want to insert a new record, we will see which partition contains our key and then store it there Round-robin partitioning a simple strategy that ensures uniform data distribution With ‘n’ partitions, the ‘i’ tuple is assigned to partition (i mod n) d. Composite partitioning combine any of the above partitioning schemes to devise a new scheme e.g.: first applying a list partitioning scheme and then a hash based partitioning Consistent hashing could be considered a composite of hash and list partitioning where the hash reduces the key space to a size that can be listed "},{"title":"Common Problems of Data Partitioning​","type":1,"pageTitle":"Data Partitioning","url":"docs/interviewPrep/system_design/data_partitioning#common-problems-of-data-partitioning","content":"On a partitioned database, there are certain extra constraints on the different operations that can be performed constraints are due to operations across multiple tables rows in the same table will no longer run on the same serverConstraints and additional complexxities introduced by partitioning Joins and Denormalization Performing joins on a database which is running on one server is straightforward but will no longer be so once once a database is partitioned and spread across multiple machines because joins that span database partitions will not be feasible Such joins will not be performance efficient since data has to be compiled from multiple serverssolution: denormalize the database so that queries that previously required joins can be performed from a single tablehowever, service now has to deal with all the perils of denormalization such as data inconsistency Referential integrity trying to enforce data integrity constraints such as foreign keys in a partitioned database can be difficultMost of RDBMS do not support foreign keys constraints across databases on different database servers this means that apps that require referential integrity on partitioned databases have to enforce it in app code in such cases, applications have to run regular SQL jobs to clean up dangling references Rebalancing many reasons we have to change our partitioning scheme The data distribution is not uniformThere is a lot of load on a partition In such cases, either we have to create more DB partitions or have to rebalance existing partitions this means the partitioning scheme changed and all existing data moved to new locationsDoing this without incurring downtime is extremely difficult Using a scheme like directory based partitioning make rebalancing a palatable experience at the cost of increasing the complexity of the systemand creating a new single point of failure (i.e. the lookup service/database) "},{"title":"Database Scaling","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/database_scaling","content":"","keywords":""},{"title":"Key Information​","type":1,"pageTitle":"Database Scaling","url":"docs/interviewPrep/system_design/database_scaling#key-information","content":"most web apps are read heavy, around 95% + e.g.: twitter (tweets), facebook (posts), google (searches) "},{"title":"Basic Scaling Techniques​","type":1,"pageTitle":"Database Scaling","url":"docs/interviewPrep/system_design/database_scaling#basic-scaling-techniques","content":"used to improve the performance of the database "},{"title":"Indexes​","type":1,"pageTitle":"Database Scaling","url":"docs/interviewPrep/system_design/database_scaling#indexes","content":"create an index based on a certain column that's frequently accessed e.g.: user id pros\tconsspeeds up read performance by creating an index that speeds up the lookup\twrites and updates become slightly slower, because everytime a row is updated, you also have to potentially modify the index thus it does not have to do a full table scans across the database\trequires more storage for a table that's indexed because you have to store the index itself "},{"title":"Denormalization​","type":1,"pageTitle":"Database Scaling","url":"docs/interviewPrep/system_design/database_scaling#denormalization","content":"it go against a standard best practices with relational databasesadd redundant data to tables so that it reduces the amount of joins you need to do pros\tconsimproves the read performance\tsacrificing write performance risk inconsistent data across tables, because all tables have to have the same data code becomes harder to write as you would need to deal with the situation where you not only write to 1 table, but you have to update that data place that column is now located. Usually its abstracted away by some library "},{"title":"Connection Pooling​","type":1,"pageTitle":"Database Scaling","url":"docs/interviewPrep/system_design/database_scaling#connection-pooling","content":"similar to car pooling where everyone rides in the same car to save resources or moneyallow multiple application threads to use the same database connection in this case, instead of every application thread using its own connection they are pooled together and use the same one which saves on overhead of independent database connections "},{"title":"Caching​","type":1,"pageTitle":"Database Scaling","url":"docs/interviewPrep/system_design/database_scaling#caching","content":"serve traffic from memory rather than having to read from disknot directly related to databasecache sits in front of database to handle serving contentcan't cache everything dynamic data that is frequently updated would not work well e.g.: Redis, Memcachedbest way to scale the database is to not let traffic reach the database at all according to facebook, 99% of their requests are served from cache "},{"title":"Vertical Scaling​","type":1,"pageTitle":"Database Scaling","url":"docs/interviewPrep/system_design/database_scaling#vertical-scaling","content":"get a bigger server with faster processor or more memoryeasiest solution when starting out "},{"title":"Replication and Partitioning​","type":1,"pageTitle":"Database Scaling","url":"docs/interviewPrep/system_design/database_scaling#replication-and-partitioning","content":""},{"title":"Read Replicas​","type":1,"pageTitle":"Database Scaling","url":"docs/interviewPrep/system_design/database_scaling#read-replicas","content":"duplicate the database and set it as the master server dedicated only to writescreate replica servers to handle readshave to handle making sure new data reaches replicashave built in fault tolerance as even if any of the replica were to go down, there would be backups to take its place  "},{"title":"Sharding (a type of partitioning)​","type":1,"pageTitle":"Database Scaling","url":"docs/interviewPrep/system_design/database_scaling#sharding-a-type-of-partitioning","content":"also called as horizontal partitioningschema of table stays the same, but it's now split across multiple DBs reason for this is because if read replica is set up, you need to handle more writes can split the task e.g.: names of users from A-M goes to the first shard, while users from N-Z goes to the second shard pros\tconscan hanlde more traffic\tHot Keys situation where some keys does not have as much traffic compared to the others leading to uneven traffic no joins across shards because the data is separate, if we attempt to join them, it would be very slow famous example of hot key senario instagram: justin bieber user id had way more traffic than an average user thus there is no good way to handle the traffic whenever he posts a picture, the servers would go crazy some cases, there's no way good way to handle sharding, just have to deal with it  "},{"title":"Vertical Partitioning​","type":1,"pageTitle":"Database Scaling","url":"docs/interviewPrep/system_design/database_scaling#vertical-partitioning","content":"divide up the schema of database into separate tables typically done by functionality if there is 1 big row of user data data that does not make sense to be used together would make sense to split them apart so that you do not retrieve a bunch of data that is not required best when most data in row isn't needed for most queries pros\tconsgenerally it is easier to implement than sharding\tcould potentially end up having to shard or horizontally partition anyway, which would get complicated because the data has already been vertically partitioned  "},{"title":"When to consider NoSQL​","type":1,"pageTitle":"Database Scaling","url":"docs/interviewPrep/system_design/database_scaling#when-to-consider-nosql","content":"when the benefit of relational database is gone e.g.: normalized data, strong consistency, simple data model when you made a lot of trade offs trying to scale, it becomes unrecognizable compared to a standard SQL setupthe reason why you would choose a NoSQL isn't because NoSQL is magical you choose it because you know up front what you are sacrificing and what specifically you need for your application that you can make a trade off when you start of with a relational databases, you thought you would stay with all the best practicesbut by the time you end up scaling, you have lost all of it examples: when dealing with transactions and banking, you would want consistency with SQLfor stuff like google or social media where you don't need perfect consistency right away, you could make those trade offs for scale with NoSQL "},{"title":"Distributed System Characteristics","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics","content":"","keywords":""},{"title":"Common characteristics of a Distributed system that it would have​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#common-characteristics-of-a-distributed-system-that-it-would-have","content":""},{"title":"No shared clock​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#no-shared-clock","content":"all individual servers are running on their own time this leads to an issue called clock drift where the timers on each computer get out of sync leading to big issues with ordering of eventsif problem is not handled, possible of getting an error such as negative latency looking like time travel because if 1 clock is off on a computer and when it sends a request to another the timestamp on the request will be out of sync with the other computer according to google, if a server is synchronized once a day you can get a 17 second drift in either direction this will cause a huge issue for apps related to stock exchange or auction site like ebay google handle the problem by using true time which is using a combination of gps receivers and an atomic clock "},{"title":"No shared memory​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#no-shared-memory","content":"each node or server in the system is going to have its own RAM, its own storage if it needs data from somewhere else, it would need to request that from the part of the system that does have it "},{"title":"Shared resources​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#shared-resources","content":"anything in the distributed system should be able to be shared between nodes on the system can be hardware, software or data "},{"title":"Concurrency and Consistency​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#concurrency-and-consistency","content":"the different part of the system are going to be working together and working at the same time need to make sure that there's consistency between how that all works "},{"title":"Distributed System Communication​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#distributed-system-communication","content":""},{"title":"Different parts of Distribute System need to be able to communicate​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#different-parts-of-distribute-system-need-to-be-able-to-communicate","content":"since information needs to be passed around the distributed system they need some way to communicate "},{"title":"Requires agreed upon format or protocol for communication​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#requires-agreed-upon-format-or-protocol-for-communication","content":"lots of strategies to do this but at basic level it requires some sort of uniform format or protocol so that the different parts can understand what the others are saying when they pass messages back and forth "},{"title":"Lots of things can go wrong, need to handle them somehow​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#lots-of-things-can-go-wrong-need-to-handle-them-somehow","content":"when communications are being done on scale, a lot of things can go wrong that was not thought about client can't find server it sends a request, but the server is not respondingneed a way for the client to find another server that can serve it server crash mid request when a client connects to a server, but during the processing, the server breaks downneed a way to resent that request server response is lost when a server has a response, however the network fails when sending it back to the clientserver thinks the job is done, but client still doesn't have the response client crashes when client breaks when the server is processing, and thus when the server is done, it has nothing to send the data back toserver would need to store that response until it detects the client again and then it can send the data out "},{"title":"Benefits​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#benefits","content":""},{"title":"More reliable, fault tolerant​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#more-reliable-fault-tolerant","content":"when running on a single machine, if it goes down, the entire system goes down "},{"title":"Scalability​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#scalability","content":"the whole system is designed to work on multiple machines it's very easy to just add a few more machines or nodes so if you are gradually getting more traffic it's really easy to add some more nodes and scale up "},{"title":"Lower latency, increased performance​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#lower-latency-increased-performance","content":"can have the application running out of multiple data centers all around the world this means server is closer to user so it's reduced latency increased performance "},{"title":"Cost effective​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#cost-effective","content":"at some point, it's not possible to just buy a larger single machinewith a distributed system, you can buy a bunch of commodity servers that are very cheap can buy in bulk and then just run the software off those "},{"title":"Fallacies​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#fallacies","content":"network is reliablelatency is 0bandwidth is finitetopology doesn't changenetwork is secureonly 1 administratortransport cost is 0 "},{"title":"System Design Performance Metrics​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#system-design-performance-metrics","content":"use to measure the performance of a distributed system "},{"title":"Scalability​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#scalability-1","content":"It is the capability of a system, process, or a network to grow and manage increased demand or traffic could be the volume of data per request or the total number of requests over time increasinggoal is to achieve the growth without a loss in performanceAny distributed system that can continuously evolve in order to support the growing amount of work is considered to be scalable A good scalable architecture attempts to balance the load on all the participating nodes evenlybad system design could result in a bottleneck on the number of users or traffic the app can handle or could result in exponentially increasing cost to serve a small increase in traffic Horizontal vs Vertical Scaling​ case study: on a web app server, number of users is rapidly growing, which makes the app to run slow, due to volume of requests increasing Reasons why this could happen CPU a certain function that requires a lot of processing power is overwhelming the CPU, causing the app to slow down Memory app is doing something where it needs to hold large chunks of data in memory, it would get full and it won't be able to process as many requests at the same time IO it is how fast the app can read from storage, such as accessing images or video files stored on the hard drive, you would be limited to how much data you can access at once Bandwidth if you're streaming or similar, the amount of data that can be pushed through the network is also limited through a single server  Vertical Scaling pros\tconseasiest way to scale an application\tdiminishing returns since there is a limit to how much hardware could be added, and when the system gets larger, you get less effect for more money if server is slow, just increase the hardware(cpu, memory, etc.)\tlimits to scalability, as it is not possible for a single machine to handle a huge amount of traffic single point of failure, if anything fails the server would crash Diminishing returns Horizontal Scaling pros\tconsmore efficient long term, because you can buy commodity hardware, which is cheaper when you can buy in bulk\tmore complexity up front to build redundancy built in, if any server is done, the other servers can still handle traffic\tneed load balancer to distribute traffic cloud providers make load balancing easier, because it helps to abstracts away a lot of the complexity you face when building having more servers means you can have servers around the world which reduce latency for users all over the world\t Price per capacity vs Extra capacity Horizontal Scaling\tVertical Scalingscale by adding more servers into the pool of resources\tscale by adding more power (CPU, RAM, Storage, etc.) to an existing server easier to scale dynamically by adding more machines into existing pool\tusually limited to the capacity of a single server e.g.: Cassandra, MongoDB (allow easy way to scale horizontally by adding more machines to meet growing needs), Kubernetes (use to build on top docker containers, help to abstract the complexity of having to deal with all the different servers), Docker (allows you to put apps in containers and easily deploy them to various servers), Hadoop (good for handling petabytes of data as it uses map reduce, by breaking up massive amount of data and splits it off so that it can be worked on by thousands of different servers, and then puts that data back together)\tscaling beyong the capacity often involves downtime and comes with an upper limit e.g.: MySQL (allow easy way to scale vertically by switching from smaller to bigger machines, however, this process often involves downtime) "},{"title":"Reliability​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#reliability","content":"It is the probability a system will fail in a given period meaning: a distributed system is considered reliable if it keeps delivering its services even when one or several of its software or hardware components failresponses could slow down, they're accurate but are just slower than normal hard to define whether this is a failure or not ways to enable reliability requires systems in place like automated testings to prevent bugs from being deployed to production also need tools that can predict and compensate for hardware failure so that before a server even fails you can be notified and you can preemptively take that server offline and repair it before it starts serving bad requests Common way to measure reliability is Mean Time Between Failure​ MTBF = (total_elapsed_time - total_down_time) / number_of_failures = (24 hours - 4 hours downtime) / 4 failures = 5 hour MTBF // this means that you have 5 hours on average before the system will have a failure  "},{"title":"Availability​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#availability","content":"it is the most important metric when it comes to your users is whether the site actually works and what % of the time it worksIt is the time a system remains operational to perform its required function in a specific period a simple measure of the percentage of time that a system, service, or a machine remains operational under normal conditionstakes into account maintainability, repair time, spares availability, and other logistics considerationsReliability is availability over time considering the full range of possible real-world conditions that can occur If a system is reliable, it is available However, if it is available, it is not necessarily reliablemeaning: high reliability contributes to high availability but it is possible to achieve a high availability even with an unreliable product by minimizing repair time and ensuring that spares are always available when they are needed Poorly designed software requiring downtime for updates is less available such as when a site says it is down for maintenancein the past, there weren't that many best practices or good tools updating a database would need take the entire app down SWE would need to wait till around 3am where traffic is the lowest to take down the website for maintenance it is hard to measure overall software system availability because certain parts (in a microservices) might be less available than others, but can be covered up by having redundancy Redundancy is use to protect a transaction should it fail due to the machine that is running the transaction in this case, another server that has the exact replica will replace the data storedshoul a request fail, a load balance will detect it and resend the request to the redundant server or replica which the user knowingRedundancy has a cost reliable system has to pay the cost to achieve such resilience for services by eliminating every single point of failure Common way to measure availability is Availability Calculation​ Availability % = (available_time / total_time) x 100 = (23 hours / 24 hours) x 100 = 95.83% available  Show table for downtime for 9's​ higher % is better, 99% is really bad Availability\tAnnual Downtime99%, 2 nines\t3 days 15 hours 40 minutes 99.9%, 3 nines\t8 hours 46 minutes 99.99%, 4 nines\t52 minutes 36 seconds 99.999%, 5 nines\t5.26 minutes Reliability vs Availablility​ reliable system is always an available system not gonna happen in the real world, but is ideal to aim for more reliability availability can be maintained by redundancy and replication, but system may not be reliable because there is a risk that the software systems that compensate for the lack of reliability break, all those flaws in the software will be exposed and you'll see a lot of downtime as a result reliable software will be more profitable because providing same service requires less backup resources because you would need less hardware to serve the same amount of traffic so you don't have to have a bunch of extra resources on hand to hanlde the failures requirements like the service level agreements, the availability will depend on the function of the software e.g.: social media is not exactly the end of the world if you try to create a post and it fails its not a terrible disaster, thus it might not be worth for such an app to invest tons of money high reliability and availability as for spacex and you're shooting rockets into space, you wanna make sure that your software is reliable because there's a billion $ worth of hardware on the line if it explodes, etc. "},{"title":"Efficiency​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#efficiency","content":"how well the system performslatency and throughput often used as metrics latency is how long (the delay) a request takes to get back to the userthroughput is the total amount of requests and traffic that your system can handle 2 standard measures of its efficiency the response time (or latency) that denotes the delay to obtain the first itemthe throughput (or bandwidth) which denotes the number of items delivered in a given time unit (e.g., a second) The 2 measures correspond to the following unit costs Number of messages globally sent by the nodes of the system regardless of the message sizeSize of messages representing the volume of data exchanges The complexity of operations supported by distributed data structures can be characterized as a function of one of these cost units the analysis of a distributed structure in terms of ‘number of messages’ is over-simplistic It ignores the impact of network topology, network load, its variation, the possible heterogeneity of the software and hardware components involved in data processing and routing, etc However, it is difficult to develop a precise cost model that would accurately take into account all these performance factorstherefore, we have to live with rough but robust estimates of the system behavior Poorly design system will hit a limit somewhere maybe have a bad algorithm that scales exponentially the result is that a slight increase in traffic dramatically increases the latency users will get frustrated from this "},{"title":"Manageability​","type":1,"pageTitle":"Distributed System Characteristics","url":"docs/interviewPrep/system_design/distributed_systems_key_characteristics#manageability","content":"Speed and difficulty involved with maintaining system e.g.: you have the fastest car in the world but is impossible for anyone to drive without crashing which is uselessThe system must be easy to operate and maintainServiceability or manageability is the simplicity and speed with which a system can be repaired or maintainedif the time to fix a failed system increases, then availability will decrease Observability, how hard is it to track bugs in a complex system, you don't know where the origin of an actual bug is which could be in multiple different servicesso this basically tells how hard is it, how observable is the system, and how do you find bugs when you're working with it Difficulty of deploying updates, how easy is it to deploy updates and new features if it is complicated and have high risks, people would not want to take that risk, and the creation of new features would slow down, which impacts your success a business goal is to abstract away infrastructure so product engineers don't have to worry about deployment and risksThings to consider for manageability ease of diagnosing and understanding problems when they occurease of making updates or modificationshow simple the system is to operate Early detection of faults can decrease or avoid system downtime "},{"title":"Indexes","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/indexes","content":"","keywords":""},{"title":"Example: A library catalog​","type":1,"pageTitle":"Indexes","url":"docs/interviewPrep/system_design/indexes#example-a-library-catalog","content":"A library catalog is a register that contains the list of books found in a libraryThe catalog is organized like a database table generally with 4 columns: book titlewritersubjectdate of publication There are usually 2 such catalogs: sorted by the book titlesorted by the writer name can either think of a writer you want to read then look through their booksor look up a specific book title These catalogs are like indexes for the database of booksThey provide a sorted list of data that is easily searchable by relevant informationAn index is a data structure that can be perceived as a table of contents that points us to the location where actual data lives when we create an index on a column of a table we store that column and a pointer to the whole row in the index Just like a traditional relational data store can apply this concept to larger datasets The trick with indexes is that we must carefully consider how users will access the dataIn the case of data sets that are many terabytes in size, but have very small payloads (e.g., 1 KB) indexes are a necessity for optimizing data access Finding a small payload in such a large dataset can be a real challenge since we can’t possibly iterate over that much data in any reasonable time it is very likely that such a large data set is spread over several physical devices this means we need some way to find the correct physical location of the desired dataIndexes are the best way to do this "},{"title":"How do Indexes decrease write performance?​","type":1,"pageTitle":"Indexes","url":"docs/interviewPrep/system_design/indexes#how-do-indexes-decrease-write-performance","content":"An index can dramatically speed up data retrieval but may itself be large due to the additional keys which slow down data insertion &amp; update. When adding rows or making updates to existing rows for a table with an active index we have to write the data and have to update the index This will decrease the write performance This performance degradation applies to all insert, update, and delete operations for the tablethus, adding unnecessary indexes on tables should be avoided and indexes that are no longer used should be removed adding indexes is about improving the performance of search queriesIf the goal of the database is to provide a data store that is often written to and rarely read from decreasing the performance of the more common operation (writing) is probably not worth the increase in performance we get from reading "},{"title":"Long-Polling vs WebSockets vs Server-Sent Events","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/long-polling_vs_websockets_vs_server-sent_events","content":"","keywords":""},{"title":"Ajax Polling​","type":1,"pageTitle":"Long-Polling vs WebSockets vs Server-Sent Events","url":"docs/interviewPrep/system_design/long-polling_vs_websockets_vs_server-sent_events#ajax-polling","content":"Polling is a standard technique used by the vast majority of AJAX applications The basic idea is that the client repeatedly polls (or requests) a server for dataThe client makes a request and waits for the server to respond with dataIf no data is available, an empty response is returned The client opens a connection and requests data from the server using regular HTTPThe requested webpage sends requests to the server at regular intervals (e.g., 0.5 seconds)The server calculates the response and sends it back, just like regular HTTP trafficThe client repeats the above three steps periodically to get updates from the server The problem with Polling is that the client has to keep asking the server for any new data As a result, a lot of responses are empty, creating HTTP overhead "},{"title":"HTTP Long-Polling​","type":1,"pageTitle":"Long-Polling vs WebSockets vs Server-Sent Events","url":"docs/interviewPrep/system_design/long-polling_vs_websockets_vs_server-sent_events#http-long-polling","content":"This is a variation of the traditional polling technique that allows the server to push information to a client whenever the data is availableWith Long-Polling, the client requests information from the server exactly as in normal polling but with the expectation that the server may not respond immediatelyThat’s why this technique is sometimes referred to as a “Hanging GET” If the server does not have any data available for the client instead of sending an empty response the server holds the request and waits until some data becomes available Once the data becomes available a full response is sent to the clientThe client then immediately re-request information from the server so that the server will almost always have an available waiting request that it can use to deliver data in response to an event The basic life cycle of an application using HTTP Long-Polling is as follows: The client makes an initial request using regular HTTP and then waits for a responseThe server delays its response until an update is available or a timeout has occurredWhen an update is available, the server sends a full response to the clientThe client typically sends a new long-poll request either immediately upon receiving a response or after a pause to allow an acceptable latency period Each Long-Poll request has a timeout * The client has to reconnect periodically after the connection is closed due to timeouts "},{"title":"WebSockets​","type":1,"pageTitle":"Long-Polling vs WebSockets vs Server-Sent Events","url":"docs/interviewPrep/system_design/long-polling_vs_websockets_vs_server-sent_events#websockets","content":"WebSocket provides Full duplex communication channels over a single TCP connectionIt provides a persistent connection between a client and a server that both parties can use to start sending data at any timeThe client establishes a WebSocket connection through a process known as the WebSocket handshake If the process succeeds, then the server and client can exchange data in both directions at any time The WebSocket protocol enables communication between a client and a server with lower overheads facilitating real-time data transfer from and to the server This is made possible by providing a standardized way for the server to send content to the browser without being asked by the client and allowing for messages to be passed back and forth while keeping the connection open * In this way, a two-way (bi-directional) ongoing conversation can take place between a client and a server "},{"title":"Server-Sent Events (SSEs)​","type":1,"pageTitle":"Long-Polling vs WebSockets vs Server-Sent Events","url":"docs/interviewPrep/system_design/long-polling_vs_websockets_vs_server-sent_events#server-sent-events-sses","content":"Under SSEs the client establishes a persistent and long-term connection with the serverThe server uses this connection to send data to a clientIf the client wants to send data to the server it would require the use of another technology/protocol to do so Client requests data from a server using regular HTTPThe requested webpage opens a connection to the serverThe server sends the data to the client whenever there’s new information available SSEs are best when we need real-time traffic from the server to the client or if the server is generating data in a loop and will be sending multiple events to the client "},{"title":"Microservices","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/microservices/","content":"","keywords":""},{"title":"Introduction to Microservices​","type":1,"pageTitle":"Microservices","url":"docs/interviewPrep/system_design/microservices/#introduction-to-microservices","content":""},{"title":"Benefits of microservices​","type":1,"pageTitle":"Microservices","url":"docs/interviewPrep/system_design/microservices/#benefits-of-microservices","content":"Freedom to create, manage, and deploy individual componentsReduced surface area allows easier to plug in continuous integrationEnables fault tolerance and fault isolationlanguage independenceuse the right language for the task at handnot pigeonholed to a single language just because the rest of the application uses it "},{"title":"avoid bottlenecks with scaling​","type":1,"pageTitle":"Microservices","url":"docs/interviewPrep/system_design/microservices/#avoid-bottlenecks-with-scaling","content":"Example: authentication and token management​ build login/token managementAPIs as a separate serviceScale out independently as an app "},{"title":"Deployment Benefits​","type":1,"pageTitle":"Microservices","url":"docs/interviewPrep/system_design/microservices/#deployment-benefits","content":"Get your updates to production more quicklyRisk of rolling out a smaller changeset is lesserGet to play with some new ideas like blue-green or A/B deploymentsAbility to replace components in a more efficient way "},{"title":"Open up to New Opportunites​","type":1,"pageTitle":"Microservices","url":"docs/interviewPrep/system_design/microservices/#open-up-to-new-opportunites","content":"Apply microservices approach to containers and serverless paradigmsServerless paradigms and containers introduce new tooling and technologies that benefit from a microservices approach "},{"title":"Common microservices pattern​","type":1,"pageTitle":"Microservices","url":"docs/interviewPrep/system_design/microservices/#common-microservices-pattern","content":"Twelve-Factor App​ SourceInitially proposed to build SaaS (Software as a Service) apps for HerokuPrinciples translate well to cloud and container native applications Principle: Codebase codebase must be tracked in version control and will have many deploys Principle: Dependencies dependencies are explicitly declared and isolated Principle: Configuration store configuration in the environment Principle: Backing Services Treat backing services as an attached resource e.g.: for internal database, or third party service should be easy to deploy and change Principle: Build, Release, Run build, deploy, run always have a build and deploy strategybuild strategies for repeated builds, versioning of running system, and rollback Principle: Processes Execute the application as a stateless process sticky sessions need to be revisited and reimplementedmight be challenging in large enterprise with architecture already in place Principle: Port Binding Expose services via port bindings Principle: Concurrency Scale out with the process model Principle: Disposability Quick application startup and shutdown times Dev/prod parity Application is treated the same way in dev, staging, and production Log Management Treated as an event stream Admin Tasks Treated the same way like the rest of the applicationAre allowed to run against a released version "},{"title":"Asynchronous Communications","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#example","content":""},{"title":"two strategies when dealing with system-to-system calls​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#two-strategies-when-dealing-with-system-to-system-calls","content":"traditional model which is the synchronous model (standard microservices communications)​ In a standard model, service-to-service communications is over HTTP using RESTful patternsThe calls are synchronous in nature, meaning that the caller waits for a response that response is sent after the request is fully processed Each call becomes a blocking call that the client must wait on a success or failure indicated by status codes from the service being calledAs such, in this model, call paths can become deep it isn't usually a big deal in small, concise operationsbut it can become a bottleneck for longer processes across many services asynchronous model of interservice communication​ on method of implementation is over HTTP using REST In this model, the client sends a call and the server immediately responds with an accepted status codeThe client then either polls the server or waits for a push message on a callback URL to determine if the work was done and successful or done and failed Another method, is through the use of messaging systems e.g.: Rabbit, Kafka, JMS, or othersa message is put on a system and a downstream consumer works on that messageSuccesses or failures can be communicated many different ways or not at allasynchronous communication styles can be more complexit can be very difficult to do them rightbut there are benefits One of the biggest benefits is offloading strain on the system By not having every call be a blocking call, you can leverage more processing power behind the scenes and not impact your customernot every call needs an immediate responsesince there is a correlation between user wait times and satisfaction, the offloading to asynchronous can improve satisfaction of usersIn addition, many jobs take a while to run to completion and using asynchronous communications not only off-loads strain but also keeps the system as a whole healthier Asynchronous communications, especially in workloads and dag or directed in cyclical graph workflows can allow you to build a natural retries without negatively impacting performance on the processes involved "},{"title":"Pros​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#pros","content":""},{"title":"Prevent Gridlock​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#prevent-gridlock","content":"CongestionExponential trafficSlow servicesRemove synchronous calls "},{"title":"impact it can have when dealing with Long-Running Processes​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#impact-it-can-have-when-dealing-with-long-running-processes","content":"Reduce blockingnatural retryno more call treesreduce risk of timeouts "},{"title":"Reduce Coupling​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#reduce-coupling","content":"prevent building of monolithic microservicesprevent exponential trafficprevent slow services "},{"title":"Additional Benefits​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#additional-benefits","content":"can build better quality of service and priorityFault tolerance easier to solveresponse not needed immediatelylogging, metrics, analytics does not need blocking "},{"title":"Trade-offs​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#trade-offs","content":""},{"title":"Complexity increases​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#complexity-increases","content":"Artifact sprawl consumers of messages are individual artifacts that have their own repositories, build pipelines, deployment pipelines, and configuration management Disconnected code pathsMultiple paths "},{"title":"Observability becomes harder​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#observability-becomes-harder","content":"lack of immediate responselog aggregationmetrics correlation becomes a challenge "},{"title":"Additional Complexity​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#additional-complexity","content":"additional components increasesoperational runbooks increasesissue source identification becomes difficult "},{"title":"Common Technologies​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#common-technologies","content":""},{"title":"Message Broker​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#message-broker","content":"Heart of the systemable to translate and transform incoming and outgoing messagesRouting of messages point to point routinginspection based routing Aggregations messages can be aggregated if required able to handle errors "},{"title":"Common Message Brokers​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#common-message-brokers","content":"RabbitMQ​ Apache ActiveMQ​ Java Message Service (JMS)​ Apache Kafka​ Cache (e.g.: Redis)​ downside is Redis does not provide the robustness of the other tools "},{"title":"Common Terms​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#common-terms","content":"Producers​ Consumers or receiver​ Dead-letter queue (DLQ)​ Interservice Communications Patterns use when in a situation where you just need to push a message to a remote system to do work, and you don't want a block on the downstream system completing its tasks "},{"title":"Service Communications​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#service-communications","content":""},{"title":"Point-to-Point​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#point-to-point","content":"single producersingle consumersend and forgetresponses are another point-to-point "},{"title":"Publish-Subscribe​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#publish-subscribe","content":"single producerone or more consumerssend and forgetdurable subscriptions guarantees subscriber will get the message at some point in time "},{"title":"Point-to-point async​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#point-to-point-async","content":"one of the most common uses of asynchronous messaging Producer -&gt; Message Broker -&gt; Consumer  "},{"title":"Use Cases​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#use-cases","content":"when no response are neededwhen need admin task to happenout of band e.g.: email: send and forget scaling "},{"title":"Considerations​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#considerations","content":"wire time, is it really saving time?extra components worth it?plan for failure scenarios "},{"title":"Publish-subscribe​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#publish-subscribe-1","content":"producer -&gt; Message Broker -&gt; Subscriber -&gt; Subscriber  "},{"title":"Use Cases​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#use-cases-1","content":"when multiple responders are required when flow of traffic between sites is limited on purpose to enforce good constraints across the data centersbut what happens when you need more than data in sync? you can federate the message broker across multiple data centers and allow triggered actions within each data center to occur in isolationThose triggered actions are often admin tasks like triggers to clean up or update search indicesIn this model, the central hub can publish a message and a worker in each data center can subscribe to the message when multiple tasks must fire across disparate systemsto allow for consumer choice consumers can choose not to subscribe "},{"title":"Durable Subscribers​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#durable-subscribers","content":"they always get the messagepowerful in mission-critical operationscan unregister if neededproducer agnostic producer doesn't know anything about the consumer Event-Driven Microservices Pattern "},{"title":"Event-driven microservices​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#event-driven-microservices","content":""},{"title":"What is it?​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#what-is-it","content":"requires a series of steps from start to goaleach step is triggered from a single eventmove towards an end goaleach steps play its own isolated role "},{"title":"Choreographed events​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#choreographed-events","content":"can be called a call treestep to step each step does some work and passes a message down the chain no centralized controller just cascade down the pipelines pipes some trigger will be passed with sufficient data to the next step for it to do its work and so on down the call chain "},{"title":"Orchestrated events​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#orchestrated-events","content":"much more common in practice than choreographed eventscomes from the centralized command and controlstill based on isolated stepseach step still has a job to do "},{"title":"Choreographed events​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#choreographed-events-1","content":" Step 1 ^ | v Event Producer -&gt; Message Broker &lt;-&gt; Step 2 | v Step 3 Event Producer -&gt; Message Broker -&gt; Step 1 -&gt; Message Broker -&gt; Step 2 -&gt; Message Broker -&gt; Step 3  "},{"title":"Uses cases​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#uses-cases","content":"when there is distinct systemswhen there is alternative cascades "},{"title":"Benefits and Trade-offs​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#benefits-and-trade-offs","content":"pros​ increased performance over orchestration because don't have a centralized orchestrator, steps don't funnel through a single processperformance can increase by offloading the steps to message brokereach step can be optimized for its sole function can reduce cost due to reduced total cost of ownership due to performance and code complexity cons​ reduce reliability in the system because there is no central place to handle error states there is more chance that a single event will fail to fire everywhere that it is neededthus need to ensure that error tracking and Dead Letter Queues exists in the message broker so as to indicate the need to address errors in the workflow reduce observability, increase observability complexity because there is no centralized orchestratorit makes determining the status of the event more difficulthave to look everywhere until you find the state of the current message to know what's going onin addition, in an asynchronous model, there is also the message broker and each DLQ to look at "},{"title":"Orchestrated events​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#orchestrated-events-1","content":"more common pattern within the asyncrhonous event driven microservices modelOrchestrator can also be referred as the Command and Control center  call Event Producer &lt;-&gt; Orchestrator &lt;-&gt; Message Broker &lt;-&gt; Step 1 polling call &lt;-&gt; Step 2 &lt;-&gt; Step 3 Event Producer -&gt; call -&gt; Orchestrator -&gt; Message Broker -&gt; Step 1 -&gt; Message Broker -&gt; Orchestrator -&gt; Event Producer -&gt; polling call -&gt; Orchestrator -&gt; Message Broker -&gt; Step 2 -&gt; Message Broker -&gt; Orchestrator -&gt; Event Producer -&gt; polling call -&gt; Orchestrator -&gt; Message Broker -&gt; Step 3 -&gt; Message Broker -&gt; Orchestrator -&gt; Event Producer  "},{"title":"Use Cases​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#use-cases-2","content":"when there is sequential processing step A must be completed before step B can proceed Command workflow senario to allow many Kubernetes clusters to be spun up at once through a single orchestrator call, since calls become non-blocking asynchronous messages when a response is required "},{"title":"Benefits and Trade-Offs​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#benefits-and-trade-offs-1","content":"pros​ increase reliability can use its state to resubmit jobs that need to be processedcan also build in much more robust error handling for outlier conditions increase observability central point can produce more logging and metrics that can help an operations team cons​ reduced performance or choreography Because you have a centralized orchestrator, the steps funnel through a single process, thus decrease performance increased cost orchestrator need to keep track of state of the status responses and code pathsincrease total cost of ownershipneed to have more complex codecosts in both operations and developer efficiencies "},{"title":"Hybrid events​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#hybrid-events","content":"good thing about asynchronous model is that you are not forced to use a fixed pattern, hybrids are possible and efficient "},{"title":"Not Exclusive​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#not-exclusive","content":"still have a centralized command and control for the system as a wholecan dispatch choreography events to remote systems when neededthe events can either stay choreographed or convert back to internal command and control structurework gets done and the original command and control knows when everything is completed knows by either directly in line or via some other polling mechanism "},{"title":"Contracts​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#contracts","content":"regardless of event model, contracts between systems via the message broker are keycontract must be well documented to prevent error or disjointed processescontract must be passive to change changes can and do happen, but must not break downstream or upstream systems in the process contracts must be enforced rigorously so as to be resistant to change and be efficient in the processing Stream Data Platform handles streams of dataall done asynchronouslyvery useful in microservicesincreased complexity for a reason "},{"title":"Common Architecture​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#common-architecture","content":"a pub/sub model with multiple publishers on the same set of topics Producer - - Consumer Producer - - Consumer Producer - Message Broker - Consumer Producer - - Consumer  "},{"title":"Producers​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#producers-1","content":"ApplicationsDatabasesServersAnything that producers events or logs "},{"title":"Consumers​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#consumers","content":"Log aggregators can help paint a real picture of what's going on in the system Analytics engines great use cases for streaming data Long-term storage many use cases in big data drive their data flow from a stream data platformonce the set of data has been identified through analytics or other learning mechanisms data can be collected and shipped to a storage for historical analysis and other uses Eventing engines key off key analytical points and trigger downstream events usually through orchestration "},{"title":"Why go through all the trouble is consumer use cases are enough?​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#why-go-through-all-the-trouble-is-consumer-use-cases-are-enough","content":"data is kingbusiness drives off datawhat you don't know can hurt youdecision-making "},{"title":"Log aggregation​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#log-aggregation","content":""},{"title":"what is this about?​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#what-is-this-about","content":"message broker Most diagrams only focus on the log aggregation activities of the message broker itselfit can aggregate logs from various systems, but in a raw format transformations not traditionally done in the stream data platform itselfIt is usually preferred to keep all logs in the original format so as to not lose context or metadata from the log itself As such, they become disjointed Readability of log messages directly impacts the utilization of themlog aggregation is mostly referring to is in a consumption engine log messages are transformed into a common format and shipped to a system designed to provide insight and readability into the log messages "},{"title":"Stream Processors​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#stream-processors","content":"can act as internal aggregatorscall APIsTrigger alertsCreate events "},{"title":"Visualization​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#visualization","content":"improve human readability of log messagesoperations can leverage the visualization of logs when troubleshooting and inspecting system healthlogs can be used for debugginguseful for determining if refactoring has positive or negative impacts "},{"title":"System Analytics​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#system-analytics","content":""},{"title":"Why?​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#why","content":"allow data to be analyzed quicklyhappens near real timefaster than downstreamquicker responses "},{"title":"How?​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#how","content":"write the jobexecute against the processed streamread the resultrepeast as necessaryship it "},{"title":"Is it worth it?​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#is-it-worth-it","content":"maturity mattersinsights are powerfulneeds dedicationvalue isn't immediate "},{"title":"Event detection​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#event-detection","content":""},{"title":"Eventing Use Cases​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#eventing-use-cases","content":"stop the bad actor from occurringincrease the goodimmediate actions Data flow (from state store perspective) one of the biggest use case of asynchronous messaging in a microservices architecture is in data flowsdata flows can range from a distributed data and eventual consistency to CQRS-based data writesto improve throughput on a microservices based data services "},{"title":"Distributed data​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#distributed-data","content":""},{"title":"Why is data such a powerful use case?​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#why-is-data-such-a-powerful-use-case","content":"data is slowdata is critical to the operation of any systemdata is growing "},{"title":"Big Uses​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#big-uses","content":"distributed dataCQRSData migrationsData synchronization "},{"title":"Eventual consistency​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#eventual-consistency","content":"it is a paramount concept in distributed data "},{"title":"ACID and BASE​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#acid-and-base","content":"ACID is a calling card of relational database management systems it is what allows transactional writes and consistent reads in a databaseACID, becomes painful at best in a microservices world, especially in a distributed oneAtomic transactions are usually what people think of with ACID, meaning that the data is either all written or it isn't BASE we seldom care that the data is written immediately in a microservices architectureWhat we do care about is that the data is going to be there when we need it This is the E in BASE, eventual consistency B is basically available and S is a soft state meaning the data shifts and is eventually consistent, so it is always soft and malleable, and not durable like an ACID And the A is just part of basicallyThis eventual consistency model allows us to speed up writes to a database with trust that the technology will distribute the data to wherever it is needed "},{"title":"High Level​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#high-level","content":" B / \\ client - A - C  "},{"title":"Trade-Offs​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#trade-offs-1","content":"latent reads is possible (stale data)communication faultscatastrophic failure data may not be available "},{"title":"CQRS (Command Query Responsibility Segregation)​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#cqrs-command-query-responsibility-segregation","content":"a software pattern to improve performance for a microservices architectureit describes written data in a different model than read datacan be achieved through an even-driven asynchronous architecturetends to be focused on microservices architectures but not requiredit is not a replacement for CRUD "},{"title":"Data Services​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#data-services","content":"usually operate on a single data domainusually dealing with CRUD operations in the data services can be problematic in specific use cases writes are expensive especially in a traditional RDBMS we can tune a system only to a point, when the update domain is different than the read domain reads are not immediate or cheap when data services need data being read to diverge from data being written, CQRS may be of help "},{"title":"In Action​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#in-action","content":"Update Service -&gt; Update Database -&gt; Message Broker Read Service &lt;-&gt; Read Database &lt;-  "},{"title":"Data migration​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#data-migration","content":""},{"title":"Migrations​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#migrations","content":"Moving dataTransforming dataDowntime considerationOrchestration "},{"title":"Consideration​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#consideration","content":"Writes are criticalDo reads do more?Transformation impactMigration time "},{"title":"Model​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#model","content":"Original Service - Original Database / | \\ Crawler - Producer \\ \\ \\ Message Broker - Consumer \\ New Service - New Database  "},{"title":"Data Synchronization​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#data-synchronization","content":""},{"title":"Use Cases​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#use-cases-3","content":"different databasesdifferent systems "},{"title":"Model​","type":1,"pageTitle":"Asynchronous Communications","url":"docs/interviewPrep/system_design/microservices/asynchronousCommunications#model-1","content":"Source - Message Broker - Destination \\ / Watcher  "},{"title":"Kubernetes in Microservices","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/microservices/kubernetes","content":"","keywords":""},{"title":"Microservices building blocks​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#microservices-building-blocks","content":""},{"title":"Codebase​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#codebase","content":"Code stored in source control e.g.: Git, Perforce Container images stored in an image repository e.g.: Docker Hub, Artifactory "},{"title":"Codebase Worflow​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#codebase-worflow","content":"Push code to your source controlAutomated build is kicked off to build and run tests against codeBuild container image, push to image repository "},{"title":"Image Repository​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#image-repository","content":"stores your code in an imageneed to decide early onfollow company guidelines "},{"title":"Application Dependencies​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#application-dependencies","content":"Applications modeled in Kubernetes as Deployments and podsSingle pod can have many containers insideCommonly seen in Kubernetes: sidecar pattern "},{"title":"Dev versus Prod in Kubernetes​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#dev-versus-prod-in-kubernetes","content":"common kubernetes deployment patterns​ small footprint: different namespaces with different credentials for dev, staging, and productionlarge footprint: unique kubernetes installation for dev, staging, and production "},{"title":"Admin Processes​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#admin-processes","content":"admin process containers tagged in a similar way to the running applicationcontainers run as kubernetes jobs/chron jobalso run as a separate deployment "},{"title":"Deployment patterns​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#deployment-patterns","content":""},{"title":"Application Configuration​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#application-configuration","content":"Applications always have associated configuration to make the application work as expected "},{"title":"Application Configuration in Kubernetes​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#application-configuration-in-kubernetes","content":"2 ways to store configs configMaps for generic information (e.g.: metadata, version) secrets for sensitive data (e.g.: passwords)depending on the use case, might need something like HashiCorp Vault Loaded into the pod via environment variablesfiles "},{"title":"Build, Release, Run​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#build-release-run","content":"Tag containers at build time with explicit versiondon't use latest tag for production containers "},{"title":"Running in Kubernetes​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#running-in-kubernetes","content":"high level constructs to run containersdeployments, DaemonSets, ReplicaSetspackage management provided by Helmadds revision control "},{"title":"Processes and Port Bindings​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#processes-and-port-bindings","content":"processes​ keep application statelessdon't rely on sticky sessionsgoal: allow request to go to any container or server by defaultWord on StatefulSets Typically used to create persistent storage systems like a MySQL shard Port Binding​ Statelessness in Kubernetes translated to deployments and podsdeployments comprised of ReplicaSets, which are a collection of one or more pods Containers are implemented in podsCommunicate to each other via well-defined ports "},{"title":"Runtime patterns​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#runtime-patterns","content":""},{"title":"Associating Resources in Kubernetes​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#associating-resources-in-kubernetes","content":"everything is treated as a service, and configurations are stored in a ConfigMap or Secret "},{"title":"Scenario: Replace a link to a database​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#scenario-replace-a-link-to-a-database","content":"Create a new database ensure it's online and ready to accept connections Update configuration stored in the ConfigMaps or SecretsKill the pods that were communicating with the old database "},{"title":"strengths​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#strengths","content":"when kubernetes starts up the new pods, the new pods automatically pick up the new configuration, and can use the new serviceif a pod is taking too much load or is receiving a lot of requests it's easy to scale the number of pods in kubernetes by adding more to the replica set Scaling kubernetes to handle more traffic is one of the strengths of the platformdisposability the ability to maximize robustness with fast startup and graceful shutdown "},{"title":"containers​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#containers","content":"start up fast and run efficientlyhave all required tooling built inside of the container image "},{"title":"Containers to Pods to Replicas​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#containers-to-pods-to-replicas","content":"Kubernetes manages your containers in pods, which are managed with ReplicaSetsif one of the pods goes offline, the ReplicaSet will automatically start up a new pod to take its place "},{"title":"Advantages to Users​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#advantages-to-users","content":"from a user perspective, the application will still function, and the user won't see any downtime "},{"title":"Logging​","type":1,"pageTitle":"Kubernetes in Microservices","url":"docs/interviewPrep/system_design/microservices/kubernetes#logging","content":"treat logs as streams execution environment handles the logs common to use a log router (Beats, Fluentd) to save the logs to a service (Elasticsearch, Splunk)Kubernetes makes this process easy "},{"title":"Numbers to know for Estimation","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/numbers_to_know_for_estimation","content":"","keywords":""},{"title":"Latency Numbers​","type":1,"pageTitle":"Numbers to know for Estimation","url":"docs/interviewPrep/system_design/numbers_to_know_for_estimation#latency-numbers","content":"has a big impact on user experienceon how you design your entire app to reduce latency key points avoid network calls whenever possiblereplicate data across data centers for disaster recovery as well as performanceuse CDNs to reduce latencykeep frequently accessed data in memory if possible rather than seeking from disk, caching Access Type\tactual latency time\tConverted more understandable TimeCPU Cycle\t0.3 nanoseconds\t1 seconds CPU L1 Cache\t1 nanoseconds\t3 seconds CPU L2 Cache\t3 nanoseconds\t9 seconds CPU L3 Cache\t13 nanoseconds\t43 seconds Main Memory (RAM)\t120 nanoseconds\t6 minutes SSD\t150 micro seconds\t6 days HDD\t10 milliseconds\t12 months SF to NYC\t40 milliseconds\t4 years SF to Australia\t180 milliseconds\t19 years "},{"title":"Capacity Estimates​","type":1,"pageTitle":"Numbers to know for Estimation","url":"docs/interviewPrep/system_design/numbers_to_know_for_estimation#capacity-estimates","content":"use to get a rough figure of the type of resources and server amounts that you would need Data Conversions 8 bits\t1 byte 1024 bytes\t1 kilobyte 1024 kilobytes\t1 megabyte 1024 megabytes\t1 gigabyte 1024 gigabytes\t1 terabyteCommon Data Types Char\t1 byte Integer\t4 bytes UNIX Timestamp\t4 bytes use to make quick estimates for daily traffic such as requests per secondhow many requests you need to handle Time60 seconds x 60 minutes = 3,600 seconds per hour 3,600 x 24 hours = 86,400 seconds per day 86,400 x 30 days = 2,500,000 seconds per month "},{"title":"Traffic Estimates​","type":1,"pageTitle":"Numbers to know for Estimation","url":"docs/interviewPrep/system_design/numbers_to_know_for_estimation#traffic-estimates","content":"estimate total number of requests app will receiveAverage Daily Active Users (DAU) x average reads / writes per user Instagram type app: 10 million DAU x 30 photos viewed = 300 million photo requests per day 10 million DAU x 1 photo upload = 10 million photo writes per day 300 million requests / 86,400 seconds per day = 3472 requests per second (using floor division) 10 million writes / 86,400 seconds per day = 15 writes per second (using floor division)  "},{"title":"Memory Estimates​","type":1,"pageTitle":"Numbers to know for Estimation","url":"docs/interviewPrep/system_design/numbers_to_know_for_estimation#memory-estimates","content":"Read Request per day x Average Request size x 0.2 use 0.8 by using the 80 20 rule for a rough estimate, can assume that 20% of the data will be 80% of the overall request or trafficespecially on a social media site, some posts are gonna get much more views than others in a popular account, their post is gonna get view millions of timeswhile other people's posts might not get viewed at all thus to save the database workload, we need to cache our most popular stuff, and most frequently accessed data to reduce latency by providing data from memory instead of from database or disk 300 million requests x 500 bytes = 150 gigabytes per day 150 GB x 0.2 (20%) = 30 gigabytes (only store this amount for the most popular data) 30 GB x 3 (replication) = 90 gigabytes (total cache memory)  "},{"title":"Bandwidth Estimates​","type":1,"pageTitle":"Numbers to know for Estimation","url":"docs/interviewPrep/system_design/numbers_to_know_for_estimation#bandwidth-estimates","content":"Requests per day x Request size this would account the size of the data we are servingaverage bandwith is 5.2 gb per second for this exampletake note that rarely an app will have a steady flow at the same rate often have peaks where it's your highest usage time giving you 3 times the bandwidthduring dead times, you might get a much lower amount 1 photo size ~= 1.5 mb 300 million request x 1.5 mb = 450,000 gigabytes per day 450,000 gb / 86,400 seconds = 5.2 gb per second (using floor division)  "},{"title":"Storage Estimates​","type":1,"pageTitle":"Numbers to know for Estimation","url":"docs/interviewPrep/system_design/numbers_to_know_for_estimation#storage-estimates","content":"Writes per day x Size of write x Time to store data storage is normally used for data that you would want to keep for a long time around 10 years or longer 1 photo size ~= 1.5 mb 10 million write x 1.5 mb = 15 TB per day 15 tb x 365 days x 10 years = 55 Petabytes  "},{"title":"OSI (Open System Interconnection) Model","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/OSI_model","content":"","keywords":""},{"title":"Problem​","type":1,"pageTitle":"OSI (Open System Interconnection) Model","url":"docs/interviewPrep/system_design/OSI_model#problem","content":"if 1 computer uses Windows OS, and another uses Mac OS, how would they communicate? "},{"title":"Solution​","type":1,"pageTitle":"OSI (Open System Interconnection) Model","url":"docs/interviewPrep/system_design/OSI_model#solution","content":"OSI Model was introduced by ISO (International Organization for Standardization) in 1984 "},{"title":"OSI Model contains 7 layers​","type":1,"pageTitle":"OSI (Open System Interconnection) Model","url":"docs/interviewPrep/system_design/OSI_model#osi-model-contains-7-layers","content":"each layer is a package of protocols "},{"title":"Application layer (7)​","type":1,"pageTitle":"OSI (Open System Interconnection) Model","url":"docs/interviewPrep/system_design/OSI_model#application-layer-7","content":"this layer is used by network applications network application means computer apps that uses internet computer apps e.g.: chrome, firefox, outlook, skype, etc. these apps are a network app that runs in your PC and does not reside in the application layer but uses application layer protocols to use the internet application layer protocols​ examples HTTP (Hypertext Transfer Protocol)HTTPS (Hypertext Transfer Protocol Secure)FTP (File Transfer Protocol)NFS (Network File System)FMTP (Flight Message Transfer Protocol)DHCP (Dynamic Host Configuration Protocol)SNMP (Simple Network Management Protocol)TelnetSMTP (Simple Mail Transfer Protocol)POP3 (Post Office Protocol version 3)IRC (Internet Relay Chat)NNTP (Network News Transfer Protocol) the application layer protocols forms the basis for various network services File Transfer: uses FTPWeb Surfing: HTTP/SEmails: SMTPVirtual Terminals: Telnet Summary​ application layer provides services for network applications with the help of protocols to perform user activities "},{"title":"Presentation layer (6)​","type":1,"pageTitle":"OSI (Open System Interconnection) Model","url":"docs/interviewPrep/system_design/OSI_model#presentation-layer-6","content":"Translation receives data in the form of alphanumeric characters from Application layerPresentatin layer then translate the data into binary code format for the machine to understand e.g.: convert ASCII (American Standard Code for Information Interchange) to EBCDIC (Extended Binary Coded Decimal Interchange Code) Data Compression before translated data is transmitted, presentation layer will reduce the number of bits that were used to represent the original datacan be in 2 type of formats LossyLossless it reduces the amount of space used to store the original file e.g.: a 5 MB file into a 2 MB file when space is reduced, the amount of time required to transmit also reduces, thus allow data transmission to be faster useful for realtime audio and video streaming Encryption / Decryption use to maintain the integrity of data before transmissionit helps to enhance the security of sensitive data data gets encrypted on the sender side, and gets decrypted on the receiver side examples: SSL (Secure Sockets Layer) is used for encryption and decryption "},{"title":"Session layer (5)​","type":1,"pageTitle":"OSI (Open System Interconnection) Model","url":"docs/interviewPrep/system_design/OSI_model#session-layer-5","content":"it helps in setting up and managing connections enabling sending and receiving of data followed by termination of connections or sessions it has its own helpers called APIs (Application Programming Interface) examples: NetBIOS (Network Basic Input/Output System) it is an API example that allows applications on different computers to communicate with each other Authentication done before a session or connection is established with the serverit is a process of verifying who you are for this, server uses username and passwordwhen matched with the server, a connection or session is established between the server and your computer Authorization after authentication, authorization is checkedit is a process used by the server to determine if you have permission to access a file Session Management session layer keeps track of the files being downloaded webpage example it contains text and image files, and are stored as separate files on the web serverwhen you request a website on the web browser, it opens a separate session to the web server to download each of the text and image files separatelyfiles are received at the computer in the form of Data PacketsSession layer keeps tracks of which data packets belongs to which file and where it goes to (web browser for this case) the web browser performs all functions of Application, Presentation, and Session layer "},{"title":"Transport layer (4)​","type":1,"pageTitle":"OSI (Open System Interconnection) Model","url":"docs/interviewPrep/system_design/OSI_model#transport-layer-4","content":"controls the reliability of communication Segmentation​ data received from the Session layer is divided into small data units called Segments each Segment or data unit contains a source and destination Port number helps to direct the segment to the correct computer application a sequence number helps to reassemble segments in the correct order to form correct message at the receiver Flow Control​ controls the amount of data being transmittedexample: a mobile app connected to a server server can transmit a max data of 100 Mbpsmobile can process data with a max of 10 Mbpswhen mobile is downloading a file from a server if server sends data at 50 Mbps it is a a rate the mobile can't processmobile uses the Transport layer to tell the server to slow the data transmission rate to 10 Mbps so that no data gets lost if server sends data at 5 Mbps mobile uses the Transport layer to tell the server to increase the data trasmission rate to 10 Mbps to maintain system performance Error Control​ Automatic Repeat Request this is used when a data unit did not arrive at the destinationit helps to retransmit the lost or corrupted data unit from the server to the app Checksum it is added to each data unit by the Transport layer to find out the received corrupted or missing segment transport layer performs 2 types of services​ Connection-oriented Transmission done via TCP (Transmission Control Protocol) more reliable than UDP because it provides feedback you will know of the data delivery statusdata can be retransmitted if lost or corrupted used when whole data delivery is a must www (world wide web), email, FTP Connectionless Transmission done via UDP (User Datagram Protocol) UDP (User Datagram Protocol) faster than TCP because it provides no feedback you do not know of the data delivery status used when receiving of whole data is not necessary e.g.: online streaming movies, songs, games, voice over ip, TFTP (Trivial File Transfer Protocol), DNS (Domain Name System) "},{"title":"Network layer (3)​","type":1,"pageTitle":"OSI (Open System Interconnection) Model","url":"docs/interviewPrep/system_design/OSI_model#network-layer-3","content":"Transport Layer sends data segments to the network layerNetwork Layer works for the transmission of the recieved data segments from one computer to another located in different networksData Units in Network Layer is called Data PacketsThe Function of Network Layer are: Logical Addressing IPv4 &amp; IPv6 + Mask every computer in a network has a unique IP addressNetwork layer assigns sender and receiver IP address to each segment to form an IP Packet IP address are assigned to ensure each data packet can reached the correct destination Mask tells that the first 3 combination of an IP address represent the which network the last combination of the IP address represents which host or computer Routing it is a method of moving data packet from source to destinationit is based on the logical addressing format (IP addresses and Mask), routing decisions are made in the computer network Path Determination a computer can be connected to an internet server or a computer in a number of ways choosing the best possible path for delivery from source to destination is called path determination examples of protocols used to determine the best possible path for delivery OSPF (Open Shortest Path First) it is a link-state routing protocol BGP (Border Gateway Protocol) it is a standardized exterior gateway protocol IS-IS (Intermediate System to Intermediate System) it is a routing protocol "},{"title":"Data Link layer (2)​","type":1,"pageTitle":"OSI (Open System Interconnection) Model","url":"docs/interviewPrep/system_design/OSI_model#data-link-layer-2","content":"Data link layer receives data packets from network layer Data packets contains IP addresses of sender and receiver There are two types of addressing: Logical Addressing done at the Network layerwhere senders and receivers IP addresses are assigned to each segments to form a data packets Physical Addressing done at the Data Link layerhead is added infront of the IP packet, while the tail is added behindwhere MAC addresses of sender and receiver are assigned to each data packets to form a frameMAC Address is 12 digit Alpha-Character Number Data unit in data link layer is called Frame. it is embedded into the network card by the manufacturer Data Unit in Data Link layer is referred to as frame it is embedded as a software in NIC (Network Interface Card) of the computer it provide means to transfer data from 1 computer to another via a local media such as copper wire, optical fiber, and airmedia refers to the physical links between 2 computer or networks performs 2 basic function​ allows upper layer of OSI Model to access the media via techniques such as framing IP packet gets encapsulated into a frame before sending, upon receiving it gets decapsulated this process repeats itself until the data reaches its final destination controls how data is placed and received from the media via techniques such as media access control, and error detection multiple devices could be connected via a common media if 2 or more devices sends data at the same time there will be a possibility of collision of the 2 messages resulting in a useless message that no recipient can understand use CSMA (Carrier-Sense Multiple Access) to avoid such a situation it is a (MAC) Media Access Control protocolkeeps an eye on when the shared media is free so that device can transmit data to the receiverthis helps to control data transmission each frame contains bits which are used to detect errors in the receiver frame errors occur due to certain limitations of the media used for transporting data "},{"title":"Physical layer (1)​","type":1,"pageTitle":"OSI (Open System Interconnection) Model","url":"docs/interviewPrep/system_design/OSI_model#physical-layer-1","content":"Till now, Data from Application Layer has been segmented by Transport Layer - placed into Packets by Network Layerand Framed by Data Link Layer which is a sequence of binary 0's and 1's physical layer converts this binary bits into signals and transmit over local mediaIt can be an electrical signal in the case of Copper cable or LAN cable, Light signal in the case of Optical Fiber, and Radio Signal in the case of AIR So signal generated by physical layer depends on the type of media used to connect two devices At the receiver, Physical Layer receives signal and converts to bits and pass it to Data Link Layer as a FrameFrame is further decapsulated as data moves through higher layersFinally,data is moved to Application LayerApplication Layer Protocol makes the sender's message visible in the application in the receiver's computer screenIn this way, OSI model is helping to transfer data between different hosts So, these Seven Layers of OSI model are lying behind the smooth functioning of Internet "},{"title":"Proxies","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/proxies","content":"","keywords":""},{"title":"Proxy Server Types​","type":1,"pageTitle":"Proxies","url":"docs/interviewPrep/system_design/proxies#proxy-server-types","content":"Proxies can reside on the client’s local server or anywhere between the client and the remote serversA few types of proxy servers: "},{"title":"Open Proxy​","type":1,"pageTitle":"Proxies","url":"docs/interviewPrep/system_design/proxies#open-proxy","content":"It is a proxy server that is accessible by any Internet userGenerally, a proxy server only allows users within a network group (i.e. a closed proxy) to store and forward Internet services such as DNS or web pages to reduce and control the bandwidth used by the group With an open proxy, however, any user on the Internet is able to use this forwarding service2 famous open proxy types: Anonymous Proxy reveаls іts іdentіty аs а server but does not dіsclose the іnіtіаl IP аddressThough thіs proxy server cаn be dіscovered eаsіly іt cаn be benefіcіаl for some users аs іt hіdes their IP аddress Trаnspаrent Proxy Thіs proxy server аgаіn іdentіfіes іtself, аnd wіth the support of HTTP heаders, the fіrst IP аddress cаn be vіewed The mаіn benefіt of usіng thіs sort of server іs іts аbіlіty to cаche the websіtes "},{"title":"Reverse Proxy​","type":1,"pageTitle":"Proxies","url":"docs/interviewPrep/system_design/proxies#reverse-proxy","content":"It retrieves resources on behalf of a client from one or more servers These resources are then returned to the client, appearing as if they originated from the proxy server itself "},{"title":"Redundancy and Replication","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/redundancy_and_replication","content":"Redundancy and Replication Redundancy is the duplication of critical components or functions of a system with the intention of increasing the reliability of the system usually in the form of a backup or fail-safe, or to improve actual system performance e.g. if there is only one copy of a file stored on a single server, then losing that server means losing the file Since losing data is seldom a good thing we can create duplicate or redundant copies of the file to solve this problem Redundancy plays a key role in removing the single points of failure in the system provides backups if needed in a crisise.g. if we have two instances of a service running in production and one fails * the system can failover to the other one Replication means sharing information to ensure consistency between redundant resources such as software or hardware components, to improve reliability, fault-tolerance, or accessibility Replication is widely used in many database management systems (DBMS) usually with a master-slave relationship between the original and the copiesThe master gets all the updates which then ripple through to the slaves Each slave outputs a message stating that it has received the update successfully thus allowing the sending of subsequent updates","keywords":""},{"title":"SQL (Structured Query Language) vs. NoSQL","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL","content":"","keywords":""},{"title":"SQL​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#sql","content":"Relational databases store data in tables with rows and columnsEach row contains all the information about one entityeach column contains all the separate data pointsPopular relational databases: MySQL, Oracle, MS SQL Server, SQLite, Postgres, and MariaDBuses relational data model CREATE TABLE tag_list ( id INT PRIMARY KEY NOT NULL, post_id INT FOREIGN KEY REFERENCES post (id) NOT NULL, tag VARCHAR(50) NOT NULL )  "},{"title":"NoSQL​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#nosql","content":"common types of NoSQL:uses data models such as column storedocument storekey value / tuple storegraph databasesmultimodel databases "},{"title":"Key-Value Stores​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#key-value-stores","content":"Data is stored in an array of key-value pairsThe ‘key’ is an attribute name which is linked to a ‘value’e.g. Redis, Voldemort, and Dynamo "},{"title":"Document Databases​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#document-databases","content":"In these databases, data is stored in documents (instead of rows and columns in a table)these documents are grouped together in collectionsEach document can have an entirely different structurekey features: each record is stored with its associated data in a single documentfast readsquery languagedynamic schemause cases: cache, sessions, logging, CMS, blogging platforms, etc. looks similar to JSONe.g. CouchDB, MongoDB, Firebase, MarkLogic "},{"title":"Wide-Column Databases​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#wide-column-databases","content":"Instead of ‘tables,’ in columnar databases we have column families, which are containers for rowsUnlike relational databases, we don’t need to know all the columns up fronteach row doesn’t have to have the same number of columnsColumnar databases are best suited for analyzing large datasetse.g. Cassandra and HBase "},{"title":"Graph Databases​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#graph-databases","content":"These databases are used to store data whose relations are best represented in a graphData is saved in graph structures with nodes (entities) properties (information about the entities)and lines (connections between the entities) e.g. Neo4J and InfiniteGraph "},{"title":"High level differences between SQL and NoSQL​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#high-level-differences-between-sql-and-nosql","content":""},{"title":"Storage​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#storage","content":"SQL\tNoSQLstores data in tables where each row represents an entity\thave different data storage models each column represents a data point about that entity\tThe main ones are key-value, document, graph, and columnar e.g. if we are storing a car entity in a table, different columns could be ‘Color’, ‘Make’, ‘Model’, etc.\t "},{"title":"Schema​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#schema","content":"SQL\tNoSQLdefined schema\tschemaless each record conforms to a fixed schema\tschemas are dynamic meaning the columns must be decided and chosen before data entry and each row must have data for each column\tColumns can be added on the fly The schema can be altered later\teach row (or equivalent) doesn’t have to contain data for each column but it involves modifying the whole database and going offline\t "},{"title":"Querying​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#querying","content":"SQL\tNoSQLuse SQL (structured query language) for defining and manipulating the data, which is very powerful\tobject-based APIs queries are focused on a collection of documents Sometimes it is also called UnQL (Unstructured Query Language) Different databases have different syntax for using UnQL "},{"title":"Scalability​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#scalability","content":"SQL\tNoSQLvertically scalable (scale up)\thorizontally scalable (scale up and out) i.e., by increasing the horsepower (higher Memory, CPU, etc.) of the hardware, which can get very expensive\tmeaning we can add more servers easily in our NoSQL database infrastructure to handle a lot of traffic It is possible to scale a relational database across multiple servers\tAny cheap commodity hardware or cloud instances can host NoSQL databases but this is a challenging and time-consuming process.\tthus making it a lot more cost-effective than vertical scaling A lot of NoSQL technologies also distribute data across servers automatically "},{"title":"Reliability or ACID Compliancy (Atomicity, Consistency, Isolation, Durability)​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#reliability-or-acid-compliancy-atomicity-consistency-isolation-durability","content":"SQL\tNoSQLvast majority of relational databases are ACID compliant\tBASE (basically available, soft state, eventual consistency) compliant So, when it comes to data reliability and safe guarantee of performing transactions\tMost of the NoSQL solutions sacrifice ACID compliance for performance and scalability SQL databases are still the better bet\t "},{"title":"Available Tools​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#available-tools","content":"SQL\tNoSQLlost of tools for DB development\tapplications are the primary interface to the DB "},{"title":"SQL VS. NoSQL - Which one to use?​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#sql-vs-nosql---which-one-to-use","content":"When it comes to database technology, there’s no one-size-fits-all solution That’s why many businesses rely on both relational and non-relational databases for different needsEven as NoSQL databases are gaining popularity for their speed and scalability there are still situations where a highly structured SQL database may perform betterchoosing the right technology hinges on the use case "},{"title":"Reasons to use SQL database​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#reasons-to-use-sql-database","content":"reasons to choose a SQL database: We need to ensure ACID compliance ACID compliance reduces anomalies and protects the integrity of your database by prescribing exactly how transactions interact with the databaseGenerally, NoSQL databases sacrifice ACID compliance for scalability and processing speed but for many e-commerce and financial applications, an ACID-compliant database remains the preferred option Your data is structured and unchanging If your business is not experiencing massive growth that would require more serversif you’re only working with data that is consistent then there may be no reason to use a system designed to support a variety of data types and high traffic volume "},{"title":"Reasons to use NoSQL database​","type":1,"pageTitle":"SQL (Structured Query Language) vs. NoSQL","url":"docs/interviewPrep/system_design/SQL_vs_NoSQL#reasons-to-use-nosql-database","content":"When all the other components of our application are fast and seamless NoSQL databases prevent data from being the bottleneckBig data is contributing to a large success for NoSQL databases mainly because it handles data differently than the traditional relational databases e.g. popular examples of NoSQL databases: MongoDB, CouchDB, Cassandra, and HBase Storing large volumes of data that often have little to no structure A NoSQL database sets no limits on the types of data we can store togetherallows us to add new types as the need changesWith document-based databases can store data in one place without having to define what “types” of data those are in advance Making the most of cloud computing and storage Cloud-based storage is an excellent cost-saving solution but requires data to be easily spread across multiple servers to scale upUsing commodity (affordable, smaller) hardware on-site or in the cloud saves you the hassle of additional softwareNoSQL databases like Cassandra are designed to be scaled across multiple data centers out of the box without hassles Rapid development NoSQL is extremely useful for rapid development as it doesn’t need to be prepped ahead of timeIf you’re working on quick iterations of your system which require making frequent updates to the data structure without a lot of downtime between versions a relational database will slow you down "},{"title":"Web","type":0,"sectionRef":"#","url":"docs/interviewPrep/system_design/web/","content":"","keywords":""},{"title":"Rendering​","type":1,"pageTitle":"Web","url":"docs/interviewPrep/system_design/web/#rendering","content":"Order\tClient Side Rendering\tServer Side Rendering\tPre-rendering / Static Site Generation1\tUser requests a website\tUser requests a website\tUser requests a website 2\tServer sends HTML file with JavaScript links\tServer creates ready HTML files\tServer sends static HTML file with JavaScript resources 3\tBrowser downloads HTML\tBrowser renders HTML, but it's not interactive\tBrowser renders HTML and downloads JavaScript 4\tBrowser downloads CSS and JavaScript\tBrowser downloads JavaScript\tUser see the static page, not interactive 5\tBrowser executes framework or library\tBrowser executes JavaScript\tUser is redirected to right file 6\tBrowser loads the website\tWebsite is fully interactive\tWebsite is fully interactive "},{"title":"Pros​","type":1,"pageTitle":"Web","url":"docs/interviewPrep/system_design/web/#pros","content":"Client Side Rendering\tServer Side Rendering\tPre-rendering / Static Site Generationfast rendering after initial loading\tSearch engines bots can crawl for a better SEO\tbetter user experience for the first loading good for web apps with lots of logic, and needs authorization\tInitial loading is faster\tbetter SEO a lot of JavaScript frameworks and libraries supporting it less requests than with SSR "},{"title":"Cons​","type":1,"pageTitle":"Web","url":"docs/interviewPrep/system_design/web/#cons","content":"Client Side Rendering\tServer Side Rendering\tPre-rendering / Static Site Generationlow Search Engine Optimization (SEO)\tlots of server requests\tneed to wait for interactivity until JavaScript is loaded initial loading may take some time\tfull page reloads\tneed to provide user-friendly design for the first loading if data is required slow rendering when app has a lot of interactivity\t "},{"title":"Usage​","type":1,"pageTitle":"Web","url":"docs/interviewPrep/system_design/web/#usage","content":"Client Side Rendering\tServer Side Rendering\tPre-rendering / Static Site Generationif app has a lot of dynamic data\tif app UI is complex but with a small amount of interactivity\tif app has a UI with contents used for SEO if app has very complex UI\tif app is a more static page\tif part of app is available for users without authentication if app is focused on a bigger number of users\tif the amount of users is not large\tif don't want to use SSR, but need to improve loading time and SEO if app needs authorization to be accessed if app has more static content on the first page if app doesn't have a lot of content used for SEO  "},{"title":"Frameworks / Libraries​","type":1,"pageTitle":"Web","url":"docs/interviewPrep/system_design/web/#frameworks--libraries","content":"React can be used for all 3 types Client Side Rendering\tServer Side Rendering\tPre-rendering / Static Site GenerationReact\tJinja2 on Django\tNextJS (React) Angular\tJinja2 on Flask\tGatsby Vue\tEmbedded JavaScript templates on ExpressJS\tHugo jQuery\tReact on ExpressJS Ruby on Rails ASP.NET CORE\t "},{"title":"Programming Languages","type":0,"sectionRef":"#","url":"docs/languageSpecific/","content":"","keywords":""},{"title":"compile .cpp & .h files together​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#compile-cpp--h-files-together","content":""},{"title":"syntax: -Wall: check for errors​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#syntax--wall-check-for-errors","content":"-o: is an output fileoutput file name: zzz.cpp and .h filesold method of building g++ -Wall -o zzz xxx.cpp abc.h new method of building g++ -Wall -o zzz xxx.cpp run built file ./zzz Run C files "},{"title":"same as above but add -x c when compiling​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#same-as-above-but-add--x-c-when-compiling","content":"g++ -x c -Wall -o zzz xxx.c abc.h "},{"title":"OR​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#or","content":"clang -o zzz xxx.c abc.h "},{"title":"OR​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#or-1","content":"make xxx "},{"title":"If .h header file is in another directory need to use -I​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#if-h-header-file-is-in-another-directory-need-to-use--i","content":"g++ -I /fullpath/myproject xxx.cpp /fullpath/myproject/header/yyy.h "},{"title":"use ./ to run file​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#use--to-run-file","content":"./zzz "},{"title":"if no output file name is defined earlier​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#if-no-output-file-name-is-defined-earlier","content":"ouput file will automatically create an a.out fileto run ./a.out Run C# files Need to have Mono platform to compile and run code if using MacOS brew install mono "},{"title":"compile file​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#compile-file","content":"mcs xxx.cs xxx.exe will be created "},{"title":"run file​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#run-file","content":"mono xxx.exe Run Java files xxx.java file name must be the same as public class namenote: it is case sensitive "},{"title":"compile xxx.java file with javac in terminal​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#compile-xxxjava-file-with-javac-in-terminal","content":"javac xxx.java "},{"title":"java class will be created, run class file with java​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#java-class-will-be-created-run-class-file-with-java","content":"java xxx "},{"title":"java 11 onwards, class will not be created, javac not required​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#java-11-onwards-class-will-not-be-created-javac-not-required","content":"compile and run java file java xxx.java "},{"title":"compile and run at the same time​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#compile-and-run-at-the-same-time","content":"javac xxx.java &amp;&amp; java xxx "},{"title":"using package​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#using-package","content":"e.g.: Main.java package com.example.java; public class Main { public static void main(String[] args) { System.out.println(&quot;Hello from Java!&quot;); } }  "},{"title":"at root directory of project​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#at-root-directory-of-project","content":"compile file​ javac ./com/example/java/Main.java run file​ java com.example.java.Main "},{"title":"using modularity​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#using-modularity","content":"compile javac -d ./mods/ --module-source-path src $(find src -name &quot;*.java&quot;) run without optional dependencies java --module-path mods/ -m com.domain.module/com.domain.module.Main run with optional dependencies java --module-path mods/ --add-modules com.domain.optionalmodule -m com.domain.module/com.domain.module.Main Run Typescript files "},{"title":"run typescript files without compiling with ts-node in terminal (no javascript created)​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#run-typescript-files-without-compiling-with-ts-node-in-terminal-no-javascript-created","content":"ts-node xxx.ts "},{"title":"compile xxx.ts file with tsc in terminal​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#compile-xxxts-file-with-tsc-in-terminal","content":"tsc ./xxx.ts "},{"title":"javascript file will be created, run file with node​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#javascript-file-will-be-created-run-file-with-node","content":"node xxx.js Run Javascript files "},{"title":"run with nodeJS​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#run-with-nodejs","content":"node filename.js "},{"title":"open nodejs shell​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#open-nodejs-shell","content":"node Run Python files "},{"title":"run with python 2​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#run-with-python-2","content":"python2 filename.py "},{"title":"open python 2 shell​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#open-python-2-shell","content":"python2 "},{"title":"run with python 3​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#run-with-python-3","content":"python3 filename.py "},{"title":"open python 3 shell​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#open-python-3-shell","content":"python3 Run Ruby files ruby filename.rb "},{"title":"open ruby shell​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#open-ruby-shell","content":"irb Run assembly files nasm compiler must be installed if using MacOS brew install nasm "},{"title":"compile & run x86 32 bit files​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#compile--run-x86-32-bit-files","content":""},{"title":"compile​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#compile","content":"nasm -f macho xxx32.asm &amp;&amp; ld -macosx_version_min 10.7.0 -o xxx32 xxx32.o "},{"title":"run​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#run","content":"./xxx32 "},{"title":"compile & run x86_64 64 bit files​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#compile--run-x86_64-64-bit-files","content":""},{"title":"compile​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#compile-1","content":"nasm -f macho64 xxx64.asm &amp;&amp; ld -macosx_version_min 10.7.0 -lSystem -o xxx64 xxx64.o "},{"title":"run​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#run-1","content":"./xxx64 Run Groovy "},{"title":"Open GroovyShell to use the dynamic interpreter on the terminal​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#open-groovyshell-to-use-the-dynamic-interpreter-on-the-terminal","content":"in the command line type groovysh "},{"title":"Open GroovyConsole to open an external UI interface editor​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#open-groovyconsole-to-open-an-external-ui-interface-editor","content":"in the command line type groovyConsole "},{"title":"Execute groovy code on the command line​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#execute-groovy-code-on-the-command-line","content":"groovy -e &quot;println 'Hello, World!'&quot; "},{"title":"Run groovy file​","type":1,"pageTitle":"Programming Languages","url":"docs/languageSpecific/#run-groovy-file","content":"groovy hello.groovy or groovy hello Compile Latex file xelatex filename.tex "},{"title":"c# summary notes","type":0,"sectionRef":"#","url":"docs/languageSpecific/cSharp/","content":"","keywords":""},{"title":"C# vs .NET​","type":1,"pageTitle":"c# summary notes","url":"docs/languageSpecific/cSharp/#c-vs-net","content":"C# is a programming language.NET is a framework It consists of a run-time environment (CLR) and a class library that we use for building applications "},{"title":"Common Language Runtime (CLR)​","type":1,"pageTitle":"c# summary notes","url":"docs/languageSpecific/cSharp/#common-language-runtime-clr","content":"When you compile an application, C# compiler compiles your code to IL (Intermediate Language) codeIL code is platform agnostics, which makes it possible to a take a C# program on a different computer with different hardware architecture and operating system and run it For this to happen, we need CLR When you run a C# application, CLR compiles the IL code into the native machine code for the computer on which it is running This process is called Just-in-time Compilation (JIT) "},{"title":"Architecture of .NET Applications​","type":1,"pageTitle":"c# summary notes","url":"docs/languageSpecific/cSharp/#architecture-of-net-applications","content":"In terms of architecture, an application written with C# consists of building blocks called classes A class is a container for data (attributes) and methods (functions) Attributes represent the state of the applicationMethods include code they have logicThat's where we implement our algorithms and write code "},{"title":"Namespace​","type":1,"pageTitle":"c# summary notes","url":"docs/languageSpecific/cSharp/#namespace","content":"A namespace is a container for related classesSo as your application grows in size, you may want to group the related classes into various namespaces for better maintainabilityAs the number of classes and namespaces even grow further, you may want to physically separate related namespaces into separate assemblies An assembly is a file (DLL or EXE) that contains one or more namespaces and classes An EXE file represents a program that can be executedA DLL is a file that includes code that can be re-used across different programs "},{"title":"Classes vs Structures​","type":1,"pageTitle":"c# summary notes","url":"docs/languageSpecific/cSharp/#classes-vs-structures","content":"Use struct instead of class if instances of type are small &amp; commonly short-lived / are commonly embedded in other objectsAvoid defining a struct unless the type has all of the following characteristics it logically represents a single value, similar to primitive types (int, double, etc.)it has an instance size under 16 bytesit is immutableit will not have to be boxed frequently type Struct (structure) is a value type All primitive types are structures (int, char, bool, etc.) // example 1 // since a and b are value types, they are independent of each other int a = 10; int b = a; b++; System.Console.WriteLine($&quot;{a}, {b}&quot;); // 10, 11   // example 2 public class Program { public static void Main() { int number = 1; Increment(number); System.Console.WriteLine(number); // value will still be 1 } public static void increment(int number) { number += 10; } } ```  Class is a reference type Non primitive types are classes (Arrays, Strings, etc.) // example 1 // since array1 &amp; array2 is a reference of the heap, when either 1 is modified, the rest will be affected int[] array1 = new int[3] {1, 2, 3}; int[] array2 = array1; array2[0] = 0; System.Console.WriteLine($&quot;{array1}, {array2}&quot;); // [0, 2, 3], [0, 2, 3]   // example 2 public class Person { public int Age; } public class Program { public static void Main() { Person person = new Person() {Age=20}; increment(person); System.Console.WriteLine(person.Age); // 30 } public static void increment(Person person) { person.Age += 10; } } ```  Storage Memory of Structs are stored on stackMemory of Classes are stored on heap Memory Value types hold their value in memory where they are declared memory is allocated on stack and is done automatically Reference types hold a reference to an object in memory Need to allocate memory Destroy Value types are destroyed immediately after the scope is lost Data will be immediately removed when out of scope Only reference variables in reference types are destroyed after the scope is lost data will remain in the memory temporarythe object is later destroyed by garbage collector Copy When a struct is copied into another struct, a new copy of that struct gets created &amp; modifications on 1 struct will not affect the values contained by the other structWhen a class is copied into another class, only get a copy of the reference variable both the reference variables point to the same object on the heapoperations on 1 variable will affect the values contained by the other reference variable Destructors Structs can't have destructorsClasses can have destructors Explicit parameter Structs cannot have explicit parameter &amp; constructorClasses can have explicit parameter &amp; constructor Inheritance Structs can't inherit from another classClass can inherit from another classBoth structs and classes can inherit from an interfaceBoth structs and classes cannot inherit from another struct (Struct are sealed types) "},{"title":"Abstract classes vs Interfaces​","type":1,"pageTitle":"c# summary notes","url":"docs/languageSpecific/cSharp/#abstract-classes-vs-interfaces","content":"abstract classes can have implementations for some of its methods interfaces cannot have any implementations for all of its methods abstract classes can have fields (variable declared outside of a method) interfaces cannot have fields abstract classes can inherit from another abstract class or another interface interface can only inherit from another interface abstract classes can only inherit from 1 class or multiple interfaces at the same time interface can only inherit from 1 or multiple interfaces at the same time abstract class members can have access modifiers (public, private, protected, etc) interface cannot have access modifiers "},{"title":"Groovy","type":0,"sectionRef":"#","url":"docs/languageSpecific/groovy/","content":"","keywords":""},{"title":"Both Interpreted And Compiled Language​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#both-interpreted-and-compiled-language","content":"it is a Java-syntax-compatible object-oriented programming language for the Java platformis both a static and dynamic language with features similar to those of Pythoncan be used as both a programming language and a scripting language for the Java Platform it is compiled to Java byte code that can run on the Java virtual machine (JVM)interoperates seamlessly with other Java code and libraries allows optionally-typed dynamic capabilities do not need to spell out the type of field allows advance programming meta-programming, functional programming, closures supports authoring of domain-specific languages jenkins file: to create a built pipeline with jenkinsgradle build script requires installation of Java Development Kit (JDK) to workallows duck typing: provides the option to use the def keyword to determine the type at runtimecan also have a variable assign a concrete type can tell groovy compiler to enforce static typing if needed auto generates getter and setter methods at runtime for class memberscontains Abstract Syntax Tree (AST) transformations: provides annotations for generating methods at runtime such as defining constructors, equals, hashCode, toString methods automatically imports commonly-used packages like java.util.* and java.io.* makes the default modifier as public, leading to less verbose codesemicolons are optional, only required if want to define more than 1 statement on a single line "},{"title":"GroovyShell and Console​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#groovyshell-and-console","content":"they are tools for running Groovy without a compilerGroovyShell is a read-eval-print loop (REPL) interpreterGroovy Console is a UI for executing a single-line Groovy statements "},{"title":"Hello World​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#hello-world","content":"using dynamic type method println &quot;Hello World&quot;  using static type method class HelloWorld { static void main(String[] args) { // semicolons are optional // only needed if defining more than 1 statement on a single line println(&quot;Hello World&quot;); } }  "},{"title":"Variable declaration​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#variable-declaration","content":"follows java syntax int age = 40 // print variable type println(age.getClass())  "},{"title":"Duck typing​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#duck-typing","content":"having the option to use a particular keyword for this case def to determine the type at runtime def msg = &quot;string&quot;  "},{"title":"Strings​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#strings","content":"String test = &quot;test&quot; println test // test println test.dropRight(1) // tes println test // test  "},{"title":"Imports​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#imports","content":"automatically imports commonly used packages like java.util.* and java.io.* import com.example.SomePackage  "},{"title":"Conditional Statements​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#conditional-statements","content":"int age = 40 if (age == 40) { println &quot;You are 40&quot; } else if (age &gt; 40) { println &quot;You are older than 40&quot; } else { println &quot;You are younger than 40&quot; }  "},{"title":"Loops​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#loops","content":"def strArr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]; for (String s : strArr) { println(s) }  "},{"title":"Class​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#class","content":"Getter and Setter method are auto generated at runtime for class members class Person { String firstName String lastName int age String getFullName() { firstName + &quot; &quot; + lastName // method 1 // return firstName + &quot; &quot; + lastName // method 2 } } // method 1 Person person = new Person() person.setFirstName(&quot;John&quot;); // auto generated and not required to define person.setLastName(&quot;Doe&quot;); person.setAge(48); println(person.getFullName()) // auto generated and not required to define println(person.getAge()) // method 2: auto set via constructor Person person2 = new Person(&quot;firstName&quot;: &quot;Mary&quot;, &quot;lastName&quot;: &quot;Hill&quot;, &quot;age&quot;: 40) println(person2.getFullName()) println(person2.getAge())  "},{"title":"Access modifier​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#access-modifier","content":"default modifier is public class Operator {}  "},{"title":"Annotations​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#annotations","content":"it provides annotations for generating methods at runtime // method 1: without annotations class Person { String firstName String lastName int age Person() {} Person(String firstName, String lastName, int age) { this.firstName = firstName this.lastName = lastName this.age = age } String getFullName() { return firstName + &quot; &quot; + lastName } @Override boolean equals(o) { if (this.is(o)) { return true } if (!(o instanceof Person)) { return false } Person person = (Person) o if (age != person.age) { return false } if (firstName != person.firstName) { return false } if (lastName != person.lastName) { return false } return true } @Override int hashCode() { int result result = (firstName != null ? firstName.hashCode() : 0) result = 31 * result + (lastName != null ? lastName.hashCode() : 0) result = 31 * result + age return result } @Override String toString() { return &quot;Person(&quot; + firstName + &quot;, &quot; + lastName + &quot;, &quot; + age + &quot;, &quot; + getFullName() + &quot;)&quot;; } } Person person = new Person(&quot;firstName&quot;: &quot;Mary&quot;, &quot;lastName&quot;: &quot;Hill&quot;, &quot;age&quot;: 40) assert person.toString() == &quot;Person(Mary, Hill, 40, Mary Hill)&quot; assert person.equals(person2) assert !person.equals(new Person(&quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Doe&quot;, &quot;age&quot;: 30)) assert new Person(&quot;firstName&quot;: &quot;Mary&quot;, &quot;lastName&quot;: &quot;Hill&quot;, &quot;age&quot;: 40).toString() == &quot;Person(Mary, Hill, 40, Mary Hill)&quot;  // method 2: using annotation import groovy.transform.ToString import groovy.transform.EqualsAndHashCode import groovy.transform.TupleConstructor @ToString @EqualsAndHashCode @TupleConstructor class Person { String firstName String lastName int age String getFullName() { return firstName + &quot; &quot; + lastName } } Person person = new Person(&quot;firstName&quot;: &quot;Mary&quot;, &quot;lastName&quot;: &quot;Hill&quot;, &quot;age&quot;: 40) assert person.toString() == &quot;Person(Mary, Hill, 40, Mary Hill)&quot; assert person.equals(person2) assert !person.equals(new Person(&quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Doe&quot;, &quot;age&quot;: 30)) assert new Person(&quot;firstName&quot;: &quot;Mary&quot;, &quot;lastName&quot;: &quot;Hill&quot;, &quot;age&quot;: 40).toString() == &quot;Person(Mary, Hill, 40, Mary Hill)&quot;  // method 3: using Canonical import groovy.transform.Canonical @Canonical class Person { String firstName String lastName int age String getFullName() { return firstName + &quot; &quot; + lastName } } Person person = new Person(&quot;firstName&quot;: &quot;Mary&quot;, &quot;lastName&quot;: &quot;Hill&quot;, &quot;age&quot;: 40) assert person.toString() == &quot;Person(Mary, Hill, 40, Mary Hill)&quot; assert person.equals(person2) assert !person.equals(new Person(&quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Doe&quot;, &quot;age&quot;: 30)) assert new Person(&quot;firstName&quot;: &quot;Mary&quot;, &quot;lastName&quot;: &quot;Hill&quot;, &quot;age&quot;: 40).toString() == &quot;Person(Mary, Hill, 40, Mary Hill)&quot;  "},{"title":"Error handling​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#error-handling","content":"String test = &quot;test&quot; try { test.toLong() } catch (NumberFormatException e) { assert e instanceof NumberFormatException println &quot;Cannot convert a String into a Long&quot; }  "},{"title":"Closures​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#closures","content":"it is an anonymous block of code defined within curly bracesit is essential to writing and using domain-specific languagesexecuted on demandused heavily across the Groovy API import groovy.transform.Canonical @Canonical class Person { String firstName String lastName int age } Person person = new Person() person.setFirstName(&quot;John&quot;); person.setLastName(&quot;Doe&quot;); person.setAge(48);  // method 1 Closure personToString = { println person.toString() } personToString() // Person(John, Doe, 48) // method 2 Closure personToString2 = { Person _person -&gt; println _person.toString() } personToString2(person) // Person(John, Doe, 48) // method 3: pass Closure to a method and execute it def handlePerson(Closure c, Person p) { if (p == null) { throw new RuntimeException(&quot;Person is null&quot;) } c(p) } handlePerson(personToString2, person) // Person(John, Doe, 48) // prints full name of a person Closure personFullName = { Person _person -&gt; println _person.firstName + &quot; &quot; + person.lastName } handlePerson(personFullName, person) // John Doe  "},{"title":"Collections​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#collections","content":"Groovy simplifies collection handlingprovides methods for manipulation, filtering, sorting, and querying entriesclosures are central element in collection usage import groovy.transform.Canonical @Canonical class Person { String firstName String lastName int age } Person johnDoe = new Person(&quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Doe&quot;, &quot;age&quot;: 40) Person maryHill = new Person(&quot;firstName&quot;: &quot;Mary&quot;, &quot;lastName&quot;: &quot;Hill&quot;, &quot;age&quot;: 30) Person thomasMarks = new Person(&quot;firstName&quot;: &quot;Thomas&quot;, &quot;lastName&quot;: &quot;Marks&quot;, &quot;age&quot;: 21)  // create a list def persons = [johnDoe, maryHill, thomasMarks] // querying collections assert persons instanceof List assert persons.size() == 3 assert persons[2] == thomasMarks // iterate over elements persons.each { println it } // Person(John, Doe, 40) // Person(Mary, Hill, 30) // Person(Thomas, Marks, 21) // iterate over elements and using an index persons.eachWithIndex { Person entry, int i -&gt; println i + &quot;: &quot; + entry } // 0: Person(John, Doe, 40) // 1: Person(Mary, Hill, 30) // 2: Person(Thomas, Marks, 21) // filtering a specific element persons.find { it.lastName == &quot;Hill&quot; } == maryHill // true // transforming elements into something else persons.collect { it.age &lt;= 30 } == [false, true, true] // true // sorting elements based on a criterion persons.sort { it.age } == [thomasMarks, maryHill, johnDoe] // true  "},{"title":"File System​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#file-system","content":""},{"title":"Reading Files​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#reading-files","content":"manages underlying file handleautomatically closes file resources even in error conditions import groovy.transform.Canonical @Canonical class Person { String firstName String lastName int age } Person johnDoe = new Person()  // read full contents of file File file = new File(&quot;./john-doe.txt&quot;) println file.getText(&quot;UTF-8&quot;) // iterate over each line of file file.eachLine { line, no -&gt; if (no == 1) { johnDoe.setFirstName(line) } else if (no == 2) { johnDoe.setLastName(line) } else if (no == 3) { johnDoe.setAge(line.toInteger()) } else { throw new RuntimeException(&quot;A person text file should only have 3 lines&quot;) } } println johnDoe  def readAllNumbers() { File resourcesDir = new File(&quot;resources&quot;) // folder name at current location List&lt;Integer&gt; allNumbers = [] resourcesDir.eachFile { file -&gt; file.eachLine { line -&gt; if (line.isNumber()) { allNumbers &lt;&lt; line.toInteger() } } } return allNumbers } // read numbers from files and store them in List List&lt;Integer&gt; allNumbers = readAllNumbers() println allNumbers // [30, 12, 40] // find the highest number Integer maxNumber = allNumbers.max() assert maxNumber == 40 // create the sum of all numbers Integer sum = allNumbers.sum() assert sum == 82  "},{"title":"Writing files​","type":1,"pageTitle":"Groovy","url":"docs/languageSpecific/groovy/#writing-files","content":"able to populate a file with plain-text contentprovides shortcuts for appending to file contentserializing objects with a single method call import groovy.transform.Canonical @Canonical class Person implements Serializable { // only required for serializing String firstName String lastName int age } Person johnDoe = new Person()  // create a file and populate contents File textFile = new File(&quot;./mary-hill.txt&quot;) textFile.withWriter(&quot;UTF-8&quot;) { writer -&gt; writer.writeLine(&quot;Mary&quot;) writer.writeLine(&quot;Hill&quot;) writer.writeLine(&quot;30&quot;) } // appending contents to a file textFile.append(&quot;1&quot;) // method 1: adds to a new line textFile &lt;&lt; &quot;2&quot; // method 2: adds to the end of the file // serializing an object to a file Person thomasMarks = new Person(&quot;Thomas&quot;, &quot;Marks&quot;, 21) File binFile = new File(&quot;./thomas-marks.bin&quot;) binFile.withObjectOutputStream { out -&gt; out.writeObject(thomasMarks) }  "},{"title":"HTML","type":0,"sectionRef":"#","url":"docs/languageSpecific/html/","content":"","keywords":""},{"title":"Normal vs Async vs Defer Script tags​","type":1,"pageTitle":"HTML","url":"docs/languageSpecific/html/#normal-vs-async-vs-defer-script-tags","content":" "},{"title":"Demos","type":0,"sectionRef":"#","url":"docs/languageSpecific/java/demo/","content":"","keywords":""},{"title":"Threads wasting CPU cycles demo​","type":1,"pageTitle":"Demos","url":"docs/languageSpecific/java/demo/#threads-wasting-cpu-cycles-demo","content":"/** * Threads that waste CPU cycles * uses java 11 * run command: javac ThreadProcessDemo.java &amp;&amp; java ThreadProcessDemo */ // a simple thread that wastes CPU cycles forever class CPUWaster extends Thread { public void run() { while (true) {} } } public class ThreadProcessDemo { public static void main(String args[]) throws InterruptedException { // display current information about this process Runtime rt = Runtime.getRuntime(); long usedKB = (rt.totalMemory() - rt.freeMemory()) / 1024 ; System.out.format(&quot; Process ID: %d\\n&quot;, ProcessHandle.current().pid()); System.out.format(&quot;Thread Count: %d\\n&quot;, Thread.activeCount()); System.out.format(&quot;Memory Usage: %d KB\\n&quot;, usedKB); // start 6 new threads System.out.println(&quot;\\nStarting 6 CPUWaster threads...\\n&quot;); for (int i=0; i&lt;6; i++) new CPUWaster().start(); // display current information about this process usedKB = (rt.totalMemory() - rt.freeMemory()) / 1024 ; System.out.format(&quot; Process ID: %d\\n&quot;, ProcessHandle.current().pid()); System.out.format(&quot;Thread Count: %d\\n&quot;, Thread.activeCount()); System.out.format(&quot;Memory Usage: %d KB\\n&quot;, usedKB); } }  "},{"title":"Concurrency execution scheduling​","type":1,"pageTitle":"Demos","url":"docs/languageSpecific/java/demo/#concurrency-execution-scheduling","content":"/** * Two threads chopping vegetables * uses java 11 * run command: javac ExecutionSchedulingDemo.java &amp;&amp; java ExecutionSchedulingDemo */ class VegetableChopper extends Thread{ public int vegetable_count = 0; public static boolean chopping = true; public VegetableChopper(String name) { this.setName(name); } public void run() { while(chopping) { System.out.println(this.getName() + &quot; chopped a vegetable!&quot;); vegetable_count++; } } } public class ExecutionSchedulingDemo { public static void main(String args[]) throws InterruptedException { VegetableChopper barron = new VegetableChopper(&quot;Barron&quot;); VegetableChopper olivia = new VegetableChopper(&quot;Olivia&quot;); barron.start(); // Barron start chopping olivia.start(); // Olivia start chopping Thread.sleep(1000); // continue chopping for 1 second VegetableChopper.chopping = false; // stop chopping barron.join(); olivia.join(); System.out.format(&quot;Barron chopped %d vegetables.\\n&quot;, barron.vegetable_count); System.out.format(&quot;Olivia chopped %d vegetables.\\n&quot;, olivia.vegetable_count); } }  "},{"title":"GUI example","type":0,"sectionRef":"#","url":"docs/languageSpecific/java/GUI/","content":"GUI example ContactUI.java public class ContactUI extends javax.swing.JFrame { private javax.swing.JButton jButton1; private javax.swing.JLabel jLabel1; private javax.swing.JLabel jLabel2; private javax.swing.JLabel jLabel3; private javax.swing.JPanel jPanel1; private javax.swing.JPanel jPanel2; private javax.swing.JTextField jTextField1; private javax.swing.JTextField jTextField2; private javax.swing.JTextField jTextField3; /** * Creates new form ContactUI */ public ContactUI() { initComponents(); } /** * This method is called from within the constructor to initialize the form. * WARNING: Do NOT modify this code. The content of this method is always * regenerated by the Form Editor. */ @SuppressWarnings(&quot;unchecked&quot;) private void initComponents() { jPanel1 = new javax.swing.JPanel(); jLabel1 = new javax.swing.JLabel(); jTextField1 = new javax.swing.JTextField(); jLabel2 = new javax.swing.JLabel(); jTextField2 = new javax.swing.JTextField(); jPanel2 = new javax.swing.JPanel(); jLabel3 = new javax.swing.JLabel(); jTextField3 = new javax.swing.JTextField(); jButton1 = new javax.swing.JButton(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(&quot;Name&quot;)); jPanel1.setName(&quot;&quot;); // NOI18N jPanel1.setOpaque(false); jLabel1.setText(&quot;First Name:&quot;); jTextField1.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jTextField1ActionPerformed(evt); } }); jLabel2.setText(&quot;Last Name: &quot;); jTextField2.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jTextField2ActionPerformed(evt); } }); javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1); jPanel1.setLayout(jPanel1Layout); jPanel1Layout.setHorizontalGroup( jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel1Layout.createSequentialGroup() .addGap(38, 38, 38) .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false) .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE) .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) .addGap(18, 18, 18) .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false) .addComponent(jTextField1) .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)) .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) ); jPanel1Layout.setVerticalGroup( jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel1Layout.createSequentialGroup() .addContainerGap() .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE) .addComponent(jLabel1) .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE) .addComponent(jLabel2) .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)) .addContainerGap(55, Short.MAX_VALUE)) ); jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(&quot;E-mail&quot;)); jLabel3.setText(&quot;Email&quot;); jTextField3.setToolTipText(&quot;&quot;); javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2); jPanel2.setLayout(jPanel2Layout); jPanel2Layout.setHorizontalGroup( jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel2Layout.createSequentialGroup() .addGap(44, 44, 44) .addComponent(jLabel3) .addGap(50, 50, 50) .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE) .addContainerGap(28, Short.MAX_VALUE)) ); jPanel2Layout.setVerticalGroup( jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel2Layout.createSequentialGroup() .addGap(25, 25, 25) .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE) .addComponent(jLabel3) .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)) .addContainerGap(58, Short.MAX_VALUE)) ); jButton1.setText(&quot;Done&quot;); jButton1.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton1ActionPerformed(evt); } }); javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane()); getContentPane().setLayout(layout); layout.setHorizontalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addContainerGap() .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false) .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))) .addGroup(layout.createSequentialGroup() .addGap(151, 151, 151) .addComponent(jButton1))) .addContainerGap(63, Short.MAX_VALUE)) ); layout.setVerticalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addContainerGap() .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED) .addComponent(jButton1) .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) ); pack(); } private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) { // TODO add your handling code here: } private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) { // TODO add your handling code here: } private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) { System.exit(0); } /** * @param args the command line arguments */ public static void main(String args[]) { /* Set the Nimbus look and feel */ try { for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { if (&quot;Nimbus&quot;.equals(info.getName())) { javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(ContactUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (InstantiationException ex) { java.util.logging.Logger.getLogger(ContactUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(ContactUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(ContactUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } /* Create and display the form */ java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new ContactUI().setVisible(true); } }); } } Contacts.java import javax.swing.JFrame; public class Contacts { /** * @param args the command line arguments */ public static void main(String[] args) { JFrame frame = new ContactUI(); frame.setTitle(&quot;GUI Test&quot;); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } } ","keywords":""},{"title":"Java 9","type":0,"sectionRef":"#","url":"docs/languageSpecific/java/java9/","content":"","keywords":""},{"title":"What it is trying to solve​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#what-it-is-trying-to-solve","content":""},{"title":"Java 8​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#java-8","content":"limited in terms of expressing modularity beyond a single package once a class is public, there is no further way to control which classes in other packages can see it its all or nothing path of the class that is stored on disk is intertwined with the package hierarchy means that how you organize the package hierarchies must be aligned with the accessibility that you want to assign to your class example 1 package example works fine all packages are inside the movement package multiple packages example will not compile "},{"title":"Java 9 improvements​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#java-9-improvements","content":"class ccessibility JPMS offers better controls to expose classes classpath hell JPMS maintains class integritycan be verified by static analysissupport for versioning controlling the system footprint a large chunk of the JDK libraries were delivered as 1 big JAR file rt.jarby java 8, it had grown to over 66 MB of line codetypical apps will not use all 66 MB, so why make all of it available at runtimethus the rt.jar has been modularized libraries that used to eist in rt.jar have now been segmented into smaller JMOD files a new file format to package modules "},{"title":"Module-info​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#module-info","content":"Regular java classModule-related syntax onlymodule meta-data available at runtimeproviding fidelity across phrases1 module-info per moduledeclared at the root of modulemandatory for JPMScreates a namespace for the modulemust be globally unique, like package namesno duplicationmodules dictate how packages are stored on file systemmodule hierarchies must match filesystem hierarchiessegregated package hierarchiesmodules could each have their own codebase and lifecycles, but is not a mustfilename module-info.java module module.name { // 1 exports package.name.a; // 2 exports package.name.b to other.module.name.a; // 3 requires other.module.name.b; // 4 }  "},{"title":"Module name​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#module-name","content":"first line contains module keyword followed by module name module.name in given example Module naming convention is similar to package convention reversed domain notation: domainName.module domain name: organization.commodule: projectmodule name in module-info: com.organization.project "},{"title":"Module API​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#module-api","content":"The second line declares that classes from a package.name.a may be accessible for other modulesModule descriptor can export multiple packages, each on a separate line "},{"title":"Restricted API​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#restricted-api","content":"Line #3 declares that package package.name.b is accessible only for other.module.name.aThis functionality should be use carefully, it brakes the rule that module knows only depended modulesIt also increases coupling of modules "},{"title":"Module dependency​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#module-dependency","content":"In the last line contains the information about the module dependenciesIn the provided example the module module.name depends on other.module.name.b module and has access to its exported packagesdependencies are enforced at run timeapps fail if they can't resolve all of their dependencies "},{"title":"Transitive dependencies​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#transitive-dependencies","content":"a transfer of dependencies to dependent modules in simpler terms every package a given module requires gets automatically passed to dependent modules it keep dependency graphs coherentit is a clean way to transfer dependencies to dependent modules but avoid having to repeat the dependency requirements module module.name { requires transitive other.module.name.b; // add transitive key word }  from to "},{"title":"Qualified dependencies​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#qualified-dependencies","content":"exporting of packages to chosen modules similar to white listing approach to exporting allow the exporting module to choose which foreign modules are allowed to read it acts as a fine-grained filter, giving individual access at the package level drawbacks of using qualified dependencies exporting modules should normally not know about which other modules are depending upon themqualified exports break this ruleit should only be used in friend like contextsit is used because the modules are working closely with other modules to provide a functionalityfuncationalities are structured into independent modules but federated to act as 1 in providing that functionality limitations to qualified dependencies it can't be used to grant readability to all forieng modules because they would all need to be knownforeign modules must already exist, if not compilation will fail qualified exporting should not be used as the default exporting tool but should be instead be used in special circumstancesbest used to give fine-grained access to known modules working together problem solution 1: changing accessibility from public to package private works if dependency does not require access from anywhere else solution 2: refactor code is a hacky solution Proper solution: change accessibility from public to package privateuse the to key word in module-info.java file module module.name { exports package.name.b to other.module.name.a, other.module.name.c, ...; // use the to key, can export to multiple packages }  "},{"title":"Service dependencies​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#service-dependencies","content":" service provider has an interface where multiple types implements itin the module-info.java file module module.name { exports package.name.a;; provides package.name.a.InterfaceName with // interface package.name.a.type.One; // class that implements interface package.name.a.type.Two; // can provide multiple classes that implements the interface ... } service consumer module module.name.b { requires package.name.a; uses package.name.a.InterfaceName; // only interface is specified } service loader pluggable services frameworkbinds service providers to consumersnot new, but enhanced for JPMSdoes not replace dependency injection frameworks but can be used in apps that need to deliver functionality in a modular and interoperable way without using third party frameworksideal for stand-alone jave SE apps example: a class that uses the service loader to obtain an instance to one of the interface implementations import java.util.ServiceLoader; import java.util.Optional; import com.red30tech.chassis.api.InterfaceName; ServiceLoader&lt;InterfaceName&gt; serviceLoader = ServiceLoader.load(InterfaceName.class); System.out.println(&quot;Found &quot; + serviceLoader.stream().count() + &quot; interface name configured&quot;); // count depends on number of classes implemented with interface that are provided in the modular-info.java file Optional&lt;InterfaceName&gt; optional = serviceLoader.findFirst(); optional.orElseThrow(() -&gt; new RuntimeException(&quot;No service providers found&quot;)); InterfaceName interfaceName = optional.get();  "},{"title":"Optional dependencies​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#optional-dependencies","content":"mandatory at compilation time, but optional at run timethe interface can now add an option to enable or disable the implementation of the optional dependenciesoptional dependencies must be coded defensively must use with try/catch and with NoClassDefFoundError exception optinal modules become regular modules if they get required by other modules in the graph  moduel module.name { requires package.name.b; requires static package.name.c; // use the static keyword to make it optional exports package.name.a; provides package.name.a.InterfaceName with package.name.a.type.One; package.name.a.type.Two; }  try { OptionalDependencyName a = new OptionalDependencyName(); } catch (NoClassDefFoundError exception) { a = null; }  # run without optional dependency java --module-path mods/ -m com.domain.module/com.domain.module.Main # run with optional dependency java --module-path mods/ --add-modules com.domain.optionalmodule -m com.domain.module/com.domain.module.Main  "},{"title":"Runtime dependencies​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#runtime-dependencies","content":"API misuses are caught at compilation time by not exporting the package the package won't be readable by foreign modules if a dependency was not exported importing or instantiating the dependency will cause a compilation errorreflection-based framework not importing but using the type without instantiating will allow compilation but fails at runtime "},{"title":"Open dependencies​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#open-dependencies","content":"allows module access at run time only (via reflection)compile time access is closed  moduel module.name { requires package.name.b; requires static package.name.c; exports package.name.a; opens package.name.a.type; // use the opens keyword to allow reflection-based access at run time to all classes provides package.name.a.InterfaceName with package.name.a.type.One; package.name.a.type.Two; }  "},{"title":"Rules of modularization​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#rules-of-modularization","content":"Firstly cycles between modules (on compilation level) are prohibitedIt’s a limitation but no one should cry because of thatCycles in general are sign of a bad design Secondly, even if module encapsulation is controlled on compile and runtime level you can brake it using reflection API and freely use debug tools Thirdly, all modules have an implicit dependency to java.base module and it doesn’t have to be specified in module descriptor The implicit dependency on java.base is similar to implicit import of java.lang.String class Fourthly, due to backward compatibility, every class not placed in the modules goes to unnamed module That module has dependency to all other modules and has access to the packages which they exportedIt’s important that not exported packages are not accessibleSince Java 9 some APIs are marked as internal and are unavailable from regular packagesIf you compile code using such packages in Java 8 and try to use it with Java 9, you’ll get runtime error "},{"title":"Modular structure design​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#modular-structure-design","content":"small apps may have just 1 module9 tips Token modularization package non-modular classes into jars and use automatic modulesautomatic jars can be read and depended upon by modulesgateway to modular java Piecemeal Modularization modularizing large code bases is a big undertaking use a piecemeal approach start with root packages, such as utilitycan be read by unnamed modules use modularity for better design modularity helps detect hidden bad designscyclic dependencies, lack of interfaces, and packages that try to do too muchtake the opportunity to refactor during modularization Break Monoliths along Natural Fault Lines consider module boundaries in tiersfront-end/back-end/persistencemobile, web, and desktoprelational vs document vs graph databases Keep Private Things Private modules are the next level of lexical scopehide classes that shouldn't be exposedidentify the export package put public classes there leads to better APIs OSGi Status Quo future of OSGi integration is not clearJPMS offers native modularityhold off JPMS until there is clarity with OSGi integration Complement Microservices with JPMS introduce JPMS to your microservices architectureJPMS will provide better encapsulation and the next level of lexical scoping better code hygiene focus on larger services Use the Tools to Deliver Software introduce the static analysis tools in your build processJdeps, java -dry-run, jdeprscanused to produce metrics and quality software All Things in Moderation don't over-modularizeover-modularized code is worse than a monolithunderstand the dependencies in your package "},{"title":"JPMS introduces the module path​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#jpms-introduces-the-module-path","content":"it tells the compiler and runtime where to find the modules directory hierarchy must match module/package hierarchy each module is a separate hierarchy the module path supersedes the class path the class path is for backward compatibility the module path can aggregate many modules each module can be its own island of code 1 modular structure multi modular structure "},{"title":"Tools and Strategies​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#tools-and-strategies","content":""},{"title":"javac​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#javac","content":"javac -d ./mods/ --module-source-path src $(find src -name &quot;*.java&quot;)javac -d ./mods/ --module com.domain.module --module-source-path srcjavac -d ./mods/ --module-path mods --module com.domain.module --module-source-path srcbuild with version javac -d ./mods/ --module-source-path src --module-version 123.01 $(find src -name &quot;*.java&quot;) "},{"title":"Jar​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#jar","content":"a jar file that contains module-info at its root a module is 1 to 1 with a jar file build rm -rf bin mkdir bin javac -d ./mods/ --module-source-path src $(find src -name &quot;*.java&quot;) find src -name &quot;*.java&quot; jar --create --file ./bin/com.domain.modulea.jar -C mods/com.domain.modulea . jar --create --file ./bin/com.domain.moduleb.jar -C mods/com.domain.moduleb . build with versioning rm -rf bin mkdir bin javac -d ./mods/ --module-source-path src $(find src -name &quot;*.java&quot;) find src -name &quot;*.java&quot; jar --create --file ./bin/com.domain.modulea.jar --module-version=123.02 -C mods/com.domain.modulea . jar --create --file ./bin/com.domain.moduleb.jar -C mods/com.domain.moduleb . run java --module-path bin -m com.domain.modulea/com.domain.modulea.ClassName "},{"title":"Dependency checking tools​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#dependency-checking-tools","content":"describe module describe modules used and their dependencies without running the program java --module-path mods/ --describe-module com.domain.modulea list modules list all of the observable modules observable modules are modules that are available at run timebut not necessarily the ones used by the application java --module-path mods/ --list-modules com.domain.modulea show module resolution shows how modules are resolved before running the applicationwill include both the JDK library modules and the application moduleswill also run the application java --module-path mods/ --show-module-resolution -m com.domain.modulea/com.domain.modulea.ClassName dry run to make sure application will resolve all dependencies without actually running the appan error will occur if module does not exist java --module-path mods/ --dry-run -m com.domain.modulea/com.domain.modulea.ClassName upgrade version at run time build first version javac -d ./mods/ --module-version 123.01 --module-source-path src $(find src -name &quot;*.java&quot;) build second version javac -d ./mods2/ --module-version 123.02 --module com.domain.modulea --module-source-path src run with upgraded version java --upgrade-module-path mods2 --module-path mods -m com.domain.modulea/com.domain.modulea.ClassName Jdeps​ a class dependency analyzer toolcheck dependencies prints the dependencies between each module jdeps --module-path mods/ mods/com.domain.modulea list jdeps print a summarized list of dependencies jdeps --list-deps --module-path mods/ mods/com.domain.modulea "},{"title":"Module packaging tools​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#module-packaging-tools","content":"Jmod​ a tool and a file format it creates jmod files similar in intent as jar files, but designed to work with Jlink used to build custom runtime images pre-java9 1 jar file as rt.jar contains all JDK librariescauses longer time to startnot suitable for small apps with very short lifecycle build jmods rm -rf jmods jlink mkdir jmods javac -d ./mods/ --module-source-path src $(find src -name &quot;*.java&quot;) jmod create jmods/com.domain.modulea.jmod --class-path mods/com.domain.modulea jmod create jmods/com.domain.moduleb.jmod --class-path mods/com.domain.moduleb list jmod contents jmod list jmods/com.domain.modulea.jmod describe jmod contents jmod describe jmods/com.domain.modulea.jmod extract classes from jmod contents jmod extract jmods/com.domain.modulea.jmod "},{"title":"Custom image building tools​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#custom-image-building-tools","content":"Jlink​ a tool to create custom runtime images self-contained images that include the JRE it contains everything needed to run, no pre-installing of Java Runtime on the host is required it strips away everything from the JDK that isn't used by the app results in a smaller overall app distribution build jlink from jmod rm -rf jmods jlink mkdir jmods javac -d ./mods/ --module-source-path src $(find src -name &quot;*.java&quot;) jmod create jmods/com.domain.modulea.jmod --class-path mods/com.domain.modulea jmod create jmods/com.domain.moduleb.jmod --class-path mods/com.domain.moduleb jlink --module-path $JAVA_HOME/jmods:jmods --add-modules com.domain.modulea --output jlink --launcher run=com.domain.modulea/com.domain.modulea.ClassName run jlink jlink/bin/run Jmod hasing​ a hash is a tag that marks interrelated Jmod files ensuring they are used together it prevents files from different tags to be interchanged hash jmod rm -rf jmods jlink mkdir jmods javac -d ./mods/ --module-source-path src $(find src -name &quot;*.java&quot;) jmod create jmods/com.domain.modulea.jmod --class-path mods/com.domain.modulea jmod create jmods/com.domain.moduleb.jmod --class-path mods/com.domain.moduleb jmod hash --module-path jmods --hash-modules .* jlink --module-path $JAVA_HOME/jmods:jmods --add-modules com.domain.modulea --output jlink --launcher run=com.domain.modulea/com.domain.modulea.ClassName view hash with describe jmod describe jmods/com.domain.modulea.jmod Jar files vs Jmod files​ jar files\tjmod filessupport modules\tuse for custom run time image use for running on a pre-installed JRE\tcan hold native libraries use for packaging on custom images "},{"title":"backward compatibility with classes​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#backward-compatibility-with-classes","content":"Jdeprscan​ a static analysis tool that scans code for uses of deprecated API elementsuse to show every method in the standard JDK libraries that have been deprecated or slated for removalscan jdk libraries jdeprscan --list --release 6 list jdk libraries for removel jdeprscan --list --for-removal scan classes jdeprscan --class-path classes classes Explicit vs unamed modules​ the module path is always searched first when loading classes, and if it's not found there, the class path is searched, so classes and modules can coexist All nonmodule classes loaded from the class path are part of what is called the unnamed module The unnamed module is a new concept created to bridge modularized and unmodularized code Explicit modules are those defined via the module-info class Unnamed modules are special modules created by their runtime that contain all classes that are loaded from the class path At most, there will be only one unnamed module at runtime Classes within the unnamed module can read any public class from an exported package of an explicit module But the reverse is not true Explicit modules cannot read the classes from the unnamed module, nor can they depend upon the unnamed module unnamed modules exist only for interoperability between modularized and unmodularized code This means that the axle class can access anything that the movement module exports without explicitly requiring it if a package is defined in both the class path and the module path, then the class found in the module is loaded These readability rules are important to preserve reliable configuration in JPMS Otherwise, JPMS would be broken These constructs exist for backward compatibility and not as an end state While unnamed modules can participate in JPMS, they are second-class citizens in the world of modularity because they can't fully take advantage of all the features build unnamed module src_1 has no module-info.java file however, the classes inside can still import from src_2 rm -rf mods bin classes mkdir mods bin classes javac -d ./mods/ --module-source-path src_2 $(find src_2 -name &quot;*.java&quot;) javac -d ./classes/ -cp mods/com.domain.moduleb --source-path src_1 $(find src_1 -name &quot;*.java&quot;) jar --create --file ./bin/com.domain.moduleb.jar -C mods/com.domain.moduleb . run unnamed module java --module-path bin --add-modules ALL-MODULE-PATH -cp classes com.domain.modulea.ClassName "},{"title":"backward compatibility with JARs​","type":1,"pageTitle":"Java 9","url":"docs/languageSpecific/java/java9/#backward-compatibility-with-jars","content":"Automatic modules​ a jar that was created from unmodularized code doesn't have the module info class but can still be used within JPMScreated by the platform to hold classes loaded from a non-modular jarclasses loaded from non-modular jars are contained by the platform inside automatic modulesit helps with the in between world of partially modularized code bases and librariesit offer better integration with modules but still is limited because they cannot depend upon explicit modulestogether with unnamed modules, they allow piecemeal migration to modules and avoid a big bang migration approach it is class exclusive this means that if a class exists in 2 different jar files only 1 jar file will be used as automaticthe other jar will be discarded in its entirety  build automatic module src_1 has no module-info.java file however, the classes inside can still import from src_2 rm -rf mods bin classes mkdir mods bin classes javac -d ./mods/ --module-source-path src_2 $(find src_2 -name &quot;*.java&quot;) javac -d ./classes/ -cp mods/com.domain.moduleb --source-path src_1 $(find src_1 -name &quot;*.java&quot;) jar --create --file ./bin/com.domain.moduleb.jar -C mods/com.domain.moduleb . jar --create --file ./bin/com.domain.modulea.jar -C classes . run automatic module java --module-path bin --add-modules ALL-MODULE-PATH com.domain.modulea.ClassName "},{"title":"Java 9 example","type":0,"sectionRef":"#","url":"docs/languageSpecific/java/java9/example/","content":"","keywords":""},{"title":"src/com.java9modules.main​","type":1,"pageTitle":"Java 9 example","url":"docs/languageSpecific/java/java9/example/#srccomjava9modulesmain","content":"module-info.java module com.java9modules.main { requires com.java9modules.greetings; }  "},{"title":"src/com.java9modules.main/com/java9modules/main/api​","type":1,"pageTitle":"Java 9 example","url":"docs/languageSpecific/java/java9/example/#srccomjava9modulesmaincomjava9modulesmainapi","content":"App.java package com.java9modules.main.api; import com.java9modules.greetings.api.Greeting; public class App { public static void main(String[] args) { System.out.println(new Greeting().regular(&quot;World&quot;)); } }  "},{"title":"src/com.java9modules.greetings​","type":1,"pageTitle":"Java 9 example","url":"docs/languageSpecific/java/java9/example/#srccomjava9modulesgreetings","content":"module-info.java module com.java9modules.greetings { exports com.java9modules.greetings.api; }  "},{"title":"src/com.java9modules.greetings/com/java9modules/greetings/api​","type":1,"pageTitle":"Java 9 example","url":"docs/languageSpecific/java/java9/example/#srccomjava9modulesgreetingscomjava9modulesgreetingsapi","content":"Greeting.java package com.java9modules.greetings.api; public class Greeting { public String regular(String party) { return &quot;Hello, &quot; + party + &quot;!&quot;; } }  "},{"title":"Java Version Manager - jEnv","type":0,"sectionRef":"#","url":"docs/languageSpecific/java/jenv-manage-java-versions","content":"","keywords":""},{"title":"Install​","type":1,"pageTitle":"Java Version Manager - jEnv","url":"docs/languageSpecific/java/jenv-manage-java-versions#install","content":"brew install jenv "},{"title":"Configuration​","type":1,"pageTitle":"Java Version Manager - jEnv","url":"docs/languageSpecific/java/jenv-manage-java-versions#configuration","content":"Add following configs into ~/.bash_profile or ~/.bashrc or ~/.zshrc export PATH=&quot;$HOME/.jenv/bin:$PATH&quot; eval &quot;$(jenv init -)&quot;  restart shell if using zsh source ~/.zshrc "},{"title":"Verify installation​","type":1,"pageTitle":"Java Version Manager - jEnv","url":"docs/languageSpecific/java/jenv-manage-java-versions#verify-installation","content":"jenv doctor during the first initial setup, it is normal to have the following, it means jenv is correctly loaded "},{"title":"Run the following if using maven (mvn)​","type":1,"pageTitle":"Java Version Manager - jEnv","url":"docs/languageSpecific/java/jenv-manage-java-versions#run-the-following-if-using-maven-mvn","content":"ensure that JAVA_HOME is correct jenv enable-plugin exportmake Maven aware of the java version in use &amp; switch when project does jenv enable-plugin maven "},{"title":"Install different JDK versions​","type":1,"pageTitle":"Java Version Manager - jEnv","url":"docs/languageSpecific/java/jenv-manage-java-versions#install-different-jdk-versions","content":"Install latest brew install openjdk Install Java 8 brew install AdoptOpenJDK/openjdk/adoptopenjdk8 Install Java 9 brew install AdoptOpenJDK/openjdk/adoptopenjdk9 Install Java 10 brew install AdoptOpenJDK/openjdk/adoptopenjdk10 Install Java 11 brew install AdoptOpenJDK/openjdk/adoptopenjdk11 "},{"title":"Configure JDK versions with jEnv​","type":1,"pageTitle":"Java Version Manager - jEnv","url":"docs/languageSpecific/java/jenv-manage-java-versions#configure-jdk-versions-with-jenv","content":"list all java versions installed /usr/libexec/java_home -V if installed java version path is not listed, find the path, then add it with the same method below Add JDK path jenv add &lt;your_jdk_path&gt; e.g.: jenv add /Library/Java/JavaVirtualMachines/openjdk-14.0.1.jdk/Contents/Home "},{"title":"List all java versions jEnv is managing​","type":1,"pageTitle":"Java Version Manager - jEnv","url":"docs/languageSpecific/java/jenv-manage-java-versions#list-all-java-versions-jenv-is-managing","content":"jenv versions "},{"title":"Set system wide java version​","type":1,"pageTitle":"Java Version Manager - jEnv","url":"docs/languageSpecific/java/jenv-manage-java-versions#set-system-wide-java-version","content":"jenv global 14.0 "},{"title":"Set project wide java version​","type":1,"pageTitle":"Java Version Manager - jEnv","url":"docs/languageSpecific/java/jenv-manage-java-versions#set-project-wide-java-version","content":"jenv local 11this will create a .java-version file inside the current folder "},{"title":"Set shell instance java version (not required)​","type":1,"pageTitle":"Java Version Manager - jEnv","url":"docs/languageSpecific/java/jenv-manage-java-versions#set-shell-instance-java-version-not-required","content":"jenv shell openjdk64-1.8.0.252 "},{"title":"Check current java version being used​","type":1,"pageTitle":"Java Version Manager - jEnv","url":"docs/languageSpecific/java/jenv-manage-java-versions#check-current-java-version-being-used","content":"java -version "},{"title":"Memory Management","type":0,"sectionRef":"#","url":"docs/languageSpecific/java/memoryManagement","content":"","keywords":""},{"title":"Java Memory​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#java-memory","content":"when app run, need access to some of computer's memory to store the objects that we create and hold in memoryrules objects are stored on the heapvariables are a reference to the object which is stored on the stacklocal variables are stored on the stack "},{"title":"The Stack​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#the-stack","content":"every thread has its own stackit is managed by the Java Virtual Machine (JVM)java knows exactly when data on the stack can be destroyedused for local primitive variables e.g.: ints and doubles stack works as First In Last Out structure (FILO) each time a function is called, java pushes the local variables for that function on to the stackthe local variables are automatically popped from the stack when it reaches the close of the block that create that variable data on the stack can only be seen by the thread that owns the stackthe stack is a tightly managed structure and java can maintain very tight scoping rules with the stackstacks are great for local variables because we want a local variable to have a short lifetime public class Main { public static void main(String[] args) { int value = 7; value = calculate(value); } public static int calculate(int data) { int tempValue = data + 3; int newValue = tempValue * 2; return newValue; } }   ______________________ ______________________ | newValue = 20 | | | _____ | tempValue = 10 | | | _____ | | -&gt; | data = 7 | -&gt; | | -&gt; | | ----- | value = 7 | | value = 7 | ----- | args = empty array | | args = empty array | ---------------------- ----------------------  "},{"title":"The Heap​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#the-heap","content":"it allows us to store data that has a longer lifetime than a single code block or function e.g.: objects that need to be shared across multiple methods it is all the memory of the app except for the data on the stacks in an app, there is 1 heap which is shared across all the threads and a number of stacks 1 for each thread since most objects are quite big and that most programs will want to pass around objects between blocks of code by placing objects on the heap, it makes it easy to pass them aroundthus, all threads and code blocks in the app can potentially access the heap in java, all objects are stored on the heap e.g.: strings, integer objects for the objects on the heap, there will be a pointer to the object it is the variable reference stored on the stackbasically a variable would be created on the stack which points to the object stored in the heap simple example int age = 21; String name = &quot;Hello&quot;; stack heap ____________ _____________________________ | name ----|-- | | | age = 21 | \\--|---&gt; String name = &quot;Hello&quot; | ------------ ------------------------------ complicated example public class Main { public static void main(String[] args) { List&lt;String&gt; myList = new ArrayList&lt;String&gt;(); myList.add(&quot;One&quot;); myList.add(&quot;Two&quot;); myList.add(&quot;Three&quot;); printList(myList); } public static void printList(List&lt;String&gt; data) { String value = data.get(1); data.add(&quot;Four&quot;); System.out.println(value); } } stack heap ______ ______ | | | | ------ ------ List&lt;String&gt; myList = new ArrayList&lt;String&gt;(); stack heap __________ __________ | myList-|-----|-&gt; List | ---------- ---------- myList.add(&quot;One&quot;); // myList.add(new String(&quot;One&quot;)); myList.add(&quot;Two&quot;); // myList.add(new String(&quot;Two&quot;)); myList.add(&quot;Three&quot;); // myList.add(new String(&quot;Three&quot;)); stack heap __________ ___________________________ | myList-|-----|-&gt; List | ---------- | 0 ----&gt; String One | | 1 ----&gt; String Two | | 2 ----&gt; String Three | --------------------------- public static void printList(List&lt;String&gt; data) stack heap __________ ___________________________ | data---|-----|-&gt; List | | myList-|-----|-&gt; 0 ----&gt; String One | ---------- | 1 ----&gt; String Two | | 2 ----&gt; String Three | --------------------------- String value = data.get(1); stack heap __________ _______________________________ | value--|-----|--------------------------- | | data---|-----|-&gt; List | | | myList-|-----|-&gt; 0 ----&gt; String One | | ---------- | 1 ----&gt; String Two &lt;-- | | 2 ----&gt; String Three | ------------------------------- data.add(&quot;Four&quot;); // data.add(new String(&quot;Four&quot;)); stack heap __________ _______________________________ | value--|-----|--------------------------- | | data---|-----|-&gt; List | | | myList-|-----|-&gt; 0 ----&gt; String One | | ---------- | 1 ----&gt; String Two &lt;-- | | 2 ----&gt; String Three | | 3 ----&gt; String Four | ------------------------------- stack heap __________ _______________________________ | myList-|-----|-&gt; List | ---------- | 0 ----&gt; String One | | 1 ----&gt; String Two | | 2 ----&gt; String Three | | 3 ----&gt; String Four | -------------------------------  "},{"title":"Values and References​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#values-and-references","content":"passing values public class Main { public static void main(String[] args) { int localValue = 5; calculate(localValue); System.out.println(localValue); // 5 } public static void calculate(int calValue) { calValue = calValue * 100; } } passing references public class Main { public static void main(String[] args) { Customer c = new Customer(&quot;Sally&quot;); renameCustomer(c); System.out.println(c.getName()); // Diane } public static void renameCustomer(Customer cust) { cust.setName(&quot;Diane&quot;); } } Customer c = new Customer(&quot;Sally&quot;); stack heap _____ _______________________________ | c-|-----|-&gt; Customer | ----- | name-----&gt; String Sally | ------------------------------- cust.setName(&quot;Diane&quot;); stack heap ________ _______________________________ | cust-|-----|-&gt; | | c----|-----|-&gt; Customer --&gt; String Diane | -------- | name String Sally | ------------------------------- System.out.println(c.getName()); stack heap ________ _______________________________ | c----|-----|-&gt; Customer --&gt; String Diane | -------- | name String Sally | ------------------------------- after java changes the pointer from the name in the Customer object to the new string the original string object is no longer referenced from anywherethus, it can be garbage collected at some point in the future final keyword once it has been assigned, it can never be alteredclosest thing to a constant // method 1 final Customer c = new Customer(&quot;John&quot;); // method 2: due to this, it is different from a traditional constant value from other programming languages final Customer c; c = new Customer(&quot;John&quot;); // this is allowed because java does not have const correctness c.setName(&quot;Peter&quot;); // modifying values inside the same object is allowed c = new Customer(&quot;Susan&quot;); // this will raise a compile error, final keyword prevents the change of reference to the object in the Heap it does not prevent the following side effect due to lack of const correctness public class Main { public static void main(String[] args) { final Customer c = new Customer(&quot;John&quot;); System.out.println(c.getName()); // John System.out.println(c.getName()); // XXX } } public class Customer { public Customer(String name) { this.name = name; } public String getName() { String temp = this.name; this.name = &quot;XXX&quot;; return temp; } }  "},{"title":"Escaping references​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#escaping-references","content":"returning of reference variables that allows outsiders to modify value which is not expected we should avoid escaping references in order to prevent people from accidentally having access to variables that they shouldn't be able to change bad example import java.util.Map; import java.util.HashMap; public class CustomerRecords { private Map&lt;String, Customer&gt; records; public CustomerRecords() { this.records = new HashMap&lt;String, Customer&gt;(); } public void addCustomer(Customer c) { this.records.put(c.getName(), c); } public Map&lt;String, Customer&gt; getCustomers() { return this.records; // this is the escaping reference } } public class Main { public static void main(String[] args) { CustomerRecords records = new CustomerRecords(); records.addCustomer(new Customer(&quot;John&quot;)); records.addCustomer(new Customer(&quot;Simon&quot;)); records.getCustomers().clear(); // not what you wanted to allow for (Customer next: records.getCustomers().values()) { // data will be empty System.out.println(next); } } } solution 1: make CustomerRecords as an iterable class and provide an iterator to the objects that we want to be able to iterate through import java.util.Iterator; import java.util.Map; import java.util.HashMap; public class CustomerRecords implements Iterable&lt;Customer&gt; { private Map&lt;String, Customer&gt; records; public CustomerRecords() { this.records = new HashMap&lt;String, Customer&gt;(); } public void addCustomer(Customer c) { this.records.put(c.getName(), c); } @Override public Iterator&lt;Customer&gt; iterator() { return records.values().iterator(); } } public class Main { public static void main(String[] args) { CustomerRecords records = new CustomerRecords(); records.addCustomer(new Customer(&quot;John&quot;)); records.addCustomer(new Customer(&quot;Simon&quot;)); records.iterator().remove(); // this method is available thus is not the best solution for (Customer next: records) { // data will be empty System.out.println(next); } } } solution 2: better solution, return a new instance of the collection import java.util.Map; import java.util.HashMap; public class CustomerRecords implements Iterable&lt;Customer&gt; { private Map&lt;String, Customer&gt; records; public CustomerRecords() { this.records = new HashMap&lt;String, Customer&gt;(); } public void addCustomer(Customer c) { this.records.put(c.getName(), c); } public Map&lt;String, Customer&gt; getCustomers() { return new HashMap&lt;String, Customer&gt;(this.records); } } public class Main { public static void main(String[] args) { CustomerRecords records = new CustomerRecords(); records.addCustomer(new Customer(&quot;John&quot;)); records.addCustomer(new Customer(&quot;Simon&quot;)); records.getCustomers().clear(); // this will only remove the copied version for (Customer next: records.getCustomers().values()) { // get a new copy with the data System.out.println(next); // work fine } } } solution 3: best solution, return an immutable collection import java.util.Map; import java.util.HashMap; import java.util.Collections; public class CustomerRecords implements Iterable&lt;Customer&gt; { private Map&lt;String, Customer&gt; records; public CustomerRecords() { this.records = new HashMap&lt;String, Customer&gt;(); } public void addCustomer(Customer c) { this.records.put(c.getName(), c); } public Map&lt;String, Customer&gt; getCustomers() { return Collections.unmodifiableMap(this.records); } } public class Main { public static void main(String[] args) { CustomerRecords records = new CustomerRecords(); records.addCustomer(new Customer(&quot;John&quot;)); records.addCustomer(new Customer(&quot;Simon&quot;)); records.getCustomers().clear(); // this will raise an error during runtime for (Customer next: records.getCustomers().values()) { System.out.println(next); } } }  "},{"title":"Garbage Collection​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#garbage-collection","content":"garbage collector cannot be modified however, we need to write code that avoids memory leaksor learn how to monitor the app's memory usage and effectiveness of the garbage collector this helps to detect and correct potential memory leaks problem about the stack is that its scope is tight and is based on code blocks {...} often we want an object to live for a longer period of time than its enclosing scope which is when we want to share objects between code blocks "},{"title":"String pools​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#string-pools","content":"unlike other languages, in java, all objects are stored in the heap without giving the developers a choice reason is due to 1 of the design goals of java during the mid 1990s to simplify choices and where possible, to provide a single, clean way of doing things in modern JVM, it is more efficient and clever, as it is able to detect an object being created is not going to be shared (doesn't go outside the code block in which its created), thus creating it on the stack example reason for the following example is because java will see that the 2nd string object has identical value to the first string, thus there was no need to create a new string object in the heapthere is no harm in both of the stack variables pointing to the same object on the heap because strings are immutablethus although in the code, we think that 2 string objects were created, however, there is only 1 in reality public class Main { public static void main(String[] args) { String one = &quot;hello&quot;; String two = &quot;hello&quot;; if (one == two) { // comparing the references System.out.println(&quot;they are the same object&quot;); // this will get printed } else { System.out.println(&quot;they are not the same object&quot;); } String three = new String(&quot;hello&quot;); if (one == three) { System.out.println(&quot;they are the same object&quot;); } else { System.out.println(&quot;they are not the same object&quot;); // this will get printed } String four = new String(&quot;hello&quot;).intern(); if (one == four) { System.out.println(&quot;they are the same object&quot;); // this will get printed } else { System.out.println(&quot;they are not the same object&quot;); } } } Basically, JVM optimizes the creation of objects it sometimes places objects on the stackwith strings, it might not create duplicate objects "},{"title":"Garbage eligibility​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#garbage-eligibility","content":"in java, once an object is no longer needed, it gets removed automatically java avoids memory leaks by running on a virtual machine when calling the new keyword in Java to create a new object memory is not being taken from the Operating Systemmemory is acquired by the virtual machine the virtual machine is another computer program written in C the C program will control the request for memory for objects from the OS and controls the freeing of memory when objects are no longer needed adopting a Garbage Collection strategy it was invested in 1959 with the LISP programming language idea of garbage collection is that programmers ask for objects to be allocated on the heap but do not need to free them when they are finished instead, an automatic process analyzes the heap and aims to work out which objects are no longer needed any unneeded objects can be deleted it follows a rule any object on the heap which cannot be reached through a reference from the stack is eligible for garbage collection in C, C++ or similar languages, programmer have to indicate that the object is no longer required with the free() function in visual basic, need to set object equal to null to clear the reference of the objectnot doing so will cause the memory that is being used to store the object to be never released it will still remain even when the program finishes runningonly way is to restart the computer in order to free the memorythis is referred to as memory leak objects that are not freed continue to consume memory this will result in more memory being used over timecomputer will start to slow down, and eventually crash "},{"title":"gc and finalize methods​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#gc-and-finalize-methods","content":"public class Customer { private String name; public Customer(String name) { this.name = name; } // this method gets called when garbage collection is occurring public void finalize() { System.out.println(&quot;Object is being garbage collected&quot;); } } public class Main { public static void main(String[] args) { Runtime runtime = Runtime.getRuntime(); long availableBytes = runtime.freeMemory(); System.out.println(&quot;Total memory: &quot; + availableBytes / 1024 + &quot;kb&quot;); for (int i=0; i&lt;1000000; i++) { // these are instantly available for garbage collection // because as soon as the loop is closed, the object is no longer referenced by a variable on the stack Customer customer = new Customer(&quot;Customer &quot; + i); } availableBytes = runtime.freeMemory(); System.out.println(&quot;Total memory before gc: &quot; + availableBytes / 1024 + &quot;kb&quot;); // suggest garbage collection to run, but no guarantee // it might appear to have run System.gc(); availableBytes = runtime.freeMemory(); System.out.println(&quot;Total memory after gc: &quot; + availableBytes / 1024 + &quot;kb&quot;); } }  the gc method suggests that the JVM runs the garbage collection process although it tells the JVM to run the garbage collection, there's no guarantee that the JVM will do itusually it is not a good idea to run the gc command during garbage collection process it will temporarily stop all threads in app from runningwhile garbage collection takes place, the app is temporarily suspended it won't resume until garbage collection is complete garbage collection should be quick and infrequent the finalize method it is the process when an object is actually garbage collected it would physically removes the object from the heap, rather than making becomes eligible for garbage collection seems to be useful, but is actually pretty uselessbecause we won't know if it will definitely and when it would runwhat we should never do is to close an open resource in the finalize method because you will never know when the resource is going to get closed basically if the garbage collection didn't run, the finalize method will not be calledgood use case of finalize method is to check if all resources has been closed public class File() { public void closeFile() { file.close(); } public void finalize() { if (file.isOpen()) { logger.warn(&quot;Resource was not closed&quot;) } } }  "},{"title":"Soft leaks​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#soft-leaks","content":"it is when an object is referenced on the stack even though it will never be used againit is where you have written code, or a 3rd party library that you are using contains code that somehow keeps an object live even though you are never going to use it again it should be garbage, but java never considers it as such because it's referenced from somewhere on the stack "},{"title":"Generational Garbage Collection​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#generational-garbage-collection","content":"modern garbage collectors uses a clever mechanism to remove objects from the heap which are no longer reachablerather than searching for all the objects to remove, instead, it looks for all the objects that need to be retained and rescues themalgorithm is mark and sweep its a 2 stage process marking stage the program's execution is first paused also refers to as a stop the world eventall threads in the app are pausedthe garbage collector then checks every single live reference done by looking at every variable on the stack and follows its referencethe object that it finds at the end of the reference is marked as being alive then it follows any other references that the object has and also marks those as being alive marking cannot work properly if there are any threads still executing sweeping stage once all objects that are referenced are marked for keeping, a full scan of the heap takes place, and the stages of all of the objects is checked the memory occupied by those objects not marked can be freed upobjects that are being kept, are moved into a single contiguous block of memory this stops the heap from becoming fragmented over time and makes it easier and quicker for the virtual machine to find memory to allocate to future objects thus garbage collector doesn't really collect any garbage it actually collects the objects which are not eligible for garbage collectionthis means that the garbage collection process is faster than bulk garbage generational garbage collection helps to avoid the app from becoming frozen during the garbage collection processmost objects in Java live for a very short period of time if an object survives 1 garbage collection, its more likely to live forever its faster to collect when there's a lot of garbage, when there are fewer objects that are survivingthus, generational garbage collection is a way of organizing the heapthe heap is organized into 2 sections young generation also know as minor collectiontypically smaller but can be trimmed new objects are created in the young generation spacethe young generation will fill up quite quickly as its smallwhen full, the garbage collection takes place, but only on the young generationbecause most objects don't survive for long the young generation which is full of new objects is probably mostly garbagethus the process to garbage collect young generation should be very quickas a result, we will not notice the app freezing while this takes place all surviving objects are then copied to the old generation this frees up the younger generation for new objects to be added old generation also known as major collectiongarbage collection also runs on the old generation but only if it's needed it would be a lot slower, as it's much bigger block of memory to sweepthere will be many objects still alive, so the sweep will take longer and the moving of all surviving objects into a contiguous part of the memory will take longer "},{"title":"PermGen and Metaspace​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#permgen-and-metaspace","content":"Java 6 there is a further part of the heap called PermGen (Permanent Generation) objects in the PermGen will survive foreverthe PermGen is never garbage collected thus is PermGen runs out of space, app will crash an error message ran out of PermGen space will occurthis means that the app has too many classes or internalized strings this is not caused by memory leaks or faults in the codeonly way to avoid PermGen errors is to increase the size of the allocated memory for PermGen within the Heap in a server, each time an app is redeploy, a new metadata of all the classes will be created the old data will also remain but never referred to and never get cleared outthis means that if redeployment is done too many times, eventually it will run out of PermGen space solution is to always stop and restart the server after redeployment 2 types of object that goes into PermGen internalized strings strings which are placed into a pool for reuse new class creation the metadata for that class is placed in the PermGen it is some memory needed to store information about the class it is not the instance of the class an object for that is created in the heap java 7 internalized strings are no longer stored in the PermGeninternalized strings are stored in the Heap thus allowing it to be garbage collected  java 8 PermGen is removed from the Heap, a new separate MetaSpace is created where the field classes are placedMetaSpace is not part of the heap, it is allocated out of the computer's native memory so maximum available space for the MetaSpace is the total available system memory for the computerthere is now an option to cap the maximum size for the MetaSpace if there is no cap, the JVM will just grow the MetaSpace as it needs to when classes are no longer creatable, the meta data related to those classes is then removed everytime a server is redeployed, the old class meta data in the MetaSpace will get removed  "},{"title":"Tuning the Virtual Machine​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#tuning-the-virtual-machine","content":"it is by providing command line arguments to the Java Runtime so that 1 or more non default settings is applied to the app "},{"title":"Heap Size​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#heap-size","content":"k for kb, m for mb, g for gbarguments that start with X are non standard arguments this means that they are not guaranteed to be implemented on every runtime -Xmx set the maximum heap size example -Xmx512m useful in assisting the detection of potential memory leaksmight want to set a low maximum heap size to test whether the app will run satisfactorily in a memory constrained environmentdefault heap size can be found via the javadocs in java 8, the default heap size is usually a quarter of the computer's total memoryon a client or a server, max default heap size is 256 mb the total heap size will not be allocated when app startsthe default starting size is 1/64 of the total memory of the computer, with a min initial size of 8 mb -Xms set the starting heap size there will be some performance impact each time the heap needs to increase its memory from starting size to total sizethus setting heap size to the minimum that the app normally needs is goo in performance critical circumstancesif running a server app where there won't be other apps competing with the memory of the machine, setting the max and starting heap sizes to be the same is ok "},{"title":"PermGen size​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#permgen-size","content":"not valid for java 8 and aboveK for kb, M for mb, G for gb-XX:MaxPermSize set the size of the PermGen example -XX:MaxPermSize=256M "},{"title":"Garbage collection and generation sizes​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#garbage-collection-and-generation-sizes","content":"k for kb, m for mb, g for gbuseful if want to monitor how often garbage collection is taking place in the app-verbose:gc print to the console when a garbage collection takes place-Xmn set the size of the young generation example -Xmn256m this options sets the total and initial size of the young generation at the same time thus the overall and initial heap size needs to be sufficiently greater than the young generation size Oracle recommends that the size of the young generation should be between half and a quarter of the overall heap size "},{"title":"Generating heap dumps​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#generating-heap-dumps","content":"use this option when app crashes with an out of memory error-XX:HeapDumpOnOutOfMemory creates a heap dump file we can then load this file into the Apache Memory Analyzer to find out what went wrong "},{"title":"Choosing a garbage collector​","type":1,"pageTitle":"Memory Management","url":"docs/languageSpecific/java/memoryManagement#choosing-a-garbage-collector","content":"Oracle Virtual Machine has 3 types of collector Serial uses a single thread to perform all the garbage collection worktake note that during garbage collection, the app is paused so it doesn't matter how many threads are in the appwhether its single threaded or multi threaded, all threads will be on hold while garbage collector runs the garbage collector will need to compete with other apps for processing timeserial collector is the best choice for a single processor computer and for apps with small amounts of dataselect option with -XX:+UseSerialGC Parallel it will perform garbage collections on the young generation which are called minor collections in parallelthis means that it will have multiple threads all performing the garbage collection process it is an useful option if have multiple processors on the computer, or processors that are able to process multiple threads at the same timethe option is good for larger data sets as it gives better performance that the serial collectorthe collector is sometimes called the throughput collectorselect option with -XX:+UseParallelGC Mostly Concurrent performs most of its work concurrentlyit is the closest that we can get to a real-time garbage collectionthis is where it pauses the app to do the marking of objects, then resumes the app while the sweep phase takes placebasically the stop the world part of the garbage collection process is minimizedthere are 2 Mostly Concurrent collectors to choose from Mark Sweep Collector -XX:+UseConcMarkSweepGC G One Collector -XX+UseG1GC which garbage collector is used on the computer by default? java makes the choice based on the hardwarecan find out by running -XX:+PrintCommandLineFlags to find out which is default "},{"title":"Parallel, Concurrent and Multithreading","type":0,"sectionRef":"#","url":"docs/languageSpecific/java/parallelConcurrentMultithreading","content":"","keywords":""},{"title":"Parallel Computing Hardware​","type":1,"pageTitle":"Parallel, Concurrent and Multithreading","url":"docs/languageSpecific/java/parallelConcurrentMultithreading#parallel-computing-hardware","content":""},{"title":"Sequential vs Parallel computing​","type":1,"pageTitle":"Parallel, Concurrent and Multithreading","url":"docs/languageSpecific/java/parallelConcurrentMultithreading#sequential-vs-parallel-computing","content":"sequential​ program is broken down into a sequence of discrete instructions that are executed one after anotheronly can execute 1 instruction at any given momentlimitations the time it takes for a sequential program to run is limited by the speed of the processor and how fast it can execute that series of instructions parallel​ breaking the tasks for them to be executed simultaneously by different processors accomplish a single task fasteraccomplish more tasks in a given time the processors has to coordinate with each other as they might be dependent on each other does not necessarily means speed will become twice as fast if a separate task B requires task A but task A is still processing even though task B is completedthe entire process will have to wait until task A is completed this adds complexity "},{"title":"Parallel computing hardware​","type":1,"pageTitle":"Parallel, Concurrent and Multithreading","url":"docs/languageSpecific/java/parallelConcurrentMultithreading#parallel-computing-hardware-1","content":"parallel computing requires parallel hardware with multiple processors to execute different parts of a program at the same time different structural types of parallel computers Flynn's Taxonomy: 1 of most widely used systems for classifying multiprocessor architectures Single Instruction Single Data (SISD) simplest of the 4 classesit is the sequential computer with a single processor unit at any given time, can only execute 1 series of instructions and act on 1 element of data at a time Single Instruction Multiple DATA (SIMD) a type of parallel computer with multiple processing unitsall of its processors execute the same instruction at any given time but they can operate on different data element this type of SIMD architecture is well suited for apps that perform the same handful of operations on a massive set of data elements e.g.: image processing most modern computers use graphic processing units (GPU) with SIMD instructions to do it Multiple Instruction Single Data (MISD) the opposite of SIMDeach processing unit independently executes its own separate series of instructions however, all of those processors are operating on the same single stream of data MISD doesn't make much practical sense, thus its not a commonly used architecture Multiple Instruction Multiple Data (MIMD) every processing unit can be operating on a different set of data it is the most commonly used architecture can find it in multicore PCs, network clusters, supercomputers can be further subdivided into 2 parallel programming models Single Program Multiple Data (SPMD) multiple processing units are executing a copy of the same single program simultaneously but each can use different data different from SIMD because although each processor is executing the same program they do not have to be executing the same instruction at the same timethe processors can run asynchronouslythe program usually includes conditional logic that allows different tasks within the program to only execute specific parts of the overall program it is the most common style of parallel programming Multiple Program Multiple Data (MPMD) each processors is executing a different programprocessors can be executing different, independent programs at the same time while also be operating on different datatypically in this model, 1 processing node will be selected as the host or manager which runs 1 program that farms out data to the other nodes running a 2nd programthose other nodes do their work and return their results to the manager it is not as common as SPMD but can be useful for some applications that lend themselves to functional decomposition "},{"title":"Shared vs distributed memory​","type":1,"pageTitle":"Parallel, Concurrent and Multithreading","url":"docs/languageSpecific/java/parallelConcurrentMultithreading#shared-vs-distributed-memory","content":"accessing memory needs to be fast enough to get the instructions and data required in order to be able to make use of more processors computer memory usually operates at a much slower speed than processors when 1 processor is reading or writing to memory, it often prevents any other processors from accessing the same memory element there are 2 main memory architectures that exists for parallel computing shared memory all processors have access to the same memory as part of a global address space although each processor operates independently if 1 processor changes a memory location, all of the other processor operates will see that change the term shared memory does not mean all data exists on the same physical device it could be spread across a cluster of systems the key is that both of the processors see everything that happens in the shared memory space the shared memory architectures have the advantage of being easier for programming in regards to memory because its easier to share data between different parts of a parallel program disadvantage is that they don't often scale well adding more processors to a shared memory system will increase traffic on the shared memory busshared memory puts responsibility on the programmer to synchronize memory accesses to ensure correct behavior often classified into 1 of 2 categories, which are based on how the processors are connected to memory and how quickly they can access it Uniform memory access (UMA) all of the processors have equal access to the memory means that they can access it equally fast several types of UMA architectures most common is symmetric multiprocessing system (SMP) has 2 or more identical processors which are connected to a single shared memory often through a system busin modern multicore processors, each of the processing cores are treated as a separate processorin most modern processors, each core has its own cache it is a small and very fast piece of memory that only it can see and it uses it to store data that it's frequently working withhowever, caches introduces the challenge that if 1 processor copies a value from the shared main memory, then makes a change to it in its local cache that change needs to be updated back in the shared memory before another processor reads the old value, which is no longer currentthis issue is called cache coherencyhandled by the hardware in multicore processors Non-uniform memory access (NUMA) often made by physically connecting multiple SMP systems togetherthe access is nonuniform because some processors will have quicker access to certain parts of memory than othersit takes longer to access things over the busoverall, every processor can still see everything in memory distributed memory in a distributed memory system, each processor has its own local memory with its own address spaceconcept of a global address space doesn't existall the processors are connected through some sort of network, which can be as simple as Etherneteach processor operates independently if it makes changes to its local memory, that change is not automatically reflected in the memory of other processorsit is up to the programmers to explicitly define how and when data is communicated between the nodes in a distributed system this is a disadvantage advantage of a distributed memory architecture is that its scalable when more processors are added to the system, memory also increasesit makes it cost effector to use commodity, of the shelf computers and networking equipment to build large distributed memory systems most supercomputers use some form of distributed memory architecture or a hybrid of distributed and shared memory "},{"title":"Threads and Processes​","type":1,"pageTitle":"Parallel, Concurrent and Multithreading","url":"docs/languageSpecific/java/parallelConcurrentMultithreading#threads-and-processes","content":""},{"title":"Threads vs process​","type":1,"pageTitle":"Parallel, Concurrent and Multithreading","url":"docs/languageSpecific/java/parallelConcurrentMultithreading#threads-vs-process","content":" the concept of 2 people doing the same thing such as cooking each person is a thread, while the cooking is the processboth person work independently contributing to the cooking processboth have direct access to the same cookbooks containing cooking instructions datathe ingredients being used represents the data and variables being manipulatedhowever, this will cause problems if there are poor coordination between the people (threads) process it is the instance of the program executing when an application runs on a computerthe process consists of the program's code, data, and information about its stateeach process is independent and has its own separate address space in memorya computer can have hundreds of active processes at once the operating system's job is to manage all of these sharing resources between separate processes is not as easy as sharing between threads in the same process because every process exists in its own address spaceexample 2 kitchens (processes), 2 person (thread) in each kitchen, working on different recipes (program) each kitchen have their own ingredients and you can't access the ingredients from a different kitchen there are ways to communicate and share data between processes, but requires more work than communicating between threads threads within every process, there are 1 or more smaller sub elements called threads these are similar to a tiny processes each thread is an independent path of execution through the programa different sequence of instructionscan only exist as part of a process threads are the basic units that the operating system managesit allocates time on the processor to execute themthreads that belong to the same process share the processes address space it gives them access to the same resources in memory including the program's executable code and data communication between processes e.g.: use system provided Inter-Process Communication (IPC) mechanisms like Sockets and pipesallocating special inter-process shared memory spaceusing remote procedure calls writing parallel programs that use multiple processes working together towards a common goal or using multiple threads within a single process which to use depends on what you are doing and the environment it's running because implementation of threads and processes differs between operating systems and programming languagesif the application is going to be distributed across multiple computers, it would be better to separate processes for itbut as a rule of thumb, if can structure the program to take advantage of multiple threads, stick to using threads than using multiple processes because threads are considered lightweight compared to processes, which are more resource intensivea thread requires less overhead to create and terminate than a processusing multiple threads is usually faster for an operating system to switch between executing threads from the same process than to switch between different processes "},{"title":"Concurrent vs Parallel execution​","type":1,"pageTitle":"Parallel, Concurrent and Multithreading","url":"docs/languageSpecific/java/parallelConcurrentMultithreading#concurrent-vs-parallel-execution","content":"just because a program is structured to have multiple threads or processes does not mean they'll necessarily execute in parallel Concurrency\tParallelismProgram Structure\tSimultaneous Execution Dealing with multiple things at once\tDoing multiple things at once Concurrency​ it refers to the ability of an algorithm or program to be broken into parts that can run independently of each other they are order independente.g.: in a salad recipe, chopping lettuce, cucumbers, tomatoes etc can be done concurrently by different people and the order is not important Concurrent Execution single processor only 1 task can be executed at any instant in timedifferent tasks will be swap and take turns to be executedif tasks are swapped frequently it creates the illusion that it is executing simultaneously on the single processor, but is not true parallel execution Concurrent programming is useful for I/O dependent tasks like graphical user interfaces when user clicks a button to execute an operationto avoid locking up the user interface until it is completed we can run the operation in a separate concurrent thread thus leaving the thread that's running the UI free to accept new inputs Parallel​  requires parallel hardware in order to execute in parallel types of parallel hardware Multi-Core Processors used mostly in desktop computers and cellphones Graphics Processing Unit contains hundreds or thousands of specialized cores working in parallel to make amazing graphics Computer Cluster - distribute their processing across multiple systems programs may not always benefit from parallel execution e.g.: software drivers that handles I/O devices (mouse, keyboard, hard drive) they are managed by the operating system as independent things that get executedin a multi-core system, the execution of those drivers might get split amongst the available processorshowever, since I/O operations occur infrequently, relative to the speed at which computer operates, nothing is gain from parallel executionthus it can run on a single processor without any difference parallel processing becomes useful for computationally intensive tasks such as calculating the result of multiplying 2 matrices togetherwhen large math operations can be divided into independent subparts, executing those parts in parallel on separate processors can speed things up "},{"title":"Execution Scheduling​","type":1,"pageTitle":"Parallel, Concurrent and Multithreading","url":"docs/languageSpecific/java/parallelConcurrentMultithreading#execution-scheduling","content":"threads don't execute when they want to the Operating System includes a scheduler that controls when different threads and processes get their turn to execute on the CPU the scheduler makes it possible for multiple programs to run concurrently on a single processor when a process is created and ready to run, it gets loaded into memory and placed in the ready queue the scheduler cycles through the ready processes so that they get a chance to execute on the processor if there are multiple processors, the OS will schedule processors to run on each of them to make the most use of the additional resources a process will run until it finishes, then the scheduler will assign another process to execute on that processor or a process might get blocked and have to wait for an I/O event in this case, it will go into a separate I/O waiting queue so that another process can run or scheduler might determine that a process has spent its fair share of time on the processor and swap it out for another process from the ready queue, also referred to as context switch the OS has to save the state or context of the process that was running so that it can be resumed laterthen it has to load the context of the new process that is about to runcontext switches are not instantaneous it takes time to save and restore the registers and memory statethus the scheduler needs a strategy for how frequently it switches between processes Scheduling Algorithms First come, first servedShortest job nextPriorityShortest remaining timeRound-robinMultiple level queues Preemptive Algorithms a running low priority task might pause or preempt when a higher priority task enters the ready state Non-preemptive Algorithms once a process enters the ready state, it'll be allowed to run for its allotted time Which scheduling algorithm is used by the OS depends which of the following scheduling goals is required maximize throughputmaximize fairnessminimize wait timeminimize latency we might not have any control over when the parts of the program gets executed as it is often handled under the hood by the OS "},{"title":"C++","type":0,"sectionRef":"#","url":"docs/languageSpecific/cPlusPlus/","content":"","keywords":""},{"title":"Preprocessor​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#preprocessor","content":" // Comment to end of line /* Multi-line comment */ #include &lt;stdio.h&gt; // Insert standard header file #include &quot;myfile.h&quot; // Insert file in current directory #define X some text // Replace X with some text #define F(a,b) a+b // Replace F(1,2) with 1+2 #define X \\ some text // Multiline definition #undef X // Remove definition #if defined(X) // Conditional compilation (#ifdef X) #else // Optional (#ifndef X or #if !defined(X)) #endif // Required after #if, #ifdef  "},{"title":"Literals​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#literals","content":"255, 0377, 0xff // Integers (decimal, octal, hex) 2147483647L, 0x7fffffffl // Long (32-bit) integers 123.0, 1.23e2 // double (real) numbers 'a', '\\141', '\\x61' // Character (literal, octal, hex) '\\n', '\\\\', '\\'', '\\&quot;' // Newline, backslash, single quote, double quote &quot;string\\n&quot; // Array of characters ending with newline and \\0 &quot;hello&quot; &quot;world&quot; // Concatenated strings true, false // bool constants 1 and 0 nullptr // Pointer type with the address of 0  "},{"title":"Declarations​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#declarations","content":"int x; // Declare x to be an integer (value undefined) int x=255; // Declare and initialize x to 255 short s; long l; // Usually 16 or 32 bit integer (int may be either) char c='a'; // Usually 8 bit character unsigned char u=255; signed char s=-1; // char might be either unsigned long x = 0xffffffffL; // short, int, long are signed float f; double d; // Single or double precision real (never unsigned) bool b=true; // true or false, may also use int (1 or 0) int a, b, c; // Multiple declarations int a[10]; // Array of 10 ints (a[0] through a[9]) int a[]={0,1,2}; // Initialized array (or a[3]={0,1,2}; ) int a[2][2]={{1,2},{4,5}}; // Array of array of ints char s[]=&quot;hello&quot;; // String (6 elements including '\\0') std::string s = &quot;Hello&quot; // Creates string object with value &quot;Hello&quot; std::string s = R&quot;(Hello World)&quot;; // Creates string object with value &quot;Hello\\nWorld&quot; int* p; // p is a pointer to (address of) int char* s=&quot;hello&quot;; // s points to unnamed array containing &quot;hello&quot; void* p=nullptr; // Address of untyped memory (nullptr is 0) int&amp; r=x; // r is a reference to (alias of) int x enum weekend {SAT,SUN}; // weekend is a type with values SAT and SUN enum weekend day; // day is a variable of type weekend enum weekend{SAT=0,SUN=1}; // Explicit representation as int enum {SAT,SUN} day; // Anonymous enum enum class Color {Red,Blue};// Color is a strict type with values Red and Blue Color x = Color::Red; // Assign Color x to red typedef String char*; // String s; means char* s; const int c=3; // Constants must be initialized, cannot assign to const int* p=a; // Contents of p (elements of a) are constant int* const p=a; // p (but not contents) are constant const int* const p=a; // Both p and its contents are constant const int&amp; cr=x; // cr cannot be assigned to change x int8_t,uint8_t,int16_t, uint16_t,int32_t,uint32_t, int64_t,uint64_t // Fixed length standard types auto it = m.begin(); // Declares it to the result of m.begin() auto const param = config[&quot;param&quot;]; // Declares it to the const result auto&amp; s = singleton::instance(); // Declares it to a reference of the result  "},{"title":"STORAGE Classes​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#storage-classes","content":"int x; // Auto (memory exists only while in scope) static int x; // Global lifetime even if local scope extern int x; // Information only, declared elsewhere  "},{"title":"Statements​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#statements","content":"x=y; // Every expression is a statement int x; // Declarations are statements ; // Empty statement { // A block is a single statement int x; // Scope of x is from declaration to end of block } if (x) a; // If x is true (not 0), evaluate a else if (y) b; // If not x and y (optional, may be repeated) else c; // If not x and not y (optional) while (x) a; // Repeat 0 or more times while x is true for (x; y; z) a; // Equivalent to: x; while(y) {a; z;} for (x : y) a; // Range-based for loop e.g. // for (auto&amp; x in someList) x.y(); do a; while (x); // Equivalent to: a; while(x) a; switch (x) { // x must be int case X1: a; // If x == X1 (must be a const), jump here case X2: b; // Else if x == X2, jump here default: c; // Else jump here (optional) } break; // Jump out of while, do, or for loop, or switch continue; // Jump to bottom of while, do, or for loop return x; // Return x from function to caller try { a; } catch (T t) { b; } // If a throws a T, then jump here catch (...) { c; } // If a throws something else, jump here  "},{"title":"Functions​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#functions","content":"int f(int x, int y); // f is a function taking 2 ints and returning int void f(); // f is a procedure taking no arguments void f(int a=0); // f() is equivalent to f(0) f(); // Default return type is int inline f(); // Optimize for speed f() { statements; } // Function definition (must be global) T operator+(T x, T y); // a+b (if type T) calls operator+(a, b) T operator-(T x); // -a calls function operator-(a) T operator++(int); // postfix ++ or -- (parameter ignored) extern &quot;C&quot; {void f();} // f() was compiled in C  Function parameters and return values may be of any type. A function must either be declared or defined before it is used. It may be declared first and defined later. Every program consists of a set of a set of global variable declarations and a set of function definitions (possibly in separate files), one of which must be: int main() { statements... } // or int main(int argc, char* argv[]) { statements... }  argv is an array of argc strings from the command line. By convention, main returns status 0 if successful, 1 or higher for errors. Functions with different parameters may have the same name (overloading). Operators except :: . .* ?: may be overloaded. Precedence order is not affected. New operators may not be created. "},{"title":"Expressions​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#expressions","content":"Operators are grouped by precedence, highest first. Unary operators and assignment evaluate right to left. All others are left to right. Precedence does not affect order of evaluation, which is undefined. There are no run time checks for arrays out of bounds, invalid pointers, etc. T::X // Name X defined in class T N::X // Name X defined in namespace N ::X // Global name X t.x // Member x of struct or class t p-&gt; x // Member x of struct or class pointed to by p a[i] // i'th element of array a f(x,y) // Call to function f with arguments x and y T(x,y) // Object of class T initialized with x and y x++ // Add 1 to x, evaluates to original x (postfix) x-- // Subtract 1 from x, evaluates to original x typeid(x) // Type of x typeid(T) // Equals typeid(x) if x is a T dynamic_cast&lt; T&gt;(x) // Converts x to a T, checked at run time. static_cast&lt; T&gt;(x) // Converts x to a T, not checked reinterpret_cast&lt; T&gt;(x) // Interpret bits of x as a T const_cast&lt; T&gt;(x) // Converts x to same type T but not const sizeof x // Number of bytes used to represent object x sizeof(T) // Number of bytes to represent type T ++x // Add 1 to x, evaluates to new value (prefix) --x // Subtract 1 from x, evaluates to new value ~x // Bitwise complement of x !x // true if x is 0, else false (1 or 0 in C) -x // Unary minus +x // Unary plus (default) &amp;x // Address of x *p // Contents of address p (*&amp;x equals x) new T // Address of newly allocated T object new T(x, y) // Address of a T initialized with x, y new T[x] // Address of allocated n-element array of T delete p // Destroy and free object at address p delete[] p // Destroy and free array of objects at p (T) x // Convert x to T (obsolete, use .._cast&lt;T&gt;(x)) x * y // Multiply x / y // Divide (integers round toward 0) x % y // Modulo (result has sign of x) x + y // Add, or \\&amp;x[y] x - y // Subtract, or number of elements from *x to *y x &lt;&lt; y // x shifted y bits to left (x * pow(2, y)) x &gt;&gt; y // x shifted y bits to right (x / pow(2, y)) x &lt; y // Less than x &lt;= y // Less than or equal to x &gt; y // Greater than x &gt;= y // Greater than or equal to x &amp; y // Bitwise and (3 &amp; 6 is 2) x ^ y // Bitwise exclusive or (3 ^ 6 is 5) x | y // Bitwise or (3 | 6 is 7) x &amp;&amp; y // x and then y (evaluates y only if x (not 0)) x || y // x or else y (evaluates y only if x is false (0)) x = y // Assign y to x, returns new value of x x += y // x = x + y, also -= *= /= &lt;&lt;= &gt;&gt;= &amp;= |= ^= x ? y : z // y if x is true (nonzero), else z throw x // Throw exception, aborts if not caught x , y // evaluates x and y, returns y (seldom used)  "},{"title":"Classes​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#classes","content":"class T { // A new type private: // Section accessible only to T's member functions protected: // Also accessible to classes derived from T public: // Accessible to all int x; // Member data void f(); // Member function void g() {return;} // Inline member function void h() const; // Does not modify any data members int operator+(int y); // t+y means t.operator+(y) int operator-(); // -t means t.operator-() T(): x(1) {} // Constructor with initialization list T(const T&amp; t): x(t.x) {}// Copy constructor T&amp; operator=(const T&amp; t) {x=t.x; return *this; } // Assignment operator ~T(); // Destructor (automatic cleanup routine) explicit T(int a); // Allow t=T(3) but not t=3 T(float x): T((int)x) {}// Delegate constructor to T(int) operator int() const {return x;} // Allows int(t) friend void i(); // Global function i() has private access friend class U; // Members of class U have private access static int y; // Data shared by all T objects static void l(); // Shared code. May access y but not x class Z {}; // Nested class T::Z typedef int V; // T::V means int }; void T::f() { // Code for member function f of class T this-&gt;x = x;} // this is address of self (means x=x;) int T::y = 2; // Initialization of static member (required) T::l(); // Call to static member T t; // Create object t implicit call constructor t.f(); // Call method f on object t struct T { // Equivalent to: class T { public: virtual void i(); // May be overridden at run time by derived class virtual void g()=0; }; // Must be overridden (pure virtual) class U: public T { // Derived class U inherits all members of base T public: void g(int) override; }; // Override method g class V: private T {}; // Inherited members of T become private class W: public T, public U {}; // Multiple inheritance class X: public virtual T {}; // Classes derived from X have base T directly  All classes have a default copy constructor, assignment operator, and destructor, which perform the corresponding operations on each data member and each base class as shown above. There is also a default no-argument constructor (required to create arrays) if the class has no constructors. Constructors, assignment, and destructors do not inherit. "},{"title":"Templates​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#templates","content":"template &lt;class T&gt; T f(T t);// Overload f for all types template &lt;class T&gt; class X {// Class with type parameter T X(T t); }; // A constructor template &lt;class T&gt; X&lt;T&gt;::X(T t) {} // Definition of constructor X&lt;int&gt; x(3); // An object of type &quot;X of int&quot; template &lt;class T, class U=T, int n=0&gt; // Template with default parameters  "},{"title":"Namespaces​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#namespaces","content":"namespace N {class T {};} // Hide name T N::T t; // Use name T in namespace N using namespace N; // Make T visible without N::  "},{"title":"memory (dynamic memory management)​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#memory-dynamic-memory-management","content":"#include &lt;memory&gt; // Include memory (std namespace) shared_ptr&lt;int&gt; x; // Empty shared_ptr to a integer on heap. Uses reference counting for cleaning up objects. x = make_shared&lt;int&gt;(12); // Allocate value 12 on heap shared_ptr&lt;int&gt; y = x; // Copy shared_ptr, implicit changes reference count to 2. cout &lt;&lt; *y; // Dereference y to print '12' if (y.get() == x.get()) { // Raw pointers (here x == y) cout &lt;&lt; &quot;Same&quot;; } y.reset(); // Eliminate one owner of object if (y.get() != x.get()) { cout &lt;&lt; &quot;Different&quot;; } if (y == nullptr) { // Can compare against nullptr (here returns true) cout &lt;&lt; &quot;Empty&quot;; } y = make_shared&lt;int&gt;(15); // Assign new value cout &lt;&lt; *y; // Dereference x to print '15' cout &lt;&lt; *x; // Dereference x to print '12' weak_ptr&lt;int&gt; w; // Create empty weak pointer w = y; // w has weak reference to y. if (shared_ptr&lt;int&gt; s = w.lock()) { // Has to be copied into a shared_ptr before usage cout &lt;&lt; *s; } unique_ptr&lt;int&gt; z; // Create empty unique pointers unique_ptr&lt;int&gt; q; z = make_unique&lt;int&gt;(16); // Allocate int (16) on heap. Only one reference allowed. q = move(z); // Move reference from z to q. if (z == nullptr){ cout &lt;&lt; &quot;Z null&quot;; } cout &lt;&lt; *q; shared_ptr&lt;B&gt; r; r = dynamic_pointer_cast&lt;B&gt;(t); // Converts t to a shared_ptr&lt;B&gt;  "},{"title":"math.h, cmath (floating point math)​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#mathh-cmath-floating-point-math","content":"#include &lt;cmath&gt; // Include cmath (std namespace) sin(x); cos(x); tan(x); // Trig functions, x (double) is in radians asin(x); acos(x); atan(x); // Inverses atan2(y, x); // atan(y/x) sinh(x); cosh(x); tanh(x); // Hyperbolic sin, cos, tan functions exp(x); log(x); log10(x); // e to the x, log base e, log base 10 pow(x, y); sqrt(x); // x to the y, square root ceil(x); floor(x); // Round up or down (as a double) fabs(x); fmod(x, y); // Absolute value, x mod y  "},{"title":"assert.h, cassert (Debugging Aid)​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#asserth-cassert-debugging-aid","content":"#include &lt;cassert&gt; // Include iostream (std namespace) assert(e); // If e is false, print message and abort #define NDEBUG // (before #include &lt;assert.h&gt;), turn off assert  "},{"title":"iostream.h, iostream (Replaces stdio.h)​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#iostreamh-iostream-replaces-stdioh","content":"#include &lt;iostream&gt; // Include iostream (std namespace) cin &gt;&gt; x &gt;&gt; y; // Read words x and y (any type) from stdin cout &lt;&lt; &quot;x=&quot; &lt;&lt; 3 &lt;&lt; endl; // Write line to stdout cerr &lt;&lt; x &lt;&lt; y &lt;&lt; flush; // Write to stderr and flush c = cin.get(); // c = getchar(); cin.get(c); // Read char cin.getline(s, n, '\\n'); // Read line into char s[n] to '\\n' (default) if (cin) // Good state (not EOF)? // To read/write any type T: istream&amp; operator&gt;&gt;(istream&amp; i, T&amp; x) {i &gt;&gt; ...; x=...; return i;} ostream&amp; operator&lt;&lt;(ostream&amp; o, const T&amp; x) {return o &lt;&lt; ...;}  "},{"title":"fstream.h, fstream (File I/O works like cin, cout as above)​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#fstreamh-fstream-file-io-works-like-cin-cout-as-above","content":"#include &lt;fstream&gt; // Include filestream (std namespace) ifstream f1(&quot;filename&quot;); // Open text file for reading if (f1) // Test if open and input available f1 &gt;&gt; x; // Read object from file f1.get(s); // Read char or line f1.getline(s, n); // Read line into string s[n] ofstream f2(&quot;filename&quot;); // Open file for writing if (f2) f2 &lt;&lt; x; // Write to file  "},{"title":"string (Variable sized character array)​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#string-variable-sized-character-array","content":"#include &lt;string&gt; // Include string (std namespace) string s1, s2=&quot;hello&quot;; // Create strings s1.size(), s2.size(); // Number of characters: 0, 5 s1 += s2 + ' ' + &quot;world&quot;; // Concatenation s1 == &quot;hello world&quot; // Comparison, also &lt;, &gt;, !=, etc. s1[0]; // 'h' s1.substr(m, n); // Substring of size n starting at s1[m] s1.c_str(); // Convert to const char* s1 = to_string(12.05); // Converts number to string getline(cin, s); // Read line ending in '\\n'  "},{"title":"vector (Variable sized array/stack with built in memory allocation)​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#vector-variable-sized-arraystack-with-built-in-memory-allocation","content":"#include &lt;vector&gt; // Include vector (std namespace) vector&lt;int&gt; a(10); // a[0]..a[9] are int (default size is 0) vector&lt;int&gt; b{1,2,3}; // Create vector with values 1,2,3 a.size(); // Number of elements (10) a.push_back(3); // Increase size to 11, a[10]=3 a.back()=4; // a[10]=4; a.pop_back(); // Decrease size by 1 a.front(); // a[0]; a[20]=1; // Crash: not bounds checked a.at(20)=1; // Like a[20] but throws out_of_range() for (int&amp; p : a) p=0; // C++11: Set all elements of a to 0 for (vector&lt;int&gt;::iterator p=a.begin(); p!=a.end(); ++p) *p=0; // C++03: Set all elements of a to 0 vector&lt;int&gt; b(a.begin(), a.end()); // b is copy of a vector&lt;T&gt; c(n, x); // c[0]..c[n-1] init to x T d[10]; vector&lt;T&gt; e(d, d+10); // e is initialized from d  "},{"title":"deque (Array stack queue)​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#deque-array-stack-queue","content":"deque&lt;T&gt; is like vector&lt;T&gt;, but also supports: #include &lt;deque&gt; // Include deque (std namespace) a.push_front(x); // Puts x at a[0], shifts elements toward back a.pop_front(); // Removes a[0], shifts toward front  "},{"title":"utility (pair)​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#utility-pair","content":"#include &lt;utility&gt; // Include utility (std namespace) pair&lt;string, int&gt; a(&quot;hello&quot;, 3); // A 2-element struct a.first; // &quot;hello&quot; a.second; // 3  "},{"title":"map (associative array - usually implemented as binary search trees - avg. time complexity: O(log n))​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#map-associative-array---usually-implemented-as-binary-search-trees---avg-time-complexity-olog-n","content":"#include &lt;map&gt; // Include map (std namespace) map&lt;string, int&gt; a; // Map from string to int a[&quot;hello&quot;] = 3; // Add or replace element a[&quot;hello&quot;] for (auto&amp; p:a) cout &lt;&lt; p.first &lt;&lt; p.second; // Prints hello, 3 a.size(); // 1  "},{"title":"unordered_map (associative array - usually implemented as hash table - avg. time complexity: O(1))​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#unordered_map-associative-array---usually-implemented-as-hash-table---avg-time-complexity-o1","content":"#include &lt;unordered_map&gt; // Include map (std namespace) unordered_map&lt;string, int&gt; a; // Map from string to int a[&quot;hello&quot;] = 3; // Add or replace element a[&quot;hello&quot;] for (auto&amp; p:a) cout &lt;&lt; p.first &lt;&lt; p.second; // Prints hello, 3 a.size(); // 1  "},{"title":"set (store unique elements - usually implemented as binary search trees - avg. time complexity: O(log n))​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#set-store-unique-elements---usually-implemented-as-binary-search-trees---avg-time-complexity-olog-n","content":"#include &lt;set&gt; // Include set (std namespace) set&lt;int&gt; s; // Set of integers s.insert(123); // Add element to set if (s.find(123) != s.end()) // Search for an element s.erase(123); cout &lt;&lt; s.size(); // Number of elements in set  "},{"title":"unordered_set (store unique elements - usually implemented as a hash set - avg. time complexity: O(1))​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#unordered_set-store-unique-elements---usually-implemented-as-a-hash-set---avg-time-complexity-o1","content":"#include &lt;unordered_set&gt; // Include set (std namespace) unordered_set&lt;int&gt; s; // Set of integers s.insert(123); // Add element to set if (s.find(123) != s.end()) // Search for an element s.erase(123); cout &lt;&lt; s.size(); // Number of elements in set  "},{"title":"algorithm (A collection of 60 algorithms on sequences with iterators)​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#algorithm-a-collection-of-60-algorithms-on-sequences-with-iterators","content":"#include &lt;algorithm&gt; // Include algorithm (std namespace) min(x, y); max(x, y); // Smaller/larger of x, y (any type defining &lt;) swap(x, y); // Exchange values of variables x and y sort(a, a+n); // Sort array a[0]..a[n-1] by &lt; sort(a.begin(), a.end()); // Sort vector or deque reverse(a.begin(), a.end()); // Reverse vector or deque  "},{"title":"chrono (Time related library)​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#chrono-time-related-library","content":"#include &lt;chrono&gt; // Include chrono using namespace std::chrono; // Use namespace auto from = // Get current time_point high_resolution_clock::now(); // ... do some work auto to = // Get current time_point high_resolution_clock::now(); using ms = // Define ms as floating point duration duration&lt;float, milliseconds::period&gt;; // Compute duration in milliseconds cout &lt;&lt; duration_cast&lt;ms&gt;(to - from) .count() &lt;&lt; &quot;ms&quot;;  "},{"title":"thread (Multi-threading library)​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#thread-multi-threading-library","content":"#include &lt;thread&gt; // Include thread unsigned c = hardware_concurrency(); // Hardware threads (or 0 for unknown) auto lambdaFn = [](){ // Lambda function used for thread body cout &lt;&lt; &quot;Hello multithreading&quot;; }; thread t(lambdaFn); // Create and run thread with lambda t.join(); // Wait for t finishes // --- shared resource example --- mutex mut; // Mutex for synchronization condition_variable cond; // Shared condition variable const char* sharedMes // Shared resource = nullptr; auto pingPongFn = // thread body (lambda). Print someone else's message [&amp;](const char* mes){ while (true){ unique_lock&lt;mutex&gt; lock(mut);// locks the mutex do { cond.wait(lock, [&amp;](){ // wait for condition to be true (unlocks while waiting which allows other threads to modify) return sharedMes != mes; // statement for when to continue }); } while (sharedMes == mes); // prevents spurious wakeup cout &lt;&lt; sharedMes &lt;&lt; endl; sharedMes = mes; lock.unlock(); // no need to have lock on notify cond.notify_all(); // notify all condition has changed } }; sharedMes = &quot;ping&quot;; thread t1(pingPongFn, sharedMes); // start example with 3 concurrent threads thread t2(pingPongFn, &quot;pong&quot;); thread t3(pingPongFn, &quot;boing&quot;);  "},{"title":"future (thread support library)​","type":1,"pageTitle":"C++","url":"docs/languageSpecific/cPlusPlus/#future-thread-support-library","content":"#include &lt;future&gt; // Include future function&lt;int(int)&gt; fib = // Create lambda function [&amp;](int i){ if (i &lt;= 1){ return 1; } return fib(i-1) + fib(i-2); }; future&lt;int&gt; fut = // result of async function async(launch::async, fib, 4); // start async function in other thread // do some other work cout &lt;&lt; fut.get(); // get result of async function. Wait if needed.  "},{"title":"Run Java Apps In Docker","type":0,"sectionRef":"#","url":"docs/languageSpecific/java/runJavaAppsInDocker/","content":"Run Java Apps In Docker FROM openjdk # using maven example COPY target/helloworld-1.0-SNAPSHOT.jar /deployments/ # method 1 CMD java -cp /deployments/helloworld-1.0-SNAPSHOT.jar com.dockerapp.App # method 2: requires maven-jar-plugin to run # CMD java -jar /deployments/helloworld-1.0-SNAPSHOT.jar ","keywords":""},{"title":"NodeJS","type":0,"sectionRef":"#","url":"docs/languageSpecific/javascript/nodejs","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#introduction","content":"Node.js is an open-source and cross-platform JavaScript runtime environmentit runs the V8 JavaScript engine, the core of Google Chrome, outside of the browser This allows Node.js to be very performant A Node.js app runs in a single process, without creating a new thread for every request Node.js provides a set of asynchronous I/O primitives in its standard library that prevent JavaScript code from blockinglibraries in Node.js are written using non-blocking paradigms, making blocking behavior the exception rather than the norm When Node.js performs an I/O operation, like reading from the network, accessing a database or the filesystem instead of blocking the thread and wasting CPU cycles waiting, Node.js will resume the operations when the response comes backThis allows Node.js to handle thousands of concurrent connections with a single server without introducing the burden of managing thread concurrency which could be a significant source of bugs you are in charge of deciding which ECMAScript version to use by changing the Node.js version you can also enable specific experimental features by running Node.js with flags "},{"title":"Difference between NodeJS and the browser​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#difference-between-nodejs-and-the-browser","content":"Both the browser and Node.js use JavaScript as their programming languagethe difference lies in the ecosystem In the browser most of the time what you are doing is interacting with the DOM, or other Web Platform APIs like Cookieswe don't have all the nice APIs that Node.js provides through its modules e.g.: filesystem access functionality in the browser environment, you don't get to choose what browser your visitors will useSince JavaScript moves so fast, but browsers can be a bit slow to upgrade sometimes on the web you are stuck with using older JavaScript / ECMAScript releasesYou can use Babel to transform your code to be ES5-compatible before shipping it to the browserin the browser we are starting to see the ES Modules standard being implementedyou are limited to import in the browser In Node.js don't have the document, window and all the other objects that are provided by the browseryou control the environment Unless you are building an open source application that anyone can deploy anywhere, you know which version of Node.js you will run the application onThis means that you can write all the modern ES6-7-8-9 JavaScript that your Node.js version supports it supports both the CommonJS and ES module systems (since Node.js v12)you can use both require() and import in Node.js "},{"title":"V8 JavaScript Engine​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#v8-javascript-engine","content":"V8 is the name of the JavaScript engine that powers Google Chrome It's the thing that takes our JavaScript and executes it while browsing with Chrome i.e. it parses and executes JavaScript code The DOM, and the other Web Platform APIs (they all makeup runtime environment) are provided by the browser the JavaScript engine is independent of the browser in which it's hosted This key feature enabled the rise of Node.jsV8 was chosen to be the engine that powered Node.js back in 2009as the popularity of Node.js exploded, V8 became the engine that now powers an incredible amount of server-side code written in JavaScript The Node.js ecosystem is huge and thanks to V8 which also powers desktop apps, with projects like ElectronV8 is written in C++, and it's continuously improved It is portable and runs on Mac, Windows, Linux and several other systems "},{"title":"Compilation​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#compilation","content":"JavaScript is generally considered an interpreted language but modern JavaScript engines no longer just interpret JavaScript, they compile it This has been happening since 2009, when the SpiderMonkey JavaScript compiler was added to Firefox 3.5, and everyone followed this idea JavaScript is internally compiled by V8 with just-in-time (JIT) compilation to speed up the executionOur applications can now run for hours inside a browser, rather than being just a few form validation rules or simple scriptscompiling JavaScript makes perfect sense because although it might take a little bit more to have the JavaScript readyonce done it's going to be much more performant than purely interpreted code "},{"title":"NodeJS Event Loop​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#nodejs-event-loop","content":" "},{"title":"Introduction​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#introduction-1","content":"what is the node event loop? it is a semi-infinite while loop that allows Node.js to perform non-blocking I/O operations despite the fact that JavaScript is single-threadedby offloading operations to the system kernel whenever possibleSince most modern kernels are multi-threaded, they can handle multiple operations executing in the background When one of these operations completes, the kernel tells Node.js so that the appropriate callback may be added to the poll queue to eventually be executed Why is this so important? Because it explains how Node.js can be asynchronous and have non-blocking I/O The Node.js JavaScript code runs on a single thread There is just one thing happening at a timeThis is a limitation that's actually very helpful as it simplifies a lot how you program without worrying about concurrency issuesYou just need to pay attention to how you write your codeavoid anything that could block the thread, like synchronous network calls or infinite loops in most browsers there is an event loop for every browser tab it makes every process isolated and avoid a web page with infinite loops or heavy processing to block your entire browser The environment manages multiple concurrent event loops, to handle API calls Web Workers run in their own event loop as well You mainly need to be concerned that your code will run on a single event loop, and write code with this thing in mind to avoid blocking it "},{"title":"Blocking the event loop​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#blocking-the-event-loop","content":"Any JavaScript code that takes too long to return back control to the event loop will block the execution of any JavaScript code in the page it even block the UI thread, and the user cannot click around, scroll the page, etc. Almost all the I/O primitives in JavaScript are non-blocking Network requests, filesystem operations, and so onBeing blocking is the exception, and this is why JavaScript is based so much on callbacks, and more recently on promises and async/await "},{"title":"The Call Stack​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#the-call-stack","content":"The call stack is a LIFO (Last In, First Out) stack The event loop continuously checks the call stack to see if there's any function that needs to run While doing so, it adds any function call it finds in the call stack and executes each one in order in the error stack trace from the debugger or in the browser console the browser looks up the function names in the call stack to inform you which function originates the current call "},{"title":"Simple event loop explanation​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#simple-event-loop-explanation","content":"When this code runs first foo() is calledInside foo() we first call bar()then we call baz() const bar = () =&gt; console.log(&quot;bar&quot;); const baz = () =&gt; console.log(&quot;baz&quot;); const foo = () =&gt; { console.log(&quot;foo&quot;); bar(); baz(); }; foo();  foo bar baz   "},{"title":"Queuing function execution​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#queuing-function-execution","content":"it defer a function until the stack is clear When this code runs first foo() is calledInside foo() we first call setTimeout, passing bar as an argument we instruct it to run immediately as fast as it can, passing 0 as the timer Then we call baz() const bar = () =&gt; console.log(&quot;bar&quot;); const baz = () =&gt; console.log(&quot;baz&quot;); const foo = () =&gt; { console.log(&quot;foo&quot;); setTimeout(bar, 0); baz(); }; foo();  foo baz bar   "},{"title":"The Message Queue​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#the-message-queue","content":"When setTimeout() is called, the Browser or Node.js starts the timer Once the timer expires, in this case immediately as we put 0 as the timeout, the callback function is put in the Message Queue The Message Queue is also where user-initiated events like click or keyboard events, or fetch responses are queued before your code has the opportunity to react to them Or also DOM events like onload The loop gives priority to the call stack, and it first processes everything it finds in the call stack once there's nothing in there, it goes to pick up things in the message queue We don't have to wait for functions like setTimeout, fetch or other things to do their own work because they are provided by the browser, and they live on their own threadsFor example, if you set the setTimeout timeout to 2 seconds, you don't have to wait 2 seconds the wait happens elsewhere "},{"title":"ES6 Job Queue​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#es6-job-queue","content":"ECMAScript 2015 introduced the concept of the Job Queue, which is used by Promises (also introduced in ES6/ES2015) It's a way to execute the result of an async function as soon as possible, rather than being put at the end of the call stack Promises that resolve before the current function ends will be executed right after the current functionSimilar to a rollercoaster ride at an amusement park the message queue puts you at the back of the queue, behind all the other people, where you will have to wait for your turnwhile the job queue is the fastpass ticket that lets you take another ride right after you finished the previous one const bar = () =&gt; console.log(&quot;bar&quot;); const baz = () =&gt; console.log(&quot;baz&quot;); const foo = () =&gt; { console.log(&quot;foo&quot;); setTimeout(bar, 0); new Promise((resolve, reject) =&gt; resolve(&quot;should be right after baz, before bar&quot;) ).then((resolve) =&gt; console.log(resolve)); baz(); }; foo();  foo baz should be right after baz, before bar bar   "},{"title":"Concurrency and Throughput​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#concurrency-and-throughput","content":"JavaScript execution in Node.js is single threaded, so concurrency refers to the event loop's capacity to execute JavaScript callback functions after completing other work Any code that is expected to run in a concurrent manner must allow the event loop to continue running as non-JavaScript operations, like I/O, are occurring As an example, let's consider a case where each request to a web server takes 50ms to complete and 45ms of that 50ms is database I/O that can be done asynchronously Choosing non-blocking asynchronous operations frees up that 45ms per request to handle other requestsThis is a significant difference in capacity just by choosing to use non-blocking methods instead of blocking methods The event loop is different than models in many other languages where additional threads may be created to handle concurrent work "},{"title":"process.nextTick()​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#processnexttick","content":"Every time the event loop takes a full trip, we call it a tick When we pass a function to process.nextTick() we instruct the engine to invoke this function at the end of the current operation, before the next event loop tick starts process.nextTick(() =&gt; { // do something }); The event loop is busy processing the current function code When this operation ends, the JS engine runs all the functions passed to nextTick calls during that operation It's the way we can tell the JS engine to process a function asynchronously (after the current function), but as soon as possible, not queue it Calling setTimeout(() =&gt; {}, 0) will execute the function at the end of next tick, much later than when using nextTick() which prioritizes the call and executes it just before the beginning of the next tick Use nextTick() when you want to make sure that in the next event loop iteration that code is already executed "},{"title":"setImmediate()​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#setimmediate","content":"When you want to execute some piece of code asynchronously, but as soon as possible use the setImmediate() function provided by Node.js Any function passed as the setImmediate() argument is a callback that's executed in the next iteration of the event loop A function passed to process.nextTick() is going to be executed on the current iteration of the event loop after the current operation ends This means it will always execute before setTimeout and setImmediate A setTimeout() callback with a 0ms delay is very similar to setImmediate() The execution order will depend on various factors, but they will be both run in the next iteration of the event loop A process.nextTick callback is added to process.nextTick queue A Promise.then() callback is added to promises microtask queueA setTimeout, setImmediate callback is added to macrotask queue Event loop executes tasks in process.nextTick queue firstthen executes promises.then() microtask queuethen executes setTimeout, setImmediatecallbacks macrotask queue code will first call start()then call foo() in process.nextTick queueAfter that, it will handle promises microtask queue, which prints bar and adds zoo() in process.nextTick queue at the same timeThen it will call zoo() which has just been addedIn the end, the baz() in macrotask queue is called const baz = () =&gt; console.log(&quot;baz&quot;); const foo = () =&gt; console.log(&quot;foo&quot;); const zoo = () =&gt; console.log(&quot;zoo&quot;); const start = () =&gt; { console.log(&quot;start&quot;); setImmediate(baz); new Promise((resolve, reject) =&gt; { console.log(&quot;resolve&quot;); resolve(&quot;bar&quot;); }).then((resolve) =&gt; { console.log(resolve); process.nextTick(zoo); }); process.nextTick(foo); }; start();  start resolve foo bar zoo baz  "},{"title":"JavaScript Timers​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#javascript-timers","content":""},{"title":"setTimeout()​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#settimeout","content":"When writing JavaScript code, you might want to delay the execution of a functionYou specify a callback function to execute later, and a value expressing how later you want it to run, in milliseconds // method 1 const myFunction = (firstParam, secondParam) =&gt; { // do something }; // runs after 2 seconds setTimeout(myFunction, 2000, firstParam, secondParam); // method 2 setTimeout(() =&gt; { // do something with firstParam, secondParam }, 2000);  clearing timeout const id = setTimeout(() =&gt; { // should run after 2 seconds }, 2000); // I changed my mind clearTimeout(id);  "},{"title":"setInterval()​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#setinterval","content":"a function similar to setTimeout, with a difference: instead of running the callback function once, it will run it forever, at the specific time interval you specify (in milliseconds) // method 1 const id = setInterval(() =&gt; { // runs every 2 seconds }, 2000); clearInterval(id); // method 2 const interval = setInterval(() =&gt; { if (App.somethingIWait === &quot;arrived&quot;) { clearInterval(interval); } // otherwise do things }, 100);  "},{"title":"Recursive setTimeout​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#recursive-settimeout","content":"setInterval starts a function every n milliseconds, without any consideration about when a function finished its execution if you need every function to execute after it has completed at a set interval, use recursive setTimeout instead const myFunction = () =&gt; { // do something setTimeout(myFunction, 1000); }; setTimeout(myFunction, 1000);  "},{"title":"Orchestrating promises​","type":1,"pageTitle":"NodeJS","url":"docs/languageSpecific/javascript/nodejs#orchestrating-promises","content":"Promise all​ If you need to synchronize different promises, Promise.all() helps you define a list of promises, and execute something when they are all resolved // method 1 const f1 = fetch(&quot;/something.json&quot;); const f2 = fetch(&quot;/something2.json&quot;); Promise.all([f1, f2]) .then((res) =&gt; { console.log(&quot;Array of results&quot;, res); }) .catch((err) =&gt; { console.error(err); }); // method 2 Promise.all([f1, f2]).then(([res1, res2]) =&gt; { console.log(&quot;Results&quot;, res1, res2); });  Promise race​ Promise.race() runs when the first of the promises you pass to it settles (resolves or rejects), and it runs the attached callback just once, with the result of the first promise settled only have 1 winner const first = new Promise((resolve, reject) =&gt; { setTimeout(resolve, 500, &quot;first&quot;); }); const second = new Promise((resolve, reject) =&gt; { setTimeout(resolve, 100, &quot;second&quot;); }); Promise.race([first, second]).then((result) =&gt; { console.log(result); // second });  Promise any​ Promise.any() settles when any of the promises you pass to it fulfill or all of the promises get rejectedIt returns a single promise that resolves with the value from the first promise that is fulfilledIf all promises are rejected, then the returned promise is rejected with an AggregateError const first = new Promise((resolve, reject) =&gt; { setTimeout(reject, 500, &quot;first&quot;); }); const second = new Promise((resolve, reject) =&gt; { setTimeout(reject, 100, &quot;second&quot;); }); Promise.any([first, second]).catch((error) =&gt; { console.log(error); // AggregateError });  "},{"title":"Reduce method","type":0,"sectionRef":"#","url":"docs/languageSpecific/javascript/reduce","content":"","keywords":""},{"title":"Calculate sum of values in array​","type":1,"pageTitle":"Reduce method","url":"docs/languageSpecific/javascript/reduce#calculate-sum-of-values-in-array","content":"const intArr = [1, 2, 3, 4]; const intResult = intArr.reduce((acc, x) =&gt; acc + x); console.log(intResult); // 10  "},{"title":"Combine and join arrays by ID​","type":1,"pageTitle":"Reduce method","url":"docs/languageSpecific/javascript/reduce#combine-and-join-arrays-by-id","content":"data const users = [ { userID: &quot;1&quot;, username: &quot;John40&quot;, country: &quot;USA&quot;, name: &quot;John&quot;, }, { userID: &quot;2&quot;, username: &quot;Luke123&quot;, country: &quot;Sweden&quot;, name: &quot;Luke&quot;, }, { userID: &quot;3&quot;, username: &quot;Lora123&quot;, country: &quot;Finland&quot;, name: &quot;Lora&quot;, }, { userID: &quot;4&quot;, username: &quot;MIKE&quot;, country: &quot;GB&quot;, name: &quot;Mike&quot;, }, { userID: &quot;5&quot;, username: &quot;Emmi1990&quot;, country: &quot;Finland&quot;, name: &quot;Emmi&quot;, }, ]; const data = [ { userID: &quot;1&quot;, amt: 20, }, { userID: &quot;2&quot;, amt: 30, }, { userID: &quot;3&quot;, amt: 40, }, { userID: &quot;4&quot;, amt: 50, }, { userID: &quot;1&quot;, amt: 100, }, ]; combine data by ID const combined = users.concat(data); const result = Object.values( combined.reduce((acc, x) =&gt; { // if acc.userID object does not exist, replace it with an empty object // combine object at acc.userID with x object acc[x.userID] = Object.assign(acc[x.userID] || {}, x); return acc; // initial value required for x value not to start from 2nd element of array }, {}) ); console.log(result); [ { userID: &quot;1&quot;, username: &quot;John40&quot;, country: &quot;USA&quot;, name: &quot;John&quot;, amt: 100, }, { userID: &quot;2&quot;, username: &quot;Luke123&quot;, country: &quot;Sweden&quot;, name: &quot;Luke&quot;, amt: 30, }, { userID: &quot;3&quot;, username: &quot;Lora123&quot;, country: &quot;Finland&quot;, name: &quot;Lora&quot;, amt: 40, }, { userID: &quot;4&quot;, username: &quot;MIKE&quot;, country: &quot;GB&quot;, name: &quot;Mike&quot;, amt: 50, }, { userID: &quot;5&quot;, username: &quot;Emmi1990&quot;, country: &quot;Finland&quot;, name: &quot;Emmi&quot;, }, ]; combine data by ID and increment duplicates const combined = users.concat(data); const result = Object.values( combined.reduce((acc, x) =&gt; { // set default value for objects that does not have amt property const currentAmt = acc[x.userID]?.amt ? acc[x.userID].amt : 0; const nextAmt = x?.amt ? x.amt : 0; // if acc.userID object does not exist, replace it with an empty object // combine object at acc.userID with modified x object acc[x.userID] = Object.assign(acc[x.userID] || {}, { ...x, amt: currentAmt + nextAmt, }); return acc; // initial value required for x value not to start from 2nd element of array }, {}) ); console.log(result); [ { userID: &quot;1&quot;, username: &quot;John40&quot;, country: &quot;USA&quot;, name: &quot;John&quot;, amt: 120, }, { userID: &quot;2&quot;, username: &quot;Luke123&quot;, country: &quot;Sweden&quot;, name: &quot;Luke&quot;, amt: 30, }, { userID: &quot;3&quot;, username: &quot;Lora123&quot;, country: &quot;Finland&quot;, name: &quot;Lora&quot;, amt: 40, }, { userID: &quot;4&quot;, username: &quot;MIKE&quot;, country: &quot;GB&quot;, name: &quot;Mike&quot;, amt: 50, }, { userID: &quot;5&quot;, username: &quot;Emmi1990&quot;, country: &quot;Finland&quot;, name: &quot;Emmi&quot;, amt: 0, }, ];  "},{"title":"TypeScript","type":0,"sectionRef":"#","url":"docs/languageSpecific/javascript/typescript","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"TypeScript","url":"docs/languageSpecific/javascript/typescript#installation","content":"npm i -D typescript "},{"title":"Run​","type":1,"pageTitle":"TypeScript","url":"docs/languageSpecific/javascript/typescript#run","content":"npx tsc example.ts "},{"title":"Syntax​","type":1,"pageTitle":"TypeScript","url":"docs/languageSpecific/javascript/typescript#syntax","content":""},{"title":"Basic Types​","type":1,"pageTitle":"TypeScript","url":"docs/languageSpecific/javascript/typescript#basic-types","content":"let id: number = 5; // not required to define type let id = 5; // this already defines the type let company: string = &quot;test&quot;; let isPublished: boolean = true; let x: any = &quot;hello&quot;; // try not to use the any keyword let ids: number[] = [1, 2, 3, 4]; let arr: any[] = [1, true, &quot;hello&quot;]; // type format can be anything let person: [number, string, boolean] = [1, &quot;Brad&quot;, true]; // must follow type format and order type Point = string | number; // works for type but not interface const p1: Point = 1; // works for both type and interface type Point2 = { id: number; x: number; }; const p2: Point2 = { id: 1, x: 2, }; // dynamic property types, use when you don't know all the property names type UnknownObject = { [k: string]: string; };  "},{"title":"union​","type":1,"pageTitle":"TypeScript","url":"docs/languageSpecific/javascript/typescript#union","content":"let employee: (string | number)[]; // allow strings and/or numbers in array  "},{"title":"enum​","type":1,"pageTitle":"TypeScript","url":"docs/languageSpecific/javascript/typescript#enum","content":"// value starts from 0 by default enum Direction1 { Up, Down, Left, Right, } console.log(Direction1.Up); // 0 by default // set value to start from 1 enum Direction2 { Up = 1, Down, Left, Right, } console.log(Direction2.Left); // 3 enum Direction3 { Up = &quot;Up&quot;, Down = &quot;Down&quot;, Left = &quot;Left&quot;, Right = &quot;Right&quot;, }  "},{"title":"Objects​","type":1,"pageTitle":"TypeScript","url":"docs/languageSpecific/javascript/typescript#objects","content":"// method 1 const user1: { id: number; name: string; } = { id: 1, number: &quot;John&quot;, }; // method 2 type User = { id: number; name: string; }; const user2: User = { id: 1, number: &quot;John&quot;, }; // method 3 interface User2 { id: number; name: string; } const user3: User2 = { id: 1, number: &quot;John&quot;, };  "},{"title":"Type Assertion​","type":1,"pageTitle":"TypeScript","url":"docs/languageSpecific/javascript/typescript#type-assertion","content":"// method 1 let id: any = 1; let customerId = &lt;number&gt;id; // method 2 let id2: any = 1; let customerId2 = id as number;  "},{"title":"Functions​","type":1,"pageTitle":"TypeScript","url":"docs/languageSpecific/javascript/typescript#functions","content":"function addNum(x: number, y: number): number { return x + y; } function log(msg: string | number): void { console.log(msg); }  "},{"title":"Interface​","type":1,"pageTitle":"TypeScript","url":"docs/languageSpecific/javascript/typescript#interface","content":"can't be used with primitives or unions interface Point { readonly id: number; // disable value modification, also works for type keyword y: number; x?: number; // ? enables it to be optional, also works for type keyword (x: number, y: number): number; } let p2: Point = { id: 1, y: 2, };  functions interface Add { (x: number, y: number): number; } const add: Add = (x: number, y: number): number =&gt; x + y;  "},{"title":"Classes​","type":1,"pageTitle":"TypeScript","url":"docs/languageSpecific/javascript/typescript#classes","content":"// method 1 class Node1 { // adding of access modifiers is needed; does not work for javascript constructor(public element: number, private next?: Node1) {} getNext() { return this.next; } } const n1 = new Node1(1); console.log(n1.element); // 1 // method 2 class Node2 { // not required in javascript public element: number; private next?: Node2; constructor(element: number, next?: Node2) { this.element = element; this.next = next; } getNext() { return this.next; } } const n2 = new Node2(2); console.log(n2.element); // 2 // method 3 interface NodeInterface { element: number; // private next is not required getNext(): NodeInterface | undefined; } class Node3 implements NodeInterface { constructor(public element: number, private next?: NodeInterface) {} getNext() { return this.next; } } const n3 = new Node4(3); console.log(n3.element); // 3 // method 4 class Node4&lt;T&gt; { public element: T; private next?: Node2&lt;T&gt;; constructor(element: T, next?: Node2&lt;T&gt;) { this.element = element; this.next = next; } getElement() { return this.element; } } const n4 = new Node4(4); console.log(n4.element); // 4  Inheritance class Node3 { constructor(public element: number, private next?: Node3) {} getNext() { return this.next; } } class List extends Node3 { dsType: string; constructor(dsType: string, element: number, next?: Node3) { super(element, next); this.dsType = dsType; } }  "},{"title":"Generics​","type":1,"pageTitle":"TypeScript","url":"docs/languageSpecific/javascript/typescript#generics","content":"// method 1 function getArray(items: any[]): any[] { return new Array().concat(items); } let numArr = getArray([1, 2, 3]); // method 2: better method function getArray2&lt;T&gt;(items: T[]): T[] { return new Array().concat(items); } // both works let numArr2 = getArray2([1, 2, 3]); let numArr3 = getArray2&lt;number&gt;([1, 2, 3]);  "},{"title":"Overriding Type or Interface​","type":1,"pageTitle":"TypeScript","url":"docs/languageSpecific/javascript/typescript#overriding-type-or-interface","content":"// can be either interface or type interface A { x: string; y: number; z: string; } const obj: A = { x: &quot;1&quot;, y: 2, z: &quot;3&quot;, }; // method 1: using interface method, A can be either type or interface interface B extends Omit&lt;A, &quot;x&quot; | &quot;z&quot;&gt; { x: number; z: number; } const obj2: B = { x: 1, y: 2, z: 3, }; // method 2: using type method, A can be either type or interface type C = Omit&lt;A, &quot;x&quot; | &quot;z&quot;&gt; &amp; { x: number; z: number; }; const obj3: C = { x: 1, y: 2, z: 3, };  "},{"title":"Handling PIP","type":0,"sectionRef":"#","url":"docs/languageSpecific/python/pip","content":"","keywords":""},{"title":"Create requirements file​","type":1,"pageTitle":"Handling PIP","url":"docs/languageSpecific/python/pip#create-requirements-file","content":"pip freeze &gt; requirements.txt "},{"title":"Uninstall packages installed from requirements.txt​","type":1,"pageTitle":"Handling PIP","url":"docs/languageSpecific/python/pip#uninstall-packages-installed-from-requirementstxt","content":"pip uninstall -r requirements.txt -y "},{"title":"Uninstall all packages without any reference​","type":1,"pageTitle":"Handling PIP","url":"docs/languageSpecific/python/pip#uninstall-all-packages-without-any-reference","content":"pip uninstall -y -r &lt;(pip freeze) "},{"title":"Python Virtual Environment","type":0,"sectionRef":"#","url":"docs/languageSpecific/python/virtualEnv","content":"","keywords":""},{"title":"Create a new environemnt​","type":1,"pageTitle":"Python Virtual Environment","url":"docs/languageSpecific/python/virtualEnv#create-a-new-environemnt","content":"python3 -m venv venvname "},{"title":"Activate virtual environment​","type":1,"pageTitle":"Python Virtual Environment","url":"docs/languageSpecific/python/virtualEnv#activate-virtual-environment","content":". venvname/bin/activate "},{"title":"Deactivate virtual environment​","type":1,"pageTitle":"Python Virtual Environment","url":"docs/languageSpecific/python/virtualEnv#deactivate-virtual-environment","content":"deactivate "},{"title":"XML (eXtensible Markup Language)","type":0,"sectionRef":"#","url":"docs/languageSpecific/xml/","content":"","keywords":""},{"title":"What is XML used for​","type":1,"pageTitle":"XML (eXtensible Markup Language)","url":"docs/languageSpecific/xml/#what-is-xml-used-for","content":"used to structure and describe informationpurpose is to take in information and apply structure and meaning to itit was intended to be used over the internetused to exchange data between disparate systems that may have never been intended to talk with each other e.g.: using XML to bridge the gap between a very old computer system to a new application so as to allow data to be accessed by newer systems "},{"title":"XML related technologies​","type":1,"pageTitle":"XML (eXtensible Markup Language)","url":"docs/languageSpecific/xml/#xml-related-technologies","content":"technologies that make working with XML to solve certain problems easier and more productivee.g.: XPath: eXtensible Path Language it's called XPath because it uses a path-life syntax to perform queries on XML dataXPath is similar to how files are organized on the computer ~/dev/example/file used to find and extract information from XML documentsa sort of a derivative form of XQuery but is used for extracting information from XML in an advanced way XSLT: XML Stylesheet Language Transformations a kind of CSScan be used to style XML information, important word is trsnformationsprovides a way of taking XML information and transforming it into something else transforming into any file (e.g.: pdf, text, webpage, any file format) XQuery: XML Query a type of SQL for XMLa way of extracting data from XML as if it were a databaseprovides more advanced querying than XPathcan build complex queries that search multiple XML files to extract and join information Xpointer and XLink create links between and within XML documentssimilar to link tag in HTML, but more powerful "},{"title":"Describing Data with XML​","type":1,"pageTitle":"XML (eXtensible Markup Language)","url":"docs/languageSpecific/xml/#describing-data-with-xml","content":"raw data Joe Marini - +1 (415) 555-1234 (home) - +1 (800) 555-9867 (work) - +1 (510) 555-1212 (mobile) - joe@joe.com xml data &lt;BusinessCard&gt; &lt;name&gt;Joe Marini&lt;/name&gt; &lt;phone type=&quot;home&quot;&gt;+1 (415) 555-1234&lt;/phone&gt; &lt;phone type=&quot;work&quot;&gt;+1 (800) 555-9867&lt;/phone&gt; &lt;phone type=&quot;mobile&quot;&gt;+1 (510) 555-1212&lt;/phone&gt; &lt;email&gt;joe@joe.com&lt;/email&gt; &lt;/BusinessCard&gt;  "},{"title":"Pros and Cons of XML​","type":1,"pageTitle":"XML (eXtensible Markup Language)","url":"docs/languageSpecific/xml/#pros-and-cons-of-xml","content":"pros\tconsXML keeps content separate from presentation. You can take the data that your app uses &amp; store it separately from how its's presented to users\tXML is not suitable for very large data sets. might not be efficient if storing MB of data XML is an open format that can be read by many apps. Many apps also have ability to output XML\tSome formats like JSON might be better for storing data XML can be used on both the client and the server.\tSome data types like images aren't represented well. Can try to encode images and insert into XML documents but can get ugly quickly XML has widespread support in multiple languages and runtimes.\tXML can quickly become difficult to read when complex XML makes it possible for disparate systems to exchange data.\t "},{"title":"Types of XML Content​","type":1,"pageTitle":"XML (eXtensible Markup Language)","url":"docs/languageSpecific/xml/#types-of-xml-content","content":"XML Document Declaration it is optional, but W3C recommends itit identifies the file as XML documentprovides a place for the encoding and standalone attributesmust be at very beginning, no whitespace before itencoding attribute defaults to UTF-8 if it is not includedstandalone attribute identifies whether or not the document stands by itself or depends on something else &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt; Elements (Tags) and Attributes Elements must have valid names can begin with underscore _ or letter followed by letters, digits, periods, hyphens, underscores cannot use the string xml in any case combination because the W3C reserves that Attributes are specified on opening element tags must start with letter or underscore can be followed by digits, letters, hypens, periods, underscores attributes that begin with &quot;xml&quot; are reservedattributes appear only once on a given element &lt;element attribute=&quot;value&quot;&gt; valid tag names &lt;_Element1&gt; &lt;My.Element&gt; &lt;My-Element_Name&gt; invalid tag names &lt;1Tag&gt; &lt;!-- can't begin with a number --&gt; &lt;#Elem&amp;ent&gt; &lt;!-- invalid characters in name --&gt; &lt;XmL&gt; &lt;!-- the string &quot;xml&quot; is reserved --&gt; Comments can go almost anywhere except inside element bracketsbefore the document declaration &lt;!-- This is an XML comment --&gt; valid comments &lt;element&gt; &lt;!-- comment --&gt; &lt;/element&gt; invalid comments &lt;element &lt;!-- comment --&gt; &gt; Character Data specified using CDATA and are part of document contentthe actual contents of CDATA sections are not parsed by XML parser it skips the internal content and doesn't try to figure what kind of data might be in there typically used to contain unescaped textual data (characters that aren't legal within parsed XML) e.g.: &amp;, &lt;, &gt; &lt;![CDATA[This is unparsed text &amp; data]]&gt; invalid xml &lt;script&gt; function f(a, b) { return a &lt; b; // invalid because &lt; is illegal in XML } &lt;/script&gt; valid xml by using CDATA &lt;script&gt; &lt;![CDATA[ function f(a, b) { return a &lt; b; } ]]&gt; &lt;/script&gt; Processing Instructions a way for XML content to deliver special instructions to XML parser &lt;?targetName instruction ?&gt; &quot;xml&quot; target name is reservedcan start with number or letter, then followed by digits, letters, hyphens, periods, underscorese.g.: app has multiple spell checking modes &lt;?SpellCheckMode mode=&quot;us-english&quot; ?&gt; Entity References help shorten and modularize XML documentsprovide markup for illegal charactersGeneral entities replaces by parser with a full stringe.g.: &amp;copyright; &amp;author; Character entities &amp;#60; &amp;amp; &amp;quot;  "},{"title":"View Groups, Root View, Parent​","type":1,"pageTitle":"XML (eXtensible Markup Language)","url":"docs/languageSpecific/xml/#view-groups-root-view-parent","content":"contains Child groupsthese child groups are Siblings of each other "},{"title":"Linear Layout​","type":1,"pageTitle":"XML (eXtensible Markup Language)","url":"docs/languageSpecific/xml/#linear-layout","content":"&lt;LinearLayout attributeNames &lt;TextView attributeNames /&gt; /LinearLayound&gt;align Views in a linear layout vertically or horizontally: TextView, ImageViewAttribute names for &lt;LinearLayout&gt; /LinearLayout&gt; xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;​ * this is used to specify that all of these attributes here belong to android * Must add XML namespace declaration in opening tag of root view of XML file orientation​ * android:orientation=&quot;vertical&quot; * android:orientation=&quot;horizontal&quot; Size​ * wrap_content * android:layout_width=&quot;wrap_content&quot; * android:layout_height=&quot;wrap_content&quot; * match_parent * use this to match device size * android:layout_width=&quot;match_parent&quot; * android:layout_height=&quot;match_parent&quot;  "},{"title":"Relative Layout​","type":1,"pageTitle":"XML (eXtensible Markup Language)","url":"docs/languageSpecific/xml/#relative-layout","content":"can position children relative to the parentcan position children relative to other children viewsAttribute names for &lt;RelativeLayout&gt; &lt;/RelativeLayout&gt; same as LinearLayout, except orientation is not included xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;​ Size​ child attribute names use android:layout_alignParentTop=&quot;true&quot;use android:layout_alignParentBottom=&quot;true&quot;use android:layout_alignParentLeft=&quot;true&quot;use android:layout_alignParentRight=&quot;true&quot;use android:layout_centerHorizontal=&quot;true&quot;use android:padding=&quot;xxdp&quot;Assign view ID names android:id=&quot;@+id/textView_A&quot; is required when declaring id name for the first time textView_A is the id name positioning children relative to other views android:layout_toLeftOf=&quot;@id/textView_A&quot;android:layout_above=&quot;@id/textView_A&quot; "},{"title":"XML element (tags)​","type":1,"pageTitle":"XML (eXtensible Markup Language)","url":"docs/languageSpecific/xml/#xml-element-tags","content":"TextView, ImageView, Buttone.g.: &lt;TextView attributeNames/&gt; "},{"title":"Attribute names, these must be inside the XML element tags​","type":1,"pageTitle":"XML (eXtensible Markup Language)","url":"docs/languageSpecific/xml/#attribute-names-these-must-be-inside-the-xml-element-tags","content":"e.g.: android:text, android:textColor, android:background, android:layout_width, etc. "},{"title":"Attribute names for <TextView attributeNames/>​","type":1,"pageTitle":"XML (eXtensible Markup Language)","url":"docs/languageSpecific/xml/#attribute-names-for-textview-attributenames","content":"* android:text=&quot;Hello World!&quot; #### colors * limited colors * android:background=&quot;@android:color/darker_gray&quot; * android:textColor=&quot;@android:color/darker_gray&quot; * almost unlimited colors by using the HEX COLOR CODE * android:background=&quot;#2196F3&quot; * android:textColor=&quot;#2196F3&quot; #### height and width * Set size with dp * android:layout_height=&quot;150dp&quot; * android:layout_width=&quot;150dp&quot; * disadvantage: have to keep manually changing the size * Use wrap_content to change the size automatically * android:layout_width=&quot;wrap_content&quot; * android:layout_height=&quot;wrap_content&quot; * Use match_parent to have the same size as parent * android:layout_width=&quot;match_parent&quot; * android:layout_height=&quot;match_parent&quot; * Use android:layout_weight=&quot;0&quot; * 0 is the default value or shares * layout weight is the number of layout shares a child can hold * the more shares a child have, the more space it can claim from the layout * during horzontal orientation * android:layout_width=&quot;0dp&quot; must be 0dp cuz dunno the size * android:layout_weight=&quot;1&quot; higher the value, more space given * during vertial orientation * android:layout_height=&quot;0dp&quot; * android:layout_weight=&quot;1&quot; #### change text size * android:textSize=&quot;45sp&quot; * Scale Independent Pixels (sp) * A unit of measure similar to dp * Makes app consistent across different devices of different densities * Used for FONTS cuz it adjusts based on user's prefs &amp; settings for txt size * android:textAppearance=&quot;?android:textAppearanceSmall&quot; * android:textAppearance=&quot;?android:textAppearanceMedium&quot; * android:textAppearance=&quot;?android:textAppearanceLarge&quot; #### change text styles * android:textStyle=&quot;bold&quot; * android:textStyle=&quot;italic&quot; #### change position !!!Use only for RelativeLayout * android:layout_alignParentRight=&quot;true&quot; * android:layout_alignParentLeft=&quot;false&quot; false by default, dun need declare * android:layout_alignParentTop=&quot;true&quot; * android:layout_alignParentBottom=&quot;false&quot; #### Padding: spaces inside the box * according to material design principles: * set components align to 8dp baseline grid * set type aligns to 4db baseline grid * set toolbars align to 4db square baseline grid * android:padding=&quot;8dp&quot; add spaces to all sides * android:paddingLeft=&quot;8dp&quot; * android:paddingRight=&quot;8dp&quot; * android:paddingTop=&quot;8dp&quot; * android:paddingBottom=&quot;8dp&quot; #### Margin: spaces outside the box * android:layout_margin=&quot;8dp&quot; add spaces to all sides * android:layout_marginLeft=&quot;8dp&quot; * android:layout_marginRight=&quot;8dp&quot; * android:layout_marginTop=&quot;8dp&quot; * android:layout_marginBottom=&quot;8dp&quot;  "},{"title":"Attribute names for <ImageView attributeNames/>​","type":1,"pageTitle":"XML (eXtensible Markup Language)","url":"docs/languageSpecific/xml/#attribute-names-for-imageview-attributenames","content":"* android:src=&quot;@drawable/cake&quot; * @ symbol is used to say we're referencing a resource in the Android app * src is the source * drawable is the resource type * cake is the filename * android:layout_width=&quot;wrap_content&quot; * android:layout_height=&quot;wrap_content&quot; * scaleType * scaleType tells the device how to scale up or scale down image, * based on the bound of the &lt;ImageView attributeNames/&gt; * android:scaleType=&quot;center&quot; * center does not change the size of the image, only center it * android:scaleType=&quot;centerCrop&quot; * This scales down the image to fit the height &amp; width of the view * also maintain aspect ratio of the original image * so it doesn't get distorted * once it scaled down, image will be centered &amp; cropped to fit view size * creates a FULL BLEED IMAGE with edge to edge look without white borders  "},{"title":"Density-Independent Pixels (dp)​","type":1,"pageTitle":"XML (eXtensible Markup Language)","url":"docs/languageSpecific/xml/#density-independent-pixels-dp","content":"Pixels are the number of squares that mades the resolution of the devicebetter device have more pixels in the same amount of spacethe number of pixedls in a fixed space is known as the SCREEN'S PIXEL DENSITY e.g.: a button that takes up 2 pixels by 2 pixels, device size is standardMore pixels = higher resolution = button size will shrink (become smaller)Therefore, to make button size the same size despite the changes in resolutionneed to use dp Recommended to make touch target 48dp minimum (translates to 9mm in physical size) "},{"title":"API (Application Programming Interface)","type":0,"sectionRef":"#","url":"docs/Technologies/API/","content":"","keywords":""},{"title":"REST (Representational State Transfer)​","type":1,"pageTitle":"API (Application Programming Interface)","url":"docs/Technologies/API/#rest-representational-state-transfer","content":"It is an architectural style of the web services (lightweight architecture) work as a channel of communication between different computers or systems on the internet Created to address the problems of SOAP has a more flexible architectureconsists of only loose guidelines and lets developers implement the recommendations in their own wayallows different messaging formats, such as HTML, JSON, XML, and plain text "},{"title":"REST APIs​","type":1,"pageTitle":"API (Application Programming Interface)","url":"docs/Technologies/API/#rest-apis","content":"It is the architectural style of REST architectural system that support the application programming interfacesUtilize stateless existence and the use of HTTP status codesTo create a REST API, need to follow six architectural constraints: Uniform interface Requests from different clients should look the same e.g. the same resource shouldn’t have more than one URI Client-server separation The client and the server should act independentlyThey should interact with each other only through requests and responses Statelessness There shouldn’t be any server-side sessionsEach request should contain all the information the server needs to know Cacheable resources Server responses should contain information about whether the data they send is cacheable or notCacheable resources should arrive with a version number so that the client can avoid requesting the same data more than once Layered system here might be several layers of servers between the client and the server that returns the responseThis shouldn’t affect either the request or the response Code on demand [optional] When it’s necessary, the response can contain executable code (e.g., JavaScript within an HTML response) that the client can execute Advantage: Redeploying manageable and updatable components won't cause an effect on the systemREST API systems deliver fast performance, reliability, and more progression "},{"title":"SOAP (Simple Object Access Protocol)​","type":1,"pageTitle":"API (Application Programming Interface)","url":"docs/Technologies/API/#soap-simple-object-access-protocol","content":"It is a standard communication protocol system a messaging protocol for interchanging data in a decentralized and distributed environmentcan work with any application layer protocol, such as HTTP, SMTP, TCP, or UDPreturns data to the receiver in XML formatSecurity, authorization, and error-handling are built into the protocolunlike REST, it doesn’t assume direct point-to-point communicationtherefore, performs well in a distributed enterprise environment As an official protocol, it comes with strict rules and advanced security features such as built-in ACID compliance and authorization Higher complexity requires more bandwidth and resources, which can lead to slower page load timesA SOAP message is an ordinary XML file that consists of: Envelope (required) This is the starting and ending tags of the message Header (optional) It contains the optional attributes of the messageIt allows you to extend a SOAP message in a modular and decentralized way Body (required) It contains the XML data that the server transmits to the receiver Fault (optional) It carries information about errors occurring during processing the message &lt;env:Envelope xmlns:env=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt; &lt;env:Header&gt; &lt;n:alertcontrol xmlns:n=&quot;http://example.org/alertcontrol&quot;&gt; &lt;n:priority&gt;1&lt;/n:priority&gt; &lt;n:expires&gt;2001-06-22T14:00:00-05:00&lt;/n:expires&gt; &lt;/n:alertcontrol&gt; &lt;/env:Header&gt; &lt;env:Body&gt; &lt;m:alert xmlns:m=&quot;http://example.org/alert&quot;&gt; &lt;m:msg&gt;Pick up Mary at school at 2pm&lt;/m:msg&gt; &lt;/m:alert&gt; &lt;/env:Body&gt; &lt;/env:Envelope&gt; SOAP based APIs are designed to create, recover, update and delete records like accounts, passwords, leads, and custom objects Offers over twenty different kinds of calls that make it easy for the API developers to maintain their accounts, perform accurate searches, etc.Can be used with languages that support web services Advantage: Easy to manipulate web services and get responses without caring about language and platformsGood for enterprise-level web services that require high security and complex transactions e.g.: financial services, payment gateways, CRM software, identity management, and telecommunication services Available Legacy system support "},{"title":"Major Differences​","type":1,"pageTitle":"API (Application Programming Interface)","url":"docs/Technologies/API/#major-differences","content":"REST API: has no official standard as it is an architectural styleSOAP API: has an official standard because it is a protocol REST API: uses multiple standards like HTTP, JSON, URL, and XMLSOAP API: is largely based on HTTP and XML REST API: deploys multiple standards, so it takes fewer resources and bandwidthSOAP API: uses XML for the creation of Payload and results in the large sized file REST API: takes advantage of URL exposure like @path(&quot;/WeatherService&quot;)SOAP API: use of services interfaces like @WebService REST API: don't make emphasis on too many standards and results in corrupt API in the endSOAP API: defines too many standards, and its implementer only implements the things in a standard way In the case of miscommunication from service, the result will be the error REST API: uses Web Application Description LanguageSOAP API: uses Web Services Description language for describing the functionalities being offered by web services REST API: convenient with JavaScript and can be implemented easilySOAP API: also convenient with JavaScript but don't support for greater implementation Type\tSOAP\tRESTMeaning\tSimple Object Access Protocol\tRepresentational State Transfer Design\tStandardized protocol with pre-defined rules to follow\tArchitectural style with loose guidelines and recommendations Approach\tFunction-driven (data available as services, e.g.: “getUser”)\tData-driven (data available as resources, e.g. “user”) Statefulness\tStateless by default, but it’s possible to make a SOAP API stateful\tStateless (no server-side sessions) Caching\tAPI calls cannot be cached\tAPI calls can be cached Security\tWS-Security with SSL support. Built-in ACID compliance\tSupports HTTPS and SSL Performance\tRequires more bandwidth and computing power\tRequires fewer resources Message format\tOnly XML\tPlain text, HTML, XML, JSON, YAML, and others Transfer protocol(s)\tHTTP, SMTP, UDP, and others\tOnly HTTP Recommended for\tEnterprise apps, high-security apps, distributed environment, financial services, payment gateways, telecommunication services\tPublic APIs for web services, mobile services, social networks Advantages\tHigh security, standardized, extensibility\tScalability, better performance, browser-friendliness, flexibility Disadvantages\tPoorer performance, more complexity, less flexibility\tLess security, not suitable for distributed environments "},{"title":"Express","type":0,"sectionRef":"#","url":"docs/Technologies/API/express/","content":"Express index.ts import express, {Request, Response, NextFunction, Errback} from &quot;express&quot;; import userRouter from &quot;./user-route&quot;; const app = express(); const PORT = 3000; // ------------------------- // app properties // ------------------------- app.set(&quot;appName&quot;, &quot;Task 2.1&quot;); app.set(&quot;isAdmin&quot;, true); console.log(&quot;=== BEFORE: appName:&quot;, app.get(&quot;appName&quot;)); console.log(&quot;=== BEFORE: isAdmin:&quot;, app.get(&quot;isAdmin&quot;)); app.disable(&quot;appName&quot;); app.disable(&quot;isAdmin&quot;); console.log(&quot;=== AFTER: appName:&quot;, app.get(&quot;appName&quot;)); console.log(&quot;=== AFTER: isAdmin:&quot;, app.get(&quot;isAdmin&quot;)); // ------------------------- // app settings // ------------------------- // allow routes with different cases to be different routes app.set(&quot;case sensitive routing&quot;, true); // default value is false // url route must be exact to how it was defined in the route // eg: http://localhost:3000/test/ will give an error for this case app.set(&quot;strict routing&quot;, true); // default value is false // info in the header that provides information on what tech is being used for this app app.set(&quot;x-powered-by&quot;, false); // default value is true // bad practice to handle routes without router app.get(&quot;/Test&quot;, (req: Request, res: Response) =&gt; res.send(&quot;Hey 1&quot;)); app.get(&quot;/test&quot;, (req: Request, res: Response) =&gt; res.send(&quot;Hey 2&quot;)); // ------------------------- // app middlewares // ------------------------- // allow parsing of json body app.use(express.json()); app.use((req: Request, res: Response, next: NextFunction) =&gt; { console.log(&quot;Time:&quot;, Date.now()); next(); }); app.use(&quot;user/:id&quot;, (req: Request, res: Response, next: NextFunction) =&gt; { console.log(&quot;Request URL:&quot;, req.originalUrl); next(); }); // ------------------------- // router level // ------------------------- app.use(userRouter); // ------------------------- // error-handling middleware // ------------------------- app.use((req: Request, res: Response, next: NextFunction) =&gt; { throw new Error(&quot;Oops, error: (&quot;); }); app.use((err: Errback, req: Request, res: Response, next: NextFunction) =&gt; { console.log(err); res.status(500).send(&quot;Something broke!&quot;); }); app.listen(PORT, () =&gt; console.log(`Server is listening on port ${PORT}`)); user-route.ts import express, {Request, Response} from &quot;express&quot;; import Joi from &quot;joi&quot;; import {validateSchema} from &quot;./utils&quot;; const userRouter = express.Router(); export const userSchema = Joi.object().keys({ id: Joi.number().integer().required(), name: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/), age: Joi.number().integer().min(18).max(99), isAdmin: Joi.boolean().required(), }); const users = [ {id: 1, name: &quot;Diana&quot;, age: 21, isAdmin: true}, {id: 2, name: &quot;Max&quot;, age: 24, isAdmin: false}, {id: 3, name: &quot;Mary&quot;, age: 23, isAdmin: false}, ]; userRouter.get(&quot;/users&quot;, (req: Request, res: Response) =&gt; { const {order = &quot;asc&quot;} = req.query; return order === &quot;desc&quot; ? res.json(users.reverse()) : res.json(users); }); userRouter.get(&quot;/users/:id&quot;, (req: Request, res: Response) =&gt; { const {id} = req.params; const user = users.find((_user) =&gt; _user.id === parseInt(id, 10)); res.json(user); }); userRouter.post( &quot;/users&quot;, validateSchema(userSchema), (req: Request, res: Response) =&gt; { const user = req.body; const newUsers = [...users, user]; res.json(newUsers); } ); export default userRouter; utils.ts import {Schema, Context} from &quot;joi&quot;; import {Request, Response, NextFunction} from &quot;express&quot;; type schemaErrorsType = { message: string; path: (string | number)[]; type: string; context?: Context; }; type errorResponseType = { status: string; errors: {path: (string | number)[]; message: string}[]; }; export const errorResponse = ( schemaErrors: schemaErrorsType[] ): errorResponseType =&gt; { const errors = schemaErrors.map( ({path, message}: {path: (string | number)[]; message: string}) =&gt; ({ path, message, }) ); return { status: &quot;failed&quot;, errors, }; }; export const validateSchema = (schema: Schema) =&gt; { return ( req: Request, res: Response, next: NextFunction ): Response | undefined =&gt; { const {error} = schema.validate(req.body, { abortEarly: true, allowUnknown: false, }); if (error &amp;&amp; error.isJoi) { console.log(errorResponse(error.details)); return res.status(400).json(errorResponse(error.details)); } next(); }; }; ","keywords":""},{"title":"Add Swagger to Express","type":0,"sectionRef":"#","url":"docs/Technologies/API/express/swagger/","content":"","keywords":""},{"title":"Default express app​","type":1,"pageTitle":"Add Swagger to Express","url":"docs/Technologies/API/express/swagger/#default-express-app","content":"npm i express const express = require(&quot;express&quot;); const app = express(); const port = process.env.PORT || 5000; // Routes app.get(&quot;/customers&quot;, (req, res) =&gt; { res.status(200).send(&quot;Customer results&quot;); }); app.put(&quot;/customer&quot;, (req, res) =&gt; { res.status(200).send(&quot;Successfully updated customer&quot;); }); app.listen(port, () =&gt; { console.log(`Server is running on port ${port}`); });  "},{"title":"Setup basic Swagger options​","type":1,"pageTitle":"Add Swagger to Express","url":"docs/Technologies/API/express/swagger/#setup-basic-swagger-options","content":"npm i swagger-ui-express swagger-jsdoc const express = require(&quot;express&quot;); const app = express(); const swaggerJsDoc = require(&quot;swagger-jsdoc&quot;); const swaggerUi = require(&quot;swagger-ui-express&quot;); const port = process.env.PORT || 5000; // for more info: https://swagger.io/specification/#infoObject const swaggerOptions = { swaggerDefinition: { info: { title: &quot;Customer API&quot;, description: &quot;Customer API Information&quot;, contact: { name: &quot;Amazing Developer&quot;, }, servers: [&quot;http://localhost:5000&quot;], }, }, // ['.routes/*.js'] apis: [&quot;app.js&quot;], }; const swaggerDocs = swaggerJsDoc(swaggerOptions); app.use(&quot;/api-docs&quot;, swaggerUi.serve, swaggerUi.setup(swaggerDocs)); // Routes app.get(&quot;/customers&quot;, (req, res) =&gt; { res.status(200).send(&quot;Customer results&quot;); }); app.put(&quot;/customer&quot;, (req, res) =&gt; { res.status(200).send(&quot;Successfully updated customer&quot;); }); app.listen(port, () =&gt; { console.log(`Server is running on port ${port}`); });  verify at http://localhost:5000/api-docs/result "},{"title":"Add route infos into Swagger​","type":1,"pageTitle":"Add Swagger to Express","url":"docs/Technologies/API/express/swagger/#add-route-infos-into-swagger","content":"const express = require(&quot;express&quot;); const app = express(); const swaggerJsDoc = require(&quot;swagger-jsdoc&quot;); const swaggerUi = require(&quot;swagger-ui-express&quot;); const port = process.env.PORT || 5000; // for more info: https://swagger.io/specification/#infoObject const swaggerOptions = { swaggerDefinition: { info: { version: &quot;1.0.0&quot;, title: &quot;Customer API&quot;, description: &quot;Customer API Information&quot;, contact: { name: &quot;Amazing Developer&quot;, }, servers: [&quot;http://localhost:5000&quot;], }, }, // ['.routes/*.js'] apis: [&quot;app.js&quot;], }; const swaggerDocs = swaggerJsDoc(swaggerOptions); app.use(&quot;/api-docs&quot;, swaggerUi.serve, swaggerUi.setup(swaggerDocs)); // Routes // indentatin in the swagger declaration is important /** * @swagger * /customers: * get: * description: Use to request all customers * responses: * '200': * description: A successful response */ app.get(&quot;/customers&quot;, (req, res) =&gt; { res.status(200).send(&quot;Customer results&quot;); }); /** * @swagger * /customers: * put: * description: Use to return all customers * parameters: * - name: customer * in: query * description: Name of our customer * required: false * schema: * type: string * format: string * responses: * '201': * description: Successfully created user */ app.put(&quot;/customer&quot;, (req, res) =&gt; { res.status(200).send(&quot;Successfully updated customer&quot;); }); app.listen(port, () =&gt; { console.log(`Server listening on port ${port}`); });   "},{"title":"Flask","type":0,"sectionRef":"#","url":"docs/Technologies/API/flaskTutorial/","content":"","keywords":""},{"title":"How to run​","type":1,"pageTitle":"Flask","url":"docs/Technologies/API/flaskTutorial/#how-to-run","content":""},{"title":"method 1​","type":1,"pageTitle":"Flask","url":"docs/Technologies/API/flaskTutorial/#method-1","content":"app.py file from flask import Flask app = Flask(__name__) @app.route(&quot;/&quot;) def index(): return &quot;hello&quot;  mac export FLASK_ENV=development &amp;&amp; export FLASK_APP=app &amp;&amp; flask run windows cmd /C &quot;set FLASK_ENV=development &amp;&amp; set FLASK_APP=app &amp;&amp; flask run&quot; "},{"title":"method 2​","type":1,"pageTitle":"Flask","url":"docs/Technologies/API/flaskTutorial/#method-2","content":"app/__init__.py file from flask import Flask app = Flask(__name__) @app.route(&quot;/&quot;) def index(): return &quot;hello&quot;  mac export FLASK_ENV=development &amp;&amp; export FLASK_APP=app &amp;&amp; flask run windows cmd /C &quot;set FLASK_ENV=development &amp;&amp; set FLASK_APP=app &amp;&amp; flask run&quot; "},{"title":"method 3​","type":1,"pageTitle":"Flask","url":"docs/Technologies/API/flaskTutorial/#method-3","content":"app.py file from flask import Flask app = Flask(__name__) @app.route(&quot;/&quot;) def index(): return &quot;hello&quot; if __name__ == &quot;__main__&quot;: app.run(debug=True)  mac python3 app.py windows python app.py "},{"title":"Get parameter data from url​","type":1,"pageTitle":"Flask","url":"docs/Technologies/API/flaskTutorial/#get-parameter-data-from-url","content":"from flask import Flask, jsonify app = Flask(__name__) # method 1 @app.route(&quot;/get/&lt;id&gt;&quot;) def get_data(id): return jsonify({&quot;id&quot;: id}) # method 2 @app.route(&quot;/gets/&lt;id&gt;&quot;, methods=[&quot;GET&quot;]) def gets_data(id): return jsonify({&quot;id&quot;: id})  "},{"title":"Post data​","type":1,"pageTitle":"Flask","url":"docs/Technologies/API/flaskTutorial/#post-data","content":"from flask import Flask, request app = Flask(__name__) class Model(): def __init__(self, name): self.id = 1 self.name = name @app.route(&quot;/post&quot;, methods=[&quot;POST&quot;]) def post_data(): new_item = Model(request.json[&quot;name&quot;]) return { &quot;id&quot;: new_item.id }  "},{"title":"Java Spring Boot tests","type":0,"sectionRef":"#","url":"docs/Technologies/automatedTests/java/springboot/","content":"","keywords":""},{"title":"Sample​","type":1,"pageTitle":"Java Spring Boot tests","url":"docs/Technologies/automatedTests/java/springboot/#sample","content":"package com.example.demoapi; import static org.assertj.core.api.AssertionsForClassTypes.assertThat; import org.junit.jupiter.api.Test; class DemoApiApplicationTests { Calculator underTest = new Calculator(); @Test void itShouldAddTwoNumbers() { // given int numberOne = 20; int numberTwo = 30; // when int result = underTest.add(numberOne, numberTwo); // then int expected = 50; assertThat(result).isEqualTo(expected); } class Calculator { int add(int a, int b) { return a + b; } } }  "},{"title":"Enzyme","type":0,"sectionRef":"#","url":"docs/Technologies/automatedTests/javascript/enzyme/","content":"","keywords":""},{"title":"Setup​","type":1,"pageTitle":"Enzyme","url":"docs/Technologies/automatedTests/javascript/enzyme/#setup","content":""},{"title":"installation (does not include in the create-react-app)​","type":1,"pageTitle":"Enzyme","url":"docs/Technologies/automatedTests/javascript/enzyme/#installation-does-not-include-in-the-create-react-app","content":"install the enzyme-adapter-react-version based on the react version you are using npm i --save-dev check-prop-types enzyme jest-enzyme enzyme-adapter-react-16 or yarn add --dev check-prop-types enzyme jest-enzyme enzyme-adapter-react-16 "},{"title":"file setup in xxx.test.js​","type":1,"pageTitle":"Enzyme","url":"docs/Technologies/automatedTests/javascript/enzyme/#file-setup-in-xxxtestjs","content":"remove the import {render} from &quot;@testing-library/react&quot;; this is because we will be using enzyme instead import the following import Enzyme, {shallow} from &quot;enzyme&quot;; // Enzyme not required if configured in setupTests.js import EnzymeAdapter from &quot;enzyme-adapter-react-16&quot;; // version depends on react version, only required if setupTests.js is not created import checkPropTypes from &quot;check-prop-types&quot;; // only required if checking prop types  Configure enzyme doing this requires the following to be written in every test file Enzyme.configure({adapter: new EnzymeAdapter()});  create a setupTests.js file in the src directory to enable auto configuration non create-react-apps must create a jest.config.js file with the following configuration module.exports = { setupFilesAfterEnv: [&quot;&lt;rootDir&gt;/src/setupTests.js&quot;] } once the following file has been configured, this fill will always run first before running the tests import Enzyme from &quot;enzyme&quot;; import EnzymeAdapter from &quot;enzyme-adapter-react-16&quot;; Enzyme.configure({adapter: new EnzymeAdapter()});  Create a setup function to enable shallow rendering const setup = (props = {}, state = null) =&gt; { return shallow(&lt;App {...props} /&gt;); };  Enable default props and overriding const defaultProps = {success: false}; const setup = (props = {}, state = null) =&gt; { const setupProps = {...defaultProps, ...props}; // ...props will overwrite defaultProps return shallow(&lt;App {...setupProps} /&gt;); };  Create a function to find the component export const findByTestAttr = (wrapper, val) =&gt; { return wrapper.find(`[data-test=&quot;${val}&quot;]`); };  "},{"title":"prevent data-test attribute from displaying in production​","type":1,"pageTitle":"Enzyme","url":"docs/Technologies/automatedTests/javascript/enzyme/#prevent-data-test-attribute-from-displaying-in-production","content":"install the required library npm i --save-dev babel-plugin-react-remove-properties enable modifying of React settings npm run eject edit the babel settings in the package.json file &quot;babel&quot;: { &quot;env&quot;: { &quot;production&quot;: { &quot;plugins&quot;: [ [&quot;react-remove-properties&quot;, {&quot;properties&quot;: [&quot;data-test&quot;]}] ] } }, &quot;presets&quot;: [&quot;react-app&quot;] }  build production npm run build install a static server to run the production code npm i -g serve run server serve -s build "},{"title":"Tests​","type":1,"pageTitle":"Enzyme","url":"docs/Technologies/automatedTests/javascript/enzyme/#tests","content":"shallow rendering useful to constrain yourself to testing a component as a unitensure that your tests aren't indirectly asserting on behavior of child components test(&quot;renders without crashing&quot;, () =&gt; { const wrapper = shallow(&lt;App /&gt;); // test fails if error is thrown });  debug returns DOM / HTML as a string of the wrapper for debugging purposesuseful to print out to the console when tests are not passing when you expect them to test(&quot;renders without crashing&quot;, () =&gt; { const wrapper = shallow(&lt;App /&gt;); // test fails if error is thrown console.log(wrapper.debug()); });  render without error test(&quot;renders without error&quot;, () =&gt; { const wrapper = setup(); const appComponent = findByTestAttr(wrapper, &quot;component-app&quot;); expect(appComponent.length).toBe(1); });  using beforeEach to reuse code for all tests inside a describe describe(&quot;describe the tests purpose&quot;, () =&gt; { let wrapper; beforeEach(() =&gt; { wrapper = setup(); }); test(&quot;test something&quot;, () =&gt; { const appComponent = findByTestAttr(wrapper, &quot;component-app&quot;); expect(appComponent.length).toBe(1); }); });  test initial state value test(&quot;counter starts at 0&quot;, () =&gt; { const wrapper = setup(); const initialCounterState = wrapper.state(&quot;counter&quot;); // counter is the variable in the state expect(initialCounterState).toBe(0); });  test clicking of button &amp; state change test(&quot;clicking button increments counter display&quot;, () =&gt; { const counter = 7; const wrapper = setup(null, {counter}); // find button and click const button = findByTestAttr(wrapper, &quot;increment-button&quot;); button.simulate(&quot;click&quot;); // find display and test value const counterDisplay = findByTestAttr(wrapper, &quot;counter-display&quot;); expect(counterDisplay.text()).toContain(counter + 1); });  test props test(&quot;renders no text when 'success' prop is false&quot;, () =&gt; { const wrapper = setup({success: false}); const component = findByTestAttr(wrapper, &quot;component-app&quot;); expect(component.text()).toBe(&quot;&quot;); }); test(&quot;renders non-empty message when 'success' prop is true&quot;, () =&gt; { const wrapper = setup({success: false}); const message = findByTestAttr(wrapper, &quot;component-message&quot;); expect(message.text().length).not.toBe(0); });  test prop types test(&quot;does not throw warning with expected props&quot;, () =&gt; { const exprectedProps = {success: false}; // replace ComponentName to the name of the component you are testing const propError = checkPropTypes( ComponentName.propTypes, expectedProps, &quot;prop&quot;, ComponentName.name ); expect(propError).toBeUndefined(); });  // can be refactored import checkPropTypes from &quot;check-prop-types&quot;; export const checkProps = (component, conformingProps) =&gt; { const propError = checkPropTypes( component.propTypes, conformingProps, &quot;prop&quot;, component.name ); expect(propError).toBeUndefined(); };  // refactored to test(&quot;does not throw warning with expected props&quot;, () =&gt; { const exprectedProps = {success: false}; checkProps(Congrats, expectedProps); });  "},{"title":"Mocha & Chai","type":0,"sectionRef":"#","url":"docs/Technologies/automatedTests/javascript/mochaAndChai","content":"","keywords":""},{"title":"Basic setup​","type":1,"pageTitle":"Mocha & Chai","url":"docs/Technologies/automatedTests/javascript/mochaAndChai#basic-setup","content":""},{"title":"Installation​","type":1,"pageTitle":"Mocha & Chai","url":"docs/Technologies/automatedTests/javascript/mochaAndChai#installation","content":"npm i --save-dev mocha chai "},{"title":"Create test file​","type":1,"pageTitle":"Mocha & Chai","url":"docs/Technologies/automatedTests/javascript/mochaAndChai#create-test-file","content":"if the file you wanna test is named as abc.js, create the same file but ends with test.jssave all test files into a test folder abc.test.js "},{"title":"Enable ES6 support and to ensure it is transpiled correctly by installing babel​","type":1,"pageTitle":"Mocha & Chai","url":"docs/Technologies/automatedTests/javascript/mochaAndChai#enable-es6-support-and-to-ensure-it-is-transpiled-correctly-by-installing-babel","content":"not required if not using import and export from ES6 npm i --save-dev @babel/core @babel/preset-env @babel/register Create a .babelrc file​ the content of the file must have the following { &quot;presets&quot;: [&quot;@babel/preset-env&quot;] }  "},{"title":"run tests​","type":1,"pageTitle":"Mocha & Chai","url":"docs/Technologies/automatedTests/javascript/mochaAndChai#run-tests","content":"without ES6 support mocha &quot;test/*/.js&quot; with ES6 npx mocha &quot;test/*/.test.js&quot; --recursive --require @babel/register "},{"title":"save the above command in the package.json script test area​","type":1,"pageTitle":"Mocha & Chai","url":"docs/Technologies/automatedTests/javascript/mochaAndChai#save-the-above-command-in-the-packagejson-script-test-area","content":"&quot;scripts&quot;: { &quot;test&quot;: &quot;npx mocha 'test/**/*.test.js' --recursive --require @babel/register&quot; },  run test with npm test "},{"title":"run test automatically​","type":1,"pageTitle":"Mocha & Chai","url":"docs/Technologies/automatedTests/javascript/mochaAndChai#run-test-automatically","content":"add -watch into the script in the package.json file &quot;scripts&quot;: { &quot;test&quot;: &quot;npx mocha 'test/**/*.test.js' --recursive --require @babel/register -watch&quot; },  "},{"title":"Mocha Keywords​","type":1,"pageTitle":"Mocha & Chai","url":"docs/Technologies/automatedTests/javascript/mochaAndChai#mocha-keywords","content":""},{"title":"describe​","type":1,"pageTitle":"Mocha & Chai","url":"docs/Technologies/automatedTests/javascript/mochaAndChai#describe","content":"Use to group similar tests together it is a function that takes 2 basic arguments 1st arg is a string used to describe the group of tests we are running example: import {getLetterCount} from &quot;./letter-count&quot;; describe(&quot;getLetterCount - basic functionality&quot;); 2nd arg is a function that contains the actual tests we wanna run inside this function, we can write more describes to curther categorize our tests or write a mocha function called &quot;it&quot; example: import {getLetterCount} from &quot;./letter-count&quot;; describe(&quot;getLetterCount - basic functionality&quot;, () =&gt; { it(); });  "},{"title":"it​","type":1,"pageTitle":"Mocha & Chai","url":"docs/Technologies/automatedTests/javascript/mochaAndChai#it","content":"use to denote individual tests / individual pieces of functionality that we want to test it is a function that takes 2 basic arguments 1st arg is a string to tell us what exact piece of functionality this test will be covering example: import {getLetterCount} from &quot;./letter-count&quot;; describe(&quot;getLetterCount - basic functionality&quot;, () =&gt; { it(&quot;returns an empty object when passed an empty string&quot;); }); 2nd arg is a function that contains the actual claims (assertions) we want to make about our code Need to use the &quot;expect&quot; keyword from chai library to make the assertions example: import {expect} from &quot;chai&quot;; import {getLetterCount} from &quot;./letter-count&quot;; describe(&quot;getLetterCount - basic functionality&quot;, () =&gt; { it(&quot;returns an empty object when passed an empty string&quot;, () =&gt; { const expected = {}; const actual = getLetterCount(&quot;&quot;); expect(actual).to.deep.equal(expected); }); });  "},{"title":"Chai keywords​","type":1,"pageTitle":"Mocha & Chai","url":"docs/Technologies/automatedTests/javascript/mochaAndChai#chai-keywords","content":""},{"title":"expect​","type":1,"pageTitle":"Mocha & Chai","url":"docs/Technologies/automatedTests/javascript/mochaAndChai#expect","content":"to.deep.equal compare 2 different objects set actual to store the actual value of the return value of the function we want to testset expected as the value we expect the actual variable to bemust use &quot;deep&quot; because we are comparing objects, which are stored at different memory locations if &quot;deep&quot; is not used, result will be false even if the values are equal result will only return true if both objects are pointed to the same memory location expect(actual).to.deep.equal(expected); to.equal compare 2 values (numbers, string, boolean, etc.) expect(actual).to.equal(expected); to.be.a check type (&quot;function&quot;, &quot;string&quot;, &quot;object&quot;, &quot;array&quot;, &quot;null&quot;, &quot;undefined&quot;, &quot;error&quot;, &quot;promise&quot;, etc.) expect(actual).to.be.a(&quot;function&quot;); // words not starting with a vowel uses &quot;a&quot; expect([]).to.be.an(&quot;array&quot;); // object, array, undefined, error uses &quot;an&quot;  "},{"title":"SuperTest for testing the server (incomplete)","type":0,"sectionRef":"#","url":"docs/Technologies/automatedTests/javascript/superTest","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"SuperTest for testing the server (incomplete)","url":"docs/Technologies/automatedTests/javascript/superTest#installation","content":"Install and setup mocha &amp; chai, and babelInstall the server framework such as Express npm i express Install supertest npm i --save-dev supertest Enable Async/Await support, Mocha does not support this by default Install regenerator-runtime library npm i --save-dev regenerator-runtime "},{"title":"Setup​","type":1,"pageTitle":"SuperTest for testing the server (incomplete)","url":"docs/Technologies/automatedTests/javascript/superTest#setup","content":"Create a mocha-setup.js file need to import regenerator-runtime library before running any test with the following content import &quot;regenerator-runtime/runtime&quot;; add the file to the scripts in the package.json file &quot;scripts&quot;: { &quot;test&quot;: &quot;npx mocha 'test/**/*.test.js' --recursive --require @babel/register --file mocha-setup.js&quot; }  "},{"title":"run test automatically​","type":1,"pageTitle":"SuperTest for testing the server (incomplete)","url":"docs/Technologies/automatedTests/javascript/superTest#run-test-automatically","content":"add -watch into the script in the package.json file &quot;scripts&quot;: { &quot;test&quot;: &quot;npx mocha 'test/**/*.test.js' --recursive --require @babel/register --file mocha-setup.js -watch&quot; },  "},{"title":"Test example​","type":1,"pageTitle":"SuperTest for testing the server (incomplete)","url":"docs/Technologies/automatedTests/javascript/superTest#test-example","content":""},{"title":"database​","type":1,"pageTitle":"SuperTest for testing the server (incomplete)","url":"docs/Technologies/automatedTests/javascript/superTest#database","content":"create a db.js and a db.test.js filein the db.test.js file fill in the default template import {expect} from &quot;chai&quot;; import {getUserByUsername} from &quot;../src/db.js&quot;; describe(&quot;getUserByUsername&quot;, () =&gt; { it(&quot;get the correct user from the database given a username&quot;, async () =&gt; {}); });  mongodb​ npm i mongodb ensure mongodb is running before testing mongod --dbpath ./TEST_DB import {MongoClient} from &quot;mongodb&quot;; import {expect} from &quot;chai&quot;; import {getUserByUsername} from &quot;../src/db.js&quot;; describe(&quot;getUserByUsername&quot;, () =&gt; { it(&quot;get the correct user from the database given a username&quot;, async () =&gt; { const client = await MongoClient.connect( &quot;mongodb://localhost:27017/TEST_DB&quot;, { useNewUrlParser: true, useUnifiedTopology: true, } ); const db = client.db(&quot;TEST_DB&quot;); // write tests here client.close(); }); });  add fake data (1 data that we want, and 1 data that we do not want) import {MongoClient} from &quot;mongodb&quot;; import {expect} from &quot;chai&quot;; import {getUserByUsername} from &quot;../src/db.js&quot;; describe(&quot;getUserByUsername&quot;, () =&gt; { it(&quot;get the correct user from the database given a username&quot;, async () =&gt; { const client = await MongoClient.connect( &quot;mongodb://localhost:27017/TEST_DB&quot;, { useNewUrlParser: true, useUnifiedTopology: true, } ); const db = client.db(&quot;TEST_DB&quot;); // add fake data const fakeData = [ { // data that we want id: &quot;123&quot;, username: &quot;abc&quot;, email: &quot;abc@gmail.com&quot;, }, { // data that we do not want id: &quot;124&quot;, username: &quot;wrong&quot;, email: &quot;wrong@wrong.com&quot;, }, ]; // write tests here client.close(); }); });  insert fake data to the database import {MongoClient} from &quot;mongodb&quot;; import {expect} from &quot;chai&quot;; import {getUserByUsername} from &quot;../src/db.js&quot;; describe(&quot;getUserByUsername&quot;, () =&gt; { it(&quot;get the correct user from the database given a username&quot;, async () =&gt; { const client = await MongoClient.connect( &quot;mongodb://localhost:27017/TEST_DB&quot;, { useNewUrlParser: true, useUnifiedTopology: true, } ); const db = client.db(&quot;TEST_DB&quot;); // add fake data const fakeData = [ { // data that we want id: &quot;123&quot;, username: &quot;abc&quot;, email: &quot;abc@gmail.com&quot;, }, { // data that we do not want id: &quot;124&quot;, username: &quot;wrong&quot;, email: &quot;wrong@wrong.com&quot;, }, ]; // insert fake data await db.collection(&quot;users&quot;).insertMany(fakeData); // write tests here client.close(); }); });  write test import {MongoClient} from &quot;mongodb&quot;; import {expect} from &quot;chai&quot;; import {getUserByUsername} from &quot;../src/db.js&quot;; describe(&quot;getUserByUsername&quot;, () =&gt; { it(&quot;get the correct user from the database given a username&quot;, async () =&gt; { const client = await MongoClient.connect( &quot;mongodb://localhost:27017/TEST_DB&quot;, { useNewUrlParser: true, useUnifiedTopology: true, } ); const db = client.db(&quot;TEST_DB&quot;); // add fake data const fakeData = [ { // data that we want id: &quot;123&quot;, username: &quot;abc&quot;, email: &quot;abc@gmail.com&quot;, }, { // data that we do not want id: &quot;124&quot;, username: &quot;wrong&quot;, email: &quot;wrong@wrong.com&quot;, }, ]; // insert fake data await db.collection(&quot;users&quot;).insertMany(fakeData); // write tests here const actual = await getUserByUsername(&quot;abc&quot;); const finalDBState = await db.collection(&quot;users&quot;).find().toArray(); // need to drop database to prevent it from affecting other tests await db.dropDatabase(); // need to call this here instead of after the assertion is because if any of the assertions fail, the drop database function after it would not be executed client.close(); const expected = { id: &quot;123&quot;, username: &quot;abc&quot;, email: &quot;abc@gmail.com&quot;, }; expect(actual).to.deep.equal(expected); expect(finalDBState).to.deep.equal(fakeData); // check to make sure final db state = to the initial db state, &amp; make sure the function that we are testing did not harm the db in anyway }); });  "},{"title":"Test-Driven Development (TDD)","type":0,"sectionRef":"#","url":"docs/Technologies/automatedTests/testDrivenDevelopment","content":"","keywords":""},{"title":"Advantages of TDD​","type":1,"pageTitle":"Test-Driven Development (TDD)","url":"docs/Technologies/automatedTests/testDrivenDevelopment#advantages-of-tdd","content":"Ensures code qualityForces us to clarify our thinkingImproves communication between developers Allows new developers to understand the intention from other developers or those who already left the company adding comments to code is good, however, no guarantees that the comments will also be updated together with the codetests provides a concrete medium to express what the code is supposed to do &amp; the different situations where it should produce a certain output if the code changes, tests must also be modified to prevent the tests from failing Improves the structure of the production code Requires to think carefully about how the code is arrangedForces to split up large chunks of code into smaller, more testable chunks (thus makes code loosely coupled) Allows developers to make worry-free changes if all the test passes, then everything is okay "},{"title":"Disadvantages of TDD​","type":1,"pageTitle":"Test-Driven Development (TDD)","url":"docs/Technologies/automatedTests/testDrivenDevelopment#disadvantages-of-tdd","content":"Takes longer at firstTDD is not always a favorite with managementNeed to be careful of writing bad tests "},{"title":"Basic TDD cycle​","type":1,"pageTitle":"Test-Driven Development (TDD)","url":"docs/Technologies/automatedTests/testDrivenDevelopment#basic-tdd-cycle","content":"Write a failing testWrite the code but only enough to make the failing code test passRefactor the code written "},{"title":"Criteria for a good test​","type":1,"pageTitle":"Test-Driven Development (TDD)","url":"docs/Technologies/automatedTests/testDrivenDevelopment#criteria-for-a-good-test","content":"Readable Test should be even more readable than the code they coverit should answer &quot;What's the actual behavior?&quot;, &quot;What's the expected behavior?&quot;, &quot;Why?&quot; Isolated Test in 1 test cannot affect the results of the other tests Thorough Test must cover both generic expected inputs &amp; unexpected or edge case inputs Explicit All the information required to reproduce the results of the test, must be readily accessible to anyoneThere should be no shared state between components, nothing hidden, everything involved in getting to the final result should be clear &amp; obvious "},{"title":"3 types of tests​","type":1,"pageTitle":"Test-Driven Development (TDD)","url":"docs/Technologies/automatedTests/testDrivenDevelopment#3-types-of-tests","content":"Unit Tests: test very specific, low level pieces of functionality (end users won't really notice or think about directly) Need to have 3 things: A testing environment / test runner, A testing framework, An assertion librarytools: Mocha: serves as a test runner and a testing frameworkChai: serves as an assertion libraryJasmine: serves allJest: serves all Integration Tests: ensures that the individual pieces of the application work together correctly (e.g. testing if app communicates correctly with a database or api) tools: Mocha &amp; ChaiSinon js: use for creating test doublesprovides different functions for creating mocks, stubs, and other test doubles that allow effective integration testshelp to verify how something works in isolation Supertest: allows us to run integration tests on our node server without actually starting up the server this is helpful because waiting for a server to start up can dramatically slow down our developmentit allows us to query our server and get results as if the server was actually running End-to-End (E2E) Tests: ensure the entire app works as seen from the viewpoint of a user tools: selenium, puppeteer, cypress "},{"title":"AWS Cloud introduction","type":0,"sectionRef":"#","url":"docs/Technologies/database/cloud/AWS/foundational/cloudConcepts","content":"","keywords":""},{"title":"What is cloud computing​","type":1,"pageTitle":"AWS Cloud introduction","url":"docs/Technologies/database/cloud/AWS/foundational/cloudConcepts#what-is-cloud-computing","content":"refers to on-demand delivery of IT resources &amp; applications via the internet with pay-as-you-go pricing "},{"title":"before cloud computing​","type":1,"pageTitle":"AWS Cloud introduction","url":"docs/Technologies/database/cloud/AWS/foundational/cloudConcepts#before-cloud-computing","content":"need to provision capacity based on guessing theoretical max peaksif didn't meet projected max peaks / exceeded them need to pay for expensive resources that would stay idleor have insufficient capacity to meet needs "},{"title":"benefits​","type":1,"pageTitle":"AWS Cloud introduction","url":"docs/Technologies/database/cloud/AWS/foundational/cloudConcepts#benefits","content":"server, databases, storage, higher-level app components can be initiated within seconds can be treated as temporary &amp; desposable resourcesfree from the inflexibility &amp; constraints of a fixed &amp; finite IT infrastructure approach to change management, testing, reliability, &amp; capacity planning is more agile &amp; efficient "},{"title":"1 main reason companies move to cloud is due to agility​","type":1,"pageTitle":"AWS Cloud introduction","url":"docs/Technologies/database/cloud/AWS/foundational/cloudConcepts#1-main-reason-companies-move-to-cloud-is-due-to-agility","content":"3 factors that affects agility speed AWS facilities all over the world can offer global reach with a moment's noticeAWS gives benefit without having to make huge investment as data are facilities are closed to customers cost of building data centers are not required new resources are a click away reduces the time it takes to make those resources available to developers from weeks to minutes experimentation enable ability to safely experiment, develop operations procedures, &amp; practice failureenables operations as code in the cloud AWS allows spinning up servers in minutes for experimentingallows return or re-purpose servers for other experiments with virtual &amp; automatable resources can quickly carry out comparative testing using different types of instances, storage, / configurationsAWS CloudFormation enables consistent, templated, sandbox development, test, &amp; production environments with increasing levels of operations control cuture of innovation being able to experiment quickly &amp; having low cost &amp; low risk it allows for more experimentation, which leads to discovery of new configurations &amp; innovations "},{"title":"Understanding how AWS utilizes agility of cloud computing​","type":1,"pageTitle":"AWS Cloud introduction","url":"docs/Technologies/database/cloud/AWS/foundational/cloudConcepts#understanding-how-aws-utilizes-agility-of-cloud-computing","content":"need to look at AWS infrastructure that supports elasticity, scalability, &amp; reliability of computing resources "},{"title":"AWS Cloud infrastructure​","type":1,"pageTitle":"AWS Cloud introduction","url":"docs/Technologies/database/cloud/AWS/foundational/cloudConcepts#aws-cloud-infrastructure","content":"built around Regions &amp; Availability Zones (&quot;AZs&quot;) a region is a physical location in the world have multiple Availability Zones Availability Zones consist of 1 or more descrete data centers each data center has redundant power, networking &amp; connectivity, &amp; is housed in separate facilitiesAvailability Zones offer the ability to operate production apps &amp; databases these are more highly available, fault tolerant, &amp; scalable than a single data center fault tolerant: the ability for a system to remain operational even if some of the components of that system fail it can be seen as the built-in redundancy of an app's components high availability: ensures that systems are always functioning &amp; accessible also ensures downtime is minimized as much as possible WITHOUT human intervention "},{"title":"Using AWS Cloud​","type":1,"pageTitle":"AWS Cloud introduction","url":"docs/Technologies/database/cloud/AWS/foundational/cloudConcepts#using-aws-cloud","content":"can take advantage of scalable, reliable, &amp; secure global computing infrastructure to meet requirements "},{"title":"Elasticity​","type":1,"pageTitle":"AWS Cloud introduction","url":"docs/Technologies/database/cloud/AWS/foundational/cloudConcepts#elasticity","content":"it is also a powerful force in Cloud Computingit is the power to scale computing resources up / down easily while only paying for the actual resources used elastic nature of AWS allows customers to: quickly deploy new appsinstantly scale up as workload growsinstantly shut down resources that are no longer requiredscale down &amp; don't pay for the infrastructure AWS provides the elastic infrastructure to meet needs needing 1 virtual server / thousandsneeding computing resources for a few hours / 24/7 "},{"title":"Key benefits of AWS​","type":1,"pageTitle":"AWS Cloud introduction","url":"docs/Technologies/database/cloud/AWS/foundational/cloudConcepts#key-benefits-of-aws","content":"is the ability to use services at own paceby using AWS, customers can grow, shrink, &amp; adapt their consumption of services to meet seasonal requirementslaunch new services or productsaccommodate new strategic directions AWS delivers scalable cloud computing platform designed for high availability &amp; dependability providing tools that enable running a wide range of apps AWS tools, Auto Scaling, &amp; Elastic Load Balancing allows app to scale up / down based on demandbacked by Amazon's infrastructurehave access to compute &amp; storage resources when needed can easily deploy system in multiple regions around the world while providing a lower latency &amp; better experience for customers at minimal cost customers can consistently use innovative services &amp; cutting-edge tech without having to go through multiple procurement cycles &amp; expensive evaluations AWS provides capabilities to support virtually any workload giving customers continued access to latest tech you retain complete control &amp; ownership over which region the data is physically located makes it easy to meet regional compliance &amp; data residency requirementsAWS Cloud provides governance capabilities that enable continuous monitoring of configuration changes to IT resourcesbefore cloud computing infrastructure security auditing would often be a periodic &amp; manual process AWS offers industry-leading capabilities across facilities, networks, software, &amp; business processes to meet strictest requirements AWS secure data centers use electronic surveillance &amp; multi-factor access control systems data centers are staffed 24/7 by security guards, &amp; access is authorized strictly on a least privileged basisenvironmental systems are designed to minimize the impact of disruptions to operationsmultiple geographic reigions &amp; availability zones allow resilience during failure modes including natural disasters or system failure AWS assets are programmable resources thus, security policy can be formalized &amp; embedded with the design of the infrastructureAWS helps customers develop high performing &amp; reliable solutions to address most business needs e.g.: offering media services to customers around the world / managing medical devices for a highly decentralized workforce AWS gives customers the tools to implement solutions quickly &amp; with limited frictionAWS reliability defined as the ability of a system to recover from infrastructure / service failures it also focuses on the ability to dynamically acquire computing resources to meet demands &amp; mitigate disruptionsto achieve reliability, architecture &amp; system must have well-planned foundation that can handle changes in demand &amp; also detect failure &amp; automatically heal itself AWS help achieve greated flexibility &amp; capacity reducing the uncertainty of forecasting hardware needsthe scale of AWS gives customers capacity &amp; reliability that is difficult to match by on-premise solutions with AWS, no longer need to dedicate valuable resources to building costly infrastructure including purchasing servers, software licenses or leasing facilitiesby paying for services on an as needed basis allows redirection of focus to innovation &amp; invention reducing procurement complexity &amp; enabling the business to be fully elastic pay-as-you-go pricing allows easy adaptation to changing business needs without overcommitting budgets and improving responsiveness to changesthe model allows business to adapt depending on need &amp; not on forecasts reducing the risk / overprovisioning / missing capacity "},{"title":"Summary​","type":1,"pageTitle":"AWS Cloud introduction","url":"docs/Technologies/database/cloud/AWS/foundational/cloudConcepts#summary","content":"moving to the cloud is not just about saving costs on IT it's about creating the environment that lets the business thrive "},{"title":"How to configure newly created droplet with SSH","type":0,"sectionRef":"#","url":"docs/Technologies/database/cloud/DigitalOcean/Droplet/","content":"","keywords":""},{"title":"Create new user​","type":1,"pageTitle":"How to configure newly created droplet with SSH","url":"docs/Technologies/database/cloud/DigitalOcean/Droplet/#create-new-user","content":"add new user adduser myusername Adding user `myusername' ... Adding new group `myusername' (1000) ... Adding new user `myusername' (1000) with group `myusername' ... Creating home directory `/home/myusername' ... Copying files from `/etc/skel' ...  type in user password New password: Retype new password:  enter the required details passwd: password updated successfully Changing the user information for myusername Enter the new value, or press ENTER for the default Full Name []: Room Number []: Work Phone []: Home Phone []: Other []: Is the information correct? [Y/n]  enable sudo usermod -aG sudo myusername check if your username exist and sudo enabled id myusername uid=1000(myusername) gid=1000(myusername) groups=1000(myusername),27(sudo)  login to user account sudo su - myusername "},{"title":"Enable SSH for new user​","type":1,"pageTitle":"How to configure newly created droplet with SSH","url":"docs/Technologies/database/cloud/DigitalOcean/Droplet/#enable-ssh-for-new-user","content":"create SSH directory mkdir ~/.ssh change permission of the folder chmod 700 ~/.ssh open file nano ~/.ssh/authorized_keys on your local pc copy the ssh public key with pbcopy &lt; ~/.ssh/id_ed25519.pubpaste the ssh public key into the file ssh-ed25519 LHBSLUBLYUG'O(TGUYhkvybg76g7OUYVG'(OBL change permission for this file chmod 600 ~/.ssh/authorized_keys restart SSH service sudo service ssh restart test SSH login with new user ssh myusername@11.123.123.123 "},{"title":"Other configs​","type":1,"pageTitle":"How to configure newly created droplet with SSH","url":"docs/Technologies/database/cloud/DigitalOcean/Droplet/#other-configs","content":""},{"title":"disable root login and password authentication​","type":1,"pageTitle":"How to configure newly created droplet with SSH","url":"docs/Technologies/database/cloud/DigitalOcean/Droplet/#disable-root-login-and-password-authentication","content":"sudo vim /etc/ssh/sshd_config change yes to no ... PermitRootLogin yes ... PasswordAuthentication yes ...  reload sshd sudo systemctl reload sshd "},{"title":"change droplet name inside droplet​","type":1,"pageTitle":"How to configure newly created droplet with SSH","url":"docs/Technologies/database/cloud/DigitalOcean/Droplet/#change-droplet-name-inside-droplet","content":"sudo hostnamectl set-hostname new-host-name exit from SSH and re-enter again for changes to take effect "},{"title":"disable sudo for docker​","type":1,"pageTitle":"How to configure newly created droplet with SSH","url":"docs/Technologies/database/cloud/DigitalOcean/Droplet/#disable-sudo-for-docker","content":"add your username to the docker group sudo usermod -aG docker ${USER} apply the new group membership, log out of the server and back in su - ${USER} Confirm that your user is now added to the docker group groups "},{"title":"MongoDB Overview","type":0,"sectionRef":"#","url":"docs/Technologies/database/noSQL/mongoDB/","content":"","keywords":""},{"title":"help​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#help","content":"display a list of basic features "},{"title":"show dbs​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#show-dbs","content":"display all databases that was created "},{"title":"use databaseName​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#use-databasename","content":"e.g.: use demoall &quot;db&quot; called will be refered to demo databaseuse the databasedatabase not created will be added into collectionsbut will not be display in &quot;show dbs&quot; until some data is added "},{"title":"CRUD​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#crud","content":""},{"title":"CREATE​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#create","content":"Add 1 Collection db.dataName.insertOne({key: &quot;value&quot;}) e.g.: db.dogs.insertOne({name: &quot;Rusty&quot;, breed: &quot;Mutt&quot;})dataName is a collectionadd data into databasedb is the database declared with use databaseName "},{"title":"Add multiple Collections​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#add-multiple-collections","content":"db.dataName.insertMany([{key1: &quot;value1&quot;}, {key2: &quot;value2&quot;}]) e.g.: db.dogs.insertMany([{name: &quot;Rusty&quot;, breed: &quot;Mutt&quot;}, {name: &quot;Bob&quot;, breed: &quot;dog&quot;}])add data into database "},{"title":"Add 1 or multiple collections​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#add-1-or-multiple-collections","content":"db.dataName.insert({key: &quot;value&quot;}) e.g.: db.dogs.insert({name: &quot;Rusty&quot;, breed: &quot;Mutt&quot;}) db.dataName.insert([{key1: &quot;value1&quot;}, {key2: &quot;value2&quot;}]) e.g.: db.dogs.insert([{name: &quot;Rusty&quot;, breed: &quot;Mutt&quot;}, {name: &quot;Bob&quot;, breed: &quot;dog&quot;}]) db.createCollection(&quot;dataName&quot;) e.g.: db.createCollection(&quot;dogs&quot;)similar to insert but does not require data show collections display data added "},{"title":"READ​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#read","content":"db.dataName.find() db.dataName.find({})  find all data keys and values under dataName "},{"title":"Dos and Don'ts​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#dos-and-donts","content":"√ db.dataName.find({ _id: ObjectId(&quot;fu438h9784hgf847&quot;) }) // need to be stored as a hash x db.dataName.find({ _id: &quot;fu438h9784hgf847 }) // does not work √ db.dataName.find({ lastLogin: ISODate(&quot;2018-10-10T00:00:00&quot;) }) // need to be written this way to work for dates  db.dataName.find({key: &quot;value&quot;}) e.g.: db.dogs.find({name: &quot;Rusty&quot;})find a specific data key and value under dataName db.dataName.find({key1: &quot;value1&quot;, key2: &quot;value2&quot;}) retrieve data that has all of the searched values db.dataName.find({$ord: [{key1, &quot;value1&quot;}, {key2: &quot;value2&quot;}]}) retrieve data that has either &quot;value1&quot; or &quot;value2&quot; db.dataName.find({key: {$gt: n}}) display values in comparison to ngt = greater than nlt = less than neq = equal to ngte = greate than or equal to nlte = less than or equal to n db.dataName.find({key: {$in: [&quot;value1&quot;, &quot;value2&quot;]}}) display all data(s) that consist of the value in the array[&quot;value1&quot;, &quot;value2&quot;]nin == not in (inverse of in) db.dataName.find({key: {$exists: n}}) if n == true, show all data that has the key fieldif n == false, show all data that does not have the key field db.dataName.find({}, {_id: n}) if n == 0, display everything except idif n == 1, display only id db.dataName.find().limit(n) e.g.: db.dogs.find().limit(2)limit search results by n db.dataName.find().sort({key: n}) if n == 1, sort by ascending orderif n == -1, sort by descending order db.dataName.find().sort({key1: n1, key2: n2}) sort by multiple fieldssort by key1 then by key2 "},{"title":"UPDATE​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#update","content":"db.dataName.updateOne({key: &quot;value&quot;}, {changeKey: &quot;changeValue&quot;}) db.dataName.replaceOne({key: &quot;value&quot;}, {changeKey: &quot;changeValue&quot;})  e.g.: db.dogs.updateOne({name: &quot;Rusty&quot;}, {breed: &quot;Labradoodle&quot;})key and value required to find the position to changethis will rewrite everything to just {breed: &quot;Labradoodle&quot;} without the name object db.dataName.updateOne({key, &quot;value&quot;}, {$set: {changeKey: &quot;changeValue&quot;, addKey: addValue}}) db.dataName.update({key, &quot;value&quot;}, {$set: {changeKey: &quot;changeValue&quot;, addKey: addValue}})  e.g.: db.dogs.updateOne({name: &quot;Rusty&quot;}, {$set: {breed: &quot;Labradoodle&quot;, isCute: true}})use $set: {} to ensure data that aren't called will not be deletedthis can be used to update and add new key value pairthis will only update ONE data object in collection need to run multiple times to update all db.dataName.updateMany({key, &quot;value&quot;}, {$set: {changeKey: &quot;changeValue&quot;, addKey: addValue}}) this will update ALL data objects in collection db.dataName.update({key, &quot;value&quot;}, {$set: {changeKey: &quot;changeValue&quot;, addKey: addValue}, {multi: true}}) need to add {multi: true} to enable multiple updates "},{"title":"REMOVE (Delete value(s))​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#remove-delete-values","content":"db.dataName.remove({key: &quot;value&quot;}, true) justOne parameter need to set as true to delete only 1 value db.dataName.deleteOne({key: &quot;value&quot;}) delete 1 value db.dataName.remove({key: &quot;value&quot;}) db.dataName.deleteMany({key: &quot;value&quot;}) e.g.: db.dogs.remove({breed: &quot;Labradoodle&quot;})this will remove all dogs that has the same breed value db.dataName.remove({key: &quot;value&quot;}).limit(n) e.g.: db.dogs.remove(breed: &quot;Labradoodle&quot;).limit(1)limit n number of data to remove "},{"title":"Delete collection​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#delete-collection","content":"db.dataName.drop() e.g.: db.dogs.drop() "},{"title":"Delete database​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#delete-database","content":"db.dropDatabase() thi will delete the currently used database "},{"title":"BULKWRITE​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#bulkwrite","content":"db.dataName.bulkWrite( [ {insertOne: {&quot;document&quot;: {key1: &quot;value1&quot;, key2: &quot;value2&quot;}} }, {updateOne: { filter: {key: &quot;value&quot;}, update: {$set: {changekey: &quot;changeValue&quot;}} } }, {deleteOne: {filter: {key: &quot;value&quot;}} } ])  enables multiple requests in ONE request "},{"title":"SEARCH​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#search","content":"db.dataName.createIndex({key1: &quot;text&quot;, key2: &quot;text&quot;}) provide text indexes to enable text search queries on string content db.dataName.find({$text: {$search: &quot;searchText1 searchText2&quot;}}) $text query operator is required$search operator required to start searchingkey in the search contentsadd - in front of searchText to exclude from search e.g.: -searchText1 db.dataName.find({$text: {$search: &quot;\\&quot;search phrase\\&quot;&quot;}}) use \\&quot; to enable search by phrase "},{"title":"Get search scores​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#get-search-scores","content":"db.dataName.find({$text: {$search: &quot;searchText&quot;}, {score: {$meta: &quot;textScore&quot;}}}) need to add 1 score object to enable search rankingssearch rankings enable sorting if required$meta projection operator returns for each matching document the metadata "},{"title":"AGGREGATION​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#aggregation","content":""},{"title":"Count​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#count","content":"db.dataName.count({key: &quot;value&quot;}) this will count the total number of values that is in the data collection "},{"title":"List all values​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#list-all-values","content":"db.dataName.distinct(&quot;key&quot;) display a list of values under key "},{"title":"Find the sum of values under key for each id key​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#find-the-sum-of-values-under-key-for-each-id-key","content":"db.dataName.aggregate([ {$match: {key: &quot;value&quot;}}, {$group: {_id: &quot;$idKey1&quot;, total: {$sum: &quot;$idKey2&quot;}}} ])  $match operator is used to filter data in collection use {} to search all $group is used to group similar idKey1 together $ is added in front of idKey1 to group them as a single unitidKey1 refers to the key in the data to group similar values together $sum gives the total sum of all the values given from idKey2 idKey2 refers to the key in the data to get all the different values db.dataName.aggregate([ {$match: {key: &quot;value&quot;}}, {$group: {_id: &quot;$idKey1&quot;, total: {$sum: &quot;$idKey2&quot;}}}, {$sort: {total: n}} ])  return value can be sorted by adding {$sort: {total: n}} if n == 1, sort in ascending orderif n == -1, sort in descending order DATA TYPES { string: &quot;string&quot;, int: 123, double: 1.23, boolean: true, array: [1, 2, 3], object: {key1: &quot;value1&quot;, key2: &quot;value2&quot;}, date: new Date(&quot;&lt;YYYY-mm-dd&gt;&quot;), object_id: &lt;ObjectId&gt;, no_value: null }  "},{"title":"ADDITIONAL DATA TYPES​","type":1,"pageTitle":"MongoDB Overview","url":"docs/Technologies/database/noSQL/mongoDB/#additional-data-types","content":"Timestamp, Binary data, Regular expressions, javascript code Getting started on nodejs const { MongoClient } = require(&quot;mongodb&quot;); const assert = require(&quot;assert&quot;); // Connection URL const url = &quot;mongodb://localhost:27017/db_name&quot;; // Use connect method to connect to the server MongoClient.connect(url, (err, connection) =&gt; { assert.equal(null, err)l console.log(&quot;Connected correctly to server&quot;); connection.close(); });  "},{"title":"Mongoose","type":0,"sectionRef":"#","url":"docs/Technologies/database/noSQL/mongoDB/mongoose/","content":"","keywords":""},{"title":"Getting started​","type":1,"pageTitle":"Mongoose","url":"docs/Technologies/database/noSQL/mongoDB/mongoose/#getting-started","content":"will be very hard to use this with typescript const mongoose = require(&quot;mongoose&quot;); mongoose.connect(&quot;mongodb://localhost/test&quot;); const db = mongoose.connection; db.on(&quot;error&quot;, console.error.bind(console, &quot;connection error:&quot;)); db.once(&quot;open&quot;, function () { // we're connected! });  "},{"title":"Schema​","type":1,"pageTitle":"Mongoose","url":"docs/Technologies/database/noSQL/mongoDB/mongoose/#schema","content":"const kittySchema = mongoose.Schema({ name: String, }); // add methods, but must be added to the schema before compiling it with mongoose.model() kittySchema.methods.speak = function () { const greeting = this.name ? &quot;My name is &quot; + this.name : &quot;I don't have a name&quot;; console.log(greeting); };  "},{"title":"Model​","type":1,"pageTitle":"Mongoose","url":"docs/Technologies/database/noSQL/mongoDB/mongoose/#model","content":"it is a class where we construct documents const Kitten = mongoose.model(&quot;Kitten&quot;, kittySchema); const silence = new Kitten({name: &quot;Silence&quot;}); console.log(silence.name); // Silence silence.speak(); // My name is Silence  "},{"title":"Saving to database​","type":1,"pageTitle":"Mongoose","url":"docs/Technologies/database/noSQL/mongoDB/mongoose/#saving-to-database","content":"each document can be saved to the database by calling its save methodthe first argument to the callback will be an error if any occured silence.save((err, silence) =&gt; { if (err) return console.error(err); silence.speak(); });  "},{"title":"Access all specific documents through model​","type":1,"pageTitle":"Mongoose","url":"docs/Technologies/database/noSQL/mongoDB/mongoose/#access-all-specific-documents-through-model","content":"Kitten.find((err, kittens) =&gt; { if (err) return console.error(err); console.log(kittens); }); Kitten.find({name: /^Silence/}, callback);  "},{"title":"Django database setting","type":0,"sectionRef":"#","url":"docs/Technologies/database/SQL/djangoDatabaseSettings","content":"","keywords":""},{"title":"Default sqlite3​","type":1,"pageTitle":"Django database setting","url":"docs/Technologies/database/SQL/djangoDatabaseSettings#default-sqlite3","content":"DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } }  "},{"title":"MySQL​","type":1,"pageTitle":"Django database setting","url":"docs/Technologies/database/SQL/djangoDatabaseSettings#mysql","content":"pip install mysql-connector-python DATABASES = { 'default': { 'ENGINE': 'mysql.connector.django', 'NAME': &quot;trading_platform&quot;, &quot;USER&quot;: &quot;springfield&quot;, &quot;PASSWORD&quot;: os.environ.get(&quot;mysqlme_password&quot;), &quot;HOST&quot;: &quot;localhost&quot;, 'OPTIONS': { 'autocommit': True, }, } }  "},{"title":"PostgreSQL​","type":1,"pageTitle":"Django database setting","url":"docs/Technologies/database/SQL/djangoDatabaseSettings#postgresql","content":"pip install psycopg2-binarypip install dj-database-url import to settings.py import dj_database_url DATABASES = {'default': dj_database_url.config( conn_max_age=600, ssl_require=True)}  "},{"title":"Entity Framework","type":0,"sectionRef":"#","url":"docs/Technologies/database/SQL/entityFramework","content":"","keywords":""},{"title":"How to use Entity Franework in visual studio​","type":1,"pageTitle":"Entity Framework","url":"docs/Technologies/database/SQL/entityFramework#how-to-use-entity-franework-in-visual-studio","content":"open NuGet Package Manager Consolekey in all of the following commands in the NuGet Package Manager Console "},{"title":"Enable migrations (required for first times)​","type":1,"pageTitle":"Entity Framework","url":"docs/Technologies/database/SQL/entityFramework#enable-migrations-required-for-first-times","content":"this will create the default database files in the &quot;App_Data&quot; folder enable-migrations "},{"title":"Add migration​","type":1,"pageTitle":"Entity Framework","url":"docs/Technologies/database/SQL/entityFramework#add-migration","content":"use to create migrationname of migration is dependent on the domain modelfirst time migration usually name as &quot;InitialModel&quot; add-migration MigrationFileName if required to overwrite, use the -force add-migration ModelName -force this can be used to create migration file and then manually modify the migration filethe following will be auto generated using System; using System.Data.Entity.Migrations; public partial class MigrationFileName : DbMigration { public override void Up() // use to update db based on code written {} public override void Down() // use to revert our migrations {} }  write sql code in either the Up or Down method Sql(&quot;INSERT INTO ModelName (Id, PropertyName1, PropertyName2) VALUES (numberValue, numberValue, numberValue)&quot;);  "},{"title":"Update database​","type":1,"pageTitle":"Entity Framework","url":"docs/Technologies/database/SQL/entityFramework#update-database","content":"after adding migration, database has yet to be updatedthis will update the database files stored in the &quot;App_Data&quot; folder update-database "},{"title":"MySQL Cheats","type":0,"sectionRef":"#","url":"docs/Technologies/database/SQL/mySQL/","content":"","keywords":""},{"title":"Starting and Stopping the MySQL Server​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#starting-and-stopping-the-mysql-server","content":""},{"title":"View server status​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#view-server-status","content":"linux sudo service mysql status mac brew services list "},{"title":"Start MySQL Server​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#start-mysql-server","content":"linux sudo service mysql start mac brew services start mysql "},{"title":"Stop MySQL Server​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#stop-mysql-server","content":"linux sudo service mysql stop mac brew services stop mysql "},{"title":"To create MySQL database and users, follow these steps:​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#to-create-mysql-database-and-users-follow-these-steps","content":"At the command line, log in to MySQL as the root user: mysql -u root -p List all users SELECT host, user FROM mysql.user; Create new user within the MySQL shell CREATE USER 'newuser'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password'; Grant privileges To grant ALL privileges GRANT ALL PRIVILEGES ON . TO 'newuser'@'localhost'; Reload privilegers for changes to take effect FLUSH PRIVILEGES; Logout quit Relog in to new user mysql -u [username] -p Run SQL file from terminal (ignore sudo if not required) sudo mysql &lt; sqlscript.sql from mysql source path/sqlscript.sql; "},{"title":"Connect app to mysql​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#connect-app-to-mysql","content":"Set native password mysql -u root -pALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password'; "},{"title":"Connect app to docker mysql​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#connect-app-to-docker-mysql","content":"run docker container if not runned docker run --name=mysql-docker -e MYSQL_ROOT_PASSWORD=password -d -p 3306:3306 mysql Set native password docker exec -it mysql-docker mysql -u root -ppassword -e &quot;ALTER USER 'root' IDENTIFIED WITH mysql_native_password BY 'password';&quot; or mysql -h 127.0.0.1 -u root -ppassword -e &quot;ALTER USER 'root' IDENTIFIED WITH mysql_native_password BY 'password';&quot; (needs mysql-client) Set host as 127.0.0.1 in the appif running on PORT other than 3306, need to set PORT in the app (ignore if using default mysql PORT) "},{"title":"Run query on command line (remove -h 127.0.0.1 if not using docker)​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#run-query-on-command-line-remove--h-127001-if-not-using-docker","content":"creating database mysql -h 127.0.0.1 -u root -p -e &quot;CREATE DATABASE databaseName;&quot;; Use database and run query mysql -h 127.0.0.1 -u root -p databaseName -e &quot;SELECT * FROM tableName;&quot; "},{"title":"Grant Different User Permissions​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#grant-different-user-permissions","content":""},{"title":"Types of permissions​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#types-of-permissions","content":"ALL PRIVILEGES- as we saw previously, this would allow a MySQL user full access to a designated database (or if no database is selected, global access across the system) "},{"title":"Grant permissions​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#grant-permissions","content":"GRANT OPTION- allows them to grant or remove other users' privileges GRANT type_of_permission ON database_name.table_name TO ‘username’@'localhost’; Review a user’s current permissions SHOW GRANTS username; Delete a user DROP USER ‘username’@‘localhost’; "},{"title":"Revoke permission​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#revoke-permission","content":"REVOKE type_of_permission ON database_name.table_name FROM ‘username’@‘localhost’; "},{"title":"Change password​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#change-password","content":"mysqladmin -u myUsername password 'yourNewPassword' "},{"title":"Enable use of Authentication via password for nodejs with MySql​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#enable-use-of-authentication-via-password-for-nodejs-with-mysql","content":"At MySql command line ALTER USER 'username'@'localhost' IDENTIFIED BY 'your new password';ALTER USER 'username'@'localhost' IDENTIFIED WITH mysql_native_password BY 'your new password'; if the above is done, need to login with host normally hostname = localhost mysql -u [username] -h [hostname] -p "},{"title":"Change MySql default settings​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#change-mysql-default-settings","content":"View SQL mode values SELECT @@sql_mode; Adding only one mode to sql_mode without removing existing ones: SET sql_mode=(SELECT CONCAT(@@sql_mode,',&lt;mode_to_add&gt;')); Removing only a specific mode from sql_mode without removing others: SET sql_mode=(SELECT REPLACE(@@sql_mode,'&lt;mode_to_remove&gt;','')); example: disable MySql &quot;only_full_group_by&quot; mode SET sql_mode=(SELECT REPLACE(@@sql_mode, 'ONLY_FULL_GROUP_BY', '')); List all databases show databases; Create database CREATE DATABASE dbname; Use database USE dbname; Delete database DROP DATABASE dbname; "},{"title":"Data types​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#data-types","content":""},{"title":"Comments​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#comments","content":"Singe line​ # comment 1 -- comment 2  multi line​ /* multi-line */  "},{"title":"Constraint​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#constraint","content":"PRIMARY KEY​ values in this column are unique, and each value can be used to identify a single row in this table AUTOINCREMENT​ For integer values, this means that the value is automatically filled in and incremented with each row insertionNot supported in all databases UNIQUE​ values in this column have to be unique, can't insert another row with the same value in this column as another row in the tableDiffers from the PRIMARY KEY in that it doesn't have to be a key for a row in the table. NOT NULL​ inserted value can not be NULL CHECK (expression)​ allows runing of complex expression to test whether the values inserted are valide.g.: check that values are positive, or greater than a specific size, or start with a certain prefix, etc. FOREIGN KEY​ a consistency check which ensures that each value in this column corresponds to another value in a column in another tablee.g.: if there are two tables, one listing all Employees by ID, and another listing their payroll information,the FOREIGN KEY can ensure that every row in the payroll table corresponds to a valid employee in the master Employee list CREATE TABLE IF NOT EXISTS `table1_table2` ( -- many-to-many `id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, `table1_id` INT UNSIGNED NOT NULL, `table2_id` INT UNSIGNED NOT NULL, FOREIGN KEY (table1_id) REFERENCES table1(id), FOREIGN KEY (table2_id) REFERENCES table2(id) );  "},{"title":"Operator types​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#operator-types","content":"=, !=, &lt;, &lt;=, &gt;, &gt;=​ standard numerical operators BETWEEN...AND...​ number is within range of 2 values (inclusive)eg: columnname BETWEEN 1 AND 10 NOT, !​ inverse the value IN​ number exists in a listeg: columnname IN (1,5,8) AND, &amp;&amp;​ SELECT * FROM table WHERE columnname1 = &quot;something&quot; &amp;&amp; (columnname2=&quot;something1&quot; || columnname2=&quot;something2&quot;);  OR, &amp;&amp;​ LIKE​ case insensitive exact string comparison % used anywhere in a string to match a sequence of 0 or more characterseg: match any string that ends with &quot;AT&quot; columnname LIKE &quot;%AT&quot; eg: match any string that contains &quot;AT&quot; columnname LIKE &quot;%AT%&quot; "},{"title":"Boolean types​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#boolean-types","content":"represented as integer values of 0 and 1 "},{"title":"Numeric types​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#numeric-types","content":"TINYINT​ 127 to -128 SMALLINT​ 32,768 to -32,767 MEDIUM INT​ 8,388,608 to -8,388,608 INT​ 2^31 to -2^31 - 1 BIGINT​ 2^63 to -2^63 - 1 FLOAT​ decimal spaces, 1.1E38 to -1.1E38 DOUBLE​ decimal spaces, 1.7E308 to -1.7E308 REAL​ "},{"title":"String types​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#string-types","content":"CHAR​ a character string with a fixed length VARCHAR​ a character string with a length that's variable TEXT​ for strings that we do not know the length BLOB​ can contain 2^16 bytes of data ENUM​ a character string that has a limited number of total values, which must be defined, can contain only 1 legal value SET​ a list of legal possible strings, can contain multiple values "},{"title":"Date & Time types​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#date--time-types","content":"DATE​ YYYY-MM-DD TIME​ HH:MM:SS DATETIME​ YYYY-MM-DD HH:MM:SS TIMESTAMP​ YYYYMMDDHHMMSS YEAR​ YYYY "},{"title":"Null types​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#null-types","content":"NULL​ should reduce NULL values as they require special attention when constructing queries, constraints, and when processing the results "},{"title":"Keywords​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#keywords","content":""},{"title":"SIGNED​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#signed","content":"allow positive and negative values UNSIGNED​ allow only positive values "},{"title":"DISTINCT​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#distinct","content":"blindly remove duplicate rows (better to use GROUP BY) SELECT DISTINCT cdolumnname;  "},{"title":"GROUP BY​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#group-by","content":"grouping rows that have the same value in the column specified SELECT * FROM table GROUP BY columnname1;  "},{"title":"WHERE​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#where","content":"set conditions for rows yet to be grouped SELECT * FROM table WHERE columnname1 = &quot;some value&quot;;  "},{"title":"HAVING​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#having","content":"set conditions for grouped rows SELECT * FROM table GROUP BY columnname1 HAVING columnname1 = &quot;some value&quot;;  "},{"title":"ORDER BY​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#order-by","content":"sort rows by alpha-numeric ASC​ DESC​ SELECT * FROM table ORDER BY columnname DESC;  "},{"title":"LIMIT​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#limit","content":"reduce the number of rows to return "},{"title":"OFFSET​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#offset","content":"specify where to begin counting the number of rows from SELECT * FROM table LIMIT 5 OFFSET 3;  "},{"title":"IS​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#is","content":""},{"title":"AS​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#as","content":""},{"title":"DEFAULT​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#default","content":"set default value ALTER TABLE table1 ADD COLUMN columnname2 TEXT DEFAULT &quot;some value&quot;;  "},{"title":"JOINs​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#joins","content":"combine row data across 2 separate tables using unique key "},{"title":"INNER JOIN (same as JOIN)​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#inner-join-same-as-join","content":"matches rows from the 1st table and the 2nd table, which have the same key to create a result row with the combined columns from both table # INNER JOIN SELECT * FROM table1 INNER JOIN table2 ON table1.id = table2.id; # JOIN SELECT * FROM table1 JOIN table2 ON table1.id = table2.id;  "},{"title":"OUTER JOINs​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#outer-joins","content":"use if 2 tables have asymmetric dataneed to write additional logic to deal with NULLs in the result and constraintsOUTER is used to enable SQL-92 compatibility LEFT JOIN (same as LEFT OUTER JOIN)​ includes rows from table1 regardless of whether a matching row is found in table2 SELECT * FROM table1 LEFT JOIN table2 ON columnname1 = columnname2;  RIGHT JOIN (same as RIGHT OUTER JOIN)​ includes rows from table2 regardless of whether a matching row is found in table1 FULL JOIN (same as FULL OUTER JOIN)​ rows from both tables are kept, regardless of whether a matching row exists in the outer table "},{"title":"Commands​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#commands","content":""},{"title":"CREATE​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#create","content":"allows them to create new tables or databases "},{"title":"Create new table​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#create-new-table","content":"CREATE TABLE tablename( columnname1 VARCHAR(30) NOT NULL, id_name INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY ); # Check if table exist CREATE TABLE IF NOT EXISTS tablename( columnname1 VARCHAR(30) NOT NULL, id_name INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY );  ENUM​ CREATE TABLE tablename( columnname1 VARCHAR(30) NOT NULL, type ENUM('A', 'B') NOT NULL, id_name INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY );  Foreign key​ CREATE TABLE tablename( columnname1 VARCHAR(30) NOT NULL, foreign_key_name INT UNSIGNED NOT NULL, id_name INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY );  Date​ CREATE TABLE tablename( columnname1 VARCHAR(30) NOT NULL, date DATE NOT NULL, id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY );  Unique id​ CREATE TABLE tablename( table1_id INT UNSIGNED NOT NULL, table2_id INT UNSIGNED NOT NULL, PRIMARY KEY(table1_id, table2_id) );  "},{"title":"DROP​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#drop","content":"allows them to them to delete tables or databases Delete table​ DROP TABLE tablename;  "},{"title":"DELETE​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#delete","content":"allows them to delete rows from tables Delete row​ DELETE FROM tablename WHERE condition; # example DELETE FROM todos WHERE todo_id=2;  "},{"title":"INSERT​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#insert","content":"allows them to insert rows into tables "},{"title":"Insert values to table​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#insert-values-to-table","content":"# Insert statement with values for ALL columns INSERT INTO mytable VALUES (value1, value2, …), (anothervalue1, anothervalue2, …), …; # Insert statement with specific columns INSERT INTO mytable (column, another_column, …) VALUES (value1, value2, …), (anothervalue1, anothervalue2, …), …;  "},{"title":"SELECT​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#select","content":"allows them to use the SELECT command to read through databases Show all columns in table​ SELECT * FROM tablename;  "},{"title":"UPDATE​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#update","content":"allow them to update table rows Update row​ # Single update UPDATE tablename SET columnname=value WHERE condition; # example UPDATE todos SET todo=&quot;study programming&quot; WHERE todo_id=3; # Mutiple updates UPDATE tablename SET columnname1=value, columnname2=value WHERE condition;  "},{"title":"DESCRIBE​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#describe","content":"see description of table created "},{"title":"foreign key​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#foreign-key-2","content":"used to make references to the primary key of another tablecan have a different name from the primary key namevalue can have NULLdoes not have to be unique "},{"title":"Built-in numeric functions​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#built-in-numeric-functions","content":""},{"title":"ABS()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#abs","content":""},{"title":"ACOS()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#acos","content":""},{"title":"ASIN()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#asin","content":""},{"title":"ATAN()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#atan","content":""},{"title":"ATAN2()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#atan2","content":""},{"title":"COS()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#cos","content":""},{"title":"SIN()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#sin","content":""},{"title":"TAN()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#tan","content":""},{"title":"AVG(column)​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#avgcolumn","content":"Finds the average numerical value in the specified column for all rows in the group "},{"title":"CEILING()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#ceiling","content":""},{"title":"COUNT(column)​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#countcolumn","content":"counts the number of rows in the group if no column name is specifiedOtherwise, count the number of rows in the group with non-NULL values in the specified column "},{"title":"DEGREES()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#degrees","content":""},{"title":"EXP()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#exp","content":""},{"title":"FLOOR()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#floor","content":""},{"title":"LOG()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#log","content":""},{"title":"MAX(column)​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#maxcolumn","content":"Finds the largest numerical value in the specified column for all rows in the group  "},{"title":"MIN(column)​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#mincolumn","content":"Finds the smallest numerical value in the specified column for all rows in the group "},{"title":"MOD()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#mod","content":""},{"title":"PI()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#pi","content":""},{"title":"POWER()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#power","content":""},{"title":"RADIANS()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#radians","content":""},{"title":"RAND()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#rand","content":""},{"title":"ROUND()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#round","content":""},{"title":"SQRT()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#sqrt","content":""},{"title":"STD()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#std","content":""},{"title":"SUM(column)​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#sumcolumn","content":"Finds the sum of all numerical values in the specified column for the rows in the group "},{"title":"TRUNCATE​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#truncate","content":""},{"title":"Special functions to get values​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#special-functions-to-get-values","content":""},{"title":"NOW()​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#now","content":"get current time, when data is entered to database "},{"title":"Query example​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#query-example","content":""},{"title":"Alter table​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#alter-table","content":"Rename table​ # rename 1 table RENAME TABLE oldtablename to newtablename; # rename multiple tables RENAME TABLE tablename1 to newtablename1, tablename2 to newtablename2;  Add column​ ALTER TABLE tablename ADD columnname2 INT NOT NULL AFTER columnname1, ADD columnname3 INT NOT NULL AFTER columnname1;  Modify column data definition​ ALTER TABLE tablename MODIFY columnname newdatatype;  Rename column and / or modify data definition​ # Rename column AND modify data definition ALTER TABLE tablename CHANGE columnname newcolumnname newdatatype; # Rename column ALTER TABLE tablename CHANGE columnname newcolumnname null;  Delete column​ # Drop 1 column ALTER TABLE tablename DROP columnname1; # Drop 1 or more columns ALTER TABLE tablename DROP COLUMN columnname1;  "},{"title":"NodeJS configuration​","type":1,"pageTitle":"MySQL Cheats","url":"docs/Technologies/database/SQL/mySQL/#nodejs-configuration","content":"install mysql with promise support yarn add promise-mysql import mysql from &quot;promise-mysql&quot;; const db = mysql.createConnection({ host: process.env.DB_HOST, user: process.env.DB_USER, password: process.env.DB_PASSWORD, database: process.env.DB_DATABASE, }); export default async function query(queryStatement, arrValues) { let conn; try { conn = await db; return await conn.query(queryStatement, arrValues); } catch (e) { throw new Error(`db error: ${e}`); } finally { await conn.end(); } }  "},{"title":"PostgreSQL","type":0,"sectionRef":"#","url":"docs/Technologies/database/SQL/postgreSQL/","content":"","keywords":""},{"title":"Install on mac​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#install-on-mac","content":"brew install postgresql "},{"title":"View list of services status​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#view-list-of-services-status","content":"brew services list "},{"title":"Database server​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#database-server","content":""},{"title":"Start​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#start","content":"brew services start postgresql "},{"title":"Stop​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#stop","content":"brew services stop postgresql "},{"title":"Restart​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#restart","content":"brew services restart postgresql "},{"title":"Create user if required (default is current terminal user)​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#create-user-if-required-default-is-current-terminal-user","content":"createuser --interactive --pwprompt "},{"title":"Delete user​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#delete-user","content":"dropuser username "},{"title":"List database​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#list-database","content":"psql -l "},{"title":"Delete database​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#delete-database","content":"dropdb &quot;database_name&quot; "},{"title":"Create database​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#create-database","content":""},{"title":"If have permission to create database​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#if-have-permission-to-create-database","content":"createdb database_name "},{"title":"Create database with specified owner​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#create-database-with-specified-owner","content":"createdb -O username database_name "},{"title":"Connect to database (must connect to do more)​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#connect-to-database-must-connect-to-do-more","content":"Connect using default user psql -d database_name Connect using a specific user psql -d database_name -U username "},{"title":"Run sql file in command line​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#run-sql-file-in-command-line","content":"psql -d myDataBase -a -f myInsertFile "},{"title":"After connecting to database​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#after-connecting-to-database","content":""},{"title":"View command help​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#view-command-help","content":"\\? "},{"title":"Check connection information​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#check-connection-information","content":"\\conninfo You are connected to database &quot;postgres&quot; as user &quot;username&quot; via socket in &quot;/tmp&quot; at port &quot;5432&quot;. "},{"title":"List all users​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#list-all-users","content":"\\du "},{"title":"Create user​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#create-user","content":"create role new_user with login password 'password'; "},{"title":"Alter privileges of user​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#alter-privileges-of-user","content":"alter role username new_privilege; "},{"title":"Grant permission to user​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#grant-permission-to-user","content":"Grant all permissions grant all privileges on {type} {type_name} to {username} type = database, table, etc. Grant specific permission grant {permissions} on {type} {type_name} to {username}; for type of permissions refer to https://www.postgresql.org/docs/9.1/sql-grant.html "},{"title":"Revoke permission from user​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#revoke-permission-from-user","content":"Revoke all permissions revoke all privileges on {type} {type_name} from {username} type = DATABASE, TABLE, etc. Revoke specific permission revoke {permissions} on {type} {type_name} from {username}; "},{"title":"List available databases​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#list-available-databases","content":"\\list "},{"title":"Create database​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#create-database-1","content":"create database database_name; "},{"title":"Delete database​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#delete-database-1","content":"drop database database_name; "},{"title":"Connect to a database​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#connect-to-a-database","content":"Method 1 \\connect database_name Method 2 \\c database_name "},{"title":"Show data directory​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#show-data-directory","content":"show data_directory; "},{"title":"List available tables in current database​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#list-available-tables-in-current-database","content":"\\dt "},{"title":"Show table fields​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#show-table-fields","content":"\\d tableName "},{"title":"Show all data inside the table​","type":1,"pageTitle":"PostgreSQL","url":"docs/Technologies/database/SQL/postgreSQL/#show-all-data-inside-the-table","content":"SELECT * FROM tableName; "},{"title":"deployDjangoTutorial","type":0,"sectionRef":"#","url":"docs/Technologies/deployment/heroku/deployDjangoTutorial","content":"deployDjangoTutorial Ensure gunicorn is installed pip install gunicorn Ensure postgreSQL required libraries are installed pip install dj-database-url psycopg2-binary Install whitenoise for static files pip install whitenoise Add middleware and static_root to settings.py MIDDLEWARE = [ 'whitenoise.middleware.WhiteNoiseMiddleware', ] # not required if creating django rest api PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__)) STATIC_ROOT = os.path.join(BASE_DIR, &quot;staticfiles&quot;) Ensure environment variables are preset in settings.py SECRET_KEY = os.environ.get('SECRET_KEY') DEBUG = (os.environ.get('DEBUG_VALUE') == 'True') Create Procfile vim Procfile Add the following to Procfile project name is the folder containing the settings.py web: gunicorn [project_name].wsgi --log-file - example web: gunicorn experiment_project.wsgi --log-file - Ensure pipfile or requirement.txt is already in project folder Setup .gitignore file Init with git, ignore if already done git init Add and commit git add . &amp;&amp; git commit -m &quot;initial commit&quot; Login to Heroku heroku login Create heroku project (project name will be the url) heroku create project_name url will be https://project_name.herokuapp.comif project_name is not given, random name will be given Setup postgreSQL database If database is automatically created, add the following to settings.py DATABASES = {'default': dj_database_url.config(conn_max_age=600, ssl_require=True)} Add allowed host in settings.py ALLOWED_HOSTS = ['project_name.herokuapp.com'] git add . &amp;&amp; git commit -m &quot;add allowed host&quot; Set buildpack to ensure heroku understands project setup (maybe not be required) heroku buildpacks:set heroku/python Set heroku environment variables view all configs heroku config set environment variable example 1 heroku config:set DEBUG_VALUE='False' example 2 heroku config:set SECRET_KEY=xxx generate new secret key if don't have # use python 3 import secrets print(secrets.token_hex(24)) Push to heroku git push heroku master Use heroku BASH to create superuser and migrate Run bash heroku run bash Migrate python manage.py migrate Create super user python manage.py createsuperuser Open website heroku open Check releases for version to rollback if required heroku releases Rollback if neccessary heroku rollback vxxx example heroku rollback v2","keywords":""},{"title":"Firebase setup guide","type":0,"sectionRef":"#","url":"docs/Technologies/database/noSQL/firebase/","content":"","keywords":""},{"title":"Create firebase project​","type":1,"pageTitle":"Firebase setup guide","url":"docs/Technologies/database/noSQL/firebase/#create-firebase-project","content":"login at firebase https://firebase.google.com/  click &quot;Go to console&quot;click &quot;Add project&quot;Enter project name, then click &quot;continue&quot;, then click &quot;create project&quot; "},{"title":"Get Started​","type":1,"pageTitle":"Firebase setup guide","url":"docs/Technologies/database/noSQL/firebase/#get-started","content":"Click on &quot;Functions&quot; -&gt; click &quot;Get Started&quot; buttonInstall firebase tools npm install -g firebase-tools  Login to firebase firebase login  Create new project folder mkdir new_project_name cd new_project_name  Initialize project firebase init  yes (to proceed)select Functions by pressing spaceselect Use an existing project (created at firebase website) Deploy project firebase deploy  "},{"title":"Run server locally​","type":1,"pageTitle":"Firebase setup guide","url":"docs/Technologies/database/noSQL/firebase/#run-server-locally","content":"firebase serve  "},{"title":"Create database​","type":1,"pageTitle":"Firebase setup guide","url":"docs/Technologies/database/noSQL/firebase/#create-database","content":"click on &quot;Database&quot; -&gt; click on &quot;Create database&quot; buttonselect &quot;Start in test mode&quot; -&gt; select region for cloud firebase locatoin -&gt; click &quot;Done&quot; "},{"title":"Create collection (similar to table)​","type":1,"pageTitle":"Firebase setup guide","url":"docs/Technologies/database/noSQL/firebase/#create-collection-similar-to-table","content":"At database, click on &quot;Start collection&quot;Enter the name of the new collection objects are maps, nested maps and arrays are possible "},{"title":"Create endpoints​","type":1,"pageTitle":"Firebase setup guide","url":"docs/Technologies/database/noSQL/firebase/#create-endpoints","content":"const admin = require(&quot;firebase-admin&quot;); admin.initializeApp(); // Use express for the following instead // Read exports.getData = functions.https.onRequest((req, res) =&gt; { if (req.method !== &quot;GET&quot;) { return res.status(400).json({error: &quot;Invalid request method!&quot;}); } admin .firestore() .collection(&quot;nameOfCollection&quot;) .get() .then((datas) =&gt; { // let dataArr = []; let dataObj; datas.forEach((eachData) =&gt; { // dataArr.push(eachData.data()); dataObj = eachData.data(); }); // return res.json(dataArr); return res.json(dataObj); }) .catch((err) =&gt; console.error(err)); }); // Create exports.createData = functions.https.onRequest((req, res) =&gt; { if (req.method !== &quot;POST&quot;) { return res.status(400).json({error: &quot;Invalid request method!&quot;}); } const newData = req.body; admin .firestore() .collection(&quot;nameOfCollection&quot;) .add(newData) .then((data) =&gt; { return res.json({message: `Document ${data.id} created successfully!`}); }) .catch((err) =&gt; { res.status(500).json({error: &quot;New project category creation failed!&quot;}); console.error(err); }); });  "},{"title":"Use express to manage routes​","type":1,"pageTitle":"Firebase setup guide","url":"docs/Technologies/database/noSQL/firebase/#use-express-to-manage-routes","content":"const admin = require(&quot;firebase-admin&quot;); admin.initializeApp(); const express = require(&quot;express&quot;); const app = express(); // Read app.get(&quot;/data&quot;, (req, res) =&gt; { admin .firestore() .collection(&quot;nameOfCollection&quot;) .get() .then((datas) =&gt; { // let dataArr = []; let dataObj; datas.forEach((eachData) =&gt; { // dataArr.push(eachData.data()); dataObj = eachData.data(); }); // return res.json(dataArr); return res.json(dataObj); }) .catch((err) =&gt; console.error(err)); }); // Create app.post(&quot;/data&quot;, (req, res) =&gt; { const newData = req.body; admin .firestore() .collection(&quot;nameOfCollection&quot;) .add(newData) .then((data) =&gt; { return res.json({message: `Document ${data.id} created successfully!`}); }) .catch((err) =&gt; { res.status(500).json({error: &quot;New document creation failed!&quot;}); console.error(err); }); }); // enable multiple routes at 1 end point exports.api = functions.https.onRequest(app); // change region with the following // exports.api = functions.region(&quot;asia-east2&quot;).https.onRequest(app);  "},{"title":"Enable Authentication​","type":1,"pageTitle":"Firebase setup guide","url":"docs/Technologies/database/noSQL/firebase/#enable-authentication","content":"click on &quot;Authentication&quot;under &quot;Users&quot; tab, click on &quot;Set up sign-in method&quot; buttonFor default, enable the Email/Password, then click &quot;Save&quot; buttonGo to project Overview -&gt; click on &quot;Project settings&quot;under &quot;Your apps&quot;, click on &lt;/&gt;Create a new web app if none is available, enter app name -&gt; click on &quot;Register app&quot;Copy the config settings and save it in a .env file api_key = &quot;zfdbzdfbz&quot; auth_domain = &quot;some-server-4q4t.firebaseapp.com&quot; database_url = &quot;https=//some-server-4q4t.firebaseio.com&quot; project_id = &quot;some-server-4q4t&quot; storage_bucket = &quot;some-server-4q4t.appspot.com&quot; messaging_sender_id = &quot;q4tq43t3543t&quot; app_id = &quot;1=140213q43rq34r=web=8q4rq34rq34r43&quot; measurement_id = &quot;G-6GVNEGSG43&quot;  retrieve env variables in config.js module.exports = { apiKey: process.env.api_key, authDomain: process.env.auth_domain, databaseURL: process.env.database_url, projectId: process.env.project_id, storageBucket: process.env.storage_bucket, messagingSenderId: process.env.messaging_sender_id, appId: process.env.app_id, measurementId: process.env.measurement_id, };  setup env variables in firebase firebase functions:config:set obj_name.key_name=&quot;key_value&quot;  import and initialize firebase app in index.js // use dotenv for localhost // require('dotenv').config() const firebase = require(&quot;firebase&quot;); const config = require(&quot;./config&quot;); firebase.initializeApp(config);  Install firebase (a client library) in functions folder to enable authentication npm i firebase  Create signup route app.post(&quot;/signup&quot;, (req, res) =&gt; { const newUser = { email: req.body.email, password: req.body.password, confirmPassword: req.body.confirmPassword, username: req.body.username, }; firebase .auth() .createUserWithEmailAndPassword(newUser.email, newUser.password) .then((data) =&gt; { return res.status(201).json({ message: `User ${data.user.uid} signed up successfully!`, }); }) .catch((err) =&gt; { console.error(err); return res.status(500).json({error: err.code}); }); });  "},{"title":"GraphQL","type":0,"sectionRef":"#","url":"docs/Technologies/database/noSQL/graphQL/","content":"","keywords":""},{"title":"Benefits of using GraphQL​","type":1,"pageTitle":"GraphQL","url":"docs/Technologies/database/noSQL/graphQL/#benefits-of-using-graphql","content":"it defines the shape of the desired data and calls for it once this helps to avoid multiple rest calls and the performance problems of over and under fetching it is backward compatible and version-free means that one can add new fields to an existing GraphQL server without breaking the current clients old fields can be deprecated and yet still can continue to function can be used to wrap around existing API so that one don't have to set up everything from scratch &amp; use it as part of the existing setup it is language agnostic can implement GraphQL solutions in a range of different languages "},{"title":"Syntax​","type":1,"pageTitle":"GraphQL","url":"docs/Technologies/database/noSQL/graphQL/#syntax","content":""},{"title":"writing comments​","type":1,"pageTitle":"GraphQL","url":"docs/Technologies/database/noSQL/graphQL/#writing-comments","content":"# comment  "},{"title":"Queries​","type":1,"pageTitle":"GraphQL","url":"docs/Technologies/database/noSQL/graphQL/#queries","content":"Basic queries​ graphql query // method 1: similar to anonymous function { viewer { id } } // method 2: makes it easier to find but does not have a unique name query { viewer { id } } // method 3: Set operation names to all easy finding as names are unique query SomeUniqueName { viewer { id } }  json result { &quot;data&quot;: { &quot;viewer&quot;: { &quot;id&quot;: &quot;efhyubVgvkywdUBUYGGB&quot; } } }  Variable definitions​ query SomeUniqueName($myVariable: String!) { organization(login: $myVariable) { id } }  query variables { &quot;myVariable&quot;: &quot;facebook&quot; }  { &quot;data&quot;: { &quot;organization&quot;: { &quot;id&quot;: &quot;MDEyOk9yZ2FuaXphdGlvbjY5NjMx&quot; } } }  Multiple fields​ { viewer { id bio name company } }  { &quot;data&quot;: { &quot;viewer&quot;: { &quot;id&quot;: &quot;HJBHJssjkbdLJHBHJB&quot;, &quot;bio&quot;: &quot;some description about myself&quot;, &quot;name&quot;: &quot;Myname&quot;, &quot;company&quot;: null } } }  Parsing argument​ when parsing argument value, must use double quotessingle argument { repositoryOwner(login: &quot;myusername&quot;) { id url } }  { &quot;data&quot;: { &quot;repositoryOwner&quot;: { &quot;id&quot;: &quot;hlbBHKBbhbdhbBLHB&quot;, &quot;url&quot;: &quot;https://github.com/myusername&quot; } } }  multiple arguments { repository(name: &quot;graphql&quot;, owner: &quot;facebook&quot;) { id } }  { &quot;data&quot;: { &quot;repository&quot;: { &quot;id&quot;: &quot;MDEwOlJlcG9zaXRvcnkzODM0MjIyMQ==&quot; } } }  Required argument​ if missing an error will be shown { repository(name: &quot;graphql&quot;) { id } }  { &quot;errors&quot;: [ { &quot;path&quot;: [&quot;query&quot;, &quot;repository&quot;], &quot;extensions&quot;: { &quot;code&quot;: &quot;missingRequiredArguments&quot;, &quot;className&quot;: &quot;Field&quot;, &quot;name&quot;: &quot;repository&quot;, &quot;arguments&quot;: &quot;owner&quot; }, &quot;locations&quot;: [ { &quot;line&quot;: 2, &quot;column&quot;: 2 } ], &quot;message&quot;: &quot;Field 'repository' is missing required arguments: owner&quot; } ] }  Aliases​ not using aliases with conflicting arguments will result with an error { repository(name: &quot;graphql&quot;, owner: &quot;facebook&quot;) { id description homepageUrl } repository(name: &quot;react&quot;, owner: &quot;facebook&quot;) { id description homepageUrl } }  { &quot;errors&quot;: [ { &quot;path&quot;: [], &quot;extensions&quot;: { &quot;code&quot;: &quot;fieldConflict&quot;, &quot;fieldName&quot;: &quot;repository&quot;, &quot;conflicts&quot;: &quot;{name:\\&quot;\\\\\\&quot;graphql\\\\\\&quot;\\&quot;,owner:\\&quot;\\\\\\&quot;facebook\\\\\\&quot;\\&quot;} or {name:\\&quot;\\\\\\&quot;react\\\\\\&quot;\\&quot;,owner:\\&quot;\\\\\\&quot;facebook\\\\\\&quot;\\&quot;}&quot; }, &quot;locations&quot;: [ { &quot;line&quot;: 2, &quot;column&quot;: 3 }, { &quot;line&quot;: 5, &quot;column&quot;: 3 } ], &quot;message&quot;: &quot;Field 'repository' has an argument conflict: {name:\\&quot;\\\\\\&quot;graphql\\\\\\&quot;\\&quot;,owner:\\&quot;\\\\\\&quot;facebook\\\\\\&quot;\\&quot;} or {name:\\&quot;\\\\\\&quot;react\\\\\\&quot;\\&quot;,owner:\\&quot;\\\\\\&quot;facebook\\\\\\&quot;\\&quot;}?&quot; } ] }  Use Aliases to solve the error { graphqlProject: repository(name: &quot;graphql&quot;, owner: &quot;facebook&quot;) { id description homepageUrl } reactProject: repository(name: &quot;react&quot;, owner: &quot;facebook&quot;) { id description homepageUrl } }  { &quot;data&quot;: { &quot;graphqlProject&quot;: { &quot;id&quot;: &quot;MDEwOlJlcG9zaXRvcnkzODM0MjIyMQ==&quot;, &quot;description&quot;: &quot;GraphQL is a query language and execution engine tied to any backend service.&quot;, &quot;homepageUrl&quot;: &quot;https://spec.graphql.org&quot; }, &quot;reactProject&quot;: { &quot;id&quot;: &quot;MDEwOlJlcG9zaXRvcnkxMDI3MDI1MA==&quot;, &quot;description&quot;: &quot;A declarative, efficient, and flexible JavaScript library for building user interfaces.&quot;, &quot;homepageUrl&quot;: &quot;https://reactjs.org&quot; } } }  Fragments​ they are reusable sets of fields that can be included in queries as needed to prevent repetition { graphqlProject: repository(name: &quot;graphql&quot;, owner: &quot;facebook&quot;) { ...repoFields } reactProject: repository(name: &quot;react&quot;, owner: &quot;facebook&quot;) { ...repoFields } } fragment repoFields on Repository { id description homepageUrl }  { &quot;data&quot;: { &quot;graphqlProject&quot;: { &quot;id&quot;: &quot;MDEwOlJlcG9zaXRvcnkzODM0MjIyMQ==&quot;, &quot;description&quot;: &quot;GraphQL is a query language and execution engine tied to any backend service.&quot;, &quot;homepageUrl&quot;: &quot;https://spec.graphql.org&quot; }, &quot;reactProject&quot;: { &quot;id&quot;: &quot;MDEwOlJlcG9zaXRvcnkxMDI3MDI1MA==&quot;, &quot;description&quot;: &quot;A declarative, efficient, and flexible JavaScript library for building user interfaces.&quot;, &quot;homepageUrl&quot;: &quot;https://reactjs.org&quot; } } }  Nested fields​ { viewer { id name isEmployee location databaseId repositories(first: 3) { edges { node { id name } } } } }  { &quot;data&quot;: { &quot;viewer&quot;: { &quot;id&quot;: &quot;MDQ6VXNlcjM1MDQyMjEz&quot;, &quot;name&quot;: &quot;Terence&quot;, &quot;isEmployee&quot;: false, &quot;location&quot;: null, &quot;databaseId&quot;: 35042213, &quot;repositories&quot;: { &quot;edges&quot;: [ { &quot;node&quot;: { &quot;id&quot;: &quot;MDEwOlJlcG9zaXRvcnkxMjExNDE5MzY=&quot;, &quot;name&quot;: &quot;alarm-volume-control&quot; } }, { &quot;node&quot;: { &quot;id&quot;: &quot;MDEwOlJlcG9zaXRvcnkxMjgyMDY0ODM=&quot;, &quot;name&quot;: &quot;Rock-Paper-Scissors&quot; } }, { &quot;node&quot;: { &quot;id&quot;: &quot;MDEwOlJlcG9zaXRvcnkxMjgzOTQzNjc=&quot;, &quot;name&quot;: &quot;Hackerrank-Solutions&quot; } } ] } } } }  Multiple nested fields​ { repository(owner: &quot;github&quot;, name: &quot;opensource.guide&quot;) { id name description watchers(first: 3) { edges { node { id name company } } } pullRequests(last: 2) { edges { node { id author { avatarUrl login resourcePath } } } } } }  { &quot;data&quot;: { &quot;repository&quot;: { &quot;id&quot;: &quot;MDEwOlJlcG9zaXRvcnk2MTIwNDgxOA==&quot;, &quot;name&quot;: &quot;opensource.guide&quot;, &quot;description&quot;: &quot;📚 Community guides for open source creators&quot;, &quot;watchers&quot;: { &quot;edges&quot;: [ { &quot;node&quot;: { &quot;id&quot;: &quot;MDQ6VXNlcjEwODcy&quot;, &quot;name&quot;: &quot;TAKAGI Masahiro&quot;, &quot;company&quot;: null } }, { &quot;node&quot;: { &quot;id&quot;: &quot;MDQ6VXNlcjMwNDA4&quot;, &quot;name&quot;: &quot;Dirk Brünsicke&quot;, &quot;company&quot;: &quot;bruensicke.com&quot; } }, { &quot;node&quot;: { &quot;id&quot;: &quot;MDQ6VXNlcjQwNDE1&quot;, &quot;name&quot;: &quot;Mike Linksvayer&quot;, &quot;company&quot;: &quot;☃&quot; } } ] }, &quot;pullRequests&quot;: { &quot;edges&quot;: [ { &quot;node&quot;: { &quot;id&quot;: &quot;MDExOlB1bGxSZXF1ZXN0Njg4NjMzNTE2&quot;, &quot;author&quot;: { &quot;avatarUrl&quot;: &quot;https://avatars.githubusercontent.com/u/86223196?v=4&quot;, &quot;login&quot;: &quot;maxius122-bit&quot;, &quot;resourcePath&quot;: &quot;/maxius122-bit&quot; } } }, { &quot;node&quot;: { &quot;id&quot;: &quot;MDExOlB1bGxSZXF1ZXN0Njg4NjM0OTQ1&quot;, &quot;author&quot;: { &quot;avatarUrl&quot;: &quot;https://avatars.githubusercontent.com/u/86223196?v=4&quot;, &quot;login&quot;: &quot;maxius122-bit&quot;, &quot;resourcePath&quot;: &quot;/maxius122-bit&quot; } } } ] } } } }  Pagination​ first, last, states can be used to filter the data # (first: 5) # (last: 3) { repository(name: &quot;graphql&quot;, owner: &quot;facebook&quot;) { id issues(last: 5, states: OPEN) { edges { node { id number title } } } } }  { &quot;data&quot;: { &quot;repository&quot;: { &quot;id&quot;: &quot;MDEwOlJlcG9zaXRvcnkzODM0MjIyMQ==&quot;, &quot;issues&quot;: { &quot;edges&quot;: [ { &quot;node&quot;: { &quot;id&quot;: &quot;MDU6SXNzdWU4NzMxNzU4MTI=&quot;, &quot;number&quot;: 862, &quot;title&quot;: &quot;Meta-Fields Defined by Schema Authors&quot; } }, { &quot;node&quot;: { &quot;id&quot;: &quot;MDU6SXNzdWU4NzYwNzYyODQ=&quot;, &quot;number&quot;: 864, &quot;title&quot;: &quot;Explicitly state in spec that full introspection output is equivalent to full SDL document&quot; } }, { &quot;node&quot;: { &quot;id&quot;: &quot;MDU6SXNzdWU4Nzc3NjEzNTQ=&quot;, &quot;number&quot;: 866, &quot;title&quot;: &quot;Execute fragments directly&quot; } }, { &quot;node&quot;: { &quot;id&quot;: &quot;MDU6SXNzdWU4ODAyNjEzNTE=&quot;, &quot;number&quot;: 867, &quot;title&quot;: &quot;[Strawman] Provide a non-null designator in GraphQL operations&quot; } }, { &quot;node&quot;: { &quot;id&quot;: &quot;MDU6SXNzdWU4OTg4OTY4NzQ=&quot;, &quot;number&quot;: 872, &quot;title&quot;: &quot;Optional v. Nullable input redux&quot; } } ] } } } }  "},{"title":"Mutations​","type":1,"pageTitle":"GraphQL","url":"docs/Technologies/database/noSQL/graphQL/#mutations","content":"Data modifications are made with mutationsSimilar to PUT or DELETE in RESTdata is sent as a payloadGraphQL changes the dataset behind the schemaAPI defines which mutations are allowed Create mutations​ mutation NewComment($input: AddCommentInput!) { addComment(input: $input) { clientMutationId subject { id } } }  query variables { &quot;input&quot;: { &quot;clientMutationId&quot;: &quot;123456&quot;, &quot;subjectId&quot;: &quot;NININIWDNEUBNFIUuinife&quot;, &quot;body&quot;: &quot;mutation has occured&quot; } }  json result (shows that a new comment has been added to the issue of the repository) { &quot;data&quot;: { &quot;addComment&quot;: { &quot;clientMutationId&quot;: &quot;123456&quot;, &quot;subject&quot;: { &quot;id&quot;: &quot;MDU6SXNzdWU5NDY1MjM3MTM=&quot; } } } }  "},{"title":"Schemas​","type":1,"pageTitle":"GraphQL","url":"docs/Technologies/database/noSQL/graphQL/#schemas","content":"the way the fields are setup in graphQL is determined by the schemasit provides sll the object types used in the data it also specifies the types for all the values "},{"title":"Input Types​","type":1,"pageTitle":"GraphQL","url":"docs/Technologies/database/noSQL/graphQL/#input-types","content":"IntegerFloatStringBooleanNullEnumListObject "},{"title":"Query __schema​","type":1,"pageTitle":"GraphQL","url":"docs/Technologies/database/noSQL/graphQL/#query-__schema","content":"{ __schema { queryType { name description fields { name description } } } }  { &quot;data&quot;: { &quot;__schema&quot;: { &quot;queryType&quot;: { &quot;name&quot;: &quot;Query&quot;, &quot;description&quot;: &quot;The query root of GitHub's GraphQL interface.&quot;, &quot;fields&quot;: [ { &quot;name&quot;: &quot;codeOfConduct&quot;, &quot;description&quot;: &quot;Look up a code of conduct by its key&quot; }, { &quot;name&quot;: &quot;codesOfConduct&quot;, &quot;description&quot;: &quot;Look up a code of conduct by its key&quot; }, ..., { &quot;name&quot;: &quot;viewer&quot;, &quot;description&quot;: &quot;The currently authenticated user.&quot; } ] } } } }  sample schema in the docs marketplaceCategories( excludeEmpty: Boolean excludeSubcategories: Boolean includeCategories: [String!] # ! means value is required ): [MarketplaceCategory!]! Get alphabetically sorted list of Marketplace categories marketplaceCategory(slug: String!useTopicAliases: Boolean): MarketplaceCategory Look up a Marketplace category by its slug. marketplaceListing(slug: String!): MarketplaceListing Look up a single Marketplace listing marketplaceListings( adminId: ID after: String allStates: Boolean before: String categorySlug: String first: Int last: Int organizationId: ID primaryCategoryOnly: Boolean = false slugs: [String] useTopicAliases: Boolean viewerCanAdmin: Boolean withFreeTrialsOnly: Boolean = false ): MarketplaceListingConnection! Look up Marketplace listings  "},{"title":"Query __type​","type":1,"pageTitle":"GraphQL","url":"docs/Technologies/database/noSQL/graphQL/#query-__type","content":"{ __type(name: &quot;Repository&quot;) { kind name description } }  { &quot;data&quot;: { &quot;__type&quot;: { &quot;kind&quot;: &quot;OBJECT&quot;, &quot;name&quot;: &quot;Repository&quot;, &quot;description&quot;: &quot;A repository contains the content for a project.&quot; } } }  "},{"title":"Works only if react app is created using create-react-app","type":0,"sectionRef":"#","url":"docs/Technologies/deployment/heroku/deployReactTutorial","content":"Works only if react app is created using create-react-app Setup .gitignore fileEnsure either package-lock.json or yarn.lock is deleted, only can have 1Init with git, ignore if already done git init Add and commit git add . &amp;&amp; git commit -m &quot;initial commit&quot; Login to Heroku heroku login Create heroku project with buildpack (project name will be the url) heroku create project_name -b https://github.com/mars/create-react-app-buildpack.git url will be https://project_name.herokuapp.comif project_name is not given, random name will be given Set heroku environment variables view all configs heroku config set environment variable if required heroku config:set MY_KEY=KEY_VALUE Push to heroku git push heroku master Open website heroku open Check releases for version to rollback if required heroku releases Rollback if neccessary heroku rollback vxxx example heroku rollback v2","keywords":""},{"title":"herokuCheatsheet","type":0,"sectionRef":"#","url":"docs/Technologies/deployment/heroku/herokuCheatsheet","content":"herokuCheatsheet Heruku will npm install the requirements from the package.json Install heroku Mac brew install heroku/brew/heroku Login to heroku heroku login key in registered email and password if promptedor follow instructions Make sure start script is included in package.json file &quot;start&quot;: &quot;node app.js&quot; &quot;scripts&quot;: { &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;, &quot;start&quot;: &quot;node app.js&quot; } if the start script is not included, heroku will not run, and return an application error if using Node js make sure app.listen is properly configured app.listen(process.env.PORT, process.env.IP); make sure git is used git initgit add .git commit -m &quot;initial commit&quot; create heroku, add project name for custom url (https://projectName.herokuapp.com) heroku create projectName push to heroku server git push heroku master read error report heroku logs view all folders and files heroku run ls view files inside a folder heroku run ls folderName if using mongodb, need to create new cluster at mongodb atlas then change app.js settings old: mongoose.connect(&quot;mongodb://localhost:27017/yelp_camp&quot;, {useNewUrlParser: true});new: copy link given when connected to new cluster change password to registered passwordmongoose.connect(&quot;mongodb+srv://reshinto:&lt;password&gt;@cluster0-lyejj.mongodb.net/test?retryWrites=true&quot;, {useNewUrlParser: true}); Set environment variables in the Heroku dashboard go to apps and select the app to modify click settings at &quot;Config Vars&quot;, click &quot;Reveal Config Vars&quot; input the KeyVariable variable used to call databse url input the Value database url another way to set environment variable at Heroku through terminal heroku config:set myKey=myValue View all configs heroku config Get environment variable value heroku config:get myKey Run Bash in heroku heroku run bash","keywords":""},{"title":"readme","type":0,"sectionRef":"#","url":"docs/Technologies/deployment/libraries/python/","content":"","keywords":""},{"title":"Publish to pypi​","type":1,"pageTitle":"readme","url":"docs/Technologies/deployment/libraries/python/#publish-to-pypi","content":""},{"title":"Install tools for publishing​","type":1,"pageTitle":"readme","url":"docs/Technologies/deployment/libraries/python/#install-tools-for-publishing","content":"Install build python -m pip install --upgrade build Install twine python -m pip install --upgrade twine "},{"title":"Build and compile python package​","type":1,"pageTitle":"readme","url":"docs/Technologies/deployment/libraries/python/#build-and-compile-python-package","content":"make sure to delete existing dist/ folders before building python -m build "},{"title":"Deploy to pypi​","type":1,"pageTitle":"readme","url":"docs/Technologies/deployment/libraries/python/#deploy-to-pypi","content":"twine upload dist/* "},{"title":"Internet Information Services","type":0,"sectionRef":"#","url":"docs/Technologies/deployment/windows/iis","content":"","keywords":""},{"title":"terminal commands​","type":1,"pageTitle":"Internet Information Services","url":"docs/Technologies/deployment/windows/iis#terminal-commands","content":"stop services iisreset/stop  start services iisreset/start  reset services iisreset  view existing configured sites cd c:\\Windows\\System32\\inetsrv appcmd list site  create new website (id starts from 1, must be unique) cd c:\\Windows\\System32\\inetsrv appcmd add site /name:&quot;Default Web Site&quot; /id:1 /physicalPath:C:\\production\\dispatcher\\website /bindings:http/*:81:websiteaddress.com  delete website cd c:\\Windows\\System32\\inetsrv appcmd delete site &quot;Default Web Site&quot;  "},{"title":"Github Actions","type":0,"sectionRef":"#","url":"docs/Technologies/devops/CiCd/githubActions/","content":"","keywords":""},{"title":"In Github Reposition​","type":1,"pageTitle":"Github Actions","url":"docs/Technologies/devops/CiCd/githubActions/#in-github-reposition","content":"Go to SettingsClick on Actions on the left sidebar click on Runners Click on New self-hosted runnerSelect the runner image and architecture "},{"title":"In DigitalOcean​","type":1,"pageTitle":"Github Actions","url":"docs/Technologies/devops/CiCd/githubActions/#in-digitalocean","content":"follow details shown at Githubexample Create a folder mkdir actions-runner &amp;&amp; cd actions-runner Download the latest runner package sudo curl -o actions-runner-osx-x64-2.294.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.294.0/actions-runner-osx-x64-2.294.0.tar.gz Optional: Validate the hash echo &quot;11041376754f6beaccb56101a3e79bf5fc5d6ff628460fa1ae419f9f439e24a2 actions-runner-osx-x64-2.294.0.tar.gz&quot; | shasum -a 256 -c Extract the installer sudo tar xzf ./actions-runner-osx-x64-2.294.0.tar.gz Give permissions sudo chmod -R 777 ~/the/path/to/actions-runner Create the runner and start the configuration experience ./config.sh --url https://github.com/reshinto/myrepo --token sdgsdgbershteht enter name of runnerenter labels, ignore if not requiredenter work folder, ignore if using defaultat Github the runner will be available but offline start runner install service sudo ./svc.sh install run service sudo ./svc.sh start at Github the runner will be available but idle "},{"title":"In root directory of Project Repository​","type":1,"pageTitle":"Github Actions","url":"docs/Technologies/devops/CiCd/githubActions/#in-root-directory-of-project-repository","content":"create yml file of any name in the following path, create folders if it does not exist ~/projectName/.github/workflows/projectname.yml contents name: portfolio CI on: push: branches: [dev] pull_request: branches: [dev] jobs: build: runs-on: self-hosted steps: - name: Checkout uses: actions/checkout@v3 - name: Build uses: actions/setup-node@v3 with: node-version: 16 - run: | yarn yarn run build yarn run deploy-gh git add, commit and push, github actions should work "},{"title":"How it works​","type":1,"pageTitle":"Github Actions","url":"docs/Technologies/devops/CiCd/githubActions/#how-it-works","content":"github data will be updated on ~/the/path/to/actions-runner/_work/myrepo/myrepo/ whatever run commands declared will be run at this level "},{"title":"Jenkins","type":0,"sectionRef":"#","url":"docs/Technologies/devops/CiCd/jenkins/","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Jenkins","url":"docs/Technologies/devops/CiCd/jenkins/#installation","content":""},{"title":"Mac​","type":1,"pageTitle":"Jenkins","url":"docs/Technologies/devops/CiCd/jenkins/#mac","content":"long term support brew install jenkins-lts latest brew install jenkins "},{"title":"Docker​","type":1,"pageTitle":"Jenkins","url":"docs/Technologies/devops/CiCd/jenkins/#docker","content":"Install jenkins image​ long term support docker pull jenkins/jenkins:lts-jdk11 latest docker pull jenkins/jenkins "},{"title":"How to run​","type":1,"pageTitle":"Jenkins","url":"docs/Technologies/devops/CiCd/jenkins/#how-to-run","content":""},{"title":"Mac​","type":1,"pageTitle":"Jenkins","url":"docs/Technologies/devops/CiCd/jenkins/#mac-1","content":"Start Jenkins server​ brew services start jenkins-lts Stop Jenkins server​ brew services stop jenkins-lts View server​ http://localhost:8080/ paste admin password that was auto generated if first time setting up "},{"title":"Docker​","type":1,"pageTitle":"Jenkins","url":"docs/Technologies/devops/CiCd/jenkins/#docker-1","content":"Create new container​ on local computer docker run -d -p 8080:8080 -p 50000:50000 -v ~/jenkins_home:/var/jenkins_home --name jenkins jenkins/jenkins on cloud server docker run -d -u 0 -p 8080:8080 -p 50000:50000 -v ~/jenkins_home:/var/jenkins_home --name jenkins --restart unless-stopped jenkins/jenkins:lts-jdk11 Get default admin password​ docker exec -it jenkins bash docker exec jenkins cat var/jenkins_home/secrets/initialAdminPassword "},{"title":"First time setup​","type":1,"pageTitle":"Jenkins","url":"docs/Technologies/devops/CiCd/jenkins/#first-time-setup","content":"Click on Install suggested pluginsCreate admin account "},{"title":"Jenkins Interface​","type":1,"pageTitle":"Jenkins","url":"docs/Technologies/devops/CiCd/jenkins/#jenkins-interface","content":""},{"title":"Create a job / project​","type":1,"pageTitle":"Jenkins","url":"docs/Technologies/devops/CiCd/jenkins/#create-a-job--project","content":"Click on New Item or Create new jobs linkSelect project typeSet the required settingsAt the General tab This project is parameterized option String parameter set variable name and default value Choice parameter set variable nameset choices: e.g. DEVELOPMENT STAGING PRODUCTION Boolean parameter set variable namecheck default_value to set it as true, uncheck as false At the Build Triggers tab Build periodically option Jenkins scheduler format * * * * * is min(0 - 59) hour(0 - 23) dayOfMonth(1 - 31) month(1 - 12) dayOfWeek(0 - 7)(Sunday=0 or 7) use * for all range values e.g. all days of the week Use H for hashed values to spread out jobs around the desired time H 0 * * * Simple aliases for general times @hourly, @midnight, @daily, @monthly, @weekly, @annually At the Build tab eg. select the Execute shell, then input the desired commands At the Post-build Actions tab Can choose the file to archive for easy discovery and management if unsure of file path use wild card **/artifactFile Click on Apply button to save changes and continue modifying the configurations or click on the Save button to save configurations and exit "},{"title":"Build the created job / project: this will run the job​","type":1,"pageTitle":"Jenkins","url":"docs/Technologies/devops/CiCd/jenkins/#build-the-created-job--project-this-will-run-the-job","content":"Click on the Build Now buttonA job build history will be generatedTo get the console output, click on the blue ball at the history row "},{"title":"Create View​","type":1,"pageTitle":"Jenkins","url":"docs/Technologies/devops/CiCd/jenkins/#create-view","content":"Display jobs that meet a criteriaViews are like a filterDeleting a view will only delete the view, however, jobs will not be deletedNew folders will not be able to be create inside except for All view "},{"title":"Create Folder​","type":1,"pageTitle":"Jenkins","url":"docs/Technologies/devops/CiCd/jenkins/#create-folder","content":"Folders group things together contain jobs, views, and other folders Provides a namespace that is separate from other folders in Jenkins it is isolated and can contain items/jobs that have the same name as items/job in other folders Create a new folder select New Item button then select Folder Can contain jobs, views, and foldersDeleting a folder will delete all jobs, views, and folders inside "},{"title":"Docker","type":0,"sectionRef":"#","url":"docs/Technologies/devops/docker/","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#installation","content":""},{"title":"Windows​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#windows","content":"WSL Ubuntu​ refer to the following website Docker desktop version must be 2.2.0.5there might be some issues while installing docker and docker compose within wsl google it and solve the issue might need to uninstall and upgrade certain softwares "},{"title":"Definitions​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#definitions","content":""},{"title":"Images​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#images","content":"it is a package or a template similar to a Virtual Machine template used to create 1 or more containersimages can be searched for, or created and pushed to docker hub repository (public) a docker file is required with the developed app to create an image "},{"title":"Containers​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#containers","content":"it is a running instance of images that are isolated and have their own environments and set of processors "},{"title":"Networking​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#networking","content":"docker has 3 networks bridge docker run ubuntu a private internal network created by docker on the host all containers attach to this network by defaultwill get an internal IP address 172.17.0.0/16 seriescontainers can access each other using the internal IPto access containers from outside map container ports to host ports custom internal network can be created docker network create --drive bridge --subnet 182.18.0.0/16 custom-isolated-network^name none docker run ubuntu --network=none containers are isolated and are not attached to any networkdoes not have any access to external network or other containers host docker run ubuntu --network=host this takes out any network isolation between the host and container PORT conflicts will arise if PORT is already in use on the computer "},{"title":"Commands​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#commands","content":""},{"title":"Download and install image​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#download-and-install-image","content":"Pulls an image or a repository from the docker hub registry docker pull [imageName] similar to using the run command, however, this will only download once docker run [imageName] "},{"title":"List all images installed​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#list-all-images-installed","content":"docker images "},{"title":"Remove images​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#remove-images","content":"ensure that no containers are running before removing docker rmi [imageNameOrImageID] remove all images docker rmi -f $(docker images -aq) "},{"title":"Update image​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#update-image","content":"updates the image after modifying a container docker commit [containerName][imageNamge] "},{"title":"List all running containers​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#list-all-running-containers","content":"docker ps list all containers including those that are not running docker ps -a "},{"title":"Start and Stop container​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#start-and-stop-container","content":"start docker start [containerName or containerId] stop docker stop [containerName or containerId] alternative docker kill [containerName or containerId]stop all docker kill $(docker ps -q) "},{"title":"Remove a stopped container permanently​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#remove-a-stopped-container-permanently","content":"this will delete all saved data in the container use volume mapping to enable persistent data docker rm [containerName] remove all docker rm $(docker ps -a -q) "},{"title":"Running a container​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#running-a-container","content":"Creates a random container name and run it, it will stop and exit after all tasks are completed docker run [imageName] Specify a name of the container docker run --name=someName [imageName] Run a container with a specific version with tag​ e.g.: running an image with version 4.0 docker run imageName:4.0 map host PORT with container PORT with -p​ By DEFAULT host PORT will use container PORTto change default, need to map desired host PORT to the container PORT e.g.: mapping host PORT 80 with container PORT 5000 docker run -p 80:5000 [imageName] Volume mapping to enable persistent data with the -v option​ all files located in the specified host directory will be accessible in the specified container directory docker run -v hostFilePath:containerFilePath [containerName] e.g.: docker run -v /c/Users/reshinto/shareFolder:/someFolder mysql-docker Detach running container with the -d option​ container can be detached and be runned in the background docker run -d [imageName] Set Environment variables in the container with -e option​ docker run -e VARIABLE_NAME=value [imageName] Delete container when the container has stop running with --rm option​ docker run --rm [imageName] "},{"title":"Execute a command externally​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#execute-a-command-externally","content":"docker exec [commands] Use -i option to enable interactive mode​ Use -t option to enable terminal (-i and -t is usally used together as -it)​ docker exec -it [containerName][commands] e.g.: running mysql docker exec -it mysql-docker mysql -u root -p Use bash terminal​ -it option must be used together docker exec -it [containerName] bash Execute 1 bash command​ docker exec [containerName][command] "},{"title":"Copy files from host to container​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#copy-files-from-host-to-container","content":"docker cp filename [containerName]:pathToCopyTo e.g.: saving a file to the root directory in the container docker cp file.sql mysql-docker:/ "},{"title":"Inspect Container​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#inspect-container","content":"see aditional detials about a specific container docker inspect [containerName] "},{"title":"View all Container logs​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#view-all-container-logs","content":"docker logs [containerName] "},{"title":"List all internal networks​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#list-all-internal-networks","content":"docker network ls "},{"title":"Create my own image​","type":1,"pageTitle":"Docker","url":"docs/Technologies/devops/docker/#create-my-own-image","content":"create a Dockerfile with the same namewrite a set of instructions in the Dockerfile everything on the left in caps is an instruction, everything on the right is an argument FROM [imageName] docker image can be the OS or other apps like nodee.g.: latest ubuntu image FROM Ubuntu e.g.: specific ubuntu version image FROM ubuntu:14.04 RUN [command] use to install and update dependenciese.g. RUN apt update VOLUME [&quot;/host/path/&quot;, &quot;/container/path&quot;] defines shared or ephemeral mountable directoriesshared data (avoid defining shared folders in Dockerfiles) VOLUME [&quot;/shared-data&quot;] ADD file toThisFileAtThisDirectory add local files ADD notes.txt /notes.txt adds the contents of tar archives by uncompressing the archives and pasting the contents into the directory ADD project.tar.gz /install/ adds the file downloaded from a URL to a directory ADD https://project.example.com/download/1.0/project.rpm /project/ ENV VARIABLE_NAME value set environment variables ENV DB_PORT=5432 WORKDIR /path sets the directory the container starts in WORKDIR /root USER someValue sets which user the container will run as USER arthur COPY host/path to/path COPY . /opt/source-code ENTRYPOINT VAR_NAME=/app/path/with/filename [command] specifies the start of the command to runuse this if container acts like a command-line programcan be combined together with CMD ENTRYPOINT EXPRESS_APP=/opt/source-code/index.js node start HEALTHCHECK - defines the author of this Dockerfile EXPOSE maps a port into the container EXPOSE 8080 CMD command param1 or CMD [&quot;command&quot;, &quot;param1&quot;] specifies the whole command to runuse this if unsure e.g.: CMD [&quot;sleep&quot;, &quot;5&quot;] parameters are optional CMD [&quot;bash&quot;] when running docker, commands will be automatically be called docker run imageName to change param1 value docker run imageName command newParam1Valueif command is declared in the ENTRYPOINT, calling command is not required docker run imageName newParam1Value basic architecture FROM Ubuntu RUN apt-get update &amp;&amp; apt-get -y install python RUN pip install flask flask-mysql COPY . /opt/source-code ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run basic app architecture FROM node WORKDIR /usr/src/app COPY package*.json ./ RUN npm install COPY . . EXPOSE 4000 CMD [&quot;npm&quot;, &quot;start&quot;] create a .dockerignore file (ignore if not required) node_modules npm-debug.log build image docker build -t imageName/appName . push to docker hub registry to make image public docker push imageName/appName "},{"title":"Create local ubuntu server to be used on vscode","type":0,"sectionRef":"#","url":"docs/Technologies/devops/docker/createLocalServer","content":"","keywords":""},{"title":"Dockerfile​","type":1,"pageTitle":"Create local ubuntu server to be used on vscode","url":"docs/Technologies/devops/docker/createLocalServer#dockerfile","content":"FROM ubuntu:20.04 RUN export DEBIAN_FRONTEND=noninteractive \\ &amp;&amp; apt update RUN apt install -y wget \\ &amp;&amp; wget https://deb.nodesource.com/setup_14.x -O setup14.sh \\ &amp;&amp; bash setup14.sh \\ &amp;&amp; apt install -y nodejs \\ &amp;&amp; apt install -y git RUN npm i -g yarn WORKDIR /usr/src ENTRYPOINT [&quot;/bin/bash&quot;]  "},{"title":"Build image​","type":1,"pageTitle":"Create local ubuntu server to be used on vscode","url":"docs/Technologies/devops/docker/createLocalServer#build-image","content":"docker build -t server . "},{"title":"Create container​","type":1,"pageTitle":"Create local ubuntu server to be used on vscode","url":"docs/Technologies/devops/docker/createLocalServer#create-container","content":"docker run -d -t -p 1234:1234 --name=local server "},{"title":"Copy repo into container directory​","type":1,"pageTitle":"Create local ubuntu server to be used on vscode","url":"docs/Technologies/devops/docker/createLocalServer#copy-repo-into-container-directory","content":"docker cp folder local:/ "},{"title":"Open bash​","type":1,"pageTitle":"Create local ubuntu server to be used on vscode","url":"docs/Technologies/devops/docker/createLocalServer#open-bash","content":"docker exec -it local bash "},{"title":"Open in vscode​","type":1,"pageTitle":"Create local ubuntu server to be used on vscode","url":"docs/Technologies/devops/docker/createLocalServer#open-in-vscode","content":"Open vscodeClick on the bottom-left green icon (open a remote window)Click on the &quot;Remote Containers: Attach to Running ContainerClick on the container image to open (should appear if the container is running)Click on file -&gt; open folder -&gt; rootClick on file -&gt; open folder -&gt; select path to folder to open "},{"title":"Docker Compose","type":0,"sectionRef":"#","url":"docs/Technologies/devops/docker/dockercompose","content":"","keywords":""},{"title":"run docker compose​","type":1,"pageTitle":"Docker Compose","url":"docs/Technologies/devops/docker/dockercompose#run-docker-compose","content":"docker-compose up  run docker compose in detach mode docker-compose up -d run custom docker compose file docker-compose -f my-docker-compose-file.yml up  "},{"title":"stop docker compose​","type":1,"pageTitle":"Docker Compose","url":"docs/Technologies/devops/docker/dockercompose#stop-docker-compose","content":"docker-compose down  stop custom docker compose file docker-compose -f my-docker-compose-file.yml down  "},{"title":"Springboot guide","type":0,"sectionRef":"#","url":"docs/Technologies/API/spring/springboot/","content":"","keywords":""},{"title":"Install springboot​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#install-springboot","content":"method 1: brew install springbootmethod 2: curl -s &quot;https://get.sdkman.io&quot; | bash source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;Install springboot sdk install springboot "},{"title":"Create new project​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#create-new-project","content":"get list of avaliable dependencies spring init --list create a new web dependency project using maven spring init --dependencies web --build maven --groupId groupName --artifactId projectName --name projectName saveAsThisFolderNamespring init -d web --build maven -g groupName -a projectName -n projectName saveAsThisFolderNamespring init -d web,data-jdbc,postgresql --build maven -g groupName -a projectName -n projectName saveAsThisFolderName "},{"title":"Inside the project​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#inside-the-project","content":""},{"title":"pom.xml​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#pomxml","content":"similar to the package.json file for JavaScriptcontains the parent library which is spring boot and the list of dependencies installed "},{"title":"src/main/resources/application.properties​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#srcmainresourcesapplicationproperties","content":"file to configure all the properties for the app and for environment specific propertiesit will be used when connected to a real database "},{"title":"src/main/resources/static/ && src/main/resources/templates/​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#srcmainresourcesstatic--srcmainresourcestemplates","content":"these are for web development related files such as html, css, javascript "},{"title":"default code in the src/main/java/.../appname/AppName.java​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#default-code-in-the-srcmainjavaappnameappnamejava","content":"package com.example.demoapi; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class DemoApiApplication { public static void main(String[] args) { SpringApplication.run(DemoApiApplication.class, args); } }  "},{"title":"create a simple class model that creates tables in the database​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#create-a-simple-class-model-that-creates-tables-in-the-database","content":""},{"title":"e.g.: src/java/.../appname/classname/ModelName.java​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#eg-srcjavaappnameclassnamemodelnamejava","content":"this will enable database to auto create a table and sequence related to this file package com.example.demoapi.student; import java.time.LocalDate; import java.time.Period; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.SequenceGenerator; import javax.persistence.Table; import javax.persistence.Transient @Entity // required for hibernate @Table // required for table in the database public class Student { @Id @SequenceGenerator(name = &quot;student_sequence&quot;, sequenceName = &quot;student_sequence&quot;, allocationSize = 1) @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;student_sequence&quot;) private Long id; private String name; private String email; private LocalDate dob; @Transient // helps to auto calculate age private Integer age; public Student() { } public Student(Long id, String name, String email, LocalDate dob) { this.id = id; this.name = name; this.email = email; this.dob = dob; } // ids are auto generated by database public Student(String name, String email, LocalDate dob) { this.name = name; this.email = email; this.dob = dob; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public LocalDate getDob() { return dob; } public void setDob(LocalDate dob) { this.dob = dob; } public Integer getAge() { return Period.between(dob, LocalDate.now()).getYears(); } public void setAge(Integer age) { this.age = age; } @Override public String toString() { return &quot;Student{&quot; + &quot;id=&quot; + id + &quot;, name='&quot; + name + '\\'' + &quot;, email='&quot; + email + '\\'' + &quot;, dob=&quot; + dob + &quot;, age=&quot; + age + '}'; } }  "},{"title":"create a service to link the database to the controller​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#create-a-service-to-link-the-database-to-the-controller","content":""},{"title":"e.g.: src/main/java/.../appname/classname/ClassNameService.java​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#eg-srcmainjavaappnameclassnameclassnameservicejava","content":"gain data access by querying in the database package com.example.demoapi.student; import java.util.List; import java.util.Objects; import java.util.Optional; import javax.transaction.Transactional; import com.example.demoapi.student.exception.BadRequestException; import com.example.demoapi.student.exception.StudentNotFoundException; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; // @Component also works, but better to be specific as this is a Service @Service // this states that StudentService needs to be instantiated (must be a spring bean) linking it to @Autowired in the controller public class StudentService { private final StudentRepository studentRepository; @Autowired // this states that StudentRepository should be autowired by being instantiated and then injected into this constructor public StudentService(StudentRepository studentRepository) { this.studentRepository = studentRepository; } // uses the built-in methods to query the database to return the JSON data public List&lt;Student&gt; getStudents() { return studentRepository.findAll(); } public void addNewStudent(Student student) { // Optional&lt;Student&gt; studentOptional = studentRepository.findStudentByEmail((student.getEmail())); // if (studentOptional.isPresent()) { Boolean existsEmail = studentRepository.selectExistsEmail(student.getEmail()); if (existsEmail) { // method 1, using default // throw new IllegalStateException(&quot;email taken&quot;); // method 2, using custom exception handler throw new BadRequestException(&quot;Email &quot; + student.getEmail() + &quot; taken&quot;); } studentRepository.save(student); } public void deleteStudent(Long studentId) { boolean exists = studentRepository.existsById(studentId); if (!exists) { // method 1, using default // throw new IllegalStateException(&quot;student with id &quot; + studentId + &quot; does not // exists&quot;); // method 2, using custom exception handler throw new StudentNotFoundException(&quot;Student with id &quot; + studentId + &quot; does not exists&quot;); } studentRepository.deleteById(studentId); } // used for put request, allows us to not have to implement JPQL query // thus can use the setters from the entity to check if update is possible // and to use setters to auto update the entity in the database @Transactional public void updateStudent(Long studentId, String name, String email) { Student student = studentRepository.findById(studentId) .orElseThrow(() -&gt; new IllegalStateException(&quot;student with id &quot; + studentId + &quot; does not exists&quot;)); // Optional&lt;Student&gt; studentOptional = studentRepository.findStudentByEmail(email); // if (studentOptional.isPresent()) { Boolean existsEmail = studentRepository.selectExistsEmail(email)); if (existsEmail) { throw new IllegalStateException(&quot;email taken&quot;); } if (name != null &amp;&amp; name.length() &gt; 0 &amp;&amp; !Objects.equals(student.getName(), name)) { student.setName(name); } if (email != null &amp;&amp; email.length() &gt; 0 &amp;&amp; !Objects.equals(student.getEmail(), email)) { student.setEmail(email); } } }  "},{"title":"create tests e.g.: src/test/java/.../appname/classname/ClassNameServiceTest.java​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#create-tests-eg-srctestjavaappnameclassnameclassnameservicetestjava","content":"package com.example.demoapi.student; import com.example.demoapi.student.exception.BadRequestException; import com.example.demoapi.student.exception.StudentNotFoundException; import static org.mockito.Mockito.never; import static org.mockito.Mockito.verify; import static org.mockito.Mockito.when; import static org.assertj.core.api.AssertionsForClassTypes.assertThat; import static org.assertj.core.api.Assertions.assertThatThrownBy; import static org.mockito.ArgumentMatchers.any; import static org.mockito.ArgumentMatchers.anyString; // use to parse in any string instead of the actual string value import static org.mockito.BDDMockito.given; import java.time.LocalDate; import java.time.Month; import java.util.Optional; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Disabled; // allow skipping of test import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.ArgumentCaptor; import org.mockito.Mock; import org.mockito.junit.jupiter.MockitoExtension; // method 2: for mocking @ExtendWith(MockitoExtension.class) // method 2: for mocking public class StudentServiceTest { // mock should be used as we have already tested respository @Mock private StudentRepository studentRepository; private StudentService underTest; // private AutoCloseable autoCloseable; // method 1: for mocking @BeforeEach void setUp() { // autoCloseable = MockitoAnnotations.openMocks(this); // method 1: for mocking underTest = new StudentService(studentRepository); } // method 1: for mocking // @AfterEach // void tearDown() throws Exception { // autoCloseable.close(); // } @Test void canGetStudents() { // when underTest.getStudents(); // then verify(studentRepository).findAll(); } @Test void canAddNewStudent() { // given Student student = new Student(&quot;Name1&quot;, &quot;name1@gmail.com&quot;, LocalDate.of(2000, Month.JANUARY, 5)); // when underTest.addNewStudent(student); // then ArgumentCaptor&lt;Student&gt; studentArgumentCaptor = ArgumentCaptor.forClass(Student.class); verify(studentRepository).save(studentArgumentCaptor.capture()); Student captureStudent = studentArgumentCaptor.getValue(); assertThat(captureStudent).isEqualTo(student); } @Test void willThrowWhenEmailIsTaken() { // given Student student = new Student(&quot;Name1&quot;, &quot;name1@gmail.com&quot;, LocalDate.of(2000, Month.JANUARY, 5)); // method 1: get actual email // given(studentRepository.selectExistsEmail(student.getEmail())).willReturn(true); // method 2: parse any string as email given(studentRepository.selectExistsEmail(anyString())).willReturn(true); // when // then assertThatThrownBy(() -&gt; underTest.addNewStudent(student)).isInstanceOf(BadRequestException.class) .hasMessageContaining(&quot;Email &quot; + student.getEmail() + &quot; taken&quot;); // our mocked studendRepository never saves anything verify(studentRepository, never()).save(any()); } @Test void canDeleteStudent() { // given long studentId = 10; given(studentRepository.existsById(studentId)).willReturn(true); // when underTest.deleteStudent(studentId); // then verify(studentRepository).deleteById(studentId); } @Test void willThrowWhenDeleteStudentNotFound() { // given long studentId = 10; given(studentRepository.existsById(studentId)).willReturn(false); // when // then assertThatThrownBy(() -&gt; underTest.deleteStudent(studentId)).isInstanceOf(StudentNotFoundException.class) .hasMessageContaining(&quot;Student with id &quot; + studentId + &quot; does not exists&quot;); verify(studentRepository, never()).deleteById(any()); } @Test void canUpdateStudent() { // given Student student = new Student(&quot;Name1&quot;, &quot;name1@gmail.com&quot;, LocalDate.of(2000, Month.JANUARY, 5)); String name = &quot;name2&quot;; String email = &quot;email2@gmail.com&quot;; // when // then student.setName(name); student.setEmail(email); assertThat(student.getName()).isEqualTo(name); assertThat(student.getEmail()).isEqualTo(email); } @Test void willThrowWhenStudentNotFound() { // given long studentId = 10; String name = &quot;name2&quot;; String email = &quot;email2@gmail.com&quot;; // when // then assertThatThrownBy(() -&gt; underTest.updateStudent(studentId, name, email)).isInstanceOf(IllegalStateException.class) .hasMessageContaining(&quot;student with id &quot; + studentId + &quot; does not exists&quot;); } @Test void willThrowWhenNewEmailIsTaken() { // given Student student = new Student(&quot;Name1&quot;, &quot;name1@gmail.com&quot;, LocalDate.of(2000, Month.JANUARY, 5)); long studentId = 10; String name = &quot;name2&quot;; String email = &quot;email2@gmail.com&quot;; // when when(studentRepository.findById(studentId)).thenReturn(Optional.of(student)); given(studentRepository.selectExistsEmail(email)).willReturn(true); // then assertThatThrownBy(() -&gt; underTest.updateStudent(studentId, name, email)).isInstanceOf(IllegalStateException.class) .hasMessageContaining(&quot;email taken&quot;); } }  might be required to add in pom.xml to support custom exception imports for tests &lt;dependency&gt; &lt;groupId&gt;javax&lt;/groupId&gt; &lt;artifactId&gt;javaee-api&lt;/artifactId&gt; &lt;version&gt;8.0.1&lt;/version&gt; &lt;/dependency&gt;  "},{"title":"create and enable restful framework by creating a class controller and linking it with the service​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#create-and-enable-restful-framework-by-creating-a-class-controller-and-linking-it-with-the-service","content":""},{"title":"e.g.: src/main/java/.../appname/classname/ClassNameController.java​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#eg-srcmainjavaappnameclassnameclassnamecontrollerjava","content":"package com.example.demoapi.student; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.PutMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(path = &quot;api/v1/student&quot;) public class StudentController { private final StudentService studentService; @Autowired // this states that StudentService should be autowired by being instantiated and then injected into this constructor public StudentController(StudentService studentService) { this.studentService = studentService; // use dependency injection instead of manually instantiating here } // enable get request http://localhost:8080/api/v1/student @GetMapping public List&lt;Student&gt; getStudents() { return studentService.getStudents(); } // enable post request http://localhost:8080/api/v1/student @PostMapping public void registerNewStudent(@RequestBody Student student) { // @RequestBody enable retrieve payload from body studentService.addNewStudent(student); } // enable delete request http://localhost:8080/api/v1/student/delete/1 @DeleteMapping(path = &quot;delete/{studentId}&quot;) public void deleteStudent(@PathVariable(&quot;studentId&quot;) Long studentId) { // @PathVariable enable retrieve parameter from path studentService.deleteStudent(studentId); } // enable put request http://localhost:8080/api/v1/student/update/1?name=Test&amp;email=test1@gmail.com @PutMapping(path = &quot;update/{studentId}&quot;) public void updateStudent(@PathVariable(&quot;studentId&quot;) Long studentId, @RequestParam(required = false) String name, @RequestParam(required = false) String email) { // @RequestParm enable retrieve of key=value parameter from path studentService.updateStudent(studentId, name, email); } }  "},{"title":"setup environment settings to connect to postgresql in src/main/resources/application.properties​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#setup-environment-settings-to-connect-to-postgresql-in-srcmainresourcesapplicationproperties","content":""},{"title":"spring.jpa.hibernate.ddl-auto values​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#springjpahibernateddl-auto-values","content":"create Hibernate first drops existing tables, then creates new tables create-drop use for test case scenarioscreate schema, add some mock data, run testsduring the test case cleanup, the schema objects are dropped, leaving an empty database validate can use in productionbut typically that should be a setting to use in quality/test environment to verify that the database scripts written or applied to database migration tool are accurateAnother reason not to use validate in production is that it could be a bottleneck during the startup process of the application, particularly if the object model is quite extensive in size or if other network related factors come into play update commonly used in developmentto automatically modify the schema to add new additions upon restartdoes not remove a column or constraint that may exist from previous executions that is no longer necessary none highly recommended to use in productionthis value effectively turns off the DDL generationit's common practice for DBAs to review migration scripts for database changes particularly if your database is shared across multiple services and applications spring.datasource.url=jdbc:postgresql://localhost:5432/databaseName spring.datasource.username= spring.datasource.password= spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.show-sql=true spring.jpa.properties.hibernate.dialet=org.hibernate.dialect.PostgreSQLDialect spring.jpa.properties.hibernate.format_sql=true // allow display of error message in the response during an error server.error.include-message=always  "},{"title":"setup environments for unit tests and use H2 database src/test/resources/application.properties​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#setup-environments-for-unit-tests-and-use-h2-database-srctestresourcesapplicationproperties","content":"paste h2 database dependency into the pom.xml file &lt;dependency&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt;  in the application.properties file spring.datasource.url=jdbc:h2://mem:db;DB_CLOSE_DELAY=-1 spring.datasource.username=sa spring.datasource.password=sa spring.datasource.driver-class-name=org.h2.Driver spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.show-sql=true spring.jpa.properties.hibernate.dialet=org.hibernate.dialect.PostgreSQLDialect spring.jpa.properties.hibernate.format_sql=true  "},{"title":"create an interface that is responsible for data access src/main/java/.../appname/classname/ClassNameRepository.java​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#create-an-interface-that-is-responsible-for-data-access-srcmainjavaappnameclassnameclassnamerepositoryjava","content":"package com.example.demoapi.student; import java.util.Optional; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.jpa.repository.Query; import org.springframework.stereotype.Repository; @Repository public interface StudentRepository extends JpaRepository&lt;Student, Long&gt; { // method 1: SELECT * FROM student WHERE email = ? // Optional&lt;Student&gt; findStudentByEmail(String email); // method 2: be more specific, the following is JPQL query and not SQL // Student refers to the Student class // @Query(&quot;SELECT s FROM Student s WHERE s.email = ?1&quot;) // Optional&lt;Student&gt; findStudentByEmail(String email); @Query(&quot;&quot; + &quot;SELECT CASE WHEN COUNT(s) &gt; 0 THEN &quot; + &quot;TRUE ELSE FALSE END &quot; + &quot;FROM Student s &quot; + &quot;WHERE s.email = ?1&quot;) Boolean selectExistsEmail(String email); }  "},{"title":"unit test for interface src/test/java/.../appname/classname/ClassNameRepositoryTest.java​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#unit-test-for-interface-srctestjavaappnameclassnameclassnamerepositorytestjava","content":"Not using the test configurations (not recommended) package com.example.demoapi.student; import java.time.LocalDate; import static java.time.Month.*; import org.junit.jupiter.api.AfterEach; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase; import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest; import static org.assertj.core.api.AssertionsForClassTypes.assertThat; @DataJpaTest // required for test to pass @AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE) // required for test to pass public class StudentRepositoryTest { @Autowired private StudentRepository underTest; @AfterEach void tearDown() { underTest.deleteAll(); } @Test void itShouldCheckIfStudentExistsEmail() { // given String email = &quot;name1@gmail.com&quot;; Student student = new Student(&quot;Name1&quot;, email, LocalDate.of(2000, JANUARY, 5)); underTest.save(student); // when Boolean expected = underTest.selectExistsEmail(email); // then assertThat(expected).isTrue(); } @Test void itShouldCheckWhenStudentEmailDoesNotExists() { // given String email = &quot;jamila@gmail.com&quot;; // when Boolean expected = underTest.selectExistsEmail(email); // then assertThat(expected).isFalse(); } }  using the test configuration (recommended) package com.example.demoapi.student; import java.time.LocalDate; import static java.time.Month.*; import org.junit.jupiter.api.AfterEach; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; // import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase; import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest; import static org.assertj.core.api.AssertionsForClassTypes.assertThat; // not required // @AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE) @DataJpaTest public class StudentRepositoryTest { @Autowired private StudentRepository underTest; @AfterEach void tearDown() { underTest.deleteAll(); } @Test void itShouldCheckIfStudentExistsEmail() { // given String email = &quot;name1@gmail.com&quot;; Student student = new Student(&quot;Name1&quot;, email, LocalDate.of(2000, JANUARY, 5)); underTest.save(student); // when Boolean expected = underTest.selectExistsEmail(email); // then assertThat(expected).isTrue(); } @Test void itShouldCheckWhenStudentEmailDoesNotExists() { // given String email = &quot;jamila@gmail.com&quot;; // when Boolean expected = underTest.selectExistsEmail(email); // then assertThat(expected).isFalse(); } }  "},{"title":"create a config file that seeds the table contents src/main/java/.../appname/classname/ClassNameConfig.java​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#create-a-config-file-that-seeds-the-table-contents-srcmainjavaappnameclassnameclassnameconfigjava","content":"package com.example.demoapi.student; import java.time.LocalDate; import java.time.Month; import java.util.List; import org.springframework.boot.CommandLineRunner; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class StudentConfig { @Bean CommandLineRunner commandLineRunner(StudentRepository repository) { return args -&gt; { Student studentA = new Student(&quot;Name1&quot;, &quot;name1@gmail.com&quot;, LocalDate.of(2000, Month.JANUARY, 5)); Student studentB = new Student(&quot;Name2&quot;, &quot;name2@gmail.com&quot;, LocalDate.of(2004, Month.FEBRUARY, 10)); repository.saveAll(List.of(studentA, studentB)); }; } }  "},{"title":"Create custom error exception handlers​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#create-custom-error-exception-handlers","content":""},{"title":"src/main/java/.../appname/classname/exception/TypeNameException.java​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#srcmainjavaappnameclassnameexceptiontypenameexceptionjava","content":"package com.example.demoapi.student.exception; import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.ResponseStatus; @ResponseStatus(HttpStatus.BAD_REQUEST) public class BadRequestException extends RuntimeException { public BadRequestException(String msg) { super(msg); } }  "},{"title":"src/main/java/.../appname/classname/exception/TypeNameException.java​","type":1,"pageTitle":"Springboot guide","url":"docs/Technologies/API/spring/springboot/#srcmainjavaappnameclassnameexceptiontypenameexceptionjava-1","content":"package com.example.demoapi.student.exception; import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.ResponseStatus; @ResponseStatus(HttpStatus.NOT_FOUND) public class StudentNotFoundException extends RuntimeException { public StudentNotFoundException(String msg) { super(msg); } }  "},{"title":"Minikube","type":0,"sectionRef":"#","url":"docs/Technologies/devops/kubernetes/minikube","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Minikube","url":"docs/Technologies/devops/kubernetes/minikube#installation","content":"Install brew install minikube verify minikube version "},{"title":"Commands​","type":1,"pageTitle":"Minikube","url":"docs/Technologies/devops/kubernetes/minikube#commands","content":""},{"title":"Check status​","type":1,"pageTitle":"Minikube","url":"docs/Technologies/devops/kubernetes/minikube#check-status","content":"minikube status "},{"title":"Start cluster​","type":1,"pageTitle":"Minikube","url":"docs/Technologies/devops/kubernetes/minikube#start-cluster","content":"minikube start on local, use virtual box instead of docker driver minikube start --driver=virtualbox verify if cluster is up and running kubectl get nodes "},{"title":"Pause cluster​","type":1,"pageTitle":"Minikube","url":"docs/Technologies/devops/kubernetes/minikube#pause-cluster","content":"minikube pause "},{"title":"Unpause cluster​","type":1,"pageTitle":"Minikube","url":"docs/Technologies/devops/kubernetes/minikube#unpause-cluster","content":"minikube unpause "},{"title":"Stop cluster​","type":1,"pageTitle":"Minikube","url":"docs/Technologies/devops/kubernetes/minikube#stop-cluster","content":"minikube stop "},{"title":"Increase the default memory limit (requires a restart)​","type":1,"pageTitle":"Minikube","url":"docs/Technologies/devops/kubernetes/minikube#increase-the-default-memory-limit-requires-a-restart","content":"minikube config set memory 16384 "},{"title":"Browse the catalog of easily installed Kubernetes services​","type":1,"pageTitle":"Minikube","url":"docs/Technologies/devops/kubernetes/minikube#browse-the-catalog-of-easily-installed-kubernetes-services","content":"minikube addons list Enable addon​ minikube addons enable addonname Disable addon​ minikube addons disable addonname Run addon​ dashboard addon example minikube dashboard "},{"title":"Create a second cluster running an older Kubernetes release​","type":1,"pageTitle":"Minikube","url":"docs/Technologies/devops/kubernetes/minikube#create-a-second-cluster-running-an-older-kubernetes-release","content":"minikube start -p aged --kubernetes-version=v1.16.1 "},{"title":"Delete all of the minikube clusters​","type":1,"pageTitle":"Minikube","url":"docs/Technologies/devops/kubernetes/minikube#delete-all-of-the-minikube-clusters","content":"minikube delete --all "},{"title":"Deploy applications​","type":1,"pageTitle":"Minikube","url":"docs/Technologies/devops/kubernetes/minikube#deploy-applications","content":"deploy app kubectl create -f filename.yaml expose deployment as a service kubectl expose deployment appname --type=NodePort access service minikube service appname "},{"title":"List all services​","type":1,"pageTitle":"Minikube","url":"docs/Technologies/devops/kubernetes/minikube#list-all-services","content":"minikube service list "},{"title":"Flowchart Symbols","type":0,"sectionRef":"#","url":"docs/Technologies/flowCharts/","content":"Flowchart Symbols","keywords":""},{"title":"Send a one time request from a content script or popup script to the background page","type":0,"sectionRef":"#","url":"docs/Technologies/frontend/chromeExtension/","content":"Send a one time request from a content script or popup script to the background page can be responsed by callback or http request // Content Script or Popup chrome.runtime.sendMessage({greeting: &quot;hello&quot;}, (response) =&gt; { console.log(response.farewell); }); // Background Page chrome.runtime.onMessage.addListener((request, sender, sendResponse) =&gt; { if (request.greeting === &quot;hello&quot;) sendResponse({farewell: &quot;goodbye&quot;}); }); Another way of doing is similar to the WebSocket architectuure Long-Lived Connection does not allow you to get statues on how your messages went, but are very efficientthus can post messages back and forth between different components // Create a port const port = chrome.runtime.connect({name: &quot;knockknock&quot;}); // Post a message to port port.postMessage({joke: &quot;Knock knock&quot;}); // Listen for messages port.onMessage.addListener((msg) =&gt; { if (msg.question === &quot;Who's there?&quot;) port.postMessage({answer: &quot;Madame&quot;}); else if (msg.question === &quot;Madame who?&quot;) port.postMessage({answer: &quot;Madame... Bovary&quot;}); }); Use background page as your redux store import {wrapStore} from &quot;react-chrome-redux&quot;; // the redux store import store from &quot;./store&quot;; // connect store with proxy stores in UI pages wrapStore(store, { portName: &quot;example-port&quot;, }); in Popup page, create a proxy store import {Store} from &quot;react-chrome-redux&quot;; import {Provider} from &quot;react-redux&quot;; // create proxy store (same API as redux store) const proxyStore = new Store({ portName: &quot;example-port&quot;, }); // use like normal redux store render(&lt;Provider store={proxyStore}&gt;&lt;/Provider&gt;, appNode); ","keywords":""},{"title":"Service Worker","type":0,"sectionRef":"#","url":"docs/Technologies/frontend/progressiveWebApp/serviceWorker/","content":"","keywords":""},{"title":"Definition​","type":1,"pageTitle":"Service Worker","url":"docs/Technologies/frontend/progressiveWebApp/serviceWorker/#definition","content":"A JS script that gets registered with the browserstays registered with the browser even when offlinedata can still be used despite internet being disconnectedcan load content even with no connectionthey cannot directly access the DOM instead, it communicate with the pages it controls by responding to messages sent by the post message interfacethese pages can manipulate the DOM if needed it is a programmable network proxy allows you to control how network requests from your page are handled it gets terminated when not being used and gets restarted when they are needed again makes use of ES6 promisesrequires HTTPS unless on localhost "},{"title":"Normal request / response​","type":1,"pageTitle":"Service Worker","url":"docs/Technologies/frontend/progressiveWebApp/serviceWorker/#normal-request--response","content":"web browser &gt; remote serverbrowser fetches data, remote server returns data "},{"title":"With Service Worker​","type":1,"pageTitle":"Service Worker","url":"docs/Technologies/frontend/progressiveWebApp/serviceWorker/#with-service-worker","content":"web browser &gt; service worker &gt; remote serverservice worker acts as a middleman and can intercept request it will then decide what should happend after intercepting the request such as decide whether to show the remote version or offline version "},{"title":"Use Cases​","type":1,"pageTitle":"Service Worker","url":"docs/Technologies/frontend/progressiveWebApp/serviceWorker/#use-cases","content":"most commonly used for offline browsing &amp; caching assets &amp; API callspush notifications (Push &amp; Notification API) are also a big part of service workers these are notifcations that will pop up on your desktop or mobile device good for marketing and advertising background data sync / preload isn't yet fully supported for all browsersa new API that lets you defer actions until the user has a stable connection e.g.: a user likes a post on a social network, in this case, a request needs to be sent to a server, which isn't possible due to the unstable connectionby using this browser sync API, it allows such action to be deferred or put on hold in the cache until connectivity is restored then the post will get liked used in Progressive Web Apps "},{"title":"Service Worker Lifecycle & Events​","type":1,"pageTitle":"Service Worker","url":"docs/Technologies/frontend/progressiveWebApp/serviceWorker/#service-worker-lifecycle--events","content":"Register -&gt; Install -&gt; Activate 1st step is to register the worker2nd install it by triggering the install event3rd activate it by triggering the activate eventthen it can receive message events and functional events e.g.: fetch (events), push (notifications), sync (background sync API) "},{"title":"Using Formik as forms example","type":0,"sectionRef":"#","url":"docs/Technologies/frontend/react/Forms/Formik/","content":"","keywords":""},{"title":"Install dependecies​","type":1,"pageTitle":"Using Formik as forms example","url":"docs/Technologies/frontend/react/Forms/Formik/#install-dependecies","content":""},{"title":"must have​","type":1,"pageTitle":"Using Formik as forms example","url":"docs/Technologies/frontend/react/Forms/Formik/#must-have","content":"formikyupreact-input-masklodash "},{"title":"for styles​","type":1,"pageTitle":"Using Formik as forms example","url":"docs/Technologies/frontend/react/Forms/Formik/#for-styles","content":"react-perfect-scrollbar@material-ui/core "},{"title":"for tests​","type":1,"pageTitle":"Using Formik as forms example","url":"docs/Technologies/frontend/react/Forms/Formik/#for-tests","content":"enzyme "},{"title":"React Router Dom","type":0,"sectionRef":"#","url":"docs/Technologies/frontend/react/react-router-dom/","content":"","keywords":""},{"title":"Use Params​","type":1,"pageTitle":"React Router Dom","url":"docs/Technologies/frontend/react/react-router-dom/#use-params","content":"setting params in path with router import React from &quot;react&quot;; import {BrowserRouter as Router, Switch, Route} from &quot;react-router-dom&quot;; import Component from &quot;./Component&quot;; export default () =&gt; { return ( &lt;Router&gt; &lt;Switch&gt; &lt;Route exact path=&quot;/:paramName&quot; component={Component} /&gt; &lt;/Switch&gt; &lt;/Router&gt; ); };  retrieve params with old method import React from &quot;react&quot;; export default (props) =&gt; { const {paramName} = props.match.params; return &lt;&gt;&lt;/&gt;; };  retrieve params with useParams() import React from &quot;react&quot;; import {useParams} from &quot;react-router-dom&quot;; export default () =&gt; { const {paramName} = useParams(); return &lt;&gt;&lt;/&gt;; };  "},{"title":"Use history​","type":1,"pageTitle":"React Router Dom","url":"docs/Technologies/frontend/react/react-router-dom/#use-history","content":"go back 1 page import React from &quot;react&quot;; import {useHistory} from &quot;react-router-dom&quot;; export default () =&gt; { const history = useHistory(); const handleGoBack = () =&gt; { history.goBack(); }; return &lt;div onClick={handleGoBack}&gt;go back&lt;/div&gt;; };  redirect to a page import React from &quot;react&quot;; import {useHistory} from &quot;react-router-dom&quot;; export default () =&gt; { const history = useHistory(); const handleRedirect = () =&gt; { history.push(&quot;/path&quot;); }; return &lt;div onClick={handleRedirect}&gt;redirect&lt;/div&gt;; };  add state when redirecting import React from &quot;react&quot;; import {useHistory} from &quot;react-router-dom&quot;; export default () =&gt; { const history = useHistory(); const handleRedirect = () =&gt; { history.push(&quot;/path&quot;, state); }; return &lt;div onClick={handleRedirect}&gt;redirect&lt;/div&gt;; };  retrieve state after redirect import React from &quot;react&quot;; export default (props) =&gt; { const stateArr = props.history.location.state; // returns state in an array return &lt;&gt;&lt;/&gt;; };  "},{"title":"Private route​","type":1,"pageTitle":"React Router Dom","url":"docs/Technologies/frontend/react/react-router-dom/#private-route","content":"old method // creating a private route import React from &quot;react&quot;; import { Route, Redirect } from &quot;react-router-dom&quot;; import { connect } from &quot;react-redux&quot;; const PrivateRoute = ({ component: Component, redirectPath, loading, isAuthenticated, ...rest }) =&gt; ( &lt;Route {...rest} render={props =&gt; { if (loading) return &lt;div&gt;loading...&lt;/div&gt; else if (!isAuthenticated) return &lt;Redirect to=`${redirectPath}` /&gt;; else return &lt;Component {...props} /&gt;; }} /&gt; ); const mapStateToProps = state =&gt; ({ loading: state.reducer.loading, isAuthenticated: state.reducer.isAuthenticated, }); export default connect(mapStateToProps)(PrivateRoute);  using hooks method // creating a private route import React from &quot;react&quot;; import {useSelector} from &quot;react-redux&quot;; import {Route, useHistory} from &quot;react-router-dom&quot;; export default ({component: Component, redirectPath, ...rest}) =&gt; { const {loading, isAuthenticated} = useSelector((state) =&gt; state.reducer); const history = useHistory(); return ( &lt;Route {...rest} render={(props) =&gt; { if (loading) return &lt;div&gt;loading...&lt;/div&gt;; else if (!isAuthenticated) return history.push(`${redirectPath}`); else return &lt;Component {...props} /&gt;; }} /&gt; ); };  // using private route import React from &quot;react&quot;; import {Route} from &quot;react-router-dom&quot;; import PrivateRoute from &quot;./PrivateRoute&quot;; import Component from &quot;./Component&quot;; export default () =&gt; ( &lt;div&gt; &lt;PrivateRoute exact path=&quot;/path&quot; component={Component} redirectPath=&quot;/redirectpath&quot; /&gt; &lt;/div&gt; );  "},{"title":"Required dependencies","type":0,"sectionRef":"#","url":"docs/Technologies/frontend/react/react-router-dom/example/","content":"Required dependencies reactreact-route-domenzyme (for testing)","keywords":""},{"title":"Requires the following libraries","type":0,"sectionRef":"#","url":"docs/Technologies/frontend/react/redux/reduxSaga/","content":"Requires the following libraries reactreduxreact-reduxlodashreact-toastify (only if using toast)redux-saga-test-planredux-sagaimmerenzymejest","keywords":""},{"title":"Reducer in redux","type":0,"sectionRef":"#","url":"docs/Technologies/frontend/react/redux/reduxThunk/reducer","content":"","keywords":""},{"title":"Set initial state​","type":1,"pageTitle":"Reducer in redux","url":"docs/Technologies/frontend/react/redux/reduxThunk/reducer#set-initial-state","content":"const initialState = { state1: &quot;&quot;, event: &quot;&quot;, };  "},{"title":"Create reducer​","type":1,"pageTitle":"Reducer in redux","url":"docs/Technologies/frontend/react/redux/reduxThunk/reducer#create-reducer","content":"export default (state = initialState, action) =&gt; { switch (action.type) { case &quot;GET_EVENT&quot;: return { ...state, event: action.payload, }; default: return state; } };  using functions to clean reducer code import * as actionTypes from &quot;./types&quot;; // import types to prevent manual declaration const getEvent = (state, action) =&gt; { return { ...state, event: action.payload, }; }; export default (state = initialState, action) =&gt; { switch (action.type) { case &quot;GET_EVENT&quot;: // method 1: manual declaration of type return getEvent(state, action); case actionTypes.GET_EVENT: // method 2: import type return getEvent(state, action); default: return state; } };  "},{"title":"ASP.NET CORE terminal guide","type":0,"sectionRef":"#","url":"docs/Technologies/fullstack/aspDotNetCore_SDK","content":"","keywords":""},{"title":"Create a new webapi​","type":1,"pageTitle":"ASP.NET CORE terminal guide","url":"docs/Technologies/fullstack/aspDotNetCore_SDK#create-a-new-webapi","content":"dotnet new webapi -n appName.API "},{"title":"Run project​","type":1,"pageTitle":"ASP.NET CORE terminal guide","url":"docs/Technologies/fullstack/aspDotNetCore_SDK#run-project","content":"dotnet run "},{"title":"Run project with auto update​","type":1,"pageTitle":"ASP.NET CORE terminal guide","url":"docs/Technologies/fullstack/aspDotNetCore_SDK#run-project-with-auto-update","content":"dotnet watch run "},{"title":"Connect and Manage database​","type":1,"pageTitle":"ASP.NET CORE terminal guide","url":"docs/Technologies/fullstack/aspDotNetCore_SDK#connect-and-manage-database","content":"requires installation of &quot;dotnet-ef&quot; dotnet tool install --global dotnet-ef view help dotnet ef -h add migration requires installation of nuget packages, install via nuget in project &quot;Microsoft.EntityFrameworkCore&quot; &quot;Microsoft.EntityFrameworkCore.Design&quot; * &quot;Microsoft.EntityFrameworkCore.NameOfSqlDatabase&quot; -&gt; eg &quot;Microsoft.EntityFrameworkCore.Sqlite&quot; dotnet ef migrations add MigrationName remove migration dotnet ef migrations remove MigrationName "},{"title":"Apply Migration​","type":1,"pageTitle":"ASP.NET CORE terminal guide","url":"docs/Technologies/fullstack/aspDotNetCore_SDK#apply-migration","content":"dotnet ef database update "},{"title":"Machine Learning Basics","type":0,"sectionRef":"#","url":"docs/Technologies/machine_learning/","content":"","keywords":""},{"title":"data collection​","type":1,"pageTitle":"Machine Learning Basics","url":"docs/Technologies/machine_learning/#data-collection","content":"primary objective is to identify and gather data we intend to use for machine learning check data accuracy "},{"title":"data exploration​","type":1,"pageTitle":"Machine Learning Basics","url":"docs/Technologies/machine_learning/#data-exploration","content":"the process of describing, visualizing, and analyzing data in order to better understand it allows us to answer questions such as how many rows and columns are in the datawhat type of data do we haveare there missing, inconsistent or duplicate values in the data "},{"title":"data preparation​","type":1,"pageTitle":"Machine Learning Basics","url":"docs/Technologies/machine_learning/#data-preparation","content":"the process of making sure that our data (by modifying it) is suitable for the machine learning approach that we choose to use check for missing data (changes in data, human error, bias, lack of reliable input)normalizing data: ensures that values share a common property involves scaling data to fall within a small or specified rangeoften required, reduces complexity, improves interpretability sampling data: the process of selecting a subset of the instances in a dataset as a proxy for the wholeoriginal dataset is referred to as population, subset is sample dimensionality reduction: the process of reducing the number of features in a dataset prior to modeling helps to reduce time and storage required to process dataimproves data visualization and model interpretability reduces complexity and helps avoid the curse of dimensionalityfeature selection: the process of identifying the minimal set of features needed to build a good modelalso known as variable subset selection feature extraction: use of mathematical functions to transform high-dimensional data into lower dimensionalso known as feature projection "},{"title":"modeling​","type":1,"pageTitle":"Machine Learning Basics","url":"docs/Technologies/machine_learning/#modeling","content":"involves choosing and applying the appropriate machine learning approach that works well with the data we have and solves the problem that we intend to solve in supervised ML: objective is to build a model that maps a given input (which we call the independent variables) to the given output (which we call the dependent variable) depending on the nature of the dependent variable, problem can be either be called Classification or Regression Classification: if dependent variable is a categorical value (e.g.: color, yes or no, the weather)Regression: if we intend to predict a continuous value (e.g.: age, income, temperature) ml algo that solves only regression logistic regression, simple linear regression, multiple linear regression, poisson regression, polynomial regression ML algo that can solve both Classification and regression problems descision tree, Naive Bayes, neural networks, k-nearest neighbors, support vector machines "},{"title":"evaluation​","type":1,"pageTitle":"Machine Learning Basics","url":"docs/Technologies/machine_learning/#evaluation","content":"after training a ML model, important to see how well suited it is to the problem at handin order to get an unbiased evaluation of the performance of our model, we must train the model with a different dataset (training data, and test data) from the one we use to evaluate it "},{"title":"actionable insight​","type":1,"pageTitle":"Machine Learning Basics","url":"docs/Technologies/machine_learning/#actionable-insight","content":""},{"title":"Redux store","type":0,"sectionRef":"#","url":"docs/Technologies/frontend/react/redux/reduxThunk/store","content":"","keywords":""},{"title":"Basic redux​","type":1,"pageTitle":"Redux store","url":"docs/Technologies/frontend/react/redux/reduxThunk/store#basic-redux","content":""},{"title":"Installation​","type":1,"pageTitle":"Redux store","url":"docs/Technologies/frontend/react/redux/reduxThunk/store#installation","content":"npm i redux or yarn add redux "},{"title":"Store creation, subscription, utilization​","type":1,"pageTitle":"Redux store","url":"docs/Technologies/frontend/react/redux/reduxThunk/store#store-creation-subscription-utilization","content":"Import required tools from redux, actions, and reducers​ import {createStore, combineReducers} from &quot;redux&quot;; // combineReducers only required if have multiple reducers import {name1Action} from &quot;./name1Action.js&quot;; import {name2Action} from &quot;./name2Action.js&quot;; import {name1Reducer} from &quot;./name1Reducer.js&quot;; import {name2Reducer} from &quot;./name2Reducer.js&quot;;  Create store​ 1 reducer const store = createStore(name1Reducer);  multiple reducers const store = createStore( combineReducers({ name1Reducer, name2Reducer, }) );  Subscribe store​ subscribe monitors changes of state to update the UI store.subscribe(() =&gt; { // can print state here if needed console.log(store.getState()); });  Utilize store through dispatching actions​ store.dispatch(name1Action(arg1)); // action must be called be (), add arg value if available  "},{"title":"React Redux​","type":1,"pageTitle":"Redux store","url":"docs/Technologies/frontend/react/redux/reduxThunk/store#react-redux","content":""},{"title":"Installation​","type":1,"pageTitle":"Redux store","url":"docs/Technologies/frontend/react/redux/reduxThunk/store#installation-1","content":"basic installationnpm i redux react-redux or yarn add redux react-reduxInstall redux-thunk if needed to handle async actionsnpm i redux react-redux redux-thunk or yarn add redux react-redux redux-thunkInstall redux devtools extension to enable devtools support without using the basic redux method (optional)npm i redux react-redux redux-thunk redux-devtools-extension or yarn add redux react-redux redux-thunk redux-devtools-extension "},{"title":"Store creation and utilization​","type":1,"pageTitle":"Redux store","url":"docs/Technologies/frontend/react/redux/reduxThunk/store#store-creation-and-utilization","content":"create a store.js file anywhere in the src folder Import createStore from redux, and reducers​ // combineReducers only required if have multiple reducers // applyMiddleware only required if using redux-thunk middleware // compose only required if using the method to enable redux devtools import {createStore, combineReducers, applyMiddleware, compose} from &quot;redux&quot;; import thunk from &quot;redux-thunk&quot;; // import only if required import {composeWithDevTools} from &quot;redux-devtools-extension/developmentOnly&quot;; // required if not using compose import {name1Reducer} from &quot;./name1Reducer.js&quot;; import {name2Reducer} from &quot;./name2Reducer.js&quot;;  Create store​ 1 reducer export default createStore(name1Reducer);  multiple reducers export default createStore( combineReducers({ name1Reducer, name2Reducer, }) );  apply basic thunk middleware export default createStore( combineReducers({ name1Reducer, name2Reducer, }), applyMiddleware(thunk) );  enable thunk with redux devtools using default method from redux library export default createStore( combineReducers({ name1Reducer, name2Reducer, }), compose( applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) =&gt; f ) );  enable thunk with redux devtools using external library // May optionally specify it to hydrate the state from the server in universal apps // or to restore a previously serialized user session. // If produced reducer with combineReducers, this must be a plain object with the same shape as the keys passed to it. // Otherwise, free to pass anything that the reducer can understand. const initialState = {}; // enable multiple middlewares const middleware = [thunk]; // A reducing function that returns the next state tree, given the current state tree and an action to handle const reducers = combineReducers({ name1Reducer, name2Reducer, }); // may optionally specify it to enhance the store with third-party capabilities // such as middleware, time travel, persistence, etc. const enhancer = composeWithDevTools(applyMiddleware(...middleware)); const store = createStore(reducers, initialState, enhancer); export default store;  Utilize store at the root of the react app​ import React from &quot;react&quot;; import {Provider} from &quot;react-redux&quot;; import store from &quot;./store&quot;; function App() { return ( &lt;Provider store={store}&gt; &lt;div&gt;&lt;/div&gt; &lt;/Provider&gt; ); } export default App;  "},{"title":"Using redux in components","type":0,"sectionRef":"#","url":"docs/Technologies/frontend/react/redux/reduxThunk/usingReduxInComponents","content":"","keywords":""},{"title":"Old method (works for class or functional components)​","type":1,"pageTitle":"Using redux in components","url":"docs/Technologies/frontend/react/redux/reduxThunk/usingReduxInComponents#old-method-works-for-class-or-functional-components","content":"everything in 1 file import React from &quot;react&quot;; import {connect} from &quot;react-redux&quot;; import {name1Action} from &quot;./nameAction&quot;; function App({count, doAction}) { return ( &lt;&gt; &lt;button onClick={doAction}&gt;DoSomething&lt;/button&gt; &lt;span&gt;{count}&lt;/span&gt; &lt;/&gt; ); } function mapStateToProps(state) { return { count: state.nameReducer.count, // nameReducer required if using combineReducers }; } // method 1, Manually Injecting dispatch function mapDispatchToProps(dispatch, ownProps) { return { doAction: () =&gt; { dispatch(name1Action()); }, }; } // method 2, using object shorthand, Each field of the mapDispatchToProps object is assumed to be an action creator // component will no longer receive dispatch as a prop const mapDispatchToProps = { doAction: () =&gt; name1Action(), }; export default connect(mapStateToProps, mapDispatchToProps)(App);  using containers component import React from &quot;react&quot;; export default function App({count, doAction}) { return ( &lt;&gt; &lt;button onClick={doAction}&gt;DoSomething&lt;/button&gt; &lt;span&gt;{count}&lt;/span&gt; &lt;/&gt; ); } container import React from &quot;react&quot;; import {connect} from &quot;react-redux&quot;; import App from &quot;./App&quot;; import {name1Action} from &quot;./nameAction&quot;; function mapStateToProps(state) { return { count: state.nameReducer.count, // nameReducer required if using combineReducers }; } // method 1, Manually Injecting dispatch function mapDispatchToProps(dispatch, ownProps) { return { doAction: () =&gt; { dispatch(name1Action()); }, }; } // method 2, using object shorthand, Each field of the mapDispatchToProps object is assumed to be an action creator // component will no longer receive dispatch as a prop const mapDispatchToProps = { doAction: () =&gt; name1Action(), }; export default connect(mapStateToProps, mapDispatchToProps)(App);  "},{"title":"New method, using hooks from react-redux library​","type":1,"pageTitle":"Using redux in components","url":"docs/Technologies/frontend/react/redux/reduxThunk/usingReduxInComponents#new-method-using-hooks-from-react-redux-library","content":"import React from &quot;react&quot;; import {useSelector, useDispatch, shallowEqual} from &quot;react-redux&quot;; import {name1Action} from &quot;./nameAction&quot;; export default () =&gt; { const count = useSelector((state) =&gt; state.counterReducer.count); // get props from reducer const count2 = useSelector( (state) =&gt; state.counterReducer.count2, shallowEqual ); // get and compare current value with previous value const dispatch = useDispatch(); // enable dispatch for actions return ( &lt;&gt; &lt;button onClick={() =&gt; dispatch(name1Action())}&gt;DoSomething&lt;/button&gt; &lt;span&gt;{count}&lt;/span&gt; &lt;/&gt; ); };  "},{"title":"Linux terminal commands","type":0,"sectionRef":"#","url":"docs/Technologies/others/linux","content":"","keywords":""},{"title":"linux is case-sensitive​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#linux-is-case-sensitive","content":""},{"title":"Current directory​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#current-directory","content":". "},{"title":"Previous directory​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#previous-directory","content":".. "},{"title":"Home directory​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#home-directory","content":"~ "},{"title":"Root directory​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#root-directory","content":"/ "},{"title":"Check present working directory​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#check-present-working-directory","content":"pwd "},{"title":"Show list of folders and files​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#show-list-of-folders-and-files","content":"lsls -a also display hidden folders and files "},{"title":"Change directory​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#change-directory","content":"cd .. go back 1 directorycd &lt;folderName&gt; change to folderName directory "},{"title":"Make directory​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#make-directory","content":"mkdir &lt;newFolderName&gt;mkdir &lt;newFolderName&gt; &lt;newFolderName2&gt; &lt;newFolderName3&gt; create multiple directoriesmkdir -p &lt;newFolderName/newFolderName2/newFolderName3&gt; create nested directories "},{"title":"Create new file​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#create-new-file","content":"touch &lt;newFileName&gt; "},{"title":"Remove directory (can only remove empty directory)​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#remove-directory-can-only-remove-empty-directory","content":"rmdir &lt;folderName&gt; "},{"title":"Remove file and/or folder​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#remove-file-andor-folder","content":"rm &lt;filename&gt; only for filesrm -r &lt;folderName&gt; remove current and nested foldersrm -rf &lt;folderName&gt; remove current and nested folders and files "},{"title":"Copy file and/or folder​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#copy-file-andor-folder","content":"cp &lt;filename&gt; only for 1 filecp -r &lt;folderName&gt; for folders, nested folders and files "},{"title":"Move or rename folder or file​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#move-or-rename-folder-or-file","content":"mv &lt;oldFilename&gt; &lt;newFilename&gt; or mv &lt;oldFilePath&gt; &lt;newFilePath&gt; "},{"title":"Print file contents​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#print-file-contents","content":"cat &lt;filename&gt; "},{"title":"Search through text in a file​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#search-through-text-in-a-file","content":"grep &quot;&lt;text&gt;&quot; &lt;filename&gt; "},{"title":"Append the output of a command to a file (file will be created if it does not exist)​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#append-the-output-of-a-command-to-a-file-file-will-be-created-if-it-does-not-exist","content":"&lt;cmd&gt; &gt;&gt; &lt;filename&gt; "},{"title":"Overwrite output of a command to a file (Output redirection, file will be created if it does not exist)​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#overwrite-output-of-a-command-to-a-file-output-redirection-file-will-be-created-if-it-does-not-exist","content":"&lt;cmd&gt; &gt; &lt;filename&gt; "},{"title":"Direct output of a command to another command​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#direct-output-of-a-command-to-another-command","content":"&lt;cmd1&gt; | &lt;cmd2&gt; cmd2 will use cmd1 output to execute "},{"title":"Input redirection​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#input-redirection","content":"&lt;cmd&gt; &lt; &lt;file&gt; file will be fed into the command and then runned ex: &lt;sendingEmailCommand&gt; &lt; &lt;fileToBeAttached&gt; "},{"title":"Sort text in a file​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#sort-text-in-a-file","content":"sort &lt;file&gt; sort by ascending ordersort -r &lt;file&gt; sort by descending order "},{"title":"Print unique text in a file (file contents must be sorted first)​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#print-unique-text-in-a-file-file-contents-must-be-sorted-first","content":"uniq &lt;file&gt; "},{"title":"Temporarily replace or substitute string in a file and prints the file contents​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#temporarily-replace-or-substitute-string-in-a-file-and-prints-the-file-contents","content":"sed &quot;s/&lt;oldString&gt;/&lt;newString&gt;/&quot; &lt;file&gt; "},{"title":"Disable sudo password prompt​","type":1,"pageTitle":"Linux terminal commands","url":"docs/Technologies/others/linux#disable-sudo-password-prompt","content":"sudo visudo add the following line at the bottom {username} e.g.: myusername {username} ALL=(ALL) NOPASSWD:ALL  "},{"title":"Git tutorial","type":0,"sectionRef":"#","url":"docs/Technologies/others/gitCommands","content":"","keywords":""},{"title":"Set config values​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#set-config-values","content":"git config --global user.name &quot;My Name&quot; let collaborators know who modified the source codegit config --global user.email &quot;myemail@email.com&quot; let collaborators know the email of the person who modified the source codegit difftool --tool=&lt;toolName&gt; set external graphical diff viewing program "},{"title":"View config values​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#view-config-values","content":"git config --list "},{"title":"Get help for git commands​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#get-help-for-git-commands","content":"git help &lt;verb&gt; or git &lt;verb&gt; --help "},{"title":"Initialize a repository from existing code​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#initialize-a-repository-from-existing-code","content":"git init creates a .git folder to track changes "},{"title":"View current status of repository​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#view-current-status-of-repository","content":"git status "},{"title":"Ignore files to prevent it from being tracked by git​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#ignore-files-to-prevent-it-from-being-tracked-by-git","content":"Create a .gitignore file if it does not existWrite the filename or folders to ignore in the file .DS_Store add file*.pyc add all file that end with .pyc!test.pyc track test.pyc even though all files that end with .pyc is to be ignored/filename ONLY ignore this file in the current directory and not in other directoriesfolderName/ ignore all files in with this folderName "},{"title":"Git stages​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#git-stages","content":"Newly created or recently modified files are in the &quot;working directory&quot;Files can only be committed if recent file changes are transferred from the &quot;working directory&quot; to the &quot;staging area&quot;When files are committed, the files are transferred from the &quot;staging area&quot; to the &quot;.git directory&quot; "},{"title":"Add new file or recently modified file to the \"Staging area\"​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#add-new-file-or-recently-modified-file-to-the-staging-area","content":"git add &lt;filename&gt;git add -A stages all changes (new files, modified files, deleted files)git add . (version 1.x) stages new files and modified files only, (version 2.x) stages ALL changesgit add --ignore-removal . stages new files and modified files only (only in version 2.x)git add -u stages modified files and deleted files only "},{"title":"Remove file from \"Staging area\"​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#remove-file-from-staging-area","content":"git reset &lt;filename&gt; unstage file from the staging area (unstaged change will NOT be displayed in the history)git rm --cached &lt;filename&gt; stages the file's removal from the staging area git rm &lt;filename&gt; WARNING: this will actually delete the file from the system and stage the file's removal git reset remove all files from staging areagit reset --hard &lt;shortRepoName&gt;/&lt;branchName&gt; discards all history and changes back to the specified commit git reset --hard origin/master "},{"title":"Reference branch HEAD to different commit​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#reference-branch-head-to-different-commit","content":"git branch -f &lt;branchName&gt; &lt;commit&gt; "},{"title":"Rename or move file then add to the \"Staging area\"​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#rename-or-move-file-then-add-to-the-staging-area","content":"git mv &lt;oldFilenameOrWithPath&gt; &lt;newFilenameOrWithPath&gt; "},{"title":"Unmodify file​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#unmodify-file","content":"git checkout -- &lt;filename&gt; revert modified file to the last commit "},{"title":"Commit files from the \"Staging area\" to the \".git directory\"​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#commit-files-from-the-staging-area-to-the-git-directory","content":"git commit an editor will open to allow you to write the commit changes messagegit commit -m &quot;message about the changes made&quot; write the commit changes message directly in the terminalgit commit --amend undo and recommit new changes (ex: add forgotten files, modify commit messages) "},{"title":"Edit specific commit contents and message​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#edit-specific-commit-contents-and-message","content":"git rebase -i '&lt;commit&gt;^' the ^ will ensure the latest commit will be taken into considerationafter entering the command, a help menu will be displayed in the text editor and you need to change the specific commits to the desired command "},{"title":"Add and commit​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#add-and-commit","content":"git commit -a &quot;-a&quot; adds all new and modified files and open an editor for commentsgit commit -am &quot;message about the changes made&quot; adds all new and modified files with comments on 1 line "},{"title":"Undo commit​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#undo-commit","content":"git revert [saved hash] git will create a new commit that undoes that commit "},{"title":"View git history​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#view-git-history","content":"git loggit log --pretty=oneline or git log --oneline display one line logsgit log --graph display logs with ASCII graph showing the branch and merge history "},{"title":"Stashing to put untracked or staged files into a temporary space​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#stashing-to-put-untracked-or-staged-files-into-a-temporary-space","content":"remove from current commit and store at a temporary space git stash put back untracked or staged files to commit git stash pop "},{"title":"Cloning a remote repository​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#cloning-a-remote-repository","content":"git clone &lt;gitURL&gt; &lt;whereToClone&gt; "},{"title":"View remote information about the repository​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#view-remote-information-about-the-repository","content":"git remote -v "},{"title":"Add remote repositories​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#add-remote-repositories","content":"git remote add &lt;shortRepoName&gt; &lt;url&gt; shortRepoName is usually named as &quot;origin&quot; "},{"title":"Inspect a remote respository​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#inspect-a-remote-respository","content":"git remote show &lt;shortRepoName&gt; "},{"title":"Rename remote repository​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#rename-remote-repository","content":"git remote rename &lt;oldShortRepoName&gt; &lt;newShortRepoName&gt; "},{"title":"Remove remote repository​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#remove-remote-repository","content":"git remote remove &lt;shortRepoName&gt; "},{"title":"View all branches information in the repository​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#view-all-branches-information-in-the-repository","content":"git branch -a or git branch "},{"title":"View the differences of recently modified files in the \"working directory\" compared to the last commit​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#view-the-differences-of-recently-modified-files-in-the-working-directory-compared-to-the-last-commit","content":"git diff does not work on files that are already added to the &quot;Staging area&quot; or &quot;.git directory&quot;git diff --staged or git diff --cached view differences for files in the &quot;Staging area&quot; compared to the last commitgit difftool -y change diff to difftool to use external program, add &quot;-y&quot; to agree to launching the external program "},{"title":"Create new branch​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#create-new-branch","content":"git branch &lt;newBranchName&gt; "},{"title":"Change to a different branch​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#change-to-a-different-branch","content":"git checkout &lt;branchName&gt; "},{"title":"Create and change to the new branch​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#create-and-change-to-the-new-branch","content":"git checkout -b &lt;newBranchName&gt; "},{"title":"Delete branch​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#delete-branch","content":"git branch -d &lt;branchName&gt;git push origin --delete &lt;branchName&gt; delete branch from remote repository "},{"title":"Merge branch with current master​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#merge-branch-with-current-master","content":"git merge &lt;branchName&gt; "},{"title":"Fetch data from the server but do not merge with your client​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#fetch-data-from-the-server-but-do-not-merge-with-your-client","content":"git fetch &lt;nameOfRemoteRepository&gt; &lt;branchNameThatWeWantToGet&gt; "},{"title":"Fetch data from the server AND merge with your client​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#fetch-data-from-the-server-and-merge-with-your-client","content":"git pull &lt;nameOfRemoteRepository&gt; &lt;branchNameThatWeWantToGet&gt; usually use git pull origin master "},{"title":"Update server from the client​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#update-server-from-the-client","content":"git push &lt;nameOfRemoteRepository&gt; &lt;branchNameThatWeWantToSend&gt; usually use git push origin mastergit push -u origin &lt;branchName&gt; -u is required when pushing the branch for the FIRST time "},{"title":"Repositioning commits to the latest​","type":1,"pageTitle":"Git tutorial","url":"docs/Technologies/others/gitCommands#repositioning-commits-to-the-latest","content":"git rebase master when this is called at branch, it will reposition the branch commits to the latest master commitsgit rebase &lt;branchName&gt; when this is called at master, it will merge the branch commits as new commitsAFTER rebasing, must do a git push -f do NOT do just git push "},{"title":"SSH Guide","type":0,"sectionRef":"#","url":"docs/Technologies/others/setupSSH","content":"","keywords":""},{"title":"Check for existing SSH keys​","type":1,"pageTitle":"SSH Guide","url":"docs/Technologies/others/setupSSH#check-for-existing-ssh-keys","content":""},{"title":"MAC OS​","type":1,"pageTitle":"SSH Guide","url":"docs/Technologies/others/setupSSH#mac-os","content":"open terminal and type ```ls ~/.sshcheck if the directory has one of the following public SSH keys id_rsa.pub id_ecdsa.pub id_ed25519.pub  if none of it exist, generation of a new SSH key would be required "},{"title":"Generate a new SSH key​","type":1,"pageTitle":"SSH Guide","url":"docs/Technologies/others/setupSSH#generate-a-new-ssh-key","content":"open terminal with the following command ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot; If you are using a legacy system that doesn't support the Ed25519 algorithm, use: ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; you will get the following prompt message, just press enter to save at default file location Generating public/private ed25519 key pair. Enter file in which to save the key (/Users/yourusername/.ssh/id_ed25519):  you will get the next prompt, key is a password for easy access Enter passphrase (empty for no passphrase): Enter same passphrase again:  when completed, you will get something like the following Your identification has been saved in /Users/yourusername/.ssh/id_ed25519. Your public key has been saved in /Users/yourusername/.ssh/id_ed25519.pub. The key fingerprint is: SHA256:kgkYKGY+hjkbfcHKBVBUYVYVWbhlbfVYK your_email@example.com The key's randomart image is: +--[ED25519 256]--+ | o.+.= . | | . - o + . | | . . * . | | . + @ + | | . O - S . | | o.ooo + | | +Boo+ o | | ==E0 + . | | .oo+.. . | +----[SHA256]-----+  "},{"title":"Adding SSH key to the ssh-agent​","type":1,"pageTitle":"SSH Guide","url":"docs/Technologies/others/setupSSH#adding-ssh-key-to-the-ssh-agent","content":"start the ssh-agent in the background eval &quot;$(ssh-agent -s)&quot; you will get something like the followingAgent pid 59566modify the ~/.ssh/config file to automatically load keys into the ssh-agent and store passphrases in the keychain create file if it does not existfile contents should have something like the following Host * AddKeysToAgent yes UseKeychain yes IdentityFile ~/.ssh/id_ed25519 UseKeyChain can be omitted if passphrase was not usedif an error /Users/USER/.ssh/config: line 16: Bad configuration option: usekeychain occur add an additional line in the config file under Host IgnoreUnknown UseKeychain add SSH private key to the ssh-agent and store passphrase in the keychain, omit -K if not using passphrase ssh-add -K ~/.ssh/id_ed25519 you will be prompty with Enter passphrase for /Users/yourusername/.ssh/id_ed25519: Identity added: /Users/yourusername/.ssh/id_ed25519 (your_email@example.com)  "},{"title":"Adding a new SSH key to your server that you want to SSH to​","type":1,"pageTitle":"SSH Guide","url":"docs/Technologies/others/setupSSH#adding-a-new-ssh-key-to-your-server-that-you-want-to-ssh-to","content":"copy the SSH public key pbcopy &lt; ~/.ssh/id_ed25519.pub add and paste this value into the SSH key field in your server "},{"title":"Add server identity to your pc's known host​","type":1,"pageTitle":"SSH Guide","url":"docs/Technologies/others/setupSSH#add-server-identity-to-your-pcs-known-host","content":"you will get a prompt similar to this The authenticity of host 'someonlineserver.com (11.12.123.123)' can't be established. RSA key fingerprint is SHA256:kjlnfe7o8GBLU7o42ulgob24ofbuy. Are you sure you want to continue connecting (yes/no/[fingerprint])?  if type yes it would be added to your ~/.ssh/known_hosts file Warning: Permanently added 'github.com,11.12.123.123' (RSA) to the list of known hosts.  "},{"title":"UML (Unified Modeling Language)","type":0,"sectionRef":"#","url":"docs/Technologies/UMLdiagrams/","content":"","keywords":""},{"title":"Access modifiers​","type":1,"pageTitle":"UML (Unified Modeling Language)","url":"docs/Technologies/UMLdiagrams/#access-modifiers","content":"+ public- private# protected "},{"title":"Formats​","type":1,"pageTitle":"UML (Unified Modeling Language)","url":"docs/Technologies/UMLdiagrams/#formats","content":"underlined text static fields or methods ALL_CAPS constant fields or final italic abstract methods example: UML relations example: UML relationship "},{"title":"Association​","type":1,"pageTitle":"UML (Unified Modeling Language)","url":"docs/Technologies/UMLdiagrams/#association","content":"Once classes and attributes have been identified and placed into a diagram, the next stage is to add Associations Usually, the system is not limited to just one class, there are tens, hundreds of classes, or even moreNaturally, all these classes somehow interact with each other, somehow communicate, send messages to each other, call each other's methods, send events, and so onSo the next step after creating those classes should be the visual representation of the relationship between these classes There are different types of relationship between two classes / objects The most basic type of relationship is association which means that the two classes are somehow related to each otherwe do not yet know exactly how this relationship is expressed and are going to clarify it in the future This usually happens in the early stages of system design, when we know that there is a relationship but what specific relationship - inheritance, composition, or something else is not yet clear When designing the system more globally The association helps when we indicate that 1 class in some way interact with another classAt the initial stage, this is enough An association is a relationship in which objects of one type are somehow related to objects of another type i.e. an object of 1 type contains or somehow uses an object of another typeThe player plays in a team We do not yet know what kind of relationship they have, or we are not interested in it at this stage of the designBut we know that there is a relationship directional association the arrow shows us that we have a component that uses another component In this case the CustomService uses the CustomRepository component, and not vice versa example: Directed association "},{"title":"Inheritance​","type":1,"pageTitle":"UML (Unified Modeling Language)","url":"docs/Technologies/UMLdiagrams/#inheritance","content":" A more precise type of relationship is the public inheritance relationship (IS A Relationship) which says that everything that is true for the base class is true for its successor With its help we can get polymorphic behaviorabstract from the concrete implementation of classesdeal only with abstractions (interfaces or base classes)do not pay attention to implementation details Although inheritance is a great tool in the hands of any OOP programmer it is clearly not enough for solving all types of problemsFirstly, not all relationships between classes are defined by the &quot;is a&quot; relationshipsecondly, inheritance is the strongest relationship between 2 classes that cannot be broken at runtime this relationship is static and, in strongly typed languages, is determined at compile time in JavaScript, it has prototypal inheritance and can be changed for inherited classes properties can be changed by just changing prototypesBut this is more an exception rather than a rule Because you cannot do this in classical inheritance once inherited in the source code, at run time you will not break this connection and you will not change the base classThat is why inheritance is the strongest relationship between objects That is why architects and system designers recommend using inheritance only when it is necessary there is the concept of preferring composition over inheritance this suggests that composition can be broken at run timeand you can replace one object in the composition at runtime with another, change the behavior dynamicallyYou cannot do this with the inheritance "},{"title":"Composition and Aggregation​","type":1,"pageTitle":"UML (Unified Modeling Language)","url":"docs/Technologies/UMLdiagrams/#composition-and-aggregation","content":"When relationships between components go beyond inheritance relationships such as composition and aggregation come to our rescueThey both model a HAS-A Relationship and are usually expressed in that the class of a whole contains the fields (or properties) of its constituent parts  the diamond is always on the side of the whole, and the simple line is on the side of the componenta filled rhombus indicates a stronger bond - compositionan open rhombus indicates a weaker bond - aggregationThe difference between composition and aggregation composition: the whole explicitly controls the lifetime of its component part the part does not exist without the whole aggregation: although the whole contains its component part, their lifetimes are not related e.g.: the component part is passed via constructor parameters CompositeCustomService uses composition to manage its constituent partsAggregatedCustomService uses aggregationexplicit control of the lifetime usually leads to a higher coupling between the whole and the part since a specific type is used that closely connects the participants with each other class CompositeCustomService { // Composition private readonly repository: CustomRepository = new CustomRepository(); public doSomething() { // Usage of repository } } class AggregatedCustomService { // Aggregation private readonly repository: AbstractRepository; constructor(repository: AbstractRepository) { this.repository = repository; } public doSomething() { // Usage of repository } }  Another example of composition Let us say a bicycle is a whole part and its components (shock absorbers, wheels, handlebars) are partsa single shock absorber without a bike makes no sense An example of aggregation Suppose there is a university or a school as a whole and teachers, professors as parts, for a certain period they may be part of this university, in some period they may not be includedThey can exist without this university after the university is destroyed, that is, its lifetime is over "},{"title":"Action in redux","type":0,"sectionRef":"#","url":"docs/Technologies/frontend/react/redux/reduxThunk/action","content":"","keywords":""},{"title":"action without redux-thunk​","type":1,"pageTitle":"Action in redux","url":"docs/Technologies/frontend/react/redux/reduxThunk/action#action-without-redux-thunk","content":""},{"title":"no arguments (synchronous)​","type":1,"pageTitle":"Action in redux","url":"docs/Technologies/frontend/react/redux/reduxThunk/action#no-arguments-synchronous","content":"import * as actionTypes from &quot;./types&quot;; // import to prevent manual type declaration export const resetAction = () =&gt; { return { type: actionTypes.RESET, }; };  "},{"title":"have argument to set value (synchronous)​","type":1,"pageTitle":"Action in redux","url":"docs/Technologies/frontend/react/redux/reduxThunk/action#have-argument-to-set-value-synchronous","content":"import * as actionTypes from &quot;./types&quot;; export const setAction = (value) =&gt; { return { type: actionTypes.SET, payload: value, }; };  "},{"title":"action with redux-thunk​","type":1,"pageTitle":"Action in redux","url":"docs/Technologies/frontend/react/redux/reduxThunk/action#action-with-redux-thunk","content":""},{"title":"no arguments (asynchronous)​","type":1,"pageTitle":"Action in redux","url":"docs/Technologies/frontend/react/redux/reduxThunk/action#no-arguments-asynchronous","content":"fetch import * as actionTypes from &quot;./types&quot;; export const getAction = () =&gt; async (dispatch, getState) =&gt; { const URL = &quot;http://www.someurl.com&quot;; try { const res = await fetch(URL); const data = await res.json(); dispatch({ type: actionTypes.GET, payload: data, }); } catch (error) { doSomething(error); } };  axios import axios from &quot;axios&quot;; import * as actionTypes from &quot;../types&quot;; export const getAction = () =&gt; (dispatch, state) =&gt; { const URL = &quot;http://www.someurl.com&quot;; axios .get(URL) .then(res =&gt; { dispatch({ type: actionTypes.GET, payload: res.data, }); }) .catch(error =&gt; { doSomething(error); } };  "},{"title":"have argument to set value (asynchronous)​","type":1,"pageTitle":"Action in redux","url":"docs/Technologies/frontend/react/redux/reduxThunk/action#have-argument-to-set-value-asynchronous","content":"fetch post import * as actionTypes from &quot;./types&quot;; export const postAction = (value, token) =&gt; async (dispatch, getState) =&gt; { const URL = &quot;http://www.someurl.com&quot;; const postData = { value, }; const config = { method: &quot;POST&quot;, headers: { Accept: &quot;application/json&quot;, &quot;Content-Type&quot;: &quot;application/json&quot;, Authorization: token, // only required if needs token for authentication }, body: JSON.stringify(postData), }; try { const res = await fetch(URL, config); const data = await res.JSON(); dispatch({ type: actionTypes.POST_DATA, payload: data, }); } catch (error) { doSomething(error); } };  axios post import axios from &quot;axios&quot;; import * as actionTypes from &quot;../types&quot;; export const postAction = (value, token) =&gt; (dispatch, getState) =&gt; { const URL = &quot;http://www.someurl.com&quot;; const postData = { value, }; const config = { method: &quot;POST&quot;, headers: { &quot;Content-Type&quot;: &quot;application/json&quot;, &quot;Authorization&quot;: token, // only required if need token for authentication }, }; axios .post(URL, postData, config)) .then(res =&gt; { dispatch({ type: actionTypes.POST_DATA, payload: res.data, }); }) .catch(error =&gt; { doSomething(error); }); };  fetch put import * as actionTypes from &quot;../types&quot;; export const editData = (id, somethingToEdit) =&gt; async (dispatch) =&gt; { const URL = &quot;http://www.someurl.com&quot;; const queryURL = `/${id}`; const data = { somethingToEdit, }; const config = { method: &quot;PUT&quot;, headers: { Accept: &quot;application/json&quot;, &quot;Content-Type&quot;: &quot;application/json&quot;, }, body: JSON.stringify(data), }; try { await fetch(`${URL}${queryURL}`, config); dispatch({ type: actionTypes.EDIT_DATA, }); } catch (error) { doSomething(error); } };  axios put import axios from &quot;axios&quot;; import * as actionTypes from &quot;../types&quot;; export const editData = (id, somethingToEdit) =&gt; (dispatch, getState) =&gt; { const URL = &quot;http://www.someurl.com&quot;; const config = { method: &quot;PUT&quot;, headers: { Accept: &quot;application/json&quot;, &quot;Content-Type&quot;: &quot;application/json&quot;, }, }; const token = getState().reducer.token; if (token) { config.headers[&quot;Authorization&quot;] = `Bearer ${token}`; } axios .put(`${URL}/${id}`, {id, somethingToEdit}, config) .then((res) =&gt; { dispatch({ type: actionTypes.EDIT_DATA, payload: res.data, }); }) .catch((error) =&gt; { doSomething(error); }); };  fetch delete import * as actionTypes from &quot;../types&quot;; export const deleteData = (data_id) =&gt; async (dispatch, getState) =&gt; { const URL = &quot;http://www.someurl.com&quot;; const queryURL = `/${data_id}`; const config = { method: &quot;DELETE&quot;, headers: { &quot;Content-Type&quot;: &quot;application/json&quot;, }, }; const token = getState().reducer.token; if (token) { config.headers[&quot;Authorization&quot;] = `Bearer ${token}`; } try { await fetch(`${URL}${queryURL}`, config); dispatch({ type: actionTypes.DELETE_DATA, }); } catch (error) { doSomething(error); } };  axios delete import axios from &quot;axios&quot;; import * as actionTypes from &quot;../types&quot;; export const deleteData = (data_id) =&gt; (dispatch, getState) =&gt; { const URL = &quot;http://www.someurl.com&quot;; const config = { headers: { &quot;Content-Type&quot;: &quot;application/json&quot; } }; const token = getState().reducer.token; if (token) { config.headers[&quot;Authorization&quot;] = `Bearer ${token}`; } axios .delete(`${URL}/${data_id}`, config)) .then(res =&gt; { dispatch({ type: actionTypes.DELETE_DATA, payload: data_id }); }) .catch(error =&gt; { doSomething(error); }); };  "},{"title":"refactored actions​","type":1,"pageTitle":"Action in redux","url":"docs/Technologies/frontend/react/redux/reduxThunk/action#refactored-actions","content":""},{"title":"reusable api call​","type":1,"pageTitle":"Action in redux","url":"docs/Technologies/frontend/react/redux/reduxThunk/action#reusable-api-call","content":"fetch // data is an object const fetchCall = (url, method, data, actionType) =&gt; async (dispatch, getState) =&gt; { const getToken = getState().reducer.token; // modify this to get stored token const config = { method, headers: { Accept: &quot;application/json&quot;, &quot;Content-Type&quot;: &quot;application/json&quot;, Authorization: getToken ? `Bearer ${getToken}` : &quot;&quot;, }, body: JSON.stringify(data), }; try { const res = await fetch(`${url}`, config); const _data = await res.json(); dispatch({ type: actionType, payload: _data, }); } catch (error) { doSomething(error); } };  axios import axios from &quot;axios&quot;; // data is an object const axiosCall = (url, method, data, actionType) =&gt; (dispatch, getState) =&gt; { const getToken = getState().reducer.token; // modify this to get stored token axios({ method, url, data, headers: { &quot;Content-Type&quot;: &quot;application/json&quot;, Authorization: getToken ? `Bearer ${getToken}` : &quot;&quot;, }, }) .then((res) =&gt; { if (res.status !== 200 &amp;&amp; res.status !== 201 &amp;&amp; res.status !== 204) { throw new Error(`Something went wrong with ${methodName}`); } dispatch({ type: actionType, payload: res.data, }); }) .catch((error) =&gt; { doSomething(error); }); };  using refactored api calls import * as actionTypes from &quot;./actionTypes&quot;; const URL = &quot;http://www.someurl.com&quot;; export getData = () =&gt; { // method 1 fetchCall(`${URL}`, &quot;GET&quot;, null, actionTypes.GET_DATA); // method 2 axiosCall(`${URL}`, &quot;GET&quot;, null, actionTypes.GET_DATA); }; export postData = (data) =&gt; { // method 1 fetchCall(`${URL}`, &quot;POST&quot;, {data}, actionTypes.GET_DATA); // method 2 axiosCall(`${URL}`, &quot;POST&quot;, {data}, actionTypes.GET_DATA); };  fetch v2 /** * setup config for api request * * @name setupConfig * @function * @param {string} method http request method * @param {object} bodyData data to be parsed to the server * @param {object} getState token value stored in a reducer state, modify if using different reducer for token * @param {object} restHeaders add additional headers, ignore if not in use * @returns {object} returns the entire config file required for http request */ const setupConfig = (method, getState, bodyData, restHeaders) =&gt; { const config = { method, headers: { Accept: &quot;application/json&quot;, &quot;Content-Type&quot;: &quot;application/json&quot;, ...restHeaders, }, body: bodyData, }; // modify reducer if different let token = &quot;&quot;; if (getState().authReducer) { token = getState().authReducer.token; } if (token) { config.headers.Authorization = `Bearer ${token}`; } return config; }; /** * Enable CORS during API request * * @name enableCORS * @function * @param {string} url api URL address * @returns {string} returns the proxy url to prevent CORS error */ const enableCORS = (url) =&gt; { return `https://cors-anywhere.herokuapp.com/${url}`; }; /** * execute API request * * @name fetchCall * @function * @param {string} url api url address * @param {string} method http request method * @param {string} actionType redux types * @param {object} bodyData parse data to server, ignore if not in use * @param {object} restHeaders add addition headers, ignore if not in use */ export default function fetchCall( url, method, actionType, bodyData, restHeaders ) { return async (dispatch, getState) =&gt; { const URL = enableCORS(url); const config = setupConfig(method, getState, bodyData, restHeaders); try { const res = await fetch(URL, config); if (res.status &gt;= 200 &amp;&amp; res.status &lt; 300) { const data = await res.json(); dispatch({ type: actionType, payload: data, }); } } catch (error) { // handle error } }; }  "},{"title":"Gradle","type":0,"sectionRef":"#","url":"docs/Technologies/projectManagementTools/gradle/","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#installation","content":"brew install gradle check version gradle -v "},{"title":"Basic terminology​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#basic-terminology","content":"Project: models a software componentBuild script: contains automation instructions for a projectTask: defines executable automation instructions "},{"title":"Build logic​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#build-logic","content":"gradle defines a Domain Specific Language (DSL) 2 options Groovy DSLKotlin DSL can mix in imperative logic "},{"title":"File format​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#file-format","content":"using Groovy DSL use the .gradle extension e.g.: build.gradle print Hello world task a method call on an API available to the Gradle build script it is to express that we want to create a task for projectstring parameter helloWorld is the name of the task doLast defines the action executed at runtimeprintln is a method call provided by Groovy to print the message to standard output task helloWorld { doLast { println &quot;Hello World&quot; } } run file call function not the filename gradle helloWorld output &gt; Task :helloWorld Hello World BUILD SUCCESSFUL in 823ms 1 actionable task: 1 executed using Kotlin DSL use the .gradle.kts extension e.g.: build.gradle.kts print Hello world tasks.create(&quot;helloWorld&quot;) { doLast { println(&quot;Hello World&quot;) } } run file call function not the filename gradle helloWorld output &gt; Task :helloWorld Hello World BUILD SUCCESSFUL in 823ms 1 actionable task: 1 executed  "},{"title":"Gradle wrapper​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#gradle-wrapper","content":"it is a set of files checked into SCM alongside source codestandardizes compatible gradle version for a projectautomatically downloads the gradle distribution with defined version "},{"title":"disadvantages of not using gradle wrapper​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#disadvantages-of-not-using-gradle-wrapper","content":"gradle API can include breaking changes in between major versionsmaintaining multiple gradle installations on a developer machine is not convenient "},{"title":"benefits​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#benefits","content":"developers do not need to install gradle runtimedevelopers can check out project source code and build right awaywrapper works the same way on continuous integration servers "},{"title":"terminal command​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#terminal-command","content":"gradle wrapper creates files and directories gradle directorygradlewgradlew.bat view properties created cat gradle/wrapper/gradle-wrapper.properties output distributionBase=GRADLE_USER_HOME distributionPath=wrapper/dists distributionUrl=https\\://services.gradle.org/distributions/gradle-7.4.2-bin.zip zipStoreBase=GRADLE_USER_HOME zipStorePath=wrapper/dists run gradle wrapper instead of gradle on mac ./gradlew helloWorld "},{"title":"Build file and conventions​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#build-file-and-conventions","content":""},{"title":"Build Execution under the Hood​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#build-execution-under-the-hood","content":"evaluates instructions in build scriptscreates and configures tasksexecutes tasks in correct order "},{"title":"Single project build​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#single-project-build","content":"src -&gt; build.gradlecharacteristics resides in root directory of projectcontains all build logiccan become hard to maintain "},{"title":"Multi module build​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#multi-module-build","content":"build.gradle -&gt; module -&gt; build.gradle -&gt; module -&gt; build.gradle  maintainable, highly cohesive build logic "},{"title":"Settings file in a build​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#settings-file-in-a-build","content":"build.gradle settings.gradle -&gt; module -&gt; module  characteristics resides in root directory of project hierarchydeclares participating projectscan change defaults e.g.: project name Gradle auto derives project name from directory gradle projects output &gt; Task :projects ------------------------------------------------------------ Root project 'hello-world' ------------------------------------------------------------ Root project 'hello-world' No sub-projects To see a list of the tasks of a project, run gradle &lt;project-path&gt;:tasks For example, try running gradle :tasks BUILD SUCCESSFUL in 1s 1 actionable task: 1 executed modify project name create settings.gradle file with the following contents rootProject.name = &quot;starter-example&quot; gradle projects output &gt; Task :projects ------------------------------------------------------------ Root project 'starter-example' ------------------------------------------------------------ Root project 'starter-example' No sub-projects To see a list of the tasks of a project, run gradle &lt;project-path&gt;:tasks For example, try running gradle :tasks BUILD SUCCESSFUL in 1s 1 actionable task: 1 executed  "},{"title":"Properties file in a build​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#properties-file-in-a-build","content":"build.gradle settings.gradle gradle.properties  characteristics resides in root directory of project hierarchy or gradle user home directorypreconfigures runtime behavior create gradle.properties file with the following contents changing log level for a console output to info org.gradle.logging.level = info declare custom version of project version = 1.0.0 retrieve variable from property in build.gradle file task helloWorld { doLast { println &quot;Hello World, version = &quot; + version } } gradle helloWorld or ./gradlew helloWorld "},{"title":"Defining and configuring a task​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#defining-and-configuring-a-task","content":"view all available tasks gradle tasks --all "},{"title":"Task purpose​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#task-purpose","content":"defines executable unit of workactions contain logic to be executed runtimegeneral categorization: ad hoc tasks and tasks explicitly declaring a type "},{"title":"Ad Hoc Task​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#ad-hoc-task","content":"Default Task ^ | extends Ad hoc Task  characteristics implements one-off, simplistic action code by defining doFirst or doLastautomatically extend DefaultTask without having to declare it the helloWorld is an example of an Ad Hock Task it also has no explicity declare type task helloWorld { "},{"title":"Task Declaring a type​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#task-declaring-a-type","content":"Copy ^ | extends Typed Task  characteristics explicitly declares type e.g.: task copyFiles(type: Copy) { from &quot;sourceFiles&quot; into &quot;target&quot; } does not necessarily need to define actions as they are already provided by type real copy example in build.gradle file check for all .bat files from current directory and into nested directoriesthen add them into test folder with their respective directories task copyExample(type: Copy) { from &quot;.&quot; into &quot;test&quot; include &quot;**/*bat&quot; includeEmptyDirs = false } real copy and zip example in build.gradle file task copyExample(type: Copy) { from &quot;.&quot; into &quot;test&quot; include &quot;**/*bat&quot; includeEmptyDirs = false } task createZip(type: Zip) { from &quot;test&quot; archiveFileName = &quot;docs.zip&quot; destinationDirectory = file(&quot;test/dist&quot;) } need to run each task individually to enable it to run without running each task independently, use dependsOn key task copyExample(type: Copy) { from &quot;.&quot; into &quot;test&quot; include &quot;**/*bat&quot; includeEmptyDirs = false } task createZip(type: Zip) { from &quot;test&quot; archiveFileName = &quot;docs.zip&quot; destinationDirectory = file(&quot;test/dist&quot;) dependsOn copyExample }  "},{"title":"Task Execution Order​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#task-execution-order","content":" dependsOn A -&gt; B -&gt; C dependsOn  ensures that B and C is executed before Adoes not explicitly define if B or C is executed first "},{"title":"Fined-Gradle Dependency Control​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#fined-gradle-dependency-control","content":" dependsOn A -&gt; B | mustRunAfter v -&gt; C dependsOn  use mustRunAfter, shouldRunAfter, or finalizedBy "},{"title":"Directed Acyclic Graph (DAG)​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#directed-acyclic-graph-dag","content":"node node A -&gt; B graph edge  at runtime, the gradle buils a directed acyclic graph for tasks in memory thus, runtime will know all the tasks participating in the build and their proper execution order task is represented as nodetask dependency is represented as graph edgeGradle does not provide a built-in feature for visualizing the task graph of a project to emulate the task dependencies in action gradle taskname --dry-run can use the gradle-task-tree to render the tasks as a tree Circular Dependencies (Not allowed)​ dependency cycles cannot be formedgradle will fail build if detectede.g.: task A cannot dependsOn task B, while task B cannot dependsOn task A at the same time Domain Objects in Memory​ each node represents the DAG in memorytasks are just 1 example of domain object of a builddomain objects can be inspected and modified from the build script import domain objects​ Gradle: org.gradle.invocation.Gradle represents invocation of the buildevery invocation of a greater build is represented by a domain object called Gradle this domain object has knowledge about the project hierarchy in a single project or multi project build provides pointers to the higher level properties of a build e.g.: the gradle user home directory, the used Gradle version can register callback logic to react to certain events in the build Gradle - Project: org.gradle.api.Project represents a software component and provides API access to object hierarchyit serves as the main entry point of a buildprovides methods for walking the whole hierarchy of domain objectse.g.: can ask for the reference to the Gradle instance, register new tasks, or get a modified typical environmental properties like the build output directory Gradle - Project - Task: org.gradle.api.Task represents unit of work with potential dependenciesperforms the actual work at runtimefrom the project, can register as many tasks as you likeevery task can declare task dependenciesin most cases, tasks define at least 1 action Gradle - Project - Task - Action: org.gradle.api.Action actual work performed during execution phasegradle executes actions in order of declarationcan also define doFirst and doLast actions Gradle - Project - Task - Action | v Plugin org.gradle.api.Plugin provides reusable logic for a projectevery plugin applied to a project is represented as a plugin domain objecta plugin has full access to the project it works on thus can access other domain objects by name or by type and modify them as necessary "},{"title":"Build lifecycle phases​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#build-lifecycle-phases","content":"every build performs 3 lifecycle phases Initialization Phase evaluates settings file and sets up buildfile contains the information about the projects that should participate in the buildsettings file can exist for a single and multi project builds Configuration Phase evaluates build scripts and runs configuration logic each project can define a distinct build script but doesn't have to all code in build script will be exercised during configuration phase, task actions are not executed tasks are only configured configuration counts as assigning values to properties or calling task methods exposed by its API make sure that code defined does not necessarily execute expensive logic as it would affect the performance example in build.gradle file always outide of doFirst and doLast actionsexecuted during configuration phase // configuration code task helloWorld { // configuration code doFirst {} doLast {} } Execution Phase executes task actions in correct order it looks at the directed acyclic graph that was built in memory and executes every task action in the the correct order example in build.gradle file always inside of doFirst and doLast actionsexecuted during execution phase task helloWorld { doFirst { // execution code } doLast { // execution code } }  "},{"title":"Plugins​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#plugins","content":"avoid repetitive codemake build logic more maintainableprovide reusable functionality across projects "},{"title":"2 types of plugins​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#2-types-of-plugins","content":"Script Plugins includes build.gradle -&gt; publishing.gradle -&gt; deployment.gradle includes same syntax, just another build script that can be included in the main build.gradle file primary reason for wanting to use it is to split up build logic and make it more maintainable example create a archiving.gradle file add the usual code from build.gradle task copyExample(type: Copy) { from &quot;.&quot; into &quot;test&quot; include &quot;**/*bat&quot; includeEmptyDirs = false } task createZip(type: Zip) { from &quot;test&quot; archiveFileName = &quot;docs.zip&quot; destinationDirectory = file(&quot;test/dist&quot;) dependsOn copyExample } create a build.gradle file implement script plugin with the apply key word apply from: &quot;archiving.gradle&quot; run file as usual gradle createZip Binary Plugins includes build.gradle -&gt; gradle core plugin -&gt; community plugin includes implemented as classes bundled as JAR files can reuse the functionality across multiple self-contained software projects these software projects usually live in different version control repositories example create a archiving.gradle file add the usual code from build.gradleuse the apply key worddelete the archiveFileName and destionationDirectory as they are provided by the base plugin, thus no longer required // single plugin apply plugin: &quot;base&quot; // multi plugins plugins { id 'java' }   task copyExample(type: Copy) { from &quot;.&quot; into &quot;test&quot; include &quot;**/*bat&quot; includeEmptyDirs = false } task createZip(type: Zip) { from &quot;test&quot; dependsOn copyExample } ``` - create a `build.gradle` file - implement script plugin with the `apply` key word ```gradle apply from: &quot;archiving.gradle&quot; ``` - run file as usual &gt; gradle createZip  "},{"title":"Build a java project​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#build-a-java-project","content":""},{"title":"Using Gradle Java Plugin​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#using-gradle-java-plugin","content":"standard source code directories src/main/java -&gt; contains the production source code src/main/resources -&gt; contains resource files needed at runtime src/test/java -&gt; contains test source code src/test/resources -&gt; contains resource files needed at test execution time build.gradle build output directories build/classes -&gt; contains compiles class files build/libs -&gt; contains generated JAR file build.gradle // basic requirement plugins { id 'java' id 'application' } version = &quot;1.0.0&quot; java { sourceCompatibility = JavaVersion.VERSION_11 targetCompatibility = JavaVersion.VERSION_11 } tasks.withType(JavaCompile) { //enable compilation in a separate daemon process options.fork = true } jar { // use preset jar file name archiveBaseName = &quot;newName&quot; } application { mainClass = &quot;com.domain.appname.Main&quot; } javadoc { options.header = &quot;appname&quot; options.verbose() // to print logs } run wrapper gradle wrapper src/main/java can be compiled using the task compileJava ./gradlew compileJava --console=verbose copies files from src/main_resources into build directory using task processResources ./gradlew processResources --console=verbose combine both compileJava task and processResources with classes ./gradlew classes --console=verbose package jar file ./gradlew jar run application ./gradlew run run with args ./gradlew run --args=&quot;add 1 2&quot; install application to allow running without java ./gradlew installDist run application ./build/install/appname/bin/appname run with args ./build/install/appname/bin/appname add 1 2 zip application single bundle ./gradlew distZip multi bundle ./gradlew distZip distTar run javadoc ./gradlew javadoc output in build/docs/ directoryopen docs open build/docs/javadoc/index.html "},{"title":"Dependency Management​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#dependency-management","content":"within gradle project, can define a dependency on libraries in Maven Central or any other binary repositoryat build time, gradle's dependency management engine downloads its artifacts stores them in the local cache for reuseadds them to the class path of the project gradle calls the scope of a dependency a configuration can be very specific about the scope of a dependency e.g.: can express that the dependency is only needed at runtime, but not for compilation process another type of dependency is project dependency when application logic becomes complex will want to separate it based on functional boundaries, modules, or components a module, all can use other modules each of it are modeled as a gradle projectreferred to as multi-project build when a project is ready to ship will want to produce a library or distributioncommon practice to publish those artifacts to a binary repository for consumption by other developers or end usersgradle supports publishing java libraries to Maven repositories Dependency management in Java​ java ecosystem offers a mature set of reusable functionalitythe most popular libraries are available on Maven Central it is a centrally hosted binary repository Declaring a dependency on an external library​ need to know 3 aspects dependency coordinates which is the Group, Artifact, Version (GAV) you want to consume Group:Artifact:Version e.g.: commons-cli:commons-cli:1.4 to consume the dependency, need to declare the repository using the repositories method in build.gradle file plugins { id 'java' id 'application' } java { sourceCompatibility = JavaVersion.VERSION_11 targetCompatibility = JavaVersion.VERSION_11 } jar { archiveBaseName = &quot;newName&quot; } application { mainClass = &quot;com.domain.appname.Main&quot; } // allows gradle to know where to resolve the dependency from repositories { mavenCentral() } define the GAV of the dependency by using the dependencies method with implementation scope after adding the dependencies, you can import it in the java code plugins { id 'java' id 'application' } java { sourceCompatibility = JavaVersion.VERSION_11 targetCompatibility = JavaVersion.VERSION_11 } jar { archiveBaseName = &quot;newName&quot; } application { mainClass = &quot;com.domain.appname.Main&quot; } repositories { mavenCentral() } dependencies { implementation &quot;commons-cli:commons-cli:1.4&quot; } to test if dependencies are working, install and run them installation ./gradlew installDist run ./build/install/appname/bin/appname run with args ./build/install/appname/bin/appname --operation functionname --value value1 --value2 value2 Dependency tree​ over time, the number of dependencies will growdeclared dependencies oftentimes pull in transitive dependenciesresult in a large tree of dependencies to managecheck dependency tree ./gradlew dependencies use dependencyInsight task to find out why the dependency is needed and where it is coming from ./gradlew -q dependencyInsight --dependency commons-cli Multi-project builds​ projects with a lot of code easily become hard to maintain breaking up a project into components increases cohesion and makes it more manageable gradle can model each of the components with a project instance, multi-project build sample multi-project structure api/src/main/java/com/domainname/appname/Appname.java app/src/main/java/com/domainname/appname/Main.java app/build.gradle build.gradle settings.gradle app/build.gradle plugins { id 'application' } application { mainClass = 'com.domainname.appname.Main' } repositories { mavenCentral() } dependencies { implementation project(':api') implementation 'commons-cli:commons-cli:1.4' } settings.gradle rootProject.name = 'appname' include ':api', ':app' build.gradle allprojects { version = '1.0.0' } subprojects { apply plugin: 'java' java { sourceCompatibility = JavaVersion.VERSION_11 targetCompatibility = JavaVersion.VERSION_11 } } check projects taking part of the build using the projects task ./gradlew projects compile and copy resources, this will check if build works ./gradlew classes Publishing libraries​ library needs to be published to a binary repository a published library can be identified by its coordinates (GAV) the Maven Publish plugin automates the publishing process api/build.gradle publish to a local folder plugins { id 'maven-publish' } publishing { publications { maven(MavenPublication) { groupId = 'org.domainname' artifactId = 'appname' from components.java } } repositories { maven { url = &quot;$rootProject.buildDir/m2repo&quot; } } } publish to a cloud binary repository plugins { id 'maven-publish' } publishing { publications { maven(MavenPublication) { groupId = 'org.domainname' artifactId = 'appname' from components.java } } repositories { maven { url = 'http://localhost:8082/artifactory/libs-release-local/' credentials { username = 'admin' password = 'admin_123' } } } } run publish task in the root directory works for multi-project builds ./gradlew publish "},{"title":"Testing a Java Project​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#testing-a-java-project","content":"JUnit is the established standard test framework in the Java ecosystemimporting into code import org.junit.jupiter.api.Test;  Declaring JUnit dependencies​ Test dependency configurations JUnit dependencies need to be declared with the correct configurationsconfiguration will only work on the test codethe dependencies declared with this configuration won't be bundled when shipping the app will use the test runtime instead testImplementation -&gt; Needed for compilation and text execution testRuntime -&gt; Only needed for test execution example build.gradle at root directory plugins { id 'java' id 'application' } version = '1.0.0' java { sourceCompatibility = JavaVersion.VERSION_11 targetCompatibility = JavaVersion.VERSION_11 } application { mainClass = 'com.domainname.appname.Main' } repositories { mavenCentral() } dependencies { implementation 'commons-cli:commons-cli:1.4' testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0' testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.7.0' } test { useJUnitPlatform() // basic requirement to work testLogging { // change logging behavior events 'started', 'skipped', 'failed' // show on console the test events exceptionFormat 'full' // gives a deeper hint on what is actually wrong } } compile tests with compileTestJava task ./gradlew compileTestJava run unit test ./gradlew test open test report open build/reports/tests/test/index.html open xml test report open build/test-results/test/TEST-com.linkedinlearning.calculator.CalculatorTest.xml "},{"title":"Building with docker​","type":1,"pageTitle":"Gradle","url":"docs/Technologies/projectManagementTools/gradle/#building-with-docker","content":"build.gradle buildscript { repositories { maven { url &quot;https://plugins.gradle.org/m2/&quot; } } dependencies { classpath 'com.bmuschko:gradle-docker-plugin:7.3.0' } } apply plugin: 'java' apply plugin: 'application' apply plugin: 'com.bmuschko.docker-java-application' import com.bmuschko.gradle.docker.tasks.container.* import com.bmuschko.gradle.docker.tasks.image.* sourceCompatibility = 1.8 targetCompatibility = 1.8 group = 'com.dockerapp' version = '1.0-SNAPSHOT' mainClassName = &quot;com.dockerapp.App&quot; repositories { mavenCentral() } dependencies { testImplementation 'junit:junit:4.12' } docker { javaApplication { baseImage = 'openjdk:latest' } } task createContainer(type: DockerCreateContainer) { dependsOn dockerBuildImage targetImageId dockerBuildImage.getImageId() } task startContainer(type: DockerStartContainer) { dependsOn createContainer targetContainerId createContainer.getContainerId() } build and run app normally ./gradlew build run build docker image ./gradlew dockerBuildImage create docker container ./gradlew createContainer start docker container ./gradlew startContainer check docker output docker container logs containerId "},{"title":"Husky","type":0,"sectionRef":"#","url":"docs/Technologies/pre-hooks/javascript/husky/","content":"","keywords":""},{"title":"How to install​","type":1,"pageTitle":"Husky","url":"docs/Technologies/pre-hooks/javascript/husky/#how-to-install","content":"method 1 npx husky-init &amp;&amp; npm install method 2 npx husky-init &amp;&amp; yarn method 3 yarn dlx husky-init --yarn2 &amp;&amp; yarnYarn 2 doesn't support prepare lifecycle script, so husky needs to be installed differently Prepare husky for installation npm set-script prepare &quot;husky install&quot;should have // package.json { &quot;scripts&quot;: { &quot;prepare&quot;: &quot;husky install&quot; } } install husky npm run prepare "},{"title":"Create a pre-commit hook​","type":1,"pageTitle":"Husky","url":"docs/Technologies/pre-hooks/javascript/husky/#create-a-pre-commit-hook","content":"npx husky add .husky/pre-commit &quot;npm test&quot; you should get #!/bin/sh . &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot; npm test change it to something like the following code:clean and test:coverage are scripts written in the package.json // package.json { &quot;scripts&quot;: { &quot;prepare&quot;: &quot;husky install&quot;, &quot;code:lint&quot;: &quot;eslint --ext .js,.jsx,.ts,.tsx \\&quot;src/\\&quot;&quot;, &quot;code:format&quot;: &quot;prettier --write .&quot;, &quot;code:clean&quot;: &quot;npm run code:lint --fix; npm run code:format&quot; } } #!/bin/sh . &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot; npm run code:clean &amp;&amp; npm run test:coverage &amp;&amp; node ./branchLint.js  "},{"title":"Create a commit-msg hook​","type":1,"pageTitle":"Husky","url":"docs/Technologies/pre-hooks/javascript/husky/#create-a-commit-msg-hook","content":"npx husky add .husky/commit-msg 'npx --no-install commitlint --edit &quot;$1&quot;' you should get #!/bin/sh . &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot; npx --no-install commitlint --edit &quot;&quot; change it to something like the following #!/bin/sh . &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot; echo 'husky:hooks:commit-msg' &amp;&amp; node ./commitLint.ts  "},{"title":"Create a commit lint to manage the commit message​","type":1,"pageTitle":"Husky","url":"docs/Technologies/pre-hooks/javascript/husky/#create-a-commit-lint-to-manage-the-commit-message","content":"commitLint.js const fs = require(&quot;fs&quot;); const path = require(&quot;path&quot;); const pjson = require(&quot;../package.json&quot;); const projectAcronym = pjson.name; const ruleCommit = `\\\\[((${projectAcronym})-(\\\\d)+)\\\\]:\\\\s\\\\w`; const regExpCommit = new RegExp(ruleCommit, &quot;g&quot;); const msg = ` # Invalid commit message! # # Please use the following rules: # '[required key]: &lt;required message&gt;' # # - [required key]: '[${projectAcronym}-{key}]: ', when the {key} is a valid JIRA issue key # - &lt;required message&gt;: '{msg}', when the {msg} is a clear commit message # # For example: # '[${projectAcronym}-1234]: Commit message' `; const commitPath = path.resolve( process.env.HUSKY_GIT_PARAMS || &quot;.git/COMMIT_EDITMSG&quot; ); const commitMsg = fs.readFileSync(commitPath, &quot;utf8&quot;); if (!regExpCommit.test(commitMsg)) { console.error(msg); process.exit(1); }  "},{"title":"Create a branch lint to manage the branch names​","type":1,"pageTitle":"Husky","url":"docs/Technologies/pre-hooks/javascript/husky/#create-a-branch-lint-to-manage-the-branch-names","content":"branchLint.js const fs = require(&quot;fs&quot;); const path = require(&quot;path&quot;); const pjson = require(&quot;../package.json&quot;); const projectAcronym = pjson.name; const ruleBranch = `^(feature|bugfix|improvement|library|prerelease|release|hotfix)\\/${projectAcronym}-(\\\\d+)[a-z0-9._-]+$`; const regExpBranch = new RegExp(ruleBranch, &quot;g&quot;); const msg = ` # Invalid branch name! # # Branch names in this project must adhere to this contract: # ${ruleBranch} # # Your commit will be rejected. # Please use the following rules: # '[required key1]/{required key2}-&lt;required name&gt;' # # - [required key1]: '{key1}/', when the {key1} is a type of branch of either # - feature | bugfix | improvement | library | prerelease | release | hotfix # - {required key2}: '${projectAcronym}-{key2}-', when the {key2} is a valid JIRA issue key # - &lt;required name&gt;: '{msg}', when the {msg} is a clear branch name # # For example: # 'feature/${projectAcronym}-01-feature-branch-name' `; const branchNamePath = path.resolve( process.env.HUSKY_GIT_PARAMS || &quot;.git/HEAD&quot; ); const branchName = fs .readFileSync(branchNamePath, &quot;utf8&quot;) .split(&quot;ref: refs/heads/&quot;)[1] .split(&quot;\\n&quot;)[0]; if (!regExpBranch.test(branchName)) { console.error(msg); process.exit(1); }  "},{"title":"Pre-commit","type":0,"sectionRef":"#","url":"docs/Technologies/pre-hooks/python/pre-commit/","content":"","keywords":""},{"title":"How to install​","type":1,"pageTitle":"Pre-commit","url":"docs/Technologies/pre-hooks/python/pre-commit/#how-to-install","content":"pip install pre-commit "},{"title":"Create a .pre-commit-config.yaml file​","type":1,"pageTitle":"Pre-commit","url":"docs/Technologies/pre-hooks/python/pre-commit/#create-a-pre-commit-configyaml-file","content":"touch .pre-commit-config.yaml "},{"title":"Setup​","type":1,"pageTitle":"Pre-commit","url":"docs/Technologies/pre-hooks/python/pre-commit/#setup","content":""},{"title":"Add configs into .pre-commit-config.yaml​","type":1,"pageTitle":"Pre-commit","url":"docs/Technologies/pre-hooks/python/pre-commit/#add-configs-into-pre-commit-configyaml","content":"sample repos: - repo: https://github.com/pre-commit/pre-commit-hooks rev: v2.3.0 hooks: - id: check-yaml - id: end-of-file-fixer - id: trailing-whitespace - id: name-tests-test - repo: https://github.com/psf/black rev: 19.3b0 hooks: - id: black - repo: local hooks: - id: pytest-check name: pytest-check entry: pytest language: system pass_filenames: false always_run: true - id: commit-msg name: commit-msg entry: commit-msg always_run: true language: system stages: [commit-msg]  "},{"title":"Add branchLint.py​","type":1,"pageTitle":"Pre-commit","url":"docs/Technologies/pre-hooks/python/pre-commit/#add-branchlintpy","content":"sample import re # Manually change projectAcronym project_acronym = &quot;TEMPLATE&quot; rule_branch = fr&quot;^(feature|bugfix|improvement|library|prerelease|release|hotfix)\\/{project_acronym}-(\\d+)[a-z0-9._-]+$&quot; msg = f&quot;&quot;&quot; # Invalid branch name! # # Branch names in this project must adhere to this contract: # {rule_branch} # # Your commit will be rejected. # Please use the following rules: # '[required key1]/(required key2)-&lt;required name&gt;' # # - [required key1]: '(key1)/', when the (key1) is a type of branch of either # - feature | bugfix | improvement | library | prerelease | release | hotfix # - (required key2): '{project_acronym}-(key2)-', when the (key2) is a valid JIRA issue key # - &lt;required name&gt;: '(name)', when the (name) is a clear branch name # # For example: # 'feature/{project_acronym}-01-feature-branch-name' &quot;&quot;&quot; branch_name = &quot;&quot; with open(&quot;.git/HEAD&quot;, &quot;r&quot;) as f: branch_name = f.read().split(&quot;ref: refs/heads/&quot;)[1].split(&quot;\\n&quot;)[0] if not re.match(rule_branch, branch_name): print(msg) raise SystemExit(&quot;&quot;) at .git/hooks/pre-commit file modify the contents to the following #!/usr/bin/env python3.9 import os import sys if sys.version_info &lt; (3, 3): from distutils.spawn import find_executable as which else: from shutil import which # work around https://github.com/Homebrew/homebrew-core/issues/30445 os.environ.pop('__PYVENV_LAUNCHER__', None) # start templated INSTALL_PYTHON = 'venv/bin/python3.9' ARGS = ['hook-impl', '--config=.pre-commit-config.yaml', '--hook-type=pre-commit'] # end templated ARGS.extend(('--hook-dir', os.path.realpath(os.path.dirname(__file__)))) ARGS.append('--') ARGS.extend(sys.argv[1:]) DNE = '`pre-commit` not found. Did you forget to activate your virtualenv?' if os.access(INSTALL_PYTHON, os.X_OK): CMD = [INSTALL_PYTHON, '-mpre_commit'] elif which('pre-commit'): CMD = ['pre-commit'] else: raise SystemExit(DNE) CMD.extend(ARGS) exec(open(&quot;branchLint.py&quot;).read()) if sys.platform == 'win32': # https://bugs.python.org/issue19124 import subprocess if sys.version_info &lt; (3, 7): # https://bugs.python.org/issue25942 raise SystemExit(subprocess.Popen(CMD).wait()) else: raise SystemExit(subprocess.call(CMD)) else: os.execvp(CMD[0], CMD)  "},{"title":"Add commitLint.py file​","type":1,"pageTitle":"Pre-commit","url":"docs/Technologies/pre-hooks/python/pre-commit/#add-commitlintpy-file","content":"sample import re # Manually change projectAcronym project_acronym = &quot;TEMPLATE&quot; rule_commit = fr&quot;\\[(({project_acronym})-(\\d)+)\\]:\\s\\w&quot; msg = f&quot;&quot;&quot; # Invalid commit message! # # Please use the following rules: # '[required key]: &lt;required message&gt;' # # - [required key]: '[{project_acronym}-(key)]: ', when the (key) is a valid JIRA issue key # - &lt;required msg&gt;: '(msg)', when the (msg) is a clear commit message # # For example: # '[{project_acronym}-1234]: Commit message' &quot;&quot;&quot; commit_msg = &quot;&quot; with open(&quot;.git/COMMIT_EDITMSG&quot;, &quot;r&quot;) as f: commit_msg = f.read() if not re.match(rule_commit, commit_msg): print(msg) raise SystemExit(&quot;&quot;) at .git/hooks/commit-msg file modify the contents to the following #!/usr/bin/env python3.9 exec(open(&quot;commitLint.py&quot;).read())  "},{"title":"Webpack Tutorial","type":0,"sectionRef":"#","url":"docs/Technologies/frontend/webpack_tutorial","content":"","keywords":""},{"title":"Install​","type":1,"pageTitle":"Webpack Tutorial","url":"docs/Technologies/frontend/webpack_tutorial#install","content":"npm i -g webpack webpack-cli  "},{"title":"Bundle file​","type":1,"pageTitle":"Webpack Tutorial","url":"docs/Technologies/frontend/webpack_tutorial#bundle-file","content":"webpack fileToBundle.js --mode development  "},{"title":"If use npm​","type":1,"pageTitle":"Webpack Tutorial","url":"docs/Technologies/frontend/webpack_tutorial#if-use-npm","content":"Put this into the package.json file &quot;build&quot;: &quot;webpack fileToBundle.js --mode development&quot;  "},{"title":"import bundled file in index.html with script tag​","type":1,"pageTitle":"Webpack Tutorial","url":"docs/Technologies/frontend/webpack_tutorial#import-bundled-file-in-indexhtml-with-script-tag","content":"webpack will bundle it into a &quot;main.js&quot; filepreviously was bundled into a &quot;bundle.js&quot; file &lt;script src=&quot;dist/main.js&quot;&gt;&lt;/script&gt;  "},{"title":"Enable constant update to bundle file​","type":1,"pageTitle":"Webpack Tutorial","url":"docs/Technologies/frontend/webpack_tutorial#enable-constant-update-to-bundle-file","content":"webapck fileToBundle.js --mode development --watch  "},{"title":"Enable module imports​","type":1,"pageTitle":"Webpack Tutorial","url":"docs/Technologies/frontend/webpack_tutorial#enable-module-imports","content":"require(./myModule); require(publicModule);  "},{"title":"Enable css imports​","type":1,"pageTitle":"Webpack Tutorial","url":"docs/Technologies/frontend/webpack_tutorial#enable-css-imports","content":"npm i css-loader style-loader  Import css to js file​ Method 1: Write directly in js file require(&quot;!style-loader!css-loader!./cssFileName.css&quot;);  Method 2: Use webpack.config file touch webpack.config old syntax module.exports = { mode: &quot;development&quot;, entry: &quot;./fileToBundle.js&quot;, output: { path: __dirname, // set to current path filename: &quot;bundle.js&quot; // set bundled filename }, module: { // this is required if using loaders (eg. css-loader) loaders: [ {test: /\\.css$/, loader: &quot;style-loader!css-loader&quot;} // for any file that ends with a &quot;.css&quot; ] } } current syntax const path = require('path'); module.exports = { mode: &quot;development&quot;, entry: &quot;./fileToBundle.js&quot;, output: { path: path.resolve(__dirname, 'dist'), filename: &quot;bundle.js&quot; }, module: { rules: [ { test: /\\.css$/, use: ['style-loader', 'css-loader'], }, ], }, }; write directly in js file require(&quot;./style.css&quot;); webpack command changed webpack --config webpack.config  "},{"title":"Apache Maven","type":0,"sectionRef":"#","url":"docs/Technologies/projectManagementTools/apacheMaven/","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#installation","content":"install with brew brew install maven check maven version mvn -version "},{"title":"Maven collector features​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#maven-collector-features","content":"dependency managementability to build lifecycle goalsability to run unit tests "},{"title":"Project Object Model (POM)​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#project-object-model-pom","content":"it has a set of standards, a project lifecycle, a dependency management system, and logic for executing plugin at defined phases in a lifecycleprojects are set up with default behaviorssource code must be in the src/main/ folderresources necessary for the project are in another foldertest cases are in a specifically name foldertarget folder is used for the final JAR file  "},{"title":"POM file​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#pom-file","content":"must include project descriptionunique set of coordinates highlighted by * groupIdartifactIdversion project attributesproject's licenseproject versionprogram authors and contributorsdependencies POM file can be separated into multiple POM files  POM Categories​ the POM contains all of the information about a projectthe file is stored with an XML extensionminimum categories required &lt;project&gt; &lt;groupId&gt;com.projectname&lt;/groupId&gt; &lt;artifactId&gt;appname&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/project&gt; common categories project coordinatesproject's licenselist of developers and contributors to the projectlist of project dependenciesname of projecturl associated with projectpackaging typescope of elementinformation about inheritance build category add build related pluginspluginManagement tag is optional, also work without it it is normally used in a parent POM &lt;project&gt; ... &lt;dependencies&gt;&lt;/dependencies&gt; &lt;build&gt; &lt;pluginManagement&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.8.0&lt;/version&gt; &lt;configuration&gt; &lt;target&gt;8&lt;/target&gt; &lt;source&gt;8&lt;/source&gt; &lt;/configuration&gt; &lt;/plugin&gt; ... &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt; ... &lt;/project&gt; reporting category add reporting related plugins &lt;project&gt; ... &lt;dependencies&gt;&lt;/dependencies&gt; &lt;buid&gt;&lt;/build&gt; &lt;reporting&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-report-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/plugin&gt; ... &lt;/plugins&gt; &lt;/reporting&gt; ... &lt;/project&gt; distributionManagement category is used for deploying &lt;project&gt; ... &lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;internal.repo&lt;/id&gt; &lt;name&gt;internal repository name&lt;/name&gt; &lt;url&gt;hot to repository&lt;/url &lt;/repository&gt; &lt;/distributionManagement&gt; ... &lt;/project&gt; server category is used to specify server definition can also configure it in the settings.xml field &lt;server&gt; &lt;id&gt;internal repo&lt;/id&gt; &lt;username&gt;someusername&lt;/username&gt; &lt;password&gt;somepassword&lt;/password&gt; &lt;/server&gt;  POM syntax​ POM is documented in XML filefile is stored in base directorysyntax is similar to HTML file using &lt; &gt; tagsevery open XML tag must have a closing XML tagtags can be nested one inside the otherXML declaration is optionalall projects extend the super POM automaticallysample &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.projectname&lt;/groupId&gt; &lt;artifactId&gt;appname&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/project&gt;  POM properties​ &lt;properties&gt; &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt; &lt;java.version&gt;11&lt;/java.version&gt; &lt;junit.version&gt;5.2.0&lt;/junit.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;${junit.version}&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;  purpose reduces duplication often times when configuration POM, tend to put the same value for an item and properties properties help to reduce this streamlines configuration often used in conjunction with a parent POM helps keep items in sync such as versions of similar librariesproperties allow you to leverage a version and reference it aids in upgrades can upgrade the property and it upgrades the rest for you Parent POM​ a POM file that is stand-alone (no code associated with it)creates a list of dependency versions and plugins versions that the subordinate projects can leverageprovides a way to control versions in 1 place so the subordinate projects don't have to specify the version, only the dependencyit can provide properties and repositories a tool use to manage versions and licenses because can provide a pre-approved list of dependencies and artifacts similar concept is a Reactor it builds on the concept of a parent POMused to build a group of related projects via the use of Parent POMMaven commands are executed on the parent, and reactor executes the commands on each module or artifact in the reactor the dependencies, if exists are handled in the correct order building reactor although not hard, it is time consumingstructure example root - pom |_ module - POM |_ module - POM |_ module - POM parent POM &lt;project&gt; ... &lt;modules&gt; &lt;module&gt;module-name&lt;/module&gt; &lt;/modules&gt; ... &lt;/project&gt; child POM &lt;project&gt; ... &lt;parent&gt; &lt;groupId&gt;com.projectname&lt;/groupId&gt; &lt;artifactId&gt;appname&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; ... &lt;/project&gt;  features enabled by POM​ includes dependency managementaccess to remote repositoriesuniversal reuse of build logictool portability and integration allow IDEs to have a common place to find information about a project easy searching and filtering of project artifacts Maven Life Cycles​ DefaultCleanSite each cycle has a few phasesphases must be executed in orderphrases are made up of goals Goals plugin goals are bound to phase of lifecyclegoals can be triggered individuallye.g.: mvn dependency:analyze default life cycle phases​ main lifecycle Validate validate the project is correct InitializeGenerate-sourcesProcess-sourcesGenerate-resourcesProcess-resourcesCompile compile the source of the project Process-classesGenerate-test-sourcesProcess-test-sourcesGenerate-test-resourcesProcess-test-resourcesTest-compileProcess-test-classesTest test the compiled source code using a unit testing framework Prepare-packagePackage package the compiled code Pre-integration-testIntegration-test deploy the package into an environment where integration tests can be run Post-integration-testVerify run any checks to verify the package is valid Install install the package into the local repository Deploy copies the final package to the remote repository plugin goals can be attached to each lifecycle phasemaven executes the goals attached to each phaseeach phase has 0 or more goals bound to itwhen you run mvn install, multiple goals are executed target/ folder with all the compiled code and jar file in the package phase, it executes the JAR goal clean life cycle phases​ cleans project Pre-cleanCleanPost-clean site life cycle phases​ generates project documentation Pre-sitesitepost-sitesite-deploy "},{"title":"Maven Repository​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#maven-repository","content":"central repository that contains open-source componentsMaven creates a local repository at ~/.m2 location foreign dependencies are installed hereit also includes your JAR file and pom.xml file for each install projectMaven repo search url address "},{"title":"Maven Dependency Management​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#maven-dependency-management","content":"check dependencies dependencies could be used but not declaredunused dependencies will be found mvn dependency:analyze check dependencies tree mvn dependency:tree allows for code reusesimilar to using Java APIsmost programmers have used the Math APIdependencies are defined in the pom.xml file &lt;scope&gt;&lt;/scope&gt; tag identifies what part of the life cycle the dependency is going to be used in if scope tag is not included, it defaults to compile phasetests related must have the `testother scopes include compile the default scope provided used when JDK is expected to provide them runtime required for executing and testing, not compiling test not required during the normal operation of an app system similar to providedbut must specify the explicit path to the JAR on the locals file system project dependencies​ Maven supports internal and external dependenciesa common dependencies in Maven is junit, log4j, jaxensample &lt;project ...&gt; ... &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.14&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;jaxen&lt;/groupId&gt; &lt;artifactId&gt;jaxen&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; using properties in parent POM example &lt;properties&gt; &lt;log4j.version&gt;1.2.14&lt;/log4j.version&gt; &lt;junit.version&gt;3.8.1&lt;/junit.version&gt; &lt;/properties&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;${log4j.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;${jaxen.version}&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; in child pom file example works fine if enforcer plugin is not added &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; verify with mvn clean verify project relationships​ Maven makes it easy to track down dependenciesexample of external relationships are Log4j and JUnitInternal is where project-a depends on project-bthey are established using the Maven coordinatesrelationships are described as dependenciesprojects can inherit project relationships transitive dependencies​ it is a dependency of a dependencyprovides a mechanism to only declare dependencies that you want thus you do not need to manage what dependencies is required from the dependencies that you need rules when 2 versions of the same artifact are needed the closest to the actual project wins e.g: actual project &lt;- A needs package abc version 1.0 &lt;- B needs package abc version 1.2 package abc version 1.0 wins if dependencyManagement tag is used the chosen version will be used if declaring in local dependency local overrides all other transitive dependencies "},{"title":"Best Practices​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#best-practices","content":"grouping common dependenciescan be done using multiple POM files allows other projects to reuse POM file choosing inheritance vs multi-module relationship multi-module: used when components are unrelatedinheritance: used when projects share dependencies proper indentation for pom.xml filefollow a standard layout where coordinates are listed first "},{"title":"Maven Plugins​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#maven-plugins","content":"a plugin is a collection of 1 or more goalsa goal is a unit of work in Maven can view goals of a plugin in the maven plugin website "},{"title":"Core plugins​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#core-plugins","content":"list of core plugins Compiler plugin contains goals for compiling source code and unit tests Surefire plugin used for executing unit tests and generating reports others clean, deploy, failsafe, install, resources, site, verifier Maven also allows creating of custom plugins it can be written in multiple languages java, Groovy, Ruby, ... list of maven plugins urlexample of using a plugin and goal in the terminal plugin: compiler, goal: compile mvn compiler:compile "},{"title":"Packaging tools plugin​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#packaging-tools-plugin","content":"list of packaging tools plugins JAR plugin creates JAR or Java Archive files others ear, ejb, rar, war, app-client/acr, shade, source, jlink, jmod example of using a plugin and goal in the terminal plugin: jar, goal: jar mvn jar:jar "},{"title":"Reporting plugins​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#reporting-plugins","content":"list of reporting plugins changelog pluginchanges plugincheckstyle plugindoap plugindocck pluginjavadoc pluginjdeps pluginjxr pluginlinkcheck pluginpmd pluginproject-info-reports pluginsurefire-report plugin example of using a plugin and goal in the terminal plugin: javadoc, goal: javadoc javadoc auto saves report in target/site/apidocs/ directorylaunch the index.html file to view generated report mvn javadoc:javadoc "},{"title":"Tools plugins​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#tools-plugins","content":"list of tools plugins antrun, artifact, archetype, assembly, dependency, enforcer, gpg, help, invoker, jarsigner, jdeprscan, patch, pdf, plugin, release, remote-resources, scm, scm-publish, scripting, stage, toolchains, wrapper use help to find out more about a plugin example: archetype mvn help:describe -DgroupId=org.apache.maven.plugins -DartifactId=maven-archetype-plugin "},{"title":"Create a project with Maven​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#create-a-project-with-maven","content":"generate a new project with interactive mode mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-quickstart -DgroupId: defines where the project is located -DartifactId: app name, only use - to divide words -Dversion: can just use the default version -Dpackage: this should match with the groupId "},{"title":"Sample program​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#sample-program","content":"mvn archetype:generate -DgroupId=com.projectname -DartifactId=appname -DarchetypeArtifactId=maven-archetype-quickstart -DInteractiveMode=false View the full pom file contents in the same directory where the pom.xml file is located at mvn help:effective-pom install the all dependencies and plugins mvn install if a compilation error were to occur due to old version issue, add the following into the pom.xml file, just above the dependencies tag &lt;properties&gt; &lt;maven.compiler.source&gt;18&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;18&lt;/maven.compiler.target&gt; &lt;/properties&gt; run the app method 1 -cp flag is used for class search path it will search directories and look for zip/jar files appname-1.0-SNAPSHOT is correct if default version is used java -cp target/appname-1.0-SNAPSHOT.jar com.projectname.App appname-0.0.1 is correct if 0.0.1 version is set java -cp target/appname-0.0.1.jar com.projectname.App method 2 add maven-jar-plugin &lt;project&gt; ... &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;configuration&gt; &lt;archive&gt; &lt;manifest&gt; &lt;mainClass&gt;com.domainname.appname.Main&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; ... &lt;/project&gt; java -jar target/appname-1.0-SNAPSHOT.jar method 3 add exec-maven-plugin &lt;project&gt; ... &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt; &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.5.0&lt;/version&gt; &lt;configuration&gt; &lt;mainClass&gt;com.dockerapp.App&lt;/mainClass&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; ... &lt;/project&gt; mvn clean package exec:java method 4 run with docker using maven &lt;project&gt; ... &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;configuration&gt; &lt;archive&gt; &lt;manifest&gt; &lt;mainClass&gt;com.domainname.appname.Main&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;docker&lt;/id&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;io.fabric8&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;0.20.1&lt;/version&gt; &lt;configuration&gt; &lt;images&gt; &lt;image&gt; &lt;name&gt;hellojava&lt;/name&gt; &lt;build&gt; &lt;from&gt;openjdk:latest&lt;/from&gt; &lt;assembly&gt; &lt;descriptorRef&gt;artifact&lt;/descriptorRef&gt; &lt;/assembly&gt; &lt;cmd&gt;java -jar maven/${project.name}-${project.version}.jar&lt;/cmd&gt; &lt;/build&gt; &lt;run&gt; &lt;wait&gt; &lt;log&gt;Hello World!&lt;/log&gt; &lt;/wait&gt; &lt;/run&gt; &lt;/image&gt; &lt;/images&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;docker:build&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;build&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;docker:start&lt;/id&gt; &lt;phase&gt;install&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;run&lt;/goal&gt; &lt;goal&gt;logs&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/profile&gt; &lt;/profiles&gt; ... &lt;/project&gt; packaging mvn package -Pdocker package and run mvn install -Pdocker "},{"title":"Web app​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#web-app","content":"mvn archetype:generate -DgroupId=com.projectname -DartifactId=webappname -DarchetypeArtifactId=maven-archetype-webapp -DInteractiveMode=false "},{"title":"Unit testing with Maven​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#unit-testing-with-maven","content":"Maven provides built-in support for unit testingJUnit is used to test appTest/ directory is automatically created with a test apprun test mvn test "},{"title":"Add resources folder​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#add-resources-folder","content":"add resources folder to add files for inputs can be txt filesuse Scanner library to read file in resources folder for main folder create resources folder in main folder for test folder create resources folder in testfolder "},{"title":"Packaging App​","type":1,"pageTitle":"Apache Maven","url":"docs/Technologies/projectManagementTools/apacheMaven/#packaging-app","content":"packaging information is stored in pom.xml file &lt;packaging&gt;jar&lt;/packaging&gt; default is jar if the type is omittedrun package also works with mvn install, mvn test mvn package add clean optional command to remove issues with other Maven operations mvn clean package add site optional command to generate surefire documentation for us mvn clean package site "},{"title":"React Fiber Architecture","type":0,"sectionRef":"#","url":"docs/Technologies/frontend/react/reactFiber","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"React Fiber Architecture","url":"docs/Technologies/frontend/react/reactFiber#introduction","content":"React Fiber is an ongoing reimplementation of React's core algorithm. It is the culmination of over two years of research by the React team. The goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is incremental rendering: the ability to split rendering work into chunks and spread it out over multiple frames. Other key features include the ability to pause, abort, or reuse work as new updates come in; the ability to assign priority to different types of updates; and new concurrency primitives. "},{"title":"About this document​","type":1,"pageTitle":"React Fiber Architecture","url":"docs/Technologies/frontend/react/reactFiber#about-this-document","content":"Fiber introduces several novel concepts that are difficult to grok solely by looking at code. This document began as a collection of notes I took as I followed along with Fiber's implementation in the React project. As it grew, I realized it may be a helpful resource for others, too. I'll attempt to use the plainest language possible, and to avoid jargon by explicitly defining key terms. I'll also link heavily to external resources when possible. Please note that I am not on the React team, and do not speak from any authority. This is not an official document. I have asked members of the React team to review it for accuracy. This is also a work in progress. Fiber is an ongoing project that will likely undergo significant refactors before it's completed. Also ongoing are my attempts at documenting its design here. Improvements and suggestions are highly welcome. My goal is that after reading this document, you will understand Fiber well enough to follow along as it's implemented, and eventually even be able to contribute back to React. "},{"title":"Prerequisites​","type":1,"pageTitle":"React Fiber Architecture","url":"docs/Technologies/frontend/react/reactFiber#prerequisites","content":"I strongly suggest that you are familiar with the following resources before continuing: React Components, Elements, and Instances - &quot;Component&quot; is often an overloaded term. A firm grasp of these terms is crucial.Reconciliation - A high-level description of React's reconciliation algorithm.React Basic Theoretical Concepts - A description of the conceptual model of React without implementation burden. Some of this may not make sense on first reading. That's okay, it will make more sense with time.React Design Principles - Pay special attention to the section on scheduling. It does a great job of explaining the why of React Fiber. "},{"title":"Review​","type":1,"pageTitle":"React Fiber Architecture","url":"docs/Technologies/frontend/react/reactFiber#review","content":"Please check out the prerequisites section if you haven't already. Before we dive into the new stuff, let's review a few concepts. "},{"title":"What is reconciliation?​","type":1,"pageTitle":"React Fiber Architecture","url":"docs/Technologies/frontend/react/reactFiber#what-is-reconciliation","content":"reconciliationThe algorithm React uses to diff one tree with another to determine which parts need to be changed.updateA change in the data used to render a React app. Usually the result of setState. Eventually results in a re-render. The central idea of React's API is to think of updates as if they cause the entire app to re-render. This allows the developer to reason declaratively, rather than worry about how to efficiently transition the app from any particular state to another (A to B, B to C, C to A, and so on). Actually re-rendering the entire app on each change only works for the most trivial apps; in a real-world app, it's prohibitively costly in terms of performance. React has optimizations which create the appearance of whole app re-rendering while maintaining great performance. The bulk of these optimizations are part of a process called reconciliation. Reconciliation is the algorithm behind what is popularly understood as the &quot;virtual DOM.&quot; A high-level description goes something like this: when you render a React application, a tree of nodes that describes the app is generated and saved in memory. This tree is then flushed to the rendering environment — for example, in the case of a browser application, it's translated to a set of DOM operations. When the app is updated (usually via setState), a new tree is generated. The new tree is diffed with the previous tree to compute which operations are needed to update the rendered app. Although Fiber is a ground-up rewrite of the reconciler, the high-level algorithm described in the React docs will be largely the same. The key points are: Different component types are assumed to generate substantially different trees. React will not attempt to diff them, but rather replace the old tree completely.Diffing of lists is performed using keys. Keys should be &quot;stable, predictable, and unique.&quot; "},{"title":"Reconciliation versus rendering​","type":1,"pageTitle":"React Fiber Architecture","url":"docs/Technologies/frontend/react/reactFiber#reconciliation-versus-rendering","content":"The DOM is just one of the rendering environments React can render to, the other major targets being native iOS and Android views via React Native. (This is why &quot;virtual DOM&quot; is a bit of a misnomer.) The reason it can support so many targets is because React is designed so that reconciliation and rendering are separate phases. The reconciler does the work of computing which parts of a tree have changed; the renderer then uses that information to actually update the rendered app. This separation means that React DOM and React Native can use their own renderers while sharing the same reconciler, provided by React core. Fiber reimplements the reconciler. It is not principally concerned with rendering, though renderers will need to change to support (and take advantage of) the new architecture. "},{"title":"Scheduling​","type":1,"pageTitle":"React Fiber Architecture","url":"docs/Technologies/frontend/react/reactFiber#scheduling","content":"schedulingthe process of determining when work should be performed. workany computations that must be performed. Work is usually the result of an update (e.g. setState) React's Design Principles document is so good on this subject that I'll just quote it here: In its current implementation React walks the tree recursively and calls render functions of the whole updated tree during a single tick. However in the future it might start delaying some updates to avoid dropping frames. This is a common theme in React design. Some popular libraries implement the &quot;push&quot; approach where computations are performed when the new data is available. React, however, sticks to the &quot;pull&quot; approach where computations can be delayed until necessary. React is not a generic data processing library. It is a library for building user interfaces. We think that it is uniquely positioned in an app to know which computations are relevant right now and which are not. If something is offscreen, we can delay any logic related to it. If data is arriving faster than the frame rate, we can coalesce and batch updates. We can prioritize work coming from user interactions (such as an animation caused by a button click) over less important background work (such as rendering new content just loaded from the network) to avoid dropping frames. The key points are: In a UI, it's not necessary for every update to be applied immediately; in fact, doing so can be wasteful, causing frames to drop and degrading the user experience.Different types of updates have different priorities — an animation update needs to complete more quickly than, say, an update from a data store.A push-based approach requires the app (you, the programmer) to decide how to schedule work. A pull-based approach allows the framework (React) to be smart and make those decisions for you. React doesn't currently take advantage of scheduling in a significant way; an update results in the entire subtree being re-rendered immediately. Overhauling React's core algorithm to take advantage of scheduling is the driving idea behind Fiber.  Now we're ready to dive into Fiber's implementation. The next section is more technical than what we've discussed so far. Please make sure you're comfortable with the previous material before moving on. "},{"title":"What is a fiber?​","type":1,"pageTitle":"React Fiber Architecture","url":"docs/Technologies/frontend/react/reactFiber#what-is-a-fiber","content":"We're about to discuss the heart of React Fiber's architecture. Fibers are a much lower-level abstraction than application developers typically think about. If you find yourself frustrated in your attempts to understand it, don't feel discouraged. Keep trying and it will eventually make sense. (When you do finally get it, please suggest how to improve this section.) Here we go!  We've established that a primary goal of Fiber is to enable React to take advantage of scheduling. Specifically, we need to be able to pause work and come back to it later.assign priority to different types of work.reuse previously completed work.abort work if it's no longer needed. In order to do any of this, we first need a way to break work down into units. In one sense, that's what a fiber is. A fiber represents a unit of work. To go further, let's go back to the conception of React components as functions of data, commonly expressed as v = f(d)  It follows that rendering a React app is akin to calling a function whose body contains calls to other functions, and so on. This analogy is useful when thinking about fibers. The way computers typically track a program's execution is using the call stack. When a function is executed, a new stack frame is added to the stack. That stack frame represents the work that is performed by that function. When dealing with UIs, the problem is that if too much work is executed all at once, it can cause animations to drop frames and look choppy. What's more, some of that work may be unnecessary if it's superseded by a more recent update. This is where the comparison between UI components and function breaks down, because components have more specific concerns than functions in general. Newer browsers (and React Native) implement APIs that help address this exact problem: requestIdleCallback schedules a low priority function to be called during an idle period, and requestAnimationFrame schedules a high priority function to be called on the next animation frame. The problem is that, in order to use those APIs, you need a way to break rendering work into incremental units. If you rely only on the call stack, it will keep doing work until the stack is empty. Wouldn't it be great if we could customize the behavior of the call stack to optimize for rendering UIs? Wouldn't it be great if we could interrupt the call stack at will and manipulate stack frames manually? That's the purpose of React Fiber. Fiber is reimplementation of the stack, specialized for React components. You can think of a single fiber as a virtual stack frame. The advantage of reimplementing the stack is that you can keep stack frames in memory and execute them however (and whenever) you want. This is crucial for accomplishing the goals we have for scheduling. Aside from scheduling, manually dealing with stack frames unlocks the potential for features such as concurrency and error boundaries. We will cover these topics in future sections. In the next section, we'll look more at the structure of a fiber. "},{"title":"Structure of a fiber​","type":1,"pageTitle":"React Fiber Architecture","url":"docs/Technologies/frontend/react/reactFiber#structure-of-a-fiber","content":"Note: as we get more specific about implementation details, the likelihood that something may change increases. Please file a PR if you notice any mistakes or outdated information. In concrete terms, a fiber is a JavaScript object that contains information about a component, its input, and its output. A fiber corresponds to a stack frame, but it also corresponds to an instance of a component. Here are some of the important fields that belong to a fiber. (This list is not exhaustive.) type and key​ The type and key of a fiber serve the same purpose as they do for React elements. (In fact, when a fiber is created from an element, these two fields are copied over directly.) The type of a fiber describes the component that it corresponds to. For composite components, the type is the function or class component itself. For host components (div, span, etc.), the type is a string. Conceptually, the type is the function (as in v = f(d)) whose execution is being tracked by the stack frame. Along with the type, the key is used during reconciliation to determine whether the fiber can be reused. child and sibling​ These fields point to other fibers, describing the recursive tree structure of a fiber. The child fiber corresponds to the value returned by a component's render method. So in the following example function Parent() { return &lt;Child /&gt;; }  The child fiber of Parent corresponds to Child. The sibling field accounts for the case where render returns multiple children (a new feature in Fiber!): function Parent() { return [&lt;Child1 /&gt;, &lt;Child2 /&gt;]; }  The child fibers form a singly-linked list whose head is the first child. So in this example, the child of Parent is Child1 and the sibling of Child1 is Child2. Going back to our function analogy, you can think of a child fiber as a tail-called function. return​ The return fiber is the fiber to which the program should return after processing the current one. It is conceptually the same as the return address of a stack frame. It can also be thought of as the parent fiber. If a fiber has multiple child fibers, each child fiber's return fiber is the parent. So in our example in the previous section, the return fiber of Child1 and Child2 is Parent. pendingProps and memoizedProps​ Conceptually, props are the arguments of a function. A fiber's pendingProps are set at the beginning of its execution, and memoizedProps are set at the end. When the incoming pendingProps are equal to memoizedProps, it signals that the fiber's previous output can be reused, preventing unnecessary work. pendingWorkPriority​ A number indicating the priority of the work represented by the fiber. The ReactPriorityLevel module lists the different priority levels and what they represent. With the exception of NoWork, which is 0, a larger number indicates a lower priority. For example, you could use the following function to check if a fiber's priority is at least as high as the given level: function matchesPriority(fiber, priority) { return ( fiber.pendingWorkPriority !== 0 &amp;&amp; fiber.pendingWorkPriority &lt;= priority ); }  This function is for illustration only; it's not actually part of the React Fiber codebase. The scheduler uses the priority field to search for the next unit of work to perform. This algorithm will be discussed in a future section. alternate​ flushTo flush a fiber is to render its output onto the screen. work-in-progressA fiber that has not yet completed; conceptually, a stack frame which has not yet returned. At any time, a component instance has at most two fibers that correspond to it: the current, flushed fiber, and the work-in-progress fiber. The alternate of the current fiber is the work-in-progress, and the alternate of the work-in-progress is the current fiber. A fiber's alternate is created lazily using a function called cloneFiber. Rather than always creating a new object, cloneFiber will attempt to reuse the fiber's alternate if it exists, minimizing allocations. You should think of the alternate field as an implementation detail, but it pops up often enough in the codebase that it's valuable to discuss it here. output​ host componentThe leaf nodes of a React application. They are specific to the rendering environment (e.g., in a browser app, they are div, span, etc.). In JSX, they are denoted using lowercase tag names. Conceptually, the output of a fiber is the return value of a function. Every fiber eventually has output, but output is created only at the leaf nodes by host components. The output is then transferred up the tree. The output is what is eventually given to the renderer so that it can flush the changes to the rendering environment. It's the renderer's responsibility to define how the output is created and updated. "},{"title":"Future sections​","type":1,"pageTitle":"React Fiber Architecture","url":"docs/Technologies/frontend/react/reactFiber#future-sections","content":"That's all there is for now, but this document is nowhere near complete. Future sections will describe the algorithms used throughout the lifecycle of an update. Topics to cover include: how the scheduler finds the next unit of work to perform.how priority is tracked and propagated through the fiber tree.how the scheduler knows when to pause and resume work.how work is flushed and marked as complete.how side-effects (such as lifecycle methods) work.what a coroutine is and how it can be used to implement features like context and layout. "},{"title":"Related Videos​","type":1,"pageTitle":"React Fiber Architecture","url":"docs/Technologies/frontend/react/reactFiber#related-videos","content":"What's Next for React (ReactNext 2016) "},{"title":"Kubernetes (K8s, Hubernetes)","type":0,"sectionRef":"#","url":"docs/Technologies/devops/kubernetes/","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#features","content":""},{"title":"Multi-host container scheduling​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#multi-host-container-scheduling","content":"handled by Kube-schedulerit assigns containers also known as pods to nodes at runtimeit checks resources, quality of service, polices, and user specifications before scheduling "},{"title":"Scalability and Availability​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#scalability-and-availability","content":"the kubernetes master can be deployed in a highly available configurationmulti-region deployments are also availablee.g.: Kubernetes v1.17 architecture supports 5000 node clustersrun up to max 150000 total pods max 100 pods per node pods can be horizontally scaled via an API Flexibility and Modularization​ has a plug and play architecture it allows you to extend it when needed has add-ons: network drivers, service discovery, container runtime, visualization, and command if there are tasks that you need to perform for a specific environment can create an add-on to suit the need Registration and Discovery​ they are the 2 features that allow Kubernetes clusters to scale Registration​ new worker nodes can seamlessly register themselves with the Kubernetes master node Service Discovery​ allows for automatic detection of new services and endpoints via DNS or environment variables Persistent Storage​ a requested and important feature when working with containerspods can use persistent volumes to store data data is retained across pod restarts and crashes Application Upgrades and Downgrades​ upgrades and downgrades are supported out of the box "},{"title":"Maintenance​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#maintenance","content":"features are backward compatible for a few versionsall APIs are versionedable to turn on/off host during maintenance can unschedule the host so that no deployments can take place on it during upgrading or maintenancethen turn host back on and schedule deployments or jobs "},{"title":"Logging and Monitoring​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#logging-and-monitoring","content":"application monitoring or health checks are built-in e.g.: TCP, HTTP, container execution health checks are available out of the box have health checks to give status of the nodes failures are monitored by node controller Kubernetes status can also be monitored via add-ons e.g.: Metrics Server, cAdvisors and Prometheus, Heapster can use built-in logging frameworks or use your own "},{"title":"Secrets Management​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#secrets-management","content":"sensitive data is first class citizensecrets are mounted as data volumes or environment variablesit is specific to a single namespace thus they aren't shared across all applications "},{"title":"Kubernetes: basics​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#kubernetes-basics","content":""},{"title":"Kubernetes cluster architecture​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#kubernetes-cluster-architecture","content":" master node​ responsible for overall management of the Kubernetes clusterhas 3 components that takes care of communication, scheduling, and controllers API Server allows you to interact with the Kubernetes PAIits the front end of the Kubernetes control plane Scheduler it watches created Pods who do not have a Node design yetdesigns the Pod to run on a specific Node Controller Manager it runs controllers they are background threads that run tasks in a cluster has a bunch of different roles compiled into a single binary roles include Node Controller: responsible for the worker statesReplication Controller: responsible for maintaining the correct number of Pods for the replicater controllersEnd-Point Controller: joins services and Pods togetherService account and Token Controller: handle access management etcd​ a simple distributed key value storeKubernetes uses it as a database, and stores all cluster data here store informatione examples job scheduling info, pod details, stage information, etc. kubectl​ interact with master node with kubectlit is the command line interface for kuberneteshas a kubeconfig config file has server informationhas authentication information to access the API server worker nodes​ are nodes where the applications operatekubelet process it communicates with the master nodeit is an agent that communicates with the API server to see if Pods have been designed to the Nodesit executes Pod containers via the container engineit mounts and runt Pod volume and secretsit is aware of Pod of Node states and responds back to the Master kubernetes is a container orchestrator expectation is that you have a container native platform running on the worker nodes this is where Docker is used to work together with Kubelet to run containers on the Node kube-proxy it is the network proxy and load balancer for the service on a single worker nodeit handles the network routing for TCP and UDP Packlets, and performs connection forwarding Docker daemon allows running of containers containers of an application are tightly coupled together in a Pod Pod is a the smallest unit that can be scheduled as a deployment in Kubernetesthis group of containers share storage, Linux name space, IP addressesit is also co-located and share resources that are always scheduled togetheronce Pods have been deployed and running, the kubelet process communicates with the pods to check on state and health kube-proxy will route any packets to the Pods from other resources that might want communication worker nodes can be exposed to the internvet via load balancertraffic coming into the Nodes are handled by Kube-proxy this is how end-users talk to kubernetes application "},{"title":"Nodes and Pods​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#nodes-and-pods","content":"Node​ it serves as a worker machine is a kubernetes clusterit can be a physical computer or a virtual machinerequirements each node must have a kubelet runningcontainer tooling like Dockera kube-proxy process runninga process like Supervisord so that it can restart components recommendation if using Kubernetes in a production like setting, recommended to have at least a 3 Node cluster Tool: Minikube​ a lightweight kubernetes implementation that creates a VM on local machine and deploys a simple cluser containing only 1 node Pods​ it is a simplest unit that you can interact withcan create, deploy, and delete podsit represents 1 running process in the clusterinside a Pod docker application containerstorage resourcesa unique network IPoptions that govern how the container should runin some scenarios can have multiple docker containers running in a Pod but a Pod represents 1 single unit of deployment, which is a single instance of an application in Kubernetes that is tightly coupled and shared resources designed to be ephemeral, disposable entitiesdon't need to create Pods just by themselves in a production application only do that when need to test whether the underlying containers actually work Pods don't self-heal it a Pod dies, it will not be reschedulesif a Pod is exited from a Node because of lack of resources, it will not be restarted on different healthier Nodes always use higher-level constructs it manages and adds stability to Pods, called controllersthus user a controller like a deployment and don't use a Pod directly Pod States Pending Pod has been accepted by the Kubernete system, but a container has not been created yet Running where a Pod has been scheduled on a Node, and all of its containers are created, and at least 1 container is in a running state Succeeded all containers in the Pod have exited with an exit status of 0, indicating successful execution and will not be restarted Failed all containers in the Pod have exited and at least 1 container has failed and returned a non 0 exit status CrashLoopBackOff where a container fails to start, and Kubernetes tries repeatedly to restart the Pod "},{"title":"Controllers​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#controllers","content":"pods are the basic building blocks in kubernets but we should not use them by themselves and should use controllers instead benefits of controllers application reliability: where multiple instances of an application running prevent problems if 1 or more instance failsscaling: when the pods experience a high volume requests, kubernetes allows scaling up of the pods, allowing for a better user experienceload balancing: where having multiple versions of a pod running allow traffic to flow to different pods and doesn't overload 1 single pod or a node types of controllers ReplicaSets ensures that the specified number of replicas for a pod are running at all timesif the number of pods is less than what the Replicaset expects, for example when a pod crashed, it will start up a new podhowever, it can't be declared by itself as it requires deployment to do so Deployments provides a declarative updates for pods and ReplicaSets it means that you can describe the desired state of a deployment in a yaml file the deployment controller will align the actual state to match it can be defined to create new or replace existing ReplicaSetsmost applications are packages deployments, thus creating deployments are frequentit manages ReplicaSet, which manages a podbenefit is that it can automatically support a role-back mechanisma new ReplicaSet is created each time a new deployment config is deployed, but it also keeps the old ReplicaSet thus allows easy roll back to old state if something didn't work correctly ReplicaSets and Deployments controller were under the deprecated Replication Controlleruse cases pod management running a ReplicaSet allows us to deploy a number of pods and check their satus as a single unitscaling a ReplicaSet scales out the pods, and allows for the deployment to handle more trafficpause and resume used with larger changesetspause deployment, make changes, resume deploymentwhile a deployment is paused, it means that only updates are paused, but traffic will still get passed to the existing ReplicaSet status to check the health of pods and identify issues DaemonSets ensure all nodes run a copy of a specific podas nodes are added or removed from the cluster, it will add or remove the required podsdeleting a DaemonSet will also clean up all the pods that it created Jobs it is a supervisor process for pods carrying out batch processes to completionas the pod completes successfully, the job tracks information about the completion state of the poduse to run individual processes that need to run once and complete successfullytypically, jobs are run as a cron job to run a specific process at a specific time and repeat at another time Services it provides network connectivity to 1 or more pods in the clusterwhen a service is created, it designed a unique IP address that never changes through the lifetime of the servicePods are then configured to talk to the service and can rely on the service IP on any requests that might be sent to the podit is an important concept because they allow 1 set of pods to communicate with another set of pods in an easy wayit is best practice to use a service when trying to get 2 deployments to talk to each othertypes of services internal services, where an IP (cluster IP) is only reachable from within the clusterexternal services, where services running web servers, or publicly accessible pods, are exposed through an external endpoint these endpoints are available on each node through a specific port (NodePort) load balancer, for use cases when you want to expose your application to the public internet only used when using kubernetes in a cloud environment backed by a cloud provider "},{"title":"Labels, Selectors, and Namespaces​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#labels-selectors-and-namespaces","content":"Labels​ they are key value pairs that are attached to object like pods, services, and deploymentsfor users of kubernetes to identify attributes for objectstypically used to organize clusters in some meaningful waycan be added at deployment time or later on and changed at any timeexamples release: stable, release: canaryenvironemnt: dev, environemnt: qa, environemnt: productiontier: frontend, tier: backend, tier: cache labels used with selectors gives a powerl feature label selectors allow identification of a set of objects Selectors​ Equality-based Selectors = 2 labels or values of labels should be equal!= the values of the labels should not be equal Set-based Selectors IN a value should be inside a set of defined valuesNOTIN a value should not be in a set of defined valuesEXISTS determines whether a label exists or not Namespaces​ great for large enterprisesallows teams to access resources with accountabilitygreat way to divide cluster resources between usersprovides scope for names-must be unique in the namespaceDefault namespace created when kubernete is launchedobjects placed in default namespace at startnewer applications install their resources in a different namespace "},{"title":"Kubelet and Kube-proxy​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#kubelet-and-kube-proxy","content":"Kubelet​ it is the kubernetes node agent that runs on each noderoles communicates with API server to see if pods have been assigned to nodesexecutes pod containers via a container enginemounts and runs pod volumes and secretsexecutes health checks to identify pod/node status it works via Podspec which is a YAML file that describes a pod it takes a set of Podspec that are provided by the kube-api server and ensures that the containers described in those Podspecs are running and healthy it only manages containers that were created by the API server does not manages any container running on the node we can manage kubelet without an API server by using a HTTP endpoint or a file Kube-proxy: the network proxy​ a process that runs on all worker nodesit reflects services as defined on node, and can do simple network stream or round-robin forwarding across a set of backendsservice cluster IPs and ports are currently found through Docker --link compatible environment variables specifying ports opened by the service proxyhas 3 modes User space mode (most common)Iptables modeIpvs mode (alpha feature) why modes are important services defined against the API server: kube-proxy watches the API server for the addition and removal of servicesfor each new service, kube-proxy opens a randomly chosen port on the local nodeconnections made to the chosen port are proxied to 1 of the corresponding backend pods "},{"title":"Authentication and Authorization​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#authentication-and-authorization","content":""},{"title":"2 kinds of users​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#2-kinds-of-users","content":"Normal users humans interacting with the system Service accounts accounts managed by the K8s API "},{"title":"Information that defines a User​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#information-that-defines-a-user","content":"username: a string to indentify the end userUID: an indentifier that is more consistent or unique than usernamegroup: a string that associates users with a set of commonly grouped users used later by the authorization module extra fields: a map of strings that hold additional information that might be used by the authorization system "},{"title":"Definitions​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#definitions","content":"Authentication: does a user have access to the systemAuthorization: can the user perform an action in the system "},{"title":"Popular Authentication Modules​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#popular-authentication-modules","content":"Client Certificate Authentication​ client certificate authentication enabled by passing the --client-ca-file=FILENAME option to the API serverreferenced file must contain 1 or more certificate authorities to validate client certificatesthe common name of a client certificate is used as the username for the request Static token files (static password file)​ Token File Exampleuse --token-auth-file=FILE_WITH_TOKENS option on the command linetoken file is a CSV file with 4 columns: token, username, user UID, followed by optional group names e.g.: token,user,uid,&quot;group1, group2,group3&quot; OpenID Connect​ if you already have Open ID or Active Directory in your org, take a look at OpenID Connect tokens Webhook tokens​ the kube-apiserver calls out to a service defined by you to tell it whether a token is valid or notused commonly in scenarios where you want to integrate Kubernetes with a remote authentication service "},{"title":"Popular Authorization Modules​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#popular-authorization-modules","content":"ABAC: Attribute-based access control​ e.g. 1: { &quot;apiVersion&quot;: &quot;abac.authorization.kubernetes.io/v1beta1&quot;, &quot;kind&quot;: &quot;Policy&quot;, &quot;spec&quot;: { &quot;user&quot;: &quot;karthik&quot;, &quot;namespace&quot;: &quot;*&quot;, &quot;resource&quot;: &quot;*&quot;, &quot;apiGroup&quot;: &quot;*&quot; } } e.g. 2: { &quot;apiVersion&quot;: &quot;abac.authorization.kubernetes.io/v1beta1&quot;, &quot;kind&quot;: &quot;Policy&quot;, &quot;spec&quot;: { &quot;user&quot;: &quot;carisa&quot;, &quot;namespace&quot;: &quot;*&quot;, &quot;resource&quot;: &quot;*&quot;, &quot;apiGroup&quot;: &quot;*&quot;, &quot;readonly&quot;: true } }  RBAC: Role-based access control​ does a user have a role that can perform a specific action?lots of application want to use RBAC keep it turned on even if you don't use it directly e.g.: kind: Role apiVersion: rbac.authorization.k8s.io/v1 metadata: namespace: default name: pod-reader rules: - apiGroups: [&quot;&quot;] # &quot;&quot; indicates the core API group resources: [&quot;pods&quot;] verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;] RoleBinding or ClusterRoleBinding get &lt;- -&gt; User Pod-reader Role &lt;- Pod-reader Role Binding -&gt; Group list &lt;- -&gt; Service Account e.g.: kind: RoleBinding apiVersion: brace.authorization.k8s.io/v1 Metadata: name: read-pods Namespace: default subjects: kind: User name: karthik apiGroup: rbac.authroization.k8s.io roleRef: kind: Role name: pod-reader apiGroup: rbac.authorization.k8s.io  Webhook Authorization Mode​ the kube-apiserver calls out to a service defined by you to tell it whether a specific action can be performed it sends the token and the action the token is trying to perform this method works great when trying to integrate with a 3rd party authorization system, or if you want a complex set of rules "},{"title":"Installation​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#installation","content":"Install kubectl brew install kubectl verify installation kubectl version --client Install minikube brew install minikube verify installation minikube version "},{"title":"Yaml file​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#yaml-file","content":""},{"title":"application health checks​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#application-health-checks","content":"readinessProbe​ detects when a container can accept trafficgood readinessProd example apiVersion: apps/v1 kind: Deployment metadata: name: helloworld-deployment-with-probe spec: selector: matchLabels: app: helloworld replicas: 1 # tells deployment to run 1 pods matching the template template: # create pods using pod definition in this template metadata: labels: app: helloworld spec: containers: - name: helloworld image: karthequian/helloworld:latest ports: - containerPort: 80 readinessProbe: # length of time to wait for a pod to initialize # after pod startup, before applying health checking initialDelaySeconds: 5 # Amount of time to wait before timing out timeoutSeconds: 1 # Probe for http httpGet: # Path to probe path: / # Port to probe port: 80 bad readinessProd example apiVersion: apps/v1 kind: Deployment metadata: name: helloworld-deployment-with-bad-readiness-probe spec: selector: matchLabels: app: helloworld replicas: 1 # tells deployment to run 1 pods matching the template template: # create pods using pod definition in this template metadata: labels: app: helloworld spec: containers: - name: helloworld image: karthequian/helloworld:latest ports: - containerPort: 80 readinessProbe: # length of time to wait for a pod to initialize # after pod startup, before applying health checking initialDelaySeconds: 5 # Amount of time to wait before timing out timeoutSeconds: 1 # Probe for http httpGet: # Path to probe path: / # Port to probe port: 90  livenessProbe​ checks whether the container is alive and runninggood livenessProbe example apiVersion: apps/v1 kind: Deployment metadata: name: helloworld-deployment-with-probe spec: selector: matchLabels: app: helloworld replicas: 1 # tells deployment to run 1 pods matching the template template: # create pods using pod definition in this template metadata: labels: app: helloworld spec: containers: - name: helloworld image: karthequian/helloworld:latest ports: - containerPort: 80 livenessProbe: # length of time to wait for a pod to initialize # after pod startup, before applying health checking initialDelaySeconds: 5 # Amount of time to wait before timing out timeoutSeconds: 1 # Probe for http httpGet: # Path to probe path: / # Port to probe port: 80 bad livenessProbe example apiVersion: apps/v1 kind: Deployment metadata: name: helloworld-deployment-with-bad-liveness-probe spec: selector: matchLabels: app: helloworld replicas: 1 # tells deployment to run 1 pods matching the template template: # create pods using pod definition in this template metadata: labels: app: helloworld spec: containers: - name: helloworld image: karthequian/helloworld:latest ports: - containerPort: 80 livenessProbe: # length of time to wait for a pod to initialize # after pod startup, before applying health checking initialDelaySeconds: 5 # How often (in seconds) to perform the probe. periodSeconds: 5 # Amount of time to wait before timing out timeoutSeconds: 1 # Kubernetes will try failureThreshold times before giving up and restarting the Pod failureThreshold: 2 # Probe for http httpGet: # Path to probe path: / # Port to probe port: 90  "},{"title":"Commands​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#commands","content":""},{"title":"verify if cluster is up and running​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#verify-if-cluster-is-up-and-running","content":"kubectl get nodes "},{"title":"see what is in the cluster​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#see-what-is-in-the-cluster","content":"kubectl get all "},{"title":"create deployment, service, pod​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#create-deployment-service-pod","content":"use --record flag to record the rollout history currently deprecated and will be removed in the future kubectl create -f filename.yaml pod yaml file example apiVersion: v1 kind: Pod metadata: name: helloworld labels: env: production author: karthequian application_type: ui release-version: &quot;1.0&quot; spec: containers: - name: helloworld image: karthequian/helloworld:latest deployment yaml file example # Helloworld application- just the deployment apiVersion: apps/v1 kind: Deployment metadata: name: helloworld-deployment spec: selector: matchLabels: app: helloworld replicas: 1 # tells deployment to run 1 pods matching the template template: # create pods using pod definition in this template metadata: labels: app: helloworld spec: containers: - name: helloworld image: karthequian/helloworld:latest ports: - containerPort: 80 service yaml file example # Helloworld service for nodeports apiVersion: v1 kind: Service metadata: name: helloworld-service spec: type: NodePort ports: - port: 80 protocol: TCP targetPort: 80 selector: app: helloworld multiple files together (e.g.: deployment and service) use --- to separate different files apiVersion: apps/v1 kind: Deployment metadata: name: helloworld-all-deployment spec: selector: matchLabels: app: helloworld replicas: 1 # tells deployment to run 1 pods matching the template template: # create pods using pod definition in this template metadata: labels: app: helloworld spec: containers: - name: helloworld image: karthequian/helloworld:latest ports: - containerPort: 80 --- apiVersion: v1 kind: Service metadata: name: helloworld-all-service spec: type: NodePort ports: - port: 80 protocol: TCP targetPort: 80 selector: app: helloworld  "},{"title":"update deployment​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#update-deployment","content":"update an image kubectl set image deployment/deploymentname containername=newimagename "},{"title":"deletion​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#deletion","content":"delete a deployment kubectl delete deploy deploymentname delete a service kubectl delete svc servicename delete a pod kubectl delete pod podname delete pods via label kubectl delete pods -l labelkey=labelvalue "},{"title":"expose deployment as a service​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#expose-deployment-as-a-service","content":"kubectl expose deployment appname --type=NodePort "},{"title":"view deployments​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#view-deployments","content":"kubectl get deployments get deployment details with describe kubectl describe deployment deploymentname "},{"title":"introspect a deployment​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#introspect-a-deployment","content":"kubectl get deployment/helloworld -o yaml "},{"title":"view services​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#view-services","content":"kubectl get services get service details with describe kubectl describe service servicename "},{"title":"introspect a service​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#introspect-a-service","content":"kubectl get service/helloworld -o yaml "},{"title":"view pods​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#view-pods","content":"kubectl get pods show labels using --show-labels flag kubectl get pods --show-labels get filtered list of pods via labels with --selector or -l flag kubectl get pods --selector labelkey=labelvalue using multi labels kubectl get pods --selector labelkey1=labelvalue1,labelkey2=labelvalue2using in operator e.g.: search for release version between 1.0 to 2.0 kubectl get pods -l &quot;release-version in (1.0,2.0)&quot; using notin operator e.g.: search for release version not in 1.0 to 2.0 kubectl get pods -l &quot;release-version notin (1.0,2.0)&quot; get pod details with describe method 1 kubectl describe po/podname method 2 kubectl describe pod podname get pod logs kubectl logs podname enter the pod kubectl exec podname -it /bin/bash enter the pod for a specific container kubectl exec podname -it -c containername /bin/bash "},{"title":"view replicaSets​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#view-replicasets","content":"kubectl get rs get replicatSets details with describe kubectl describe rs replicasetname scale replicas kubectl scale -n namespacename deployment deploymentname --replicas=numberofreplicas "},{"title":"Modifying labels after deployment​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#modifying-labels-after-deployment","content":"pods add or modify label kubectl label po/podname app=newlabelname --overwrite delete label using - kubectl label pod/podname labelname- "},{"title":"view rollout history​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#view-rollout-history","content":"kubectl rollout history deployment/deploymentname "},{"title":"revert changes​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#revert-changes","content":"kubectl rollout undo deployment/deploymentname revert to a specific revision number with --to-revision flag kubectl rollout undo deployment/deploymentname --to-revision=revisionnumber "},{"title":"configmap​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#configmap","content":"create configmap​ this will pass the configmapkeyname=debug to the actual container as an environment variable kubectl create configmap configmapname --from-literal=configmapkeyname=debug must have a yaml file similar to the following apiVersion: apps/v1 kind: Deployment metadata: name: logreader-dynamic labels: app: logreader-dynamic spec: replicas: 1 selector: matchLabels: app: logreader-dynamic template: metadata: labels: app: logreader-dynamic spec: containers: - name: logreader image: karthequian/reader:latest env: - name: configmapkeyname valueFrom: configMapKeyRef: name: configmapname #Read from a configmap called log-level key: configmapkeyname #Read the key called log_level  view configmap​ kubectl get configmaps introspect a configmap​ kubectl get configmap/configmapname -o yaml "},{"title":"handling application secrets​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#handling-application-secrets","content":"create a secret​ kubectl create secret generic secretname --from-literal=secretkeyname=secretkeyvalue view secret list​ kubectl get secrets view a specific secret kubectl get secret secretname introspect secret the secret key value is encoded in the base 64 format kubectl get secret secretname -o yaml get secret key value in applications example after deployment, secret key value can be retrieved via logs apiVersion: apps/v1 kind: Deployment metadata: name: secretreader labels: name: secretreader spec: replicas: 1 selector: matchLabels: name: secretreader template: metadata: labels: name: secretreader spec: containers: - name: secretreader image: karthequian/secretreader:latest env: - name: secretkeyname valueFrom: secretKeyRef: name: secretname key: secretkeyname  "},{"title":"running jobs​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#running-jobs","content":"simple jobs​ view jobs kubectl get jobs need to have the following example create job apiVersion: batch/v1 kind: Job metadata: name: finalcountdown spec: template: metadata: name: finalcountdown spec: containers: - name: counter image: busybox command: - bin/sh - -c - &quot;for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done&quot; restartPolicy: Never #could also be Always or OnFailure  cron jobs​ view cron jobs kubectl get cronjob need to have the following example create job apiVersion: batch/v1beta1 kind: CronJob metadata: name: hellocron spec: schedule: &quot;*/1 * * * *&quot; #Runs every minute (cron syntax) or @hourly. jobTemplate: spec: template: spec: containers: - name: hellocron image: busybox args: - /bin/sh - -c - date; echo Hello from your Kubernetes cluster restartPolicy: OnFailure #could also be Always or Never suspend: false #Set to true if you want to suspend in the future this is create a new job each time it runs view the new job with kubectl get jobs edit cronjob kubectl edit cronjobs/cronjobname pause/stop a cronjob edit cronjobmodify suspend: false to suspend: true "},{"title":"daemonset​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#daemonset","content":"need create the following example apiVersion: apps/v1 kind: DaemonSet metadata: name: example-daemonset namespace: default labels: k8s-app: example-daemonset spec: selector: matchLabels: name: example-daemonset template: metadata: labels: name: example-daemonset spec: #nodeSelector: minikube # Specify if you want to run on specific nodes containers: - name: example-daemonset image: busybox args: - /bin/sh - -c - date; sleep 1000 resources: limits: memory: 200Mi requests: cpu: 100m memory: 200Mi terminationGracePeriodSeconds: 30 set infra as development if DaemonSet is not running, it means that there isn't any development nodes running the Node Selector watches for the infra=development label and only runs on nodes with that label apiVersion: apps/v1 kind: DaemonSet metadata: name: example-daemonset2 namespace: default labels: k8s-app: example-daemonset2 spec: selector: matchLabels: name: example-daemonset2 template: metadata: labels: name: example-daemonset2 spec: containers: - name: example-daemonset2 image: busybox args: - /bin/sh - -c - date; sleep 1000 resources: limits: memory: 200Mi requests: cpu: 100m memory: 200Mi terminationGracePeriodSeconds: 30 nodeSelector: infra: &quot;development&quot; set infra as production if DaemonSet is not running, it means that there isn't any production nodes running the Node Selector watches for the infra=production label and only runs on nodes with that label apiVersion: apps/v1 kind: DaemonSet metadata: name: prod-daemonset namespace: default labels: k8s-app: prod-daemonset spec: selector: matchLabels: name: prod-daemonset template: metadata: labels: name: prod-daemonset spec: containers: - name: prod-daemonset image: busybox args: - /bin/sh - -c - date; sleep 1000 resources: limits: memory: 200Mi requests: cpu: 100m memory: 200Mi terminationGracePeriodSeconds: 30 nodeSelector: infra: &quot;production&quot;  view daemonsets​ kubectl get daemonsets "},{"title":"stateful set​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#stateful-set","content":"example apiVersion: v1 kind: Service metadata: name: zk-hs labels: app: zk spec: ports: - port: 2888 name: server - port: 3888 name: leader-election clusterIP: None selector: app: zk --- apiVersion: v1 kind: Service metadata: name: zk-cs labels: app: zk spec: ports: - port: 2181 name: client selector: app: zk --- apiVersion: policy/v1beta1 kind: PodDisruptionBudget metadata: name: zk-pdb spec: selector: matchLabels: app: zk maxUnavailable: 1 --- apiVersion: apps/v1 kind: StatefulSet metadata: name: zk spec: selector: matchLabels: app: zk serviceName: zk-hs replicas: 3 updateStrategy: type: RollingUpdate podManagementPolicy: OrderedReady template: metadata: labels: app: zk spec: affinity: podAntiAffinity: requiredDuringSchedulingIgnoredDuringExecution: - labelSelector: matchExpressions: - key: &quot;app&quot; operator: In values: - zk topologyKey: &quot;kubernetes.io/hostname&quot; containers: - name: kubernetes-zookeeper imagePullPolicy: Always image: &quot;k8s.gcr.io/kubernetes-zookeeper:1.0-3.4.10&quot; resources: requests: memory: &quot;1Gi&quot; cpu: &quot;0.5&quot; ports: - containerPort: 2181 name: client - containerPort: 2888 name: server - containerPort: 3888 name: leader-election command: - sh - -c - &quot;start-zookeeper \\ --servers=3 \\ --data_dir=/var/lib/zookeeper/data \\ --data_log_dir=/var/lib/zookeeper/data/log \\ --conf_dir=/opt/zookeeper/conf \\ --client_port=2181 \\ --election_port=3888 \\ --server_port=2888 \\ --tick_time=2000 \\ --init_limit=10 \\ --sync_limit=5 \\ --heap=512M \\ --max_client_cnxns=60 \\ --snap_retain_count=3 \\ --purge_interval=12 \\ --max_session_timeout=40000 \\ --min_session_timeout=4000 \\ --log_level=INFO&quot; readinessProbe: exec: command: - sh - -c - &quot;zookeeper-ready 2181&quot; initialDelaySeconds: 10 timeoutSeconds: 5 livenessProbe: exec: command: - sh - -c - &quot;zookeeper-ready 2181&quot; initialDelaySeconds: 10 timeoutSeconds: 5 volumeMounts: - name: datadir mountPath: /var/lib/zookeeper securityContext: runAsUser: 1000 fsGroup: 1000 volumeClaimTemplates: - metadata: name: datadir spec: accessModes: [&quot;ReadWriteOnce&quot;] resources: requests: storage: 10Gi  view stateful sets​ kubectl get statefulsets "},{"title":"namespaces​","type":1,"pageTitle":"Kubernetes (K8s, Hubernetes)","url":"docs/Technologies/devops/kubernetes/#namespaces-1","content":"add -n flag followed by the namespacename when deploying a resource to a specific namespace adding the flag will make the resource exist in the namespace view namespaces​ kubectl get namespaces create namespace​ kubectl create namespace namespacename delete namespace​ kubectl delete namespace namespacename "},{"title":"React js","type":0,"sectionRef":"#","url":"docs/Technologies/frontend/react/","content":"","keywords":""},{"title":"using docker​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#using-docker","content":"run using docker docker run -it --name appName -p 3000:3000 -d imageName open bash in docker docker exec -it appName bash "},{"title":"setState​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#setstate","content":"import React from &quot;react&quot;; export default class App extends React.Component { state = { count: 0, }; handleClick = () =&gt; { // method 1 const {count} = this.state; this.setState({count: count + 1}); // method 2 this.setState((prevState) =&gt; ({count: prevState.count + 1})); }; render() { const {count} = this.state; return &lt;div onClick={this.handleClick}&gt;{count}&lt;/div&gt;; } }  import React, {useState} from &quot;react&quot;; export default function App() { const [count, setCount] = useState(0); // 0 = initial state const handleClick = () =&gt; { setCount(count + 1); }; return &lt;div onClick={handleClick}&gt;{count}&lt;/div&gt;; }  "},{"title":"handle multiple states​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#handle-multiple-states","content":"example 1 import React from &quot;react&quot;; export default class App extends React.Component { state = { name1: &quot;&quot;, name2: &quot;&quot;, }; handleChange = (e) =&gt; { this.setState({[e.target.name]: e.target.value}); // requires the name attribute to be declared at the html tag }; render() { const {name1} = this.state; return &lt;input onChange={this.handleChange} name={name1} value={name1} /&gt;; } }  import React, {useState} from &quot;react&quot;; export default function App() { const [state, setState] = useState({ name1: &quot;&quot;, name2: &quot;&quot;, }); const handleChange = (e) =&gt; { setState({ ...state, [e.target.name]: e.target.value, }); }; return ( &lt;input onChange={handleChange} value={state.name1} name={state.name1} /&gt; ); }  example 2 import React from &quot;react&quot;; export default class App extends React.Component { state = { name1: &quot;&quot;, name2: &quot;&quot;, }; handleChange = (prop) =&gt; (e) =&gt; this.setState({[prop]: e.target.value}); render() { const {name1} = this.state; return &lt;input onChange={this.handleChange(&quot;name1&quot;)} value={name1} /&gt;; } }  import React, {useState} from &quot;react&quot;; export default function App() { const [state, setState] = useState({ name1: &quot;&quot;, name2: &quot;&quot;, }); const handleChange = (prop) =&gt; (e) =&gt; { setState({ ...state, [prop]: e.target.value, }); }; return &lt;input onChange={handleChange(&quot;name1&quot;)} value={state.name1} /&gt;; }  "},{"title":"Batch state updates (not required in React 18)​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#batch-state-updates-not-required-in-react-18","content":"wrong way import React, {useState} from &quot;react&quot;; export default function App() { const [count1, setCount1] = useState(0); // 0 = initial state const [count2, setCount2] = useState(0); // 0 = initial state const handleClick = () =&gt; { // React doesn't automatically batch updates // react will re-render the UI twice for this case Promise.resolve().then(() =&gt; { setCount1(count1 + 1); setCount2(count2 + 1); } } return (&lt;div onClick={handleClick}&gt;{count}&lt;/div&gt;); }  correct way import React, {useState} from &quot;react&quot;; import {unstable_batchedUpdates} from &quot;react-dom&quot;; export default function App() { const [count1, setCount1] = useState(0); // 0 = initial state const [count2, setCount2] = useState(0); // 0 = initial state const handleClick = () =&gt; { // react will re-render the UI once Promise.resolve().then(() =&gt; { unstable_batchedUpdates(() =&gt; { setCount1(count1 + 1); setCount2(count2 + 1); }) } } return (&lt;div onClick={handleClick}&gt;{count}&lt;/div&gt;); }  "},{"title":"Lifecycle vs Hooks​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#lifecycle-vs-hooks","content":""},{"title":"ComponentDidMount​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#componentdidmount","content":"import React from &quot;react&quot;; export default class App extends React.Component { ComponentDidMount() { doSomething(); } render() { return &lt;div&gt;&lt;/div&gt;; } }  useEffect​ import React, {useEffect} from &quot;react&quot;; export default function App() { useEffect(() =&gt; { doSomething(); }, []); return &lt;div&gt;&lt;/div&gt;; }  "},{"title":"ComponentDidUpdate​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#componentdidupdate","content":"import React from &quot;react&quot;; export default class App extends React.Component { ComponentDidUpdate(prevProps, prevStates) { if (prevProps.something !== this.props.something) { doSomething(); } } render() { const {something} = this.props; return &lt;div&gt;{something}&lt;/div&gt;; } }  useEffect​ import React, {useEffect} from &quot;react&quot;; export default function App(props) { const {something} = props; useEffect(() =&gt; { doSomething(); }, [something]); return &lt;div&gt;{something}&lt;/div&gt;; }  "},{"title":"ComponentWillUnmount​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#componentwillunmount","content":"import React from &quot;react&quot;; export default class App extends React.Component { ComponentWillUnmount() { doSomething(); } render() { return &lt;div&gt;&lt;/div&gt;; } }  useEffect​ import React, {useEffect} from &quot;react&quot;; export default function App(props) { useEffect(() =&gt; { return doSomething; // must return the action for component when unmounted, must be an uncalled function }, []); // this does not matter return &lt;div&gt;&lt;/div&gt;; }  "},{"title":"ShouldComponentUpdate​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#shouldcomponentupdate","content":"Should be used if a function renders the same result given the same props and states (mainly for performance optimization) method 1: declaring in the shouldComponentUpdate method​ import React from &quot;react&quot;; export default class App extends React.Component { state = { name: &quot;&quot;, }; shouldComponentUpdate(nextProps, nextStates) { if (nextProps.something !== this.props.something) { return true; // allow rerendering } if (nextStates.name !== this.state.name) { return true; } return false; // do not allow rerendering } handleChange = (e) =&gt; { this.setState({name: e.target.value}); }; handleSubmit = (e) =&gt; { e.preventDefault(); console.log(this.state.name); }; render() { return ( &lt;form onSubmit={this.handleSubmit}&gt; &lt;input onChange={this.handleChange} value={this.state.name} /&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt; &lt;/form&gt; ); } }  method 2: use PureComponent (preferred method)​ import React from &quot;react&quot;; export default class App extends React.PureComponent { state = { name: &quot;&quot;, }; handleChange = (e) =&gt; { this.setState({name: e.target.value}); }; handleSubmit = (e) =&gt; { e.preventDefault(); console.log(this.state.name); }; render() { return ( &lt;form onSubmit={this.handleSubmit}&gt; &lt;input onChange={this.handleChange} value={this.state.name} /&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt; &lt;/form&gt; ); } }  method 3: use memo for functional components​ import React, {useState, memo} from &quot;react&quot;; function App() { const [name, setName] = useState(&quot;&quot;); const handleChange = (e) =&gt; { setName(e.target.value); }; const handleSubmit = (e) =&gt; { e.preventDefault(); console.log(name); }; return ( &lt;form onSubmit={handleSubmit}&gt; &lt;input onChange={handleChange} value={name} /&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt; &lt;/form&gt; ); } // return value is the inverse of shouldComponentUpdate function areEqual(prevProps, nextProps) { if (nextProps.name !== prevProps.name) { return false; // allow rerendering } return true; // do not allow rerendering } export default memo(App, areEqual);  "},{"title":"useMemo​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#usememo","content":"Memoization: cache result of function callWarning: do not prematurely optimize performance, use only as needed for expensive calculationsgives you referential equality between renders for valueswill only recompute the memoized value when 1 of the dependencies has changedhelp to avoid expensive calculations on every renderif no dependency array is provided, a new value will be computed on every rendercalls its function and returns the result value import React, {useState, useMemo} from &quot;react&quot;; const App = () =&gt; { const [count, setCount] = useState(0); const expensiveCount = useMemo(() =&gt; { return count ** 2; }, [count]); return &lt;&gt;{expensiveCount}&lt;/&gt;; }; export default App;  "},{"title":"useCallback for functional methods​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#usecallback-for-functional-methods","content":"Memoization: cache result of function callWarning: do not prematurely optimize performance, use only as needed for expensive calculationsgives you referential equality between renders for functionsreturns its memoized function when the dependencies changehelps prevent unneccessary renders of the children because the children will always be using the same function object e.g. shouldComponentUpdate import React, {useState, useCallback } from &quot;react&quot;; import DisplayCount from &quot;./DisplayCount&quot;; const App = () =&gt; { const [count, setCount] = useState(0); const showCount = useCallback(() =&gt; alert(`Count ${count}`)), [count]); return ( &lt;&gt; &lt;DisplayCount handleDisplay={showCount} /&gt; &lt;/&gt; ); }; export default App;  "},{"title":"useContext​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#usecontext","content":"allows us to work with react context api, which allows us to share data without passing propsA component calling useContext will always re-render when the context value changes optimize with memoization if component computation is expensive set state​ import {createContext} from &quot;react&quot;; export default MoodContext = createContext(null);  share state​ import React, {useState} from &quot;react&quot;; import MoodContext from &quot;./MoodContext&quot;; import MoodEmoji from &quot;./MoodEmoji&quot;; export default function App() { const [moodState] = useState({ happy: &quot;happy&quot;, sad: &quot;sad&quot;, }); return ( &lt;MoodContext.Provider value={moodState}&gt; &lt;MoodEmoji /&gt; &lt;/MoodContext.Provider&gt; ); }  use state​ using XxxContext.Consumer import React from &quot;react&quot;; import MoodContext from &quot;./MoodContext&quot;; export default function MoodEmoji() { return ( &lt;MoodContext.Consumer&gt;{(mood) =&gt; &lt;p&gt;{mood.happy}&lt;/p&gt;}&lt;/MoodContext.Consumer&gt; ); }  using useContext import React, {useContext} from &quot;react&quot;; import MoodContext from &quot;./MoodContext&quot;; export default function MoodEmoji() { const mood = useContext(MoodContext); return &lt;p&gt;{mood.happy}&lt;/p&gt;; }  use generic context​ GenericContext file import React, { Dispatch, createContext, SetStateAction, useState, PropsWithChildren } from &quot;react; export default function createCtx&lt;A&gt;(defaultValue: A) { type UpdateType = Dispatch&lt; SetStateAction&lt;typeof defaultValue&gt; &gt;; const defaultUpdate: UpdateType = () =&gt; defaultValue; const ctx = createContext({ state: defaultValue, update: defaultUpdate, }); function Provider(props: PropsWithChildren&lt;{}&gt;) { const [state, update] = useState(defaultValue); return &lt;ctx.Provider value={{ state, update }} {...props} /&gt;; } return [ctx, Provider] as const; }  set state with SampleContext file import createCtx from &quot;./GenericContext&quot;; export const [SampleContext, SampleProvider] = createCtx(&quot;default value&quot;);  share state import React from &quot;react&quot;; import {SampleProvider} from &quot;./SampleContext&quot;; import SampleFeature from &quot;./SampleFeature&quot;; export default function App() { return ( &lt;SampleProvider&gt; &lt;SampleFeature /&gt; &lt;/SampleProvider&gt; ); }  use state with useContext import React, {useContext} from &quot;react&quot;; import SampleContext from &quot;./SampleContext&quot;; export default function SomeFeature() { const {state: myStateName, update: handleUpdate} = useContext(SampleContext); return &lt;p onClick={() =&gt; handleUpdate(&quot;test&quot;)}&gt;{myStateName}&lt;/p&gt;; }  "},{"title":"useReducer​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#usereducer","content":"an alternative to useState returns an array of 2 values first value is the state, second value is dispatch function it uses the redux pattern and has a different way to manage state instead of updating the state directly, action is dispatched that goes to the reducerthe reducer determines how to compute the next state useReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one useReducer also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks React guarantees that dispatch function identity is stable and won’t change on re-renders This is why it’s safe to omit from the useEffect or useCallback dependency list Single state​ import React, {useReducer} from &quot;react&quot;; const initialState = 0; function reducer(state, action) { switch (action.type) { case &quot;increment&quot;: return state + 1; case &quot;decrement&quot;: return state - 1; default: throw new Error(); } } export default function App() { const [count, dispatch] = useReducer(reducer, initialState); const handleDecrement = () =&gt; dispatch({type: &quot;decrement&quot;}); return ( &lt;&gt; Count: {count} &lt;button onClick={handleDecrement}&gt;-&lt;/button&gt; &lt;/&gt; ); }  Multiple states​ import React, {useReducer} from &quot;react&quot;; const initialState = {count: 0}; function reducer(state, action) { switch (action.type) { case &quot;increment&quot;: return state + 1; case &quot;decrement&quot;: return state - 1; default: throw new Error(); } } export default function App() { const [state, dispatch] = useReducer(reducer, initialState); const handleDecrement = () =&gt; dispatch({type: &quot;decrement&quot;}); return ( &lt;&gt; Count: {state.count} &lt;button onClick={handleDecrement}&gt;-&lt;/button&gt; &lt;/&gt; ); }  Lazy initialization​ import React, {useReducer} from &quot;react&quot;; function init(initialCount) { return {count: initialCount}; } function reducer(state, action) { switch (action.type) { case &quot;increment&quot;: return {count: state.count + 1}; case &quot;decrement&quot;: return {count: state.count - 1}; case &quot;reset&quot;: return init(action.payload); default: throw new Error(); } } export default function App() { const [state, dispatch] = useReducer(reducer, initialCount, init); return ( &lt;&gt; Count: {state.count} &lt;button onClick={() =&gt; dispatch({type: &quot;reset&quot;, payload: initialCount})}&gt; Reset &lt;/button&gt; &lt;button onClick={() =&gt; dispatch({type: &quot;decrement&quot;})}&gt;-&lt;/button&gt; &lt;button onClick={() =&gt; dispatch({type: &quot;increment&quot;})}&gt;+&lt;/button&gt; &lt;/&gt; ); }  "},{"title":"useImperativeHandle​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#useimperativehandle","content":"customizes the instance value that is exposed to the parent components when using ref imperative code using refs should be avoided in most cases useImperativeHandle should be used with forwardRefit is mainly used to change the behavior of the exposed ref, which is a rare use caseuse cases if you build a reusable component library, you may need to get access to the underlying DOM element and then forward it so that it can be accessed by the consumers of the component library import React, {forwardRef, useRef} from &quot;react&quot;; const FancyInput = forwardRef((props, ref) =&gt; { const inputRef = useRef(); const activateFocus = () =&gt; { console.log(&quot;focused&quot;); inputRef.current.focus(); }; React.useImperativeHandle(ref, () =&gt; ({ activateFocus, })); return ( &lt;div&gt; &lt;input ref={inputRef} /&gt; &lt;button onClick={activateFocus}&gt;Focus from children&lt;/button&gt; &lt;/div&gt; ); }); export default FancyInput;  import React, {useRef} from &quot;react&quot;; import FancyInput from &quot;./FancyInput&quot;; function App() { const inputRef = useRef(); return ( &lt;div className=&quot;App&quot;&gt; &lt;FancyInput ref={inputRef} /&gt; &lt;button onClick={() =&gt; inputRef.current.activateFocus()}&gt; Focus from parent &lt;/button&gt; &lt;/div&gt; ); } export default App;  "},{"title":"useLayoutEffect​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#uselayouteffect","content":"identical to useEffect, but it fires synchronously after all DOM mutations difference is that the callback will run after render but before the actual updates have been displayed to the screen it will block visual UI updates until callback is completeduse cases situations when you need to calculate something in the UI before the DOM is visually updated If you’re migrating code from a class component useLayoutEffect fires in the same phase as componentDidMount and componentDidUpdate If you use server rendering neither useLayoutEffect nor useEffect can run until the JavaScript is downloaded To fix this, either move that logic to useEffect (if it isn’t necessary for the first render)or delay showing that component until after the client renders (if the HTML looks broken until useLayoutEffect runs) import React, {useRef, useLayoutEffect} from &quot;react&quot;; function App() { const myBtn = useRef(null); useLayoutEffect(() =&gt; { const rect = myBtn.current.getBoundingClientRect(); console.log(rect.height); }); return &lt;button ref={myBtn}&gt;button&lt;/button&gt;; } export default App;  "},{"title":"useTransition (React 18)​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#usetransition-react-18","content":"Returns a stateful value for the pending state of the transition, and a function to start it startTransition lets you mark updates in the provided callback as transitionsisPending indicates when a transition is active to show a pending stateUpdates in a transition yield to more urgent updates such as clicksUpdates in a transitions will not show a fallback for re-suspended content This allows the user to continue interacting with the current content while rendering the update Original code import {useState, useMemo} from &quot;react&quot;; function ProductList({products}) { return ( &lt;ul&gt; {products.map((product) =&gt; ( &lt;li&gt;{product}&lt;/li&gt; ))} &lt;/ul&gt; ); } export default function App() { const [filterTerm, setFilterTerm] = useState(&quot;&quot;); const dummyProducts = useMemo(() =&gt; { const products = []; for (let i = 0; i &lt; 10000; i++) { products.push(`Product ${i + 1}`); } return products; }, []); const filteredProducts = useMemo(() =&gt; { if (!filterTerm) { return dummyProducts; } return dummyProducts.filter((product) =&gt; product.includes(filterTerm)); }, [dummyProducts, filterTerm]); const updateFilterHandler = (event) =&gt; { setFilterTerm(event.target.value); }; return ( &lt;div id=&quot;app&quot;&gt; &lt;input type=&quot;text&quot; onChange={updateFilterHandler} /&gt; &lt;ProductList products={filteredProducts} /&gt; &lt;/div&gt; ); }  using the hook import {useState, useMemo, useTransition} from &quot;react&quot;; import &quot;./styles.css&quot;; function ProductList({products}) { return ( &lt;ul&gt; {products.map((product) =&gt; ( &lt;li&gt;{product}&lt;/li&gt; ))} &lt;/ul&gt; ); } export default function App() { const [isPending, startTransition] = useTransition(); const [filterTerm, setFilterTerm] = useState(&quot;&quot;); const dummyProducts = useMemo(() =&gt; { const products = []; for (let i = 0; i &lt; 10000; i++) { products.push(`Product ${i + 1}`); } return products; }, []); const filteredProducts = useMemo(() =&gt; { if (!filterTerm) { return dummyProducts; } return dummyProducts.filter((product) =&gt; product.includes(filterTerm)); }, [dummyProducts, filterTerm]); const updateFilterHandler = (event) =&gt; { startTransition(() =&gt; { setFilterTerm(event.target.value); }); }; return ( &lt;div id=&quot;app&quot;&gt; &lt;input type=&quot;text&quot; onChange={updateFilterHandler} /&gt; {isPending &amp;&amp; &lt;p style={{color: &quot;red&quot;}}&gt;Updating List...&lt;/p&gt;} &lt;ProductList products={filteredProducts} /&gt; &lt;/div&gt; ); }  "},{"title":"useDeferredValue (React 18)​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#usedeferredvalue-react-18","content":"accepts a value and returns a new copy of the value that will defer to more urgent updatesIf the current render is the result of an urgent update like user input, React will return the previous value and then render the new value after the urgent render has completed useDeferredValue only defers the value that you pass to it If you want to prevent a child component from re-rendering during an urgent update, you must also memoize that component with React.memo or React.useMemo Original code refer to useTransition original code exampleusing the hook import {useState, useMemo, useDeferredValue} from &quot;react&quot;; function ProductList({products}) { const deferredProducts = useDeferredValue(products); return ( &lt;ul&gt; {deferredProducts.map((product) =&gt; ( &lt;li&gt;{product}&lt;/li&gt; ))} &lt;/ul&gt; ); } export default function App() { const [filterTerm, setFilterTerm] = useState(&quot;&quot;); const dummyProducts = useMemo(() =&gt; { const products = []; for (let i = 0; i &lt; 10000; i++) { products.push(`Product ${i + 1}`); } return products; }, []); const filteredProducts = useMemo(() =&gt; { if (!filterTerm) { return dummyProducts; } return dummyProducts.filter((product) =&gt; product.includes(filterTerm)); }, [dummyProducts, filterTerm]); const updateFilterHandler = (event) =&gt; { setFilterTerm(event.target.value); }; return ( &lt;div id=&quot;app&quot;&gt; &lt;input type=&quot;text&quot; onChange={updateFilterHandler} /&gt; &lt;ProductList products={filteredProducts} /&gt; &lt;/div&gt; ); }  "},{"title":"useId (React 18)​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#useid-react-18","content":"a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatchesis not for generating keys in a list Keys should be generated from your data example import React, {useId} from &quot;react&quot;; function Checkbox() { const id = useId(); return ( &lt;&gt; &lt;label htmlFor={id}&gt;Do you like React?&lt;/label&gt; &lt;input id={id} type=&quot;checkbox&quot; name=&quot;react&quot; /&gt; &lt;/&gt; ); } export default Checkbox;  "},{"title":"Custom Hooks​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#custom-hooks","content":"useDebugValue​ used to display a label for custom hooks in React DevTools import {useState, useEffect, useDebugValue} from &quot;react&quot;; export default function useCount() { const [count, setCount] = useState(); useEffect(() =&gt; { doSomething(); return doAnotherThing(); }, [count]); const handleClick = () =&gt; { if (count === undefined) { setCount(0); } else { setCount(count + 1); } }; useDebugValue(count ?? &quot;haven't started counting&quot;); return { count, handleClick, }; }  import React from &quot;react&quot;; import useCount from &quot;./useCount&quot;; export default function App() { const {count, handleClick} = useCount(); return &lt;div onClick={handleClick}&gt;count {count}&lt;/div&gt;; }  "},{"title":"Forms​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#forms","content":""},{"title":"Uncontrolled form​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#uncontrolled-form","content":"import React from &quot;react&quot;; export default class App extends React.Component { constructor() { super(); this.name = React.createRef(); } handleSubmit = (e) =&gt; { e.preventDefault(); console.log(this.name.current.value); }; render() { return ( &lt;form onSubmit={this.handleSubmit}&gt; &lt;input ref={this.name} /&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt; &lt;/form&gt; ); } }  using useRef​ allows you to create a mutable plain javascript object that keeps the same reference between renderscan be used when there is a value that changes similar to setState however, it does not trigger a re-render if the value changes common use is to grab native HTML elements from the DOMthis hook should be used when you need to grab an element from the DOM import React, { useRef } from &quot;react&quot;; export default function App() =&gt; { const name = useRef(); const handleSubmit = e =&gt; { e.preventDefault(); console.log(name.current.value); }; return ( &lt;form onSubmit={handleSubmit}&gt; &lt;input ref={name} /&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt; &lt;/form&gt; ); }  "},{"title":"Controlled form​","type":1,"pageTitle":"React js","url":"docs/Technologies/frontend/react/#controlled-form","content":"import React from &quot;react&quot;; export default class App extends React.Component { state = { name: &quot;&quot;, }; handleChange = (e) =&gt; { this.setState({name: e.target.value}); }; handleSubmit = (e) =&gt; { e.preventDefault(); console.log(this.state.name); }; render() { return ( &lt;form onSubmit={this.handleSubmit}&gt; &lt;input onChange={this.handleChange} value={this.state.name} /&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt; &lt;/form&gt; ); } }  import React, { useState } from &quot;react&quot;; export default function App() =&gt; { const [name, setName] = useState(&quot;&quot;); const handleChange = e =&gt; { setName(e.target.value); } const handleSubmit = e =&gt; { e.preventDefault(); console.log(name); }; return ( &lt;form onSubmit={handleSubmit}&gt; &lt;input onChange={handleChange} value={name} /&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt; &lt;/form&gt; ); }  "},{"title":"Python","type":0,"sectionRef":"#","url":"docs/languageSpecific/python/","content":"","keywords":""},{"title":"Table of Contents​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#table-of-contents","content":"Hello WorldCommentsProgram Entry PointCollections ListDictionarySetTupleRangeEnumerateIteratorGenerator Types TypeStringRegular ExpressionFormatNumbersCombinatoricsDatetime Syntax ArgumentsSplat OperatorInlineClosureDecoratorClassDuck TypeEnumException System ExitPrintInputCommand Line ArgumentsOpenPathOS Commands Data JSONPickleCSVSQLiteMySQLBytesStructArrayMemory ViewDeque Advanced ThreadingOperatorIntrospectionMetaprogrammingEvalCoroutine Libraries Progress BarPlotTableCursesLoggingScrapingWebProfileNumPyImageAnimationAudioSynthesizerGamesPandasPlotlyCython "},{"title":"Hello World​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#hello-world","content":"python 2​ print &quot;Hello World&quot;  python 3​ print(&quot;Hello World&quot;) # &quot;Hello World\\n&quot; print(&quot;Hello&quot;, &quot;World&quot;, sep=&quot;/&quot;) # &quot;Hello/World&quot; print(&quot;Hello World&quot;, end=&quot;&quot;) # &quot;Hello World&quot;  back to top "},{"title":"Comments​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#comments","content":"# Single line comment &quot;&quot;&quot; multi-line comments &quot;&quot;&quot;  back to top "},{"title":"Program Entry Point​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#program-entry-point","content":"if __name__ === &quot;__main__&quot;: # do something  back to top "},{"title":"Collections​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#collections","content":""},{"title":"List​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#list","content":"import itertools import functools list = list[from_inclusive : to_exclusive : ±step_size] list.append(el) # Or: list += [el] list.extend(collection) # Or: list += collection list.sort() list.reverse() list = sorted(collection) iter = reversed(list) sum_of_elements = sum(collection) elementwise_sum = [sum(pair) for pair in zip(list_a, list_b)] sorted_by_second = sorted(collection, key=lambda el: el[1]) sorted_by_both = sorted(collection, key=lambda el: (el[1], el[0])) # Flatten list list_example = [[1, 2, 3], [4, 5, 6], [7], [8, 9]] flatter_list = list(itertools.chain.from_iterable(list_example)) # [1, 2, 3, 4, 5, 6, 7, 8, 9] product_of_elems = functools.reduce(lambda out, el: out * el, collection) list_of_chars = list(str) int = list.count(el) # Returns number of occurrences, also works on strings index = list.index(el) # Returns index of first occurrence or raises ValueError list.insert(index, el) # Inserts item at index and moves the rest to the right el = list.pop([index]) # Removes and returns item at index or from the end list.remove(el) # Removes first occurrence of item or raises ValueError list.clear() # Removes all items, also works on dictionary and set  back to top "},{"title":"Dictionary​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#dictionary","content":"view = dict.keys() # Coll. of keys that reflects changes view = dict.values() # Coll. of values that reflects changes view = dict.items() # Coll. of key-value tuples that reflects chgs value = dict.get(key, default=None) # Returns default if key is missing value = dict.setdefault(key, default=None) # Returns and writes default if key is missing dict = collections.defaultdict(type) # Creates a dict with default value of type dict = collections.defaultdict(lambda: 1) # Creates a dict with default value 1 dict = dict(collection) # Creates a dict from coll. of key-value pairs dict = dict(zip(keys, values)) # Creates a dict from two collections dict = dict.fromkeys(keys [, value]) # Creates a dict from collection of keys dict.update(dict) # Adds items. Replaces ones with matching keys value = dict.pop(key) # Removes item or raises KeyError {k for k, v in dict.items() if v == value} # Returns set of keys that point to the value {k: v for k, v in dict.items() if k in keys} # Returns a dictionary, filtered by keys  Counter from collections import Counter colors = ['blue', 'blue', 'blue', 'red', 'red'] counter = Counter(colors) counter['yellow'] += 1 # Counter({'blue': 3, 'red': 2, 'yellow': 1}) counter.most_common()[0] # ('blue', 3)  back to top "},{"title":"Set​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#set","content":"set = set() set.add(el) # Or: set |= {el} set.update(collection) # Or: set |= set set = set.union(coll.) # Or: set | set set = set.intersection(coll.) # Or: set &amp; set set = set.difference(coll.) # Or: set - set set = set.symmetric_difference(coll.) # Or: set ^ set bool = set.issubset(coll.) # Or: set = set bool = set.issuperset(coll.) # Or: set = set el = set.pop() # Raises KeyError if empty set.remove(el) # Raises KeyError if missing set.discard(el) # Doesn't raise an error  Frozen Set Is immutable and hashableThat means it can be used as a key in a dictionary or as an element in a set frozenset = frozenset(collection)  back to top "},{"title":"Tuple​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#tuple","content":"Tuple is an immutable and hashable list tuple = () tuple = (el, ) tuple = (el_1, el_2 [, ...])  Named Tuple Tuple's subclass with named elements from collections import namedtuple Point = namedtuple('Point', 'x y') p = Point(1, y=2) # Point(x=1, y=2) p[0] # 1 p.x # 1 getattr(p, 'y') # 2 p._fields # ('x', 'y') Point._fields # ('x', 'y')  back to top "},{"title":"Range​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#range","content":"range = range(to_exclusive) range = range(from_inclusive, to_exclusive) range = range(from_inclusive, to_exclusive, ±step_size) from_inclusive = range.start to_exclusive = range.stop  back to top "},{"title":"Enumerate​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#enumerate","content":"for i, el in enumerate(collection [, i_start]): ...  back to top "},{"title":"Iterator​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#iterator","content":"iter = iter(collection) # `iter(iter)` returns unmodified iterator iter = iter(function, to_exclusive) # A sequence of return values until 'to_exclusive' el = next(iter [, default]) # Raises StopIteration or returns 'default' on end list = list(iter) # Returns a list of iterator's remaining elements  Itertools from itertools import count, repeat, cycle, chain, islice iter = count(start=0, step=1) # Returns updated value endlessly. Accepts floats iter = repeat(el [, times]) # Returns element endlessly or 'times' times iter = cycle(collection) # Repeats the sequence endlessly iter = chain(coll_1, coll_2 [, ...]) # Empties collections in order iter = chain.from_iterable(collection) # Empties collections inside a collection in order iter = islice(collection, to_exclusive) iter = islice(collection, from_inclusive, to_exclusive [, +step_size])  back to top "},{"title":"Generator​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#generator","content":"Any function that contains a yield statement returns a generatorGenerators and iterators are interchangeable def count(start, step): while True: yield start start += step counter = count(10, 2) next(counter), next(counter), next(counter) # (10, 12, 14)  back to top "},{"title":"Types​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#types","content":""},{"title":"Type​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#type","content":"Everything is an objectEvery object has a typeType and class are synonymous type = type(el) # Or: el.__class__ bool = isinstance(el, type) # Or: issubclass(type(el), type) type('a'), 'a'.__class__, str # (class 'str', class 'str', class 'str')  Some types do not have built-in names, so they must be imported from types import FunctionType, MethodType, LambdaType, GeneratorType  Abstract Base Classes Each abstract base class specifies a set of virtual subclassesThese classes are then recognized by isinstance() and issubclass() as subclasses of the ABC, although they are really not from collections.abc import Sequence, Collection, Iterable isinstance([1, 2, 3], Iterable) # True  \tSequence\tCollection\tIterablelist, range, str\t☑\t☑\t☑ dict, set ☑\t☑ iter ☑ from numbers import Integral, Rational, Real, Complex, Number isinstance(123, Number) # True  \tIntegral\tRational\tReal\tComplex\tNumberint\t☑\t☑\t☑\t☑\t☑ fractions.Fraction ☑\t☑\t☑\t☑ float ☑\t☑\t☑ complex ☑\t☑ decimal.Decimal ☑ back to top "},{"title":"String​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#string","content":"str1 = &quot;test string&quot; str1.capitalize() # &quot;Test string&quot; str1.upper() # &quot;TEST STRING&quot; str1.lower() # &quot;test string&quot; str1.title() # &quot;Test String&quot; str = str.strip() # Strips all whitespace characters from both ends str = str.strip('chars') # Strips all passed characters from both ends str = str.lstrip() # Strips all whitespace characters from left end str = str.rstrip() # Strips all whitespace characters from right end list = str.split() # Splits on one or more whitespace characters list = str.split(sep=None, maxsplit=-1) # Splits on 'sep' str at most 'maxsplit' times. list = str.splitlines(keepends=False) # Splits on \\n,\\r,\\r\\n. Keeps them if 'keepends' str = str.join(coll_of_strings) # Joins elements using string as separator bool = sub_str in str # Checks if string contains a substring bool = str.startswith(sub_str) # Pass tuple of strings for multiple options bool = str.endswith(sub_str) # Pass tuple of strings for multiple options int = str.find(sub_str) # Returns start index of first match or -1 int = str.index(sub_str) # Same but raises ValueError if missing str = str.replace(old, new [, count]) # Replaces 'old' with 'new' at most 'count' times txt = &quot;Hello Sam!&quot; mytable = txt.maketrans(&quot;S&quot;, &quot;P&quot;) # Create a mapping table # use mapping table in the translate() method to replace any &quot;S&quot; characters with a &quot;P&quot; character txt.translate(mytable) # &quot;Hello Pam!&quot; str = chr(int) # Converts int to Unicode char int = ord(str) # Converts Unicode char to int  Property Methods \t!#$%...\ta-zA-Z\t1/4 1/2 3/4\tsup2/supsup3/supsup1/sup\t0-9isprintable()\t☑\t☑\t☑\t☑\t☑ isalnum() ☑\t☑\t☑\t☑ isnumeric() ☑\t☑\t☑ isdigit() ☑\t☑ isdecimal() ☑ str1 = &quot;&quot; str1.isspace() # False str2 = &quot; t &quot; str2.isspace() # False str3 = &quot; &quot; str3.isspace() # True # checks for \\t\\n\\r\\f\\v... str4 = &quot; \\n&quot; str4.isspace() # True  back to top "},{"title":"Regular Expression​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#regular-expression","content":"Argument flags=re.IGNORECASE can be used with all functionsArgument flags=re.MULTILINE makes ^ and $ match the start/end of each lineArgument flags=re.DOTALL makes dot also accept the \\nUse r\\1 or \\\\1 for backreferenceAdd ? after an operator to make it non-greedy import re str = re.sub(regex, new, text, count=0) # Substitutes all occurrences with 'new' list = re.findall(regex, text) # Returns all occurrences as strings list = re.split(regex, text, maxsplit=0) # Use brackets in regex to include the matches # Search() and match() return None if they can't find a match Match = re.search(regex, text) # Searches for first occurrence of the pattern Match = re.match(regex, text) # Searches only at the beginning of the text iter = re.finditer(regex, text) # Returns all occurrences as match objects  Match Object str = Match.group() # Returns the whole match, also group(0) str = Match.group(1) # Returns part in the first bracket tuple = Match.groups() # Returns all bracketed parts int = Match.start() # Returns start index of the match int = Match.end() # Returns exclusive end index of the match  Special Sequences By default digits, alphanumerics and whitespaces from all alphabets are matched, unless flags=re.ASCII argument is usedUse a capital letter for negation '\\d' == '[0-9]' # Matches any digit '\\w' == '[a-zA-Z0-9_]' # Matches any alphanumeric '\\s' == '[\\t\\n\\r\\f\\v]' # Matches any whitespace  back to top "},{"title":"Format​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#format","content":"str = f'{el_1}, {el_2}' str = '{}, {}'.format(el_1, el_2)  Attributes from collections import namedtuple Person = namedtuple('Person', 'name height') person = Person('Jean-Luc', 187) f'{person.height}' # '187' '{p.height}'.format(p=person) # '187'  General Options str = &quot;test f&quot;{str:10}&quot; # 'test ' f&quot;{str:^10}&quot; # ' test ' f&quot;{str:10}&quot; # ' test' f&quot;{str:.10}&quot; # 'test......' f&quot;{str:0}&quot; # 'test'  Strings !r calls object's repr() method, instead of str(), to get a string f&quot;{'abcde'!r:10}&quot; # &quot;'abcde' &quot; f&quot;{'abcde':10.3}&quot; # 'abc ' f&quot;{'abcde':.3}&quot; # 'abc'  Numbers f&quot;{123456:10,}&quot; # ' 123,456' f&quot;{123456:10_}&quot; # ' 123_456' f&quot;{123456:+10}&quot; # ' +123456' f&quot;{-123456:=10}&quot; # '- 123456' f&quot;{123456:}&quot; # '123456' f&quot;{-123456:}&quot; # '-123456'  Floats f&quot;{1.23456:10.3}&quot; # ' 1.23' f&quot;{1.23456:10.3f}&quot; # ' 1.235' f&quot;{1.23456:10.3e}&quot; # ' 1.235e+00' f&quot;{1.23456:10.3%}&quot; # ' 123.456%'  \tf&quot;{float}&quot;\tf&quot;{float:f}&quot;\tf&quot;{float:e}&quot;\tf&quot;{float:%}&quot;0.000056789\t'5.6789e-05'\t'0.000057'\t'5.678900e-05'\t'0.005679%' 0.00056789\t'0.00056789'\t'0.000568'\t'5.678900e-04'\t'0.056789%' 0.0056789\t'0.0056789'\t'0.005679'\t'5.678900e-03'\t'0.567890%' 0.056789\t'0.056789'\t'0.056789'\t'5.678900e-02'\t'5.678900%' 0.56789\t'0.56789'\t'0.567890'\t'5.678900e-01'\t'56.789000%' 5.6789\t'5.6789'\t'5.678900'\t'5.678900e+00'\t'567.890000%' 56.789\t'56.789'\t'56.789000'\t'5.678900e+01'\t'5678.900000%' 567.89\t'567.89'\t'567.890000'\t'5.678900e+02'\t'56789.000000%' \tf&quot;{float:.2}&quot;\tf&quot;{float:.2f}&quot;\tf&quot;{float:.2e}&quot;\tf&quot;{float:.2%&quot;0.000056789\t'5.7e-05'\t'0.00'\t'5.68e-05'\t'0.01%' 0.00056789\t'0.00057'\t'0.00'\t'5.68e-04'\t'0.06%' 0.0056789\t'0.0057'\t'0.01'\t'5.68e-03'\t'0.57%' 0.056789\t'0.057'\t'0.06'\t'5.68e-02'\t'5.68%' 0.56789\t'0.57'\t'0.57'\t'5.68e-01'\t'56.79%' 5.6789\t'5.7'\t'5.68'\t'5.68e+00'\t'567.89%' 56.789\t'5.7e+01'\t'56.79'\t'5.68e+01'\t'5678.90%' 567.89\t'5.7e+02'\t'567.89'\t'5.68e+02'\t'56789.00%' Ints f&quot;{90:c}&quot; # 'Z' f&quot;{90:b}&quot; # '1011010' f&quot;{90:X}&quot; # '5A'  back to top "},{"title":"Numbers​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#numbers","content":"Types int(str) and float(str) raise ValueError on malformed stringsDecimal numbers can be represented exactly, unlike foats where 1.1 + 2.2 != 3.3Precision of decimal operations is set with: decimal.getcontext().prec = int int = int(float/str/bool) # Or: math.floor(float) float = float(int/str/bool) # Or: reale±int complex = complex(real=0, imag=0) # Or: real ± realj Fraction = fractions.Fraction(0, 1) # Or: Fraction(numerator=0, denominator=1) Decimal = decimal.Decimal(str/int) # Or: Decimal((sign, digits, exponent))  Basic Functions num = pow(num, num) # Or: num ** num num = abs(num) # float = abs(complex) num = round(num [, ±ndigits]) # `round(126, -1) == 130`  Math from math import e, pi, inf, nan, isinf, isnan from math import cos, acos, sin, asin, tan, atan, degrees, radians from math import log, log10, log2  Statistics from statistics import mean, median, variance, stdev, pvariance, pstdev  Random from random import random, randint, choice, shuffle float = random() int = randint(from_inclusive, to_inclusive) el = choice(list) shuffle(list)  Bin, Hex int = ±0bbin # Or: ±0xhex int = int('±bin', 2) # Or: int('±hex', 16) int = int('±0bbin', 0) # Or: int('±0xhex', 0) '[-]0bbin' = bin(int) # Or: hex(int)  Bitwise Operators int = int &amp; int # And int = int | int # Or int = int ^ int # Xor (0 if both bits equal) int = int n_bits # Shift left ( for right) int = ~int # Not (also: -int - 1)  back to top "},{"title":"Combinatorics​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#combinatorics","content":"Every function returns an iteratorIf you want to print the iterator, you need to pass it to the list() function first! from itertools import product, combinations, combinations_with_replacement, permutations product([0, 1], repeat=3) # itertools.product object at 0x10b08ffc0 list(product([0, 1], repeat=3)) # [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)] list(product('ab', '12')) # [('a', '1'), ('a', '2'), ('b', '1'), ('b', '2')] list(combinations('abc', 2)) # [('a', 'b'), ('a', 'c'), ('b', 'c')] list(combinations_with_replacement('abc', 2)) # [('a', 'a'), ('a', 'b'), ('a', 'c'), ('b', 'b'), ('b', 'c'), ('c', 'c')] list(permutations('abc', 2)) # [('a', 'b'), ('a', 'c'), ('b', 'a'), ('b', 'c'), ('c', 'a'), ('c', 'b')]  back to top "},{"title":"Datetime​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#datetime","content":"Module 'datetime' provides 'date', 'time', 'datetime' and 'timedelta' classes All are immutable and hashable Time and datetime objects can be 'aware' (have defined timezone), or 'naive' (don't have defined timezone)If object is naive, it is presumed to be in the system's timezone python 2​ from datetime import date, time, datetime, timedelta from dateutil.tz import UTC, tzlocal, gettz, resolve_imaginary # included in python 2  python 3​ pip install python-dateutil from datetime import date, time, datetime, timedelta from dateutil.tz import UTC, tzlocal, gettz, resolve_imaginary # needs to install 3rd party library  Constructors Use date/datetime.weekday() to get the day of the week (Mon == 0)'fold=1' means the second pass in case of time jumping back for one hourdatetime aware = resolve_imaginary(datetime aware) fixes datetimes that fall into the missing hour date = date(year, month, day) time = time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, fold=0) datetime = datetime(year, month, day, hour=0, minute=0, second=0, ...) timedelta = timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)  Now To extract time use datetime naive.time(), datetime aware.time() or datetime aware.timetz() date/datetime naive = date/datetime.today() # Current local date or naive datetime datetime naive = datetime.utcnow() # Naive datetime from current UTC time datetime aware = datetime.now(tzinfo) # Aware datetime from current tz time  Timezone tzinfo = UTC # UTC timezone. London without DST tzinfo = tzlocal() # Local timezone, also gettz() tzinfo = gettz('Continent/City') # 'Continent/City_Name' timezone or None datetime aware = datetime.astimezone(tzinfo) # Datetime, converted to passed timezone time aware/datetime aware = time/datetime.replace(tzinfo=tzinfo) # Unconverted object with new timezone  Encode ISO strings come in following forms: 'YYYY-MM-DD', 'HH:MM:SS.ffffff[±offset]', or both separated by an arbitrary character Offset is formatted as: HH:MM Epoch on Unix systems is: '1970-01-01 00:00 UTC', '1970-01-01 01:00 CET', ... date/time/datetime = date/time/datetime.fromisoformat('iso') # Object from ISO string. Raises ValueError datetime = datetime.strptime(str, 'format') # Datetime from str, according to format date/datetime naive = date/datetime.fromordinal(int) # date/datetime naive from days since Christ, at midnight datetime naive = datetime.fromtimestamp(real) # Local time datetime naive from seconds since Epoch datetime aware = datetime.fromtimestamp(real, tz.) # Aware datetime from seconds since Epoch  Decode str = date/time/datetime.isoformat(sep='T') # Also timespec='auto/hours/minutes/seconds' str = date/time/datetime.strftime('format') # Custom string representation int = date/datetime.toordinal() # Days since Christ, ignoring time and tz float = datetime naive.timestamp() # Seconds since Epoch, from datetime naive in local tz float = datetime aware.timestamp() # Seconds since Epoch, from datetime aware  Format When parsing, %z also accepts ±HH:MMFor abbreviated weekday and month use %a and %b from datetime import datetime dt = datetime.strptime('2015-05-14 23:39:00.00 +0200', '%Y-%m-%d %H:%M:%S.%f %z') dt.strftime(&quot;%A, %dth of %B '%y, %I:%M%p %Z&quot;) # &quot;Thursday, 14th of May '15, 11:39PM UTC+02:00&quot;  Arithmetics date/datetime = date/datetime ± timedelta # Returned datetime can fall into missing hour timedelta = date/datetime naive - date/datetime naive # Returns the difference, ignoring time jumps timedelta = datetime aware - datetime aware # Ignores time jumps if they share tzinfo object timedelta = datetime_UTC - datetime_UTC # Convert datetimes to UTC to get the actual delta  back to top "},{"title":"Syntax​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#syntax","content":""},{"title":"Arguments​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#arguments","content":"Inside Function Call function(positional_args) # f(0, 0) function(keyword_args) # f(x=0, y=0) function(positional_args, keyword_args) # f(0, y=0)  Inside Function Definition def f(nondefault_args): # def f(x, y): ... def f(default_args): # def f(x=0, y=0): ... def f(nondefault_args, default_args): # def f(x, y=0): ...  back to top "},{"title":"Splat Operator​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#splat-operator","content":"Inside Function Call Splat expands a collection into positional arguments, while splatty-splat expands a dictionary into keyword arguments # method 1 args = (1, 2) kwargs = {'x': 3, 'y': 4, 'z': 5} functionName(*args, **kwargs) # method 2 functionName(1, 2, x=3, y=4, z=5)  Inside Function Definition Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary def add(*a): return sum(a) add(1, 2, 3) # 6  Legal argument combinations def f(x, y, z): # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3) def f(*, x, y, z): # f(x=1, y=2, z=3) def f(x, *, y, z): # f(x=1, y=2, z=3) | f(1, y=2, z=3) def f(x, y, *, z): # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) def f(*args): # f(1, 2, 3) def f(x, *args): # f(1, 2, 3) def f(*args, z): # f(1, 2, z=3) def f(x, *args, z): # f(1, 2, z=3) def f(**kwargs): # f(x=1, y=2, z=3) def f(x, **kwargs): # f(x=1, y=2, z=3) | f(1, y=2, z=3) def f(*, x, **kwargs): # f(x=1, y=2, z=3) def f(*args, **kwargs): # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3) def f(x, *args, **kwargs): # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3) def f(*args, y, **kwargs): # f(x=1, y=2, z=3) | f(1, y=2, z=3) def f(x, *args, z, **kwargs): # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)  Other Uses list = [*collection [, ...]] set = {*collection [, ...]} tuple = (*collection, [...]) dict = {**dict [, ...]} head, *body, tail = collection  back to top "},{"title":"Inline​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#inline","content":"Lambda function = lambda: return_value function = lambda argument_1, argument_2: return_value  Comprehensions list = [i+1 for i in range(10)] # [1, 2, ..., 10] set = {i for i in range(10) if i 5} # {6, 7, 8, 9} iter = (i+5 for i in range(10)) # (5, 6, ..., 14) dict = {i: i*2 for i in range(10)} # {0: 0, 1: 2, ..., 9: 18} # method 1 out = [i+j for i in range(10) for j in range(10)] # method 2 out = [] for i in range(10): for j in range(10): out.append(i+j)  Map, Filter, Reduce from functools import reduce iter = map(lambda x: x + 1, range(10)) # [1, 2, ..., 10] iter = filter(lambda x: x 5, range(10)) # {6, 7, 8, 9} obj = reduce(lambda out, x: out + x, range(10)) # 45  Any, All bool = any(collection) # False if empty bool = all(el[1] for el in collection) # True if empty  If - Else obj = expression_if_true if condition else expression_if_false [a if a else 'zero' for a in (0, 1, 2, 3)] # ['zero', 1, 2, 3]  Namedtuple, Enum, Dataclass from collections import namedtuple from enum import Enum from dataclasses import make_dataclass Point = namedtuple('Point', 'x y') point = Point(0, 0) Direction = Enum('Direction', 'n e s w') direction = Direction.n Creature = make_dataclass('Creature', ['location', 'direction']) creature = Creature(Point(0, 0), Direction.n)  back to top "},{"title":"Closure​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#closure","content":"have a closure in Python when: A nested function references a value of its enclosing functionand the enclosing function returns the nested functionIf multiple nested functions within enclosing function reference the same value, that value gets sharedTo dynamically access function's first free variable use function.__closure__[0].cell_contents def get_multiplier(a): def out(b): return a * b return out multiply_by_3 = get_multiplier(3) multiply_by_3(10) # 30  Partial Partial is also useful in cases when function needs to be passed as an argument because it enables us to set its arguments beforehand e.g.: defaultdict(function), iter(function, to_exclusive) and dataclass's field(default_factory=function) from functools import partial import operator as op function = partial(function [, arg_1, arg_2, ...]) multiply_by_3 = partial(op.mul, 3) multiply_by_3(10) # 30  Non-Local If variable is being assigned to anywhere in the scope, it is regarded as a local variableunless it is declared as a global or a nonlocal def get_counter(): i= 0 def out(): nonlocal i i += 1 return i return out counter = get_counter() counter(), counter(), counter() # (1, 2, 3)  back to top "},{"title":"Decorator​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#decorator","content":"A decorator takes a function, adds some functionality and returns it @decorator_name def function_that_gets_passed_to_decorator(): ...  Debugger Example Wraps is a helper decorator that copies the metadata of the passed function (func) to the function it is wrapping (out)Without it add.__name__ would return 'out' from functools import wraps def debug(func): @wraps(func) def out(*args, **kwargs): print(func.__name__) return func(*args, **kwargs) return out @debug def add(x, y): return x + y  LRU Cache Decorator that caches function's return valuesAll function's arguments must be hashableCPython interpreter limits recursion depth to 1000 by default To increase it use sys.setrecursionlimit(depth) from functools import lru_cache @lru_cache(maxsize=None) def fib(n): return n if n 2 else fib(n-2) + fib(n-1)  Parametrized Decorator A decorator that accepts arguments and returns a normal decorator that accepts a function from functools import wraps def debug(print_result=False): def decorator(func): @wraps(func) def out(*args, **kwargs): result = func(*args, **kwargs) print(func.__name__, result if print_result else '') return result return out return decorator @debug(print_result=True) def add(x, y): return x + y  back to top "},{"title":"Class​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#class","content":"Return value of repr() should be unambiguous and of str() readable If only repr() is defined, it will also be used for str() class Test: def __init__(self, a): self.a = a def __repr__(self): class_name = self.__class__.__name__ return f'{class_name}({self.a!r})' def __str__(self): return str(self.a) @classmethod def get_class_name(cls): return cls.__name__ Str() use cases test = Test(&quot;sample&quot;) print(test) # sample print(f&quot;{test}&quot;) # sample raise Exception(test) &quot;&quot;&quot; Traceback (most recent call last): File &quot;/path/to/file.py&quot;, line 27, in module raise Exception(test) Exception: sample shell returned 1 &quot;&quot;&quot;  import loguru # pip install loguru loguru.logger.debug(test) # 2022-04-04 02:43:02.509 | DEBUG | __main__:module:28 - sample import csv # open the file in the write mode file = open('path/to/csv_file', 'w') csv.writer(file).writerow([test]) ```  Repr() use cases test = Test(&quot;sample&quot;) print([test]) # [Test('sample')] print(f'{test!r}') # Test('sample')  import loguru # pip install loguru loguru.logger.exception(test) &quot;&quot;&quot; 2022-04-04 02:51:52.414 | ERROR | __main__:module:25 - sample NoneType: None &quot;&quot;&quot; import dataclasses Z = dataclasses.make_dataclass('Z', ['a']) print(Z(test)) # Z(a=Test('sample')) ```  Constructor Overloading class name: def __init__(self, a=None): self.a = a Inheritance class Person: def __init__(self, name, age): self.name = name self.age = age  class Employee(Person): def __init__(self, name, age, staff_num): super().__init__(name, age) self.staff_num = staff_num ```  Multiple Inheritance class A: pass class B: pass class C(A, B): pass # MRO determines the order in which parent classes are traversed when searching for a method C.mro() # [class 'C', class 'A', class 'B', class 'object'] Property Pythonic way of implementing getters and setters class MyClass: @property def a(self): return self._a @a.setter def a(self, value): self._a = value  el = MyClass() el.a = 123 el.a # 123  - Dataclass - Decorator that automatically generates init(), repr() and eq() special methods - Objects can be made sortable with 'order=True' and/or immutable and hashable with 'frozen=True' - Function field() is needed because `attr_name: list = []` would make a list that is shared among all instances - Default_factory can be any callable ```python from dataclasses import dataclass, field @dataclass(order=False, frozen=False) class class_name: attr_name_1: type attr_name_2: type = default_value attr_name_3: list/dict/set = field(default_factory=list/dict/set)  Inline from dataclasses import make_dataclass  class = make_dataclass('class_name', coll_of_attribute_names) class = make_dataclass('class_name', coll_of_tuples) tuple = ('attr_name', type [, default_value]) ```  Slots Mechanism that restricts objects to attributes listed in 'slots' and significantly reduces their memory footprint class MyClassWithSlots: __slots__ = ['a'] def __init__(self): self.a = 1 Copy from copy import copy, deepcopy  object = copy(object) object = deepcopy(object)  [back to top](#table-of-contents) ### Duck Type - A duck type is an implicit type that prescribes a set of special methods - Any object that has those methods defined is considered a member of that duck type - Comparable - If `eq()` method is not overridden, it returns `id(self) == id(other)`, which is the same as 'self is other' - That means all objects compare not equal by default - Only the left side object has eq() method called, unless it returns NotImplemented, in which case the right object is consulted ```python class MyComparable: def __init__(self, a): self.a = a def __eq__(self, other): if isinstance(other, type(self)): return self.a == other.a return NotImplemented  Hashable Hashable object needs both hash() and eq() methods and its hash value should never change Hashable objects that compare equal must have the same hash value, meaning default hash() that returns id(self) will not do That is why Python automatically makes classes unhashable if you only implement eq() class MyHashable: def __init__(self, a): self._a = a @property def a(self): return self._a def __eq__(self, other): if isinstance(other, type(self)): return self.a == other.a return NotImplemented def __hash__(self): return hash(self.a) Sortable With total_ordering decorator, you only need to provide eq() and one of lt(), gt(), le() or ge() special methods from functools import total_ordering @total_ordering class MySortable: def __init__(self, a): self.a = a def __eq__(self, other): if isinstance(other, type(self)): return self.a == other.a return NotImplemented def __lt__(self, other): if isinstance(other, type(self)): return self.a other.a return NotImplemented Iterator Any object that has methods next() and iter() is an iteratorNext() should return next item or raise StopIterationIter() should return 'self'Python has many different iterator objects Iterators returned by the iter() function, such as list_iterator and set_iteratorObjects returned by the itertools module, such as count, repeat and cycleGenerators returned by the generator functions and generator expressionsFile objects returned by the open() function, etc class Counter: def __init__(self): self.i = 0 def __next__(self): self.i += 1 return self.i def __iter__(self): return self  counter = Counter() next(counter), next(counter), next(counter) # (1, 2, 3)  - Callable - All functions and classes have a call() method, hence are callable - When this cheatsheet uses `function` as an argument, it actually means `callable` ```python class Counter: def __init__(self): self.i = 0 def __call__(self): self.i += 1 return self.i counter = Counter() counter(), counter(), counter() # (1, 2, 3)  Context Manager Enter() should lock the resources and optionally return an objectExit() should release the resourcesAny exception that happens inside the with block is passed to the exit() methodIf it wishes to suppress the exception it must return a true value class MyOpen: def __init__(self, filename): self.filename = filename def __enter__(self): self.file = open(self.filename) return self.file def __exit__(self, exc_type, exception, traceback): self.file.close()  with open('test.txt', 'w') as file: file.write('Hello World!') with MyOpen('test.txt') as file: print(file.read()) Hello World!  - Iterable - Only required method is iter() - It should return an iterator of object's items - Contains() automatically works on any object that has iter() defined ```python class MyIterable: def __init__(self, a): self.a = a def __iter__(self): return iter(self.a) def __contains__(self, el): return el in self.a obj = MyIterable([1, 2, 3]) [el for el in obj] # [1, 2, 3] 1 in obj # True  Collection Only required methods are iter() and len() class MyCollection: def __init__(self, a): self.a = a def __iter__(self): return iter(self.a) def __contains__(self, el): return el in self.a def __len__(self): return len(self.a) Sequence Only required methods are len() and getitem()Getitem() should return an item at index or raise IndexErrorIter() and contains() automatically work on any object that has getitem() definedReversed() automatically works on any object that has getitem() and len() defined class MySequence: def __init__(self, a): self.a = a def __iter__(self): return iter(self.a) def __contains__(self, el): return el in self.a def __len__(self): return len(self.a) def __getitem__(self, i): return self.a[i] def __reversed__(self): return reversed(self.a) ABC Sequence It's a richer interface than the basic sequenceExtending it generates iter(), contains(), reversed(), index() and count()Unlike 'abc.Iterable' and 'abc.Collection', it is not a duck type That is why 'issubclass(MySequence, abc.Sequence)' would return False even if MySequence had all the methods defined from collections import abc  class MyAbcSequence(abc.Sequence): def init(self, a): self.a = a  def __len__(self): return len(self.a) def __getitem__(self, i): return self.a[i]   - available special methods - iter(), contains(), len(), getitem(), reversed(), index(), count() - Other ABCs that generate missing methods are: MutableSequence, Set, MutableSet, Mapping and MutableMapping - Names of their required methods are stored in `abc.__abstractmethods__` [back to top](#table-of-contents) ### Enum - If there are no numeric values before auto(), it returns 1 - Otherwise it returns an increment of the last numeric value ```python from enum import Enum, auto class enum_name(Enum): member_name_1 = value_1 member_name_2 = value_2_a, value_2_b member_name_3 = auto() member = enum.member_name # Returns a member member = enum['member_name'] # Returns a member or raises KeyError member = enum(value) # Returns a member or raises ValueError str = member.name # Returns member's name obj = member.value # Returns member's value list_of_members = list(enum) member_names = [a.name for a in enum] member_values = [a.value for a in enum] random_member = random.choice(list(enum))  def get_next_member(member): members = list(member.__class__) index = (members.index(member) + 1) % len(members) return members[index]  Inline Cutlery = Enum('Cutlery', 'fork knife spoon') Cutlery = Enum('Cutlery', ['fork', 'knife', 'spoon']) Cutlery = Enum('Cutlery', {'fork': 1, 'knife': 2, 'spoon': 3}) User-defined functions cannot be values, so they must be wrapped Another solution in this particular case is to use built-in functions and() and or() from the module operator from functools import partial  LogicOp = Enum('LogicOp', {'AND': partial(lambda l, r: l and r), 'OR' : partial(lambda l, r: l or r)}) ```  back to top "},{"title":"Exception​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#exception","content":"Basic Example try: code except exception: code Complex Example Code inside the 'else' block will only be executed if 'try' block had no exceptionCode inside the 'finally' block will always be executed. try: code_1 except exception_a: code_2_a except exception_b: code_2_b else: code_2_c finally: code_3 Catching Exceptions Also catches subclasses of the exceptionUse traceback.print_exc() to print the error message to stderr except exception: except exception as name: except (exception, ...): except (exception, ...) as name: Raising Exceptions raise exception raise exception() raise exception(el [, ...]) Re-raising caught exception except exception as name: ... raise Exception Object arguments = name.args exc_type = name.__class__ filename = name.__traceback__.tb_frame.f_code.co_filename func_name = name.__traceback__.tb_frame.f_code.co_name line = linecache.getline(filename, name.__traceback__.tb_lineno) error_msg = traceback.format_exception(exc_type, name, name.__traceback__) Built-in Exceptions BaseException ├── SystemExit # Raised by the sys.exit() function ├── KeyboardInterrupt # Raised when the user hits the interrupt key (ctrl-c) └── Exception # User-defined exceptions should be derived from this class ├── ArithmeticError # Base class for arithmetic errors │ └── ZeroDivisionError # Raised when dividing by zero ├── AttributeError # Raised when an attribute is missing ├── EOFError # Raised by input() when it hits end-of-file condition ├── LookupError # Raised when a look-up on a collection fails │ ├── IndexError # Raised when a sequence index is out of range │ └── KeyError # Raised when a dictionary key or set element is not found ├── NameError # Raised when a variable name is not found ├── OSError # Failures such as “file not found” or “disk full” │ └── FileNotFoundError # When a file or directory is requested but doesn't exist ├── RuntimeError # Raised by errors that don't fall in other categories │ └── RecursionError # Raised when the maximum recursion depth is exceeded ├── StopIteration # Raised by next() when run on an empty iterator ├── TypeError # Raised when an argument is of wrong type └── ValueError # When an argument is of right type but inappropriate value └── UnicodeError # Raised when encoding/decoding strings to/from bytes fails Collections and their exceptions list\tdict\tsetgetitem()\tIndexError\tKeyError pop()\tIndexError\tKeyError\tKeyError remove()\tValueError KeyError index()\tValueError Useful built-in exceptions: raise TypeError('Argument is of wrong type!') raise ValueError('Argument is of right type but inappropriate value!') raise RuntimeError('None of above!') User-defined Exceptions class MyError(Exception): pass  class MyInputError(MyError): pass  [back to top](#table-of-contents) ## System ### Exit - Exits the interpreter by raising SystemExit exception ```python import sys sys.exit() # Exits with exit code 0 (success) sys.exit(el) # Prints to stderr and exits with 1 sys.exit(int) # Exits with passed exit code  back to top "},{"title":"Print​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#print","content":"Use file=sys.stderr for messages about errors Use `flush=True“ to forcibly flush the stream print(el_1, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Pretty Print Levels deeper than 'depth' get replaced by '...'. from pprint import pprint  pprint(collection, width=80, depth=None, compact=False, sort_dicts=True) ```  back to top "},{"title":"Input​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#input","content":"Reads a line from user input or pipe if present Trailing newline gets strippedPrompt string is printed to the standard output before reading inputRaises EOFError when user hits EOF (ctrl-d/z) or input stream gets exhausted str = input(prompt=None)  back to top "},{"title":"Command Line Arguments​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#command-line-arguments","content":"import sys script_name = sys.argv[0] arguments = sys.argv[1:]  Argument Parser Use help=str to set argument description Use default=el to set the default value Use type=FileType(mode) for files from argparse import ArgumentParser, FileType  p = ArgumentParser(description=str) p.add_argument('-short_name', '--name', action='store_true') # Flag p.add_argument('-short_name', '--name', type=type) # Option p.add_argument('name', type=type, nargs=1) # First argument p.add_argument('name', type=type, nargs='+') # Remaining arguments p.add_argument('name', type=type, nargs='*') # Optional arguments args = p.parse_args() # Exits on error value = args.name ```  back to top "},{"title":"Open​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#open","content":"Opens the file and returns a corresponding file object encoding=None means that the default encoding is used, which is platform dependent Best practice is to use encoding=&quot;utf-8&quot; whenever possible newline=None means all different end of line combinations are converted to '\\n' on read while on write all \\n characters are converted to system's default line separator newline=&quot;&quot; means no conversions take place but input is still broken into chunks by readline() and readlines() on either \\n, \\r or \\r\\n file = open('path', mode='r', encoding=None, newline=None) Modes r - Read (default)w - Write (truncate)x - Write or fail if the file already existsa - Appendw+ - Read and write (truncate)r+ - Read and write from the starta+ - Read and write from the endt - Text mode (default)b - Binary mode Exceptions FileNotFoundError can be raised when reading with r or r+FileExistsError can be raised when writing with xIsADirectoryError and PermissionError can be raised by anyOSError is the parent class of all listed exceptions File Object Methods do not add or strip trailing newlines, even writelines() file.seek(0) # Moves to the start of the file file.seek(offset) # Moves &quot;offset&quot; chars/bytes from the start file.seek(0, 2) # Moves to the end of the file bin_file.seek(±offset, anchor) # Anchor: 0 start, 1 current position, 2 end str/bytes = file.read(size=-1) # Reads 'size' chars/bytes or until EOF str/bytes = file.readline() # Returns a line or empty string/bytes on EOF list = file.readlines() # Returns a list of remaining lines str/bytes = next(file) # Returns a line using buffer, do not mix file.write(str/bytes) # Writes a string or bytes object file.writelines(collection) # Writes a collection of strings or bytes objects file.flush() # Flushes write buffer Read Text from File def read_file(filename): with open(filename, encoding='utf-8') as file: return file.readlines() Write Text to File def write_to_file(filename, text): with open(filename, 'w', encoding='utf-8') as file: file.write(text)  back to top "},{"title":"Path​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#path","content":"from os import getcwd, path, listdir from glob import glob str = getcwd() # Returns the current working directory str = path.join(path, ...) # Joins two or more pathname components str = path.abspath(path) # Returns absolute path str = path.basename(path) # Returns final component of the path str = path.dirname(path) # Returns path without the final component tup = path.splitext(path) # Splits on last period of the final component list = listdir(path='.') # Returns filenames located at path list = glob('pattern') # Returns paths matching the wildcard pattern bool = path.exists(path) # Or: Path.exists() bool = path.isfile(path) # Or: DirEntry/Path.is_file() bool = path.isdir(path) # Or: DirEntry/Path.is_dir()  DirEntry Using scandir() instead of listdir() can significantly increase the performance of code that also needs file type information from os import scandir  iter = scandir(path='.') # Returns DirEntry objects located at path str = DirEntry.path # Returns path as a string str = DirEntry.name # Returns final component as a string file = open(DirEntry) # Opens the file and returns file object  - Path Object ```python from pathlib import Path Path = Path(path [, ...]) # Accepts strings, Paths and DirEntry objects Path = path / path [/ ...] # One of the paths must be a Path object Path = Path() # Returns relative cwd, also Path('.') Path = Path.cwd() # Returns absolute cwd, also Path().resolve() Path = Path.resolve() # Returns absolute Path without symlinks Path = Path.parent # Returns Path without final component str = Path.name # Returns final component as a string str = Path.stem # Returns final component without extension str = Path.suffix # Returns final component's extension tup = Path.parts # Returns all components as strings iter = Path.iterdir() # Returns dir contents as Path objects iter = Path.glob('pattern') # Returns Paths matching the wildcard pattern str = str(Path) # Returns path as a string file = open(Path) # Opens the file and returns file object  back to top "},{"title":"OS Commands​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#os-commands","content":"Files and Directories Paths can be either strings, Paths or DirEntry objects Functions report OS related errors by raising either OSError or one of its subclasses import os, shutil  os.chdir(path) # Changes the current working directory os.mkdir(path, mode=0o777) # Creates a directory. Mode is in octal shutil.copy(from, to) # Copies the file, 'to' can exist or be a dir shutil.copytree(from, to) # Copies the directory, 'to' must not exist os.rename(from, to) # Renames/moves the file or directory os.replace(from, to) # Same, but overwrites 'to' if it exists os.remove(path) # Deletes the file os.rmdir(path) # Deletes the empty directory shutil.rmtree(path) # Deletes the directory ```  Shell Commands import os  str = os.popen('shell_command').read()  - Sends '1 + 1' to the basic calculator and captures its output: ```python from subprocess import run run('bc', input='1 + 1\\n', capture_output=True, encoding='utf-8') # CompletedProcess(args='bc', returncode=0, stdout='2\\n', stderr='')  Sends test.in to the basic calculator running in standard mode and saves its output to test.out from shlex import split  os.popen('echo 1 + 1 test.in') run(split('bc -s'), stdin=open('test.in'), stdout=open('test.out', 'w')) # CompletedProcess(args=['bc', '-s'], returncode=0) open('test.out').read() # '2\\n'  [back to top](#table-of-contents) ## Data ### JSON - Text file format for storing collections of strings and numbers ```python import json str = json.dumps(object, ensure_ascii=True, indent=None) object = json.loads(str)  Read Object from JSON File def read_json_file(filename): with open(filename, encoding='utf-8') as file: return json.load(file) Write Object to JSON File def write_to_json_file(filename, an_object): with open(filename, 'w', encoding='utf-8') as file: json.dump(an_object, file, ensure_ascii=False, indent=2)  back to top "},{"title":"Pickle​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#pickle","content":"Binary file format for storing objects import pickle bytes = pickle.dumps(object) object = pickle.loads(bytes)  Read Object from File def read_pickle_file(filename): with open(filename, 'rb') as file: return pickle.load(file) Write Object to File def write_to_pickle_file(filename, an_object): with open(filename, 'wb') as file: pickle.dump(an_object, file)  back to top "},{"title":"CSV​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#csv","content":"Text file format for storing spreadsheets import csv  Read File must be opened with newline=&quot;&quot; argument, or newlines embedded inside quoted fields will not be interpreted correctly! reader = csv.reader(file) # Also: `dialect='excel', delimiter=','` list = next(reader) # Returns next row as a list of strings list = list(reader) # Returns list of remaining rows Write File must be opened with newline=&quot;&quot; argument, or \\r will be added in front of every \\n on platforms that use \\r\\n line endings! writer = csv.writer(file) # Also: `dialect='excel', delimiter=','` writer.writerow(collection) # Encodes objects using `str(el)` writer.writerows(coll_of_coll) # Appends multiple rows Parameters dialect - Master parameter that sets the default valuesdelimiter - A one-character string used to separate fieldsquotechar - Character for quoting fields that contain special charactersdoublequote - Whether quotechars inside fields get doubled or escapedskipinitialspace - Whether whitespace after delimiter gets strippedlineterminator - Specifies how writer terminates rowsquoting - Controls the amount of quoting: 0 - as necessary, 1 - allescapechar - Character for escaping 'quotechar' if doublequote is False Dialets excel\texcel-tab\tunixdelimiter\t,\t\\t\t, quotechar\t&quot;\t&quot;\t&quot; doublequote\tTrue\tTrue\tTrue skipinitialspace\tFalse\tFalse\tFalse lineterminator\t\\r\\n\t\\r\\n\t\\n quoting\t0\t0\t1 escapechar\tNone\tNone\tNone Read Rows from CSV File def read_csv_file(filename): with open(filename, encoding='utf-8', newline='') as file: return list(csv.reader(file)) Write Rows to CSV File def write_to_csv_file(filename, rows): with open(filename, 'w', encoding='utf-8', newline='') as file: writer = csv.writer(file) writer.writerows(rows)  back to top "},{"title":"SQLite​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#sqlite","content":"Server-less database engine that stores each database into a separate file Connect Opens a connection to the database fileCreates a new file if path doesn't exist import sqlite3  con = sqlite3.connect('path') # Also ':memory:' con.close()  - Read - Returned values can be of type str, int, float, bytes or None ```python cursor = con.execute('query') # Can raise a subclass of sqlite3.Error tuple = cursor.fetchone() # Returns next row. Also next(cursor) list = cursor.fetchall() # Returns remaining rows. Also list(cursor)  Write con.execute('query') con.commit() # or with con: con.execute('query') Placeholders Passed values can be of type str, int, float, bytes, None, bool, datetime.date or datetime.datetmeBools will be stored and returned as ints and dates as ISO formatted strings con.execute('query', list/tuple) # Replaces '?'s in query with values con.execute('query', dict/namedtuple) # Replaces ':key's with values con.executemany('query', coll_of_above) # Runs execute() many times In this example values are not actually saved because con.commit() is omitted! import sqlite3  con = sqlite3.connect('test.db') con.execute('create table person (person_id integer primary key, name, height)') con.execute('insert into person values (null, ?, ?)', ('Jean-Luc', 187)).lastrowid # 1 con.execute('select * from person').fetchall() #[(1, 'Jean-Luc', 187)]  [back to top](#table-of-contents) ### MySQL - Has a very similar interface with SQLite, but with differences listed below - `pip3 install mysql-connector` ```python from mysql import connector con = connector.connect(host=str, ...) # `user=str, password=str, database=str cursor = con.cursor() # Only cursor has execute method cursor.execute('query') # Can raise a subclass of connector.Error cursor.execute('query', list/tuple) # Replaces '%s's in query with values cursor.execute('query', dict/namedtuple) # Replaces '%(key)s's with values  back to top "},{"title":"Bytes​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#bytes","content":"Bytes object is an immutable sequence of single bytesMutable version is called bytearray bytes = b'str' # Only accepts ASCII characters and \\x00 - \\xff int = bytes[index] # Returns int in range from 0 to 255 bytes = bytes[slice] # Returns bytes even if it has only one element bytes = bytes.join(coll_of_bytes) # Joins elements using bytes object as separator  Encode bytes = bytes(coll_of_ints) # Ints must be in range from 0 to 255 bytes = bytes(str, 'utf-8') # Or: str.encode('utf-8') bytes = int.to_bytes(n_bytes, ...) # `byteorder='big/little', signed=False` bytes = bytes.fromhex('hex') # Hex numbers can be separated by spaces Decode list = list(bytes) # Returns ints in range from 0 to 255 str = str(bytes, 'utf-8') # Or: bytes.decode('utf-8') int = int.from_bytes(bytes, ...) # `byteorder='big/little', signed=False` 'hex' = bytes.hex() # Returns a string of hexadecimal numbers Read Bytes from File def read_bytes(filename): with open(filename, 'rb') as file: return file.read() Write Bytes to File def write_bytes(filename, bytes_obj): with open(filename, 'wb') as file: file.write(bytes_obj)  back to top "},{"title":"Struct​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#struct","content":"Module that performs conversions between a sequence of numbers and a bytes objectMachine’s native type sizes and byte order are used by default from struct import pack, unpack, iter_unpack bytes = pack('format', num_1 [, num_2, ...]) tuple = unpack('format', bytes) tuples = iter_unpack('format', bytes) # example pack('hhl', 1, 2, 3) # b'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03' unpack('hhl', b'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03') # (1, 2, 3)  Format For standard type sizes start format string with: = - native byte order`` - little-endian`` - big-endian (also '!') Integer types. Use a capital letter for unsigned type. Standard sizes are in brackets: x - pad byte 'b' - char (1)h - short (2) 'i' - int (4)l - long (4)q - long long (8) Floating point types: f - float (4)d - double (8) back to top "},{"title":"Array​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#array","content":"List that can only hold numbers of a predefined typeAvailable types and their sizes in bytes are listed above from array import array array = array('typecode', collection) # Array from collection of numbers array = array('typecode', bytes) # Array from bytes object array = array('typecode', array) # Treats array as a sequence of numbers bytes = bytes(array) # Or: array.tobytes()  back to top "},{"title":"Memory View​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#memory-view","content":"A sequence object that points to the memory of another objectEach element can reference a single or multiple consecutive bytes, depending on formatOrder and number of elements can be changed with slicing. mview = memoryview(bytes/bytearray/array) # Immutable if bytes, else mutable real = mview[index] # Returns an int or a float mview = mview[slice] # Mview with rearranged elements mview = mview.cast('typecode') # Casts memoryview to the new format mview.release() # Releases the object's memory buffer bin_file.write(mview) # Writes mview to the binary file bytes = bytes(mview) # Creates a new bytes object bytes = bytes.join(coll_of_mviews) # Joins mviews using bytes object as sep array = array('typecode', mview) # Treats mview as a sequence of numbers list = list(mview) # Returns list of ints or floats str = str(mview, 'utf-8') # Treats mview as a bytes object int = int.from_bytes(mview, ...) # `byteorder='big/little', signed=False` 'hex' = mview.hex() # Treats mview as a bytes object  back to top "},{"title":"Deque​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#deque","content":"A thread-safe list with efficient appends and pops from either side. Pronounced &quot;deck&quot; from collections import deque deque = deque(collection, maxlen=None) deque.appendleft(el) # Opposite element is dropped if full deque.extendleft(collection) # Collection gets reversed el = deque.popleft() # Raises IndexError if empty deque.rotate(n=1) # Rotates elements to the right  back to top "},{"title":"Advanced​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#advanced","content":""},{"title":"Threading​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#threading","content":"CPython interpreter can only run a single thread at a timeThat is why using multiple threads won't result in a faster execution, unless at least one of the threads contains an I/O operation from threading import Thread, RLock, Semaphore, Event, Barrier  Thread Use kwargs=dict to pass keyword arguments to the functionUse daemon=True, or the program will not be able to exit while the thread is alive Thread = Thread(target=function) # Use `args=collection` to set arguments Thread.start() # Starts the thread bool = Thread.is_alive() # Checks if thread has finished executing Thread.join() # Waits for thread to finish Lock lock = RLock() lock.acquire() # Waits for lock to be available lock.release() # Makes the lock available again # Or lock = RLock() with lock: ... Semaphore, Event, Barrier Semaphore = Semaphore(value=1) # Lock that can be acquired 'value' times Event = Event() # Method wait() blocks until set() is called Barrier = Barrier(n_times) # Method wait() blocks until it's called 'n_times' Thread Pool Executor from concurrent.futures import ThreadPoolExecutor  with ThreadPoolExecutor(max_workers=None) as executor: # Does not exit until done iter = executor.map(lambda x: x + 1, range(3)) # (1, 2, 3) iter = executor.map(lambda x, y: x + y, 'abc', '123') # ('a1', 'b2', 'c3') Future = executor.submit(function [, arg_1, ...]) # Also visible outside block Future bool = Future.done() # Checks if thread has finished executing obj = Future.result() # Waits for thread to finish and returns result  - Queue - A thread-safe FIFO queue - For LIFO queue use LifoQueue ```python from queue import Queue Queue = Queue(maxsize=0) Queue.put(el) # Blocks until queue stops being full Queue.put_nowait(el) # Raises queue.Full exception if full el = Queue.get() # Blocks until queue stops being empty el = Queue.get_nowait() # Raises queue. Empty exception if empty  back to top "},{"title":"Operator​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#operator","content":"Module of functions that provide the functionality of operators from operator import add, sub, mul, truediv, floordiv, mod, pow, neg, abs from operator import eq, ne, lt, le, gt, ge from operator import and_, or_, not_ from operator import itemgetter, attrgetter, methodcaller import operator as op elementwise_sum = map(op.add, list_a, list_b) sorted_by_second = sorted(collection, key=op.itemgetter(1)) sorted_by_both = sorted(collection, key=op.itemgetter(1, 0)) product_of_elems = functools.reduce(op.mul, collection) LogicOp = enum.Enum('LogicOp', {'AND': op.and_, 'OR' : op.or_}) last_el = op.methodcaller('pop')(list)  back to top "},{"title":"Introspection​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#introspection","content":"Inspecting code at runtime Variables list = dir() # Names of local variables (incl. functions) dict = vars() # Dict of local variables. Also locals() dict = globals() # Dict of global variables Attributes list = dir(object) # Names of object's attributes (incl. methods) dict = vars(object) # Dict of object's fields. Also obj.__dict__ bool = hasattr(object, 'attr_name') # Checks if getattr() raises an error value = getattr(object, 'attr_name') # Raises AttributeError if attribute is missing setattr(object, 'attr_name', value) # Only works on objects with __dict__ attribute delattr(object, 'attr_name') # Equivalent to `del object.attr_name` Parameters from inspect import signature  sig = signature(function) no_of_params = len(sig.parameters) param_names = list(sig.parameters.keys()) param_kinds = [a.kind for a in sig.parameters.values()]  [back to top](#table-of-contents) ### Metaprogramming - Code that generates code - Type - Type is the root class - If only passed an object it returns its type (class) - Otherwise it creates a new class ```python class = type('class_name', parents_tuple, attributes_dict) Z = type('Z', (), {'a': 'abcde', 'b': 12345}) z = Z()  Meta Class A class that creates classesNew() is a class method that gets called before init() If it returns an instance of its class, then that instance gets passed to init() as a 'self' argumentIt receives the same arguments as init(), except for the first one that specifies the desired type of the returned instance (MyMetaClass in our case)new() can also be called directly, usually from a new() method of a child class (def __new__(cls): return super().__new__(cls))The only difference between the examples above is that my_meta_class() returns a class of type type, while MyMetaClass() returns a class of type MyMetaClass def my_meta_class(name, parents, attrs): attrs['a'] = 'abcde' return type(name, parents, attrs) # or class MyMetaClass(type): def __new__(cls, name, parents, attrs): attrs['a'] = 'abcde' return type.__new__(cls, name, parents, attrs) Metaclass Attribute Right before a class is created it checks if it has the 'metaclass' attribute definedIf not, it recursively checks if any of his parents has it defined and eventually comes to type() class MyClass(metaclass=MyMetaClass): b = 12345  MyClass.a, MyClass.b # ('abcde', 12345)  - Type Diagram ```python type(MyClass) == MyMetaClass # MyClass is an instance of MyMetaClass type(MyMetaClass) == type # MyMetaClass is an instance of type  Inheritance Diagram MyClass.__base__ == object # MyClass is a subclass of object MyMetaClass.__base__ == type # MyMetaClass is a subclass of type  back to top "},{"title":"Eval​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#eval","content":"from ast import literal_eval literal_eval('1 + 2') # 3 literal_eval('[1, 2, 3]') # [1, 2, 3] literal_eval('abs(1)') # ValueError: malformed node or string  back to top "},{"title":"Coroutine​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#coroutine","content":"Coroutines have a lot in common with threads, but unlike threads, they only give up control when they call another coroutine and they don’t use as much memoryCoroutine definition starts with async and its call with awaitasyncio.run(coroutine) is the main entry point for asynchronous programsFunctions wait(), gather() and as_completed() can be used when multiple coroutines need to be started at the same timeAsyncio module also provides its own Queue, Event, Lock and Semaphore classesExample Runs a terminal game where you control an asterisk that must avoid numbers: import asyncio, collections, curses, enum, random P = collections.namedtuple('P', 'x y') # Position D = enum.Enum('D', 'n e s w') # Direction def main(screen): curses.curs_set(0) # Makes cursor invisible screen.nodelay(True) # Makes getch() non-blocking asyncio.run(main_coroutine(screen)) # Starts running asyncio code async def main_coroutine(screen): state = {'*': P(0, 0), **{id_: P(30, 10) for id_ in range(10)}} moves = asyncio.Queue() coros = (*(random_controller(id_, moves) for id_ in range(10)), human_controller(screen, moves), model(moves, state, *screen.getmaxyx()), view(state, screen)) await asyncio.wait(coros, return_when=asyncio.FIRST_COMPLETED) async def random_controller(id_, moves): while True: moves.put_nowait((id_, random.choice(list(D)))) await asyncio.sleep(random.random() / 2) async def human_controller(screen, moves): while True: ch = screen.getch() key_mappings = {259: D.n, 261: D.e, 258: D.s, 260: D.w} if ch in key_mappings: moves.put_nowait(('*', key_mappings[ch])) await asyncio.sleep(0.01) async def model(moves, state, height, width): while state['*'] not in {p for id_, p in state.items() if id_ != '*'}: id_, d = await moves.get() p = state[id_] deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)} new_p = P(*[sum(a) for a in zip(p, deltas[d])]) if 0 = new_p.x width-1 and 0 = new_p.y height: state[id_] = new_p async def view(state, screen): while True: screen.clear() for id_, p in state.items(): screen.addstr(p.y, p.x, str(id_)) await asyncio.sleep(0.01) curses.wrapper(main)  back to top "},{"title":"Libraries​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#libraries","content":""},{"title":"Progress Bar​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#progress-bar","content":"pip3 install tqdm from tqdm import tqdm from time import sleep for el in tqdm([1, 2, 3]): sleep(0.2)  back to top "},{"title":"Plot​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#plot","content":"pip3 install matplotlib from matplotlib import pyplot pyplot.plot(y_data [, label=str]) pyplot.plot(x_data, y_data) pyplot.legend() # Adds a legend pyplot.savefig('path') # Saves the figure pyplot.show() # Displays the figure pyplot.clf() # Clears the figure  back to top "},{"title":"Table​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#table","content":"Prints a CSV file as an ASCII table:pip3 install tabulate import csv, tabulate with open('test.csv', encoding='utf-8', newline='') as file: rows = csv.reader(file) header = [a.title() for a in next(rows)] table = tabulate.tabulate(rows, header) print(table)  back to top "},{"title":"Curses​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#curses","content":"Clears the terminal, prints a message and waits for the ESC key press: from curses import wrapper, curs_set, ascii from curses import KEY_UP, KEY_RIGHT, KEY_DOWN, KEY_LEFT def main(): wrapper(draw) def draw(screen): curs_set(0) # Makes cursor invisible screen.nodelay(True) # Makes getch() non-blocking screen.clear() screen.addstr(0, 0, 'Press ESC to quit.') # Coordinates are y, x while screen.getch() != ascii.ESC: pass def get_border(screen): from collections import namedtuple P = namedtuple('P', 'x y') height, width = screen.getmaxyx() return P(width-1, height-1) if __name__ == '__main__': main()  back to top "},{"title":"Logging​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#logging","content":"pip3 install loguruLevels: debug, info, success, warning, error, critical from loguru import logger logger.add('debug_{time}.log', colorize=True) # Connects a log file logger.add('error_{time}.log', level='ERROR') # Another file for errors or higher logger.level('A logging message.')  Exceptions Exception description, stack trace and values of variables are appended automatically try: ... except exception: logger.exception('An error happened.') Rotation Argument that sets a condition when a new log file is createdint - Max file size in bytestimedelta - Max age of a filetime - Time of daystr - Any of above as a string: '100 MB', '1 month', 'monday at 12:00', ... rotation = int|datetime.timedelta|datetime.time|str Retention Sets a condition which old log files get deletedint - Max number of filestimedelta - Max age of a filestr - Max age as a string: '1 week, 3 days', '2 months', ... retention = int|datetime.timedelta|str  back to top "},{"title":"Scraping​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#scraping","content":"Scrapes Python's URL, version number and logo from Wikipedia page:pip3 install requests beautifulsoup4 import requests, sys from bs4 import BeautifulSoup URL = 'https://en.wikipedia.org/wiki/Python_(programming_language)' try: html = requests.get(URL).text doc = BeautifulSoup(html, 'html.parser') table = doc.find('table', class_='infobox vevent') rows = table.find_all('tr') link = rows[11].find('a')['href'] ver = rows[6].find('div').text.split()[0] url_i = rows[0].find('img')['src'] image = requests.get(f'https:{url_i}').content with open('test.png', 'wb') as file: file.write(image) print(link, ver) except requests.exceptions.ConnectionError: print(&quot;You've got problems with connection.&quot;, file=sys.stderr)  back to top "},{"title":"Web​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#web","content":"pip3 install bottle from bottle import run, route, static_file, template, post, request, response import json  Run run(host='localhost', port=8080) # Runs locally run(host='0.0.0.0', port=80) # Runs globally Static Request @route('/img/image') def send_image(image): return static_file(image, 'img_dir/', mimetype='image/png') Dynamic Request @route('/sport') def send_page(sport): return template('h1{{title}}/h1', title=sport) REST Request @post('/odds/sport') def odds_handler(sport): team = request.forms.get('team') home_odds, away_odds = 2.44, 3.29 response.headers['Content-Type'] = 'application/json' response.headers['Cache-Control'] = 'no-cache' return json.dumps([team, home_odds, away_odds]) Test pip3 install requests import requests url = 'http://localhost:8080/odds/football' data = {'team': 'arsenal f.c.'} response = requests.post(url, data=data) response.json() # ['arsenal f.c.', 2.44, 3.29]  back to top "},{"title":"Profile​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#profile","content":"Stopwatch from time import time  start_time = time() # Seconds since the Epoch ... duration = time() - start_time  - High performance ```python from time import perf_counter start_time = perf_counter() # Seconds since restart ... duration = perf_counter() - start_time  Timing a Snippet from timeit import timeit timeit('&quot;-&quot;.join(str(a) for a in range(100))', ... , number=10000, globals=globals(), setup='pass') # 0.34986  Profiling by Line pip3 install line_profiler memory_profiler @profile def main(): a = [*range(10000)] b = {*range(10000)} main() kernprof -lv test.pypython3 -m memory_profiler test.py Call Graph Generates a PNG image of a call graph with highlighted bottleneckspip3 install pycallgraph from pycallgraph import output, PyCallGraph from datetime import datetime  time_str = datetime.now().strftime('%Y%m%d%H%M%S') filename = f'profile-{time_str}.png' drawer = output.GraphvizOutput(output_file=filename) with PyCallGraph(drawer): code_to_be_profiled  [back to top](#table-of-contents) ### NumPy - `pip3 install numpy` - Array manipulation mini-language - It can run up to one hundred times faster than the equivalent Python code - Shape is a tuple of dimension sizes - Axis is the index of a dimension that gets collapsed - The leftmost dimension has index 0 ```python import numpy as np array = np.array(list) array = np.arange(from_inclusive, to_exclusive, ±step_size) array = np.ones(shape) array = np.random.randint(from_inclusive, to_exclusive, shape) array.shape = shape view = array.reshape(shape) view = np.broadcast_to(array, shape) array = array.sum(axis) indexes = array.argmin(axis)  Indexing If row and column indexes differ in shape, they are combined with broadcasting el = 2d_array[0, 0] # First element 1d_view = 2d_array[0] # First row 1d_view = 2d_array[:, 0] # First column. Also [..., 0] 3d_view = 2d_array[None, :, :] # Expanded by dimension of size 1 1d_array = 2d_array[1d_row_indexes, 1d_column_indexes] 2d_array = 2d_array[2d_row_indexes, 2d_column_indexes] 2d_bools = 2d_array 0 1d_array = 2d_array[2d_bools] Broadcasting Broadcasting is a set of rules by which NumPy functions operate on arrays of different sizes and/or dimensions left = [[0.1], [0.6], [0.8]] # Shape: (3, 1) right = [ 0.1 , 0.6 , 0.8 ] # Shape: (3) If array shapes differ in length, left-pad the shorter shape with ones left = [[0.1], [0.6], [0.8]] # Shape: (3, 1) right = [[0.1 , 0.6 , 0.8]] # Shape: (1, 3) - ! If any dimensions differ in size, expand the ones that have size 1 by duplicating their elements left = [[0.1, 0.1, 0.1], [0.6, 0.6, 0.6], [0.8, 0.8, 0.8]] # Shape: (3, 3) - ! right = [[0.1, 0.6, 0.8], [0.1, 0.6, 0.8], [0.1, 0.6, 0.8]] # Shape: (3, 3) - ! If neither non-matching dimension has size 1, raise an error Example: For each point returns index of its nearest point ([0.1, 0.6, 0.8] = [1, 2, 1]) points = np.array([0.1, 0.6, 0.8]) # [ 0.1, 0.6, 0.8] wrapped_points = points.reshape(3, 1) &quot;&quot;&quot; [[ 0.1], [ 0.6], [ 0.8]] &quot;&quot;&quot; distances = wrapped_points - points &quot;&quot;&quot; [[ 0. , -0.5, -0.7], [ 0.5, 0. , -0.2], [ 0.7, 0.2, 0. ]] &quot;&quot;&quot; distances = np.abs(distances) &quot;&quot;&quot; [[ 0. , 0.5, 0.7], [ 0.5, 0. , 0.2], [ 0.7, 0.2, 0. ]] &quot;&quot;&quot; i = np.arange(3) # [0, 1, 2] distances[i, i] = np.inf &quot;&quot;&quot; [[ inf, 0.5, 0.7], [ 0.5, inf, 0.2], [ 0.7, 0.2, inf]] &quot;&quot;&quot; distances.argmin(1) # [1, 2, 1]  back to top "},{"title":"Image​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#image","content":"pip3 install pillow from PIL import Image Image = Image.new('mode', (width, height)) Image = Image.open('path') Image = Image.convert('mode') Image.save('path') Image.show() tuple/int = Image.getpixel((x, y)) # Returns a pixel Image.putpixel((x, y), tuple/int) # Writes a pixel to the image ImagingCore = Image.getdata() # Returns a sequence of pixels Image.putdata(list/ImagingCore) # Writes a sequence of pixels Image.paste(Image, (x, y)) # Writes an image to the image 2d_array = np.array(Image) # Creates NumPy array from greyscale image 3d_array = np.array(Image) # Creates NumPy array from color image Image = Image.fromarray(array) # Creates image from NumPy array of floats  Modes 1 - 1-bit pixels, black and white, stored with one pixel per byteL - 8-bit pixels, greyscaleRGB - 3x8-bit pixels, true colorRGBA - 4x8-bit pixels, true color with transparency maskHSV - 3x8-bit pixels, Hue, Saturation, Value color space Examples Creates a PNG image of a rainbow gradient WIDTH, HEIGHT = 100, 100 size = WIDTH * HEIGHT hues = [255 * i/size for i in range(size)] img = Image.new('HSV', (WIDTH, HEIGHT)) img.putdata([(int(h), 255, 255) for h in hues]) img.convert('RGB').save('test.png') Adds noise to a PNG image from random import randint  add_noise = lambda value: max(0, min(255, value + randint(-20, 20))) img = Image.open('test.png').convert('HSV') img.putdata([(add_noise(h), s, v) for h, s, v in img.getdata()]) img.convert('RGB').save('test.png') ```  Drawing Use fill=color to set the primary colorUse outline=color to set the secondary colorColor can be specified as a tuple, int, #rrggbb string or a color name from PIL import ImageDraw  ImageDraw = ImageDraw.Draw(Image) ImageDraw.point((x, y), fill=None) ImageDraw.line((x1, y1, x2, y2 [, ...]), fill=None, width=0, joint=None) ImageDraw.arc((x1, y1, x2, y2), from_deg, to_deg, fill=None, width=0) ImageDraw.rectangle((x1, y1, x2, y2), fill=None, outline=None, width=0) ImageDraw.polygon((x1, y1, x2, y2 [, ...]), fill=None, outline=None) ImageDraw.ellipse((x1, y1, x2, y2), fill=None, outline=None, width=0)  [back to top](#table-of-contents) ### Animation - `pip3 install pillow imageio` - Creates a GIF of a bouncing ball ```python from PIL import Image, ImageDraw import imageio WIDTH, R = 126, 10 frames = [] for velocity in range(15): y = sum(range(velocity+1)) frame = Image.new('L', (WIDTH, WIDTH)) draw = ImageDraw.Draw(frame) draw.ellipse((WIDTH/2-R, y, WIDTH/2+R, y+R*2), fill='white') frames.append(frame) frames += reversed(frames[1:-1]) imageio.mimsave('test.gif', frames, duration=0.03)  back to top "},{"title":"Audio​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#audio","content":"Bytes object contains a sequence of frames, each consisting of one or more samplesIn a stereo signal, the first sample of a frame belongs to the left channelEach sample consists of one or more bytes that, when converted to an integer, indicate the displacement of a speaker membrane at a given momentIf sample width is one, then the integer should be encoded unsignedFor all other sizes, the integer should be encoded signed with little-endian byte order import wave Wave_read = wave.open('path', 'rb') # Opens the WAV file framerate = Wave_read.getframerate() # Number of frames per second nchannels = Wave_read.getnchannels() # Number of samples per frame sampwidth = Wave_read.getsampwidth() # Sample size in bytes nframes = Wave_read.getnframes() # Number of frames params = Wave_read.getparams() # Immutable collection of above bytes = Wave_read.readframes(nframes) # Returns next 'nframes' frames Wave_write = wave.open('path', 'wb') # Truncates existing file Wave_write.setframerate(int) # 44100 for CD, 48000 for video Wave_write.setnchannels(int) # 1 for mono, 2 for stereo Wave_write.setsampwidth(int) # 2 for CD quality sound Wave_write.setparams(params) # Sets all parameters Wave_write.writeframes(bytes) # Appends frames to the file  Sample Values sampwidth\tmin\tzero\tmax1\t0\t128\t255 2\t-32768\t0\t32767 3\t-8388608\t0\t8388607 4\t-2147483648\t0\t2147483647 Read Float Samples from WAV File def read_wav_file(filename): def get_int(a_bytes): an_int = int.from_bytes(a_bytes, 'little', signed=width!=1) return an_int - 128 * (width == 1) with wave.open(filename, 'rb') as file: width = file.getsampwidth() frames = file.readframes(-1) byte_samples = (frames[i: i + width] for i in range(0, len(frames), width)) return [get_int(b) / pow(2, width * 8 - 1) for b in byte_samples] Write Float Samples to WAV File def write_to_wav_file(filename, float_samples, nchannels=1, sampwidth=2, framerate=44100): def get_bytes(a_float): a_float = max(-1, min(1 - 2e-16, a_float)) a_float += sampwidth == 1 a_float *= pow(2, sampwidth * 8 - 1) return int(a_float).to_bytes(sampwidth, 'little', signed=sampwidth!=1) with wave.open(filename, 'wb') as file: file.setnchannels(nchannels) file.setsampwidth(sampwidth) file.setframerate(framerate) file.writeframes(b''.join(get_bytes(f) for f in float_samples))  Examples Saves a sine wave to a mono WAV file from math import pi, sin  samples_f = (sin(i * 2 * pi * 440 / 44100) for i in range(100000)) write_to_wav_file('test.wav', samples_f) ```  Adds noise to a mono WAV file from random import random  add_noise = lambda value: value + (random() - 0.5) * 0.03 samples_f = (add_noise(f) for f in read_wav_file('test.wav')) write_to_wav_file('test.wav', samples_f) ```  Plays a WAV file pip3 install simpleaudio from simpleaudio import play_buffer  with wave.open('test.wav', 'rb') as file: p = file.getparams() frames = file.readframes(-1) play_buffer(frames, p.nchannels, p.sampwidth, p.framerate) ```  Text to Speech pip3 install pyttsx3 import pyttsx3  engine = pyttsx3.init() engine.say('Sally sells seashells by the seashore.') engine.runAndWait()  [back to top](#table-of-contents) ### Synthesizer - Plays Popcorn by Gershon Kingsley - `pip3 install simpleaudio` ```python import simpleaudio, math, struct from itertools import chain, repeat F = 44100 P1 = '71♪,69,,71♪,66,,62♪,66,,59♪,,,' P2 = '71♪,73,,74♪,73,,74,,71,,73♪,71,,73,,69,,71♪,69,,71,,67,,71♪,,,' get_pause = lambda seconds: repeat(0, int(seconds * F)) sin_f = lambda i, hz: math.sin(i * 2 * math.pi * hz / F) get_wave = lambda hz, seconds: (sin_f(i, hz) for i in range(int(seconds * F))) get_hz = lambda key: 8.176 * 2 ** (int(key) / 12) parse_note = lambda note: (get_hz(note[:2]), 0.25 if '♪' in note else 0.125) get_samples = lambda note: get_wave(*parse_note(note)) if note else get_pause(0.125) samples_f = chain.from_iterable(get_samples(n) for n in f'{P1}{P1}{P2}'.split(',')) samples_b = b''.join(struct.pack('h', int(f * 30000)) for f in samples_f) simpleaudio.play_buffer(samples_b, 1, 2, F)  back to top "},{"title":"Games​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#games","content":"Basic Example pip3 install pygame import pygame as pg pg.init() screen = pg.display.set_mode((500, 500)) rect = pg.Rect(240, 240, 20, 20) while all(event.type != pg.QUIT for event in pg.event.get()): deltas = {pg.K_UP: (0, -3), pg.K_RIGHT: (3, 0), pg.K_DOWN: (0, 3), pg.K_LEFT: (-3, 0)} for delta in (deltas.get(i) for i, on in enumerate(pg.key.get_pressed()) if on): rect = rect.move(delta) if delta else rect screen.fill((0, 0, 0)) pg.draw.rect(screen, (255, 255, 255), rect) pg.display.flip() Rectangle Object for storing rectangular coordinates Rect = pg.Rect(x, y, width, height) # X and y are coordinates of topleft corner int = Rect.x/y/centerx/centery/... # Top, right, bottom, left tup = Rect.topleft/center/... # Topright, bottomright, bottomleft Rect = Rect.move((x, y)) # Use move_ip() to move in place bool = Rect.collidepoint((x, y)) # Tests if a point is inside a rectangle bool = Rect.colliderect(Rect) # Tests if two rectangles overlap int = Rect.collidelist(list_of_Rect) # Returns index of first colliding Rect or -1 list = Rect.collidelistall(list_of_Rect) # Returns indexes of all colliding Rects Surface Object for representing images Surf = pg.display.set_mode((width, height)) # Returns the display surface Surf = pg.Surface((width, height)) # Creates a new surface. Surf = pg.image.load('path') # Loads the image Surf = Surf.subsurface(Rect) # Returns a subsurface Surf.fill(color) # Fills the whole surface Surf.set_at((x, y), color) # Updates pixel Surf.blit(Surface, (x, y)) # Draws passed surface to the surface Surf = pg.transform.flip(Surf, xbool, ybool) Surf = pg.transform.rotate(Surf, degrees) Surf = pg.transform.scale(Surf, (width, height)) pg.draw.line(Surf, color, (x1, y1), (x2, y2), width) pg.draw.arc(Surf, color, Rect, from_radians, to_radians) pg.draw.rect(Surf, color, Rect) pg.draw.polygon(Surf, color, points) pg.draw.ellipse(Surf, color, Rect) Font Font = pg.font.SysFont('name', size, bold=False, italic=False) Font = pg.font.Font('path', size) Surf = Font.render(text, antialias, color [, background]) Sound Sound = pg.mixer.Sound('path') # Loads the WAV file Sound.play() # Starts playing the sound Basic Mario Brothers Example import collections, dataclasses, enum, io, pygame, urllib.request, itertools as it from random import randint  P = collections.namedtuple('P', 'x y') # Position D = enum.Enum('D', 'n e s w') # Direction SIZE, MAX_SPEED = 50, P(5, 10) # Screen size, Speed limit def main(): def get_screen(): pygame.init() return pygame.display.set_mode(2 [SIZE16])  def get_images(): url = 'https://gto76.github.io/python-cheatsheet/web/mario_bros.png' img = pygame.image.load(io.BytesIO(urllib.request.urlopen(url).read())) return [img.subsurface(get_rect(x, 0)) for x in range(img.get_width() // 16)] def get_mario(): Mario = dataclasses.make_dataclass('Mario', 'rect spd facing_left frame_cycle'.split()) return Mario(get_rect(1, 1), P(0, 0), False, it.cycle(range(3))) def get_tiles(): positions = [p for p in it.product(range(SIZE), repeat=2) if {*p} &amp; {0, SIZE-1}] + \\ [(randint(1, SIZE-2), randint(2, SIZE-2)) for _ in range(SIZE**2 // 10)] return [get_rect(*p) for p in positions] def get_rect(x, y): return pygame.Rect(x*16, y*16, 16, 16) run(get_screen(), get_images(), get_mario(), get_tiles())  def run(screen, images, mario, tiles): clock = pygame.time.Clock() while all(event.type != pygame.QUIT for event in pygame.event.get()): keys = {pygame.K_UP: D.n, pygame.K_RIGHT: D.e, pygame.K_DOWN: D.s, pygame.K_LEFT: D.w} pressed = {keys.get(i) for i, on in enumerate(pygame.key.get_pressed()) if on} update_speed(mario, tiles, pressed) update_position(mario, tiles) draw(screen, images, mario, tiles, pressed) clock.tick(28) def update_speed(mario, tiles, pressed): x, y = mario.spd x += 2 ((D.e in pressed) - (D.w in pressed)) x -= x // abs(x) if x else 0 y += 1 if D.s not in get_boundaries(mario.rect, tiles) else (-10 if D.n in pressed else 0) mario.spd = P([max(-limit, min(limit, s)) for limit, s in zip(MAX_SPEED, P(x, y))]) def updateposition(mario, tiles): new_p = mario.rect.topleft larger_speed = max(abs(s) for s in mario.spd) for in range(larger_speed): mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles)) new_p = P(*[a + s/larger_speed for a, s in zip(new_p, mario.spd)]) mario.rect.topleft = new_p def get_boundaries(rect, tiles): deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)} return {d for d, delta in deltas.items() if rect.move(delta).collidelist(tiles) != -1} def stop_on_collision(spd, bounds): return P(x=0 if (D.w in bounds and spd.x 0) or (D.e in bounds and spd.x 0) else spd.x, y=0 if (D.n in bounds and spd.y 0) or (D.s in bounds and spd.y 0) else spd.y) def draw(screen, images, mario, tiles, pressed): def get_frame_index(): if D.s not in get_boundaries(mario.rect, tiles): return 4 return next(mario.frame_cycle) if {D.w, D.e} &amp; pressed else 6  screen.fill((85, 168, 255)) mario.facing_left = (D.w in pressed) if {D.w, D.e} &amp; pressed else mario.facing_left screen.blit(images[get_frame_index() + mario.facing_left * 9], mario.rect) for rect in tiles: screen.blit(images[18 if {*rect.topleft} &amp; {0, (SIZE-1)*16} else 19], rect) pygame.display.flip()  if name == 'main': main()  [back to top](#table-of-contents) ### Pandas - `pip3 install pandas` ```python import pandas as pd from pandas import Series, DataFrame  Series Ordered dictionary with a name Series([1, 2], index=['x', 'y'], name='a') &quot;&quot;&quot; x 1 y 2 Name: a, dtype: int64 &quot;&quot;&quot; Sr = Series(list) # Assigns RangeIndex starting at 0 Sr = Series(dict) # Takes dictionary's keys for index Sr = Series(dict/Series, index=list) # Only keeps items with keys specified in index el = Sr.loc[key] # Or: Sr.iloc[index] Sr = Sr.loc[keys] # Or: Sr.iloc[indexes] Sr = Sr.loc[from_key : to_key_inclusive] # Or: Sr.iloc[from_i : to_i_exclusive] el = Sr[key/index] # Or: Sr.key Sr = Sr[keys/indexes] # Or: Sr[key_range/range] Sr = Sr[bools] # Or: Sr.i/loc[bools] Sr = Sr == el/Sr # Returns a Series of bools Sr = Sr +-*/ el/Sr # Non-matching keys get value NaN Sr = Sr.append(Sr) # Or: pd.concat(coll_of_Sr) Sr = Sr.combine_first(Sr) # Adds items that are not yet present Sr.update(Sr) # Updates items that are already present Aggregate, Transform, Map The way aggregate() and transform() find out whether a function accepts an element or the whole Series is by passing it a single value at first and if it raises an error, then they pass it the whole SeriesLast result has a hierarchical index. Use Sr[key_1, key_2] to get its values el = Sr.sum/max/mean/idxmax/all() # Or: Sr.aggregate(agg_func) Sr = Sr.rank/diff/cumsum/ffill/interpl() # Or: Sr.agg/transform(trans_func) Sr = Sr.fillna(el) # Or: Sr.apply/agg/transform/map(map_func)  sr = Series([1, 2], index=['x', 'y']) &quot;&quot;&quot; x 1 y 2 &quot;&quot;&quot; ``` | | 'sum' | ['sum'] | {'s': 'sum'} | | ------------- | ----- | ------- | ------------ | | sr.apply(...) | 3 | sum 3 | s 3 | | sr.agg(...) | | | | | | 'rank' | ['rank'] | {'r': 'rank'} | | ------------- | ------ | -------- | ------------- | | sr.apply(...) | | rank | | | sr.agg(...) | x 1 | x1 | rx1 | | sr.trans(...) | y 2 | y 2 | y 2 |  DataFrame Table with labeled rows and columns DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y']) &quot;&quot;&quot; x y a 1 2 b 3 4 &quot;&quot;&quot; DF = DataFrame(list_of_rows) # Rows can be either lists, dicts or series DF = DataFrame(dict_of_columns) # Columns can be either lists, dicts or series el = DF.loc[row_key, column_key] # Or: DF.iloc[row_index, column_index] Sr/DF = DF.loc[row_key/s] # Or: DF.iloc[row_index/es] Sr/DF = DF.loc[:, column_key/s] # Or: DF.iloc[:, column_index/es] DF = DF.loc[row_bools, column_bools] # Or: DF.iloc[row_bools, column_bools] Sr/DF = DF[column_key/s] # Or: DF.column_key DF = DF[row_bools] # Keeps rows as specified by bools DF = DF[DF_of_bools] # Assigns NaN to False values DF = DF == el/Sr/DF # Returns DataFrame of bools DF = DF +-*/ el/Sr/DF # Non-matching keys get value NaN DF = DF.set_index(column_key) # Replaces row keys with values from a column DF = DF.reset_index() # Moves row keys to their own column DF = DF.filter('regex', axis=1) # Only keeps columns whose key matches the regex DF = DF.melt(id_vars=column_key/s) # Converts DF from wide to long format Merge, Join, Concat l.merge(r, on=&quot;y&quot;, how=...) outer x y z 0 1 2 . 1 3 4 5 2 . 6 7 inner x y z 3 4 5 left x y z 1 2 . 3 4 5 Joins / Merges on column also accepts left_on and right_on parameters uses inner by default l.join(r, lsuffix=&quot;l&quot;, rsuffix=&quot;r&quot;, how=...) outer x yl yr z a 1 2 . . b 3 4 4 5 c . . 6 7 inner x yl yr z 3 4 4 5 left x yl yr z 1 2 . . 3 4 4 5 Joins / Merges on row keys uses left by default pd.concat([l, r], axis=0, join=...) outer x y z a 1 2 . b 3 4 . b . 4 5 c . 6 7 inner y 2 4 4 6 Adds rows at the bottom uses outer by default by default works the same as l.append(r) pd.concat([l, r], axis=1, join=...) outer x y y z a 1 2 . . b 3 4 4 5 c . . 6 7 inner x y y z 3 4 4 5 Adds columns at the right end uses outer by default l.combine_first(r) outer x y z a 1 2 . b 3 4 5 c . 6 7 Adds missing rows and columns l = DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y']) &quot;&quot;&quot; x y a 1 2 b 3 4 &quot;&quot;&quot; r = DataFrame([[4, 5], [6, 7]], index=['b', 'c'], columns=['y', 'z']) &quot;&quot;&quot; y z b 4 5 c 6 7 &quot;&quot;&quot; Aggregate, Transform, Map All operations operate on columns by defaultUse axis=1 parameter to process the rows insteadUse DF[col_key_1, col_key_2][row_key] to get the fifth result's values. Sr = DF.sum/max/mean/idxmax/all() # Or: DF.apply/agg/transform(agg_func) DF = DF.rank/diff/cumsum/ffill/interpl() # Or: DF.apply/agg/transform(trans_func) DF = DF.fillna(el) # Or: DF.applymap(map_func) # example df = DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y']) x y a 1 2 b 3 4 Encode, Decode DF = pd.read_json/html('str/path/url') DF = pd.read_csv/pickle/excel('path/url') DF = pd.read_sql('query', connection) DF = pd.read_clipboard() dict = DF.to_dict(['d/l/s/sp/r/i']) str = DF.to_json/html/csv/markdown/latex([path]) DF.to_pickle/excel(path) DF.to_sql('table_name', connection) GroupBy Object that groups together rows of a dataframe based on the value of the passed column df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 6]], index=list('abc'), columns=list('xyz')) df.groupby('z').get_group(3) &quot;&quot;&quot; x y a 1 2 &quot;&quot;&quot; df.groupby('z').get_group(6) &quot;&quot;&quot; x y b 4 5 c 7 8 &quot;&quot;&quot; GB = DF.groupby(column_key/s) # DF is split into groups based on passed column DF = GB.get_group(group_key) # Selects a group by value of grouping column Aggregate, Transform, Map DF = GB.sum/max/mean/idxmax/all() # Or: GB.apply/agg(agg_func) DF = GB.rank/diff/cumsum/ffill() # Or: GB.aggregate(trans_func) DF = GB.fillna(el) # Or: GB.transform(map_func) gb = df.groupby('z') x y z 3: a 1 2 3 6: b 4 5 6 c 7 8 6 Rolling Object for rolling window calculations R_Sr/R_DF/R_GB = Sr/DF/GB.rolling(window_size) # Also: `min_periods=None, center=False`. R_Sr/R_DF = R_DF/R_GB[column_key/s] # Or: R.column_key Sr/DF/DF = R_Sr/R_DF/R_GB.sum/max/mean() # Or: R.apply/agg(agg_func/str)  back to top "},{"title":"Plotly​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#plotly","content":"pip3 install pandas plotly Covid Deaths by Continent example import pandas as pd import plotly.express  covid = pd.read_csv('https://covid.ourworldindata.org/data/owid-covid-data.csv', usecols=['iso_code', 'date', 'total_deaths', 'population']) continents = pd.read_csv('https://datahub.io/JohnSnowLabs/country-and-continent-codes-' + \\ 'list/r/country-and-continent-codes-list-csv.csv', usecols=['Three_Letter_Country_Code', 'Continent_Name']) df = pd.merge(covid, continents, left_on='iso_code', right_on='Three_Letter_Country_Code') df = df.groupby(['Continent_Name', 'date']).sum().reset_index() df['Total Deaths per Million'] = df.total_deaths * 1e6 / df.population df = df[('2020-03-14' df.date) &amp; (df.date '2020-06-25')]df = df.rename({'date': 'Date', 'Continent_Name': 'Continent'}, axis='columns') plotly.express.line(df, x='Date', y='Total Deaths per Million', color='Continent').show()  - Confirmed Covid Cases, Dow Jones, Gold, and Bitcoin Price ```python import pandas, datetime import plotly.graph_objects as go def main(): display_data(wrangle_data(*scrape_data())) def scrape_data(): def scrape_yahoo(id_): BASE_URL = 'https://query1.finance.yahoo.com/v7/finance/download/' now = int(datetime.datetime.now().timestamp()) url = f'{BASE_URL}{id_}?period1=1579651200&amp;period2={now}&amp;interval=1d&amp;events=history' return pandas.read_csv(url, usecols=['Date', 'Close']).set_index('Date').Close covid = pd.read_csv('https://covid.ourworldindata.org/data/owid-covid-data.csv', usecols=['date', 'total_cases']) covid = covid.groupby('date').sum() dow, gold, bitcoin = [scrape_yahoo(id_) for id_ in ('^DJI', 'GC=F', 'BTC-USD')] dow.name, gold.name, bitcoin.name = 'Dow Jones', 'Gold', 'Bitcoin' return covid, dow, gold, bitcoin def wrangle_data(covid, dow, gold, bitcoin): df = pandas.concat([covid, dow, gold, bitcoin], axis=1) df = df.loc['2020-02-23':].iloc[:-2] df = df.interpolate() df.iloc[:, 1:] = df.rolling(10, min_periods=1, center=True).mean().iloc[:, 1:] df.iloc[:, 1:] = df.iloc[:, 1:] / df.iloc[0, 1:] * 100 return df def display_data(df): def get_trace(col_name): return go.Scatter(x=df.index, y=df[col_name], name=col_name, yaxis='y2') traces = [get_trace(col_name) for col_name in df.columns[1:]] traces.append(go.Scatter(x=df.index, y=df.total_cases, name='Total Cases', yaxis='y1')) figure = go.Figure() figure.add_traces(traces) figure.update_layout( yaxis1=dict(title='Total Cases', rangemode='tozero'), yaxis2=dict(title='%', rangemode='tozero', overlaying='y', side='right'), legend=dict(x=1.1) ).show() if __name__ == '__main__': main()  back to top "},{"title":"Cython​","type":1,"pageTitle":"Python","url":"docs/languageSpecific/python/#cython","content":"Library that compiles Python code into Cpip3 install cython import pyximport; pyximport.install() import cython_script cython_script.main()  Definitions All cdef definitions are optional, but they contribute to the speed-upScript needs to be saved with a pyx extension cdef type var_name = el cdef type[n_elements] var_name = [el_1, el_2, ...] cdef type/void func_name(type arg_name_1, ...): cdef class class_name: cdef public type attr_name def __init__(self, type arg_name): self.attr_name = arg_name  cdef enum enum_name: member_name_1, member_name_2, ...  [back to top](#table-of-contents)  "},{"title":"Java","type":0,"sectionRef":"#","url":"docs/languageSpecific/java/","content":"","keywords":""},{"title":"Table of Contents​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#table-of-contents","content":"Compiled LanguageHello WorldCommentsPrintData typesVariable declarationVariable declaration intVariable declaration floatVariable declaration NoneBooleanStringsString ConcatenationArithmetic OperatorsComparison OperatorsLogical OperatorsBitwise OperatorsIncrementGetting InputArrays and ListsConditional StatementLoopsInstantiationFunctionsHigher order functionsHash TablesCollectionsDestructuringSpread OperatorRest parametersClassImporting LibrariesType ConversionsFind Data TypeJSONProgram Entry PointSwapping valuesError HandlingCustom ErrorAsynchronousMathDate and TimeAccess modifierFile SystemIteratorsGeneratorsFetching Web DataEnumLanguage Specific "},{"title":"Compiled Language​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#compiled-language","content":""},{"title":"Statically-typed Language: resolution of types, members, properties, methods are done at compile-time​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#statically-typed-language-resolution-of-types-members-properties-methods-are-done-at-compile-time","content":"trying to access a method that is not defined in an object when compiling the app will get an immediate error feedback​ Java: compiled to bytecode then interpreted by Java virtual machine into machine code Features not compatible with other languagescalls to native functions go through Java Native Interface (JNI)write once, run anywhereruns in a protected Java Virtual Machine (JVM)managed memory accesslimited to single inheritanceclass-based inheritance Types Java Platform, Standard Edition (SE) Core language and Java Runtime Environment (JRE) Java Platform, Enterprise Edition (EE) Recommendation for industrial-strength web applications Java Platform, Micro Edition (ME) Microcontrollers, sensors, mobile devices, telephone sim cardsA subset of Java SE Java FX Desktop application framework (windows, mac, linux) Automatic memory management memory for objects are allocated automatically local variables &amp; function calls are stored in stack objects &amp; member variables are stored in heap objects are retained in memory until dereferenced object is eligible for collection when all references expire when do references expire variables local to methods or code blocks expire with scope void changeString() { String localVar = &quot;Won't be around for long!&quot;; System.out.println(&quot;In function: &quot; + localVar); } explicitly dereference variables with null keyword void changeString() { String localVar = &quot;Won't be around for long!&quot;; tempVar = null; } when Java Virtual Machine runs out of memory for a newly requested object the system throws OutOfMemoryErrorTips for managing memory minimize the number of objects createdfind out how much memory is available &amp; is currently in used in the virtual machine Runtime.maxMemory() &amp; Runtime.totalMemory() setting available memory use command line options to manage amount of available heap memory set initial heap size java -Xms256s HelloWordset max heap size java -Xmx256m HelloWordset heap size for new objects java -Xmn256n HelloWord Java Garbage Collector runs in its own threadallocates &amp; deallocates memorycan destroy dereferenced objects, but not requiredgarbage collection is managed by the Virtual Machinecannot force garbage collection as it is an automatic process Can run System methods to call garbage collection Methods System.gc() &amp; Runtime.gc() can request garbage collection but there is no guarantee it will happen Identifiers and Keywords Keywords can't be used as class or other identifiersclass, method, field, and other names are identifiersidentifiers must start with alpha character or underscore Identifier conventions classes are always Pascal case class MyClass {} methods and variables are Camel case void doSomething(String withThis) {} constants are all uppercase public static final String FIRSTNAME=&quot;Myname&quot;; final means once it has been set, it can't be changed back to top "},{"title":"Hello World​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#hello-world","content":"java classes are typically organized into packages package is a global unique string that usually starts with your domain name in reverse domain order ensures globally unique identifiers (e.g.: Main) if there are more than 1 class named Main in an app can be distinguished by using the package each source code file will contain 1 public classpublic visible to all classesprotected visible to class they belong and any subclassesprivate (most restricted): visible only to class they belongstatic can be accessed without creating a class instancefinal constant value, value cannot be changedvoid means that the method doesn't return any value package com.example; // package declaration // class declaration public class HelloWorld { // main method: always have the 3 keywords (public, static, void) // must also receive an array of strings as an argument // String []args: This is the argument passed to the main function which is an array of strings with the array name args // One can choose their own flexible name but this name is used by many developers public static void main(String[] args) { // executable code System.out.println(&quot;Hello World&quot;); // adds new line after printing System.out.print(&quot;Hello World&quot;); // no new line is added after } }  back to top "},{"title":"Comments​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#comments","content":"// Single line comment /* multi-line comments */ /** * javadoc &lt;b&gt;documentation comments&lt;/b&gt; for classes, javadocs can be used to auto generate documentation documents for code commented with javadocs */ /** * javadoc &lt;b&gt;comments&lt;/b&gt; for methods with parameters - example main method * @param args - an array of string values */  back to top "},{"title":"Print​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#print","content":"System.out.println(&quot;Hello World&quot;); // adds new line after printing System.out.print(&quot;Hello World&quot;); // no new line is added after  formatting print format references for stringsS for uppercase strings, it converts lowercase to uppercasec for charactersC for uppercase charactersd for byte, short, int, long, and BigIntegerf for float and doublet for date/time values time T for time hh:mm:ssH for hoursM for minutesS for secondsL for millisecondsN for nanosecondsp adds a.m./p.m. formattingz prints out the time-zone offset data A prints out the full day of the weekd formats a two-digit day of the monthB is for the full month namem formats a two-digit monthY outputs a year in four digitsy outputs the last two digits of the year n for line separatorb for boolean // syntax System.out.printf(format, arguments); System.out.printf(locale, format, arguments); // example System.out.printf(&quot;Hello %s!%n&quot;, &quot;World&quot;); // Hello World! // add left spaces System.out.printf(&quot;'%15s' %n&quot;, &quot;baeldung&quot;); // ' baeldung' // add right spaces System.out.printf(&quot;'%-10s' %n&quot;, &quot;baeldung&quot;); // 'baeldung ' // limit number of characters in string /* %x.ys syntax x is the padding, y is the number of chars */ System.out.printf(&quot;%2.2s&quot;, &quot;Hi there!&quot;); // 'Hi' // control float precision /* %x.yf syntax x is the padding, y is the number of decimal places */ System.out.printf(&quot;'%5.2f'%n&quot;, 5.1473); // ' 5.15' // using locale to format numbers import java.util.Locale; System.out.printf(Locale.US, &quot;%,d %n&quot;, 10000); // 10,000 System.out.printf(Locale.ITALY, &quot;%,d %n&quot;, 10000); // 10.000 // dates import java.util.Date; System.out.printf(&quot;%tT%n&quot;, date); // 13:51:15 System.out.printf(&quot;hours %tH: minutes %tM: seconds %tS%n&quot;, date, date, date); // hours 13: minutes 51: seconds 15 // extracting from 1 argument System.out.printf(&quot;hours %1$tH: minutes %1$tM: seconds %1$tS%n&quot;, date); // hours 13: minutes 51: seconds 15 // date words format System.out.printf(&quot;%1$tA, %1$tB %1$tY %n&quot;, date); // Thursday, November 2018 // date numeric format System.out.printf(&quot;%1$td.%1$tm.%1$ty %n&quot;, date); // 22.11.18  back to top "},{"title":"Data types​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#data-types","content":""},{"title":"java 8​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#java-8","content":" 2 major data types​ Primitive data types stored in fastest available memory names are all camel case Java class library includes helper classes for each primitive helper classes support conversion and formatting toolsimport java.lang.Byte; import not required from java.lang libraries all primitive numeric variables default to 0 public class Main { private static int myInt; // must be declared as static of a class to have default value public static void main(String args[]) { System.out.println(myInt); // 0 } } data types numbers byte 8 bits-128 to 127default value 0helper class Byte short 16 bits-32,768 to 32,767default value 0helper class Short int 32 bits-2,147,483,648 to 2,147,483,647default value 0helper class Integerfrom JAVA 8 onwards, it can be used to represent an unsigned 32-bit integer long 64 bits-9.22337E+18 to 9.22337E+18default value 0Lhelper class Longfrom JAVA 8 onwards, it can be used to represent an unsigned 64-bit long float 32 bitsup to 7 decimal digitsdefault value 0.0f or 0.0F or .0f or .0Fhelper class Floatuse BigDecimal class if accuracy is required double 64 bitsup to 16 decimal digitsdefault value 0.0d or 0.0D or .0d or .0Dhelper class Doubleuse BigDecimal class if accuracy is required double doubleValue = 156.5d; Double doubleObj = new Double(doubleValue); // declare instance of the double class int intValue = doubleObj.intValue(); // 156, use helper object to convert to desired numeric data type characters 16 bits\\u0000 (or 0) to \\uffff (or 65,535 inclusive)default value \\u0000java uses the Unicode system and not the ASCII code system where 8 bits is enough Unicode defines a fully international character set that can represent most of the world’s written languagesIt is a unification of dozens of character sets, such as Latin, Greeks, Cyrillic, Katakana, Arabic, and many morethat's why 8 bits is not enough to represent all characters booleans default value false Non-primitive data type or Reference Data Types it contain a memory address of variable values because the reference types won’t store the variable value directly in memory String a complex objectis an instance of the string classis an array of characters string is designed to hold a sequence of characters in a single variable whereas, a character array is a collection of separate char type entities Unlike C/C++, Java strings are not terminated with a null character string objects are immutablereassigning the string value creates a new object the old object can be cleared from memory thrown garbage collection process helper class is java.lang.String, thus import not required String string1 = new String(&quot;Hello&quot;); Class it is a user-defined blueprint or prototype from which objects are created It represents the set of properties or methods that are common to all objects of one type In general, class declarations can include these components, in order: Modifiers A class can be public or has default accessClass name The name should begin with an initial letter (capitalized by convention)Superclass The name of the class’s parent (superclass), if any, preceded by the keyword extends A class can only extend (subclass) one parent Interfaces A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements A class can implement more than one interface Body The class body is surrounded by braces, { } Object It is a basic unit of Object-Oriented Programming and represents real-life entitiesAn object consists of State It is represented by the attributes of an object It also reflects the properties of an object Behavior It is represented by the methods of an object It also reflects the response of an object to other objects Identity It gives a unique name to an object and enables one object to interact with other objects Interface it can have methods and variables, but the methods declared in an interface are by default abstract (only method signature, nobody)Interfaces specify what a class must do and not how It is the blueprint of the class An Interface is about capabilities like a Player may be an interface and any class implementing Player must be able to (or must implement) a method called move So it specifies a set of methods that the class has to implement If a class implements an interface and does not provide method bodies for all functions specified in the interface, then the class must be declared abstractA Java library example is Comparator Interface If a class implements this interface, then it can be used to sort a collection Array An array is a group of like-typed variables that are referred to by a common nameArrays in Java work differently than they do in C/C++. The following are some important points about Java arrays In Java, all arrays are dynamically allocatedSince arrays are objects in Java, we can find their length using member length This is different from C/C++ where we find length using size A Java array variable can also be declared like other variables with [] after the data typeThe variables in the array are ordered and each has an index beginning from 0Java array can also be used as a static field, a local variable, or a method parameterThe size of an array must be specified by an int value and not long or shortThe direct superclass of an array type is ObjectEvery array type implements the interfaces Cloneable and java.io.Serializable back to top "},{"title":"Variable declaration​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#variable-declaration","content":"  also referred to as identifiers Identifiers are the names of local variables, instance and class variables, and labels it is also the names for classes, packages, modules and methodsAll Unicode characters are valid, not just the ASCII subset All identifiers can begin with a letter, a currency symbol or an underscore _ According to the convention, a letter should be lower case for variables The first character of identifiers can be followed by any combination of letters, digits, currency symbols and the underscore The underscore is not recommended for the names of variables Constants (static final attributes and enums) should be in all Uppercase letters identifiers are case-sensitive A keyword cannot be used as an identifier since it is a reserved word and has some special meaning example Legal identifiers: MinNumber, total, ak74, hello_world, $amount, _under_value Illegal identifiers: 74ak, -amount multi variables declaration double num1, num2, num3; type inference: starting from java 10 use var key wordtype is derived from assigned value var myVar = 5; // data type becomes integer primitive numbers are always signed long and integer methods support unsigned operations int unsigned = Integer.parseUnsignedInt(&quot;3000000000&quot;); System.out.println(unsigned); // -1294967296 int result = Integer.divideUnsigned(unsigned, 2); System.out.println(result); // 1500000000 int unsigned2 = Integer.parseUnsignedInt(&quot;300&quot;); System.out.println(unsigned2); // 300 int result2 = Integer.divideUnsigned(unsigned2, 2); System.out.println(result2); // 150 if a variable has already been declared in the outer scope first, the same variable cannot be declared again in the inner scope class Test { public static void main(String args[]) { int a = 5; for (int a = 0; a &lt; 5; a++) { // will raise an error that a is already defined System.out.println(a); } } } if a variable was declared in the inner scope first before the same variable name was declared in the outer scope, it will work class Test { public static void main(String args[]) { for (int i = 1; i &lt;= 10; i++) { System.out.println(i); } int i = 20; System.out.println(i); } }  back to top "},{"title":"Variable declaration int​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#variable-declaration-int","content":"integer ...-2, -1, 0, 1, 2... // public/private/protected static final byte/short/int/long integerName = 123; // byte: -128 ~ 127, 8 bits // wrapper class: Byte byte byteName = 123; // short: -32768 ~ 32767, 16 bits // wrapper class: Short short shortName = 123; // int: -2^31 ~ 2^31 - 1, -2147483648 ~ 2147483647, -2_147_483_648 ~ 2_147_483_647, 32 bits // wrapper class: Integer int integerName; integerName = 123; int integerName2 = 123; // default is visible within the same package // long: -2^63 ~ 2^63 - 1, -9223372036854775808L ~ 9223372036854775807L, can use _ same as int, 64 bits // wrapper class: Long long longName1 = 123l; // 123 long longName2 = 123L; // 123 long longName3 = 10_000; // 10000, introduced in java 7, just makes it easier to read  back to top "},{"title":"Variable declaration float​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#variable-declaration-float","content":"float, double // float: 32 bits, 4 bytes // wrapper class: Float float float_name = 1.123f; // 1.123, have 7 decimal digits float float_name = (float) 1.123; // double: 64 bits, 8 bytes // wrapper class: Double double double_name = 1.123d; // 1.123, have 16 decimal digits double double_name = 1.123; // using BigDecimal math class import java.math.BigDecimal; public class Main { public static void main(String[] args) { double value = .012; double pSum = value + value + value; System.out.println(pSum); // 0.036000000000000004 String strValue = Double.toString(value); System.out.println(strValue); // 0.012 BigDecimal bigValue1 = new BigDecimal(value); BigDecimal bSum1 = bigValue1.add(bigValue1).add(bigValue1); System.out.println(bSum1.toString()); // 0.0360000000000000007494005416219806647859513759613037109375 // convert double value to string for accuracy BigDecimal bigValue2 = new BigDecimal(strValue); BigDecimal bSum2 = bigValue2.add(bigValue2).add(bigValue2); System.out.println(bSum2.toString()); // 0.036 } }  back to top "},{"title":"Variable declaration None​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#variable-declaration-none","content":"String stringName = null; // NaN is produced if a floating point operation float floatName = Float.NaN; // NaN double doubleName = Double.NaN; // NaN Double x = new Double(-2.0/0.0); // -Infinity Double y = new Double(0.0/0.0); // NaN x.isNaN(); // false y.isNaN(); // true System.out.println(2.0 / 0); // Infinity // set infinity value double inf = Double.POSITIVE_INFINITY; // Infinity double inf = Double.NEGATIVE_INFINITY; // -Infinity  back to top "},{"title":"Boolean​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#boolean","content":"wrapper class: Boolean boolean booleanName1 = true; boolean booleanName2 = false; boolean booleanName3 = !booleanName2; // true String sBoolean = &quot;true&quot;; boolean booleanName4 = Boolean.parseBoolean(sBoolean); // true  back to top "},{"title":"Strings​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#strings","content":"characters // character: 16 bits, 2 bytes, only 1 letter or symbol, must use single quotes '' // wrapper class: Character char charName1 = 'a'; char charName2 = '\\u0061'; // unicode character for the letter a // modify character cases Character.toUpperCase(charName1); // 'A' Character.toLowerCase(charName1); // 'a' // convert Char Array to a string char[] chars = {'H', 'e', 'l', 'l', 'o'}; String s = new String(chars); // &quot;Hello&quot; // convert string to char array char[] chars2 = s.toCharArray(); for (char c : chars2) { // for each loop System.out.print(c); // &quot;Hello&quot; } strings Strings in Java are Objects that are backed internally by a char arraySince arrays are immutable(cannot grow), Strings are immutable as wellWhenever a change to a String is made, an entirely new String is createdmemory allotment of string Whenever a String Object is created as a literal, the object will be created in String constant poolThis allows JVM to optimize the initialization of String literal The cache which stores these string instances is known as the String Constant pool or String Pool In earlier versions of Java up to JDK 6 String pool was located inside PermGen(Permanent Generation) spaceBut in JDK 7 it is moved to the main heap area Why did the String pool move from PermGen to the normal heap area? PermGen space is limited, the default size is just 64 MBit was a problem with creating and storing too many string objects in PermGen spaceTo make Java more memory efficient, the concept of string literal is usedBy the use of the new keyword, The JVM will create a new string object in the normal heap area even if the same string object is present in the string pool // convert primitive values to string int intValue = 42; String fromInt = Integer.toString(intValue); // &quot;42&quot; boolean boolValue = true; String fromBool = Boolean.toString(boolValue); // &quot;true&quot; // strings: must use double quotes &quot;&quot; String stringName = new String(&quot;Hello&quot;); // method 1, dynamically allocated, assigned a new memory location in heap // use &quot;intern&quot; method to store string in constant pool String internedString = stringName.intern(); // this is preferred as it allows JVM to optimize memory allocation String stringName1 = &quot;string&quot;; // method 2: string literal, created in String constant pool String stringName2 = &quot;multi-line &quot; + &quot;string&quot;; // get character of string with index char charName = stringName1.charAt(0); // 's' // get character code int charCode = (int) charName; // 115 // get character code difference System.out.println('b' - 'a'); // 98 - 97 = 1 // modify string cases String stringName3 = stringName1.toUpperCase(); // &quot;STRING&quot; String stringName4 = stringName3.toLowerCase(); // &quot;string&quot; // get length of string stringName4.length(); // 6 // Returns the index within the string of the first occurrence of the specified string int index = stringName4.indexOf(&quot;ng&quot;); // 4 // Returns the index within the string of the first occurrence of the specified string, starting at the specified index String s = &quot;Learn Share Learn&quot;; int output = s.indexOf(&quot;ea&quot;, 3); // returns 13 // Returns the index within the string of the last occurrence of the specified string int output = s.lastIndexOf(&quot;a&quot;); // returns 14 // get substring with index String sub1 = stringName4.substring(4); // &quot;ng&quot; String sub2 = stringName4.substring(4, 6); // &quot;ng&quot; from starting index to but exclude last index // trim whitespaces from beginning and ending of string String trimStr = &quot; test &quot;; String newStr = trimStr.trim(); // &quot;test&quot; // Returns new string by replacing all occurrences of oldChar with newChar String s1 = “feeksforfeeks“; String s2 = “feeksforfeeks”.replace(‘f’ ,’g’); // returns “geeksgorgeeks” // toString method: convert primitive numeric values to string double doubleValue = .5d; String stringName5 = Double.toString(doubleValue); // &quot;0.5&quot; // comparing strings String str1 = &quot;Hello&quot;; // object 1 String str2 = &quot;Hello&quot;; // str2 points to str1, thus is still object 1 str1 == str2; // true String part1 = &quot;Hello &quot;; String part2 = &quot;World&quot;; String str3 = part1 + part2; // object 1 String str4 = &quot;Hello World&quot;; // object 2 str3 == str4; // false // need to use .equals() str3.equals(str4); // true // Compares string to another string, ignoring case considerations str3.equalsIgnoreCase(str4); // Compares two string lexicographically /* This returns difference s1-s2. If: out &lt; 0 // s1 comes before s2 out = 0 // s1 and s2 are equal. out &gt; 0 // s1 comes after s2. */ str3.compareTo(str4); // Compares two string lexicographically, ignoring case considerations str3.compareToIgnoreCase(str4);  StringTokenizer library used to break a string into tokens StringJoiner a class in java.util package which is used to construct a sequence of characters(strings) separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix string constructors String(byte[] byte_arr) Construct a new String by decoding the byte array uses the platform’s default character set for decoding byte[] b_arr = {71, 101, 101, 107, 115}; String s_byte = new String(b_arr); // Geeks String(byte[] byte_arr, Charset char_set) Construct a new String by decoding the byte array It uses the char_set for decoding byte[] b_arr = {71, 101, 101, 107, 115}; Charset cs = Charset.defaultCharset(); String s_byte_char = new String(b_arr, cs); // Geeks String(byte[] byte_arr, String char_set_name) Construct a new String by decoding the byte array It uses the char_set_name for decoding byte[] b_arr = {71, 101, 101, 107, 115}; String s = new String(b_arr, &quot;US-ASCII&quot;); // Geeks String(byte[] byte_arr, int start_index, int length) Construct a new string from the bytes array depending on the start_index(Starting location) and length(number of characters from starting location) byte[] b_arr = {71, 101, 101, 107, 115}; String s = new String(b_arr, 1, 3); // eek String(byte[] byte_arr, int start_index, int length, Charset char_set) Construct a new string from the bytes array depending on the start_index(Starting location) and length(number of characters from starting location).Uses char_set for decoding byte[] b_arr = {71, 101, 101, 107, 115}; Charset cs = Charset.defaultCharset(); String s = new String(b_arr, 1, 3, cs); // eek String(byte[] byte_arr, int start_index, int length, String char_set_name) Construct a new string from the bytes array depending on the start_index(Starting location) and length(number of characters from starting location).Uses char_set_name for decoding byte[] b_arr = {71, 101, 101, 107, 115}; String s = new String(b_arr, 1, 4, &quot;US-ASCII&quot;); // eeks String(char[] char_arr) Allocates a new String from the given Character array char char_arr[] = {'G', 'e', 'e', 'k', 's'}; String s = new String(char_arr); //Geeks String(char[] char_array, int start_index, int count) Allocates a String from a given character array but choose count characters from the start_index char char_arr[] = {'G', 'e', 'e', 'k', 's'}; String s = new String(char_arr , 1, 3); //eek String(int[] uni_code_points, int offset, int count) Allocates a String from a uni_code_array but choose count characters from the start_index int[] uni_code = {71, 101, 101, 107, 115}; String s = new String(uni_code, 1, 3); //eek String(StringBuffer s_buffer) Allocates a new string from the string in s_buffer StringBuffer s_buffer = new StringBuffer(&quot;Geeks&quot;); String s = new String(s_buffer); //Geeks String(StringBuilder s_builder) Allocates a new string from the string in s_builder StringBuilder s_builder = new StringBuilder(&quot;Geeks&quot;); String s = new String(s_builder); //Geeks  back to top "},{"title":"String Concatenation​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#string-concatenation","content":"method 1 String string1 = &quot;string&quot;; int num1 = 1; String stringName1 = string1 + num1; // &quot;string1&quot; // method 2 (concat value must be string type) String newString1 = string1.concat(Integer.toString(num1)); // &quot;string1&quot; // method 3 (%s = string, %d = &quot;byte, short, int, long, bigint&quot;, %c = char) String newString2 = String.format(&quot;%s%d&quot;, string1, num1); // &quot;string1&quot; method 4: StringBuilder represents a mutable sequence of characters it is not synchronized, which means that it is not thread-safeThe advantage of StringBuilder is faster performance String string1 = &quot;string&quot;; int num1 = 1; StringBuilder sb1 = new StringBuilder(string1); sb1.append(num1); // &quot;string1&quot; // or StringBuilder sb2 = new StringBuilder(); sb2.append(string1).append(num1); // &quot;string1&quot; // or StringBuilder sb3 = new StringBuilder(7); sb3.append(&quot;string&quot;); sb3.append(num1); sb2.delete(1, sb2.length()); // &quot;s&quot; method 5: StringBuffer represents growable and writable character sequences when using multithreading, must use StringBuffer rather than StringBuilder because it is synchronized, thus is thread-safe methods append Used to add text at the end of the existing textappendCodePoint appends the string representation of the codePoint argument to this sequencelengthcapacity the total allocated capacitycharAtdelete Deletes a sequence of characters from the invoking objectdeleteCharAt Deletes the character at the index specified by locensureCapacity Ensures capacity is at least equals to the given minimuminsert Inserts text at the specified index positionreverse Reverse the characters within a StringBuffer objectreplace Replace one set of characters with another set inside a StringBuffer object String string1 = &quot;string&quot;; int num1 = 1; StringBuffer sBuffer1 = new StringBuffer(string1); sBuffer1.append(num1); sBuffer1.toString(); // &quot;string1&quot; // or StringBuffer sBuffer2 = new StringBuffer(); sBuffer2.append(string1).append(num1); sBuffer2.toString(); // &quot;string1&quot; // or StringBuffer sBuffer3 = new StringBuffer(7); sBuffer3.append(&quot;string&quot;); sBuffer3.append(num1); String format reference back to top "},{"title":"Arithmetic Operators​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#arithmetic-operators","content":"addition: +subtraction: -multiplication: *division: double double_name = 3.0/2; // output 1.5, 3/2 output 1modulus: % divides the 2 numbers and returns the remainderexponent: Math.pow(3, 2); // output 9floor division: int integer_name = 3/2; // output 1 back to top "},{"title":"Comparison Operators​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#comparison-operators","content":"== reference comparison String s1 = new String(&quot;string value&quot;); String s2 = new String(&quot;string value&quot;); System.out.println(s1 == s2); // false String s3, s4; s3 = &quot;string value&quot;; s4 = &quot;string value&quot;; System.out.println(s3 == s4); // true use equals method to compare string values String s1 = new String(&quot;string value&quot;); String s2 = new String(&quot;string value&quot;); System.out.println(s1.equals(s2)); // true use equalsIgnoreCase to ignore cases String s1 = new String(&quot;String value&quot;); String s2 = new String(&quot;string value&quot;); System.out.println(s1.equals(s2)); // false System.out.println(s1.equalsIgnoreCase(s2)); // true != &gt; &lt; &gt;= &lt;= instanceof used for type checkingIt can be used to test if an object is an instance of a class, a subclass, or an interface String s = &quot;Hello&quot;; if (s instanceof java.lang.String) { System.out.println(true); }  back to top "},{"title":"Logical Operators​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#logical-operators","content":"&amp;&amp; and|| or^ exclusive or! not?= Ternary (shorthand if-then) back to top "},{"title":"Bitwise Operators​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#bitwise-operators","content":"// &amp; is binary AND Operator, return 1 if both a and b are 1, count the 1s a &amp; b // 12 = ...0000 1100 // | is binary OR Operator, return 1 if either a and or b HAVE a 1 a | b // 61 = ...0011 1101 // ^ is binary XOR Operator, return 1 if both a and b are not 1 or 0 a ^ b // 49 = ...0011 0001 // ~ is binary Complement Operator, invert everything, 1 change to 0 and vice versa, count the 0s ~a // -61 = ...1100 0011 // &lt;&lt; is binary left shift, shift everything to the left by n digit(s) a &lt;&lt; 2 // 240 = ...1111 0000 // &lt;&lt;&lt; is Unsigned Left shift operator // &gt;&gt; is Sign-propagating right shift, a binary right shift, shift everything to the right by n digit(s) a &gt;&gt; 2 // 15 = ...0000 1111 c &gt;&gt; 2 // 3 = ...0000 0010, count the 1s c = -9 // -9 = ...1111 0111 c &gt;&gt; 2 // -3 = ...1111 1101, count the 0s // &gt;&gt;&gt; is Unsigned Right shift operator, shift everything to the right by n digits(s), leftmost will add n 0s c &gt;&gt;&gt; 2 // 2 = ...0000 0010, count the 1s c = -9 // -9 = ...1111 0111 c &gt;&gt;&gt; 2 // 1073741821 = 0011...1111 1101, count the 0s  back to top "},{"title":"Increment​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#increment","content":"x = x + 1;x += 1;++x; pre-increment, add 1 nowx++; post-increment, display without addition now then add 1 later when called again back to top "},{"title":"Getting Input​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#getting-input","content":"must import scanner library import java.util.Scanner; // print question System.out.println(&quot;What's your name?&quot;); // get raw input Scanner scanner = new Scanner(System.in); // convert raw value to string type // can read the input only till the space // It can't read two words separated by a space // places the cursor in the same line after reading the input String input = scanner.next(); // reads input including space between the words till the end of line \\n // Once the input is read, positions the cursor in the next line String input1 = scanner.nextLine(); // convert raw value to int type Int input2 = scanner.nextInt(); single input String name; try (Scanner in = new Scanner(System.in)) { System.out.println(&quot;Enter your name: &quot;); name = in.nextLine(); } System.out.println(&quot;name is &quot; + name); multiple inputs String firstname, surname; try (Scanner in = new Scanner(System.in)) { System.out.println(&quot;Enter your first name and then your surname: &quot;); firstname = in.nextLine(); surname = in.nextLine(); } System.out.println(&quot;name is &quot; + firstname + &quot; &quot; + surname);  back to top "},{"title":"Arrays and Lists​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#arrays-and-lists","content":"Arrays In Java, all arrays are dynamically allocated Obtaining an array is a two-step process First, you must declare a variable of the desired array typeSecond, you must allocate the memory to hold the array, using new, and assign it to the array variable Thus, in Java, all arrays are dynamically allocated Arrays are stored in contagious memory [consecutive memory locations]Since arrays are objects in Java, we can find their length using the object property length This is different from C/C++, where we find length using sizeof A Java array variable can also be declared like other variables with [] after the data typeThe variables in the array are ordered, and each has an index beginning from 0Java array can also be used as a static field, a local variable, or a method parameterThe size of an array must be specified by int or short value and not longThe direct superclass of an array type is ObjectEvery array type implements the interfaces Cloneable and java.io.SerializableThis storage of arrays helps us in randomly accessing the elements of an array [Support Random Access]The size of the array cannot be altered(once initialized) However, an array reference can be made to point to another array can only have 1 primitive or object data type: string, int, etc. primitive data are stored in the contiguous memory locationsnon primitive data are stored in a heap segment printing this only shows the memoryThe elements in the array allocated by new will automatically be initialized to 0 (for numeric types), false (for boolean), or null (for reference types) // Empty string array of desired array size String[] stringArray = new String[length_of_desired_array]; // New string array with elements inside String [] stringArray = new String [] {string1, string2,...}; // Method 1: array literal String[] stringArray = {string1, string2,...}; // Method 2 // Add string array element, limited to array size // Modify string array element value stringArray[index] = element; // Access an element stringArray[index]; // Find array size stringArray.length; // get class object information, it will return the run-time type signature &quot;array with component type string&quot; for this example stringArray.getClass(); // class [S // get superclass information stringArray.getClass().getSuperclass(); // class java.lang.Object // deep copy / clone for single-dimensional array String stringArray2 = stringArray.clone(); System.out.println(stringArray == stringArray2); // true // Copy array int sourceArrStartingIndex = 1; int destinationArrStartingIndex = 0; int copiedArrLen = 2; String[] copiedArr = new String[copiedArrLen]; System.arraycopy(sourceArr, sourceArrStartingIndex, copiedArr, destinationArrStartingIndex, copiedArrLen); // {&quot;apple&quot;, &quot;pear&quot;} // multidimensional array (subarrays are of the same size) / jagged arrays (subarrays can be of different sizes) String[][] states = new String[3][2]; states[0][0] = &quot;Japan&quot;; states[0][1] = &quot;Tokyo&quot;; // clone for multi-dimensional array is a shallow copy // because it creates a new array, but the subarrays are shared String[][] states2 = states.clone(); System.out.println(states == states2); // false  Sorting an array Sort array, can sort numbers, strings, etc. import java.util.Arrays; String[] sourceArr = {&quot;orange&quot;, &quot;apple&quot;, &quot;pear&quot;}; Arrays.sort(sourceArr); // {&quot;apple&quot;, &quot;orange&quot;, &quot;pear&quot;}  "},{"title":"List Interface​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#list-interface","content":"it is an interface, extends the Collection frameworkThis interface is dedicated to the data of the list type in which we can store all the ordered collection of the objectsThis also allows duplicate data to be present in itThis list interface is implemented by various classes like ArrayList, Vector, Stack, etc. Since all the subclasses implement the list, we can instantiate a list object with any of these classes printing this shows the actual array import java.util.List; import java.util.Arrays; import java.util.ArrayList; import java.util.LinkedList; import java.util.Vector;  // method 1 List&lt;String&gt; list = Arrays.asList(element, element, ...) // method 2 List&lt;String&gt; list = new ArrayList&lt;&gt;(); // from java 7 onwards redundant &lt;String&gt; is not required, can just use &lt;&gt; // Add element to string List (left to right) list.add(element); // add an element at a specific index in the List list.add(index, element); // add another list into existing list from index list.addAll(index, list2); // updating element at index list.set(index, element); // Remove element from list at index list.remove(index); // Remove element from list with value list.remove(element); // Access an element list.get(index); // Find index of an element list.indexOf(element); // get length of list list.size(); List &lt;T&gt; linkList = new LinkedList&lt;&gt; (); List &lt;T&gt; vector = new Vector&lt;&gt; ();  "},{"title":"Arraylist​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#arraylist","content":"it is a class, extends the AbstractList class and implements List interface used to create a dynamic array that contains objects creates an array of objects where the array can grow dynamically size of the array automatically increases when we dynamically add and remove itemswhen the array becomes full and if we try to add an item Creates a bigger-sized memory on heap memoryCopies the current memory elements to the new memoryNew item is added now as there is bigger memory available nowDelete the old memory it may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed it is not Synchronized Its equivalent synchronized class is Vector can only have 1 data type ArrayList can not be used for primitive types, like int, char, etc. example: cannot be compiled ArrayList&lt;int&gt; list = new ArrayList&lt;&gt;();  import java.util.ArrayList; import java.util.Array;  // arraylist with default values ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(Arrays.asList(1,2,3,4)); // Empty string arrayList ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;(); // Add element to string arrayList (left to right) arrayList.add(element); // add an element at a specific index in the List arrayList.add(index, element); // add another list into existing list from index arrayList.addAll(index, list2); // Modify an element at index arrayList.set(index, element); // Access an element arrayList.get(index); // Remove element from arrayList at index arrayList.remove(index); // remove by value arrayList.remove(Integer.valueOf(element)); // if element is a primitive arrayList.remove(element); // if element is not a primitive // Find arrayList size arrayList.size(); // Remove all elements arrayList.clear();  "},{"title":"LinkedList​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#linkedlist","content":"an implementation of the LinkedList data structure which is a linear data structure where the elements are not stored in contiguous locations and every element is a separate object with a data part and address partThe elements are linked using pointers and addressesEach element is known as a node import java.util.LinkedList; class Test { public static void main(String[] args) { LinkedList&lt;Integer&gt; ll = new LinkedList&lt;Integer&gt;(); // Appending new elements at the end of the list for (int i = 1; i &lt;= 5; i++) ll.add(i); System.out.println(ll); // Remove element at index 3 ll.remove(3); // Displaying the List after deletion System.out.println(ll); // Printing elements one by one for (int i = 0; i &lt; ll.size(); i++) System.out.print(ll.get(i) + &quot; &quot;); } }  "},{"title":"Vector​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#vector","content":"it provides us with dynamic arrays in Javait may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed This is identical to ArrayList in terms of implementation However, the primary difference between a vector and an ArrayList is that a Vector is synchronized and an ArrayList is non-synchronized import java.util.Vector; class Test { public static void main(String[] args) { Vector&lt;Integer&gt; v = new Vector&lt;Integer&gt;(); // Appending new elements at the end of the list for (int i = 1; i &lt;= 5; i++) { // add element v.add(i); v.add(0, 10); // insert element at index if (i == 0) v.set(0, i); // update element at index } System.out.println(v); // Remove element at index v.remove(index); // remove by value of first occurrence // method 1: if element is a primitive v.remove(Integer.valueOf(element)); // method 1.1 v.remove(v.indexOf(element)); // method 1.2 v.remove((Integer) element); // method 1.3: change the int value to Integer value that matches the array element type // method 2: if element is not a primitive v.remove(element); list.removeAll(Arrays.asList(element)); // remove all values with element // Displaying the Vector after deletion System.out.println(v); // Printing elements one by one for (int i = 0; i &lt; v.size(); i++) System.out.print(v.get(i) + &quot; &quot;); } }  "},{"title":"Stack​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#stack","content":"models and implements the Stack data structureThe class is based on the basic principle of last-in-first-outIn addition to the basic push and pop operations, the class provides three more functions of empty, search and peekThe class can also be referred to as the subclass of Vector import java.util.Stack; import java.util.Iterator; public class Test { public static void main(String args[]) { Stack&lt;String&gt; stack = new Stack&lt;String&gt;(); stack.push(&quot;Geeks&quot;); stack.push(&quot;For&quot;); stack.push(&quot;Geeks&quot;); stack.push(&quot;Geeks&quot;); // Iterator for the stack Iterator&lt;String&gt; itr = stack.iterator(); // Printing the stack while (itr.hasNext()) { System.out.print(itr.next() + &quot; &quot;); } System.out.println(); stack.pop(); stack.remove(2); // Iterator for the stack itr = stack.iterator(); // Printing the stack while (itr.hasNext()) { System.out.print(itr.next() + &quot; &quot;); } } }  "},{"title":"Queue Interface​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#queue-interface","content":"maintains the FIFO(First In First Out) order similar to a real-world queue lineThis interface is dedicated to storing all the elements where the order of the elements matterThere are various classes like PriorityQueue, ArrayDeque, etc. Since all these subclasses implement the queue, we can instantiate a queue object with any of these classes import java.util.Queue; import java.util.PriorityQueue; import java.util.ArrayDeque;  Queue &lt;T&gt; pq = new PriorityQueue&lt;&gt; (); Queue &lt;T&gt; ad = new ArrayDeque&lt;&gt; ();  "},{"title":"Priority Queue​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#priority-queue","content":"it is used when the objects are supposed to be processed based on the priorityIt is known that a queue follows the First-In-First-Out algorithm but sometimes the elements of the queue are needed to be processed according to the priority and this class is used in these cases The PriorityQueue is based on the priority heapThe elements of the priority queue are ordered according to the natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used import java.util.PriorityQueue; class Test { public static void main(String args[]) { // Creating empty priority queue PriorityQueue&lt;Integer&gt; pQueue = new PriorityQueue&lt;Integer&gt;(); // Adding items to the pQueue using add() pQueue.add(10); pQueue.add(20); pQueue.add(15); // Printing the top element of PriorityQueue System.out.println(pQueue.peek()); // Printing the top element and removing it from the PriorityQueue container System.out.println(pQueue.poll()); System.out.println(pQueue.peek()); } }  "},{"title":"Deque Interface​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#deque-interface","content":"a slight variation of the queue data structurealso known as a double-ended queue, is a data structure where we can add and remove the elements from both ends of the queueThis interface extends the queue interface The class which implements this interface is ArrayDequeSince ArrayDeque class implements the Deque interface, we can instantiate a deque object with this class import java.util.Deque; import java.util.ArrayDeque;  Deque&lt;T&gt; ad = new ArrayDeque&lt;&gt; ();  "},{"title":"ArrayDeque​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#arraydeque","content":"implemented in the collection framework provides us with a way to apply resizable-arrayThis is a special kind of array that grows and allows users to add or remove an element from both sides of the queueArray deques have no capacity restrictions and they grow as necessary to support usage import java.util.ArrayDeque; public class ArrayDequeDemo { public static void main(String[] args) { ArrayDeque&lt;Integer&gt; de_que = new ArrayDeque&lt;Integer&gt;(10); de_que.add(10); de_que.add(20); de_que.add(30); de_que.add(40); de_que.add(50); System.out.println(de_que); de_que.clear(); // addFirst() method to insert the elements at the head de_que.addFirst(564); de_que.addFirst(291); // addLast() method to insert the elements at the tail de_que.addLast(24); de_que.addLast(14); System.out.println(de_que); } }  "},{"title":"Set Interface​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#set-interface","content":"it is an unordered collection of objects in which duplicate values cannot be storedThis collection is used when we wish to avoid the duplication of the objects and wish to store only the unique objectsThis set interface is implemented by various classes like HashSet, TreeSet, LinkedHashSet, etc. Since all the subclasses implement the set, we can instantiate a set object with any of these classes import java.util.Set; import java.util.LinkedHashSet; import java.util.TreeSet;  Set&lt;T&gt; hs = new HashSet&lt;&gt; (); Set&lt;T&gt; lhs = new LinkedHashSet&lt;&gt; (); Set&lt;T&gt; ts = new TreeSet&lt;&gt; ();  "},{"title":"HashSet​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#hashset","content":"it is an inherent implementation of the hash table data structureThe objects that we insert into the HashSet do not guarantee to be inserted in the same orderThe objects are inserted based on their hashcodeThis class also allows the insertion of NULL elements import java.util.HashSet; public class HashSetDemo { public static void main(String args[]) { HashSet&lt;String&gt; hs = new HashSet&lt;String&gt;(); hs.add(&quot;Geeks&quot;); hs.add(&quot;For&quot;); hs.add(&quot;Geeks&quot;); hs.add(&quot;Is&quot;); hs.add(&quot;Very helpful&quot;); // Traversing elements Iterator&lt;String&gt; itr = hs.iterator(); while (itr.hasNext()) { System.out.println(itr.next()); } } }  "},{"title":"LinkedHashSet​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#linkedhashset","content":"it is very similar to a HashSetThe difference is that this uses a doubly linked list to store the data and retains the ordering of the elements import java.util.LinkedHashSet; public class LinkedHashSetDemo { public static void main(String args[]) { LinkedHashSet&lt;String&gt; lhs = new LinkedHashSet&lt;String&gt;(); lhs.add(&quot;Geeks&quot;); lhs.add(&quot;For&quot;); lhs.add(&quot;Geeks&quot;); lhs.add(&quot;Is&quot;); lhs.add(&quot;Very helpful&quot;); // Traversing elements Iterator&lt;String&gt; itr = lhs.iterator(); while (itr.hasNext()) { System.out.println(itr.next()); } } }  "},{"title":"SortedSet Interface​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#sortedset-interface","content":"it is very similar to the set interfaceThe only difference is that this interface has extra methods that maintain the ordering of the elementsThe sorted set interface extends the set interface and is used to handle the data which needs to be sortedThe class which implements this interface is TreeSet Since this class implements the SortedSet, we can instantiate a SortedSet object with this class import java.util.SortedSet; import java.util.TreeSet;  SortedSet&lt;T&gt; ts = new TreeSet&lt;&gt; ();  "},{"title":"TreeSet​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#treeset","content":"it uses a Tree for storageThe ordering of the elements is maintained by a set using their natural ordering whether or not an explicit comparator is providedThis must be consistent with equals if it is to correctly implement the Set interfaceIt can also be ordered by a Comparator provided at set creation time, depending on which constructor is used import java.util.TreeSet; public class TreeSetDemo { public static void main(String args[]) { TreeSet&lt;String&gt; ts = new TreeSet&lt;String&gt;(); ts.add(&quot;Geeks&quot;); ts.add(&quot;For&quot;); ts.add(&quot;Geeks&quot;); ts.add(&quot;Is&quot;); ts.add(&quot;Very helpful&quot;); // Traversing elements Iterator&lt;String&gt; itr = ts.iterator(); while (itr.hasNext()) { System.out.println(itr.next()); } } }  "},{"title":"Map Interface​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#map-interface","content":"it is a data structure that supports the key-value pair mapping for the dataThis interface doesn’t support duplicate keys because the same key cannot have multiple mappingsA map is useful if there is data and we wish to perform operations on the basis of the keyThis map interface is implemented by various classes like HashMap, TreeMap, etc. Since all the subclasses implement the map, we can instantiate a map object with any of these classes import java.util.Map; import java.util.HashMap; import java.util.TreeMap;  Map&lt;T&gt; hm = new HashMap&lt;&gt; (); Map&lt;T&gt; tm = new TreeMap&lt;&gt; ();  "},{"title":"HashMap​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#hashmap","content":"it provides the basic implementation of the Map interface of JavaIt stores the data in (Key, Value) pairsTo access a value in a HashMap, we must know its keyHashMap uses a technique called HashingHashing is a technique of converting a large String to a small String that represents the same String so that the indexing and search operations are fasterHashSet also uses HashMap internally import java.util.HashMap; public class HashMapDemo { public static void main(String args[]) { HashMap&lt;Integer, String&gt; hm = new HashMap&lt;Integer, String&gt;(); hm.put(1, &quot;Geeks&quot;); hm.put(2, &quot;For&quot;); hm.put(3, &quot;Geeks&quot;); // Finding the value for a key System.out.println(&quot;Value for 1 is &quot; + hm.get(1)); // Traversing through the HashMap for (Map.Entry&lt;Integer, String&gt; e : hm.entrySet()) System.out.println(e.getKey() + &quot; &quot; + e.getValue()); } }  "},{"title":"Collections static methods​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#collections-static-methods","content":"addAll​ it is used to add all the specified elements to the specified collectionElements to be added may be specified individually or as an array import java.util.ArrayList; import java.util.Collections; import java.util.List; class Test { public static void main(String[] args) { List&lt;String&gt; items = new ArrayList&lt;&gt;(); items.add(&quot;Shoes&quot;); items.add(&quot;Toys&quot;); // Add one or more elements Collections.addAll(items, &quot;Fruits&quot;, &quot;Bat&quot;, &quot;Ball&quot;); // Printing the list contents for (int i = 0; i &lt; items.size(); i++) { System.out.print(items.get(i) + &quot; &quot;); // Shoes Toys Fruits Bat Ball } } }  sort​ it is used to sort the elements present in the specified list of Collection in ascending orderjava.util.Collections.reverseOrder() is used to sort in the descending order import java.util.ArrayList; import java.util.Collections; import java.util.List; class Test { public static void main(String[] args) { List&lt;String&gt; items = new ArrayList&lt;&gt;(); items.add(&quot;Shoes&quot;); items.add(&quot;Toys&quot;); Collections.addAll(items, &quot;Fruits&quot;, &quot;Bat&quot;, &quot;Mouse&quot;); // Sorting according to default ordering using sort() method Collections.sort(items); // Printing the elements for (int i = 0; i &lt; items.size(); i++) { System.out.print(items.get(i) + &quot; &quot;); // Bat Fruits Mouse Shoes Toys } System.out.println(); // Sorting according to reverse ordering Collections.sort(items, Collections.reverseOrder()); // Printing the reverse order for (int i = 0; i &lt; items.size(); i++) { System.out.print(items.get(i) + &quot; &quot;); // Toys Shoes Mouse Fruits Bat } } }  binarySearch​ returns the position of an object in a sorted listTo use this method, the list should be sorted in ascending order otherwise, the result returned from the method will be wrong If the element exists in the list, the method will return the position of the element in the sorted list otherwise, the result returned by the method would be the (index where the element should have been present if exist - 1) import java.util.ArrayList; import java.util.Collections; import java.util.List; public class Test { public static void main(String[] args) { List&lt;String&gt; items = new ArrayList&lt;&gt;(); items.add(&quot;Shoes&quot;); items.add(&quot;Toys&quot;); items.add(&quot;Horse&quot;); items.add(&quot;Ball&quot;); items.add(&quot;Grapes&quot;); // Sort the List Collections.sort(items); // BinarySearch on the List System.out.println( &quot;The index of Horse is &quot; + Collections.binarySearch(items, &quot;Horse&quot;)); // The index of Horse is 2 // BinarySearch on the List, value not found System.out.println( &quot;The index of Dog is &quot; + Collections.binarySearch(items, &quot;Dog&quot;)); // The index of Dog is -2 } }  copy​ it is used to copy all the elements from one list into another After the operation, the index of each copied element in the destination list will be identical to its index in the source listThe destination list must be at least as long as the source listIf it is longer, the remaining elements in the destination list are unaffectedvalues from source list will replace the values in the destination list, remaining elements in the destination list are unaffected import java.util.ArrayList; import java.util.Collections; import java.util.List; class Test { public static void main(String[] args) { List&lt;String&gt; destination_List = new ArrayList&lt;&gt;(); destination_List.add(&quot;Shoes&quot;); destination_List.add(&quot;Toys&quot;); destination_List.add(&quot;Horse&quot;); destination_List.add(&quot;Tiger&quot;); System.out.println( &quot;The Original Destination list is &quot;); for (int i = 0; i &lt; destination_List.size(); i++) { System.out.print(destination_List.get(i) + &quot; &quot;); // Shoes Toys Horse Tiger } System.out.println(); // Create source list List&lt;String&gt; source_List = new ArrayList&lt;&gt;(); source_List.add(&quot;Bat&quot;); source_List.add(&quot;Frog&quot;); source_List.add(&quot;Lion&quot;); // Copy the elements from source to destination Collections.copy(destination_List, source_List); // Printing the modified list System.out.println( &quot;The Destination List After copying is &quot;); for (int i = 0; i &lt; destination_List.size(); i++) { System.out.print(destination_List.get(i) + &quot; &quot;); // Bat Frog Lion Tiger } } }  "},{"title":"disjoin​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#disjoin","content":"it is used to check whether two specified collections are disjoint or notthe 2 collections are disjoint if they have no elements in commonIt returns true if the two collections do not have any element in common import java.util.ArrayList; import java.util.Collections; import java.util.List; class Test { public static void main(String[] args) { List&lt;String&gt; list1 = new ArrayList&lt;&gt;(); list1.add(&quot;Shoes&quot;); list1.add(&quot;Toys&quot;); list1.add(&quot;Horse&quot;); list1.add(&quot;Tiger&quot;); List&lt;String&gt; list2 = new ArrayList&lt;&gt;(); list2.add(&quot;Bat&quot;); list2.add(&quot;Frog&quot;); list2.add(&quot;Lion&quot;); // Check if disjoint or not System.out.println( Collections.disjoint(list1, list2)); // true } }  back to top "},{"title":"Conditional Statement​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#conditional-statement","content":"// If else statement if (condition_a) { do_A; } else if (condition_b) { do_B; } else { do_something_else; } // {} not required if statement is a single line if (condition_a) do_A; // Single line statement else if (condition_b) do_B; // Single line statement else do_something_else; // Single line statement // Ternary operator condition_a ? do_A : do_B; // Switch statement switch(choice) { // choice value can only be primitive values in java 7, since java 8 strings are also accepted case choice_A: do_A; break; case choice_B: do_B; break; default: do_something_else; break; // not required, but good to have in Java }  back to top "},{"title":"Loops​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#loops","content":"// While loop // declare_initial_conditional_value int i = 0; // Set condition while (i&lt;5) { // Start from 0 to 4 doThis; // Include condition_increment_or_decrement; i++; // Can use break or continue to add additional functionality, or not use any break; // Breaks out of the current closest enclosing loop continue; // Goes to the top of the closest enclosing loop } // Do while loop: execute first before setting conditions, it is an example of exit control loop // declare_initial_conditional_value int i = 0; do { // Start from 0 to 4 doThis; // Include condition_increment_or_decrement; i++; // Set condition } while (i&lt;5); // For loop for (int i=0; i&lt;5; i++) { // Start from 0 to 4 doThis; // Can use break or continue to add additional functionality, or not use any break; // Breaks out of the current closest enclosing loop continue; // Goes to the top of the closest enclosing loop } // Reverse loop for (int i=4; i&gt;=0; i--) { // Start from 4 to 0 doThis; } // for each loop, can also loop collections with iterators char[] chars = {'H', 'e', 'l', 'l', 'o'}; // an array can only have a single data type for (char c : chars) { // for each element in the array doThis; } // infinite for loop for(;;){ //code to be executed }  back to top "},{"title":"Instantiation​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#instantiation","content":"public class ClassName { public String type; // instance variable public static void main(String[] args) { ClassName t = new ClassName(); // instantiation t.type = &quot;something&quot;; t.display(); doSomething(); // can call static method directly } // instance method private void display() {} // static method static void doSomething() {} }  back to top "},{"title":"Functions​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#functions","content":" Memory Allocation for Methods Calls Methods calls are implemented through a stackWhenever a method is called a stack frame is created within the stack area and after that the arguments passed to and the local variables and value to be returned by this called method are stored in this stack framewhen execution of the called method is finished, the allocated stack frame would be deleted There is a stack pointer register that tracks the top of the stack which is adjusted accordingly All the method names should start with a lowercase letter If several words are used to form the name of the method, then each first letter of the inner word should be in Uppercase Underscores are allowed, but not recommended Also allowed are digits and currency symbols example public void employeeRecords() // valid syntax public void EmployeeRecords() // valid syntax, but discouraged  // Normal functions public static void myFunction() { do_something; } // Normal function with parameters public static void myFunction(dataType a){ do_something_with_a } // Normal function with return value (change void to data type to return) public static int sum(int a){ return a + 1; }  Lambda interface an interface that contains at most one abstract functionrepresents abstract concepts such as functions, actions, or predicatesPredicate: takes 1 argument, returns a Boolean import java.util.function.Predicate; Predicate&lt;String&gt; stringLen = (s) -&gt; s.length() &lt; 10; System.out.println(stringLen.test(&quot;Apples&quot;) + &quot; - Apples is less than 10&quot;); // true - Apples is less than 10 Consumer accepts single argument with no return value import java.util.function.Consumer; Consumer&lt;String&gt; consumerStr = (s) -&gt; System.out.println(s.toLowerCase()); consumerStr.accept(&quot;ABCDefghij&quot;); // abcdefghij Function accepts 1 argument and produces a result import java.util.function.Function; Function&lt;Integer, String&gt; converter = (num) -&gt; Integer.toString(num); System.out.println(&quot;length of 26: &quot; + converter.apply(26).length()); // length of 26: 2 Supplier represents a supplier of results import java.util.function.Supplier; Supplier&lt;String&gt; s = () -&gt; &quot;Java is fun&quot;; System.out.println(s.get()); // Java is fun Runnable similar to Supplier // method 1 Runnable r1 = new Runnable() { @Override public void run() { System.out.println(&quot;run&quot;); } }; r1.run(); // run // method 2 Runnable r2 = () -&gt; System.out.println(&quot;run&quot;); r2.run(); // run UnaryOperator single argument with a return value import java.util.function.UnaryOperator; UnaryOperator&lt;String&gt; str = (msg) -&gt; msg.toUpperCase(); System.out.println(str.apply(&quot;Msg in upper case&quot;)); // MSG IN UPPER CASE UnaryOperator&lt;String&gt; makeGreeting = &quot;Hello, &quot;::concat; System.out.println(makeGreeting.apply(&quot;World&quot;)); // Hello, World BinaryOperator takes 2 arguments and returns value import java.util.function.BinaryOperator; BinaryOperator&lt;Integer&gt; add = (a, b) -&gt; a + b; System.out.println(add.apply(10, 25)); // 35 BiFunction similar to BinaryOperator import java.util.function.BiFunction; BiFunction&lt;String, String, String&gt; concat = (a, b) -&gt; a + b; String sentence = concat.apply(&quot;Today is &quot;, &quot;a great day&quot;); System.out.println(sentence); // Today is a great day custom interface @FunctionalInterface // not a must but better to have interface StringFunction { String doSomething(String str); } StringFunction strFunc = (s) -&gt; s; System.out.println(strFunc.doSomething(&quot;test&quot;)); // test method as lambdas import java.util.function.Function; import java.util.function.IntFunction; // method 1 IntFunction&lt;String&gt; intToString = num -&gt; Integer.toString(num); System.out.println(intToString.apply(123)); // 123 // method 2: static method reference using :: IntFunction&lt;String&gt; intToString2 = Integer::toString; System.out.println(intToString2.apply(123)); // 123 lambdas made using a constructor import java.math.BigInteger; // method 1 Function&lt;String, BigInteger&gt; newBigInt1 = (num) -&gt; new BigInteger(num); System.out.println(&quot;expected value: 123456789, actual value: &quot; + newBigInt1.apply(&quot;123456789&quot;)); // expected value: 123456789, actual value: 123456789 // method 2 Function&lt;String, BigInteger&gt; newBigInt2 = BigInteger::new; System.out.println(&quot;expected value: 123456789, actual value: &quot; + newBigInt2.apply(&quot;123456789&quot;)); // expected value: 123456789, actual value: 123456789 lambdas made from an instance method import java.util.function.Consumer; // method 1 Consumer&lt;String&gt; print1 = (str1) -&gt; System.out.println(str1); print1.accept(&quot;Hello World&quot;); // Hello World // method 2 Consumer&lt;String&gt; print2 = System.out::println; print2.accept(&quot;Hello World&quot;); // Hello World  // import java.util.ArrayList; // import java.util.function.Consumer; // must import // store non returning function ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;(); numbers.add(5); Consumer&lt;Integer&gt; method = (n) -&gt; { System.out.println(n); }; // can remove {} if is one liner // method 1 numbers.forEach( method ); // 5 // method 2 numbers.forEach( (n) -&gt; { System.out.println(n); } ); // 5  method overloading static double addValues(String s1, String s2) { double d1 = Double.parseDouble(s1); double d2 = Double.parseDouble(s2); double result = d1 + d2; return result; } static double addValues(String s1, String s2, String s3) { double d1 = Double.parseDouble(s1); double d2 = Double.parseDouble(s2); double d3 = Double.parseDouble(s3); double result = d1 + d2 + d3; return result; }  back to top "},{"title":"Higher order functions​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#higher-order-functions","content":"back to top "},{"title":"Hash Tables​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#hash-tables","content":"Hash Tables, Dictionaries, Objects // Map: it is an interface used to store data in key-value pair import java.util.Map; // must import // HashMap: it is the implementation class of the Map interface import java.util.HashMap; // must import // Set: it is an interface used to store data in value without duplicates import java.util.Set; // HashSet: It is the implementation class of the Set interface import java.util.HashSet;  // declaration of maps Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); // Map&lt;Integer, Boolean&gt; map = new HashMap&lt;&gt;(); // add key value pair map.put(&quot;jp&quot;, &quot;Japan&quot;); map.put(&quot;sg&quot;, &quot;Singapore&quot;); map.put(&quot;usa&quot;, &quot;United States&quot;); System.out.println(map); // { jp=Japan, sg=Singapore, usa=United States } // get value with key map.get(&quot;jp&quot;); // &quot;Japan&quot; // check if key exists map.containsKey(&quot;kr&quot;); // false // remove key value pair with key map.remove(&quot;sg&quot;); // { jp=Japan, usa=United States } // get a set of keys // import java.util.Set; // must import Set&lt;String&gt; keys = map.keySet(); // [ usa, jp ] // declaration of sets Set&lt;Integer&gt; numbers = new HashSet&lt;Integer&gt;(); // add value numbers.add(1); // check if value exists numbers.contains(1); // true // Check if a HashSet is empty numbers.isEmpty(); // Find the size of a HashSet numbers.size(); // Remove an element from a HashSet (The remove() method returns false if the element does not exist in the HashSet) boolean isRemoved = numbers.remove(10); // Remove all elements matching a given predicate numbers.removeIf(num -&gt; num % 2 == 0); // Remove all elements from HashSet (clear it completely) numbers.clear();  back to top "},{"title":"Collections​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#collections","content":"introduced in Java 7it is a group of elementscan store, retrieve, manipulate, and communicate aggregate data import java.util.List; import java.util.Arrays; import java.util.Comparator; import java.util.Collections;  List&lt;String&gt; names = Arrays.asList(&quot;Paul&quot;, &quot;Jane&quot;, &quot;Michaela&quot;, &quot;Sam&quot;); // method 1 Collections.sort(names, new Comparator&lt;String&gt;() { @Override public int compare(String a, String b) { return a.compareTo(b); // ascending order } }); System.out.println(names); // [Jane, Michaela, Paul, Sam] // method 2 using lambda Collections.sort(names, (a, b) -&gt; b.compareTo(a)); // descending order System.out.println(names); // [Sam, Paul, Michaela, Jane]  removing duplicates eliminate duplicates and auto sort import java.util.Arrays; import java.util.Collection; import java.util.HashSet; import java.util.List; import java.util.Set; List&lt;Integer&gt; duplicateNums = Arrays.asList(4, 3, 3, 3, 2, 1, 1, 1); System.out.println(duplicateNums.toString()); // [4, 3, 3, 3, 2, 1, 1, 1] // method 1 Collection&lt;Integer&gt; noDuplicatesNums = new HashSet&lt;&gt;(duplicateNums); System.out.println(noDuplicatesNums.toString()); // [1, 2, 3, 4] // method 2 Set&lt;Integer&gt; noDuplicatesNums2 = new HashSet&lt;&gt;(duplicateNums); System.out.println(noDuplicatesNums2.toString()); // [1, 2, 3, 4] streams the package contains interfaces for using streamsa stream represents a sequence of elementsthe package was added to traverse collectionsmost stream operations take a lambda expressionStream operations are either intermediate or terminal Terminal operations are either void or return a type e.g.: .collect(...) Intermediate operations return the stream itself e.g.: .sorted() common operations include map, filter, forEachelements in a stream cannot be changed import java.util.List; import java.util.Arrays; import java.util.stream.Collectors; public class Person { private String name; public Person(String name) { this.name = name; } public String getName() { return name; } } public class Main { public static void main(String[] args) { List&lt;String&gt; names = Arrays.asList(&quot;Paul&quot;, &quot;Jane&quot;, &quot;Michaela&quot;, &quot;Sam&quot;); System.out.println(names.stream().collect(Collectors.joining(&quot;,&quot;))); // Paul,Jane,Michaela,Sam Person personA = new Person(&quot;Paul&quot;); Person personB = new Person(&quot;Jane&quot;); Person personC = new Person(&quot;Sam&quot;); List&lt;Person&gt; people = Arrays.asList(personA, personB, personC); // use .collect to aggregate names into a list // use .map to get the name List&lt;String&gt; names2 = people.stream().map(Person::getName).collect(Collectors.toList()); System.out.println(names2); // [Paul, Jane, Sam] } } import java.util.Arrays; import java.util.List; import java.util.stream.Collectors; import java.util.stream.Stream; Arrays.asList(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;).stream().sorted().findFirst().ifPresent(System.out::println); // blue Stream.of(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;).filter(color -&gt; color.startsWith(&quot;g&quot;)).forEach(System.out::println); // green List&lt;String&gt; collected = Stream.of(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;).map(string -&gt; string.toUpperCase()).collect(Collectors.toList()); System.out.println(collected.toString()); // [RED, GREEN, BLUE] import java.util.Arrays; import java.util.stream.IntStream; import java.util.stream.Stream; IntStream.range(1, 4).forEach(System.out::print); // 123 // find the average of the numbers squared Arrays.stream(new int[] {1, 2, 3, 4}).map(n -&gt; n*n).average().ifPresent(System.out::println); // 7.5 // map doubles to ints Stream.of(1.5, 2.3, 3.7).mapToInt(Double::intValue).forEach(System.out::print); // 123  back to top "},{"title":"Destructuring​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#destructuring","content":"back to top "},{"title":"Spread Operator​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#spread-operator","content":"back to top "},{"title":"Rest parameters​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#rest-parameters","content":"static double myFunction(String ... args) { String[] argsArr = args; // args is an array of arguments }  back to top "},{"title":"Class​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#class","content":"The first letter of the class should be in Uppercase (lowercase is allowed, but discouraged) If several words are used to form the name of the class, each inner word’s first letter should be in Uppercase Underscores are allowed, but not recommended numbers and currency symbols are also allowed latter are also discouraged because they are used for a special purpose for inner and anonymous classes example class MyJavaProgram // valid syntax class 1Program // invalid syntax class My1Program // valid syntax class $Program // valid syntax, but discouraged class My$Program // valid syntax, but discouraged (inner class Program inside the class My) class myJavaProgram // valid syntax, but discouraged if no constructor has been defined, a constructor with no args will be auto generated if a constructor with args has been defined, a constructor with no args will not be auto generated constructor can be overloaded with multiple constructors public class Math { public int arg1; public int arg2; public int total; public static final String NAME = &quot;Math&quot;; // declaring a constant variable // constructor (must have the same name as class name, no return data type) public Math() {} // overloading constructor public Math(int arg0, int arg2) { // this keyword is not a must, however, variable name must be different from the parameter arg1 = arg0; this.arg2 = arg2; this.total = outerAdd(arg1, arg2); } public int innerAdd(int arg3) { // this keyword is not a must, however, variable name must be different from the parameter return this.arg1 + arg2 + arg3; } public static int outerAdd(int number1, int number2) { return number1 + number2; } // An anonymous object: it is an object created without any name assigned to that object int anonymousAdd(int number1, int number2) { return number1 + number2; } } class MainClass { public static void main(String[] args) { Math test = new Math(2, 4); // instantiation // non-static variables or methods requires instantiation System.out.println(test.total); // 6 System.out.println(test.innerAdd(2)); // 8 // static variables or methods does not requires instantiation System.out.println(Math.outerAdd(4, 5)); // 9 // works similar to static methods System.out.println(new Math().anonymousAdd(3, 2)); // 5 } }  "},{"title":"constructor chaining​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#constructor-chaining","content":"the process of calling one constructor from another constructor with respect to current objectcan be done in 2 ways Within same class: It can be done using this() keyword for constructors in the same classFrom base class: by using super() keyword to call the constructor from the base class // within same class Using this() keyword class Temp { // default constructor 1 // default constructor will call another constructor // using this keyword from same class Temp() { // calls constructor 2 this(5); System.out.println(&quot;The Default constructor&quot;); } // parameterized constructor 2 Temp(int x) { // calls constructor 3 this(5, 15); System.out.println(x); } // parameterized constructor 3 Temp(int x, int y) { System.out.println(x * y); } public static void main(String args[]) { // invokes default constructor first new Temp(); } }  // Java program to illustrate Constructor Chaining to // other class using super() keyword class Base { String name; // constructor 1 Base() { this(&quot;&quot;); System.out.println(&quot;No-argument constructor of&quot; + &quot; base class&quot;); } // constructor 2 Base(String name) { this.name = name; System.out.println(&quot;Calling parameterized constructor&quot; + &quot; of base&quot;); } } class Derived extends Base { // constructor 3 Derived() { System.out.println(&quot;No-argument constructor &quot; + &quot;of derived&quot;); } // parameterized constructor 4 Derived(String name) { // invokes base class constructor 2 super(name); System.out.println(&quot;Calling parameterized &quot; + &quot;constructor of derived&quot;); } public static void main(String args[]) { // calls parameterized constructor 4 Derived obj = new Derived(&quot;test&quot;); // Calls No-argument constructor // Derived obj = new Derived(); } }  "},{"title":"private access key​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#private-access-key","content":"public class Person { private int age = 0; // cannot be accessed other than within the class // age can only be modified with the setter method public void setAge(int age) { this.age = age; } // age can only be retrieve with the getter method public int getAge() { return this.age; } }  "},{"title":"protected access key​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#protected-access-key","content":"// class with protected method package p1; // Class A public class A { protected void display() { System.out.println(&quot;test&quot;); } }  Calling protected function without extending the parent class package p2; // import all classes in package p1 import p1.*; class B { public static void main(String args[]) { B obj = new B(); // not be able to access the function “display” since child class has not inherited its value from the main class obj.display(); // throw an exception } } throw an error Exception in thread &quot;main&quot; java.lang.RuntimeException: Uncompilable source code - Erroneous sym type: p2.B.display Accessing a protected class package p1; // Class A protected class A { void display() { System.out.println(&quot;test&quot;); } } package p2; // import all classes in package p1 import p1.*; // Class B is a subclass of A class B extends A { public static void main(String args[]) { B obj = new B(); obj.display(); // throw an exception } } throw an error Exception in thread &quot;main&quot; java.lang.RuntimeException: Uncompilable source code - Erroneous sym type: p2.B.display Accessing display function from the same package but different class public class C { public static void main(String args[]) { A obj = new A(); obj.display(); // test } } Accessing display function from a different package package p2; // import all classes in package p1 import p1.*; // Class B is a subclass of A class B extends A { public static void main(String args[]) { B obj = new B(); obj.display(); // test } } Accessing a protected class by overriding to sub-class within same package public class C extends A { // overridden function protected void display() { System.out.println(&quot;overridden&quot;); } public static void main(String args[]) { C obj1 = new C(); obj1.display(); // overridden } }  "},{"title":"Anonymous classes​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#anonymous-classes","content":"import java.util.Scanner; public class Calculator { public static void main(String[] args) { ClassName c = new ClassName(); c.calculate(); } // can be accessed from within the same class, subclasses of same packages, // different classes of same packages, subclasses of different packages protected void calculate() { InputHelper helper = new InputHelper(); String s1 = helper.getInput(&quot;Please do something&quot;); } // only Calculator class can use this class InputHelper { // can only be accessed from the same class private String getInput(String prompt) { System.out.println(prompt); Scanner sc = new Scanner(System.in); return sc.nextLine(); } } }  "},{"title":"inheritance​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#inheritance","content":"if a class isn't defined as final it can be extendedsuperclass members are inherited unless marked privatemembers of the grandparent class are not directly accessible // enum public enum Names { JOHN, PETER; } // parent / base / superclass public class Person { private int age; private Names name; public boolean isAlive = true; public final String TYPE = &quot;Mammal&quot;; public Person(int age, Names name) { this.age = age; this.name = name; } public void setAge(int age) { this.age = age; } public int getAge() { return this.age; } public Names getName() { return this.name; } public void whoAmI() { System.out.println(&quot;I am a Person&quot;); } } // Inheritance: child / derived / subclass public class John extends Person { public John() { super(25, Names.JOHN); } // Polymorphism: overriding the parent's method @Override // use this even if it is not required for 2 benefits: take adv of compiler check, easier to read public void whoAmI() { System.out.println(&quot;I a John&quot;); System.out.println(super.isAlive); // use super to get parent's attributes or methods } } public class Main { public static void main(String[] args) { Person p = new Person(0, Names.JOHN); p.whoAmI(); // &quot;I am a Person John j = new John(); j.setAge(25); System.out.println(j.getAge()); System.out.println(j.getName()); j.whoAmI(); // &quot;I am John&quot; } }  "},{"title":"Multiple inheritance​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#multiple-inheritance","content":"one class can have more than one superclass and inherit features from all parent classesJava does not support multiple inheritances with classes we can achieve multiple inheritances only through Interfaces // Interface 1 interface PI1 { // Default method default void show() { // Print statement if method is called from interface 1 System.out.println(&quot;Default PI1&quot;); } } // Interface 2 interface PI2 { // Default method default void show() { // Print statement if method is called from interface 2 System.out.println(&quot;Default PI2&quot;); } } // Main class // Implementation class code class TestClass implements PI1, PI2 { // Overriding default show method public void show() { // Using super keyword to call the show method of PI1 interface PI1.super.show(); // Using super keyword to call the show method of PI2 interface PI2.super.show(); } // Main driver method public static void main(String args[]) { // Creating object of this class in main() method TestClass d = new TestClass(); d.show(); } }  "},{"title":"interface​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#interface","content":"it is a contract that defines a set of methods with a particular signatures any class that implement that interface must implement those methods from Java 8 onwards can now add default implementation for interface methods This default implementation has a special use and does not affect the intention behind interfaces can now define static methods in interfaces that can be called independently without an object these methods are not inherited interface In1 { final int a = 10; static void display() { System.out.println(&quot;hello&quot;); } } // A class that implements the interface. class TestClass implements In1 { public static void main (String[] args) { In1.display(); } }  // enum public enum Names { JOHN, PETER; } // interface: declaring of implementations are not required // declaring of implementations in Android might be required during instantiation public interface Human { public void setAge(int age); public int getAge(); public Names getName(); public void whoAmI(); } // class that implements an interface // if not all of the methods declared in the interface are implemented, an error will occur // additional methods not declared in the interface can be declared public class Person implements Human { private int age; private Names name; public Person(int age, Names name) { this.age = age; this.name = name; } @Override // not required but better to be explicit public void setAge(int age) { this.age = age; } @Override public int getAge() { return this.age; } @Override public Names getName() { return this.name1; } @Override public void whoAmI() { System.out.println(&quot;I am a Person&quot;); } }  interface in a class​ import java.util.*; class Test { // can have any access modifier public interface Yes { void show(); } } class Testing implements Test.Yes { public void show() { System.out.println(&quot;show method of interface&quot;); } } class A { public static void main(String[] args) { Test.Yes obj; Testing t = new Testing(); obj=t; obj.show(); // show method of interface } }  interface in another interface​ import java.util.*; interface Test { // must be default or public access modifier interface Yes { void show(); } } class Testing implements Test.Yes { public void show() { System.out.println(&quot;show method of interface&quot;); } } class A { public static void main(String[] args) { Test.Yes obj; Testing t = new Testing(); obj = t; obj.show(); // show method of interface } }  Marker interface​ It is an empty interface (no field or methods) Examples of marker interface are Serializable, Cloneable and Remote interface All these interfaces are empty interfaces cloneable interface it is present in java.lang packageThere is a method clone() in Object class A class that implements the Cloneable interface indicates that it is legal for clone() method to make a field-for-field copy of instances of that classInvoking Object’s clone method on an instance of the class that does not implement the Cloneable interface results in an exception CloneNotSupportedException being thrownBy convention, classes that implement this interface should override Object.clone() method import java.lang.Cloneable; // By implementing Cloneable interface we make sure that instances of class A can be cloned class A implements Cloneable { int i; String s; public A(int i,String s) { this.i = i; this.s = s; } // Overriding clone() method by simply calling Object class clone() method @Override protected Object clone() throws CloneNotSupportedException { return super.clone(); } } public class Test { public static void main(String[] args) throws CloneNotSupportedException { A a = new A(20, &quot;GeeksForGeeks&quot;); // cloning 'a' and holding new cloned object reference in b // down-casting as clone() return type is Object A b = (A) a.clone(); System.out.println(b.i); // 20 System.out.println(b.s); // GeeksForGeeks } } Serializable interface Serializable interface is present in java.io packageIt is used to make an object eligible for saving its state into a file This is called SerializationClasses that do not implement this interface will not have any of their state serialized or deserializedAll subtypes of a serializable class are themselves serializable import java.io.*; // By implementing Serializable interface we make sure that state of instances of class A can be saved in a file. class A implements Serializable { int i; String s; public A(int i,String s) { this.i = i; this.s = s; } } public class Test { public static void main(String[] args) throws IOException, ClassNotFoundException { A a = new A(20,&quot;GeeksForGeeks&quot;); // Serializing 'a' FileOutputStream fos = new FileOutputStream(&quot;xyz.txt&quot;); ObjectOutputStream oos = new ObjectOutputStream(fos); oos.writeObject(a); // De-serializing 'a' FileInputStream fis = new FileInputStream(&quot;xyz.txt&quot;); ObjectInputStream ois = new ObjectInputStream(fis); A b = (A)ois.readObject();//down-casting object System.out.println(b.i+&quot; &quot;+b.s); // 20 GeeksForGeeks // closing streams oos.close(); ois.close(); } } Remote interface Remote interface is present in java.rmi packageA remote object is an object which is stored at one machine and accessed from another machine to make an object a remote object, we need to flag it with Remote interfaceHere, Remote interface serves to identify interfaces whose methods may be invoked from a non-local virtual machineAny object that is a remote object must directly or indirectly implement this interfaceRMI (Remote Method Invocation) provides some convenience classes that remote object implementations can extend which facilitate remote object creation "},{"title":"abstract​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#abstract","content":"the abstract keyword is addedit can contain a mixture of fully implemented methods &amp; abstract methods abstract method is similar to a method in an interface no implementation &amp; only indicates method signatureany subclasses of an abstract method must implement that method cannot be instantiated directly, only their subclasses can be instantiated // enum public enum Names { JOHN, PETER; } // interface public interface Human { public void setAge(int age); public int getAge(); public Names getName(); public void whoAmI(); } // abstract parent / base / superclass public abstract class Person implements Human { private int age; private Names name; public Person(int age, Names name) { this.age = age; this.name = name; } @Override public void setAge(int age) { this.age = age; } @Override public int getAge() { return this.age; } @Override public Names getName() { return this.name1; } @Override public void whoAmI() { System.out.println(&quot;I am a Person&quot;); } // this means that every subclass of this class must declare its own origin public abstract String getOrigin(); } // child / derived / subclass public class John extends Person { public John() { super(25, Names.JOHN); } @Override public void whoAmI() { System.out.println(&quot;I a John&quot;); } @Override public String getOrigin() { // this must be declared here, else an error will occur return &quot;Japan&quot;; } } public class Main { public static void main(String[] args) { // Person p = new Person(0, Names.JOHN); // abstract classes cannot be instantiated and will cause an error John j = new John(); j.setAge(25); System.out.println(j.getAge()); System.out.println(j.getName()); j.whoAmI(); // &quot;I am John&quot; } }  "},{"title":"Abstract classes vs Interface​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#abstract-classes-vs-interface","content":"Abstract classes\tInterfacecan have abstract and non-abstract methods. From Java 8, it can have default and static methods also\tcan have only abstract methods may contain non-final variables\tVariables declared in a Java interface are by default final can have final, non-final, static and non-static variables\thas only static and final variables can provide the implementation of the interface\tcan’t provide the implementation of an abstract class can be extended using the keyword “extends”\tcan be implemented using the keyword “implements” can extend another Java class and implement multiple Java interfaces\tcan extend one or more Java interfaces can have class members like private, protected, etc.\tare public by default "},{"title":"overloading​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#overloading","content":"public class Sum { public int sum() { return 0; } public int sum(int x) { return 0 + x; } // Overloaded sum(). // This sum takes two int parameters public int sum(int x, int y) { return (x + y); } // Overloaded sum(). // This sum takes three int parameters public int sum(int x, int y, int z) { return (x + y + z); } // Overloaded sum(). // This sum takes two double parameters public double sum(double x, double y) { return (x + y); } // Driver code public static void main(String args[]) { Sum s = new Sum(); System.out.println(s.sum()); System.out.println(s.sum(10)); System.out.println(s.sum(10, 20)); System.out.println(s.sum(10, 20, 30)); System.out.println(s.sum(10.5, 20.5)); } }  back to top "},{"title":"Importing Libraries​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#importing-libraries","content":"Package in Java is a mechanism to encapsulate a group of classes, sub packages and interfacesPackages are used for: Preventing naming conflicts For example there can be two classes with name Employee in two packages, college.staff.cse.Employee and college.staff.ee.Employee Making searching/locating and usage of classes, interfaces, enumerations and annotations easierProviding controlled access protected and default have package level access controlA protected member is accessible by classes in the same package and its subclassesA default member (without any access specifier) is accessible by classes in the same package only Packages can be considered as data encapsulation (or data-hiding) How packages work? Package names and directory structure are closely related For example if a package name is college.staff.cse, then there are three directories, college, staff and cse such that cse is present in staff and staff is present collegeAlso, the directory college is accessible through CLASSPATH variable, i.e., path of parent directory of college is present in CLASSPATH The idea is to make sure that classes are easy to locate Package naming conventions: Packages are named in reverse order of domain names i.e., org.geeksforgeeks.practiceFor example, in a college, the recommended convention is college.tech.cse, college.tech.ee, college.art.history, etc. Adding a class to a Package: We can add more classes to a created package by using package name at the top of the program and saving it in the package directory We need a new java file to define a public class, otherwise we can add the new class to an existing .java file and recompile it // folder name that the current file is in, all other files that are in this folder can be imported without additional code package com.example.demoapi.student; // importing of user defined packages import com.example.demoapi.student.utilities.Helper; import java.time.LocalDate; import java.time.Period; // allows imports of all static members of the class (from java 5 and above) import static java.time.LocalDate.*; import javax.persistence.Entity; // imports Entity class from the persistence package import javax.persistence.Id; import javax.persistence.Table; import javax.persistence.Transient; // method 2 import javax.persistence.*; // allows imports of all classes from the persistence package @Entity @Table public class Student { @Id private Long id; @Transient private Integer age; // using import java.time.LocalDate; public Integer getAge1() { return Period.between(dob, LocalDate.now()).getYears(); } // using import static java.time.LocalDate.*; public Integer getAge() { return Period.between(dob, now()).getYears(); } }  common built-in packages java.lang: Contains language support classes(e.g classed which defines primitive data types, math operations), this package is automatically importedjava.io: Contains classed for supporting input / output operationsjava.util: Contains utility classes which implement data structures like Linked List, Dictionary and support, for Date / Time operationsjava.applet: Contains classes for creating Appletsjava.awt: Contain classes for implementing the components for graphical user interfaces (like button, menus etc)java.net: Contain classes for supporting networking operations back to top "},{"title":"Type Conversions​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#type-conversions","content":"implicit type conversion occurs when an equation has multiple data typessmall memory value to big memory value only e.g.: byte to int explicit type conversion occurs when we use casting to change the data typecan convert big memory value to small memory value, however, data loss will occur allow int to byte System.out.println((3 + 5 + 8) / 3); // 5 System.out.println((3 + 5 + 8) / 3.0); // 5.333333333333333 // implicit type conversion byte b = 1; int i = b; float f = i; // casting // explicit type conversion float pi = 3.14f; int intPi = (int) pi; // 3 int num = 256; byte b = (byte) num; // 0 (surplus value will assigned if converting big data type value to smaller data type value) int num2 = 255; byte b2 = (byte) num2; // 255 // convert number to strings (user helper class) int i = 1234; String str = Integer.toString(i); // &quot;1234&quot; // convert string to double String s = &quot;423&quot;; double d1 = Double.parseDouble(s); System.out.println(d1); // 423.0  String doubleValue = &quot;156.5&quot;; // convert string to double Double doubleObj = Double.parseDouble(doubleValue); System.out.println(doubleObj); // 156.5 // convert double to byte byte byteValue = doubleObj.byteValue(); System.out.println(byteValue); // -100 // convert double to int int intValue = doubleObj.intValue(); System.out.println(intValue); // 156 // convert double to float float floatValue = doubleObj.floatValue(); System.out.println(floatValue); // 156.5 // convert double to string var stringValue = doubleObj.toString(); System.out.println(stringValue); // &quot;156.5&quot;  back to top "},{"title":"Find Data Type​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#find-data-type","content":"back to top "},{"title":"JSON​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#json","content":"back to top "},{"title":"Program Entry Point​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#program-entry-point","content":"the signature is public static void main(String… args)public So that JVM can execute the method from anywherestatic The main method is to be called without an object The modifiers public and static can be written in either order void The main method doesn’t return anythingThe method main() is the main entry point into a Java program must be inside the class definitionThe compiler executes the codes starting always from the main function String[] The main method accepts a single argument, i.e., an array of elements of type String class SomeClassName { public static void main(String[] args) { System.out.println(&quot;Hello World&quot;); } }  back to top "},{"title":"Swapping values​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#swapping-values","content":"int nums[] = {0, 1}; System.out.printf(&quot;%d, %d %n&quot;, nums[0], nums[1]); // 0, 1  int temp; temp = nums[0]; nums[0] = nums[1]; nums[1] = temp; System.out.printf(&quot;%d, %d %n&quot;, nums[0], nums[1]); // 1, 0  back to top "},{"title":"Error Handling​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#error-handling","content":"try: lets you test a block of code for errors catch: lets you handle the error use &quot;Exception&quot; keyword to catch all exception typesuse specific exception types to catch that specific exception exceptions are from java.lang library, so no imports are required catch block can be chained (specific exception with highest priority should come first) finally: lets you execute code, after try and catch, regardless of the result very important for closing a file when an opened file in the try block triggered an exception Built-in Exceptions method 1 class Test { public static void main(String[] args) { try { doSomething; } catch(SomeSpecificException e) { doSomethingIfErrorOccursRelatedToSomESpecificException; } catch(Exception e) { // e is an arg (mandatory), e can be used to print general or more detailed error e.printStackTrace(); System.out.println(e.toString()); // prints exception information in the format of Name of the exception: description of the exception System.out.println(e.getMessage()); // prints only the description of the exception doSomethingIfErrorOccursRelatedToAllExceptions; } finally { doSomethingWhenTryAndCatchIsCompleted; } } } method 2: Checked Exceptions uses the throws keywordexceptions that are checked at compile time class Test { public static void main(String[] args) throws IOException { doSomething; // do something, if error occurs, an exception will be raised } } try with resources statement only for java 8 or later versions, can't be used on androidit is a try statement that declares 1 or more resourcesa resource is an object that must be closed after the program is finished with it // type 1 import java.io.FileReader; import java.io.BufferedReader; import java.io.FileWriter; public class Main { // try-with-resources try (BufferedReader bReader = new BufferedReader(new FileReader(sourceFile))) { return bReader.readLine(); } catch (Exception e) { e.printStackTrace(); } } } // type 2 public class Main { public static void main(String[] args) { String sourceFile = &quot;textfile&quot;; // textfile path String targetFile = &quot;newtextfile&quot;; // newtextfile path // try-with-resources try ( FileReader fReader = new FileReader(sourceFile); // read file BufferedReader bReader = new BufferedReader(fReader); // read lines in file FileWriter writer = new FileWriter(targetFile); // write file ) { while (true) { String line = bReader.readLine(); if (line == null) { break; } else { writer.write(line + &quot;\\n&quot;); } } System.out.println(&quot;File copied&quot;); } catch (Exception e) { e.printStackTrace(); } } }  back to top "},{"title":"Custom Error​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#custom-error","content":"must use either try catch statements or be inside a conditional statement to workuses the throw keyword // if using try catch, both throw and catch must handle the same Exception type try { // raise specific exception throw new SpecificExceptionName(&quot;custom message&quot;); // raise generic exception throw new Exception(&quot;custom message&quot;); } catch (SpecificExceptionName e) { } catch (Exception e) { } if (true) { // raise generic exception throw new Exception(&quot;custom message&quot;); }  custom exception use cases To catch and provide specific treatment to a subset of existing Java exceptionsBusiness logic exceptions: These are the exceptions related to business logic and workflow It is useful for the application users or the developers to understand the exact problem // This program throws an exception whenever balance amount is below Rs 1000 class MyException extends Exception { //store account information private static int accno[] = {1001, 1002, 1003, 1004}; private static String name[] = {&quot;Nish&quot;, &quot;Shubh&quot;, &quot;Sush&quot;, &quot;Abhi&quot;, &quot;Akash&quot;}; private static double bal[] = {10000.00, 12000.00, 5600.0, 999.00, 1100.55}; MyException() { } MyException(String str) { super(str); } public static void main(String[] args) { try { // display the heading for the table System.out.println(&quot;ACCNO&quot; + &quot;\\t&quot; + &quot;CUSTOMER&quot; + &quot;\\t&quot; + &quot;BALANCE&quot;); // display the actual account information for (int i = 0; i &lt; 5 ; i++) { System.out.println(accno[i] + &quot;\\t&quot; + name[i] + &quot;\\t&quot; + bal[i]); // display own exception if balance &lt; 1000 if (bal[i] &lt; 1000) { MyException me = new MyException(&quot;Balance is less than 1000&quot;); throw me; } } } catch (MyException e) { e.printStackTrace(); } } }  back to top "},{"title":"Asynchronous​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#asynchronous","content":"Handling asynchronous code (making it synchronous) back to top "},{"title":"Math​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#math","content":"import java.util.Random; double number1 = 10.5; double number2 = 15; System.out.println(&quot;Math.abs(number1) &quot; + (Math.abs(number1))); // Math.abs(number1) 10.5 System.out.println(&quot;Math.ceil(number1) &quot; + (Math.ceil(number1))); // Math.ceil(number1) 11 System.out.println(&quot;Math.floor(number1) &quot; + (Math.floor(number1))); // Math.floor(number1) 10 System.out.println(&quot;Math.max(number1, number2) &quot; + (Math.max(number1, number2))); // Math.max(number1, number2) 15 System.out.println(&quot;Math.min(number1, number2) &quot; + (Math.min(number1, number2))); // Math.min(number1, number2) 10.5 System.out.println(&quot;Math.pow(number1, 2) &quot; + (Math.pow(number1, 2))); // Math.pow(number1, 2) 110.25 System.out.println(&quot;Math.round(number1) &quot; + (Math.round(number1))); // Math.round(number1) 10 System.out.println(&quot;Math.sqrt(number1) &quot; + (Math.sqrt(number1))); // Math.sqrt(number1) 3.24037034920393 System.out.println(&quot;Random Number Between 0 and 10 = &quot; + (int)(Math.random() * 11 + 1 + 0)); // Math.random() * (max - min + 1) + min2 = change min2 to 1 to become between 1 and 10 Random rand = new Random(); System.out.println(&quot;Random Number Between 0 and 10 &quot; + (rand.nextInt(11))); System.out.println(&quot;Random Number Between 1 and 10 &quot; + (rand.nextInt(10 - 1 + 1) + 1)); // rand.nextInt((max - min) + 1) + min;  back to top "},{"title":"Date and Time​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#date-and-time","content":"must import import java.util.Date; import java.util.GregorianCalendar; import java.text.DateFormat; import java.util.Locale; import java.time.LocalDateTime; // java 8 import java.time.LocalDate; import java.time.format.DateTimeFormatter;  Date d = new Date(); // Fri Jul 09 00:46:09 SGT 2021 // January = 0, Feburary = 1, ... GregorianCalendar gc = new GregorianCalendar(2009, 1, 28); gc.add(GregorianCalendar.DATE, 1); // add a day Date d2 = gc.getTime(); // Sun Mar 01 00:00:00 SGT 2009 // format date // method 1, with no specific style and locale DateFormat df = DateFormat.getDateInstance(); System.out.println(df.format(d2)); // Mar 1, 2009 // method 2, with style and no locale DateFormat df2 = DateFormat.getDateInstance(DateFormat.FULL); System.out.println(df2.format(d2)); // Sunday, March 1, 2009 // method 3, with style and locale Locale locale = new Locale(&quot;en_SG&quot;, &quot;SGP&quot;); // set as Singapore DateFormat df3 = DateFormat.getDateInstance(DateFormat.FULL, locale); System.out.println(df3.format(d2)); // 2009 Mar 1, Sun LocalDateTime ldt = LocalDateTime.now(); // 2021-07-09T01:03:50.874932 // January = 1, Feburary = 2, ... LocalDate ld = LocalDate.of(2009, 1, 28); // 2009-01-28 DateTimeFormatter dtf = DateTimeFormatter.ISO_DATE; System.out.println(dtf.format(ld)); // 2009-01-28 // format with a specific pattern DateTimeFormatter dtf2 = DateTimeFormatter.ofPattern(&quot;M/d/yyyy&quot;); System.out.println(dtf2.format(ld)); // 1/28/2009  back to top "},{"title":"File System​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#file-system","content":"import java.io.FileReader; import java.io.BufferedReader; import java.io.FileWriter; public class Main { public static void main(String[] args) { String sourceFile = &quot;textfile&quot;; // sourceFile path String targetFile = &quot;newtextfile&quot;; // targetFile path // try with resources statement, only available for java 8 and later versions // can't be used on android try ( FileReader fReader = new FileReader(sourceFile); // read file BufferedReader bReader = new BufferedReader(fReader); // read lines in file FileWriter writer = new FileWriter(targetFile); // write file ) { while (true) { String line = bReader.readLine(); if (line == null) { break; } else { writer.write(line + &quot;\\n&quot;); } } System.out.println(&quot;File copied&quot;); } catch (Exception e) { e.printStackTrace(); } } }  import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.nio.file.StandardCopyOption; import java.io.IOException; public class Main { public static void main(String[] args) { String subDirectory = &quot;&quot;; // parent folder where the file is located String sourceFilename = &quot;textfile&quot;; String targetFilename = &quot;newtargetfile3&quot;; // only for java 7 or later versions, not available for android Path sourceFile = Paths.get(subDirectory, sourceFilename); Path targetFile = Paths.get(subDirectory, targetFilename); try { // copy existing file contents into the new file Files.copy(sourceFile, targetFile, StandardCopyOption.REPLACE_EXISTING); } catch (IOException e) { e.printStackTrace(); } } }  using commons-io library to copy file for latest versions and for androiddownload the commons-io jar filecreate a lib folder inside the root folder of your project and move the commons-io jar file into itthen add the jar file into the class path import org.apache.commons.io.FileUtils; // common-io library import java.io.File; import java.io.IOException; public class Main { public static void main(String[] args) { File sourceFile = new File(&quot;path/to/file.txt&quot;); File targetFile = new File(&quot;path/to/newfile.txt&quot;); try { // use commons-io FileUtils.copyFile(sourceFile, targetFile); } catch (IOException e) { e.printStackTrace(); } } }  reading a text file over the internet import java.net.URL; import java.io.InputStream; import java.io.BufferedInputStream; import java.io.IOException; public class Main { private static final String FLOWERS_FEED = &quot;https://services.hanselandpetal.com/feeds/flowers.xml&quot;; // adding the throws block allow code to run safely without having to write another try catch statement in the finally block public static void main(String[] args) throws IOException { InputStream stream = null; BufferedInputStream buf = null; try { URL url = new URL(FLOWERS_FEED); stream = url.openStream(); buf = new BufferedInputStream(stream); StringBuilder sb = new StringBuilder(); while (true) { int data = buf.read(); // gets a single character from stream, returns a character integer value if found else returns -1 if (data == -1) { break; } else { sb.append((char) data); // translate the integer value into a character } } System.out.println(sb); } catch(IOException e) { e.printStackTrace(); } finally { // use finally to explicitly close the stream stream.close(); buf.close(); } } }  back to top "},{"title":"Access modifier​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#access-modifier","content":"These modifiers control the scope of class and methods Access Modifiers: private most restricted, visible only to class they belong default / package private declared / defined without using any modifierAccessible within the same class and package within which its class is defined protected visible to class they belong and any subclasses public visible to all classes Non-access Modifiers: final constant value, value cannot be changedmethods cannot be overridden abstractstrictfpstatic can be accessed without creating a class instance modifier\tsame class\tsame package\toutside package by subclass\teverywhere elsepublic\tY\tY\tY\tY protected\tY\tY\tY\tN no modifier aka &quot;package private&quot;\tY\tY\tN\tN private\tY\tN\tN\tN back to top "},{"title":"Iterators​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#iterators","content":"import java.util.List; import java.util.ArrayList; import java.util.Iterator; // must import import java.util.Map; import java.util.HashMap; import java.util.Set;  using iterators to loop through collections List&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(&quot;Japan&quot;); list.add(&quot;China&quot;); list.add(&quot;USA&quot;); // method 1: using Iterator Iterator&lt;String&gt; iterator = list.iterator(); while (iterator.hasNext()) { String value = iterator.next(); System.out.println(value); } // method 2: using forEach loop for (String value: list) { System.out.println(value); } // method 3: using List's forEach method, only available for Java 8 onwards, not included in android java 8 list.forEach(System.out::println); // method 1 list.forEach((s) -&gt; {System.out.println(s}); // method 2 // loop hash maps with Iterator Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); map.put(&quot;jp&quot;, &quot;Japan&quot;); map.put(&quot;sg&quot;, &quot;Singapore&quot;); map.put(&quot;usa&quot;, &quot;United States&quot;); Set&lt;String&gt; keys = map.keySet(); Iterator&lt;String&gt; iterator = keys.iterator(); while (iterator.hasNext()) { String key = iterator.next(); System.out.println(map.get(key)); } // loop has maps with forEach for (String key : keys) { System.out.println(map.get(key)); }  back to top "},{"title":"Generators​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#generators","content":"back to top "},{"title":"Fetching Web Data​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#fetching-web-data","content":"back to top "},{"title":"Enum​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#enum","content":"Enumerations are lists of possible values that you can use for any particular variableAn enumeration in java is called an enum class // usual enums public enum Names1 { JOHN, PETER; } // setting a string value for enums public enum Names2 { JOHN(&quot;John&quot;), PETER(&quot;Peter&quot;); private String name; Names2(String name) { this.name = name; } @Override public String toString() { return this.name; } } public class Person { private Names1 name1 = Names1.JOHN; // using enum to set a constant variable private Names2 name2 = Names2.JOHN; public Names1 getName1() { return this.name1; } public Names2 getName2() { return this.name2; } } public class Main { public static void main(String[] args) { Person p = new Person(); System.out.println(p.getName1()); // &quot;JOHN&quot; System.out.println(p.getName2()); // &quot;John&quot; Names1 arr[] = Names1.values(); System.out.println(arr[0].ordinal()); // 0 System.out.println(Names1.valueOf(&quot;JOHN&quot;)); // JOHN } }  back to top "},{"title":"Language Specific​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#language-specific","content":""},{"title":"Functional Interfaces​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#functional-interfaces","content":"it is an interface that contains only one abstract method They can have only one functionality to exhibitFrom Java 8 onwards, lambda expressions can be used to represent the instance of a functional interfaceA functional interface can have any number of default methods examples: Runnable, ActionListener, Comparable it is additionally recognized as Single Abstract Method Interfaces they are also known as SAM interfacesit is the new feature that provides users with the approach of fundamental programming it is included in Java SE 8 with Lambda expressions and Method references in order to make code more readable, clean, and straightforward they are interfaces that ensure that they include precisely only one abstract methodthey are used and executed by representing the interface with an annotation called @FunctionalInterfacethey can contain only one abstract method However, they can include any quantity of default and static methods there is no need to use the abstract keyword as it is optional to use the abstract keyword because, by default, the method defined inside the interface is abstract onlyWe can also call Lambda expressions as the instance of functional interface Before Java 8, we had to create anonymous inner class objects or implement these interfaces class Test { public static void main(String args[]) { // create anonymous inner class object new Thread(new Runnable() { @Override public void run() { System.out.println(&quot;New thread created&quot;); } }).start(); } }  java 8 class Test { public static void main(String args[]) { // lambda expression to create the object new Thread(() -&gt; { System.out.println(&quot;New thread created&quot;); }).start(); } }  @FunctionalInterface​ it is used to ensure that the functional interface can’t have more than one abstract method In case more than one abstract methods are present, the compiler flags an Unexpected @FunctionalInterface annotation message it is not mandatory to use this annotation built-in functional interfaces example Runnable This interface only contains the run() methodComparable This interface only contains the compareTo() methodActionListener This interface only contains the actionPerformed() methodCallable This interface only contains the call() method Java SE 8 included four main kinds of functional interfaces which can be applied in multiple situations Consumer the interface of the functional interface is the one that accepts only one argument or a gentrified argumentit has no return value, returns nothing There are also functional variants of the Consumer example: DoubleConsumer, IntConsumer, and LongConsumerThese variants accept primitive values as argumentsOther than these variants, there is also one more variant of the Consumer interface known as Bi-Consumer Predicate a function that accepts an argument and, in return, generates a boolean value as an answerin java, it is a type of function which accepts a single value or argument and does some sort of processing on it, and returns a boolean (True/ False) answerThe implementation of the Predicate functional interface also encapsulates the logic of filtering in Java a process that is used to filter stream components on the base of a provided predicate Just like the Consumer functional interface, Predicate functional interface also has some extensions example: IntPredicate, DoublePredicate, and LongPredicate These types of predicate functional interfaces accept only primitive data types or values as arguments import java.util.*; import java.util.function.Predicate; class Test { public static void main(String args[]) { // create a list of strings List&lt;String&gt; names = Arrays.asList( &quot;Geek&quot;, &quot;GeeksQuiz&quot;, &quot;g1&quot;, &quot;QA&quot;, &quot;Geek2&quot;); // declare the predicate type as string and use // lambda expression to create object Predicate&lt;String&gt; p = (s) -&gt; s.startsWith(&quot;G&quot;); // Iterate through the list for (String st : names) { // call the test method if (p.test(st)) System.out.println(st); // Geek // GeeksQuiz // Geek2 } } } Function A function is a type of functional interface in Java that receives only a single argument and returns a value after the required processingThere are many versions of Function interfaces because a primitive type can’t imply a general type argument, so we need these versions of function interfacesMany different versions of the function interfaces are instrumental and are commonly used in primitive types like double, int, longThe different sequences of these primitive types are also used in the argument The Bi-Function is substantially related to a Function it takes two arguments, whereas Function accepts one argument @FunctionalInterface public interface BiFunction&lt;T, U, R&gt; { R apply(T t, U u); ... } @FunctionalInterface public interface UnaryOperator&lt;T&gt; extends Function&lt;T, U&gt; { ... } Supplier The Supplier functional interface is also a type of functional interface that does not take any input or argument and yet returns a single outputThis type of functional interface is generally used in the lazy generation of valuesSupplier functional interfaces are also used for defining the logic for the generation of any sequence example: The logic behind the Fibonacci Series can be generated with the help of the Stream.generate method, which is implemented by the Supplier functional Interface The different extensions of the Supplier functional interface hold many other supplier functions example: BooleanSupplier, DoubleSupplier, LongSupplier, and IntSupplierThe return type of all these further specializations is their corresponding primitives @FunctionalInterface interface Square { int calculate(int x); } class Test { public static void main(String args[]) { int a = 5; // lambda expression to define the calculate method Square s = (int x) -&gt; x * x; // parameter passed and return type must be // same as defined in the prototype int ans = s.calculate(a); System.out.println(ans); } }  "},{"title":"Comparator Interface​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#comparator-interface","content":"it is used to order the objects of user-defined classesA comparator object is capable of comparing two objects of the same classUsing a comparator, we can sort the elements based on data membersHow do the sort() method of Collections class work? Internally the Sort method call Compare method of the classes it is sortingTo compare two elements, it asks “Which is greater?” Compare method returns -1, 0, or 1 to say if it is less than, equal, or greater to the other It uses this result to then determine if they should be swapped for their sort import java.io.*; import java.lang.*; import java.util.*; class Student { // Attributes of a student int rollno; String name, address; public Student(int rollno, String name, String address) { // This keyword refers to current instance itself this.rollno = rollno; this.name = name; this.address = address; } // To print student details in main() public String toString() { // Returning attributes of Student return this.rollno + &quot; &quot; + this.name + &quot; &quot; + this.address; } } // Helper class implementing Comparator interface class Sortbyroll implements Comparator&lt;Student&gt; { // Sorting in ascending order of roll number public int compare(Student a, Student b) { return a.rollno - b.rollno; } } // Helper class implementing Comparator interface class Sortbyname implements Comparator&lt;Student&gt; { // Sorting in ascending order of name public int compare(Student a, Student b) { return a.name.compareTo(b.name); } } // Main class class GFG { public static void main(String[] args) { // Creating an empty ArrayList of Student type ArrayList&lt;Student&gt; ar = new ArrayList&lt;Student&gt;(); // Adding entries in above List ar.add(new Student(111, &quot;Mayank&quot;, &quot;london&quot;)); ar.add(new Student(131, &quot;Anshul&quot;, &quot;nyc&quot;)); ar.add(new Student(121, &quot;Solanki&quot;, &quot;jaipur&quot;)); ar.add(new Student(101, &quot;Aggarwal&quot;, &quot;Hongkong&quot;)); System.out.println(&quot;Unsorted&quot;); for (int i = 0; i &lt; ar.size(); i++) System.out.println(ar.get(i)); // Sorting student entries by roll number Collections.sort(ar, new Sortbyroll()); System.out.println(&quot;\\nSorted by rollno&quot;); for (int i = 0; i &lt; ar.size(); i++) System.out.println(ar.get(i)); // Sorting student entries by name Collections.sort(ar, new Sortbyname()); System.out.println(&quot;\\nSorted by name&quot;); for (int i = 0; i &lt; ar.size(); i++) System.out.println(ar.get(i)); } }  Sort collection by more than one field​ import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; import java.util.Iterator; import java.util.List; // Helper class representing a Student class Student { // Attributes of student String Name; int Age; // Parameterized constructor public Student(String Name, Integer Age) { // This keyword refers to current instance itself this.Name = Name; this.Age = Age; } public String getName() { return Name; } public void setName(String Name) { this.Name = Name; } public Integer getAge() { return Age; } public void setAge(Integer Age) { this.Age = Age; } // Method Overriding toString() method @Override public String toString() { return &quot;Customer{&quot; + &quot;Name=&quot; + Name + &quot;, Age=&quot; + Age + '}'; } // Helper class implementing Comparator interface static class CustomerSortingComparator implements Comparator&lt;Student&gt; { // Method 1 // To compare customers @Override public int compare(Student customer1, Student customer2) { // Comparing customers int NameCompare = customer1.getName().compareTo( customer2.getName()); int AgeCompare = customer1.getAge().compareTo( customer2.getAge()); // 2nd level comparison return (NameCompare == 0) ? AgeCompare : NameCompare; } } // Method 2 public static void main(String[] args) { // Create an empty ArrayList to store Student List&lt;Student&gt; al = new ArrayList&lt;&gt;(); // Create customer objects Student obj1 = new Student(&quot;Ajay&quot;, 27); Student obj2 = new Student(&quot;Sneha&quot;, 23); Student obj3 = new Student(&quot;Simran&quot;, 37); Student obj4 = new Student(&quot;Ajay&quot;, 22); Student obj5 = new Student(&quot;Ajay&quot;, 29); Student obj6 = new Student(&quot;Sneha&quot;, 22); // Adding customer objects to ArrayList al.add(obj1); al.add(obj2); al.add(obj3); al.add(obj4); al.add(obj5); al.add(obj6); // Iterating using Iterator before Sorting ArrayList Iterator&lt;Student&gt; custIterator = al.iterator(); System.out.println(&quot;Before Sorting:\\n&quot;); // Holds true till there is single element remaining in List while (custIterator.hasNext()) { // Iterating using next() method System.out.println(custIterator.next()); } // Sorting using sort method of Collections class Collections.sort(al, new CustomerSortingComparator()); System.out.println(&quot;\\n\\nAfter Sorting:\\n&quot;); // after Sorting ArrayList for (Student customer : al) { System.out.println(customer); } } }  "},{"title":"Wrapper classes​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#wrapper-classes","content":" it is a class whose object wraps or contains primitive data types When we create an object to a wrapper class, it contains a field and in this field, we can store primitive data types In other words, we can wrap a primitive value into a wrapper class object Need of Wrapper Classes They convert primitive data types into objects. Objects are needed if we wish to modify the arguments passed into a method (because primitive types are passed by value)The classes in java.util package handles only objects and hence wrapper classes help in this caseData structures in the Collection framework, such as ArrayList and Vector, store only objects (reference types) and not primitive typesAn object is needed to support synchronization in multithreading autoboxing Automatic conversion of primitive types to the object of their corresponding wrapper classes import java.util.ArrayList; class Autoboxing { public static void main(String[] args) { char ch = 'a'; // Autoboxing - primitive to Character object conversion Character a = ch; ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;Integer&gt;(); // Autoboxing because ArrayList stores only objects arrayList.add(25); // printing the values from object System.out.println(arrayList.get(0)); // 25 } } unboxing Automatically converting an object of a wrapper class to its corresponding primitive type import java.util.ArrayList; class Unboxing { public static void main(String[] args) { Character ch = 'a'; // unboxing - Character object to primitive conversion char a = ch; ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;Integer&gt;(); arrayList.add(24); // unboxing because get method returns an Integer object int num = arrayList.get(0); // printing the values from primitive data types System.out.println(num); } } wrapping and unwrapping class WrappingUnwrapping { public static void main(String args[]) { // byte data type byte a = 1; // wrapping around Byte object Byte byteobj = new Byte(a); // int data type int b = 10; //wrapping around Integer object Integer intobj = new Integer(b); // float data type float c = 18.6f; // wrapping around Float object Float floatobj = new Float(c); // double data type double d = 250.5; // Wrapping around Double object Double doubleobj = new Double(d); // char data type char e='a'; // wrapping around Character object Character charobj=e; // printing the values from objects System.out.println(&quot;Values of Wrapper objects (printing as objects)&quot;); System.out.println(&quot;Byte object byteobj: &quot; + byteobj); System.out.println(&quot;Integer object intobj: &quot; + intobj); System.out.println(&quot;Float object floatobj: &quot; + floatobj); System.out.println(&quot;Double object doubleobj: &quot; + doubleobj); System.out.println(&quot;Character object charobj: &quot; + charobj); // objects to data types (retrieving data types from objects) // unwrapping objects to primitive data types byte bv = byteobj; int iv = intobj; float fv = floatobj; double dv = doubleobj; char cv = charobj; // printing the values from data types System.out.println(&quot;Unwrapped values (printing as data types)&quot;); System.out.println(&quot;byte value, bv: &quot; + bv); System.out.println(&quot;int value, iv: &quot; + iv); System.out.println(&quot;float value, fv: &quot; + fv); System.out.println(&quot;double value, dv: &quot; + dv); System.out.println(&quot;char value, cv: &quot; + cv); } }  "},{"title":"Number formatting​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#number-formatting","content":"long longValue = 10_000_000; // method 1 // using &quot;import java.text.NumberFormat;&quot; NumberFormat formatter = NumberFormat.getNumberInstance(); String formatted = formatter.format(lognValue); // &quot;10,000,000&quot; (us locale) // method 2 // using &quot;import java.util.Locale;&quot; Locale locale = new Locale(&quot;da&quot;, &quot;DK&quot;); // set as Denmark NumberFormat formatter = NumberFormat.getNumberInstance(locale); String formatted = formatter.format(lognValue); // &quot;10.000.000&quot; (dk locale)  "},{"title":"Currency formatting​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#currency-formatting","content":"long longValue = 10_000_000.00; // method 1 // using &quot;import java.text.NumberFormat;&quot; NumberFormat formatter = NumberFormat.getCurrencyInstance(); String formatted = formatter.format(lognValue); // &quot;$10,000,000.00&quot; (us locale) // method 2 // using &quot;import java.util.Locale;&quot; Locale locale = new Locale(&quot;da&quot;, &quot;DK&quot;); // set as Denmark NumberFormat formatter = NumberFormat.getCurrencyInstance(locale); String formatted = formatter.format(lognValue); // &quot;kr10.000.000,00&quot; (dk locale)  "},{"title":"Integer formatting​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#integer-formatting","content":"long longValue = 10_000_000.89; // method 1 // using &quot;import java.text.NumberFormat;&quot; NumberFormat formatter = NumberFormat.getIntegerInstance(); String formatted = formatter.format(lognValue); // &quot;10,000,001&quot; (us locale) // method 2 // using &quot;import java.util.Locale;&quot; Locale locale = new Locale(&quot;da&quot;, &quot;DK&quot;); // set as Denmark NumberFormat formatter = NumberFormat.getIntegerInstance(locale); String formatted = formatter.format(lognValue); // &quot;10.000.001&quot; (dk locale)  "},{"title":"double colon operator / method reference operator​","type":1,"pageTitle":"Java","url":"docs/languageSpecific/java/#double-colon-operator--method-reference-operator","content":"&lt;Class name&gt;::&lt;method name&gt; can be used for a static method import java.util.*; class GFG { // static function to be called static void someFunction(String s) { System.out.println(s); } public static void main(String[] args) { List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;Geeks&quot;); list.add(&quot;For&quot;); list.add(&quot;GEEKS&quot;); // call the static method // using double colon operator list.forEach(GFG::someFunction); } } an instance method import java.util.*; class GFG { // instance function to be called void someFunction(String s) { System.out.println(s); } public static void main(String[] args) { List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;Geeks&quot;); list.add(&quot;For&quot;); list.add(&quot;GEEKS&quot;); // call the instance method // using double colon operator list.forEach((new GFG())::someFunction); } } super method import java.util.*; import java.util.function.*; class Test { // super function to be called String print(String str) { return (&quot;Hello &quot; + str + &quot;\\n&quot;); } } class GFG extends Test { // instance method to override super method @Override String print(String s) { // call the super method // using double colon operator Function&lt;String, String&gt; func = super::print; String newValue = func.apply(s); newValue += &quot;Bye &quot; + s + &quot;\\n&quot;; System.out.println(newValue); return newValue; } // Driver code public static void main(String[] args) { List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;Geeks&quot;); list.add(&quot;For&quot;); list.add(&quot;GEEKS&quot;); // call the instance method // using double colon operator list.forEach(new GFG()::print); } } Instance method of an arbitrary object of a particular type import java.util.*; class Test { String str=null; Test(String s) { this.str=s; } // instance function to be called void someFunction() { System.out.println(this.str); } } class GFG { public static void main(String[] args) { List&lt;Test&gt; list = new ArrayList&lt;Test&gt;(); list.add(new Test(&quot;Geeks&quot;)); list.add(new Test(&quot;For&quot;)); list.add(new Test(&quot;GEEKS&quot;)); // call the instance method // using double colon operator list.forEach(Test::someFunction); } } a constructor import java.util.*; class GFG { // Class constructor public GFG(String s) { System.out.println(&quot;Hello &quot; + s); } // Driver code public static void main(String[] args) { List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;Geeks&quot;); list.add(&quot;For&quot;); list.add(&quot;GEEKS&quot;); // call the class constructor // using double colon operator list.forEach(GFG::new); } }  back to top "}]