"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[44058],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>d});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),h=u(r),d=i,g=h["".concat(c,".").concat(d)]||h[d]||p[d]||s;return r?n.createElement(g,o(o({ref:t},l),{},{components:r})):n.createElement(g,o({ref:t},l))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=r.length,o=new Array(s);o[0]=h;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var u=2;u<s;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},14391:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var n=r(83117),i=(r(67294),r(3905));const s={},o="Breadth First Search Example",a={unversionedId:"interviewPrep/data_structures/12Graphs/typescript/breadthFirstSearch",id:"interviewPrep/data_structures/12Graphs/typescript/breadthFirstSearch",title:"Breadth First Search Example",description:"Utils",source:"@site/docs/interviewPrep/data_structures/12Graphs/typescript/breadthFirstSearch.md",sourceDirName:"interviewPrep/data_structures/12Graphs/typescript",slug:"/interviewPrep/data_structures/12Graphs/typescript/breadthFirstSearch",permalink:"/docs/interviewPrep/data_structures/12Graphs/typescript/breadthFirstSearch",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/data_structures/12Graphs/typescript/breadthFirstSearch.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Graphs",permalink:"/docs/interviewPrep/data_structures/12Graphs/"},next:{title:"Graph Example",permalink:"/docs/interviewPrep/data_structures/12Graphs/typescript/graph"}},c={},u=[{value:"Utils",id:"utils",level:2},{value:"No Weights",id:"no-weights",level:2},{value:"With weights",id:"with-weights",level:2}],l={toc:u};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"breadth-first-search-example"},"Breadth First Search Example"),(0,i.kt)("h2",{id:"utils"},"Utils"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"enum Colors {\n  WHITE = 0,\n  GREY = 1,\n  BLACK = 2,\n}\n\nconst initializeColor = (vertices: (string | number)[]) => {\n  const color: any = {};\n  for (let i = 0; i < vertices.length; i++) {\n    color[vertices[i]] = Colors.WHITE;\n  }\n  return color;\n};\n")),(0,i.kt)("h2",{id:"no-weights"},"No Weights"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function breadthFirstSearch(graph: Graph, callback: Function) {\n  const vertices = graph.getVertices();\n  const adjList = graph.getAdjList();\n  const color = initializeColor(vertices);\n  const queue = new Queue();\n  queue.enqueue(vertices);\n\n  while (!queue.isEmpty()) {\n    const u = queue.dequeue();\n    const neighbors = adjList.get(u);\n    color[u] = Colors.GREY;\n    for (let i = 0; i < neighbors.length; i++) {\n      const w = neighbors[i];\n      if (color[w] === Colors.WHITE) {\n        color[w] = Colors.GREY;\n        queue.enqueue(w);\n      }\n    }\n    color[u] = Colors.BLACK;\n    if (callback) {\n      callback(u);\n    }\n  }\n}\n")),(0,i.kt)("h2",{id:"with-weights"},"With weights"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function breadthFirstSearch(graph: Graph, startVertex: number) {\n  const vertices = graph.getVertices();\n  const adjList = graph.getAdjList();\n  const color = initializeColor(vertices);\n  const queue = new Queue();\n  const distances: any = {};\n  const predecessors: any = {};\n  queue.enqueue(startVertex);\n\n  for (let i = 0; i < vertices.length; i++) {\n    distances[vertices[i]] = 0;\n    predecessors[vertices[i]] = null;\n  }\n\n  while (!queue.isEmpty()) {\n    const u = queue.dequeue(),\n      neighbors = adjList.get(u);\n    color[u] = Colors.GREY;\n    for (let i = 0; i < neighbors.length; i++) {\n      const w = neighbors[i];\n      if (color[w] === Colors.WHITE) {\n        color[w] = Colors.GREY;\n        distances[w] = distances[u] + 1;\n        predecessors[w] = u;\n        queue.enqueue(w);\n      }\n    }\n    color[u] = Colors.BLACK;\n  }\n\n  return {\n    distances: distances,\n    predecessors: predecessors,\n  };\n}\n")))}p.isMDXComponent=!0}}]);