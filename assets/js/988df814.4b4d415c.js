"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[3875],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||s;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41210:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(83117),a=(n(67294),n(3905));const s={},o="C# Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Template/cSharp/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Template/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Template/cSharp",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Template/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/go/"}},l={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-example"},"C# Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// Template Method Design Pattern\n//\n// Intent: Defines the skeleton of an algorithm in the superclass but lets\n// subclasses override specific steps of the algorithm without changing its\n// structure.\n\nusing System;\n\nnamespace RefactoringGuru.DesignPatterns.TemplateMethod.Conceptual\n{\n    // The Abstract Class defines a template method that contains a skeleton of\n    // some algorithm, composed of calls to (usually) abstract primitive\n    // operations.\n    //\n    // Concrete subclasses should implement these operations, but leave the\n    // template method itself intact.\n    abstract class AbstractClass\n    {\n        // The template method defines the skeleton of an algorithm.\n        public void TemplateMethod()\n        {\n            this.BaseOperation1();\n            this.RequiredOperations1();\n            this.BaseOperation2();\n            this.Hook1();\n            this.RequiredOperation2();\n            this.BaseOperation3();\n            this.Hook2();\n        }\n\n        // These operations already have implementations.\n        protected void BaseOperation1()\n        {\n            Console.WriteLine("AbstractClass says: I am doing the bulk of the work");\n        }\n\n        protected void BaseOperation2()\n        {\n            Console.WriteLine("AbstractClass says: But I let subclasses override some operations");\n        }\n\n        protected void BaseOperation3()\n        {\n            Console.WriteLine("AbstractClass says: But I am doing the bulk of the work anyway");\n        }\n\n        // These operations have to be implemented in subclasses.\n        protected abstract void RequiredOperations1();\n\n        protected abstract void RequiredOperation2();\n\n        // These are "hooks." Subclasses may override them, but it\'s not\n        // mandatory since the hooks already have default (but empty)\n        // implementation. Hooks provide additional extension points in some\n        // crucial places of the algorithm.\n        protected virtual void Hook1() { }\n\n        protected virtual void Hook2() { }\n    }\n\n    // Concrete classes have to implement all abstract operations of the base\n    // class. They can also override some operations with a default\n    // implementation.\n    class ConcreteClass1 : AbstractClass\n    {\n        protected override void RequiredOperations1()\n        {\n            Console.WriteLine("ConcreteClass1 says: Implemented Operation1");\n        }\n\n        protected override void RequiredOperation2()\n        {\n            Console.WriteLine("ConcreteClass1 says: Implemented Operation2");\n        }\n    }\n\n    // Usually, concrete classes override only a fraction of base class\'\n    // operations.\n    class ConcreteClass2 : AbstractClass\n    {\n        protected override void RequiredOperations1()\n        {\n            Console.WriteLine("ConcreteClass2 says: Implemented Operation1");\n        }\n\n        protected override void RequiredOperation2()\n        {\n            Console.WriteLine("ConcreteClass2 says: Implemented Operation2");\n        }\n\n        protected override void Hook1()\n        {\n            Console.WriteLine("ConcreteClass2 says: Overridden Hook1");\n        }\n    }\n\n    class Client\n    {\n        // The client code calls the template method to execute the algorithm.\n        // Client code does not have to know the concrete class of an object it\n        // works with, as long as it works with objects through the interface of\n        // their base class.\n        public static void ClientCode(AbstractClass abstractClass)\n        {\n            // ...\n            abstractClass.TemplateMethod();\n            // ...\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine("Same client code can work with different subclasses:");\n\n            Client.ClientCode(new ConcreteClass1());\n\n            Console.Write("\\n");\n\n            Console.WriteLine("Same client code can work with different subclasses:");\n            Client.ClientCode(new ConcreteClass2());\n        }\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Same client code can work with different subclasses:\nAbstractClass says: I am doing the bulk of the work\nConcreteClass1 says: Implemented Operation1\nAbstractClass says: But I let subclasses override some operations\nConcreteClass1 says: Implemented Operation2\nAbstractClass says: But I am doing the bulk of the work anyway\n\nSame client code can work with different subclasses:\nAbstractClass says: I am doing the bulk of the work\nConcreteClass2 says: Implemented Operation1\nAbstractClass says: But I let subclasses override some operations\nConcreteClass2 says: Overridden Hook1\nConcreteClass2 says: Implemented Operation2\nAbstractClass says: But I am doing the bulk of the work anyway\n")))}d.isMDXComponent=!0}}]);