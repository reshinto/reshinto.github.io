"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[48358],{3905:(e,r,n)=>{n.d(r,{Zo:()=>u,kt:()=>m});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function s(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?s(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=t.createContext({}),c=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},u=function(e){var r=c(e.components);return t.createElement(i.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||s;return n?t.createElement(f,o(o({ref:r},u),{},{components:n})):t.createElement(f,o({ref:r},u))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=p;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},15880:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var t=n(83117),a=(n(67294),n(3905));const s={},o="Example 2",l={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/example2",id:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/typescript/"}},i={},c=[],u={toc:c};function d(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'import XCTest\n\nclass StrategyRealWorld: XCTestCase {\n\n    /// This example shows a simple implementation of a list controller that is\n    /// able to display models from different data sources:\n    ///\n    /// (MemoryStorage, CoreDataStorage, RealmStorage)\n\n    func test() {\n\n        let controller = ListController()\n\n        let memoryStorage = MemoryStorage<User>()\n        memoryStorage.add(usersFromNetwork())\n\n        clientCode(use: controller, with: memoryStorage)\n\n        clientCode(use: controller, with: CoreDataStorage())\n\n        clientCode(use: controller, with: RealmStorage())\n    }\n\n    func clientCode(use controller: ListController, with dataSource: DataSource) {\n\n        controller.update(dataSource: dataSource)\n        controller.displayModels()\n    }\n\n    private func usersFromNetwork() -> [User] {\n        let firstUser = User(id: 1, username: "username1")\n        let secondUser = User(id: 2, username: "username2")\n        return [firstUser, secondUser]\n    }\n}\n\nclass ListController {\n\n    private var dataSource: DataSource?\n\n    func update(dataSource: DataSource) {\n        /// ... resest current states ...\n        self.dataSource = dataSource\n    }\n\n    func displayModels() {\n\n        guard let dataSource = dataSource else { return }\n        let models = dataSource.loadModels() as [User]\n\n        /// Bind models to cells of a list view...\n        print("\\nListController: Displaying models...")\n        models.forEach({ print($0) })\n    }\n}\n\nprotocol DataSource {\n\n    func loadModels<T: DomainModel>() -> [T]\n}\n\nclass MemoryStorage<Model>: DataSource {\n\n    private lazy var items = [Model]()\n\n    func add(_ items: [Model]) {\n        self.items.append(contentsOf: items)\n    }\n\n    func loadModels<T: DomainModel>() -> [T] {\n        guard T.self == User.self else { return [] }\n        return items as! [T]\n    }\n}\n\nclass CoreDataStorage: DataSource {\n\n    func loadModels<T: DomainModel>() -> [T] {\n        guard T.self == User.self else { return [] }\n\n        let firstUser = User(id: 3, username: "username3")\n        let secondUser = User(id: 4, username: "username4")\n\n        return [firstUser, secondUser] as! [T]\n    }\n}\n\nclass RealmStorage: DataSource {\n\n    func loadModels<T: DomainModel>() -> [T] {\n        guard T.self == User.self else { return [] }\n\n        let firstUser = User(id: 5, username: "username5")\n        let secondUser = User(id: 6, username: "username6")\n\n        return [firstUser, secondUser] as! [T]\n    }\n}\n\nprotocol DomainModel {\n\n    var id: Int { get }\n}\n\nstruct User: DomainModel {\n\n    var id: Int\n    var username: String\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ListController:",metastring:"Displaying models...",Displaying:!0,"models...":!0},'User(id: 1, username: "username1")\nUser(id: 2, username: "username2")\n\nListController: Displaying models...\nUser(id: 3, username: "username3")\nUser(id: 4, username: "username4")\n\nListController: Displaying models...\nUser(id: 5, username: "username5")\nUser(id: 6, username: "username6")\n')))}d.isMDXComponent=!0}}]);