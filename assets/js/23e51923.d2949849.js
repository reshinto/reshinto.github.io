"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8799],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),h=p(a),u=i,d=h["".concat(s,".").concat(u)]||h[u]||c[u]||r;return a?n.createElement(d,o(o({ref:t},m),{},{components:a})):n.createElement(d,o({ref:t},m))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},1544:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const r={},o="UML (Unified Modeling Language)",l={unversionedId:"flowchartsAndUMLdiagrams/readme",id:"flowchartsAndUMLdiagrams/readme",title:"UML (Unified Modeling Language)",description:"- it is a general-purpose, developmental, modeling language in the field of software engineering that is intended to provide a standard way to visualize the design of a system",source:"@site/docs/flowchartsAndUMLdiagrams/readme.md",sourceDirName:"flowchartsAndUMLdiagrams",slug:"/flowchartsAndUMLdiagrams/",permalink:"/docs/flowchartsAndUMLdiagrams/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/flowchartsAndUMLdiagrams/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Flowchart Symbols",permalink:"/docs/flowCharts/"},next:{title:"Send a one time request from a content script or popup script to the background page",permalink:"/docs/frontend/chromeExtension/"}},s={},p=[{value:"Association",id:"association",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Composition and Aggregation",id:"composition-and-aggregation",level:2}],m={toc:p};function c(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"uml-unified-modeling-language"},"UML (Unified Modeling Language)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"it is a general-purpose, developmental, modeling language in the field of software engineering that is intended to provide a standard way to visualize the design of a system")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"before writing code, we need to design our computer system"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"when working with a team, information needs to be shared",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"need to have some plan or representation of the system"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"UML is for describing system components and their interrelationships")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"it gives us a list of terms, abstractions, concepts and tools for high level modeling of the system")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"it is to some extent a design patterns in the programming world")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"the rules of UML is not limited to programming"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"it is also used for modeling business processes, system design, drawing up organization, etc."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"for visualizing your classes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"example: class diagrams"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"UML diagram",src:a(8069).Z,width:"824",height:"634"})),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"top is the class name"),(0,i.kt)("li",{parentName:"ul"},"middle is the list of properties"),(0,i.kt)("li",{parentName:"ul"},"bottom is the methods the class has"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"example: UML relations"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"UML relations",src:a(8254).Z,width:"1328",height:"646"})))),(0,i.kt)("h2",{id:"association"},"Association"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"There are different types of relationship between two classes / objects")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The most basic type of relationship is ",(0,i.kt)("inlineCode",{parentName:"p"},"association")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"which means that the two classes are somehow related to each other"),(0,i.kt)("li",{parentName:"ul"},"we do not yet know exactly how this relationship is expressed and are going to clarify it in the future"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This usually happens in the early stages of system design, when we know that there is a relationship"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"but what specific relationship - inheritance, composition, or something else is not yet clear"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When designing the system more globally"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The association helps when we indicate that 1 class in some way interact with another class"),(0,i.kt)("li",{parentName:"ul"},"At the initial stage, this is enough"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"An association is a relationship in which objects of one type are somehow related to objects of another type"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"i.e. an object of 1 type contains or somehow uses an object of another type"),(0,i.kt)("li",{parentName:"ul"},"The player plays in a team",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We do not yet know what kind of relationship they have, or we are not interested in it at this stage of the design"),(0,i.kt)("li",{parentName:"ul"},"But we know that there is a relationship"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"directional association")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"the arrow shows us that we have a component that uses another component")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In this case the CustomService uses the CustomRepository component, and not vice versa")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"example: Directed association"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Directed association",src:a(8436).Z,width:"700",height:"356"})))))),(0,i.kt)("h2",{id:"inheritance"},"Inheritance"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Inheritance relationship",src:a(6754).Z,width:"400",height:"522"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A more precise type of relationship is the public inheritance relationship (",(0,i.kt)("inlineCode",{parentName:"p"},"IS A Relationship"),")"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"which says that everything that is true for the base class is true for its successor"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"With its help we can"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"get polymorphic behavior"),(0,i.kt)("li",{parentName:"ul"},"abstract from the concrete implementation of classes"),(0,i.kt)("li",{parentName:"ul"},"deal only with abstractions (interfaces or base classes)"),(0,i.kt)("li",{parentName:"ul"},"do not pay attention to implementation details"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Although inheritance is a great tool in the hands of any OOP programmer"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"it is clearly not enough for solving all types of problems"),(0,i.kt)("li",{parentName:"ul"},'Firstly, not all relationships between classes are defined by the "is a" relationship'),(0,i.kt)("li",{parentName:"ul"},"secondly, inheritance is the strongest relationship between 2 classes that cannot be broken at runtime",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"this relationship is static and, in strongly typed languages, is determined at compile time"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"in JavaScript, it has prototypal inheritance and can be changed for inherited classes"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"properties can be changed by just changing prototypes"),(0,i.kt)("li",{parentName:"ul"},"But this is more an exception rather than a rule",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Because you cannot do this in classical inheritance",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"once inherited in the source code, at run time you will not break this connection and you will not change the base class"),(0,i.kt)("li",{parentName:"ul"},"That is why inheritance is the strongest relationship between objects",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"That is why architects and system designers recommend using inheritance only when it is necessary"))))))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"there is the concept of ",(0,i.kt)("inlineCode",{parentName:"p"},"preferring composition over inheritance")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"this suggests that composition can be broken at run time"),(0,i.kt)("li",{parentName:"ul"},"and you can replace one object in the composition at runtime with another, change the behavior dynamically"),(0,i.kt)("li",{parentName:"ul"},"You cannot do this with the inheritance")))),(0,i.kt)("h2",{id:"composition-and-aggregation"},"Composition and Aggregation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When relationships between components go beyond inheritance"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"relationships such as composition and aggregation come to our rescue"),(0,i.kt)("li",{parentName:"ul"},"They both model a ",(0,i.kt)("inlineCode",{parentName:"li"},"HAS-A Relationship")," and are usually expressed in that the class of a whole contains the fields (or properties) of its constituent parts")))),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Composition and Aggregation",src:a(4156).Z,width:"674",height:"462"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the diamond is always on the side of the whole, and the simple line is on the side of the component"),(0,i.kt)("li",{parentName:"ul"},"a filled rhombus indicates a stronger bond - composition"),(0,i.kt)("li",{parentName:"ul"},"an open rhombus indicates a weaker bond - aggregation"),(0,i.kt)("li",{parentName:"ul"},"The difference between composition and aggregation",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"composition: the whole explicitly controls the lifetime of its component part",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the part does not exist without the whole"))),(0,i.kt)("li",{parentName:"ul"},"aggregation: although the whole contains its component part, their lifetimes are not related",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"e.g.: the component part is passed via constructor parameters"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CompositeCustomService")," uses composition to manage its constituent parts"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AggregatedCustomService")," uses aggregation"),(0,i.kt)("li",{parentName:"ul"},"explicit control of the lifetime usually leads to a higher coupling between the whole and the part",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"since a specific type is used that closely connects the participants with each other")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class CompositeCustomService {\n  // Composition\n  private readonly repository: CustomRepository = new CustomRepository();\n\n  public doSomething() {\n    // Usage of repository\n  }\n}\n\nclass AggregatedCustomService {\n  // Aggregation\n  private readonly repository: AbstractRepository;\n  constructor(repository: AbstractRepository) {\n    this.repository = repository;\n  }\n\n  public doSomething() {\n    // Usage of repository\n  }\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Another example of composition",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Let us say a bicycle is a whole part and its components (shock absorbers, wheels, handlebars) are parts"),(0,i.kt)("li",{parentName:"ul"},"a single shock absorber without a bike makes no sense"))),(0,i.kt)("li",{parentName:"ul"},"An example of aggregation",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Suppose there is a university or a school as a whole and teachers, professors as parts, for a certain period they may be part of this university, in some period they may not be included"),(0,i.kt)("li",{parentName:"ul"},"They can exist without this university after the university is destroyed, that is, its lifetime is over")))))}c.isMDXComponent=!0},4156:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/compositionAndAggregation-f583edac0540d8be3f9504fddc41b4dd.png"},8436:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/directedAssociation-6c1016162c20c578c3db8040ac2682bc.png"},6754:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/inheritanceRelationship-1b12796473f8d498b70b19b6bf4aa0ec.png"},8069:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/umlDiagram-facbbb3e7155c8d9bb5aba9304c85190.png"},8254:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/umlRelations-47ded5b509105d15112a7332dd810b46.png"}}]);