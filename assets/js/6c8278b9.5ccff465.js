"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[45201],{3905:(e,n,i)=>{i.d(n,{Zo:()=>p,kt:()=>m});var t=i(67294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function a(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?o(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function s(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var c=t.createContext({}),l=function(e){var n=t.useContext(c),i=n;return e&&(i="function"==typeof e?e(n):a(a({},n),e)),i},p=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(i),m=r,v=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return i?t.createElement(v,a(a({ref:n},p),{},{components:i})):t.createElement(v,a({ref:n},p))}));function m(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<o;l++)a[l]=i[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,i)}d.displayName="MDXCreateElement"},424:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var t=i(83117),r=(i(67294),i(3905));const o={},a="JavaScript Example",s={unversionedId:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/javascript/readme",id:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/javascript/readme",title:"JavaScript Example",description:"Violate LSP",source:"@site/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/javascript/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/javascript",slug:"/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/javascript/",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/javascript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/javascript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C# Example",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/cSharp/"},next:{title:"Python Example",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/python/"}},c={},l=[{value:"Violate LSP",id:"violate-lsp",level:2},{value:"Pass LSP",id:"pass-lsp",level:2}],p={toc:l};function u(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"javascript-example"},"JavaScript Example"),(0,r.kt)("h2",{id:"violate-lsp"},"Violate LSP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'class Bird {\n  fly() {\n    console.log("I can fly");\n  }\n}\n\nclass Duck extends Bird {\n  quack() {\n    console.log("I can quack");\n  }\n}\n\nclass Penguin extends Bird {\n  fly() {\n    throw new Error("Cannot fly");\n  }\n\n  swim() {\n    console.log("I can swim");\n  }\n}\n\n// this violates the Liskov Substitution Principle\n// as not every bird can fly\nfunction makeBirdFly(bird) {\n  bird.fly();\n}\n\nconst duck = new Duck();\nconst penguin = new Penguin();\n\nmakeBirdFly(duck);\nmakeBirdFly(penguin); // throws an error as penguin can\'t fly\n')),(0,r.kt)("h2",{id:"pass-lsp"},"Pass LSP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'class FlyingBird {\n  fly() {\n    console.log("I can fly");\n  }\n}\n\nclass SwimmingBird {\n  swim() {\n    console.log("I can swim");\n  }\n}\n\nclass Duck extends FlyingBird {\n  quack() {\n    console.log("I can quack");\n  }\n}\n\nclass Penguin extends SwimmingBird {}\n\nfunction makeFlyingBirdFly(bird) {\n  bird.fly();\n}\n\nfunction makeSwimmingBirdSwim(bird) {\n  bird.swim();\n}\n\nconst duck = new Duck();\nconst penguin = new Penguin();\n\nmakeFlyingBirdFly(duck);\nmakeSwimmingBirdSwim(penguin);\n')))}u.isMDXComponent=!0}}]);