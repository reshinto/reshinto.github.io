"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[17855],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>d});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var m=r.createContext({}),p=function(e){var t=r.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,m=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=n,g=c["".concat(m,".").concat(d)]||c[d]||u[d]||i;return a?r.createElement(g,l(l({ref:t},s),{},{components:a})):r.createElement(g,l({ref:t},s))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},55023:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=a(83117),n=(a(67294),a(3905));const i={},l="Functional Programming",o={unversionedId:"interviewPrep/programmingParadigm/FP/readme",id:"interviewPrep/programmingParadigm/FP/readme",title:"Functional Programming",description:"- the main unit of functional programming is a function",source:"@site/docs/interviewPrep/programmingParadigm/FP/readme.md",sourceDirName:"interviewPrep/programmingParadigm/FP",slug:"/interviewPrep/programmingParadigm/FP/",permalink:"/docs/interviewPrep/programmingParadigm/FP/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/programmingParadigm/FP/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Programming Paradigm",permalink:"/docs/interviewPrep/programmingParadigm/"},next:{title:"Functional Language Possibilities",permalink:"/docs/interviewPrep/programmingParadigm/FP/functionalLanguagePossibilities"}},m={},p=[{value:"Imperative programming paradigm",id:"imperative-programming-paradigm",level:2},{value:"Declarative programming paradigm",id:"declarative-programming-paradigm",level:2},{value:"Is FP imperative or declarative",id:"is-fp-imperative-or-declarative",level:2}],s={toc:p};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"functional-programming"},"Functional Programming"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the main unit of functional programming is a function"),(0,n.kt)("li",{parentName:"ul"},"the aim is to ",(0,n.kt)("inlineCode",{parentName:"li"},"abstract control flows and operations")," on data with functions",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"by doing so we could ",(0,n.kt)("inlineCode",{parentName:"li"},"avoid side effects")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"reduce mutation")," of state")))),(0,n.kt)("h2",{id:"imperative-programming-paradigm"},"Imperative programming paradigm"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"it is one of the oldest programming paradigms"),(0,n.kt)("li",{parentName:"ul"},"It has a close connection to machine architecture"),(0,n.kt)("li",{parentName:"ul"},"By changing the state through assignment statements we are achieving results"),(0,n.kt)("li",{parentName:"ul"},"The state is changing by performing step-by-step tasks"),(0,n.kt)("li",{parentName:"ul"},"The main concept is how to achieve our goal"),(0,n.kt)("li",{parentName:"ul"},"If you are following the imperative programming paradigm you have several statements and the result is stored after execution of all of them")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"pro"),(0,n.kt)("th",{parentName:"tr",align:null},"cons"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Very simple to implement"),(0,n.kt)("td",{parentName:"tr",align:null},"Less efficient and less productive")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"Parallel programming is not possible")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"example"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"creation of new empty array doubled"),(0,n.kt)("li",{parentName:"ul"},"going through array with for loop"),(0,n.kt)("li",{parentName:"ul"},"double each element"),(0,n.kt)("li",{parentName:"ul"},"push the doubled element into doubled array"),(0,n.kt)("li",{parentName:"ul"},"return doubled array")),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const doubleMap = (numbers) => {\n  const doubled = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    doubled.push(numbers[i] * 2);\n  }\n\n  return doubled;\n};\n\nconsole.log(doubleMap([2, 3, 4])); // [4, 6, 8]\n")))),(0,n.kt)("h2",{id:"declarative-programming-paradigm"},"Declarative programming paradigm"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"The main idea is to define what needs to be accomplished by the program, but not how it needs to be implemented")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"instead of instructing how to achieve the desired results we focus only on the result itself")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"It is different from imperative programming which focuses on a set of commands which need to be executed in order to achieve the required solution")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"it describes a particular class of problems that have to be solved and a language implementation takes care of finding the solution")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"With this approach, the resulting program is simpler to read")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"example"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"all routine work is done by map"),(0,n.kt)("li",{parentName:"ul"},"we only pass the callback in which we provide the condition which is important to us in this case")),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const doubleMap = (numbers) => numbers.map((n) => n * 2);\n\nconsole.log(doubleMap([2, 3, 4])); // [4, 6, 8]\n")))),(0,n.kt)("h2",{id:"is-fp-imperative-or-declarative"},"Is FP imperative or declarative"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"FP implements most of the declarative rules",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"such as programmers focus on what to do, composition, recursion, immutability, functions as first-class objects, etc.")))),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Characteristic"),(0,n.kt)("th",{parentName:"tr",align:null},"Imperative Approach"),(0,n.kt)("th",{parentName:"tr",align:null},"Functional Approach"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Description"),(0,n.kt)("td",{parentName:"tr",align:null},"The program directly changes computed state"),(0,n.kt)("td",{parentName:"tr",align:null},"The program avoids mutating state and computation data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Key points"),(0,n.kt)("td",{parentName:"tr",align:null},"Direct assignments, global variables, common data structures"),(0,n.kt)("td",{parentName:"tr",align:null},"Compositional, recursion, no side effects")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Programmer focus"),(0,n.kt)("td",{parentName:"tr",align:null},"How to perform tasks and how to track state changing"),(0,n.kt)("td",{parentName:"tr",align:null},"What is desired and what transformations are required")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"State changes"),(0,n.kt)("td",{parentName:"tr",align:null},"Important"),(0,n.kt)("td",{parentName:"tr",align:null},"Non-existent")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Order of execution"),(0,n.kt)("td",{parentName:"tr",align:null},"Important"),(0,n.kt)("td",{parentName:"tr",align:null},"Low importance")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Primary flow control"),(0,n.kt)("td",{parentName:"tr",align:null},"Loops, conditionals and function calls"),(0,n.kt)("td",{parentName:"tr",align:null},"Function calls, recursion")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Primary manipulation unit"),(0,n.kt)("td",{parentName:"tr",align:null},"Instances of structures or classes"),(0,n.kt)("td",{parentName:"tr",align:null},"Functions as first-class objects and data collections")))))}u.isMDXComponent=!0}}]);