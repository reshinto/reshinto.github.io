"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8778],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},74916:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={},i="Swift Example",c={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Decorator/swift/readme",id:"interviewPrep/designPatterns/Structural_patterns/Decorator/swift/readme",title:"Swift Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Decorator/swift",slug:"/interviewPrep/designPatterns/Structural_patterns/Decorator/swift/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 3",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/python/example3"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/swift/example2"}},s={},p=[],l={toc:p};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"swift-example"},"Swift Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'/// Decorator Design Pattern\n///\n/// Intent: Lets you attach new behaviors to objects by placing these objects\n/// inside special wrapper objects that contain the behaviors.\n\nimport XCTest\n\n/// The base Component interface defines operations that can be altered by\n/// decorators.\nprotocol Component {\n\n    func operation() -> String\n}\n\n/// Concrete Components provide default implementations of the operations. There\n/// might be several variations of these classes.\nclass ConcreteComponent: Component {\n\n    func operation() -> String {\n        return "ConcreteComponent"\n    }\n}\n\n/// The base Decorator class follows the same interface as the other components.\n/// The primary purpose of this class is to define the wrapping interface for\n/// all concrete decorators. The default implementation of the wrapping code\n/// might include a field for storing a wrapped component and the means to\n/// initialize it.\nclass Decorator: Component {\n\n    private var component: Component\n\n    init(_ component: Component) {\n        self.component = component\n    }\n\n    /// The Decorator delegates all work to the wrapped component.\n    func operation() -> String {\n        return component.operation()\n    }\n}\n\n/// Concrete Decorators call the wrapped object and alter its result in some\n/// way.\nclass ConcreteDecoratorA: Decorator {\n\n    /// Decorators may call parent implementation of the operation, instead of\n    /// calling the wrapped object directly. This approach simplifies extension\n    /// of decorator classes.\n    override func operation() -> String {\n        return "ConcreteDecoratorA(" + super.operation() + ")"\n    }\n}\n\n/// Decorators can execute their behavior either before or after the call to a\n/// wrapped object.\nclass ConcreteDecoratorB: Decorator {\n\n    override func operation() -> String {\n        return "ConcreteDecoratorB(" + super.operation() + ")"\n    }\n}\n\n/// The client code works with all objects using the Component interface. This\n/// way it can stay independent of the concrete classes of components it works\n/// with.\nclass Client {\n    // ...\n    static func someClientCode(component: Component) {\n        print("Result: " + component.operation())\n    }\n    // ...\n}\n\n/// Let\'s see how it all works together.\nclass DecoratorConceptual: XCTestCase {\n\n    func testDecoratorConceptual() {\n        // This way the client code can support both simple components...\n        print("Client: I\'ve got a simple component")\n        let simple = ConcreteComponent()\n        Client.someClientCode(component: simple)\n\n        // ...as well as decorated ones.\n        //\n        // Note how decorators can wrap not only simple components but the other\n        // decorators as well.\n        let decorator1 = ConcreteDecoratorA(simple)\n        let decorator2 = ConcreteDecoratorB(decorator1)\n        print("\\nClient: Now I\'ve got a decorated component")\n        Client.someClientCode(component: decorator2)\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Client: I've got a simple component\nResult: ConcreteComponent\n\nClient: Now I've got a decorated component\nResult: ConcreteDecoratorB(ConcreteDecoratorA(ConcreteComponent))\n")))}m.isMDXComponent=!0}}]);