"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[13826],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>f});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(t),f=a,v=u["".concat(s,".").concat(f)]||u[f]||d[f]||i;return t?n.createElement(v,o(o({ref:r},c),{},{components:t})):n.createElement(v,o({ref:r},c))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var p={};for(var s in r)hasOwnProperty.call(r,s)&&(p[s]=r[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},65747:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var n=t(83117),a=(t(67294),t(3905));const i={},o="Example 2",p={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/swift/example2",id:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Iterator/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/typescript/"}},s={},l=[],c={toc:l};function d(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'import XCTest\n\nclass IteratorRealWorld: XCTestCase {\n\n    func test() {\n\n        let tree = Tree(1)\n        tree.left = Tree(2)\n        tree.right = Tree(3)\n\n        print("Tree traversal: Inorder")\n        clientCode(iterator: tree.iterator(.inOrder))\n\n        print("\\nTree traversal: Preorder")\n        clientCode(iterator: tree.iterator(.preOrder))\n\n        print("\\nTree traversal: Postorder")\n        clientCode(iterator: tree.iterator(.postOrder))\n    }\n\n    func clientCode<T>(iterator: AnyIterator<T>) {\n        while case let item? = iterator.next() {\n            print(item)\n        }\n    }\n}\n\nclass Tree<T> {\n\n    var value: T\n    var left: Tree<T>?\n    var right: Tree<T>?\n\n    init(_ value: T) {\n        self.value = value\n    }\n\n    typealias Block = (T) -> ()\n\n    enum IterationType {\n        case inOrder\n        case preOrder\n        case postOrder\n    }\n\n    func iterator(_ type: IterationType) -> AnyIterator<T> {\n        var items = [T]()\n        switch type {\n        case .inOrder:\n            inOrder { items.append($0) }\n        case .preOrder:\n            preOrder { items.append($0) }\n        case .postOrder:\n            postOrder { items.append($0) }\n        }\n\n        /// Note:\n        /// AnyIterator is used to hide the type signature of an internal\n        /// iterator.\n        return AnyIterator(items.makeIterator())\n    }\n\n    private func inOrder(_ body: Block) {\n        left?.inOrder(body)\n        body(value)\n        right?.inOrder(body)\n    }\n\n    private func preOrder(_ body: Block) {\n        body(value)\n        left?.inOrder(body)\n        right?.inOrder(body)\n    }\n\n    private func postOrder(_ body: Block) {\n        left?.inOrder(body)\n        right?.inOrder(body)\n        body(value)\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Tree traversal: Inorder\n2\n1\n3\n\nTree traversal: Preorder\n1\n2\n3\n\nTree traversal: Postorder\n2\n3\n1\n")))}d.isMDXComponent=!0}}]);