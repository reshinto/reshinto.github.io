"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[3908],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),u=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=u(a),k=r,c=d["".concat(o,".").concat(k)]||d[k]||p[k]||l;return a?n.createElement(c,i(i({ref:t},m),{},{components:a})):n.createElement(c,i({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},17130:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var n=a(87462),r=(a(67294),a(3905));const l={},i="Numbers to know for Estimation",s={unversionedId:"interviewPrep/system_design/numbers_to_know_for_estimation",id:"interviewPrep/system_design/numbers_to_know_for_estimation",title:"Numbers to know for Estimation",description:"Latency Numbers",source:"@site/docs/interviewPrep/system_design/numbers_to_know_for_estimation.md",sourceDirName:"interviewPrep/system_design",slug:"/interviewPrep/system_design/numbers_to_know_for_estimation",permalink:"/docs/interviewPrep/system_design/numbers_to_know_for_estimation",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/system_design/numbers_to_know_for_estimation.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Kubernetes in Microservices",permalink:"/docs/interviewPrep/system_design/microservices/kubernetes"},next:{title:"Proxies",permalink:"/docs/interviewPrep/system_design/proxies"}},o={},u=[{value:"Latency Numbers",id:"latency-numbers",level:2},{value:"Capacity Estimates",id:"capacity-estimates",level:2},{value:"Traffic Estimates",id:"traffic-estimates",level:3},{value:"Memory Estimates",id:"memory-estimates",level:3},{value:"Bandwidth Estimates",id:"bandwidth-estimates",level:3},{value:"Storage Estimates",id:"storage-estimates",level:3}],m={toc:u};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"numbers-to-know-for-estimation"},"Numbers to know for Estimation"),(0,r.kt)("h2",{id:"latency-numbers"},"Latency Numbers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"has a big impact",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"on user experience"),(0,r.kt)("li",{parentName:"ul"},"on how you design your entire app to reduce latency"))),(0,r.kt)("li",{parentName:"ul"},"key points",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"avoid network calls whenever possible"),(0,r.kt)("li",{parentName:"ul"},"replicate data across data centers for disaster recovery as well as performance"),(0,r.kt)("li",{parentName:"ul"},"use CDNs to reduce latency"),(0,r.kt)("li",{parentName:"ul"},"keep frequently accessed data in memory if possible rather than seeking from disk, caching")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Access Type"),(0,r.kt)("th",{parentName:"tr",align:null},"actual latency time"),(0,r.kt)("th",{parentName:"tr",align:null},"Converted more understandable Time"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CPU Cycle"),(0,r.kt)("td",{parentName:"tr",align:null},"0.3 nanoseconds"),(0,r.kt)("td",{parentName:"tr",align:null},"1 seconds")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CPU L1 Cache"),(0,r.kt)("td",{parentName:"tr",align:null},"1 nanoseconds"),(0,r.kt)("td",{parentName:"tr",align:null},"3 seconds")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CPU L2 Cache"),(0,r.kt)("td",{parentName:"tr",align:null},"3 nanoseconds"),(0,r.kt)("td",{parentName:"tr",align:null},"9 seconds")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CPU L3 Cache"),(0,r.kt)("td",{parentName:"tr",align:null},"13 nanoseconds"),(0,r.kt)("td",{parentName:"tr",align:null},"43 seconds")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Main Memory (RAM)"),(0,r.kt)("td",{parentName:"tr",align:null},"120 nanoseconds"),(0,r.kt)("td",{parentName:"tr",align:null},"6 minutes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SSD"),(0,r.kt)("td",{parentName:"tr",align:null},"150 micro seconds"),(0,r.kt)("td",{parentName:"tr",align:null},"6 days")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"HDD"),(0,r.kt)("td",{parentName:"tr",align:null},"10 milliseconds"),(0,r.kt)("td",{parentName:"tr",align:null},"12 months")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SF to NYC"),(0,r.kt)("td",{parentName:"tr",align:null},"40 milliseconds"),(0,r.kt)("td",{parentName:"tr",align:null},"4 years")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SF to Australia"),(0,r.kt)("td",{parentName:"tr",align:null},"180 milliseconds"),(0,r.kt)("td",{parentName:"tr",align:null},"19 years")))),(0,r.kt)("h2",{id:"capacity-estimates"},"Capacity Estimates"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"use to get a rough figure of the type of resources and server amounts that you would need"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("th",{colspan:2},"Data Conversions")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"8 bits"),(0,r.kt)("td",null,"1 byte")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"1024 bytes"),(0,r.kt)("td",null,"1 kilobyte")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"1024 kilobytes"),(0,r.kt)("td",null,"1 megabyte")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"1024 megabytes"),(0,r.kt)("td",null,"1 gigabyte")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"1024 gigabytes"),(0,r.kt)("td",null,"1 terabyte"))),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("th",{colspan:2},"Common Data Types")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Char"),(0,r.kt)("td",null,"1 byte")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Integer"),(0,r.kt)("td",null,"4 bytes")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"UNIX Timestamp"),(0,r.kt)("td",null,"4 bytes")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"use to make quick estimates for daily traffic"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"such as requests per second"),(0,r.kt)("li",{parentName:"ul"},"how many requests you need to handle")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Time"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"60 seconds x 60 minutes = 3,600 seconds per hour")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3,600 x 24 hours = 86,400 seconds per day")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"86,400 x 30 days = 2,500,000 seconds per month")))),(0,r.kt)("h3",{id:"traffic-estimates"},"Traffic Estimates"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"estimate total number of requests app will receive"),(0,r.kt)("li",{parentName:"ul"},"Average Daily Active Users (DAU) x average reads / writes per user")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Instagram type app:\n\n10 million DAU x 30 photos viewed = 300 million photo requests per day\n10 million DAU x 1 photo upload = 10 million photo writes per day\n300 million requests / 86,400 seconds per day = 3472 requests per second (using floor division)\n10 million writes / 86,400 seconds per day = 15 writes per second (using floor division)\n")),(0,r.kt)("h3",{id:"memory-estimates"},"Memory Estimates"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Read Request per day x Average Request size x 0.2",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"use 0.8 by using the 80 20 rule",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"for a rough estimate, can assume that 20% of the data will be 80% of the overall request or traffic"),(0,r.kt)("li",{parentName:"ul"},"especially on a social media site, some posts are gonna get much more views than others",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"in a popular account, their post is gonna get view millions of times"),(0,r.kt)("li",{parentName:"ul"},"while other people's posts might not get viewed at all"))),(0,r.kt)("li",{parentName:"ul"},"thus to save the database workload, we need to cache our most popular stuff, and most frequently accessed data to reduce latency",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"by providing data from memory instead of from database or disk")))))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"300 million requests x 500 bytes = 150 gigabytes per day\n150 GB x 0.2 (20%) = 30 gigabytes (only store this amount for the most popular data)\n30 GB x 3 (replication) = 90 gigabytes (total cache memory)\n")),(0,r.kt)("h3",{id:"bandwidth-estimates"},"Bandwidth Estimates"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Requests per day x Request size",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this would account the size of the data we are serving"),(0,r.kt)("li",{parentName:"ul"},"average bandwith is 5.2 gb per second for this example"),(0,r.kt)("li",{parentName:"ul"},"take note that rarely an app will have a steady flow at the same rate",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"often have peaks where it's your highest usage time giving you 3 times the bandwidth"),(0,r.kt)("li",{parentName:"ul"},"during dead times, you might get a much lower amount")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1 photo size ~= 1.5 mb\n\n300 million request x 1.5 mb = 450,000 gigabytes per day\n450,000 gb / 86,400 seconds = 5.2 gb per second (using floor division)\n")),(0,r.kt)("h3",{id:"storage-estimates"},"Storage Estimates"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Writes per day x Size of write x Time to store data",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"storage is normally used for data that you would want to keep for a long time",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"around 10 years or longer")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1 photo size ~= 1.5 mb\n\n10 million write x 1.5 mb = 15 TB per day\n15 tb x 365 days x 10 years = 55 Petabytes\n")))}p.isMDXComponent=!0}}]);