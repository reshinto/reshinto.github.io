"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[15791],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},15131:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(83117),a=(t(67294),t(3905));const i={},o="Example 2",l={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Facade/swift/example2",id:"interviewPrep/designPatterns/Structural_patterns/Facade/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Facade/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Facade/swift",slug:"/interviewPrep/designPatterns/Structural_patterns/Facade/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Facade/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/typescript/"}},s={},c=[],p={toc:c};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'import XCTest\n\n/// Facade Design Pattern\n///\n/// Intent: Provides a simplified interface to a library, a framework, or any\n/// other complex set of classes.\n\nclass FacadeRealWorld: XCTestCase {\n\n    /// In the real project, you probably will use third-party libraries. For\n    /// instance, to download images.\n    ///\n    /// Therefore, facade and wrapping it is a good way to use a third party API\n    /// in the client code. Even if it is your own library that is connected to\n    /// a project.\n    ///\n    /// The benefits here are:\n    ///\n    /// 1) If you need to change a current image downloader it should be done\n    /// only in the one place of a project. A number of lines of the client code\n    /// will stay work.\n    ///\n    /// 2) The facade provides an access to a fraction of a functionality that\n    /// fits most client needs. Moreover, it can set frequently used or default\n    /// parameters.\n\n    func testFacedeRealWorld() {\n\n        let imageView = UIImageView()\n\n        print("Let\'s set an image for the image view")\n\n        clientCode(imageView)\n\n        print("Image has been set")\n\n        XCTAssert(imageView.image != nil)\n    }\n\n    fileprivate func clientCode(_ imageView: UIImageView) {\n\n        let url = URL(string: "www.example.com/logo")\n        imageView.downloadImage(at: url)\n    }\n}\n\nprivate extension UIImageView {\n\n    /// This extension plays a facede role.\n\n    func downloadImage(at url: URL?) {\n\n        print("Start downloading...")\n\n        let placeholder = UIImage(named: "placeholder")\n\n        ImageDownloader().loadImage(at: url,\n                                    placeholder: placeholder,\n                                    completion: { image, error in\n            print("Handle an image...")\n\n            /// Crop, cache, apply filters, whatever...\n\n            self.image = image\n        })\n    }\n}\n\nprivate class ImageDownloader {\n\n    /// Third party library or your own solution (subsystem)\n\n    typealias Completion = (UIImage, Error?) -> ()\n    typealias Progress = (Int, Int) -> ()\n\n    func loadImage(at url: URL?,\n                   placeholder: UIImage? = nil,\n                   progress: Progress? = nil,\n                   completion: Completion) {\n        /// ... Set up a network stack\n        /// ... Downloading an image\n        /// ...\n        completion(UIImage(), nil)\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Let's set an image for the image view\nStart downloading...\nHandle an image...\nImage has been set\n")))}d.isMDXComponent=!0}}]);