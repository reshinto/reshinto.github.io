"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[16888],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),u=a,b=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return n?r.createElement(b,o(o({ref:t},p),{},{components:n})):r.createElement(b,o({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},29638:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(83117),a=(n(67294),n(3905));const i={},o="C# Example",c={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Bridge/cSharp/readme",id:"interviewPrep/designPatterns/Structural_patterns/Bridge/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Bridge/cSharp",slug:"/interviewPrep/designPatterns/Structural_patterns/Bridge/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/go/"}},s={},l=[],p={toc:l};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-example"},"C# Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// Bridge Design Pattern\n//\n// Intent: Lets you split a large class or a set of closely related classes into\n// two separate hierarchies\u2014abstraction and implementation\u2014which can be\n// developed independently of each other.\n//\n//               A\n//            /     \\                        A         N\n//          Aa      Ab        ===>        /     \\     / \\\n//         / \\     /  \\                 Aa(N) Ab(N)  1   2\n//       Aa1 Aa2  Ab1 Ab2\n\nusing System;\n\nnamespace RefactoringGuru.DesignPatterns.Bridge.Conceptual\n{\n    // The Abstraction defines the interface for the "control" part of the two\n    // class hierarchies. It maintains a reference to an object of the\n    // Implementation hierarchy and delegates all of the real work to this\n    // object.\n    class Abstraction\n    {\n        protected IImplementation _implementation;\n\n        public Abstraction(IImplementation implementation)\n        {\n            this._implementation = implementation;\n        }\n\n        public virtual string Operation()\n        {\n            return "Abstract: Base operation with:\\n" +\n                _implementation.OperationImplementation();\n        }\n    }\n\n    // You can extend the Abstraction without changing the Implementation\n    // classes.\n    class ExtendedAbstraction : Abstraction\n    {\n        public ExtendedAbstraction(IImplementation implementation) : base(implementation)\n        {\n        }\n\n        public override string Operation()\n        {\n            return "ExtendedAbstraction: Extended operation with:\\n" +\n                base._implementation.OperationImplementation();\n        }\n    }\n\n    // The Implementation defines the interface for all implementation classes.\n    // It doesn\'t have to match the Abstraction\'s interface. In fact, the two\n    // interfaces can be entirely different. Typically the Implementation\n    // interface provides only primitive operations, while the Abstraction\n    // defines higher- level operations based on those primitives.\n    public interface IImplementation\n    {\n        string OperationImplementation();\n    }\n\n    // Each Concrete Implementation corresponds to a specific platform and\n    // implements the Implementation interface using that platform\'s API.\n    class ConcreteImplementationA : IImplementation\n    {\n        public string OperationImplementation()\n        {\n            return "ConcreteImplementationA: The result in platform A.\\n";\n        }\n    }\n\n    class ConcreteImplementationB : IImplementation\n    {\n        public string OperationImplementation()\n        {\n            return "ConcreteImplementationA: The result in platform B.\\n";\n        }\n    }\n\n    class Client\n    {\n        // Except for the initialization phase, where an Abstraction object gets\n        // linked with a specific Implementation object, the client code should\n        // only depend on the Abstraction class. This way the client code can\n        // support any abstraction-implementation combination.\n        public void ClientCode(Abstraction abstraction)\n        {\n            Console.Write(abstraction.Operation());\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Client client = new Client();\n\n            Abstraction abstraction;\n            // The client code should be able to work with any pre-configured\n            // abstraction-implementation combination.\n            abstraction = new Abstraction(new ConcreteImplementationA());\n            client.ClientCode(abstraction);\n\n            Console.WriteLine();\n\n            abstraction = new ExtendedAbstraction(new ConcreteImplementationB());\n            client.ClientCode(abstraction);\n        }\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Abstract: Base operation with:\nConcreteImplementationA: The result in platform A.\n\nExtendedAbstraction: Extended operation with:\nConcreteImplementationA: The result in platform B.\n")))}m.isMDXComponent=!0}}]);