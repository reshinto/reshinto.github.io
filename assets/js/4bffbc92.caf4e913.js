"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[81710],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>h});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(r),h=o,f=d["".concat(i,".").concat(h)]||d[h]||u[h]||a;return r?n.createElement(f,c(c({ref:t},l),{},{components:r})):n.createElement(f,c({ref:t},l))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var p=2;p<a;p++)c[p]=r[p];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},56328:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=r(83117),o=(r(67294),r(3905));const a={},c="TypeScript Example",s={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Factory/typescript/readme",id:"interviewPrep/designPatterns/Creational_patterns/Factory/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Factory/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Factory/typescript",slug:"/interviewPrep/designPatterns/Creational_patterns/Factory/typescript/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Factory/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/swift/example2"},next:{title:"Prototype",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/"}},i={},p=[],l={toc:p};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Factory Method Design Pattern\n *\n * Intent: Provides an interface for creating objects in a superclass, but\n * allows subclasses to alter the type of objects that will be created.\n */\n\n/**\n * The Creator class declares the factory method that is supposed to return an\n * object of a Product class. The Creator\'s subclasses usually provide the\n * implementation of this method.\n */\nabstract class Creator {\n  /**\n   * Note that the Creator may also provide some default implementation of the\n   * factory method.\n   */\n  public abstract factoryMethod(): Product;\n\n  /**\n   * Also note that, despite its name, the Creator\'s primary responsibility is\n   * not creating products. Usually, it contains some core business logic that\n   * relies on Product objects, returned by the factory method. Subclasses can\n   * indirectly change that business logic by overriding the factory method\n   * and returning a different type of product from it.\n   */\n  public someOperation(): string {\n    // Call the factory method to create a Product object.\n    const product = this.factoryMethod();\n    // Now, use the product.\n    return `Creator: The same creator\'s code has just worked with ${product.operation()}`;\n  }\n}\n\n/**\n * Concrete Creators override the factory method in order to change the\n * resulting product\'s type.\n */\nclass ConcreteCreator1 extends Creator {\n  /**\n   * Note that the signature of the method still uses the abstract product\n   * type, even though the concrete product is actually returned from the\n   * method. This way the Creator can stay independent of concrete product\n   * classes.\n   */\n  public factoryMethod(): Product {\n    return new ConcreteProduct1();\n  }\n}\n\nclass ConcreteCreator2 extends Creator {\n  public factoryMethod(): Product {\n    return new ConcreteProduct2();\n  }\n}\n\n/**\n * The Product interface declares the operations that all concrete products must\n * implement.\n */\ninterface Product {\n  operation(): string;\n}\n\n/**\n * Concrete Products provide various implementations of the Product interface.\n */\nclass ConcreteProduct1 implements Product {\n  public operation(): string {\n    return "{Result of the ConcreteProduct1}";\n  }\n}\n\nclass ConcreteProduct2 implements Product {\n  public operation(): string {\n    return "{Result of the ConcreteProduct2}";\n  }\n}\n\n/**\n * The client code works with an instance of a concrete creator, albeit through\n * its base interface. As long as the client keeps working with the creator via\n * the base interface, you can pass it any creator\'s subclass.\n */\nfunction clientCode(creator: Creator) {\n  // ...\n  console.log(\n    "Client: I\'m not aware of the creator\'s class, but it still works."\n  );\n  console.log(creator.someOperation());\n  // ...\n}\n\n/**\n * The Application picks a creator\'s type depending on the configuration or\n * environment.\n */\nconsole.log("App: Launched with the ConcreteCreator1.");\nclientCode(new ConcreteCreator1());\nconsole.log("");\n\nconsole.log("App: Launched with the ConcreteCreator2.");\nclientCode(new ConcreteCreator2());\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"App: Launched with the ConcreteCreator1.\nClient: I'm not aware of the creator's class, but it still works.\nCreator: The same creator's code has just worked with {Result of the ConcreteProduct1}\n\nApp: Launched with the ConcreteCreator2.\nClient: I'm not aware of the creator's class, but it still works.\nCreator: The same creator's code has just worked with {Result of the ConcreteProduct2}\n")))}u.isMDXComponent=!0}}]);