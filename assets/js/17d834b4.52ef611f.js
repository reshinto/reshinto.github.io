"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[39421],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),m=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=m(r),d=i,h=c["".concat(s,".").concat(d)]||c[d]||p[d]||a;return r?n.createElement(h,o(o({ref:t},u),{},{components:r})):n.createElement(h,o({ref:t},u))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var m=2;m<a;m++)o[m]=r[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},33551:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var n=r(83117),i=(r(67294),r(3905));const a={},o="Divide & Conquer",l={unversionedId:"interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/readme",id:"interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/readme",title:"Divide & Conquer",description:"- We can choose from a wide range of algorithm design techniques",source:"@site/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/readme.md",sourceDirName:"interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms",slug:"/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/",permalink:"/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Missing Number",permalink:"/docs/interviewPrep/algorithms_and_techniques/bitwise/missingNumber"},next:{title:"Binary Search",permalink:"/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/binarySearch"}},s={},m=[{value:"algorithm",id:"algorithm",level:2}],u={toc:m};function p(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"divide--conquer"},"Divide & Conquer"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can choose from a wide range of algorithm design techniques"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For insertion sort, we used an incremental approach",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"having sorted the subarray A","[1 .. j-1]",", we inserted the single element A","[j]"," into its proper place, yielding the sorted subarray A","[1 .. j]"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"an alternative design approach, known as ",(0,i.kt)("inlineCode",{parentName:"p"},"divide-and-conquer")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We use divide-and-conquer to design a sorting algorithm",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"whose worst-case running time is much less than that of insertion sort"),(0,i.kt)("li",{parentName:"ul"},"One advantage of divide-and-conquer algorithms is that their running times are often easily determined"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Many useful algorithms are recursive in structure"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"to solve a given problem, they call themselves recursively one or more times to deal with closely related sub-problems"),(0,i.kt)("li",{parentName:"ul"},"These algorithms typically follow a divide-and-conquer approach",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"they break the problem into several subproblems that are similar to the original problem but smaller"),(0,i.kt)("li",{parentName:"ul"},"solve the subproblems recursively"),(0,i.kt)("li",{parentName:"ul"},"then combine these solutions to create a solution to the original problem")))),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Divide and conquer",src:r(82753).Z,width:"533",height:"402"})))),(0,i.kt)("h2",{id:"algorithm"},"algorithm"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The divide-and-conquer paradigm involves 3 steps at each level of the recursion"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Divide")," the problem into a number of subproblems that are smaller instances of the same problem"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Conquer")," the subproblems by solving them recursively",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If the subproblem sizes are small enough, however, just solve the subproblems in a straightforward manner"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Combine")," the solutions to the subproblems into the solution for the original problem"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"another method of explanation"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Divide problem into several smaller subproblems",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"normally, the subproblems are similar to the original"))),(0,i.kt)("li",{parentName:"ol"},"Conquer the subproblems by solving them recursively",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"base case: solve small enough problems by brute force"))),(0,i.kt)("li",{parentName:"ol"},"Combine the solutions to get a solution to the subproblems",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"and finally a solution to the original problem"))),(0,i.kt)("li",{parentName:"ol"},"Divide and Conquer algorithms are normally ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/reshinto/Basic_technologies_revision/tree/master/algorithms_and_techniques/recursion"},"recursive"))))))}p.isMDXComponent=!0},82753:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/divide_and_conquer-69c673d25265635c18010aba0842de66.png"}}]);