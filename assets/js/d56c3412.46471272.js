"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[29652],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),d=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(t),u=a,h=m["".concat(p,".").concat(u)]||m[u]||s[u]||i;return t?r.createElement(h,o(o({ref:n},c),{},{components:t})):r.createElement(h,o({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},10166:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=t(83117),a=(t(67294),t(3905));const i={},o="Java Example",l={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Memento/java/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Memento/java/readme",title:"Java Example",description:"- commands",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Memento/java",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Memento/java/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/go/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/javascript/"}},p={},d=[],c={toc:d};function s(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"java-example"},"Java Example"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"commands"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"commands/ColorCommand.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.memento.example.commands;\n\nimport refactoring_guru.memento.example.editor.Editor;\nimport refactoring_guru.memento.example.shapes.Shape;\n\nimport java.awt.*;\n\npublic class ColorCommand implements Command {\n    private Editor editor;\n    private Color color;\n\n    public ColorCommand(Editor editor, Color color) {\n        this.editor = editor;\n        this.color = color;\n    }\n\n    @Override\n    public String getName() {\n        return "Colorize: " + color.toString();\n    }\n\n    @Override\n    public void execute() {\n        for (Shape child : editor.getShapes().getSelected()) {\n            child.setColor(color);\n        }\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"commands/Command.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.memento.example.commands;\n\npublic interface Command {\n    String getName();\n    void execute();\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"commands/MoveCommand.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.memento.example.commands;\n\nimport refactoring_guru.memento.example.editor.Editor;\nimport refactoring_guru.memento.example.shapes.Shape;\n\npublic class MoveCommand implements Command {\n    private Editor editor;\n    private int startX, startY;\n    private int endX, endY;\n\n    public MoveCommand(Editor editor) {\n        this.editor = editor;\n    }\n\n    @Override\n    public String getName() {\n        return "Move by X:" + (endX - startX) + " Y:" + (endY - startY);\n    }\n\n    public void start(int x, int y) {\n        startX = x;\n        startY = y;\n        for (Shape child : editor.getShapes().getSelected()) {\n            child.drag();\n        }\n    }\n\n    public void move(int x, int y) {\n        for (Shape child : editor.getShapes().getSelected()) {\n            child.moveTo(x - startX, y - startY);\n        }\n    }\n\n    public void stop(int x, int y) {\n        endX = x;\n        endY = y;\n        for (Shape child : editor.getShapes().getSelected()) {\n            child.drop();\n        }\n    }\n\n    @Override\n    public void execute() {\n        for (Shape child : editor.getShapes().getSelected()) {\n            child.moveBy(endX - startX, endY - startY);\n        }\n    }\n}\n'))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"editor"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"editor/Canvas.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.memento.example.editor;\n\nimport refactoring_guru.memento.example.commands.ColorCommand;\nimport refactoring_guru.memento.example.commands.MoveCommand;\nimport refactoring_guru.memento.example.shapes.Shape;\n\nimport javax.swing.*;\nimport javax.swing.border.Border;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.awt.image.BufferedImage;\n\nclass Canvas extends java.awt.Canvas {\n    private Editor editor;\n    private JFrame frame;\n    private static final int PADDING = 10;\n\n    Canvas(Editor editor) {\n        this.editor = editor;\n        createFrame();\n        attachKeyboardListeners();\n        attachMouseListeners();\n        refresh();\n    }\n\n    private void createFrame() {\n        frame = new JFrame();\n        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        frame.setLocationRelativeTo(null);\n\n        JPanel contentPanel = new JPanel();\n        Border padding = BorderFactory.createEmptyBorder(PADDING, PADDING, PADDING, PADDING);\n        contentPanel.setBorder(padding);\n        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));\n        frame.setContentPane(contentPanel);\n\n        contentPanel.add(new JLabel("Select and drag to move."), BorderLayout.PAGE_END);\n        contentPanel.add(new JLabel("Right click to change color."), BorderLayout.PAGE_END);\n        contentPanel.add(new JLabel("Undo: Ctrl+Z, Redo: Ctrl+R"), BorderLayout.PAGE_END);\n        contentPanel.add(this);\n        frame.setVisible(true);\n        contentPanel.setBackground(Color.LIGHT_GRAY);\n    }\n\n    private void attachKeyboardListeners() {\n        addKeyListener(new KeyAdapter() {\n            @Override\n            public void keyPressed(KeyEvent e) {\n                if ((e.getModifiers() & KeyEvent.CTRL_MASK) != 0) {\n                    switch (e.getKeyCode()) {\n                        case KeyEvent.VK_Z:\n                            editor.undo();\n                            break;\n                        case KeyEvent.VK_R:\n                            editor.redo();\n                            break;\n                    }\n                }\n            }\n        });\n    }\n\n    private void attachMouseListeners() {\n        MouseAdapter colorizer = new MouseAdapter() {\n            @Override\n            public void mousePressed(MouseEvent e) {\n                if (e.getButton() != MouseEvent.BUTTON3) {\n                    return;\n                }\n                Shape target = editor.getShapes().getChildAt(e.getX(), e.getY());\n                if (target != null) {\n                    editor.execute(new ColorCommand(editor, new Color((int) (Math.random() * 0x1000000))));\n                    repaint();\n                }\n            }\n        };\n        addMouseListener(colorizer);\n\n        MouseAdapter selector = new MouseAdapter() {\n            @Override\n            public void mousePressed(MouseEvent e) {\n                if (e.getButton() != MouseEvent.BUTTON1) {\n                    return;\n                }\n\n                Shape target = editor.getShapes().getChildAt(e.getX(), e.getY());\n                boolean ctrl = (e.getModifiers() & ActionEvent.CTRL_MASK) == ActionEvent.CTRL_MASK;\n\n                if (target == null) {\n                    if (!ctrl) {\n                        editor.getShapes().unSelect();\n                    }\n                } else {\n                    if (ctrl) {\n                        if (target.isSelected()) {\n                            target.unSelect();\n                        } else {\n                            target.select();\n                        }\n                    } else {\n                        if (!target.isSelected()) {\n                            editor.getShapes().unSelect();\n                        }\n                        target.select();\n                    }\n                }\n                repaint();\n            }\n        };\n        addMouseListener(selector);\n')))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"        MouseAdapter dragger = new MouseAdapter() {\n            MoveCommand moveCommand;\n\n            @Override\n            public void mouseDragged(MouseEvent e) {\n                if ((e.getModifiersEx() & MouseEvent.BUTTON1_DOWN_MASK) != MouseEvent.BUTTON1_DOWN_MASK) {\n                    return;\n                }\n                if (moveCommand == null) {\n                    moveCommand = new MoveCommand(editor);\n                    moveCommand.start(e.getX(), e.getY());\n                }\n                moveCommand.move(e.getX(), e.getY());\n                repaint();\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent e) {\n                if (e.getButton() != MouseEvent.BUTTON1 || moveCommand == null) {\n                    return;\n                }\n                moveCommand.stop(e.getX(), e.getY());\n                editor.execute(moveCommand);\n                this.moveCommand = null;\n                repaint();\n            }\n        };\n        addMouseListener(dragger);\n        addMouseMotionListener(dragger);\n    }\n\n    public int getWidth() {\n        return editor.getShapes().getX() + editor.getShapes().getWidth() + PADDING;\n    }\n\n    public int getHeight() {\n        return editor.getShapes().getY() + editor.getShapes().getHeight() + PADDING;\n    }\n\n    void refresh() {\n        this.setSize(getWidth(), getHeight());\n        frame.pack();\n    }\n\n    public void update(Graphics g) {\n        paint(g);\n    }\n\n    public void paint(Graphics graphics) {\n        BufferedImage buffer = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_RGB);\n        Graphics2D ig2 = buffer.createGraphics();\n        ig2.setBackground(Color.WHITE);\n        ig2.clearRect(0, 0, this.getWidth(), this.getHeight());\n\n        editor.getShapes().paint(buffer.getGraphics());\n\n        graphics.drawImage(buffer, 0, 0, null);\n    }\n}\n```\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"editor/Editor.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.memento.example.editor;\n\nimport refactoring_guru.memento.example.commands.Command;\nimport refactoring_guru.memento.example.history.History;\nimport refactoring_guru.memento.example.history.Memento;\nimport refactoring_guru.memento.example.shapes.CompoundShape;\nimport refactoring_guru.memento.example.shapes.Shape;\n\nimport javax.swing.*;\nimport java.io.*;\nimport java.util.Base64;\n\npublic class Editor extends JComponent {\n    private Canvas canvas;\n    private CompoundShape allShapes = new CompoundShape();\n    private History history;\n\n    public Editor() {\n        canvas = new Canvas(this);\n        history = new History();\n    }\n\n    public void loadShapes(Shape... shapes) {\n        allShapes.clear();\n        allShapes.add(shapes);\n        canvas.refresh();\n    }\n\n    public CompoundShape getShapes() {\n        return allShapes;\n    }\n\n    public void execute(Command c) {\n        history.push(c, new Memento(this));\n        c.execute();\n    }\n\n    public void undo() {\n        if (history.undo())\n            canvas.repaint();\n    }\n\n    public void redo() {\n        if (history.redo())\n            canvas.repaint();\n    }\n\n    public String backup() {\n        try {\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ObjectOutputStream oos = new ObjectOutputStream(baos);\n            oos.writeObject(this.allShapes);\n            oos.close();\n            return Base64.getEncoder().encodeToString(baos.toByteArray());\n        } catch (IOException e) {\n            return "";\n        }\n    }\n\n    public void restore(String state) {\n        try {\n            byte[] data = Base64.getDecoder().decode(state);\n            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));\n            this.allShapes = (CompoundShape) ois.readObject();\n            ois.close();\n        } catch (ClassNotFoundException e) {\n            System.out.print("ClassNotFoundException occurred.");\n        } catch (IOException e) {\n            System.out.print("IOException occurred.");\n        }\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"history"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"history/History.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.memento.example.history;\n\nimport refactoring_guru.memento.example.commands.Command;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class History {\n    private List<Pair> history = new ArrayList<Pair>();\n    private int virtualSize = 0;\n\n    private class Pair {\n        Command command;\n        Memento memento;\n        Pair(Command c, Memento m) {\n            command = c;\n            memento = m;\n        }\n\n        private Command getCommand() {\n            return command;\n        }\n\n        private Memento getMemento() {\n            return memento;\n        }\n    }\n\n    public void push(Command c, Memento m) {\n        if (virtualSize != history.size() && virtualSize > 0) {\n            history = history.subList(0, virtualSize - 1);\n        }\n        history.add(new Pair(c, m));\n        virtualSize = history.size();\n    }\n\n    public boolean undo() {\n        Pair pair = getUndo();\n        if (pair == null) {\n            return false;\n        }\n        System.out.println("Undoing: " + pair.getCommand().getName());\n        pair.getMemento().restore();\n        return true;\n    }\n\n    public boolean redo() {\n        Pair pair = getRedo();\n        if (pair == null) {\n            return false;\n        }\n        System.out.println("Redoing: " + pair.getCommand().getName());\n        pair.getMemento().restore();\n        pair.getCommand().execute();\n        return true;\n    }\n\n    private Pair getUndo() {\n        if (virtualSize == 0) {\n            return null;\n        }\n        virtualSize = Math.max(0, virtualSize - 1);\n        return history.get(virtualSize);\n    }\n\n    private Pair getRedo() {\n        if (virtualSize == history.size()) {\n            return null;\n        }\n        virtualSize = Math.min(history.size(), virtualSize + 1);\n        return history.get(virtualSize - 1);\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"history/Memento.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.memento.example.history;\n\nimport refactoring_guru.memento.example.editor.Editor;\n\npublic class Memento {\n    private String backup;\n    private Editor editor;\n\n    public Memento(Editor editor) {\n        this.editor = editor;\n        this.backup = editor.backup();\n    }\n\n    public void restore() {\n        editor.restore(backup);\n    }\n}\n"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"shapes"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"shapes/BaseShape.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.memento.example.shapes;\n\nimport java.awt.*;\n\npublic abstract class BaseShape implements Shape {\n    int x, y;\n    private int dx = 0, dy = 0;\n    private Color color;\n    private boolean selected = false;\n\n    BaseShape(int x, int y, Color color) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n    }\n\n    @Override\n    public int getX() {\n        return x;\n    }\n\n    @Override\n    public int getY() {\n        return y;\n    }\n\n    @Override\n    public int getWidth() {\n        return 0;\n    }\n\n    @Override\n    public int getHeight() {\n        return 0;\n    }\n\n    @Override\n    public void drag() {\n        dx = x;\n        dy = y;\n    }\n\n    @Override\n    public void moveTo(int x, int y) {\n        this.x = dx + x;\n        this.y = dy + y;\n    }\n\n    @Override\n    public void moveBy(int x, int y) {\n        this.x += x;\n        this.y += y;\n    }\n\n    @Override\n    public void drop() {\n        this.x = dx;\n        this.y = dy;\n    }\n\n    @Override\n    public boolean isInsideBounds(int x, int y) {\n        return x > getX() && x < (getX() + getWidth()) &&\n                y > getY() && y < (getY() + getHeight());\n    }\n\n    @Override\n    public Color getColor() {\n        return color;\n    }\n\n    @Override\n    public void setColor(Color color) {\n        this.color = color;\n    }\n\n    @Override\n    public void select() {\n        selected = true;\n    }\n\n    @Override\n    public void unSelect() {\n        selected = false;\n    }\n\n    @Override\n    public boolean isSelected() {\n        return selected;\n    }\n\n    void enableSelectionStyle(Graphics graphics) {\n        graphics.setColor(Color.LIGHT_GRAY);\n\n        Graphics2D g2 = (Graphics2D) graphics;\n        float dash1[] = {2.0f};\n        g2.setStroke(new BasicStroke(1.0f,\n                BasicStroke.CAP_BUTT,\n                BasicStroke.JOIN_MITER,\n                2.0f, dash1, 0.0f));\n    }\n\n    void disableSelectionStyle(Graphics graphics) {\n        graphics.setColor(color);\n        Graphics2D g2 = (Graphics2D) graphics;\n        g2.setStroke(new BasicStroke());\n    }\n\n    @Override\n    public void paint(Graphics graphics) {\n        if (isSelected()) {\n            enableSelectionStyle(graphics);\n        }\n        else {\n            disableSelectionStyle(graphics);\n        }\n\n        // ...\n    }\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"shapes/Circle.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.memento.example.shapes;\n\nimport java.awt.*;\n\npublic class Circle extends BaseShape {\n    private int radius;\n\n    public Circle(int x, int y, int radius, Color color) {\n        super(x, y, color);\n        this.radius = radius;\n    }\n\n    @Override\n    public int getWidth() {\n        return radius * 2;\n    }\n\n    @Override\n    public int getHeight() {\n        return radius * 2;\n    }\n\n    @Override\n    public void paint(Graphics graphics) {\n        super.paint(graphics);\n        graphics.drawOval(x, y, getWidth() - 1, getHeight() - 1);\n    }\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"shapes/CompoundShape.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.memento.example.shapes;\n\nimport java.awt.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class CompoundShape extends BaseShape {\n    private List<Shape> children = new ArrayList<>();\n\n    public CompoundShape(Shape... components) {\n        super(0, 0, Color.BLACK);\n        add(components);\n    }\n\n    public void add(Shape component) {\n        children.add(component);\n    }\n\n    public void add(Shape... components) {\n        children.addAll(Arrays.asList(components));\n    }\n\n    public void remove(Shape child) {\n        children.remove(child);\n    }\n\n    public void remove(Shape... components) {\n        children.removeAll(Arrays.asList(components));\n    }\n\n    public void clear() {\n        children.clear();\n    }\n\n    @Override\n    public int getX() {\n        if (children.size() == 0) {\n            return 0;\n        }\n        int x = children.get(0).getX();\n        for (Shape child : children) {\n            if (child.getX() < x) {\n                x = child.getX();\n            }\n        }\n        return x;\n    }\n\n    @Override\n    public int getY() {\n        if (children.size() == 0) {\n            return 0;\n        }\n        int y = children.get(0).getY();\n        for (Shape child : children) {\n            if (child.getY() < y) {\n                y = child.getY();\n            }\n        }\n        return y;\n    }\n\n    @Override\n    public int getWidth() {\n        int maxWidth = 0;\n        int x = getX();\n        for (Shape child : children) {\n            int childsRelativeX = child.getX() - x;\n            int childWidth = childsRelativeX + child.getWidth();\n            if (childWidth > maxWidth) {\n                maxWidth = childWidth;\n            }\n        }\n        return maxWidth;\n    }\n\n    @Override\n    public int getHeight() {\n        int maxHeight = 0;\n        int y = getY();\n        for (Shape child : children) {\n            int childsRelativeY = child.getY() - y;\n            int childHeight = childsRelativeY + child.getHeight();\n            if (childHeight > maxHeight) {\n                maxHeight = childHeight;\n            }\n        }\n        return maxHeight;\n    }\n\n    @Override\n    public void drag() {\n        for (Shape child : children) {\n            child.drag();\n        }\n    }\n\n    @Override\n    public void drop() {\n        for (Shape child : children) {\n            child.drop();\n        }\n    }\n\n    @Override\n    public void moveTo(int x, int y) {\n        for (Shape child : children) {\n            child.moveTo(x, y);\n        }\n    }\n\n    @Override\n    public void moveBy(int x, int y) {\n        for (Shape child : children) {\n            child.moveBy(x, y);\n        }\n    }\n\n    @Override\n    public boolean isInsideBounds(int x, int y) {\n        for (Shape child : children) {\n            if (child.isInsideBounds(x, y)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public void setColor(Color color) {\n        super.setColor(color);\n        for (Shape child : children) {\n            child.setColor(color);\n        }\n    }\n\n    @Override\n    public void unSelect() {\n        super.unSelect();\n        for (Shape child : children) {\n            child.unSelect();\n        }\n    }\n\n    public Shape getChildAt(int x, int y) {\n        for (Shape child : children) {\n            if (child.isInsideBounds(x, y)) {\n                return child;\n            }\n        }\n        return null;\n    }\n\n    public boolean selectChildAt(int x, int y) {\n        Shape child = getChildAt(x,y);\n        if (child != null) {\n            child.select();\n            return true;\n        }\n        return false;\n    }\n\n    public List<Shape> getSelected() {\n        List<Shape> selected = new ArrayList<>();\n        for (Shape child : children) {\n            if (child.isSelected()) {\n                selected.add(child);\n            }\n        }\n        return selected;\n    }\n\n    @Override\n    public void paint(Graphics graphics) {\n        if (isSelected()) {\n            enableSelectionStyle(graphics);\n            graphics.drawRect(getX() - 1, getY() - 1, getWidth() + 1, getHeight() + 1);\n            disableSelectionStyle(graphics);\n        }\n\n        for (Shape child : children) {\n            child.paint(graphics);\n        }\n    }\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"shapes/Dot.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.memento.example.shapes;\n\nimport java.awt.*;\n\npublic class Dot extends BaseShape {\n    private final int DOT_SIZE = 3;\n\n    public Dot(int x, int y, Color color) {\n        super(x, y, color);\n    }\n\n    @Override\n    public int getWidth() {\n        return DOT_SIZE;\n    }\n\n    @Override\n    public int getHeight() {\n        return DOT_SIZE;\n    }\n\n    @Override\n    public void paint(Graphics graphics) {\n        super.paint(graphics);\n        graphics.fillRect(x - 1, y - 1, getWidth(), getHeight());\n    }\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"shapes/Rectangle.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.memento.example.shapes;\n\nimport java.awt.*;\n\npublic class Rectangle extends BaseShape {\n    private int width;\n    private int height;\n\n    public Rectangle(int x, int y, int width, int height, Color color) {\n        super(x, y, color);\n        this.width = width;\n        this.height = height;\n    }\n\n    @Override\n    public int getWidth() {\n        return width;\n    }\n\n    @Override\n    public int getHeight() {\n        return height;\n    }\n\n    @Override\n    public void paint(Graphics graphics) {\n        super.paint(graphics);\n        graphics.drawRect(x, y, getWidth() - 1, getHeight() - 1);\n    }\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"shapes/Shape.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.memento.example.shapes;\n\nimport java.awt.*;\nimport java.io.Serializable;\n\npublic interface Shape extends Serializable {\n    int getX();\n    int getY();\n    int getWidth();\n    int getHeight();\n    void drag();\n    void drop();\n    void moveTo(int x, int y);\n    void moveBy(int x, int y);\n    boolean isInsideBounds(int x, int y);\n    Color getColor();\n    void setColor(Color color);\n    void select();\n    void unSelect();\n    boolean isSelected();\n    void paint(Graphics graphics);\n}\n"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Demon.java"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.memento.example;\n\nimport refactoring_guru.memento.example.editor.Editor;\nimport refactoring_guru.memento.example.shapes.Circle;\nimport refactoring_guru.memento.example.shapes.CompoundShape;\nimport refactoring_guru.memento.example.shapes.Dot;\nimport refactoring_guru.memento.example.shapes.Rectangle;\n\nimport java.awt.*;\n\npublic class Demo {\n    public static void main(String[] args) {\n        Editor editor = new Editor();\n        editor.loadShapes(\n                new Circle(10, 10, 10, Color.BLUE),\n\n                new CompoundShape(\n                        new Circle(110, 110, 50, Color.RED),\n                        new Dot(160, 160, Color.RED)\n                ),\n\n                new CompoundShape(\n                        new Rectangle(250, 250, 100, 100, Color.GREEN),\n                        new Dot(240, 240, Color.GREEN),\n                        new Dot(240, 360, Color.GREEN),\n                        new Dot(360, 360, Color.GREEN),\n                        new Dot(360, 240, Color.GREEN)\n                )\n        );\n    }\n}\n")))}s.isMDXComponent=!0}}]);