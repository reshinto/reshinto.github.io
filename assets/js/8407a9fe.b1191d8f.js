"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[190],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=p(t),d=i,v=s["".concat(c,".").concat(d)]||s[d]||m[d]||a;return t?r.createElement(v,l(l({ref:n},u),{},{components:t})):r.createElement(v,l({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=s;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<a;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},60150:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=t(83117),i=(t(67294),t(3905));const a={},l="Java Example",o={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Bridge/java/readme",id:"interviewPrep/designPatterns/Structural_patterns/Bridge/java/readme",title:"Java Example",description:"- devices",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Bridge/java",slug:"/interviewPrep/designPatterns/Structural_patterns/Bridge/java/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/go/"},next:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/python/"}},c={},p=[],u={toc:p};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"java-example"},"Java Example"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"devices"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"devices/Device.java"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.bridge.example.devices;\n\npublic interface Device {\n    boolean isEnabled();\n\n    void enable();\n\n    void disable();\n\n    int getVolume();\n\n    void setVolume(int percent);\n\n    int getChannel();\n\n    void setChannel(int channel);\n\n    void printStatus();\n}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"devices/Radio.java"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.bridge.example.devices;\n\npublic class Radio implements Device {\n    private boolean on = false;\n    private int volume = 30;\n    private int channel = 1;\n\n    @Override\n    public boolean isEnabled() {\n        return on;\n    }\n\n    @Override\n    public void enable() {\n        on = true;\n    }\n\n    @Override\n    public void disable() {\n        on = false;\n    }\n\n    @Override\n    public int getVolume() {\n        return volume;\n    }\n\n    @Override\n    public void setVolume(int volume) {\n        if (volume > 100) {\n            this.volume = 100;\n        } else if (volume < 0) {\n            this.volume = 0;\n        } else {\n            this.volume = volume;\n        }\n    }\n\n    @Override\n    public int getChannel() {\n        return channel;\n    }\n\n    @Override\n    public void setChannel(int channel) {\n        this.channel = channel;\n    }\n\n    @Override\n    public void printStatus() {\n        System.out.println("------------------------------------");\n        System.out.println("| I\'m radio.");\n        System.out.println("| I\'m " + (on ? "enabled" : "disabled"));\n        System.out.println("| Current volume is " + volume + "%");\n        System.out.println("| Current channel is " + channel);\n        System.out.println("------------------------------------\\n");\n    }\n}\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"devices/Tv.java"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.bridge.example.devices;\n\npublic class Tv implements Device {\n    private boolean on = false;\n    private int volume = 30;\n    private int channel = 1;\n\n    @Override\n    public boolean isEnabled() {\n        return on;\n    }\n\n    @Override\n    public void enable() {\n        on = true;\n    }\n\n    @Override\n    public void disable() {\n        on = false;\n    }\n\n    @Override\n    public int getVolume() {\n        return volume;\n    }\n\n    @Override\n    public void setVolume(int volume) {\n        if (volume > 100) {\n            this.volume = 100;\n        } else if (volume < 0) {\n            this.volume = 0;\n        } else {\n            this.volume = volume;\n        }\n    }\n\n    @Override\n    public int getChannel() {\n        return channel;\n    }\n\n    @Override\n    public void setChannel(int channel) {\n        this.channel = channel;\n    }\n\n    @Override\n    public void printStatus() {\n        System.out.println("------------------------------------");\n        System.out.println("| I\'m TV set.");\n        System.out.println("| I\'m " + (on ? "enabled" : "disabled"));\n        System.out.println("| Current volume is " + volume + "%");\n        System.out.println("| Current channel is " + channel);\n        System.out.println("------------------------------------\\n");\n    }\n}\n'))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"remotes"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"remotes/AdvancedRemote.java"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.bridge.example.remotes;\n\nimport refactoring_guru.bridge.example.devices.Device;\n\npublic class AdvancedRemote extends BasicRemote {\n\n    public AdvancedRemote(Device device) {\n        super.device = device;\n    }\n\n    public void mute() {\n        System.out.println("Remote: mute");\n        device.setVolume(0);\n    }\n}\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"remotes/BasicRemote.java"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.bridge.example.remotes;\n\nimport refactoring_guru.bridge.example.devices.Device;\n\npublic class BasicRemote implements Remote {\n    protected Device device;\n\n    public BasicRemote() {}\n\n    public BasicRemote(Device device) {\n        this.device = device;\n    }\n\n    @Override\n    public void power() {\n        System.out.println("Remote: power toggle");\n        if (device.isEnabled()) {\n            device.disable();\n        } else {\n            device.enable();\n        }\n    }\n\n    @Override\n    public void volumeDown() {\n        System.out.println("Remote: volume down");\n        device.setVolume(device.getVolume() - 10);\n    }\n\n    @Override\n    public void volumeUp() {\n        System.out.println("Remote: volume up");\n        device.setVolume(device.getVolume() + 10);\n    }\n\n    @Override\n    public void channelDown() {\n        System.out.println("Remote: channel down");\n        device.setChannel(device.getChannel() - 1);\n    }\n\n    @Override\n    public void channelUp() {\n        System.out.println("Remote: channel up");\n        device.setChannel(device.getChannel() + 1);\n    }\n}\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"remotes/Remote.java"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.bridge.example.remotes;\n\npublic interface Remote {\n    void power();\n\n    void volumeDown();\n\n    void volumeUp();\n\n    void channelDown();\n\n    void channelUp();\n}\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Demo.java"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.bridge.example;\n\nimport refactoring_guru.bridge.example.devices.Device;\nimport refactoring_guru.bridge.example.devices.Radio;\nimport refactoring_guru.bridge.example.devices.Tv;\nimport refactoring_guru.bridge.example.remotes.AdvancedRemote;\nimport refactoring_guru.bridge.example.remotes.BasicRemote;\n\npublic class Demo {\n    public static void main(String[] args) {\n        testDevice(new Tv());\n        testDevice(new Radio());\n    }\n\n    public static void testDevice(Device device) {\n        System.out.println("Tests with basic remote.");\n        BasicRemote basicRemote = new BasicRemote(device);\n        basicRemote.power();\n        device.printStatus();\n\n        System.out.println("Tests with advanced remote.");\n        AdvancedRemote advancedRemote = new AdvancedRemote(device);\n        advancedRemote.power();\n        advancedRemote.mute();\n        device.printStatus();\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Tests with basic remote.\nRemote: power toggle\n------------------------------------\n| I'm TV set.\n| I'm enabled\n| Current volume is 30%\n| Current channel is 1\n------------------------------------\n\nTests with advanced remote.\nRemote: power toggle\nRemote: mute\n------------------------------------\n| I'm TV set.\n| I'm disabled\n| Current volume is 0%\n| Current channel is 1\n------------------------------------\n\nTests with basic remote.\nRemote: power toggle\n------------------------------------\n| I'm radio.\n| I'm enabled\n| Current volume is 30%\n| Current channel is 1\n------------------------------------\n\nTests with advanced remote.\nRemote: power toggle\nRemote: mute\n------------------------------------\n| I'm radio.\n| I'm disabled\n| Current volume is 0%\n| Current channel is 1\n------------------------------------\n")))}m.isMDXComponent=!0}}]);