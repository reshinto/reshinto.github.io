"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[422],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),g=i,m=u["".concat(l,".").concat(g)]||u[g]||d[g]||a;return t?r.createElement(m,o(o({ref:n},p),{},{components:t})):r.createElement(m,o({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9808:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(83117),i=(t(67294),t(3905));const a={},o="Palindrome Check",s={unversionedId:"interviewPrep/codingTests/easy/strings/palindromeCheck",id:"interviewPrep/codingTests/easy/strings/palindromeCheck",title:"Palindrome Check",description:"Write a function that takes in a non-empty string and that returns a boolean",source:"@site/docs/interviewPrep/codingTests/easy/strings/palindromeCheck.md",sourceDirName:"interviewPrep/codingTests/easy/strings",slug:"/interviewPrep/codingTests/easy/strings/palindromeCheck",permalink:"/docs/interviewPrep/codingTests/easy/strings/palindromeCheck",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/codingTests/easy/strings/palindromeCheck.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Generate Document",permalink:"/docs/interviewPrep/codingTests/easy/strings/generateDocument"},next:{title:"Run-Length Encoding",permalink:"/docs/interviewPrep/codingTests/easy/strings/run-lengthEncoding"}},l={},c=[],p={toc:c};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"palindrome-check"},"Palindrome Check"),(0,i.kt)("p",null,"Write a function that takes in a non-empty string and that returns a boolean\nrepresenting whether the string is a palindrome."),(0,i.kt)("p",null,"A palindrome is defined as a string that's written the same forward and\nbackward. Note that single-character strings are palindromes."),(0,i.kt)("p",null,"Sample Input\n",(0,i.kt)("inlineCode",{parentName:"p"},'string = "abcdcba"'),"\nSample Output\ntrue"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def isPalindrome(string):\n  # Write your code here.\n  lastIdx = len(string) - 1\n  for i in range(len(string)):\n    if lastIdx <= i:\n      return True\n    if string[i] != string[lastIdx]:\n      return False\n    else:\n      lastIdx -= 1\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function isPalindrome(string) {\n  // Write your code here.\n  let lastIdx = string.length - 1;\n  for (let i = 0; i < string.length; i++) {\n    if (lastIdx <= i) {\n      return true;\n    }\n    if (string[i] !== string[lastIdx]) {\n      return false;\n    } else {\n      lastIdx--;\n    }\n  }\n}\n")))}d.isMDXComponent=!0}}]);