"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[57976],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>u});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),p=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return o.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,v=m["".concat(c,".").concat(u)]||m[u]||d[u]||a;return t?o.createElement(v,i(i({ref:n},l),{},{components:t})):o.createElement(v,i({ref:n},l))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},53529:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=t(83117),r=(t(67294),t(3905));const a={},i="JavaScript Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Mediator/javascript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Mediator/javascript/readme",title:"JavaScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/javascript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Mediator/javascript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Mediator/javascript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/javascript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/javascript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/java/"},next:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/python/"}},c={},p=[],l={toc:p};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"javascript-example"},"JavaScript Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * The Mediator interface declares a method used by components to notify the\n * mediator about various events. The Mediator may react to these events and\n * pass the execution to other components.\n */\nclass Mediator {\n  notify(sender, event) {}\n}\n\nmodule.exports = Mediator;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const Mediator = require("./Mediator");\n\n/**\n * Concrete Mediators implement cooperative behavior by coordinating several\n * components.\n */\nclass ConcreteMediator extends Mediator {\n  constructor(c1, c2) {\n    super();\n    this.component1 = c1;\n    this.component1.setMediator(this);\n    this.component2 = c2;\n    this.component2.setMediator(this);\n  }\n\n  notify(sender, event) {\n    if (event === "A") {\n      console.log("Mediator reacts on A and triggers following operations:");\n      this.component2.doC();\n    }\n\n    if (event === "D") {\n      console.log("Mediator reacts on D and triggers following operations:");\n      this.component1.doB();\n      this.component2.doC();\n    }\n  }\n}\n\nmodule.exports = ConcreteMediator;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * The Base Component provides the basic functionality of storing a mediator's\n * instance inside component objects.\n */\nclass BaseComponent {\n  constructor(mediator = null) {\n    this.mediator = mediator;\n  }\n\n  setMediator(mediator) {\n    this.mediator = mediator;\n  }\n}\n\nmodule.exports = BaseComponent;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const BaseComponent = require("./BaseComponent");\n\n/**\n * Concrete Components implement various functionality. They don\'t depend on\n * other components. They also don\'t depend on any concrete mediator classes.\n */\nclass Component1 extends BaseComponent {\n  doA() {\n    console.log("Component 1 does A.");\n    this.mediator.notify(this, "A");\n  }\n\n  doB() {\n    console.log("Component 1 does B.");\n    this.mediator.notify(this, "B");\n  }\n}\n\nmodule.exports = Component1;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const BaseComponent = require("./BaseComponent");\n\n/**\n * Concrete Components implement various functionality. They don\'t depend on\n * other components. They also don\'t depend on any concrete mediator classes.\n */\nclass Component2 extends BaseComponent {\n  doC() {\n    console.log("Component 2 does C.");\n    this.mediator.notify(this, "C");\n  }\n\n  doD() {\n    console.log("Component 2 does D.");\n    this.mediator.notify(this, "D");\n  }\n}\n\nmodule.exports = Component2;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * Mediator Design Pattern\n *\n * Intent: Lets you reduce chaotic dependencies between objects. The pattern\n * restricts direct communications between the objects and forces them to\n * collaborate only via a mediator object.\n */\n\nconst Component1 = require("./Component1");\nconst Component2 = require("./Component2");\nconst ConcreteMediator = require("./ConcreteMediator");\n\n/**\n * The client code.\n */\nconst c1 = new Component1();\nconst c2 = new Component2();\nconst mediator = new ConcreteMediator(c1, c2);\n\nconsole.log("Client triggers operation A.");\nc1.doA();\n\nconsole.log("");\nconsole.log("Client triggers operation D.");\nc2.doD();\n')))}d.isMDXComponent=!0}}]);