"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[20324],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),f=a,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||i;return t?r.createElement(d,o(o({ref:n},p),{},{components:t})):r.createElement(d,o({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},35933:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(83117),a=(t(67294),t(3905));const i={},o="Java Example",l={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/java/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/java/readme",title:"Java Example",description:"- iterators",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/java",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Iterator/java/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/go/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/javascript/"}},s={},c=[],p={toc:c};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"java-example"},"Java Example"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"iterators"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"iterators/FacebookIterator.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.iterator.example.iterators;\n\nimport refactoring_guru.iterator.example.profile.Profile;\nimport refactoring_guru.iterator.example.social_networks.Facebook;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FacebookIterator implements ProfileIterator {\n    private Facebook facebook;\n    private String type;\n    private String email;\n    private int currentPosition = 0;\n    private List<String> emails = new ArrayList<>();\n    private List<Profile> profiles = new ArrayList<>();\n\n    public FacebookIterator(Facebook facebook, String type, String email) {\n        this.facebook = facebook;\n        this.type = type;\n        this.email = email;\n    }\n\n    private void lazyLoad() {\n        if (emails.size() == 0) {\n            List<String> profiles = facebook.requestProfileFriendsFromFacebook(this.email, this.type);\n            for (String profile : profiles) {\n                this.emails.add(profile);\n                this.profiles.add(null);\n            }\n        }\n    }\n\n    @Override\n    public boolean hasNext() {\n        lazyLoad();\n        return currentPosition < emails.size();\n    }\n\n    @Override\n    public Profile getNext() {\n        if (!hasNext()) {\n            return null;\n        }\n\n        String friendEmail = emails.get(currentPosition);\n        Profile friendProfile = profiles.get(currentPosition);\n        if (friendProfile == null) {\n            friendProfile = facebook.requestProfileFromFacebook(friendEmail);\n            profiles.set(currentPosition, friendProfile);\n        }\n        currentPosition++;\n        return friendProfile;\n    }\n\n    @Override\n    public void reset() {\n        currentPosition = 0;\n    }\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"iterators/LinkedInIterator.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.iterator.example.iterators;\n\nimport refactoring_guru.iterator.example.profile.Profile;\nimport refactoring_guru.iterator.example.social_networks.LinkedIn;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LinkedInIterator implements ProfileIterator {\n    private LinkedIn linkedIn;\n    private String type;\n    private String email;\n    private int currentPosition = 0;\n    private List<String> emails = new ArrayList<>();\n    private List<Profile> contacts = new ArrayList<>();\n\n    public LinkedInIterator(LinkedIn linkedIn, String type, String email) {\n        this.linkedIn = linkedIn;\n        this.type = type;\n        this.email = email;\n    }\n\n    private void lazyLoad() {\n        if (emails.size() == 0) {\n            List<String> profiles = linkedIn.requestRelatedContactsFromLinkedInAPI(this.email, this.type);\n            for (String profile : profiles) {\n                this.emails.add(profile);\n                this.contacts.add(null);\n            }\n        }\n    }\n\n    @Override\n    public boolean hasNext() {\n        lazyLoad();\n        return currentPosition < emails.size();\n    }\n\n    @Override\n    public Profile getNext() {\n        if (!hasNext()) {\n            return null;\n        }\n\n        String friendEmail = emails.get(currentPosition);\n        Profile friendContact = contacts.get(currentPosition);\n        if (friendContact == null) {\n            friendContact = linkedIn.requestContactInfoFromLinkedInAPI(friendEmail);\n            contacts.set(currentPosition, friendContact);\n        }\n        currentPosition++;\n        return friendContact;\n    }\n\n    @Override\n    public void reset() {\n        currentPosition = 0;\n    }\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"iterators/ProfileIterator.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.iterator.example.iterators;\n\nimport refactoring_guru.iterator.example.profile.Profile;\n\npublic interface ProfileIterator {\n    boolean hasNext();\n\n    Profile getNext();\n\n    void reset();\n}\n"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"profile"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"profile/Profile.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.iterator.example.profile;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Profile {\n    private String name;\n    private String email;\n    private Map<String, List<String>> contacts = new HashMap<>();\n\n    public Profile(String email, String name, String... contacts) {\n        this.email = email;\n        this.name = name;\n\n        // Parse contact list from a set of "friend:email@gmail.com" pairs.\n        for (String contact : contacts) {\n            String[] parts = contact.split(":");\n            String contactType = "friend", contactEmail;\n            if (parts.length == 1) {\n                contactEmail = parts[0];\n            }\n            else {\n                contactType = parts[0];\n                contactEmail = parts[1];\n            }\n            if (!this.contacts.containsKey(contactType)) {\n                this.contacts.put(contactType, new ArrayList<>());\n            }\n            this.contacts.get(contactType).add(contactEmail);\n        }\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public List<String> getContacts(String contactType) {\n        if (!this.contacts.containsKey(contactType)) {\n            this.contacts.put(contactType, new ArrayList<>());\n        }\n        return contacts.get(contactType);\n    }\n}\n'))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"social_networks"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"social_networks/Facebook.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.iterator.example.social_networks;\n\nimport refactoring_guru.iterator.example.iterators.FacebookIterator;\nimport refactoring_guru.iterator.example.iterators.ProfileIterator;\nimport refactoring_guru.iterator.example.profile.Profile;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Facebook implements SocialNetwork {\n    private List<Profile> profiles;\n\n    public Facebook(List<Profile> cache) {\n        if (cache != null) {\n            this.profiles = cache;\n        } else {\n            this.profiles = new ArrayList<>();\n        }\n    }\n\n    public Profile requestProfileFromFacebook(String profileEmail) {\n        // Here would be a POST request to one of the Facebook API endpoints.\n        // Instead, we emulates long network connection, which you would expect\n        // in the real life...\n        simulateNetworkLatency();\n        System.out.println("Facebook: Loading profile \'" + profileEmail + "\' over the network...");\n\n        // ...and return test data.\n        return findProfile(profileEmail);\n    }\n\n    public List<String> requestProfileFriendsFromFacebook(String profileEmail, String contactType) {\n        // Here would be a POST request to one of the Facebook API endpoints.\n        // Instead, we emulates long network connection, which you would expect\n        // in the real life...\n        simulateNetworkLatency();\n        System.out.println("Facebook: Loading \'" + contactType + "\' list of \'" + profileEmail + "\' over the network...");\n\n        // ...and return test data.\n        Profile profile = findProfile(profileEmail);\n        if (profile != null) {\n            return profile.getContacts(contactType);\n        }\n        return null;\n    }\n\n    private Profile findProfile(String profileEmail) {\n        for (Profile profile : profiles) {\n            if (profile.getEmail().equals(profileEmail)) {\n                return profile;\n            }\n        }\n        return null;\n    }\n\n    private void simulateNetworkLatency() {\n        try {\n            Thread.sleep(2500);\n        } catch (InterruptedException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    @Override\n    public ProfileIterator createFriendsIterator(String profileEmail) {\n        return new FacebookIterator(this, "friends", profileEmail);\n    }\n\n    @Override\n    public ProfileIterator createCoworkersIterator(String profileEmail) {\n        return new FacebookIterator(this, "coworkers", profileEmail);\n    }\n\n}\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"social_networks/LinkedIn.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.iterator.example.social_networks;\n\nimport refactoring_guru.iterator.example.iterators.LinkedInIterator;\nimport refactoring_guru.iterator.example.iterators.ProfileIterator;\nimport refactoring_guru.iterator.example.profile.Profile;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LinkedIn implements SocialNetwork {\n    private List<Profile> contacts;\n\n    public LinkedIn(List<Profile> cache) {\n        if (cache != null) {\n            this.contacts = cache;\n        } else {\n            this.contacts = new ArrayList<>();\n        }\n    }\n\n    public Profile requestContactInfoFromLinkedInAPI(String profileEmail) {\n        // Here would be a POST request to one of the LinkedIn API endpoints.\n        // Instead, we emulates long network connection, which you would expect\n        // in the real life...\n        simulateNetworkLatency();\n        System.out.println("LinkedIn: Loading profile \'" + profileEmail + "\' over the network...");\n\n        // ...and return test data.\n        return findContact(profileEmail);\n    }\n\n    public List<String> requestRelatedContactsFromLinkedInAPI(String profileEmail, String contactType) {\n        // Here would be a POST request to one of the LinkedIn API endpoints.\n        // Instead, we emulates long network connection, which you would expect\n        // in the real life.\n        simulateNetworkLatency();\n        System.out.println("LinkedIn: Loading \'" + contactType + "\' list of \'" + profileEmail + "\' over the network...");\n\n        // ...and return test data.\n        Profile profile = findContact(profileEmail);\n        if (profile != null) {\n            return profile.getContacts(contactType);\n        }\n        return null;\n    }\n\n    private Profile findContact(String profileEmail) {\n        for (Profile profile : contacts) {\n            if (profile.getEmail().equals(profileEmail)) {\n                return profile;\n            }\n        }\n        return null;\n    }\n\n    private void simulateNetworkLatency() {\n        try {\n            Thread.sleep(2500);\n        } catch (InterruptedException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    @Override\n    public ProfileIterator createFriendsIterator(String profileEmail) {\n        return new LinkedInIterator(this, "friends", profileEmail);\n    }\n\n    @Override\n    public ProfileIterator createCoworkersIterator(String profileEmail) {\n        return new LinkedInIterator(this, "coworkers", profileEmail);\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"social_networks/SocialNetwork.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.iterator.example.social_networks;\n\nimport refactoring_guru.iterator.example.iterators.ProfileIterator;\n\npublic interface SocialNetwork {\n    ProfileIterator createFriendsIterator(String profileEmail);\n\n    ProfileIterator createCoworkersIterator(String profileEmail);\n}\n"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"spammer"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"spammer/SocialSpammer.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.iterator.example.spammer;\n\nimport refactoring_guru.iterator.example.iterators.ProfileIterator;\nimport refactoring_guru.iterator.example.profile.Profile;\nimport refactoring_guru.iterator.example.social_networks.SocialNetwork;\n\npublic class SocialSpammer {\n    public SocialNetwork network;\n    public ProfileIterator iterator;\n\n    public SocialSpammer(SocialNetwork network) {\n        this.network = network;\n    }\n\n    public void sendSpamToFriends(String profileEmail, String message) {\n        System.out.println("\\nIterating over friends...\\n");\n        iterator = network.createFriendsIterator(profileEmail);\n        while (iterator.hasNext()) {\n            Profile profile = iterator.getNext();\n            sendMessage(profile.getEmail(), message);\n        }\n    }\n\n    public void sendSpamToCoworkers(String profileEmail, String message) {\n        System.out.println("\\nIterating over coworkers...\\n");\n        iterator = network.createCoworkersIterator(profileEmail);\n        while (iterator.hasNext()) {\n            Profile profile = iterator.getNext();\n            sendMessage(profile.getEmail(), message);\n        }\n    }\n\n    public void sendMessage(String email, String message) {\n        System.out.println("Sent message to: \'" + email + "\'. Message body: \'" + message + "\'");\n    }\n}\n'))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Demo.java"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.iterator.example;\n\nimport refactoring_guru.iterator.example.profile.Profile;\nimport refactoring_guru.iterator.example.social_networks.Facebook;\nimport refactoring_guru.iterator.example.social_networks.LinkedIn;\nimport refactoring_guru.iterator.example.social_networks.SocialNetwork;\nimport refactoring_guru.iterator.example.spammer.SocialSpammer;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n * Demo class. Everything comes together here.\n */\npublic class Demo {\n    public static Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        System.out.println("Please specify social network to target spam tool (default:Facebook):");\n        System.out.println("1. Facebook");\n        System.out.println("2. LinkedIn");\n        String choice = scanner.nextLine();\n\n        SocialNetwork network;\n        if (choice.equals("2")) {\n            network = new LinkedIn(createTestProfiles());\n        }\n        else {\n            network = new Facebook(createTestProfiles());\n        }\n\n        SocialSpammer spammer = new SocialSpammer(network);\n        spammer.sendSpamToFriends("anna.smith@bing.com",\n                "Hey! This is Anna\'s friend Josh. Can you do me a favor and like this post [link]?");\n        spammer.sendSpamToCoworkers("anna.smith@bing.com",\n                "Hey! This is Anna\'s boss Jason. Anna told me you would be interested in [link].");\n    }\n\n    public static List<Profile> createTestProfiles() {\n        List<Profile> data = new ArrayList<Profile>();\n        data.add(new Profile("anna.smith@bing.com", "Anna Smith", "friends:mad_max@ya.com", "friends:catwoman@yahoo.com", "coworkers:sam@amazon.com"));\n        data.add(new Profile("mad_max@ya.com", "Maximilian", "friends:anna.smith@bing.com", "coworkers:sam@amazon.com"));\n        data.add(new Profile("bill@microsoft.eu", "Billie", "coworkers:avanger@ukr.net"));\n        data.add(new Profile("avanger@ukr.net", "John Day", "coworkers:bill@microsoft.eu"));\n        data.add(new Profile("sam@amazon.com", "Sam Kitting", "coworkers:anna.smith@bing.com", "coworkers:mad_max@ya.com", "friends:catwoman@yahoo.com"));\n        data.add(new Profile("catwoman@yahoo.com", "Liza", "friends:anna.smith@bing.com", "friends:sam@amazon.com"));\n        return data;\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Please specify social network to target spam tool (default:Facebook):\n1. Facebook\n2. LinkedIn\n> 1\n\nIterating over friends...\n\nFacebook: Loading 'friends' list of 'anna.smith@bing.com' over the network...\nFacebook: Loading profile 'mad_max@ya.com' over the network...\nSent message to: 'mad_max@ya.com'. Message body: 'Hey! This is Anna's friend Josh. Can you do me a favor and like this post [link]?'\nFacebook: Loading profile 'catwoman@yahoo.com' over the network...\nSent message to: 'catwoman@yahoo.com'. Message body: 'Hey! This is Anna's friend Josh. Can you do me a favor and like this post [link]?'\n\nIterating over coworkers...\n\nFacebook: Loading 'coworkers' list of 'anna.smith@bing.com' over the network...\nFacebook: Loading profile 'sam@amazon.com' over the network...\nSent message to: 'sam@amazon.com'. Message body: 'Hey! This is Anna's boss Jason. Anna told me you would be interested in [link].'\n")))}m.isMDXComponent=!0}}]);