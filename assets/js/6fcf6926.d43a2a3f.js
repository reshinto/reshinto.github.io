"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[2303],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=s(t),f=o,u=d["".concat(p,".").concat(f)]||d[f]||m[f]||a;return t?r.createElement(u,c(c({ref:n},l),{},{components:t})):r.createElement(u,c({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},49682:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=t(83117),o=(t(67294),t(3905));const a={},c="Python Example",i={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Decorator/python/readme",id:"interviewPrep/designPatterns/Structural_patterns/Decorator/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Decorator/python",slug:"/interviewPrep/designPatterns/Structural_patterns/Decorator/python/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"how to run",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/javascript/realExample/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/python/example2"}},p={},s=[],l={toc:s};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"python-example"},"Python Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'"""\nDecorator Design Pattern\n\nIntent: Lets you attach new behaviors to objects by placing these objects inside\nspecial wrapper objects that contain the behaviors.\n"""\n\n\nclass Component():\n    """\n    The base Component interface defines operations that can be altered by\n    decorators.\n    """\n\n    def operation(self) -> str:\n        pass\n\n\nclass ConcreteComponent(Component):\n    """\n    Concrete Components provide default implementations of the operations. There\n    might be several variations of these classes.\n    """\n\n    def operation(self) -> str:\n        return "ConcreteComponent"\n\n\nclass Decorator(Component):\n    """\n    The base Decorator class follows the same interface as the other components.\n    The primary purpose of this class is to define the wrapping interface for\n    all concrete decorators. The default implementation of the wrapping code\n    might include a field for storing a wrapped component and the means to\n    initialize it.\n    """\n\n    _component: Component = None\n\n    def __init__(self, component: Component) -> None:\n        self._component = component\n\n    @property\n    def component(self) -> str:\n        """\n        The Decorator delegates all work to the wrapped component.\n        """\n\n        return self._component\n\n    def operation(self) -> str:\n        return self._component.operation()\n\n\nclass ConcreteDecoratorA(Decorator):\n    """\n    Concrete Decorators call the wrapped object and alter its result in some\n    way.\n    """\n\n    def operation(self) -> str:\n        """\n        Decorators may call parent implementation of the operation, instead of\n        calling the wrapped object directly. This approach simplifies extension\n        of decorator classes.\n        """\n        return f"ConcreteDecoratorA({self.component.operation()})"\n\n\nclass ConcreteDecoratorB(Decorator):\n    """\n    Decorators can execute their behavior either before or after the call to a\n    wrapped object.\n    """\n\n    def operation(self) -> str:\n        return f"ConcreteDecoratorB({self.component.operation()})"\n\n\ndef client_code(component: Component) -> None:\n    """\n    The client code works with all objects using the Component interface. This\n    way it can stay independent of the concrete classes of components it works\n    with.\n    """\n\n    # ...\n\n    print(f"RESULT: {component.operation()}", end="")\n\n    # ...\n\n\nif __name__ == "__main__":\n    # This way the client code can support both simple components...\n    simple = ConcreteComponent()\n    print("Client: I\'ve got a simple component:")\n    client_code(simple)\n    print("\\n")\n\n    # ...as well as decorated ones.\n    #\n    # Note how decorators can wrap not only simple components but the other\n    # decorators as well.\n    decorator1 = ConcreteDecoratorA(simple)\n    decorator2 = ConcreteDecoratorB(decorator1)\n    print("Client: Now I\'ve got a decorated component:")\n    client_code(decorator2)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Client: I've got a simple component:\nRESULT: ConcreteComponent\n\nClient: Now I've got a decorated component:\nRESULT: ConcreteDecoratorB(ConcreteDecoratorA(ConcreteComponent))\n")))}m.isMDXComponent=!0}}]);