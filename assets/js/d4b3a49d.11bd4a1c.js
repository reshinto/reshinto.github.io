"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[70699],{3905:(e,n,i)=>{i.d(n,{Zo:()=>c,kt:()=>f});var t=i(67294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function a(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?o(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function l(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var p=t.createContext({}),s=function(e){var n=t.useContext(p),i=n;return e&&(i="function"==typeof e?e(n):a(a({},n),e)),i},c=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(i),f=r,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||o;return i?t.createElement(m,a(a({ref:n},c),{},{components:i})):t.createElement(m,a({ref:n},c))}));function f(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=i[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,i)}d.displayName="MDXCreateElement"},39891:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var t=i(83117),r=(i(67294),i(3905));const o={},a="Python Example",l={unversionedId:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/python/readme",id:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/python/readme",title:"Python Example",description:"Violate LSP",source:"@site/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/python/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/python",slug:"/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/python/",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/javascript/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/typescript/"}},p={},s=[{value:"Violate LSP",id:"violate-lsp",level:2},{value:"Pass LSP",id:"pass-lsp",level:2}],c={toc:s};function u(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,t.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-example"},"Python Example"),(0,r.kt)("h2",{id:"violate-lsp"},"Violate LSP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class Bird:\n    def fly(self):\n        print("I can fly")\n\n\nclass Duck(Bird):\n    def quack(self):\n        print("I can quack")\n\n\nclass Penguin(Bird):\n    def fly(self):\n        raise Exception("Cannot fly")\n\n    def swim(self):\n        print("I can swim")\n\n\n# this violates the Liskov Substitution Principle\n# as not every bird can fly\ndef make_bird_fly(bird):\n    bird.fly()\n\n\nduck = Duck()\npenguin = Penguin()\n\nmake_bird_fly(duck)\nmake_bird_fly(penguin)  # throws an error as penguin can\'t fly\n')),(0,r.kt)("h2",{id:"pass-lsp"},"Pass LSP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class FlyingBird:\n    def fly(self):\n        print("I can fly")\n\n\nclass SwimmingBird:\n    def swim(self):\n        print("I can swim")\n\n\nclass Duck(FlyingBird):\n    def quack(self):\n        print("I can quack")\n\n\nclass Penguin(SwimmingBird):\n    ...\n\n\ndef make_flying_bird_fly(bird):\n    bird.fly()\n\n\ndef make_swimming_bird_swim(bird):\n    bird.swim()\n\n\nduck = Duck()\npenguin = Penguin()\n\nmake_flying_bird_fly(duck)\nmake_swimming_bird_swim(penguin)\n')))}u.isMDXComponent=!0}}]);