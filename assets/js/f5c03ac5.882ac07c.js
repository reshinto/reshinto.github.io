"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8048],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=r.createContext({}),a=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=a(e.components);return r.createElement(d.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=a(t),h=i,m=p["".concat(d,".").concat(h)]||p[h]||c[h]||s;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,o=new Array(s);o[0]=p;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var a=2;a<s;a++)o[a]=t[a];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},99777:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var r=t(87462),i=(t(67294),t(3905));const s={},o="Doubly Linked List Example",l={unversionedId:"interviewPrep/data_structures/08LinkedLists/typescript/doublyLinkedList",id:"interviewPrep/data_structures/08LinkedLists/typescript/doublyLinkedList",title:"Doubly Linked List Example",description:"Node",source:"@site/docs/interviewPrep/data_structures/08LinkedLists/typescript/doublyLinkedList.md",sourceDirName:"interviewPrep/data_structures/08LinkedLists/typescript",slug:"/interviewPrep/data_structures/08LinkedLists/typescript/doublyLinkedList",permalink:"/docs/interviewPrep/data_structures/08LinkedLists/typescript/doublyLinkedList",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/data_structures/08LinkedLists/typescript/doublyLinkedList.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Circular Linked List Example",permalink:"/docs/interviewPrep/data_structures/08LinkedLists/typescript/circularLinkedList"},next:{title:"Singly Linked List Example",permalink:"/docs/interviewPrep/data_structures/08LinkedLists/typescript/singlyLinkedList"}},d={},a=[{value:"Node",id:"node",level:2},{value:"Doubly Linked List",id:"doubly-linked-list",level:2}],u={toc:a};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"doubly-linked-list-example"},"Doubly Linked List Example"),(0,i.kt)("h2",{id:"node"},"Node"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class DoublyNode<T> extends Node<T> {\n  constructor(\n    public element: T,\n    public next?: DoublyNode<T>,\n    public prev?: DoublyNode<T>\n  ) {\n    super(element, next);\n  }\n}\n")),(0,i.kt)("h2",{id:"doubly-linked-list"},"Doubly Linked List"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'class DoublyLinkedList<T> extends LinkedList<T> {\n  // There is one more tail node, and rewriting head\n  protected head?: DoublyNode<T>;\n  protected tail?: DoublyNode<T>;\n\n  /**\n   * @description: Add an element to the end of a doubly linked list\n   * @param {T} element\n   */\n  public push(element: T) {\n    const node = new DoublyNode(element);\n\n    if (this.head == null) {\n      this.head = node;\n      this.tail = node; // \ud83d\udc48 new\n    } else {\n      // \ud83d\udc47 revise\n      // Add to the tail, exchange pointers with each other\n      this.tail.next = node;\n      node.prev = this.tail;\n      // Finally set node to tail\n      this.tail = node;\n    }\n    this.count++;\n  }\n\n  /**\n   * @description: Inserts an element at the specified index\n   * @param {T} element\n   * @param {number} index\n   * @return {boolean} Returns whether the insertion was successful\n   */\n  public insert(element: T, index: number): boolean {\n    if (index >= 0 && index <= this.count) {\n      const node = new DoublyNode(element);\n      let current = this.head;\n\n      // \ud83d\udc47 insert into the first\n      if (index === 0) {\n        // linked list is empty\n        if (this.head == null) {\n          this.head = node;\n          this.tail = node;\n          // linked list is not empty\n        } else {\n          node.next = this.head;\n          this.head.prev = node; // NEW\n          this.head = node;\n        }\n        // \ud83d\udc47 insert to the last\n      } else if (index === this.count) {\n        current = this.tail;\n        current.next = node;\n        node.prev = current;\n        this.tail = node;\n        // \ud83d\udc47 insert to the last\n      } else {\n        const previous = this.getNodeAt(index - 1);\n        current = previous.next;\n        node.next = current;\n        previous.next = node;\n\n        current.prev = node; // NEW\n        node.prev = previous; // NEW\n      }\n      this.count++;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @description: removes the element at the specified index\n   * @param {number} index\n   * @return {T} Returns the removed element\n   */\n  public removeAt(index: number): T {\n    if (index >= 0 && index < this.count) {\n      let current = this.head;\n\n      // \ud83d\udc47 delete the first\n      if (index === 0) {\n        this.head = this.head.next;\n        // If there is only one element, the tail needs to be adjusted at the same time\n        if (this.count === 1) {\n          this.tail = undefined;\n        } else {\n          this.head.prev = undefined;\n        }\n        // \ud83d\udc47 delete the last\n      } else if (index === this.count - 1) {\n        current = this.tail;\n        this.tail = current.prev;\n        this.tail.next = undefined;\n        // \ud83d\udc47 normal delete\n      } else {\n        current = this.getNodeAt(index);\n        const previous = current.prev;\n        const next = current.next;\n        previous.next = next;\n        next.prev = previous;\n      }\n      this.count--;\n      return current.element;\n    }\n    return undefined;\n  }\n\n  /**\n   * @description: Get the last node of the linked list\n   * @return {Node<T>}\n   */\n  public getTail(): DoublyNode<T> {\n    return this.tail;\n  }\n\n  /**\n   * @description:\n   */\n  public clear() {\n    super.clear();\n    this.tail = undefined;\n  }\n\n  /**\n   * @description: output string from tail to head\n   * @return {string}\n   */\n  public inverseToString() {\n    if (this.tail == null) {\n      return "";\n    }\n    let objString = `${this.tail.element}`;\n    let previous = this.tail.prev;\n    while (previous != null) {\n      objString = `${objString},${previous.element}`;\n      previous = previous.prev;\n    }\n    return objString;\n  }\n}\n')))}c.isMDXComponent=!0}}]);