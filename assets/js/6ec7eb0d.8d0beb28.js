"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9586],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(t),d=a,g=u["".concat(l,".").concat(d)]||u[d]||h[d]||r;return t?i.createElement(g,s(s({ref:n},p),{},{components:t})):i.createElement(g,s({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<r;c++)s[c]=t[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},63701:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=t(83117),a=(t(67294),t(3905));const r={},s="C# Example",o={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Singleton/cSharp/readme",id:"interviewPrep/designPatterns/Creational_patterns/Singleton/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Singleton/cSharp",slug:"/interviewPrep/designPatterns/Creational_patterns/Singleton/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/go/"}},l={},c=[],p={toc:c};function h(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-example"},"C# Example"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Non Thread Safe")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"// Singleton Design Pattern\n//\n// Intent: Lets you ensure that a class has only one instance, while providing a\n// global access point to this instance.\n\nusing System;\n\nnamespace Singleton\n{\n    // The Singleton class defines the `GetInstance` method that serves as an\n    // alternative to constructor and lets clients access the same instance of\n    // this class over and over.\n    class Singleton\n    {\n        // The Singleton's constructor should always be private to prevent\n        // direct construction calls with the `new` operator.\n        private Singleton() { }\n\n        // The Singleton's instance is stored in a static field. There there are\n        // multiple ways to initialize this field, all of them have various pros\n        // and cons. In this example we'll show the simplest of these ways,\n        // which, however, doesn't work really well in multithreaded program.\n        private static Singleton _instance;\n\n        // This is the static method that controls the access to the singleton\n        // instance. On the first run, it creates a singleton object and places\n        // it into the static field. On subsequent runs, it returns the client\n        // existing object stored in the static field.\n        public static Singleton GetInstance()\n        {\n            if (_instance == null)\n            {\n                _instance = new Singleton();\n            }\n            return _instance;\n        }\n\n        // Finally, any singleton should define some business logic, which can\n        // be executed on its instance.\n        public static void someBusinessLogic()\n        {\n            // ...\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // The client code.\n            Singleton s1 = Singleton.GetInstance();\n            Singleton s2 = Singleton.GetInstance();\n\n            if (s1 == s2)\n            {\n                Console.WriteLine(\"Singleton works, both variables contain the same instance.\");\n            }\n            else\n            {\n                Console.WriteLine(\"Singleton failed, variables contain different instances.\");\n            }\n        }\n    }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Singleton works, both variables contain the same instance.\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Thread Safe")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// Singleton Design Pattern\n//\n// Intent: Lets you ensure that a class has only one instance, while providing a\n// global access point to this instance.\n\nusing System;\nusing System.Threading;\n\nnamespace Singleton\n{\n    // This Singleton implementation is called "double check lock". It is safe\n    // in multithreaded environment and provides lazy initialization for the\n    // Singleton object.\n    class Singleton\n    {\n        private Singleton() { }\n\n        private static Singleton _instance;\n\n        // We now have a lock object that will be used to synchronize threads\n        // during first access to the Singleton.\n        private static readonly object _lock = new object();\n\n        public static Singleton GetInstance(string value)\n        {\n            // This conditional is needed to prevent threads stumbling over the\n            // lock once the instance is ready.\n            if (_instance == null)\n            {\n                // Now, imagine that the program has just been launched. Since\n                // there\'s no Singleton instance yet, multiple threads can\n                // simultaneously pass the previous conditional and reach this\n                // point almost at the same time. The first of them will acquire\n                // lock and will proceed further, while the rest will wait here.\n                lock (_lock)\n                {\n                    // The first thread to acquire the lock, reaches this\n                    // conditional, goes inside and creates the Singleton\n                    // instance. Once it leaves the lock block, a thread that\n                    // might have been waiting for the lock release may then\n                    // enter this section. But since the Singleton field is\n                    // already initialized, the thread won\'t create a new\n                    // object.\n                    if (_instance == null)\n                    {\n                        _instance = new Singleton();\n                        _instance.Value = value;\n                    }\n                }\n            }\n            return _instance;\n        }\n\n        // We\'ll use this property to prove that our Singleton really works.\n        public string Value { get; set; }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // The client code.\n\n            Console.WriteLine(\n                "{0}\\n{1}\\n\\n{2}\\n",\n                "If you see the same value, then singleton was reused (yay!)",\n                "If you see different values, then 2 singletons were created (booo!!)",\n                "RESULT:"\n            );\n\n            Thread process1 = new Thread(() =>\n            {\n                TestSingleton("FOO");\n            });\n            Thread process2 = new Thread(() =>\n            {\n                TestSingleton("BAR");\n            });\n\n            process1.Start();\n            process2.Start();\n\n            process1.Join();\n            process2.Join();\n        }\n\n        public static void TestSingleton(string value)\n        {\n            Singleton singleton = Singleton.GetInstance(value);\n            Console.WriteLine(singleton.Value);\n        }\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"FOO\nFOO\n")))}h.isMDXComponent=!0}}]);