"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[7727],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=m(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},330:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var a=n(83117),r=(n(67294),n(3905));const o={},i="Command",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Command/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Command/readme",title:"Command",description:"- The Command pattern aims to encapsulate method invocation, requests, or operations into a single object",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Command",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Command/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chain of Responsibility",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/"},next:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/cPlusPlus/"}},l={},m=[{value:"Why use the Command pattern",id:"why-use-the-command-pattern",level:2},{value:"Analogy",id:"analogy",level:2},{value:"in a restaurant",id:"in-a-restaurant",level:3},{value:"Structure",id:"structure",level:2},{value:"When to apply",id:"when-to-apply",level:2},{value:"Pros and Cons",id:"pros-and-cons",level:2},{value:"Example",id:"example",level:2}],p={toc:m};function c(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"command"},"Command"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The Command pattern aims to encapsulate method invocation, requests, or operations into a single object"),(0,r.kt)("li",{parentName:"ul"},"It gives us the ability to both parameterize and pass method calls around that can be executed at our discretion"),(0,r.kt)("li",{parentName:"ul"},"It enables us to decouple objects invoking the action from the objects that implement them, giving us a greater degree of overall flexibility in swapping out concrete classes (objects)"),(0,r.kt)("li",{parentName:"ul"},"idea behind the Command pattern is that it provides us a means to separate the responsibilities of issuing commands from anything executing commands, delegating this responsibility to different objects instead")),(0,r.kt)("h2",{id:"why-use-the-command-pattern"},"Why use the Command pattern"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"By using the command pattern in our programs and applications, we are able to incorporate functionalities (such as queueing, request logging, and undo/redo operations) with a lot of ease"),(0,r.kt)("li",{parentName:"ul"},"This is because each request is an independent entity from other classes and objects"),(0,r.kt)("li",{parentName:"ul"},"therefore, we can modify or update a request without worrying about affecting other requests or objects")),(0,r.kt)("h2",{id:"analogy"},"Analogy"),(0,r.kt)("h3",{id:"in-a-restaurant"},"in a restaurant"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the Client is the customer"),(0,r.kt)("li",{parentName:"ul"},"the Invoker is the waiter that writes the paper order that is given from the client"),(0,r.kt)("li",{parentName:"ul"},"the waiter then gives the paper orders as a form of command to the chefs in the kitchen"),(0,r.kt)("li",{parentName:"ul"},"the receiver is the chefs in the kitchen that takes the command and then prepares the meal")),(0,r.kt)("h2",{id:"structure"},"Structure"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Command",src:n(48520).Z,width:"1314",height:"814"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The Sender class (aka invoker) is responsible for initiating requests.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This class must have a field for storing a reference to a command object."),(0,r.kt)("li",{parentName:"ul"},"The sender triggers that command instead of sending the request directly to the receiver."),(0,r.kt)("li",{parentName:"ul"},"Note that the sender isn\u2019t responsible for creating the command object."),(0,r.kt)("li",{parentName:"ul"},"Usually, it gets a pre-created command from the client via the constructor."))),(0,r.kt)("li",{parentName:"ol"},"The Command interface usually declares just a single method for executing the command."),(0,r.kt)("li",{parentName:"ol"},"Concrete Commands implement various kinds of requests.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A concrete command isn\u2019t supposed to perform the work on its own, but rather to pass the call to one of the business logic objects."),(0,r.kt)("li",{parentName:"ul"},"However, for the sake of simplifying the code, these classes can be merged."))),(0,r.kt)("li",{parentName:"ol"},"Parameters required to execute a method on a receiving object can be declared as fields in the concrete command.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"You can make command objects immutable by only allowing the initialization of these fields via the constructor."))),(0,r.kt)("li",{parentName:"ol"},"The Receiver class contains some business logic.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Almost any object may act as a receiver."),(0,r.kt)("li",{parentName:"ul"},"Most commands only handle the details of how a request is passed to the receiver, while the receiver itself does the actual work."))),(0,r.kt)("li",{parentName:"ol"},"The Client creates and configures concrete command objects.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The client must pass all of the request parameters, including a receiver instance, into the command\u2019s constructor."),(0,r.kt)("li",{parentName:"ul"},"After that, the resulting command may be associated with one or multiple senders.")))),(0,r.kt)("h2",{id:"when-to-apply"},"When to apply"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"when you want to parametrize objects with operations",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The Command pattern can turn a specific method call into a stand-alone object"),(0,r.kt)("li",{parentName:"ul"},"This change opens up a lot of interesting uses: you can pass commands as method arguments, store them inside other objects, switch linked commands at runtime, etc."),(0,r.kt)("li",{parentName:"ul"},"example: you're developing a GUI component such as a context menu, and you want your users to be able to configure menu items that trigger operations when an end user clicks an item"))),(0,r.kt)("li",{parentName:"ul"},"when you want to queue operations, schedule their execution, or execute them remotely",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"As with any other object, a command can be serialized, which means converting it to a string that can be easily written to a file or a database"),(0,r.kt)("li",{parentName:"ul"},"Later, the string can be restored as the initial command object"),(0,r.kt)("li",{parentName:"ul"},"Thus, you can delay and schedule command execution"),(0,r.kt)("li",{parentName:"ul"},"In the same way, you can queue, log or send commands over the network"))),(0,r.kt)("li",{parentName:"ul"},"when you want to implement reversible operations",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Although there are many ways to implement undo/redo, the Command pattern is perhaps the most popular of all"),(0,r.kt)("li",{parentName:"ul"},"To be able to revert operations, you need to implement the history of performed operations"),(0,r.kt)("li",{parentName:"ul"},"The command history is a stack that contains all executed command objects along with related backups of the application's state"),(0,r.kt)("li",{parentName:"ul"},"This method has two drawbacks",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"First, it isn't that easy to save an application's state because some of it can be private",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This problem can be mitigated with the Memento pattern"))),(0,r.kt)("li",{parentName:"ul"},"Second, the state backups may consume quite a lot of RAM"))),(0,r.kt)("li",{parentName:"ul"},"Therefore, sometimes you can resort to an alternative implementation",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"instead of restoring the past state, the command performs the inverse operation"))),(0,r.kt)("li",{parentName:"ul"},"The reverse operation also has a price",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it may turn out to be hard or even impossible to implement")))))),(0,r.kt)("h2",{id:"pros-and-cons"},"Pros and Cons"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"pros"),(0,r.kt)("th",{parentName:"tr",align:null},"cons"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"decoupling classes that invoke operations from classes that perform these operations (Single Responsibility)"),(0,r.kt)("td",{parentName:"tr",align:null},"the code may become more complicated since you're introducing a whole new layer between senders and receivers")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"introducing new commands into the app without breaking existing client code (Open/Closed)"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"implementing undo/redo"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"implementing deferred execution of operations"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"assembling a set of simple commands into a complex one"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"abstract class Command {\n  protected app: Application;\n  protected editor: Editor;\n  protected backup: string;\n\n  constructor(app: Application, editor: Editor) {\n    this.app = app;\n    this.editor = editor;\n  }\n\n  saveBackup() {\n    this.backup = this.editor.text;\n  }\n\n  undo() {\n    this.editor.text = this.backup;\n  }\n\n  abstract execute();\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'class CopyCommand extends Command {\n  execute() {\n    this.app.clipboard = this.editor.getSelection();\n  }\n}\nclass PasteCommand extends Command {\n  execute() {\n    this.saveBackup();\n    this.editor.replaceSelection(this.app.clipboard);\n  }\n}\nclass CommandHistory {\n  private history: Command[];\n\n  push(c: Command) {\n    this.history.push(c);\n  }\n  pop(): Command {\n    return this.history[this.history.length - 1];\n  }\n}\nclass Editor {\n  text: string;\n\n  getSelection() {\n    return "some selection";\n  }\n  replaceSelection(clipboard) {\n    return `some ${clipboard} selection`;\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'class Application {\n  clipboard: string;\n  editor: Editor;\n  activeEditor: Editor;\n  history: CommandHistory;\n\n  bindComands() {\n    shortcuts.onkeypress("Ctrl+C", () => {\n      return this.executeCommand(new CopyCommand(this, this.editor));\n    });\n    shortcuts.onkeypress("Ctrl+V", () => {\n      return this.executeCommand(new PasteCommand(this, this.editor));\n    });\n  }\n\n  executeCommand(command: Command) {\n    this.history.push(command);\n    command.execute();\n  }\n\n  undo() {\n    const command = this.history.pop();\n    command.undo();\n  }\n}\n')))}c.isMDXComponent=!0},48520:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/command-e846f78726fcb396c7b62e229805c884.png"}}]);