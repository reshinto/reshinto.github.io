"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[7366],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var s=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,h=m["".concat(l,".").concat(f)]||m[f]||d[f]||r;return n?s.createElement(h,o(o({ref:t},c),{},{components:n})):s.createElement(h,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},62749:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var s=n(87462),a=(n(67294),n(3905));const r={},o="Python Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Template/python/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Template/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Template/python",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Template/python/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/javascript/"},next:{title:"Template Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/swift/"}},l={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python-example"},"Python Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'"""\nTemplate Method Design Pattern\n\nIntent: Defines the skeleton of an algorithm in the superclass but lets\nsubclasses override specific steps of the algorithm without changing its\nstructure.\n"""\n\n\nfrom abc import ABC, abstractmethod\n\n\nclass AbstractClass(ABC):\n    """\n    The Abstract Class defines a template method that contains a skeleton of\n    some algorithm, composed of calls to (usually) abstract primitive\n    operations.\n\n    Concrete subclasses should implement these operations, but leave the\n    template method itself intact.\n    """\n\n    def template_method(self) -> None:\n        """\n        The template method defines the skeleton of an algorithm.\n        """\n\n        self.base_operation1()\n        self.required_operations1()\n        self.base_operation2()\n        self.hook1()\n        self.required_operations2()\n        self.base_operation3()\n        self.hook2()\n\n    # These operations already have implementations.\n\n    def base_operation1(self) -> None:\n        print("AbstractClass says: I am doing the bulk of the work")\n\n    def base_operation2(self) -> None:\n        print("AbstractClass says: But I let subclasses override some operations")\n\n    def base_operation3(self) -> None:\n        print("AbstractClass says: But I am doing the bulk of the work anyway")\n\n    # These operations have to be implemented in subclasses.\n\n    @abstractmethod\n    def required_operations1(self) -> None:\n        pass\n\n    @abstractmethod\n    def required_operations2(self) -> None:\n        pass\n\n    # These are "hooks." Subclasses may override them, but it\'s not mandatory\n    # since the hooks already have default (but empty) implementation. Hooks\n    # provide additional extension points in some crucial places of the\n    # algorithm.\n\n    def hook1(self) -> None:\n        pass\n\n    def hook2(self) -> None:\n        pass\n\n\nclass ConcreteClass1(AbstractClass):\n    """\n    Concrete classes have to implement all abstract operations of the base\n    class. They can also override some operations with a default implementation.\n    """\n\n    def required_operations1(self) -> None:\n        print("ConcreteClass1 says: Implemented Operation1")\n\n    def required_operations2(self) -> None:\n        print("ConcreteClass1 says: Implemented Operation2")\n\n\nclass ConcreteClass2(AbstractClass):\n    """\n    Usually, concrete classes override only a fraction of base class\'\n    operations.\n    """\n\n    def required_operations1(self) -> None:\n        print("ConcreteClass2 says: Implemented Operation1")\n\n    def required_operations2(self) -> None:\n        print("ConcreteClass2 says: Implemented Operation2")\n\n    def hook1(self) -> None:\n        print("ConcreteClass2 says: Overridden Hook1")\n\n\ndef client_code(abstract_class: AbstractClass) -> None:\n    """\n    The client code calls the template method to execute the algorithm. Client\n    code does not have to know the concrete class of an object it works with, as\n    long as it works with objects through the interface of their base class.\n    """\n\n    # ...\n    abstract_class.template_method()\n    # ...\n\n\nif __name__ == "__main__":\n    print("Same client code can work with different subclasses:")\n    client_code(ConcreteClass1())\n    print("")\n\n    print("Same client code can work with different subclasses:")\n    client_code(ConcreteClass2())\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Same client code can work with different subclasses:\nAbstractClass says: I am doing the bulk of the work\nConcreteClass1 says: Implemented Operation1\nAbstractClass says: But I let subclasses override some operations\nConcreteClass1 says: Implemented Operation2\nAbstractClass says: But I am doing the bulk of the work anyway\n\nSame client code can work with different subclasses:\nAbstractClass says: I am doing the bulk of the work\nConcreteClass2 says: Implemented Operation1\nAbstractClass says: But I let subclasses override some operations\nConcreteClass2 says: Overridden Hook1\nConcreteClass2 says: Implemented Operation2\nAbstractClass says: But I am doing the bulk of the work anyway\n")))}d.isMDXComponent=!0}}]);