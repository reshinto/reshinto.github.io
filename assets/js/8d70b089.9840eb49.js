"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[16659],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),l=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=a,g=d["".concat(m,".").concat(f)]||d[f]||c[f]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},94634:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(83117),a=(n(67294),n(3905));const o={},i="Python Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Memento/python/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Memento/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Memento/python",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Memento/python/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/javascript/"},next:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/"}},m={},l=[],p={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python-example"},"Python Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'"""\nMemento Design Pattern\n\nIntent: Lets you save and restore the previous state of an object without\nrevealing the details of its implementation.\n"""\n\n\nfrom __future__ import annotations\nfrom abc import ABC, abstractmethod\nfrom datetime import datetime\nfrom random import sample\nfrom string import ascii_letters, digits\n\n\nclass Originator():\n    """\n    The Originator holds some important state that may change over time. It also\n    defines a method for saving the state inside a memento and another method\n    for restoring the state from it.\n    """\n\n    _state = None\n    """\n    For the sake of simplicity, the originator\'s state is stored inside a single\n    variable.\n    """\n\n    def __init__(self, state: str) -> None:\n        self._state = state\n        print(f"Originator: My initial state is: {self._state}")\n\n    def do_something(self) -> None:\n        """\n        The Originator\'s business logic may affect its internal state.\n        Therefore, the client should backup the state before launching methods\n        of the business logic via the save() method.\n        """\n\n        print("Originator: I\'m doing something important.")\n        self._state = self._generate_random_string(30)\n        print(f"Originator: and my state has changed to: {self._state}")\n\n    def _generate_random_string(self, length: int = 10) -> None:\n        return "".join(sample(ascii_letters, length))\n\n    def save(self) -> Memento:\n        """\n        Saves the current state inside a memento.\n        """\n\n        return ConcreteMemento(self._state)\n\n    def restore(self, memento: Memento) -> None:\n        """\n        Restores the Originator\'s state from a memento object.\n        """\n\n        self._state = memento.get_state()\n        print(f"Originator: My state has changed to: {self._state}")\n\n\nclass Memento(ABC):\n    """\n    The Memento interface provides a way to retrieve the memento\'s metadata,\n    such as creation date or name. However, it doesn\'t expose the Originator\'s\n    state.\n    """\n\n    @abstractmethod\n    def get_name(self) -> str:\n        pass\n\n    @abstractmethod\n    def get_date(self) -> str:\n        pass\n\n\nclass ConcreteMemento(Memento):\n    def __init__(self, state: str) -> None:\n        self._state = state\n        self._date = str(datetime.now())[:19]\n\n    def get_state(self) -> str:\n        """\n        The Originator uses this method when restoring its state.\n        """\n        return self._state\n\n    def get_name(self) -> str:\n        """\n        The rest of the methods are used by the Caretaker to display metadata.\n        """\n\n        return f"{self._date} / ({self._state[0:9]}...)"\n\n    def get_date(self) -> str:\n        return self._date\n\n\nclass Caretaker():\n    """\n    The Caretaker doesn\'t depend on the Concrete Memento class. Therefore, it\n    doesn\'t have access to the originator\'s state, stored inside the memento. It\n    works with all mementos via the base Memento interface.\n    """\n\n    def __init__(self, originator: Originator) -> None:\n        self._mementos = []\n        self._originator = originator\n\n    def backup(self) -> None:\n        print("\\nCaretaker: Saving Originator\'s state...")\n        self._mementos.append(self._originator.save())\n\n    def undo(self) -> None:\n        if not len(self._mementos):\n            return\n\n        memento = self._mementos.pop()\n        print(f"Caretaker: Restoring state to: {memento.get_name()}")\n        try:\n            self._originator.restore(memento)\n        except Exception:\n            self.undo()\n\n    def show_history(self) -> None:\n        print("Caretaker: Here\'s the list of mementos:")\n        for memento in self._mementos:\n            print(memento.get_name())\n\n\nif __name__ == "__main__":\n    originator = Originator("Super-duper-super-puper-super.")\n    caretaker = Caretaker(originator)\n\n    caretaker.backup()\n    originator.do_something()\n\n    caretaker.backup()\n    originator.do_something()\n\n    caretaker.backup()\n    originator.do_something()\n\n    print()\n    caretaker.show_history()\n\n    print("\\nClient: Now, let\'s rollback!\\n")\n    caretaker.undo()\n\n    print("\\nClient: Once more!\\n")\n    caretaker.undo()\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Originator: My initial state is: Super-duper-super-puper-super.\n\nCaretaker: Saving Originator's state...\nOriginator: I'm doing something important.\nOriginator: and my state has changed to: wQAehHYOqVSlpEXjyIcgobrxsZUnat\n\nCaretaker: Saving Originator's state...\nOriginator: I'm doing something important.\nOriginator: and my state has changed to: lHxNORKcsgMWYnJqoXjVCbQLEIeiSp\n\nCaretaker: Saving Originator's state...\nOriginator: I'm doing something important.\nOriginator: and my state has changed to: cvIYsRilNOtwynaKdEZpDCQkFAXVMf\n\nCaretaker: Here's the list of mementos:\n2019-01-26 21:11:24 / (Super-dup...)\n2019-01-26 21:11:24 / (wQAehHYOq...)\n2019-01-26 21:11:24 / (lHxNORKcs...)\n\nClient: Now, let's rollback!\n\nCaretaker: Restoring state to: 2019-01-26 21:11:24 / (lHxNORKcs...)\nOriginator: My state has changed to: lHxNORKcsgMWYnJqoXjVCbQLEIeiSp\n\nClient: Once more!\n\nCaretaker: Restoring state to: 2019-01-26 21:11:24 / (wQAehHYOq...)\nOriginator: My state has changed to: wQAehHYOqVSlpEXjyIcgobrxsZUnat\n")))}c.isMDXComponent=!0}}]);