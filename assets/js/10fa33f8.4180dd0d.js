"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[3757],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,b=c["".concat(s,".").concat(d)]||c[d]||u[d]||l;return a?n.createElement(b,i(i({ref:t},m),{},{components:a})):n.createElement(b,i({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},24173:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(83117),r=(a(67294),a(3905));const l={},i="PostgreSQL Relational Database example",o={unversionedId:"interviewPrep/system_design/12RelationalDatabases/example/readme",id:"interviewPrep/system_design/12RelationalDatabases/example/readme",title:"PostgreSQL Relational Database example",description:"how to run",source:"@site/docs/interviewPrep/system_design/12RelationalDatabases/example/readme.md",sourceDirName:"interviewPrep/system_design/12RelationalDatabases/example",slug:"/interviewPrep/system_design/12RelationalDatabases/example/",permalink:"/docs/interviewPrep/system_design/12RelationalDatabases/example/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/system_design/12RelationalDatabases/example/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Relational Databases",permalink:"/docs/interviewPrep/system_design/12RelationalDatabases/"},next:{title:"Key-Value Stores",permalink:"/docs/interviewPrep/system_design/13Key-ValueStores/"}},s={},p=[{value:"how to run",id:"how-to-run",level:2},{value:"Atomicity example",id:"atomicity-example",level:2},{value:"Isolation example",id:"isolation-example",level:2}],m={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"postgresql-relational-database-example"},"PostgreSQL Relational Database example"),(0,r.kt)("h2",{id:"how-to-run"},"how to run"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install postgresql",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"brew install postgresql"))),(0,r.kt)("li",{parentName:"ul"},"Start postgresql server",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"brew services start postgresql"))),(0,r.kt)("li",{parentName:"ul"},"Create database",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"createdb database_name"))),(0,r.kt)("li",{parentName:"ul"},"Load sql file into database",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"psql -d database_name -a -f tables.sql"))),(0,r.kt)("li",{parentName:"ul"},"Connect to database",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"psql -d database_name"))),(0,r.kt)("li",{parentName:"ul"},"Run queries from queries.sql by copy and paste")),(0,r.kt)("h2",{id:"atomicity-example"},"Atomicity example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"open 2 terminals, both connected to the same database"),(0,r.kt)("li",{parentName:"ul"},"1 starts the ",(0,r.kt)("inlineCode",{parentName:"li"},"BEGIN TRANSACTION")," while the other does not"),(0,r.kt)("li",{parentName:"ul"},"after updating the one that has began transaction, the other does not reflect the results",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this is because ",(0,r.kt)("inlineCode",{parentName:"li"},"COMMIT")," has not been initiated and thus the transaction has not been fully completed, displaying the atomicity feature")))),(0,r.kt)("h2",{id:"isolation-example"},"Isolation example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"open 2 terminals, both connected to the same database"),(0,r.kt)("li",{parentName:"ul"},"both start the ",(0,r.kt)("inlineCode",{parentName:"li"},"BEGIN TRANSACTION")),(0,r.kt)("li",{parentName:"ul"},"update the 1st terminal, then try updating the 2nd terminal",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the 1st terminal will be updated successfully"),(0,r.kt)("li",{parentName:"ul"},"the 2nd terminal will hang"),(0,r.kt)("li",{parentName:"ul"},"this means that transactions could be runned concurrently, but effectively they will be executed sequentially"))),(0,r.kt)("li",{parentName:"ul"},"2nd terminal will only complete after the 1st terminal perform a ",(0,r.kt)("inlineCode",{parentName:"li"},"COMMIT;"))))}u.isMDXComponent=!0}}]);