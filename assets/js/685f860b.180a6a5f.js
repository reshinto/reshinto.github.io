"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[4613],{3905:(e,a,r)=>{r.d(a,{Zo:()=>d,kt:()=>u});var n=r(67294);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function i(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?i(Object(r),!0).forEach((function(a){t(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function c(e,a){if(null==e)return{};var r,n,t=function(e,a){if(null==e)return{};var r,n,t={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var l=n.createContext({}),p=function(e){var a=n.useContext(l),r=a;return e&&(r="function"==typeof e?e(a):o(o({},a),e)),r},d=function(e){var a=p(e.components);return n.createElement(l.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},s=n.forwardRef((function(e,a){var r=e.components,t=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),s=p(r),u=t,g=s["".concat(l,".").concat(u)]||s[u]||m[u]||i;return r?n.createElement(g,o(o({ref:a},d),{},{components:r})):n.createElement(g,o({ref:a},d))}));function u(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=r.length,o=new Array(i);o[0]=s;var c={};for(var l in a)hasOwnProperty.call(a,l)&&(c[l]=a[l]);c.originalType=e,c.mdxType="string"==typeof e?e:t,o[1]=c;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},5878:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var n=r(83117),t=(r(67294),r(3905));const i={},o="Java Example",c={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Facade/java/readme",id:"interviewPrep/designPatterns/Structural_patterns/Facade/java/readme",title:"Java Example",description:"- facade/VideoConversionFacade.java",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Facade/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Facade/java",slug:"/interviewPrep/designPatterns/Structural_patterns/Facade/java/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Facade/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/go/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/javascript/"}},l={},p=[],d={toc:p};function m(e){let{components:a,...r}=e;return(0,t.kt)("wrapper",(0,n.Z)({},d,r,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"java-example"},"Java Example"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"facade/VideoConversionFacade.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.facade.example.facade;\n\nimport refactoring_guru.facade.example.some_complex_media_library.*;\n\nimport java.io.File;\n\npublic class VideoConversionFacade {\n    public File convertVideo(String fileName, String format) {\n        System.out.println("VideoConversionFacade: conversion started.");\n        VideoFile file = new VideoFile(fileName);\n        Codec sourceCodec = CodecFactory.extract(file);\n        Codec destinationCodec;\n        if (format.equals("mp4")) {\n            destinationCodec = new OggCompressionCodec();\n        } else {\n            destinationCodec = new MPEG4CompressionCodec();\n        }\n        VideoFile buffer = BitrateReader.read(file, sourceCodec);\n        VideoFile intermediateResult = BitrateReader.convert(buffer, destinationCodec);\n        File result = (new AudioMixer()).fix(intermediateResult);\n        System.out.println("VideoConversionFacade: conversion completed.");\n        return result;\n    }\n}\n'))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"someComplexMediaLibrary"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"someComplexMediaLibrary/AudioMixer.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.facade.example.some_complex_media_library;\n\nimport java.io.File;\n\npublic class AudioMixer {\n    public File fix(VideoFile result){\n        System.out.println("AudioMixer: fixing audio...");\n        return new File("tmp");\n    }\n}\n'))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"someComplexMediaLibrary/BitrateReader.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.facade.example.some_complex_media_library;\n\npublic class BitrateReader {\n    public static VideoFile read(VideoFile file, Codec codec) {\n        System.out.println("BitrateReader: reading file...");\n        return file;\n    }\n\n    public static VideoFile convert(VideoFile buffer, Codec codec) {\n        System.out.println("BitrateReader: writing file...");\n        return buffer;\n    }\n}\n'))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"someComplexMediaLibrary/Codec.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.facade.example.some_complex_media_library;\n\npublic interface Codec {\n}\n"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"someComplexMediaLibrary/CodecFactory.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.facade.example.some_complex_media_library;\n\npublic class CodecFactory {\n    public static Codec extract(VideoFile file) {\n        String type = file.getCodecType();\n        if (type.equals("mp4")) {\n            System.out.println("CodecFactory: extracting mpeg audio...");\n            return new MPEG4CompressionCodec();\n        }\n        else {\n            System.out.println("CodecFactory: extracting ogg audio...");\n            return new OggCompressionCodec();\n        }\n    }\n}\n'))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"someComplexMediaLibrary/MPEG4CompressionCodec.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.facade.example.some_complex_media_library;\n\npublic class MPEG4CompressionCodec implements Codec {\n    public String type = "mp4";\n\n}\n'))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"someComplexMediaLibrary/OggCompressionCodec.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.facade.example.some_complex_media_library;\n\npublic class OggCompressionCodec implements Codec {\n    public String type = "ogg";\n}\n'))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"someComplexMediaLibrary/VideoFile.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.facade.example.some_complex_media_library;\n\npublic class VideoFile {\n    private String name;\n    private String codecType;\n\n    public VideoFile(String name) {\n        this.name = name;\n        this.codecType = name.substring(name.indexOf(".") + 1);\n    }\n\n    public String getCodecType() {\n        return codecType;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n'))))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Demo.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.facade.example;\n\nimport refactoring_guru.facade.example.facade.VideoConversionFacade;\n\nimport java.io.File;\n\npublic class Demo {\n    public static void main(String[] args) {\n        VideoConversionFacade converter = new VideoConversionFacade();\n        File mp4Video = converter.convertVideo("youtubevideo.ogg", "mp4");\n        // ...\n    }\n}\n')),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre"},"VideoConversionFacade: conversion started.\nCodecFactory: extracting ogg audio...\nBitrateReader: reading file...\nBitrateReader: writing file...\nAudioMixer: fixing audio...\nVideoConversionFacade: conversion completed.\n")))))}m.isMDXComponent=!0}}]);