"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[87196],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),y=c(n),g=a,u=y["".concat(l,".").concat(g)]||y[g]||h[g]||i;return n?r.createElement(u,s(s({ref:t},p),{},{components:n})):r.createElement(u,s({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=y;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},62634:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(83117),a=(n(67294),n(3905));const i={},s="JavaScript Example",o={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Flyweight/javascript/readme",id:"interviewPrep/designPatterns/Structural_patterns/Flyweight/javascript/readme",title:"JavaScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/javascript/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Flyweight/javascript",slug:"/interviewPrep/designPatterns/Structural_patterns/Flyweight/javascript/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/javascript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/javascript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/java/"},next:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/python/"}},l={},c=[],p={toc:c};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"javascript-example"},"JavaScript Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * The Flyweight stores a common portion of the state (also called intrinsic\n * state) that belongs to multiple real business entities. The Flyweight accepts\n * the rest of the state (extrinsic state, unique for each entity) via its\n * method parameters.\n */\nclass Flyweight {\n  constructor(sharedState) {\n    this.sharedState = sharedState;\n  }\n\n  operation(uniqueState) {\n    const s = JSON.stringify(this.sharedState);\n    const u = JSON.stringify(uniqueState);\n    console.log(`Flyweight: Displaying shared (${s}) and unique (${u}) state.`);\n  }\n}\n\nmodule.exports = Flyweight;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const Flyweight = require("./Flyweight");\n\n/**\n * The Flyweight Factory creates and manages the Flyweight objects. It ensures\n * that flyweights are shared correctly. When the client requests a flyweight,\n * the factory either returns an existing instance or creates a new one, if it\n * doesn\'t exist yet.\n */\nclass FlyweightFactory {\n  constructor(initialFlyweights) {\n    this.flyweights = {};\n    for (const state of initialFlyweights) {\n      this.flyweights[this.getKey(state)] = new Flyweight(state);\n    }\n  }\n\n  // Returns a Flyweight\'s string hash for a given state.\n  getKey(state) {\n    return state.join("_");\n  }\n\n  // Returns an existing Flyweight with a given state or creates a new one.\n  getFlyweight(sharedState) {\n    const key = this.getKey(sharedState);\n\n    if (!(key in this.flyweights)) {\n      console.log(\n        "FlyweightFactory: Can\'t find a flyweight, creating new one."\n      );\n      this.flyweights[key] = new Flyweight(sharedState);\n    } else {\n      console.log("FlyweightFactory: Reusing existing flyweight.");\n    }\n\n    return this.flyweights[key];\n  }\n\n  listFlyweights() {\n    const count = Object.keys(this.flyweights).length;\n    console.log(`\\nFlyweightFactory: I have ${count} flyweights:`);\n    for (const key in this.flyweights) {\n      console.log(key);\n    }\n  }\n}\n\nmodule.exports = FlyweightFactory;\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const FlyweightFactory = require("./FlyweightFactory");\n\n/**\n * The client code usually creates a bunch of pre-populated flyweights in the\n * initialization stage of the application.\n */\nconst factory = new FlyweightFactory([\n  ["Chevrolet", "Camaro2018", "pink"],\n  ["Mercedes Benz", "C300", "black"],\n  ["Mercedes Benz", "C500", "red"],\n  ["BMW", "M5", "red"],\n  ["BMW", "X6", "white"],\n  // ...\n]);\nfactory.listFlyweights();\n\n// ...\n\nfunction addCarToPoliceDatabase(ff, plates, owner, brand, model, color) {\n  console.log("\\nClient: Adding a car to database.");\n  const flyweight = ff.getFlyweight([brand, model, color]);\n\n  // The client code either stores or calculates extrinsic state and passes it\n  // to the flyweight\'s methods.\n  flyweight.operation([plates, owner]);\n}\n\naddCarToPoliceDatabase(factory, "CL234IR", "James Doe", "BMW", "M5", "red");\n\naddCarToPoliceDatabase(factory, "CL234IR", "James Doe", "BMW", "X1", "red");\n\nfactory.listFlyweights();\n')))}h.isMDXComponent=!0}}]);