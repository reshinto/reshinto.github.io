"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[92727],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},86699:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(83117),i=(n(67294),n(3905));const r={},l="Dependency Inversion Principle (DIP)",o={unversionedId:"interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/readme",id:"interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/readme",title:"Dependency Inversion Principle (DIP)",description:"- High level modules should not import anything from low-level modules",source:"@site/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/DependencyInversionPrinciple",slug:"/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/",permalink:"/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SOLID",permalink:"/docs/interviewPrep/design_principles/SOLID/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/cSharp/"}},s={},p=[{value:"Example",id:"example",level:2},{value:"Summary",id:"summary",level:2},{value:"When to allocate an interface from a class?",id:"when-to-allocate-an-interface-from-a-class",level:3},{value:"When not to allocate a class interface?",id:"when-not-to-allocate-a-class-interface",level:3}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dependency-inversion-principle-dip"},"Dependency Inversion Principle (DIP)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"High level modules should not import anything from low-level modules"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"both should depend on abstractions",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"e.g.: interfaces"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Abstractions should not depend on details"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"details (concrete implementations) should depend on abstractions"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"in other words: High-level modules, which provide complex logic, should be easily reusable and unaffected by changes in low-level modules, which provide utility features"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"To achieve that, you need to introduce an abstraction that decouples the high-level and low-level modules from each other"),(0,i.kt)("li",{parentName:"ul"},"The design principle does not just change the direction of the dependency, as you might have expected when you read its name for the first time"),(0,i.kt)("li",{parentName:"ul"},"It splits the dependency between the high-level and low-level modules by introducing an abstraction between them"),(0,i.kt)("li",{parentName:"ul"},"So, in the end, you get two dependencies:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the high-level module depends on the abstraction"),(0,i.kt)("li",{parentName:"ul"},"the low-level depends on the same abstraction")))))),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Let us dive deep into dependency inversion principle by having a look at the example below",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Suppose we are working on an application that uses ",(0,i.kt)("inlineCode",{parentName:"li"},"MySQL")," database"),(0,i.kt)("li",{parentName:"ul"},"We have ",(0,i.kt)("inlineCode",{parentName:"li"},"UserTransaction")," class that will be used to query User table in the database"),(0,i.kt)("li",{parentName:"ul"},"It contains ",(0,i.kt)("inlineCode",{parentName:"li"},"init()")," method that takes instance of ",(0,i.kt)("inlineCode",{parentName:"li"},"MySQLDatabase")," class and two base operations:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"insert()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delete()"))))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface Database {\n  insert(entity: object): object;\n  delete(entity: object): object;\n  get(entity: object): object;\n}\n\nclass UserTransaction {\n  private db;\n  init(db: MySQLDatabase) {\n    this.db = db;\n  }\n\n  insert(user: object) {\n    return !this.db.get(user) ? this.db.insert(user) : null;\n  }\n  delete(user: object) {\n    return !this.db.get(user) ? this.db.delete(user) : null;\n  }\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MySQLDatabase")," is a low-level module, ",(0,i.kt)("inlineCode",{parentName:"li"},"UserTransaction")," is a high-level one",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"But based on the definition of the Dependency Inversion Principle, which says to separate abstractions from the implementation, this fragment of code violates it, because the ",(0,i.kt)("inlineCode",{parentName:"li"},"UserTransaction")," class depends on the ",(0,i.kt)("inlineCode",{parentName:"li"},"MySQLDatabase")," class"))),(0,i.kt)("li",{parentName:"ul"},"But what if at some point we decided to replace ",(0,i.kt)("inlineCode",{parentName:"li"},"MySQL")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"PostgreSQL")," database, which has a completely different interface compared to ",(0,i.kt)("inlineCode",{parentName:"li"},"MySQL"),"?",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We would not only need to create ",(0,i.kt)("inlineCode",{parentName:"li"},"PostgreSQLDatabase")," class, but also update ",(0,i.kt)("inlineCode",{parentName:"li"},"UserTransaction")," class implementation")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class PostgreSQLDatabase {\n  insert(entity: object) {\n    return {\n      /* insert using PostgreSQL syntax */\n    };\n  }\n  delete(entity: object) {\n    return {\n      /* delete using PostgreSQL syntax */\n    };\n  }\n  get(entity: object) {\n    return {\n      /* get using PostgreSQL syntax */\n    };\n  }\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"There should be low coupling between classes used",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UserTransaction")," class does not have to worry about the database being used"),(0,i.kt)("li",{parentName:"ul"},"To fix that, we have to create an interface so that the low-level and high-level modules depend on the abstraction (interface)")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface Database {\n  insert(entity: object): object;\n  delete(entity: object): object;\n  get(entity: object): object;\n}\n\nclass PostgreSQLDatabase implements Database {\n  insert(entity: object) {\n    return {\n      /* insert using PostgreSQL syntax */\n    };\n  }\n  delete(entity: object) {\n    return {\n      /* delete using PostgreSQL syntax */\n    };\n  }\n  get(entity: object) {\n    return {\n      /* get using PostgreSQL syntax */\n    };\n  }\n}\n\nclass UserTransaction {\n  private db;\n  init(db: Database) {\n    this.db = db;\n  }\n\n  insert(user: object) {\n    return !this.db.get(user) ? this.db.insert(user) : null;\n  }\n  delete(user: object) {\n    return !this.db.get(user) ? this.db.delete(user) : null;\n  }\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Now both modules (low-level and high-level) depend on abstraction",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"No matter which database is used (either ",(0,i.kt)("inlineCode",{parentName:"li"},"PostgreSQL")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"MySQL"),"), ",(0,i.kt)("inlineCode",{parentName:"li"},"UserTransaction")," class depends on ",(0,i.kt)("inlineCode",{parentName:"li"},"Database")," interface"),(0,i.kt)("li",{parentName:"ul"},"Therefore, if at some point we decide to roll back to ",(0,i.kt)("inlineCode",{parentName:"li"},"MySQL")," or introduce a new database, we will not need to change the ",(0,i.kt)("inlineCode",{parentName:"li"},"UserTransaction")," class"),(0,i.kt)("li",{parentName:"ul"},"Dependency Inversion principle is not violated, and we can introduce new requirements very quickly without changing all the related modules")))),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"what is the use of the ",(0,i.kt)("inlineCode",{parentName:"li"},"Observer")," pattern from a DIP point of view",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Turns out")," control over the course of the program, giving a reaction to the event to the observer object",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the observer inverts control of program execution in a similar way to event handlers in the GUI"),(0,i.kt)("li",{parentName:"ul"},"event handlers are called at the time of a user input event",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mouse click, keypress"))),(0,i.kt)("li",{parentName:"ul"},"observer reacts to a change in the state of the observed object"))))),(0,i.kt)("li",{parentName:"ul"},"according to the DIP, the relationship between the modules should be as the following",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"high and low level modules must depend on abstractions",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"modules do not need to work with specific modules, they can work with any entity that implements the specified interface, which reduces coupling"))))),(0,i.kt)("li",{parentName:"ul"},"The Dependency Inversion Principle introduces an interface abstraction between higher-level and lower-level software components to remove the dependencies between them")),(0,i.kt)("h3",{id:"when-to-allocate-an-interface-from-a-class"},"When to allocate an interface from a class?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Class is an implementation of some strategy and will be used in a polymorphic manner"),(0,i.kt)("li",{parentName:"ul"},"Class is used to work with external environments (files, sockets, configuration, etc.)")),(0,i.kt)("h3",{id:"when-not-to-allocate-a-class-interface"},"When not to allocate a class interface?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Class is an immutable Value Object or Data Object"),(0,i.kt)("li",{parentName:"ul"},"Class has stable behavior (does not work with the external environment)")))}d.isMDXComponent=!0}}]);