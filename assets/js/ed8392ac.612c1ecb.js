"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[566],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),m=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=m(e.components);return r.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=m(t),c=a,h=d["".concat(o,".").concat(c)]||d[c]||p[c]||i;return t?r.createElement(h,s(s({ref:n},u),{},{components:t})):r.createElement(h,s({ref:n},u))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var m=2;m<i;m++)s[m]=t[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5199:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var r=t(7462),a=(t(7294),t(3905));const i={},s="Missing Number",l={unversionedId:"interviewPrep/algorithms_and_techniques/bitwise/missingNumber",id:"interviewPrep/algorithms_and_techniques/bitwise/missingNumber",title:"Missing Number",description:"3 ways of solving this problem",source:"@site/docs/interviewPrep/algorithms_and_techniques/bitwise/missingNumber.md",sourceDirName:"interviewPrep/algorithms_and_techniques/bitwise",slug:"/interviewPrep/algorithms_and_techniques/bitwise/missingNumber",permalink:"/docs/interviewPrep/algorithms_and_techniques/bitwise/missingNumber",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/bitwise/missingNumber.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ASP.NET CORE terminal guide",permalink:"/docs/fullstack/aspDotNetCore_SDK"},next:{title:"Divide & Conquer algorithms",permalink:"/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/"}},o={},m=[{value:"3 ways of solving this problem",id:"3-ways-of-solving-this-problem",level:2},{value:"XOR (simple, O(n) time and O(1) space)",id:"xor-simple-on-time-and-o1-space",level:3},{value:"SUM",id:"sum",level:3},{value:"formula: missing number = <code>sum of numbers from range - sum of all actual numbers in array</code>",id:"formula-missing-number--sum-of-numbers-from-range---sum-of-all-actual-numbers-in-array",level:4},{value:"find total sum mathematical formula = <code>(n * (n + 1)) / 2</code>",id:"find-total-sum-mathematical-formula--n--n--1--2",level:4},{value:"Binary Search (good only if array is already sorted)",id:"binary-search-good-only-if-array-is-already-sorted",level:3}],u={toc:m};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"missing-number"},"Missing Number"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Given an array nums containing n distinct numbers in the range [0, n],\nreturn the only number in the range that is missing from the array.\n\nExample 1:\nInput: nums = [3,0,1]\nOutput: 2\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3].\n2 is the missing number in the range since it does not appear in nums.\n\nExample 2:\nInput: nums = [0,1]\nOutput: 2\nExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2].\n2 is the missing number in the range since it does not appear in nums.\n\nExample 3:\nInput: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\nExplanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9].\n8 is the missing number in the range since it does not appear in nums.\n \nConstraints:\nn == nums.length\n1 <= n <= 104\n0 <= nums[i] <= n\nAll the numbers of nums are unique.\n \nFollow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?\n")),(0,a.kt)("h2",{id:"3-ways-of-solving-this-problem"},"3 ways of solving this problem"),(0,a.kt)("h3",{id:"xor-simple-on-time-and-o1-space"},"XOR (simple, O(n) time and O(1) space)"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"A"),(0,a.kt)("th",{parentName:"tr",align:null},"B"),(0,a.kt)("th",{parentName:"tr",align:null},"result"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0"),(0,a.kt)("td",{parentName:"tr",align:null},"0"),(0,a.kt)("td",{parentName:"tr",align:null},"0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0"),(0,a.kt)("td",{parentName:"tr",align:null},"1"),(0,a.kt)("td",{parentName:"tr",align:null},"1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"1"),(0,a.kt)("td",{parentName:"tr",align:null},"0"),(0,a.kt)("td",{parentName:"tr",align:null},"1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"1"),(0,a.kt)("td",{parentName:"tr",align:null},"1"),(0,a.kt)("td",{parentName:"tr",align:null},"0")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"function missingNum(nums) {\n  const n = nums.length;\n  let res = 0;\n\n  for (let i=0; i<n; i++) {\n    res ^= i ^ nums[i];  // xor number from range and xor number from array element value\n  }\n  res ^= n;  // xor the last range value\n  return res;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"input: [3, 0, 1]\n\nthis will give the following:\ninitial value ^ range value ^ array element value\n      0       ^       0     ^         3               | when res = 0, i = 0, nums[0] = 3\n              ^       1     ^         0               | when res = 3, i = 1, nums[0] = 0\n              ^       2     ^         1               | when res = 2, i = 2, nums[0] = 3\n              ^       3                               | when res = 1, n = 3\n              \nwhich is the same as 0 ^ 0 ^ 3 ^ 1 ^ 0 ^ 2 ^ 1 ^ 3\n\nsince A ^ A = 0, we can remove numbers that have 1 duplicate resulting in the following:\n\ninitial: 0 ^ 0 ^ 3 ^ 1 ^ 0 ^ 2 ^ 1 ^ 3\nstep 1: 3 ^ 1 ^ 0 ^ 2 ^ 1 ^ 3\nstep 2: 1 ^ 0 ^ 2 ^ 1\nstep 3: 0 ^ 2\nany value that xor with 0 gives you back that value (A ^ 0 = A)\n\ntherefore, the missing number is 2\n")),(0,a.kt)("h3",{id:"sum"},"SUM"),(0,a.kt)("h4",{id:"formula-missing-number--sum-of-numbers-from-range---sum-of-all-actual-numbers-in-array"},"formula: missing number = ",(0,a.kt)("inlineCode",{parentName:"h4"},"sum of numbers from range - sum of all actual numbers in array")),(0,a.kt)("h4",{id:"find-total-sum-mathematical-formula--n--n--1--2"},"find total sum mathematical formula = ",(0,a.kt)("inlineCode",{parentName:"h4"},"(n * (n + 1)) / 2")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"function missingNum(nums) {\n  let sum = 0;\n  for (let i=0; i<nums.length; i++) {\n    sum += i - nums[i];  // adds number from range and minus number from array element value\n  }\n  sum += nums.length;  // adds the last number from range\n  return sum;\n}\n")),(0,a.kt)("h3",{id:"binary-search-good-only-if-array-is-already-sorted"},"Binary Search (good only if array is already sorted)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"function missingNum(nums) {\n  let left = 0;\n  let right = nums.length;\n  let mid = Math.floor((left + right) / 2);\n\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (nums[mid] > mid) {\n      right = mid;\n    } else {\n      left = mid + 1;\n    }\n  }\n  return left;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"input: [0, 1, 2, 3, 4, 5, 6, 7, 9]\n\ninitial left is 0, right is 9, mid is 4\nnums[4] is 4 and is not more than mid 4,\ntherefore left is changed to 4 + 1 = 5\n\nwhen left is 5, right is 9, mid is 7\nnums[7] is 7 and is not more than mid 7,\ntherefore left is changed to 7 + 1 = 8\n\nwhen left is 8, right is 9, mid is 8\nnums[8] is 9 and is more than mid 8,\ntherefore right is 8\nsince left 8 is no longer less than right 8\nreturn left value of 8 as it is the missing number\n")))}p.isMDXComponent=!0}}]);