"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[5142],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},33559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={},s="Template Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Template/swift/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Template/swift/readme",title:"Template Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Template/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Template/swift/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/python/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/swift/example2"}},l={},c=[],p={toc:c};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"template-example"},"Template Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'/// Template Method Design Pattern\n///\n/// Intent: Defines the skeleton of an algorithm in the superclass but lets\n/// subclasses override specific steps of the algorithm without changing its\n/// structure.\n\nimport XCTest\n\n\n/// The Abstract Protocol and its extension defines a template method that\n/// contains a skeleton of some algorithm, composed of calls to (usually)\n/// abstract primitive operations.\n///\n/// Concrete subclasses should implement these operations, but leave the\n/// template method itself intact.\nprotocol AbstractProtocol {\n\n    /// The template method defines the skeleton of an algorithm.\n    func templateMethod()\n\n    /// These operations already have implementations.\n    func baseOperation1()\n\n    func baseOperation2()\n\n    func baseOperation3()\n\n    /// These operations have to be implemented in subclasses.\n    func requiredOperations1()\n    func requiredOperation2()\n\n    /// These are "hooks." Subclasses may override them, but it\'s not mandatory\n    /// since the hooks already have default (but empty) implementation. Hooks\n    /// provide additional extension points in some crucial places of the\n    /// algorithm.\n    func hook1()\n    func hook2()\n}\n\nextension AbstractProtocol {\n\n    func templateMethod() {\n        baseOperation1()\n        requiredOperations1()\n        baseOperation2()\n        hook1()\n        requiredOperation2()\n        baseOperation3()\n        hook2()\n    }\n\n    /// These operations already have implementations.\n    func baseOperation1() {\n        print("AbstractProtocol says: I am doing the bulk of the work\\n")\n    }\n\n    func baseOperation2() {\n        print("AbstractProtocol says: But I let subclasses override some operations\\n")\n    }\n\n    func baseOperation3() {\n        print("AbstractProtocol says: But I am doing the bulk of the work anyway\\n")\n    }\n\n    func hook1() {}\n    func hook2() {}\n}\n\n/// Concrete classes have to implement all abstract operations of the base\n/// class. They can also override some operations with a default implementation.\nclass ConcreteClass1: AbstractProtocol {\n\n    func requiredOperations1() {\n        print("ConcreteClass1 says: Implemented Operation1\\n")\n    }\n\n    func requiredOperation2() {\n        print("ConcreteClass1 says: Implemented Operation2\\n")\n    }\n\n    func hook2() {\n        print("ConcreteClass1 says: Overridden Hook2\\n")\n    }\n}\n\n/// Usually, concrete classes override only a fraction of base class\'\n/// operations.\nclass ConcreteClass2: AbstractProtocol {\n\n    func requiredOperations1() {\n        print("ConcreteClass2 says: Implemented Operation1\\n")\n    }\n\n    func requiredOperation2() {\n        print("ConcreteClass2 says: Implemented Operation2\\n")\n    }\n\n    func hook1() {\n        print("ConcreteClass2 says: Overridden Hook1\\n")\n    }\n}\n\n/// The client code calls the template method to execute the algorithm. Client\n/// code does not have to know the concrete class of an object it works with, as\n/// long as it works with objects through the interface of their base class.\nclass Client {\n    // ...\n    static func clientCode(use object: AbstractProtocol) {\n        // ...\n        object.templateMethod()\n        // ...\n    }\n    // ...\n}\n\n\n/// Let\'s see how it all works together.\nclass TemplateMethodConceptual: XCTestCase {\n\n    func test() {\n\n        print("Same client code can work with different subclasses:\\n")\n        Client.clientCode(use: ConcreteClass1())\n\n        print("\\nSame client code can work with different subclasses:\\n")\n        Client.clientCode(use: ConcreteClass2())\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Same client code can work with different subclasses:\n\nAbstractProtocol says: I am doing the bulk of the work\n\nConcreteClass1 says: Implemented Operation1\n\nAbstractProtocol says: But I let subclasses override some operations\n\nConcreteClass1 says: Implemented Operation2\n\nAbstractProtocol says: But I am doing the bulk of the work anyway\n\nConcreteClass1 says: Overridden Hook2\n\n\nSame client code can work with different subclasses:\n\nAbstractProtocol says: I am doing the bulk of the work\n\nConcreteClass2 says: Implemented Operation1\n\nAbstractProtocol says: But I let subclasses override some operations\n\nConcreteClass2 says: Overridden Hook1\n\nConcreteClass2 says: Implemented Operation2\n\nAbstractProtocol says: But I am doing the bulk of the work anyway\n")))}m.isMDXComponent=!0}}]);