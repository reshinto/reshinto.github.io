"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[34605],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=p(t),u=o,y=f["".concat(s,".").concat(u)]||f[u]||d[u]||i;return t?r.createElement(y,a(a({ref:n},c),{},{components:t})):r.createElement(y,a({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},44952:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(83117),o=(t(67294),t(3905));const i={},a="Example 2",l={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Prototype/python/example2",id:"interviewPrep/designPatterns/Creational_patterns/Prototype/python/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/python/example2.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Prototype/python",slug:"/interviewPrep/designPatterns/Creational_patterns/Prototype/python/example2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/python/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/python/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/python/"},next:{title:"Example 3",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/python/example3"}},s={},p=[],c={toc:p};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"example-2"},"Example 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from copy import deepcopy\n\n\nclass Car:\n    def __init__(self):\n        self.__wheels = list()\n        self.__engine = None\n        self.__body = None\n\n    def setBody(self, body):\n        self.__body = body\n\n    def attachWheel(self, wheel):\n        self.__wheels.append(wheel)\n\n    def setEngine(self, engine):\n        self.__engine = engine\n\n    def specification(self):\n        print("body: %s" % self.__body.shape)\n        print("engine horsepower: %d" % self.__engine.horsepower)\n        print("tire size: %d\\\'" % self.__wheels[0].size)\n\n    def clone(self):\n        return deepcopy(self)\n\n\n# === Car parts ===\nclass Wheel:\n    size = None\n\n\nclass Engine:\n    horsepower = None\n\n\nclass Body:\n    shape = None\n\n\nclass Director:\n    __builder = None\n\n    def setBuilder(self, builder):\n        self.__builder = builder\n\n    # The algorithm for assembling a car\n    def getCar(self):\n        car = Car()\n\n        # First goes the body\n        body = self.__builder.getBody()\n        car.setBody(body)\n\n        # Then engine\n        engine = self.__builder.getEngine()\n        car.setEngine(engine)\n\n        # And four wheels\n        i = 0\n        while i < 4:\n            wheel = self.__builder.getWheel()\n            car.attachWheel(wheel)\n            i += 1\n\n        return car\n\n\nclass BuilderInterface:\n    def getWheel(self): pass\n    def getEngine(self): pass\n    def getBody(self): pass\n\n\nclass JeepBuilder(BuilderInterface):\n    def getWheel(self):\n        wheel = Wheel()\n        wheel.size = 22\n        return wheel\n\n    def getEngine(self):\n        engine = Engine()\n        engine.horsepower = 400\n        return engine\n\n    def getBody(self):\n        body = Body()\n        body.shape = "SUV"\n        return body\n\n\nclass NissanBuilder(BuilderInterface):\n    def getWheel(self):\n        wheel = Wheel()\n        wheel.size = 16\n        return wheel\n\n    def getEngine(self):\n        engine = Engine()\n        engine.horsepower = 100\n        return engine\n\n    def getBody(self):\n        body = Body()\n        body.shape = "hatchback"\n        return body\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from CarBuilderAndPrototype import JeepBuilder, Director\n\n\nd = Director()\nd.setBuilder(JeepBuilder())\njeep = d.getCar()  # check if it is a car\nprint(jeep)\n\njeep.specification()  # check if it is a jeep\n\njeep2 = jeep.clone()\nprint(jeep2)  # check if another similar jeep has been built\n")))}d.isMDXComponent=!0}}]);