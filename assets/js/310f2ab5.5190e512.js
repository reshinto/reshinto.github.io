"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[67658],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=s,y=m["".concat(c,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(y,i(i({ref:t},l),{},{components:n})):r.createElement(y,i({ref:t},l))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48122:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var r=n(83117),s=(n(67294),n(3905));const a={},i="C# Example",o={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Facade/cSharp/readme",id:"interviewPrep/designPatterns/Structural_patterns/Facade/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Facade/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Facade/cSharp",slug:"/interviewPrep/designPatterns/Structural_patterns/Facade/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Facade/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/go/"}},c={},u=[],l={toc:u};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"c-example"},"C# Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'// Facade Design Pattern\n//\n// Intent: Provides a simplified interface to a library, a framework, or any\n// other complex set of classes.\n\nusing System;\n\nnamespace RefactoringGuru.DesignPatterns.Facade.Conceptual\n{\n    // The Facade class provides a simple interface to the complex logic of one\n    // or several subsystems. The Facade delegates the client requests to the\n    // appropriate objects within the subsystem. The Facade is also responsible\n    // for managing their lifecycle. All of this shields the client from the\n    // undesired complexity of the subsystem.\n    public class Facade\n    {\n        protected Subsystem1 _subsystem1;\n\n        protected Subsystem2 _subsystem2;\n\n        public Facade(Subsystem1 subsystem1, Subsystem2 subsystem2)\n        {\n            this._subsystem1 = subsystem1;\n            this._subsystem2 = subsystem2;\n        }\n\n        // The Facade\'s methods are convenient shortcuts to the sophisticated\n        // functionality of the subsystems. However, clients get only to a\n        // fraction of a subsystem\'s capabilities.\n        public string Operation()\n        {\n            string result = "Facade initializes subsystems:\\n";\n            result += this._subsystem1.operation1();\n            result += this._subsystem2.operation1();\n            result += "Facade orders subsystems to perform the action:\\n";\n            result += this._subsystem1.operationN();\n            result += this._subsystem2.operationZ();\n            return result;\n        }\n    }\n\n    // The Subsystem can accept requests either from the facade or client\n    // directly. In any case, to the Subsystem, the Facade is yet another\n    // client, and it\'s not a part of the Subsystem.\n    public class Subsystem1\n    {\n        public string operation1()\n        {\n            return "Subsystem1: Ready!\\n";\n        }\n\n        public string operationN()\n        {\n            return "Subsystem1: Go!\\n";\n        }\n    }\n\n    // Some facades can work with multiple subsystems at the same time.\n    public class Subsystem2\n    {\n        public string operation1()\n        {\n            return "Subsystem2: Get ready!\\n";\n        }\n\n        public string operationZ()\n        {\n            return "Subsystem2: Fire!\\n";\n        }\n    }\n\n\n    class Client\n    {\n        // The client code works with complex subsystems through a simple\n        // interface provided by the Facade. When a facade manages the lifecycle\n        // of the subsystem, the client might not even know about the existence\n        // of the subsystem. This approach lets you keep the complexity under\n        // control.\n        public static void ClientCode(Facade facade)\n        {\n            Console.Write(facade.Operation());\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // The client code may have some of the subsystem\'s objects already\n            // created. In this case, it might be worthwhile to initialize the\n            // Facade with these objects instead of letting the Facade create\n            // new instances.\n            Subsystem1 subsystem1 = new Subsystem1();\n            Subsystem2 subsystem2 = new Subsystem2();\n            Facade facade = new Facade(subsystem1, subsystem2);\n            Client.ClientCode(facade);\n        }\n    }\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Facade initializes subsystems:\nSubsystem1: Ready!\nSubsystem2: Get ready!\nFacade orders subsystems to perform the action:\nSubsystem1: Go!\nSubsystem2: Fire!\n")))}p.isMDXComponent=!0}}]);