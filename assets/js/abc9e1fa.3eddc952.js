"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[4300],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),h=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=h(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=h(r),d=i,g=p["".concat(l,".").concat(d)]||p[d]||u[d]||s;return r?n.createElement(g,o(o({ref:t},c),{},{components:r})):n.createElement(g,o({ref:t},c))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=r.length,o=new Array(s);o[0]=p;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var h=2;h<s;h++)o[h]=r[h];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8370:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>h});var n=r(7462),i=(r(7294),r(3905));const s={},o="Class Photos",a={unversionedId:"interviewPrep/codingTests/easy/greedyAlgorithms/classPhotos",id:"interviewPrep/codingTests/easy/greedyAlgorithms/classPhotos",title:"Class Photos",description:"It's photo day at the local school, and you're the photographer assigned to",source:"@site/docs/interviewPrep/codingTests/easy/greedyAlgorithms/classPhotos.md",sourceDirName:"interviewPrep/codingTests/easy/greedyAlgorithms",slug:"/interviewPrep/codingTests/easy/greedyAlgorithms/classPhotos",permalink:"/docs/interviewPrep/codingTests/easy/greedyAlgorithms/classPhotos",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/codingTests/easy/greedyAlgorithms/classPhotos.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Depth-first Search",permalink:"/docs/interviewPrep/codingTests/easy/graphs/depth-firstSearch"},next:{title:"Minimum Waiting Time",permalink:"/docs/interviewPrep/codingTests/easy/greedyAlgorithms/minimumWaitingTime"}},l={},h=[],c={toc:h};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"class-photos"},"Class Photos"),(0,i.kt)("p",null,"It's photo day at the local school, and you're the photographer assigned to\ntake class photos. The class that you'll be photographing has an even number\nof students, and all these students are wearing red or blue shirts. In fact,\nexactly half of the class is wearing red shirts, and the other half is wearing\nblue shirts. You're responsible for arranging the students in two rows before\ntaking the photo. Each row should contain the same number of the students and\nshould adhere to the following guidelines:"),(0,i.kt)("p",null,"All students wearing red shirts must be in the same row."),(0,i.kt)("p",null,"All students wearing blue shirts must be in the same row."),(0,i.kt)("p",null,"Each student in the back row must be strictly taller than the student\ndirectly in front of them in the front row."),(0,i.kt)("p",null,"You're given two input arrays: one containing the heights of all the students\nwith red shirts and another one containing the heights of all the students\nwith blue shirts. These arrays will always have the same length, and each\nheight will be a positive integer. Write a function that returns whether or\nnot a class photo that follows the stated guidelines can be taken."),(0,i.kt)("p",null,"Note: you can assume that each class has at least 2 students."),(0,i.kt)("p",null,"Sample Input\n",(0,i.kt)("inlineCode",{parentName:"p"},"redShirtHeights = [5, 8, 1, 3, 4]"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"blueShirtHeights = [6, 9, 2, 4, 5]")),(0,i.kt)("p",null,"Sample Output\ntrue\n",(0,i.kt)("inlineCode",{parentName:"p"},"// Place all students with blue shirts in the back row.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def classPhotos(redShirtHeights, blueShirtHeights):\n  # Write your code here.\n  redShirtHeights.sort()\n  blueShirtHeights.sort()\n  checkR = 0\n  checkB = 0\n  for i in range(len(redShirtHeights)):\n    if checkR and checkB:\n      return False\n    if redShirtHeights[i] > blueShirtHeights[i]:\n      checkR += 1\n    elif redShirtHeights[i] < blueShirtHeights[i]:\n      checkB += 1\n    elif redShirtHeights[i] == blueShirtHeights[i]:\n      return False\n  return True\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function classPhotos(redShirtHeights, blueShirtHeights) {\n  // Write your code here.\n  redShirtHeights.sort((a, b) => a - b);\n  blueShirtHeights.sort((a, b) => a - b);\n  let checkR = 0;\n  let checkB = 0;\n  for (let i = 0; i < redShirtHeights.length; i++) {\n    if (checkR && checkB) {\n      return false;\n    }\n    if (redShirtHeights[i] === blueShirtHeights[i]) {\n      return false;\n    } else if (redShirtHeights[i] > blueShirtHeights[i]) {\n      checkR += 1;\n    } else if (redShirtHeights[i] < blueShirtHeights[i]) {\n      checkB += 1;\n    }\n  }\n  return true;\n}\n")))}u.isMDXComponent=!0}}]);