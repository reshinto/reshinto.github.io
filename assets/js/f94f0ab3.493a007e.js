"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[76837],{3905:(e,t,n)=>{n.d(t,{Zo:()=>y,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},y=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),h=c(n),d=a,f=h["".concat(l,".").concat(d)]||h[d]||p[d]||i;return n?r.createElement(f,s(s({ref:t},y),{},{components:n})):r.createElement(f,s({ref:t},y))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},82332:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(83117),a=(n(67294),n(3905));const i={},s="Python Example",o={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Flyweight/python/readme",id:"interviewPrep/designPatterns/Structural_patterns/Flyweight/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Flyweight/python",slug:"/interviewPrep/designPatterns/Structural_patterns/Flyweight/python/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/javascript/"},next:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/swift/"}},l={},c=[],y={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python-example"},"Python Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'"""\nFlyweight Design Pattern\n\nIntent: Lets you fit more objects into the available amount of RAM by sharing\ncommon parts of state between multiple objects, instead of keeping all of the\ndata in each object.\n"""\n\n\nimport json\nfrom typing import Dict\n\n\nclass Flyweight():\n    """\n    The Flyweight stores a common portion of the state (also called intrinsic\n    state) that belongs to multiple real business entities. The Flyweight\n    accepts the rest of the state (extrinsic state, unique for each entity) via\n    its method parameters.\n    """\n\n    def __init__(self, shared_state: str) -> None:\n        self._shared_state = shared_state\n\n    def operation(self, unique_state: str) -> None:\n        s = json.dumps(self._shared_state)\n        u = json.dumps(unique_state)\n        print(f"Flyweight: Displaying shared ({s}) and unique ({u}) state.", end="")\n\n\nclass FlyweightFactory():\n    """\n    The Flyweight Factory creates and manages the Flyweight objects. It ensures\n    that flyweights are shared correctly. When the client requests a flyweight,\n    the factory either returns an existing instance or creates a new one, if it\n    doesn\'t exist yet.\n    """\n\n    _flyweights: Dict[str, Flyweight] = {}\n\n    def __init__(self, initial_flyweights: Dict) -> None:\n        for state in initial_flyweights:\n            self._flyweights[self.get_key(state)] = Flyweight(state)\n\n    def get_key(self, state: Dict) -> str:\n        """\n        Returns a Flyweight\'s string hash for a given state.\n        """\n\n        return "_".join(sorted(state))\n\n    def get_flyweight(self, shared_state: Dict) -> Flyweight:\n        """\n        Returns an existing Flyweight with a given state or creates a new one.\n        """\n\n        key = self.get_key(shared_state)\n\n        if not self._flyweights.get(key):\n            print("FlyweightFactory: Can\'t find a flyweight, creating new one.")\n            self._flyweights[key] = Flyweight(shared_state)\n        else:\n            print("FlyweightFactory: Reusing existing flyweight.")\n\n        return self._flyweights[key]\n\n    def list_flyweights(self) -> None:\n        count = len(self._flyweights)\n        print(f"FlyweightFactory: I have {count} flyweights:")\n        print("\\n".join(map(str, self._flyweights.keys())), end="")\n\n\ndef add_car_to_police_database(\n    factory: FlyweightFactory, plates: str, owner: str,\n    brand: str, model: str, color: str\n) -> None:\n    print("\\n\\nClient: Adding a car to database.")\n    flyweight = factory.get_flyweight([brand, model, color])\n    # The client code either stores or calculates extrinsic state and passes it\n    # to the flyweight\'s methods.\n    flyweight.operation([plates, owner])\n\n\nif __name__ == "__main__":\n    """\n    The client code usually creates a bunch of pre-populated flyweights in the\n    initialization stage of the application.\n    """\n\n    factory = FlyweightFactory([\n        ["Chevrolet", "Camaro2018", "pink"],\n        ["Mercedes Benz", "C300", "black"],\n        ["Mercedes Benz", "C500", "red"],\n        ["BMW", "M5", "red"],\n        ["BMW", "X6", "white"],\n    ])\n\n    factory.list_flyweights()\n\n    add_car_to_police_database(\n        factory, "CL234IR", "James Doe", "BMW", "M5", "red")\n\n    add_car_to_police_database(\n        factory, "CL234IR", "James Doe", "BMW", "X1", "red")\n\n    print("\\n")\n\n    factory.list_flyweights()\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'FlyweightFactory: I have 5 flyweights:\nCamaro2018_Chevrolet_pink\nC300_Mercedes Benz_black\nC500_Mercedes Benz_red\nBMW_M5_red\nBMW_X6_white\n\nClient: Adding a car to database.\nFlyweightFactory: Reusing existing flyweight.\nFlyweight: Displaying shared (["BMW", "M5", "red"]) and unique (["CL234IR", "James Doe"]) state.\n\nClient: Adding a car to database.\nFlyweightFactory: Can\'t find a flyweight, creating new one.\nFlyweight: Displaying shared (["BMW", "X1", "red"]) and unique (["CL234IR", "James Doe"]) state.\n\nFlyweightFactory: I have 6 flyweights:\nCamaro2018_Chevrolet_pink\nC300_Mercedes Benz_black\nC500_Mercedes Benz_red\nBMW_M5_red\nBMW_X6_white\nBMW_X1_red\n')))}p.isMDXComponent=!0}}]);