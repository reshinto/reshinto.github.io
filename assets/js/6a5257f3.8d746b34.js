"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[31155],{3905:(t,e,r)=>{r.d(e,{Zo:()=>u,kt:()=>h});var n=r(67294);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function c(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?c(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},c=Object.keys(t);for(n=0;n<c.length;n++)r=c[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(n=0;n<c.length;n++)r=c[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var i=n.createContext({}),l=function(t){var e=n.useContext(i),r=e;return t&&(r="function"==typeof t?t(e):a(a({},e),t)),r},u=function(t){var e=l(t.components);return n.createElement(i.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,o=t.mdxType,c=t.originalType,i=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),d=l(r),h=o,f=d["".concat(i,".").concat(h)]||d[h]||p[h]||c;return r?n.createElement(f,a(a({ref:e},u),{},{components:r})):n.createElement(f,a({ref:e},u))}));function h(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var c=r.length,a=new Array(c);a[0]=d;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s.mdxType="string"==typeof t?t:o,a[1]=s;for(var l=2;l<c;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},49149:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var n=r(83117),o=(r(67294),r(3905));const c={},a="TypeScript Example",s={unversionedId:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/typescript/readme",id:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/typescript",slug:"/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/typescript/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/example2"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/typescript/example2"}},i={},l=[],u={toc:l};function p(t){let{components:e,...r}=t;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Abstract Factory Design Pattern\n *\n * Intent: Lets you produce families of related objects without specifying their\n * concrete classes.\n */\n\n/**\n * The Abstract Factory interface declares a set of methods that return\n * different abstract products. These products are called a family and are\n * related by a high-level theme or concept. Products of one family are usually\n * able to collaborate among themselves. A family of products may have several\n * variants, but the products of one variant are incompatible with products of\n * another.\n */\ninterface AbstractFactory {\n  createProductA(): AbstractProductA;\n\n  createProductB(): AbstractProductB;\n}\n\n/**\n * Concrete Factories produce a family of products that belong to a single\n * variant. The factory guarantees that resulting products are compatible. Note\n * that signatures of the Concrete Factory\'s methods return an abstract product,\n * while inside the method a concrete product is instantiated.\n */\nclass ConcreteFactory1 implements AbstractFactory {\n  public createProductA(): AbstractProductA {\n    return new ConcreteProductA1();\n  }\n\n  public createProductB(): AbstractProductB {\n    return new ConcreteProductB1();\n  }\n}\n\n/**\n * Each Concrete Factory has a corresponding product variant.\n */\nclass ConcreteFactory2 implements AbstractFactory {\n  public createProductA(): AbstractProductA {\n    return new ConcreteProductA2();\n  }\n\n  public createProductB(): AbstractProductB {\n    return new ConcreteProductB2();\n  }\n}\n\n/**\n * Each distinct product of a product family should have a base interface. All\n * variants of the product must implement this interface.\n */\ninterface AbstractProductA {\n  usefulFunctionA(): string;\n}\n\n/**\n * These Concrete Products are created by corresponding Concrete Factories.\n */\nclass ConcreteProductA1 implements AbstractProductA {\n  public usefulFunctionA(): string {\n    return "The result of the product A1.";\n  }\n}\n\nclass ConcreteProductA2 implements AbstractProductA {\n  public usefulFunctionA(): string {\n    return "The result of the product A2.";\n  }\n}\n\n/**\n * Here\'s the the base interface of another product. All products can interact\n * with each other, but proper interaction is possible only between products of\n * the same concrete variant.\n */\ninterface AbstractProductB {\n  /**\n   * Product B is able to do its own thing...\n   */\n  usefulFunctionB(): string;\n\n  /**\n   * ...but it also can collaborate with the ProductA.\n   *\n   * The Abstract Factory makes sure that all products it creates are of the\n   * same variant and thus, compatible.\n   */\n  anotherUsefulFunctionB(collaborator: AbstractProductA): string;\n}\n\n/**\n * These Concrete Products are created by corresponding Concrete Factories.\n */\nclass ConcreteProductB1 implements AbstractProductB {\n  public usefulFunctionB(): string {\n    return "The result of the product B1.";\n  }\n\n  /**\n   * The variant, Product B1, is only able to work correctly with the variant,\n   * Product A1. Nevertheless, it accepts any instance of AbstractProductA as\n   * an argument.\n   */\n  public anotherUsefulFunctionB(collaborator: AbstractProductA): string {\n    const result = collaborator.usefulFunctionA();\n    return `The result of the B1 collaborating with the (${result})`;\n  }\n}\n\nclass ConcreteProductB2 implements AbstractProductB {\n  public usefulFunctionB(): string {\n    return "The result of the product B2.";\n  }\n\n  /**\n   * The variant, Product B2, is only able to work correctly with the variant,\n   * Product A2. Nevertheless, it accepts any instance of AbstractProductA as\n   * an argument.\n   */\n  public anotherUsefulFunctionB(collaborator: AbstractProductA): string {\n    const result = collaborator.usefulFunctionA();\n    return `The result of the B2 collaborating with the (${result})`;\n  }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * The client code works with factories and products only through abstract\n * types: AbstractFactory and AbstractProduct. This lets you pass any factory or\n * product subclass to the client code without breaking it.\n */\nfunction clientCode(factory: AbstractFactory) {\n  const productA = factory.createProductA();\n  const productB = factory.createProductB();\n\n  console.log(productB.usefulFunctionB());\n  console.log(productB.anotherUsefulFunctionB(productA));\n}\n\n/**\n * The client code can work with any concrete factory class.\n */\nconsole.log("Client: Testing client code with the first factory type...");\nclientCode(new ConcreteFactory1());\n\nconsole.log("");\n\nconsole.log(\n  "Client: Testing the same client code with the second factory type..."\n);\nclientCode(new ConcreteFactory2());\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Client: Testing client code with the first factory type...\nThe result of the product B1.\nThe result of the B1 collaborating with the (The result of the product A1.)\n\nClient: Testing the same client code with the second factory type...\nThe result of the product B2.\nThe result of the B2 collaborating with the (The result of the product A2.)\n")))}p.isMDXComponent=!0}}]);