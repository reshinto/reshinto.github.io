"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[80876],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>v});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),v=o,h=d["".concat(l,".").concat(v)]||d[v]||u[v]||a;return r?n.createElement(h,i(i({ref:t},p),{},{components:r})):n.createElement(h,i({ref:t},p))}));function v(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},63606:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(83117),o=(r(67294),r(3905));const a={},i="JavaScript Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/javascript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/javascript/readme",title:"JavaScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/javascript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/javascript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Iterator/javascript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/javascript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/javascript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/java/"},next:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/python/"}},l={},c=[],p={toc:c};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"javascript-example"},"JavaScript Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Concrete Iterators implement various traversal algorithms. These classes\n * store the current traversal position at all times.\n */\nclass AlphabeticalOrderIterator {\n  constructor(collection, reverse = false) {\n    this.collection = collection;\n    /**\n     * This variable indicates the traversal direction.\n     */\n    this.reverse = reverse;\n    /**\n     * Stores the current traversal position. An iterator may have a lot of\n     * other fields for storing iteration state, especially when it is supposed\n     * to work with a particular kind of collection.\n     */\n    this.position = 0;\n\n    if (reverse) {\n      this.position = collection.getCount() - 1;\n    }\n  }\n\n  rewind() {\n    this.position = this.reverse ? this.collection.getCount() - 1 : 0;\n  }\n\n  current() {\n    return this.collection.getItems()[this.position];\n  }\n\n  key() {\n    return this.position;\n  }\n\n  next() {\n    const item = this.collection.getItems()[this.position];\n    this.position += this.reverse ? -1 : 1;\n    return item;\n  }\n\n  valid() {\n    if (this.reverse) {\n      return this.position >= 0;\n    }\n\n    return this.position < this.collection.getCount();\n  }\n}\n\nmodule.exports = AlphabeticalOrderIterator;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const AlphabeticalOrderIterator = require("./AlphabeticalOrderIterator");\n\n/**\n * Concrete Collections provide one or several methods for retrieving fresh\n * iterator instances, compatible with the collection class.\n */\nclass WordsCollection {\n  constructor() {\n    this.items = [];\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  getCount() {\n    return this.items.length;\n  }\n\n  addItem(item) {\n    this.items.push(item);\n  }\n\n  getIterator() {\n    return new AlphabeticalOrderIterator(this);\n  }\n\n  getReverseIterator() {\n    return new AlphabeticalOrderIterator(this, true);\n  }\n}\n\nmodule.exports = WordsCollection;\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const WordsCollection = require("./WordsCollection");\n\n/**\n * The client code may or may not know about the Concrete Iterator or Collection\n * classes, depending on the level of indirection you want to keep in your\n * program.\n */\nconst collection = new WordsCollection();\ncollection.addItem("First");\ncollection.addItem("Second");\ncollection.addItem("Third");\n\nconst iterator = collection.getIterator();\n\nconsole.log("Straight traversal:");\nwhile (iterator.valid()) {\n  console.log(iterator.next());\n}\n\nconsole.log("");\nconsole.log("Reverse traversal:");\nconst reverseIterator = collection.getReverseIterator();\nwhile (reverseIterator.valid()) {\n  console.log(reverseIterator.next());\n}\n')))}u.isMDXComponent=!0}}]);