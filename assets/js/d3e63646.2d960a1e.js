"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[92658],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),p=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,m=d["".concat(o,".").concat(h)]||d[h]||c[h]||r;return n?i.createElement(m,l(l({ref:t},u),{},{components:n})):i.createElement(m,l({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4191:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(83117),a=(n(67294),n(3905));const r={},l="Liskov Substitution Principle (LSP)",s={unversionedId:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/readme",id:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/readme",title:"Liskov Substitution Principle (LSP)",description:"- if S is a subtype of T, then objects of type T may be replaced with objects of type S",source:"@site/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple",slug:"/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TypeScript",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/typescript/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/cSharp/"}},o={},p=[{value:"Contract Rules",id:"contract-rules",level:2},{value:"Preconditions cannot be strengthened in a subtype",id:"preconditions-cannot-be-strengthened-in-a-subtype",level:3},{value:"Postconditions cannot be weakened in a subtype",id:"postconditions-cannot-be-weakened-in-a-subtype",level:3},{value:"Variance Rules",id:"variance-rules",level:2},{value:"There must be covariance of the return types in the subtype",id:"there-must-be-covariance-of-the-return-types-in-the-subtype",level:3},{value:"There must be contravariance of the method arguments in the subtype",id:"there-must-be-contravariance-of-the-method-arguments-in-the-subtype",level:3},{value:"Invariants must be maintained",id:"invariants-must-be-maintained",level:3},{value:"Summary",id:"summary",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"liskov-substitution-principle-lsp"},"Liskov Substitution Principle (LSP)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"if S is a subtype of T, then objects of type T may be replaced with objects of type S",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"which means that every single usage of the parent class should be replaceable with its child class"))),(0,a.kt)("li",{parentName:"ul"},"That requires the objects of your subclasses to behave in the same way as the objects of your superclass",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Clients can reliably use any type or subtype, always expecting consistent behavior or, in other words, that the contract will be kept"),(0,a.kt)("li",{parentName:"ul"},"A simple formulation of the principle is as follows:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"it should be possible to substitute any subtype for base type"))))),(0,a.kt)("li",{parentName:"ul"},"There are several ",(0,a.kt)("inlineCode",{parentName:"li"},"rules")," that must be followed for LSP compliance:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"contract rules")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"variance rules"))))),(0,a.kt)("h2",{id:"contract-rules"},"Contract Rules"),(0,a.kt)("h3",{id:"preconditions-cannot-be-strengthened-in-a-subtype"},"Preconditions cannot be strengthened in a subtype"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Preconditions are defined as all the conditions necessary for a method to run reliably and without fault",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If subclass is replaced with superclass and preconditions are tightened for existing methods, then existing functionality will break"))),(0,a.kt)("li",{parentName:"ul"},"Suppose we have a class for calculating shipping price ShippingCalculator",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This class has ",(0,a.kt)("inlineCode",{parentName:"li"},"calculate()")," method defined, which takes two arguments:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"size and weight and calculates delivery price"))),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"calculate()")," method will not work properly if weight or size provided are less or equal zero"))),(0,a.kt)("li",{parentName:"ul"},"These are preconditions",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Suppose at some point we are given new requirements for shipping service:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"we need to support worldwide delivery that should be done only if weight and size of product we want to deliver are less than 10"))),(0,a.kt)("li",{parentName:"ul"},"We create class ",(0,a.kt)("inlineCode",{parentName:"li"},"WorldWideShipping")," that extends ",(0,a.kt)("inlineCode",{parentName:"li"},"ShippingCalculator")," class and override ",(0,a.kt)("inlineCode",{parentName:"li"},"calculate()")," method based on new requirements"),(0,a.kt)("li",{parentName:"ul"},"Now ",(0,a.kt)("inlineCode",{parentName:"li"},"WorldWideShipping")," does not fulfill ",(0,a.kt)("inlineCode",{parentName:"li"},"ShippingCalculator")," expectations, because it works only with size and weight less than 10"),(0,a.kt)("li",{parentName:"ul"},"As a result, ",(0,a.kt)("inlineCode",{parentName:"li"},"WorldWideShipping")," strengthens preconditions and violates the Liskov substitution principle"),(0,a.kt)("li",{parentName:"ul"},"All clients should now be aware of the new type and treat it as a special case")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'class ShippingCalculator {\n  public calculate(weight: number, size: number, destination: USADestination) {\n    if (weight <= 0 || size <= 0) {\n      throw new Error("Weight and size should be greater than 0");\n    }\n\n    const shippingPrice = weight * size;\n\n    return shippingPrice;\n  }\n}\n\nclass WorldWideShipping extends ShippingCalculator {\n  // correct destination type passed: Destination\n  public calculate(weight: number, size: number, destination: Destination) {\n    // preconditions are strengthened\n    if (weight < 10 && size < 10) {\n      throw new Error("No international shipping for you");\n    }\n\n    return super.calculate(weight, size, destination);\n  }\n}\n')),(0,a.kt)("h3",{id:"postconditions-cannot-be-weakened-in-a-subtype"},"Postconditions cannot be weakened in a subtype"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Postconditions check whether an object is being left in a valid state before a method is returned",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The reason you cannot weaken postconditions is because existing clients might break when a new subclass is introduced"))),(0,a.kt)("li",{parentName:"ul"},"Let us get back to ",(0,a.kt)("inlineCode",{parentName:"li"},"ShippingCalculator.calculate()")," method",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The postcondition is the rule that the delivery cost is always more than 0"),(0,a.kt)("li",{parentName:"ul"},"Suppose our customers decided to bring in free delivery for products which size and weight are less than 1"),(0,a.kt)("li",{parentName:"ul"},"We create class ",(0,a.kt)("inlineCode",{parentName:"li"},"FreeShipping")," and override ",(0,a.kt)("inlineCode",{parentName:"li"},"calculate()")," method based on new requirements"),(0,a.kt)("li",{parentName:"ul"},"In this case, we weakened postconditions compared to the original ones"),(0,a.kt)("li",{parentName:"ul"},"We broke the original logic which assumed that the ",(0,a.kt)("inlineCode",{parentName:"li"},"shippingPrice")," is always a positive number"),(0,a.kt)("li",{parentName:"ul"},"As a result, clients who are sure in original postconditions and who have previously worked with the base class, may break when switching to the subclass"),(0,a.kt)("li",{parentName:"ul"},"Moreover, it will also be required for them to check which instance of the calculator they are working with to handle new requirements")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'class FreeShipping extends ShippingCalculator {\n  // incorrect destination type passed: should be Destination\n  public calculate(\n    weight: number,\n    size: number,\n    destination: TexasDestination\n  ) {\n    if (weight <= 0 || size <= 0) {\n      throw new Error("Weight and size should be greater than 0");\n    }\n\n    // postconditions are weakened\n    const shippingPrice =\n      weight < 1 && size < 1 ? 0 : super.calculate(weight, size, destination);\n\n    return shippingPrice;\n  }\n}\n')),(0,a.kt)("h2",{id:"variance-rules"},"Variance Rules"),(0,a.kt)("h3",{id:"there-must-be-covariance-of-the-return-types-in-the-subtype"},"There must be covariance of the return types in the subtype"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Covariance is when function return values can be changed to subtypes, moving down the hierarchy"),(0,a.kt)("li",{parentName:"ul"},"Suppose we have a base Product class defined with ",(0,a.kt)("inlineCode",{parentName:"li"},"getShippingProvider()")," method which returns an instance of ",(0,a.kt)("inlineCode",{parentName:"li"},"ShippingCalculator")," class",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"We want to introduce a new product phone, that is why we create ",(0,a.kt)("inlineCode",{parentName:"li"},"Phone")," class and extend it from base ",(0,a.kt)("inlineCode",{parentName:"li"},"Product")," class"),(0,a.kt)("li",{parentName:"ul"},"Phones can be delivered worldwide"),(0,a.kt)("li",{parentName:"ul"},"Therefore, ",(0,a.kt)("inlineCode",{parentName:"li"},"getShippingProvider()")," should return an instance of ",(0,a.kt)("inlineCode",{parentName:"li"},"WorldWideShipping")," class"),(0,a.kt)("li",{parentName:"ul"},"Covariance of return types is kept:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getShippingProvider()")," returns an instance of ",(0,a.kt)("inlineCode",{parentName:"li"},"WorldWideShipping")," class, which is subtype of ",(0,a.kt)("inlineCode",{parentName:"li"},"ShippingCalculator")," (moving down to hierarchy)")))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Product {\n  public getShippingProvider(): ShippingCalculator {\n    return new ShippingCalculator();\n  }\n}\n\nclass Phone extends Product {\n  // WorldWideShipping is subtype of ShippingCalculator\n  public getShippingProvider(): WorldWideShipping {\n    return new WorldWideShipping();\n  }\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example of violating the covariance rule of return types in subtype is given below",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"As you can see, we are moving up the hierarchy of classes")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Product {\n  public getShippingProvider(): WorldWideShipping {\n    return new WorldWideShipping();\n  }\n}\n\nclass Phone extends Product {\n  public getShippingProvider(): ShippingCalculator {\n    return new ShippingCalculator();\n  }\n}\n")),(0,a.kt)("h3",{id:"there-must-be-contravariance-of-the-method-arguments-in-the-subtype"},"There must be contravariance of the method arguments in the subtype"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Contravariance is when function arguments can be changed to supertypes, moving up the hierarchy"),(0,a.kt)("li",{parentName:"ul"},"Suppose at some point we decided to deliver products only to the USA and free shipping is possible only to Texas",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"We extend ",(0,a.kt)("inlineCode",{parentName:"li"},"calculate()")," method and pass destination needed to it"),(0,a.kt)("li",{parentName:"ul"},"Contravariance of function arguments is kept in ",(0,a.kt)("inlineCode",{parentName:"li"},"WorldWideShipping")," class, but not in ",(0,a.kt)("inlineCode",{parentName:"li"},"FreeShipping")," class"),(0,a.kt)("li",{parentName:"ul"},"Destination should be an instance of ",(0,a.kt)("inlineCode",{parentName:"li"},"Destination")," class in ",(0,a.kt)("inlineCode",{parentName:"li"},"FreeShipping.calculate()")," method")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Destination {}\nclass USADestination extends Destination {}\nclass TexasDestination extends USADestination {}\n\nclass ShippingCalculator {\n  public calculate(weight: number, size: number, destination: USADestination) {\n    // calculate\n  }\n}\n\nclass WorldWideShipping extends ShippingCalculator {\n  // correct destination type passed: Destination\n  public calculate(weight: number, size: number, destination: Destination) {\n    // calculate\n  }\n}\n\nclass FreeShipping extends ShippingCalculator {\n  // incorrect destination type passed: should be Destination\n  public calculate(\n    weight: number,\n    size: number,\n    destination: TexasDestination\n  ) {\n    // calculate\n  }\n}\n")),(0,a.kt)("h3",{id:"invariants-must-be-maintained"},"Invariants must be maintained"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A data invariant is a state that remains true for the entire lifetime of an object",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Data invariants refer to the expected internal state of an object"),(0,a.kt)("li",{parentName:"ul"},"Whenever a new subclass is created, it must continue to honor all the data invariants that were part of the base class"),(0,a.kt)("li",{parentName:"ul"},"The violation of this principle is easy to introduce because subclasses have a lot of freedom to introduce new ways of changing previously private data"))),(0,a.kt)("li",{parentName:"ul"},"A list of users with unique emails can be an example of a data invariant",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Let us have a look at ",(0,a.kt)("inlineCode",{parentName:"li"},"Users.add()")," method"),(0,a.kt)("li",{parentName:"ul"},"By adding a simple guard condition to the method, we prevented adding an invalid value and preserved the data invariant"),(0,a.kt)("li",{parentName:"ul"},"In ",(0,a.kt)("inlineCode",{parentName:"li"},"NotUniqueUsers.add()")," method we violate the parent class invariants, since we give the opportunity to add non-unique values to the collection of users"),(0,a.kt)("li",{parentName:"ul"},"Data invariants must be persisted throughout the hierarchy of classes"),(0,a.kt)("li",{parentName:"ul"},"Every class in the chain of inheritance must fulfill the invariants of all its heirs, otherwise no one can guarantee the correctness of the behavior")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class User {\n  constructor(private email: string) {}\n\n  hasSameEmail(other: User): boolean {\n    return other.email === this.email;\n  }\n}\n\nclass Users {\n  private users: User[] = [];\n\n  public add(user: User): boolean {\n    if (this.users.some(user.hasSameEmail.bind(user))) {\n      return false;\n    }\n\n    this.users.push(user);\n\n    return true;\n  }\n}\n\nclass NotUniqueUsers extends Users {\n  private collection: User[] = [];\n\n  public add(user: User): boolean {\n    this.collection.push(user);\n\n    return true;\n  }\n}\n")),(0,a.kt)("h3",{id:"summary"},"Summary"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"essence of LSP"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"design entities so that their descendants do not conflict with the underlying behavior",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"the behavior of inheritors should be expected for functions that use the base class"))),(0,a.kt)("li",{parentName:"ul"},"design entities so that their descendants can be substituted for 1 another without changing the function that uses them",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"the general interface should be such that in the classes that implement it, the preconditions are not stronger, and the postconditions are not weaker"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"why contract programming is useful from LSP point of view"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"contracts prevent descendants from developing behavior that contradicts the behavior of the underlying entity",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"postconditions cannot be weakened in a subclass"))),(0,a.kt)("li",{parentName:"ul"},"contracts define the behavior of the underlying entity that its descendants must follow",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"preconditions cannot be strengthened in a subclass"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In case of not following LSP:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Inheritance hierarchies will lead to confusion",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"So, passing the subclass instance instead of base class into the method will result in a weird behavior of the existing code"))),(0,a.kt)("li",{parentName:"ul"},"Unit tests for base class will never pass for subclasses")))))}c.isMDXComponent=!0}}]);