"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9624],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=n,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return r?a.createElement(h,o(o({ref:t},p),{},{components:r})):a.createElement(h,o({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},28294:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=r(87462),n=(r(67294),r(3905));const i={},o="Creational Patterns",l={unversionedId:"interviewPrep/designPatterns/Creational_patterns/readme",id:"interviewPrep/designPatterns/Creational_patterns/readme",title:"Creational Patterns",description:"- deal with creation (construction) of objects",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns",slug:"/interviewPrep/designPatterns/Creational_patterns/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/typescript/"},next:{title:"Abstract Factory",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/"}},s={},c=[{value:"Abstract Factory",id:"abstract-factory",level:3},{value:"Builder",id:"builder",level:3},{value:"Factory Method",id:"factory-method",level:3},{value:"Prototype",id:"prototype",level:3},{value:"Singleton",id:"singleton",level:3}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"creational-patterns"},"Creational Patterns"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"deal with creation (construction) of objects"),(0,n.kt)("li",{parentName:"ul"},"explicit (calling an constructor) vs implicit (Dependency Injection, reflection, etc.)"),(0,n.kt)("li",{parentName:"ul"},"wholesale (single statement) vs piecewise (step by step)"),(0,n.kt)("li",{parentName:"ul"},"Ensures that your system is written in terms of interfaces, not implementations"),(0,n.kt)("li",{parentName:"ul"},"Class: Defer some part of object creation to subclasses",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Factory Method"))),(0,n.kt)("li",{parentName:"ul"},"Object: Defer some part of object creation to another object",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Abstract Factory"),(0,n.kt)("li",{parentName:"ul"},"Builder"),(0,n.kt)("li",{parentName:"ul"},"Prototype"),(0,n.kt)("li",{parentName:"ul"},"Singleton"))),(0,n.kt)("li",{parentName:"ul"},"When to use:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"When the system should be independent of how its objects and products are created"),(0,n.kt)("li",{parentName:"ul"},"A set of related objects is designed to be used together"),(0,n.kt)("li",{parentName:"ul"},"Hiding the implementation of a product and only revealing its interface")))),(0,n.kt)("h3",{id:"abstract-factory"},(0,n.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/"},"Abstract Factory")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"factory of factories"),(0,n.kt)("li",{parentName:"ul"},"Provide an interface for creating families of related or dependent objects without specifying their concrete classes"),(0,n.kt)("li",{parentName:"ul"},"As long as your code creates objects via this interface, you don't have to worry about creating the wrong variant of a product which doesn't match the products already created by your app"),(0,n.kt)("li",{parentName:"ul"},"Deal with object relationships, which can be changed at run time and are more dynamic"),(0,n.kt)("li",{parentName:"ul"},"Almost all patterns use inheritance to some extent"),(0,n.kt)("li",{parentName:"ul"},"an alternative to Prototype"),(0,n.kt)("li",{parentName:"ul"},"Design patterns can address the issue of objects being able to vary tremendously in size and number",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Abstract Factory: yield objects whose only responsibilities are creating other objects")))),(0,n.kt)("h3",{id:"builder"},(0,n.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Creational_patterns/Builder/"},"Builder")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Separate the construction of a complex object from its representation"),(0,n.kt)("li",{parentName:"ul"},"so that the same construction process can create different representations"),(0,n.kt)("li",{parentName:"ul"},"Deal with object relationships, which can be changed at run time and are more dynamic"),(0,n.kt)("li",{parentName:"ul"},"Almost all patterns use inheritance to some extent"),(0,n.kt)("li",{parentName:"ul"},"Design patterns can address the issue of objects being able to vary tremendously in size and number",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Builder patterns: yield objects whose only responsibilities are creating other objects")))),(0,n.kt)("h3",{id:"factory-method"},(0,n.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/"},"Factory Method")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Define an interface for creating an object, but let subclasses decide which class to instantiate"),(0,n.kt)("li",{parentName:"ul"},"Factory method lets a class defer instantiation to subclasses"),(0,n.kt)("li",{parentName:"ul"},"Deal with relationships between classes & their subclasses (focus on class relationships)"),(0,n.kt)("li",{parentName:"ul"},"relationships are established through inheritance, so they are static-fixed at compile time")),(0,n.kt)("h3",{id:"prototype"},(0,n.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/"},"Prototype")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype"),(0,n.kt)("li",{parentName:"ul"},"Deal with object relationships, which can be changed at run time and are more dynamic"),(0,n.kt)("li",{parentName:"ul"},"Almost all patterns use inheritance to some extent"),(0,n.kt)("li",{parentName:"ul"},"an alternative to Abstract Factory")),(0,n.kt)("h3",{id:"singleton"},(0,n.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/"},"Singleton")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Ensure a class only has 1 instance, and provide a global point of access to it"),(0,n.kt)("li",{parentName:"ul"},"Deal with object relationships, which can be changed at run time and are more dynamic"),(0,n.kt)("li",{parentName:"ul"},"Almost all patterns use inheritance to some extent")))}u.isMDXComponent=!0}}]);