"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[56868],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>m});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=t.createContext({}),l=function(e){var n=t.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=l(e.components);return t.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},x=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),x=l(r),m=a,b=x["".concat(o,".").concat(m)]||x[m]||u[m]||s;return r?t.createElement(b,i(i({ref:n},c),{},{components:r})):t.createElement(b,i({ref:n},c))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=x;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var l=2;l<s;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}x.displayName="MDXCreateElement"},53739:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>l});var t=r(83117),a=(r(67294),r(3905));const s={},i="Java Example",p={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Interpreter/java/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Interpreter/java/readme",title:"Java Example",description:"- expressions",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Interpreter/java",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/java/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Interpreter",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/javascript/"}},o={},l=[],c={toc:l};function u(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"java-example"},"Java Example"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"expressions"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"expressions/AbstractExpressions.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.interpreter.example.expressions;\n\npublic abstract class AbstractExpressions {\n    public abstract boolean interpret(Context context) throws Exception;\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"expressions/AndExpression.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.interpreter.example.expressions;\n\npublic class AndExpression extends AbstractExpressions {\n    private final AbstractExpressions first;\n    private final AbstractExpressions second;\n\n    public AndExpression(AbstractExpressions first, AbstractExpressions second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    public boolean interpret(Context context) throws Exception {\n        return this.first.interpret(context) && this.second.interpret(context);\n    }\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"expressions/Context.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.interpreter.example.expressions;\n\nimport java.util.HashMap;\n\npublic class Context {\n    HashMap<String, Boolean> poolVariables = new HashMap<>();\n\n    public boolean lookUp(String name) throws Exception {\n        if (!poolVariables.containsKey(name)) {\n            throw new Exception("No exist variable: name");\n        }\n\n        return this.poolVariables.get(name);\n    }\n\n    public void assign(VariableExpression variable, boolean value) {\n        this.poolVariables.put(variable.getName(), value);\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"expressions/OrExpression.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.interpreter.example.expressions;\n\npublic class OrExpression extends AbstractExpressions {\n    private final AbstractExpressions first;\n    private final AbstractExpressions second;\n\n    public OrExpression(AbstractExpressions first, AbstractExpressions second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    public boolean interpret(Context context) throws Exception {\n        return this.first.interpret(context) || this.second.interpret(context);\n    }\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"expressions/VariableExpression.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.interpreter.example.expressions;\n\npublic class VariableExpression extends AbstractExpressions {\n    private final String name;\n\n    public VariableExpression(String name) {\n        this.name = name;\n    }\n\n    public boolean interpret(Context context) throws Exception {\n        return context.lookUp(this.name);\n    }\n\n    public String getName() {\n        return this.name;\n    }\n}\n"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Demo.java"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.interpreter.example;\n\nimport refactoring_guru.interpreter.example.expressions.AndExpression;\nimport refactoring_guru.interpreter.example.expressions.Context;\nimport refactoring_guru.interpreter.example.expressions.OrExpression;\nimport refactoring_guru.interpreter.example.expressions.VariableExpression;\n\n/**\n * Interpreter Design Pattern\n *\n * Defines a representation for a grammar as well as a mechanism to understand\n * and act upon the grammar.\n */\npublic class Demo {\n    private static void example1() throws Exception {\n        var context = new Context();\n\n        var a = new VariableExpression("A");\n        var b = new VariableExpression("B");\n        var c = new VariableExpression("C");\n\n        // example 1:\n        // A \u2227 (B \u2228 C)\n        var example1 = new AndExpression(\n                a,\n                new OrExpression(b, c)\n        );\n\n        context.assign(a, true);\n        context.assign(b, true);\n        context.assign(c, false);\n\n        var result = example1.interpret(context) ? "true" : "false";\n\n        System.out.println("boolean expression A \u2227 (B \u2228 C) = " + result + ", with variables A=true, B=true, C=false");\n    }\n\n    private static void example2() throws Exception {\n        var context = new Context();\n\n        var a = new VariableExpression("A");\n        var b = new VariableExpression("B");\n        var c = new VariableExpression("C");\n\n        // example 2:\n        // B \u2228 (A \u2227 (B \u2228 C))\n        var example2 = new OrExpression(\n                b,\n                new AndExpression(\n                        a,\n                        new OrExpression(b, c)\n                )\n        );\n\n        context.assign(a, false);\n        context.assign(b, false);\n        context.assign(c, true);\n\n        var result2 = example2.interpret(context) ? "true" : "false";\n\n        System.out.println("boolean expression B \u2228 (A \u2227 (B \u2228 C)) = " + result2 + ", with variables A=false, B=false, C=true");\n    }\n\n    public static void main(String[] args) throws Exception {\n        example1();\n        example2();\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"boolean expression A \u2227 (B \u2228 C) = true, with variables A=true, B=true, C=false\nboolean expression B \u2228 (A \u2227 (B \u2228 C)) = false, with variables A=false, B=false, C=true\n")))}u.isMDXComponent=!0}}]);