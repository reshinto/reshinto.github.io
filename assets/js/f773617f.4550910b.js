"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9609],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=o.createContext({}),p=function(e){var t=o.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(a.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),h=p(n),f=r,u=h["".concat(a,".").concat(f)]||h[f]||m[f]||i;return n?o.createElement(u,s(s({ref:t},l),{},{components:n})):o.createElement(u,s({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=h;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var p=2;p<i;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},99708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var o=n(83117),r=(n(67294),n(3905));const i={},s="Swift Example",c={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/readme",title:"Swift Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/python/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/example2"}},a={},p=[],l={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"swift-example"},"Swift Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'/// Visitor Design Pattern\n///\n/// Intent: Lets you separate algorithms from the objects on which they operate.\n\nimport XCTest\n\n/// The Component interface declares an `accept` method that should take the\n/// base visitor interface as an argument.\nprotocol Component {\n\n    func accept(_ visitor: Visitor)\n}\n\n/// Each Concrete Component must implement the `accept` method in such a way\n/// that it calls the visitor\'s method corresponding to the component\'s class.\nclass ConcreteComponentA: Component {\n\n    /// Note that we\'re calling `visitConcreteComponentA`, which matches the\n    /// current class name. This way we let the visitor know the class of the\n    /// component it works with.\n    func accept(_ visitor: Visitor) {\n        visitor.visitConcreteComponentA(element: self)\n    }\n\n    /// Concrete Components may have special methods that don\'t exist in their\n    /// base class or interface. The Visitor is still able to use these methods\n    /// since it\'s aware of the component\'s concrete class.\n    func exclusiveMethodOfConcreteComponentA() -> String {\n        return "A"\n    }\n}\n\nclass ConcreteComponentB: Component {\n\n    /// Same here: visitConcreteComponentB => ConcreteComponentB\n    func accept(_ visitor: Visitor) {\n        visitor.visitConcreteComponentB(element: self)\n    }\n\n    func specialMethodOfConcreteComponentB() -> String {\n        return "B"\n    }\n}\n\n/// The Visitor Interface declares a set of visiting methods that correspond to\n/// component classes. The signature of a visiting method allows the visitor to\n/// identify the exact class of the component that it\'s dealing with.\nprotocol Visitor {\n\n    func visitConcreteComponentA(element: ConcreteComponentA)\n    func visitConcreteComponentB(element: ConcreteComponentB)\n}\n\n/// Concrete Visitors implement several versions of the same algorithm, which\n/// can work with all concrete component classes.\n///\n/// You can experience the biggest benefit of the Visitor pattern when using it\n/// with a complex object structure, such as a Composite tree. In this case, it\n/// might be helpful to store some intermediate state of the algorithm while\n/// executing visitor\'s methods over various objects of the structure.\nclass ConcreteVisitor1: Visitor {\n\n    func visitConcreteComponentA(element: ConcreteComponentA) {\n        print(element.exclusiveMethodOfConcreteComponentA() + " + ConcreteVisitor1\\n")\n    }\n\n    func visitConcreteComponentB(element: ConcreteComponentB) {\n        print(element.specialMethodOfConcreteComponentB() + " + ConcreteVisitor1\\n")\n    }\n}\n\nclass ConcreteVisitor2: Visitor {\n\n    func visitConcreteComponentA(element: ConcreteComponentA) {\n        print(element.exclusiveMethodOfConcreteComponentA() + " + ConcreteVisitor2\\n")\n    }\n\n    func visitConcreteComponentB(element: ConcreteComponentB) {\n        print(element.specialMethodOfConcreteComponentB() + " + ConcreteVisitor2\\n")\n    }\n}\n\n/// The client code can run visitor operations over any set of elements without\n/// figuring out their concrete classes. The accept operation directs a call to\n/// the appropriate operation in the visitor object.\nclass Client {\n    // ...\n    static func clientCode(components: [Component], visitor: Visitor) {\n        // ...\n        components.forEach({ $0.accept(visitor) })\n        // ...\n    }\n    // ...\n}\n\n/// Let\'s see how it all works together.\nclass VisitorConceptual: XCTestCase {\n\n    func test() {\n        let components: [Component] = [ConcreteComponentA(), ConcreteComponentB()]\n\n        print("The client code works with all visitors via the base Visitor interface:\\n")\n        let visitor1 = ConcreteVisitor1()\n        Client.clientCode(components: components, visitor: visitor1)\n\n        print("\\nIt allows the same client code to work with different types of visitors:\\n")\n        let visitor2 = ConcreteVisitor2()\n        Client.clientCode(components: components, visitor: visitor2)\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"The client code works with all visitors via the base Visitor interface:\n\nA + ConcreteVisitor1\n\nB + ConcreteVisitor1\n\n\nIt allows the same client code to work with different types of visitors:\n\nA + ConcreteVisitor2\n\nB + ConcreteVisitor2\n")))}m.isMDXComponent=!0}}]);