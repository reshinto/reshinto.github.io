"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[4634],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),h=i,f=p["".concat(l,".").concat(h)]||p[h]||d[h]||a;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},74962:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(83117),i=(r(67294),r(3905));const a={},o="C# Example",s={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Builder/cSharp/readme",id:"interviewPrep/designPatterns/Creational_patterns/Builder/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Builder/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Builder/cSharp",slug:"/interviewPrep/designPatterns/Creational_patterns/Builder/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Builder/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Builder/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Builder/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Builder/go/"}},l={},c=[],u={toc:c};function d(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"c-example"},"C# Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// Builder Design Pattern\n//\n// Intent: Lets you construct complex objects step by step. The pattern allows\n// you to produce different types and representations of an object using the\n// same construction code.\n\nusing System;\nusing System.Collections.Generic;\n\nnamespace RefactoringGuru.DesignPatterns.Builder.Conceptual\n{\n    // The Builder interface specifies methods for creating the different parts\n    // of the Product objects.\n    public interface IBuilder\n    {\n        void BuildPartA();\n\n        void BuildPartB();\n\n        void BuildPartC();\n    }\n\n    // The Concrete Builder classes follow the Builder interface and provide\n    // specific implementations of the building steps. Your program may have\n    // several variations of Builders, implemented differently.\n    public class ConcreteBuilder : IBuilder\n    {\n        private Product _product = new Product();\n\n        // A fresh builder instance should contain a blank product object, which\n        // is used in further assembly.\n        public ConcreteBuilder()\n        {\n            this.Reset();\n        }\n\n        public void Reset()\n        {\n            this._product = new Product();\n        }\n\n        // All production steps work with the same product instance.\n        public void BuildPartA()\n        {\n            this._product.Add("PartA1");\n        }\n\n        public void BuildPartB()\n        {\n            this._product.Add("PartB1");\n        }\n\n        public void BuildPartC()\n        {\n            this._product.Add("PartC1");\n        }\n\n        // Concrete Builders are supposed to provide their own methods for\n        // retrieving results. That\'s because various types of builders may\n        // create entirely different products that don\'t follow the same\n        // interface. Therefore, such methods cannot be declared in the base\n        // Builder interface (at least in a statically typed programming\n        // language).\n        //\n        // Usually, after returning the end result to the client, a builder\n        // instance is expected to be ready to start producing another product.\n        // That\'s why it\'s a usual practice to call the reset method at the end\n        // of the `GetProduct` method body. However, this behavior is not\n        // mandatory, and you can make your builders wait for an explicit reset\n        // call from the client code before disposing of the previous result.\n        public Product GetProduct()\n        {\n            Product result = this._product;\n\n            this.Reset();\n\n            return result;\n        }\n    }\n\n    // It makes sense to use the Builder pattern only when your products are\n    // quite complex and require extensive configuration.\n    //\n    // Unlike in other creational patterns, different concrete builders can\n    // produce unrelated products. In other words, results of various builders\n    // may not always follow the same interface.\n    public class Product\n    {\n        private List<object> _parts = new List<object>();\n\n        public void Add(string part)\n        {\n            this._parts.Add(part);\n        }\n\n        public string ListParts()\n        {\n            string str = string.Empty;\n\n            for (int i = 0; i < this._parts.Count; i++)\n            {\n                str += this._parts[i] + ", ";\n            }\n\n            str = str.Remove(str.Length - 2); // removing last ",c"\n\n            return "Product parts: " + str + "\\n";\n        }\n    }\n\n    // The Director is only responsible for executing the building steps in a\n    // particular sequence. It is helpful when producing products according to a\n    // specific order or configuration. Strictly speaking, the Director class is\n    // optional, since the client can control builders directly.\n    public class Director\n    {\n        private IBuilder _builder;\n\n        public IBuilder Builder\n        {\n            set { _builder = value; }\n        }\n\n        // The Director can construct several product variations using the same\n        // building steps.\n        public void BuildMinimalViableProduct()\n        {\n            this._builder.BuildPartA();\n        }\n\n        public void BuildFullFeaturedProduct()\n        {\n            this._builder.BuildPartA();\n            this._builder.BuildPartB();\n            this._builder.BuildPartC();\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // The client code creates a builder object, passes it to the\n            // director and then initiates the construction process. The end\n            // result is retrieved from the builder object.\n            var director = new Director();\n            var builder = new ConcreteBuilder();\n            director.Builder = builder;\n\n            Console.WriteLine("Standard basic product:");\n            director.BuildMinimalViableProduct();\n            Console.WriteLine(builder.GetProduct().ListParts());\n\n            Console.WriteLine("Standard full featured product:");\n            director.BuildFullFeaturedProduct();\n            Console.WriteLine(builder.GetProduct().ListParts());\n\n            // Remember, the Builder pattern can be used without a Director\n            // class.\n            Console.WriteLine("Custom product:");\n            builder.BuildPartA();\n            builder.BuildPartC();\n            Console.Write(builder.GetProduct().ListParts());\n        }\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Standard basic product:\nProduct parts: PartA1\n\nStandard full featured product:\nProduct parts: PartA1, PartB1, PartC1\n\nCustom product:\nProduct parts: PartA1, PartC1\n")))}d.isMDXComponent=!0}}]);