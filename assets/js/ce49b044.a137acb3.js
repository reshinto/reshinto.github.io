"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[95860],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),o=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=o(e.components);return n.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=o(r),h=i,f=d["".concat(c,".").concat(h)]||d[h]||l[h]||a;return r?n.createElement(f,s(s({ref:t},u),{},{components:r})):n.createElement(f,s({ref:t},u))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=d;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:i,s[1]=p;for(var o=2;o<a;o++)s[o]=r[o];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},96926:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>p,toc:()=>o});var n=r(83117),i=(r(67294),r(3905));const a={},s="Graph Example",p={unversionedId:"interviewPrep/data_structures/12Graphs/typescript/graph",id:"interviewPrep/data_structures/12Graphs/typescript/graph",title:"Graph Example",description:"",source:"@site/docs/interviewPrep/data_structures/12Graphs/typescript/graph.md",sourceDirName:"interviewPrep/data_structures/12Graphs/typescript",slug:"/interviewPrep/data_structures/12Graphs/typescript/graph",permalink:"/docs/interviewPrep/data_structures/12Graphs/typescript/graph",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/data_structures/12Graphs/typescript/graph.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Breadth First Search Example",permalink:"/docs/interviewPrep/data_structures/12Graphs/typescript/breadthFirstSearch"},next:{title:"Trees",permalink:"/docs/interviewPrep/data_structures/13Trees/"}},c={},o=[],u={toc:o};function l(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"graph-example"},"Graph Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'class Graph {\n  private vertices: (string | number)[] = [];\n  private adjList: Dictionary<string | number, (string | number)[]> =\n    new Dictionary();\n\n  constructor(private isDirected = false) {}\n\n  public addVertex(v: string | number) {\n    if (!this.vertices.includes(v)) {\n      this.vertices.push(v);\n      this.adjList.set(v, []); // initialize adjacency list with array as well;\n    }\n  }\n\n  public addEdge(a: string | number, b: string | number) {\n    if (!this.adjList.get(a)) {\n      this.addVertex(a);\n    }\n    if (!this.adjList.get(b)) {\n      this.addVertex(b);\n    }\n\n    this.adjList.get(a).push(b);\n\n    if (!this.isDirected) {\n      this.adjList.get(b).push(a);\n    }\n    // adjList.get(w).push(v); //commented to run the improved DFS with topological sorting\n  }\n\n  public getVertices() {\n    return this.vertices;\n  }\n\n  public getAdjList() {\n    return this.adjList;\n  }\n\n  public toString() {\n    let s = "";\n    for (let i = 0; i < this.vertices.length; i++) {\n      s += this.vertices[i] + " -> ";\n      const neighbors = this.adjList.get(this.vertices[i]);\n      for (let j = 0; j < neighbors.length; j++) {\n        s += neighbors[j] + " ";\n      }\n      s += "\\n";\n    }\n    return s;\n  }\n}\n')))}l.isMDXComponent=!0}}]);