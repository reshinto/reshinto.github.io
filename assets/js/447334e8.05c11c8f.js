"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[54507],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>p});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},E={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(t),p=a,m=d["".concat(u,".").concat(p)]||d[p]||E[p]||s;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},93572:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>E,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=t(83117),a=(t(67294),t(3905));const s={},o="Queries Example",i={unversionedId:"Technologies/database/SQL/postgreSQL/example/queries",id:"Technologies/database/SQL/postgreSQL/example/queries",title:"Queries Example",description:"",source:"@site/docs/Technologies/database/SQL/postgreSQL/example/queries.md",sourceDirName:"Technologies/database/SQL/postgreSQL/example",slug:"/Technologies/database/SQL/postgreSQL/example/queries",permalink:"/docs/Technologies/database/SQL/postgreSQL/example/queries",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/Technologies/database/SQL/postgreSQL/example/queries.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Init Example",permalink:"/docs/Technologies/database/SQL/postgreSQL/example/init"},next:{title:"Introduction to AWS services",permalink:"/docs/Technologies/database/cloud/AWS/"}},u={},l=[],c={toc:l};function E(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"queries-example"},"Queries Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM students\nWHERE name = 'John';\n\nSELECT * FROM students\nWHERE surname = 'Doe';\n\nSELECT * FROM students\nWHERE phone_number = 89654321;\n\nSELECT * FROM students\ninner join exam_results on students.student_id = exam_results.student_id\ninner join subjects on exam_results.subject_id = subjects.subject_id\nWHERE students.surname = 'Doe';\n\nUPDATE students\nSET\n  date_of_birth = '1999-10-01',\n  updated_datetime = now()\nWHERE student_id = 100000;\n\nUPDATE students\nSET\n  name = 'Test@',\n  updated_datetime = now()\nWHERE student_id = 100000;\n\nCREATE FUNCTION average_user_mark(id INTEGER)\nRETURNS FLOAT\nLANGUAGE plpgsql\nAS $$\nDECLARE avg_mark FLOAT;\nBEGIN\n  SELECT avg(mark)\n  FROM exam_results\n  WHERE student_id = id\n  INTO avg_mark;\n  RETURN avg_mark;\nEND;\n$$;\n\nSELECT average_user_mark(1);\n\n\nCREATE FUNCTION average_subject_mark(id INTEGER)\nRETURNS FLOAT\nLANGUAGE plpgsql\nAS $$\nDECLARE avg_mark FLOAT;\nBEGIN\n  SELECT avg(mark)\n  FROM exam_results\n  WHERE subject_id = id\n  INTO avg_mark;\n  RETURN avg_mark;\nEND;\n$$;\n\nSELECT average_subject_mark(1);\n\nCREATE FUNCTION check_mark(id INTEGER, sub_id INTEGER)\nRETURNS text\nLANGUAGE plpgsql\nAS $$\nBEGIN\n  IF EXISTS (\n    SELECT mark\n    FROM exam_results\n    WHERE (student_id = id and subject_id = sub_id and mark < 3)\n  ) THEN\n    RETURN 'student at red zone';\n  ELSE\n    RETURN 'student at green zone';\n  END IF;\nEND;\n$$;\n\nSELECT *\nFROM exam_results\nWHERE (student_id = 100000);\n\nSELECT check_mark(100000, 1000);\n")))}E.isMDXComponent=!0}}]);