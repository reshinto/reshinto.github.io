"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[41449],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>p});var s=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,s)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function r(n,e){if(null==n)return{};var t,s,i=function(n,e){if(null==n)return{};var t,s,i={},o=Object.keys(n);for(s=0;s<o.length;s++)t=o[s],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(s=0;s<o.length;s++)t=o[s],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var l=s.createContext({}),c=function(n){var e=s.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},u=function(n){var e=c(n.components);return s.createElement(l.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return s.createElement(s.Fragment,{},e)}},g=s.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,l=n.parentName,u=r(n,["components","mdxType","originalType","parentName"]),g=c(t),p=i,h=g["".concat(l,".").concat(p)]||g[p]||d[p]||o;return t?s.createElement(h,a(a({ref:e},u),{},{components:t})):s.createElement(h,a({ref:e},u))}));function p(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,a=new Array(o);a[0]=g;var r={};for(var l in e)hasOwnProperty.call(e,l)&&(r[l]=e[l]);r.originalType=n,r.mdxType="string"==typeof n?n:i,a[1]=r;for(var c=2;c<o;c++)a[c]=t[c];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}g.displayName="MDXCreateElement"},62172:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var s=t(83117),i=(t(67294),t(3905));const o={},a="C++ Example",r={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Singleton/cPlusPlus/readme",id:"interviewPrep/designPatterns/Creational_patterns/Singleton/cPlusPlus/readme",title:"C++ Example",description:"- Non Thread Safe",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Singleton/cPlusPlus",slug:"/interviewPrep/designPatterns/Creational_patterns/Singleton/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Singleton",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/cSharp/"}},l={},c=[],u={toc:c};function d(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,s.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"c-example"},"C++ Example"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Non Thread Safe")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n#include <thread>\n\n/**\n * Singleton Design Pattern\n *\n * Intent: Lets you ensure that a class has only one instance, while providing a\n * global access point to this instance.\n */\n/**\n * The Singleton class defines the `GetInstance` method that serves as an\n * alternative to constructor and lets clients access the same instance of this\n * class over and over.\n */\nclass Singleton\n{\n\n    /**\n     * The Singleton\'s constructor should always be private to prevent direct\n     * construction calls with the `new` operator.\n     */\n\nprotected:\n    Singleton(const std::string value): value_(value)\n    {\n    }\n\n    static Singleton* singleton_;\n\n    std::string value_;\n\npublic:\n\n    /**\n     * Singletons should not be cloneable.\n     */\n    Singleton(Singleton &other) = delete;\n    /**\n     * Singletons should not be assignable.\n     */\n    void operator=(const Singleton &) = delete;\n    /**\n     * This is the static method that controls the access to the singleton\n     * instance. On the first run, it creates a singleton object and places it\n     * into the static field. On subsequent runs, it returns the client existing\n     * object stored in the static field.\n     */\n\n    static Singleton *GetInstance(const std::string& value);\n    /**\n     * Finally, any singleton should define some business logic, which can be\n     * executed on its instance.\n     */\n    void SomeBusinessLogic()\n    {\n        // ...\n    }\n\n    std::string value() const{\n        return value_;\n    }\n};\n\nSingleton* Singleton::singleton_= nullptr;;\n\n/**\n * Static methods should be defined outside the class.\n */\nSingleton *Singleton::GetInstance(const std::string& value)\n{\n    /**\n     * This is a safer way to create an instance. instance = new Singleton is\n     * dangeruous in case two instance threads wants to access at the same time\n     */\n    if(singleton_==nullptr){\n        singleton_ = new Singleton(value);\n    }\n    return singleton_;\n}\n\nvoid ThreadFoo(){\n    // Following code emulates slow initialization.\n    std::this_thread::sleep_for(std::chrono::milliseconds(1000));\n    Singleton* singleton = Singleton::GetInstance("FOO");\n    std::cout << singleton->value() << "\\n";\n}\n\nvoid ThreadBar(){\n    // Following code emulates slow initialization.\n    std::this_thread::sleep_for(std::chrono::milliseconds(1000));\n    Singleton* singleton = Singleton::GetInstance("BAR");\n    std::cout << singleton->value() << "\\n";\n}\n\n\nint main()\n{\n    std::cout <<"If you see the same value, then singleton was reused (yay!\\n" <<\n                "If you see different values, then 2 singletons were created (booo!!)\\n\\n" <<\n                "RESULT:\\n";\n    std::thread t1(ThreadFoo);\n    std::thread t2(ThreadBar);\n    t1.join();\n    t2.join();\n\n    return 0;\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"If you see the same value, then singleton was reused (yay!\nIf you see different values, then 2 singletons were created (booo!!)\n\nRESULT:\nBAR\nFOO\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Thread Safe")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'/**\n * Have in mind it is an ilustrative trivial example, in real world\n *     you may have in mind some more possible issues.\n */\n\n#include <iostream>\n#include <mutex>\n#include <thread>\n\n/**\n * Singleton Design Pattern\n *\n * Intent: Lets you ensure that a class has only one instance, while providing a\n * global access point to this instance.\n */\n/**\n * The Singleton class defines the `GetInstance` method that serves as an\n * alternative to constructor and lets clients access the same instance of this\n * class over and over.\n */\nclass Singleton\n{\n\n    /**\n     * The Singleton\'s constructor/destructor should always be private to\n     * prevent direct construction/desctruction calls with the `new`/`delete`\n     * operator.\n     */\nprivate:\n    static Singleton * pinstance_;\n    static std::mutex mutex_;\n\nprotected:\n    Singleton(const std::string value): value_(value)\n    {\n    }\n    ~Singleton() {}\n    std::string value_;\n\npublic:\n    /**\n     * Singletons should not be cloneable.\n     */\n    Singleton(Singleton &other) = delete;\n    /**\n     * Singletons should not be assignable.\n     */\n    void operator=(const Singleton &) = delete;\n    /**\n     * This is the static method that controls the access to the singleton\n     * instance. On the first run, it creates a singleton object and places it\n     * into the static field. On subsequent runs, it returns the client existing\n     * object stored in the static field.\n     */\n\n    static Singleton *GetInstance(const std::string& value);\n    /**\n     * Finally, any singleton should define some business logic, which can be\n     * executed on its instance.\n     */\n    void SomeBusinessLogic()\n    {\n        // ...\n    }\n\n    std::string value() const{\n        return value_;\n    }\n};\n\n/**\n * Static methods should be defined outside the class.\n */\n\nSingleton* Singleton::pinstance_{nullptr};\nstd::mutex Singleton::mutex_;\n\n/**\n * The first time we call GetInstance we will lock the storage location\n *      and then we make sure again that the variable is null and then we\n *      set the value. RU:\n */\nSingleton *Singleton::GetInstance(const std::string& value)\n{\n    std::lock_guard<std::mutex> lock(mutex_);\n    if (pinstance_ == nullptr)\n    {\n        pinstance_ = new Singleton(value);\n    }\n    return pinstance_;\n}\n\nvoid ThreadFoo(){\n    // Following code emulates slow initialization.\n    std::this_thread::sleep_for(std::chrono::milliseconds(1000));\n    Singleton* singleton = Singleton::GetInstance("FOO");\n    std::cout << singleton->value() << "\\n";\n}\n\nvoid ThreadBar(){\n    // Following code emulates slow initialization.\n    std::this_thread::sleep_for(std::chrono::milliseconds(1000));\n    Singleton* singleton = Singleton::GetInstance("BAR");\n    std::cout << singleton->value() << "\\n";\n}\n\nint main()\n{\n    std::cout <<"If you see the same value, then singleton was reused (yay!\\n" <<\n                "If you see different values, then 2 singletons were created (booo!!)\\n\\n" <<\n                "RESULT:\\n";\n    std::thread t1(ThreadFoo);\n    std::thread t2(ThreadBar);\n    t1.join();\n    t2.join();\n\n    return 0;\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"If you see the same value, then singleton was reused (yay!\nIf you see different values, then 2 singletons were created (booo!!)\n\nRESULT:\nFOO\nFOO\n")))}d.isMDXComponent=!0}}]);