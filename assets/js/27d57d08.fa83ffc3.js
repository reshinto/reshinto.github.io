"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[20236],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>v});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=r.createContext({}),c=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(m.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(t),v=o,u=d["".concat(m,".").concat(v)]||d[v]||p[v]||a;return t?r.createElement(u,i(i({ref:n},l),{},{components:t})):r.createElement(u,i({ref:n},l))}));function v(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},17901:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(83117),o=(t(67294),t(3905));const a={},i="Swift Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Command/swift/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Command/swift/readme",title:"Swift Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Command/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Command/swift/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/python/example2"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/swift/example2"}},m={},c=[],l={toc:c};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"swift-example"},"Swift Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'/// Command Design Pattern\n///\n/// Intent: Turns a request into a stand-alone object that contains all\n/// information about the request. This transformation lets you parameterize\n/// methods with different requests, delay or queue a request\'s execution, and\n/// support undoable operations.\n\nimport XCTest\n\n/// The Command interface declares a method for executing a command.\nprotocol Command {\n\n    func execute()\n}\n\n/// Some commands can implement simple operations on their own.\nclass SimpleCommand: Command {\n\n    private var payload: String\n\n    init(_ payload: String) {\n        self.payload = payload\n    }\n\n    func execute() {\n        print("SimpleCommand: See, I can do simple things like printing (" + payload + ")")\n    }\n}\n\n/// However, some commands can delegate more complex operations to other\n/// objects, called "receivers."\nclass ComplexCommand: Command {\n\n    private var receiver: Receiver\n\n    /// Context data, required for launching the receiver\'s methods.\n    private var a: String\n    private var b: String\n\n    /// Complex commands can accept one or several receiver objects along with\n    /// any context data via the constructor.\n    init(_ receiver: Receiver, _ a: String, _ b: String) {\n        self.receiver = receiver\n        self.a = a\n        self.b = b\n    }\n\n    /// Commands can delegate to any methods of a receiver.\n    func execute() {\n        print("ComplexCommand: Complex stuff should be done by a receiver object.\\n")\n        receiver.doSomething(a)\n        receiver.doSomethingElse(b)\n    }\n}\n\n/// The Receiver classes contain some important business logic. They know how to\n/// perform all kinds of operations, associated with carrying out a request. In\n/// fact, any class may serve as a Receiver.\nclass Receiver {\n\n    func doSomething(_ a: String) {\n        print("Receiver: Working on (" + a + ")\\n")\n    }\n\n    func doSomethingElse(_ b: String) {\n        print("Receiver: Also working on (" + b + ")\\n")\n    }\n}\n\n/// The Invoker is associated with one or several commands. It sends a request\n/// to the command.\nclass Invoker {\n\n    private var onStart: Command?\n\n    private var onFinish: Command?\n\n    /// Initialize commands.\n    func setOnStart(_ command: Command) {\n        onStart = command\n    }\n\n    func setOnFinish(_ command: Command) {\n        onFinish = command\n    }\n\n    /// The Invoker does not depend on concrete command or receiver classes. The\n    /// Invoker passes a request to a receiver indirectly, by executing a\n    /// command.\n    func doSomethingImportant() {\n\n        print("Invoker: Does anybody want something done before I begin?")\n\n        onStart?.execute()\n\n        print("Invoker: ...doing something really important...")\n        print("Invoker: Does anybody want something done after I finish?")\n\n        onFinish?.execute()\n    }\n}\n\n/// Let\'s see how it all comes together.\nclass CommandConceptual: XCTestCase {\n\n    func test() {\n        /// The client code can parameterize an invoker with any commands.\n\n        let invoker = Invoker()\n        invoker.setOnStart(SimpleCommand("Say Hi!"))\n\n        let receiver = Receiver()\n        invoker.setOnFinish(ComplexCommand(receiver, "Send email", "Save report"))\n        invoker.doSomethingImportant()\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Invoker: Does anybody want something done before I begin?\nSimpleCommand: See, I can do simple things like printing (Say Hi!)\nInvoker: ...doing something really important...\nInvoker: Does anybody want something done after I finish?\nComplexCommand: Complex stuff should be done by a receiver object.\n\nReceiver: Working on (Send email)\n\nReceiver: Also working on (Save report)\n")))}p.isMDXComponent=!0}}]);