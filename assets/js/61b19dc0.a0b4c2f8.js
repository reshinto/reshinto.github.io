"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[94683],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),h=a,f=p["".concat(s,".").concat(h)]||p[h]||d[h]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},39833:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(83117),a=(t(67294),t(3905));const i={},o="C# Example",l={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cSharp/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cSharp",slug:"/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/go/"}},s={},c=[],u={toc:c};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-example"},"C# Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// Chain of Responsibility Design Pattern\n//\n// Intent: Lets you pass requests along a chain of handlers. Upon receiving a\n// request, each handler decides either to process the request or to pass it to\n// the next handler in the chain.\n\nusing System;\nusing System.Collections.Generic;\n\nnamespace RefactoringGuru.DesignPatterns.ChainOfResponsibility.Conceptual\n{\n    // The Handler interface declares a method for building the chain of\n    // handlers. It also declares a method for executing a request.\n    public interface IHandler\n    {\n        IHandler SetNext(IHandler handler);\n\n        object Handle(object request);\n    }\n\n    // The default chaining behavior can be implemented inside a base handler\n    // class.\n    abstract class AbstractHandler : IHandler\n    {\n        private IHandler _nextHandler;\n\n        public IHandler SetNext(IHandler handler)\n        {\n            this._nextHandler = handler;\n\n            // Returning a handler from here will let us link handlers in a\n            // convenient way like this:\n            // monkey.SetNext(squirrel).SetNext(dog);\n            return handler;\n        }\n\n        public virtual object Handle(object request)\n        {\n            if (this._nextHandler != null)\n            {\n                return this._nextHandler.Handle(request);\n            }\n            else\n            {\n                return null;\n            }\n        }\n    }\n\n    class MonkeyHandler : AbstractHandler\n    {\n        public override object Handle(object request)\n        {\n            if ((request as string) == "Banana")\n            {\n                return $"Monkey: I\'ll eat the {request.ToString()}.\\n";\n            }\n            else\n            {\n                return base.Handle(request);\n            }\n        }\n    }\n\n    class SquirrelHandler : AbstractHandler\n    {\n        public override object Handle(object request)\n        {\n            if (request.ToString() == "Nut")\n            {\n                return $"Squirrel: I\'ll eat the {request.ToString()}.\\n";\n            }\n            else\n            {\n                return base.Handle(request);\n            }\n        }\n    }\n\n    class DogHandler : AbstractHandler\n    {\n        public override object Handle(object request)\n        {\n            if (request.ToString() == "MeatBall")\n            {\n                return $"Dog: I\'ll eat the {request.ToString()}.\\n";\n            }\n            else\n            {\n                return base.Handle(request);\n            }\n        }\n    }\n\n    class Client\n    {\n        // The client code is usually suited to work with a single handler. In\n        // most cases, it is not even aware that the handler is part of a chain.\n        public static void ClientCode(AbstractHandler handler)\n        {\n            foreach (var food in new List<string> { "Nut", "Banana", "Cup of coffee" })\n            {\n                Console.WriteLine($"Client: Who wants a {food}?");\n\n                var result = handler.Handle(food);\n\n                if (result != null)\n                {\n                    Console.Write($"   {result}");\n                }\n                else\n                {\n                    Console.WriteLine($"   {food} was left untouched.");\n                }\n            }\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // The other part of the client code constructs the actual chain.\n            var monkey = new MonkeyHandler();\n            var squirrel = new SquirrelHandler();\n            var dog = new DogHandler();\n\n            monkey.SetNext(squirrel).SetNext(dog);\n\n            // The client should be able to send a request to any handler, not\n            // just the first one in the chain.\n            Console.WriteLine("Chain: Monkey > Squirrel > Dog\\n");\n            Client.ClientCode(monkey);\n            Console.WriteLine();\n\n            Console.WriteLine("Subchain: Squirrel > Dog\\n");\n            Client.ClientCode(squirrel);\n        }\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Chain: Monkey > Squirrel > Dog\n\nClient: Who wants a Nut?\n   Squirrel: I'll eat the Nut.\nClient: Who wants a Banana?\n   Monkey: I'll eat the Banana.\nClient: Who wants a Cup of coffee?\n   Cup of coffee was left untouched.\n\nSubchain: Squirrel > Dog\n\nClient: Who wants a Nut?\n   Squirrel: I'll eat the Nut.\nClient: Who wants a Banana?\n   Banana was left untouched.\nClient: Who wants a Cup of coffee?\n   Cup of coffee was left untouched.\n")))}d.isMDXComponent=!0}}]);