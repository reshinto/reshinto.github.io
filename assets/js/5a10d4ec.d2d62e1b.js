"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[73009],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(f,c(c({ref:n},l),{},{components:t})):r.createElement(f,c({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var p=2;p<a;p++)c[p]=t[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},31659:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=t(83117),o=(t(67294),t(3905));const a={},c="C++ Example",i={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Decorator/cPlusPlus/readme",id:"interviewPrep/designPatterns/Structural_patterns/Decorator/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Decorator/cPlusPlus",slug:"/interviewPrep/designPatterns/Structural_patterns/Decorator/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Decorator",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/cSharp/"}},s={},p=[],l={toc:p};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"c-example"},"C++ Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n\n/**\n * Decorator Design Pattern\n *\n * Intent: Lets you attach new behaviors to objects by placing these objects\n * inside special wrapper objects that contain the behaviors.\n */\n/**\n * The base Component interface defines operations that can be altered by\n * decorators.\n */\nclass Component {\n public:\n  virtual ~Component() {}\n  virtual std::string Operation() const = 0;\n};\n/**\n * Concrete Components provide default implementations of the operations. There\n * might be several variations of these classes.\n */\nclass ConcreteComponent : public Component {\n public:\n  std::string Operation() const override {\n    return "ConcreteComponent";\n  }\n};\n/**\n * The base Decorator class follows the same interface as the other components.\n * The primary purpose of this class is to define the wrapping interface for all\n * concrete decorators. The default implementation of the wrapping code might\n * include a field for storing a wrapped component and the means to initialize\n * it.\n */\nclass Decorator : public Component {\n  /**\n   * @var Component\n   */\n protected:\n  Component* component_;\n\n public:\n  Decorator(Component* component) : component_(component) {\n  }\n  /**\n   * The Decorator delegates all work to the wrapped component.\n   */\n  std::string Operation() const override {\n    return this->component_->Operation();\n  }\n};\n/**\n * Concrete Decorators call the wrapped object and alter its result in some way.\n */\nclass ConcreteDecoratorA : public Decorator {\n  /**\n   * Decorators may call parent implementation of the operation, instead of\n   * calling the wrapped object directly. This approach simplifies extension of\n   * decorator classes.\n   */\n public:\n  ConcreteDecoratorA(Component* component) : Decorator(component) {\n  }\n  std::string Operation() const override {\n    return "ConcreteDecoratorA(" + Decorator::Operation() + ")";\n  }\n};\n/**\n * Decorators can execute their behavior either before or after the call to a\n * wrapped object.\n */\nclass ConcreteDecoratorB : public Decorator {\n public:\n  ConcreteDecoratorB(Component* component) : Decorator(component) {\n  }\n\n  std::string Operation() const override {\n    return "ConcreteDecoratorB(" + Decorator::Operation() + ")";\n  }\n};\n/**\n * The client code works with all objects using the Component interface. This\n * way it can stay independent of the concrete classes of components it works\n * with.\n */\nvoid ClientCode(Component* component) {\n  // ...\n  std::cout << "RESULT: " << component->Operation();\n  // ...\n}\n\nint main() {\n  /**\n   * This way the client code can support both simple components...\n   */\n  Component* simple = new ConcreteComponent;\n  std::cout << "Client: I\'ve got a simple component:\\n";\n  ClientCode(simple);\n  std::cout << "\\n\\n";\n  /**\n   * ...as well as decorated ones.\n   *\n   * Note how decorators can wrap not only simple components but the other\n   * decorators as well.\n   */\n  Component* decorator1 = new ConcreteDecoratorA(simple);\n  Component* decorator2 = new ConcreteDecoratorB(decorator1);\n  std::cout << "Client: Now I\'ve got a decorated component:\\n";\n  ClientCode(decorator2);\n  std::cout << "\\n";\n\n  delete simple;\n  delete decorator1;\n  delete decorator2;\n\n  return 0;\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Client: I've got a simple component:\nRESULT: ConcreteComponent\n\nClient: Now I've got a decorated component:\nRESULT: ConcreteDecoratorB(ConcreteDecoratorA(ConcreteComponent))\n")))}u.isMDXComponent=!0}}]);