"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[78254],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),p=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,y=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(y,i(i({ref:n},s),{},{components:t})):a.createElement(y,i({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},56513:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(83117),r=(t(67294),t(3905));const o={},i="Example 2",l={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Flyweight/swift/example2",id:"interviewPrep/designPatterns/Structural_patterns/Flyweight/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Flyweight/swift",slug:"/interviewPrep/designPatterns/Structural_patterns/Flyweight/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/typescript/"}},c={},p=[],s={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"example-2"},"Example 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import XCTest\nimport UIKit\n\nclass FlyweightRealWorld: XCTestCase {\n\n    func testFlyweightRealWorld() {\n\n        let maineCoon = Animal(name: "Maine Coon",\n                               country: "USA",\n                               type: .cat)\n\n        let sphynx = Animal(name: "Sphynx",\n                            country: "Egypt",\n                            type: .cat)\n\n        let bulldog = Animal(name: "Bulldog",\n                             country: "England",\n                             type: .dog)\n\n        print("Client: I created a number of objects to display")\n\n        /// Displaying objects for the 1-st time.\n\n        print("Client: Let\'s show animals for the 1st time\\n")\n        display(animals: [maineCoon, sphynx, bulldog])\n\n\n        /// Displaying objects for the 2-nd time.\n        ///\n        /// Note: Cached object of the appearance will be reused this time.\n\n        print("\\nClient: I have a new dog, let\'s show it the same way!\\n")\n\n        let germanShepherd = Animal(name: "German Shepherd",\n                              country: "Germany",\n                              type: .dog)\n\n        display(animals: [germanShepherd])\n    }\n}\n\nextension FlyweightRealWorld {\n\n    func display(animals: [Animal]) {\n\n        let cells = loadCells(count: animals.count)\n\n        for index in 0..<animals.count {\n            cells[index].update(with: animals[index])\n        }\n\n        /// Using cells...\n    }\n\n    func loadCells(count: Int) -> [Cell] {\n        /// Emulates behavior of a table/collection view.\n        return Array(repeating: Cell(), count: count)\n    }\n}\n\nenum Type: String {\n    case cat\n    case dog\n}\n\nclass Cell {\n\n    private var animal: Animal?\n\n    func update(with animal: Animal) {\n        self.animal = animal\n        let type = animal.type.rawValue\n        let photos = "photos \\(animal.appearance.photos.count)"\n        print("Cell: Updating an appearance of a \\(type)-cell: \\(photos)\\n")\n    }\n}\n\nstruct Animal: Equatable {\n\n    /// This is an external context that contains specific values and an object\n    /// with a common state.\n    ///\n    /// Note: The object of appearance will be lazily created when it is needed\n\n    let name: String\n    let country: String\n    let type: Type\n\n    var appearance: Appearance {\n        return AppearanceFactory.appearance(for: type)\n    }\n}\n\nstruct Appearance: Equatable {\n\n    /// This object contains a predefined appearance of every cell\n\n    let photos: [UIImage]\n    let backgroundColor: UIColor\n}\n\nextension Animal: CustomStringConvertible {\n\n    var description: String {\n        return "\\(name), \\(country), \\(type.rawValue) + \\(appearance.description)"\n    }\n}\n\nextension Appearance: CustomStringConvertible {\n\n    var description: String {\n        return "photos: \\(photos.count), \\(backgroundColor)"\n    }\n}\n\nclass AppearanceFactory {\n\n    private static var cache = [Type: Appearance]()\n\n    static func appearance(for key: Type) -> Appearance {\n\n        guard cache[key] == nil else {\n            print("AppearanceFactory: Reusing an existing \\(key.rawValue)-appearance.")\n            return cache[key]!\n        }\n\n        print("AppearanceFactory: Can\'t find a cached \\(key.rawValue)-object, creating a new one.")\n\n        switch key {\n        case .cat:\n            cache[key] = catInfo\n        case .dog:\n            cache[key] = dogInfo\n        }\n\n        return cache[key]!\n    }\n}\n\nextension AppearanceFactory {\n\n    private static var catInfo: Appearance {\n        return Appearance(photos: [UIImage()], backgroundColor: .red)\n    }\n\n    private static var dogInfo: Appearance {\n        return Appearance(photos: [UIImage(), UIImage()], backgroundColor: .blue)\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Client: I created a number of objects to display\nClient: Let's show animals for the 1st time\n\nAppearanceFactory: Can't find a cached cat-object, creating a new one.\nCell: Updating an appearance of a cat-cell: photos 1\n\nAppearanceFactory: Reusing an existing cat-appearance.\nCell: Updating an appearance of a cat-cell: photos 1\n\nAppearanceFactory: Can't find a cached dog-object, creating a new one.\nCell: Updating an appearance of a dog-cell: photos 2\n\n\nClient: I have a new dog, let's show it the same way!\n\nAppearanceFactory: Reusing an existing dog-appearance.\nCell: Updating an appearance of a dog-cell: photos 2\n")))}u.isMDXComponent=!0}}]);