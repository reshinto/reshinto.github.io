"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[62769],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},70731:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const i={},o="The Law of Demeter / Principle of Least Knowledge",l={unversionedId:"interviewPrep/design_principles/lawOfDemeter/readme",id:"interviewPrep/design_principles/lawOfDemeter/readme",title:"The Law of Demeter / Principle of Least Knowledge",description:"- The purpose of the law of Demeter is lower cohesion",source:"@site/docs/interviewPrep/design_principles/lawOfDemeter/readme.md",sourceDirName:"interviewPrep/design_principles/lawOfDemeter",slug:"/interviewPrep/design_principles/lawOfDemeter/",permalink:"/docs/interviewPrep/design_principles/lawOfDemeter/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/lawOfDemeter/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Designing Good Functions",permalink:"/docs/interviewPrep/design_principles/designingGoodFunctions/"},next:{title:"Meaning Variable Names",permalink:"/docs/interviewPrep/design_principles/meaningfulVariableNames/"}},s={},p=[{value:"Avoiding violations",id:"avoiding-violations",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-law-of-demeter--principle-of-least-knowledge"},"The Law of Demeter / Principle of Least Knowledge"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The purpose of the law of Demeter is lower cohesion"),(0,r.kt)("li",{parentName:"ul"},"The low cohesion shows that the design is of good quality"),(0,r.kt)("li",{parentName:"ul"},"The Law of Demeter for functions requires that a method m of an object a may only invoke the methods of the following kinds of objects",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a itself"),(0,r.kt)("li",{parentName:"ul"},"m's parameters"),(0,r.kt)("li",{parentName:"ul"},"any objects instantiated within m"),(0,r.kt)("li",{parentName:"ul"},"a's attributes"),(0,r.kt)("li",{parentName:"ul"},"global variables accessible by a in the scope of m"))),(0,r.kt)("li",{parentName:"ul"},"In particular, an object should avoid invoking methods of an object returned by another method",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For many modern object-oriented languages that use a dot as a field identifier, the law can be stated simply as ",(0,r.kt)("inlineCode",{parentName:"li"},"use only one dot")),(0,r.kt)("li",{parentName:"ul"},"That is, the code ",(0,r.kt)("inlineCode",{parentName:"li"},"a.m().n()")," breaks the law where ",(0,r.kt)("inlineCode",{parentName:"li"},"a.m()")," does not"),(0,r.kt)("li",{parentName:"ul"},"As an analogy, when one wants a dog to walk, one does not command the dog's legs to walk directly",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"instead one commands the dog which then commands its own legs"))))),(0,r.kt)("li",{parentName:"ul"},"Some violations of the Law of Demeter are harmless, although others are a sign that the public interface has not been segregated correctly or has not been segregated at all"),(0,r.kt)("li",{parentName:"ul"},"example",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"1. customer.bicycle.wheel.tire();\n2. customer.bicycle.wheel.rotate();\n3. Object.keys(...).sort(...).join(',');\n")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"1st and 2nd line violates the law of demeter"),(0,r.kt)("li",{parentName:"ul"},"3rd line is reasonable and does not violate the law of demeter")))),(0,r.kt)("h2",{id:"avoiding-violations"},"Avoiding violations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"how to avoid unnecessary dependency")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"problem"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a User who have Account and this account has a plan and User has discountedPlanPrice which violate the Law of Demeter")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"abstract class User {\n  private account: Account;\n\n  discountedPlanPrice(coupon: Coupon) {\n    return coupon.discount(this.account.getPlan().getPrice());\n  }\n}\n\nclass Account {\n  private plan: Plan;\n\n  getPlan() {\n    return this.plan;\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"solution"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"One of the common ways to remove such chains is by using delegation",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A wrapper method encapsulates or hides knowledge that would otherwise be implemented in the message chain"),(0,r.kt)("li",{parentName:"ul"},"Delegation is an effective technique to avoid Law of Demeter violations, but only for behavior, not for attributes"))),(0,r.kt)("li",{parentName:"ul"},"To avoid such problems, you need to think over the application architecture in advance")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class Account {\n  private plan: Plan;\n\n  discountedPlanPrice(coupon) {\n    return coupon.discount(this.plan.getPrice());\n  }\n}\n")))))}u.isMDXComponent=!0}}]);