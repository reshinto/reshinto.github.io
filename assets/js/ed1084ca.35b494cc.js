"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[35816],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(n),d=o,w=h["".concat(l,".").concat(d)]||h[d]||u[d]||a;return n?r.createElement(w,i(i({ref:t},c),{},{components:n})):r.createElement(w,i({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},13052:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(83117),o=(n(67294),n(3905));const a={},i="Example 2",s={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Adapter/swift/example2",id:"interviewPrep/designPatterns/Structural_patterns/Adapter/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Adapter/swift",slug:"/interviewPrep/designPatterns/Structural_patterns/Adapter/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/typescript/"}},l={},p=[],c={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"example-2"},"Example 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'import XCTest\nimport UIKit\n\n/// Adapter Design Pattern\n///\n/// Intent: Convert the interface of a class into the interface clients expect.\n/// Adapter lets classes work together that couldn\'t work otherwise because of\n/// incompatible interfaces.\n\nclass AdapterRealWorld: XCTestCase {\n\n    /// Example. Let\'s assume that our app perfectly works with Facebook\n    /// authorization. However, users ask you to add sign in via Twitter.\n    ///\n    /// Unfortunately, Twitter SDK has a different authorization method.\n    ///\n    /// Firstly, you have to create the new protocol \'AuthService\' and insert\n    /// the authorization method of Facebook SDK.\n    ///\n    /// Secondly, write an extension for Twitter SDK and implement methods of\n    /// AuthService protocol, just a simple redirect.\n    ///\n    /// Thirdly, write an extension for Facebook SDK. You should not write any\n    /// code at this point as methods already implemented by Facebook SDK.\n    ///\n    /// It just tells a compiler that both SDKs have the same interface.\n\n    func testAdapterRealWorld() {\n\n        print("Starting an authorization via Facebook")\n        startAuthorization(with: FacebookAuthSDK())\n\n        print("Starting an authorization via Twitter.")\n        startAuthorization(with: TwitterAuthSDK())\n    }\n\n    func startAuthorization(with service: AuthService) {\n\n        /// The current top view controller of the app\n        let topViewController = UIViewController()\n\n        service.presentAuthFlow(from: topViewController)\n    }\n}\n\nprotocol AuthService {\n\n    func presentAuthFlow(from viewController: UIViewController)\n}\n\nclass FacebookAuthSDK {\n\n    func presentAuthFlow(from viewController: UIViewController) {\n        /// Call SDK methods and pass a view controller\n        print("Facebook WebView has been shown.")\n    }\n}\n\nclass TwitterAuthSDK {\n\n    func startAuthorization(with viewController: UIViewController) {\n        /// Call SDK methods and pass a view controller\n        print("Twitter WebView has been shown. Users will be happy :)")\n    }\n}\n\nextension TwitterAuthSDK: AuthService {\n\n    /// This is an adapter\n    ///\n    /// Yeah, we are able to not create another class and just extend an\n    /// existing one\n\n    func presentAuthFlow(from viewController: UIViewController) {\n        print("The Adapter is called! Redirecting to the original method...")\n        self.startAuthorization(with: viewController)\n    }\n}\n\nextension FacebookAuthSDK: AuthService {\n    /// This extension just tells a compiler that both SDKs have the same\n    /// interface.\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Starting an authorization via Facebook\nFacebook WebView has been shown\n///\nStarting an authorization via Twitter\nThe Adapter is called! Redirecting to the original method...\nTwitter WebView has been shown. Users will be happy :)\n")))}u.isMDXComponent=!0}}]);