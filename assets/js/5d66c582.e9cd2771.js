"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[2229],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),m=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(r),d=n,f=c["".concat(l,".").concat(d)]||c[d]||u[d]||i;return r?a.createElement(f,o(o({ref:t},p),{},{components:r})):a.createElement(f,o({ref:t},p))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var m=2;m<i;m++)o[m]=r[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},85639:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var a=r(83117),n=(r(67294),r(3905));const i={},o="CAP Theorem",s={unversionedId:"interviewPrep/system_design/memoryAndStorage/databases/cap_theorem",id:"interviewPrep/system_design/memoryAndStorage/databases/cap_theorem",title:"CAP Theorem",description:"- CAP theorem states that it is impossible for a distributed software system",source:"@site/docs/interviewPrep/system_design/memoryAndStorage/databases/cap_theorem.md",sourceDirName:"interviewPrep/system_design/memoryAndStorage/databases",slug:"/interviewPrep/system_design/memoryAndStorage/databases/cap_theorem",permalink:"/docs/interviewPrep/system_design/memoryAndStorage/databases/cap_theorem",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/system_design/memoryAndStorage/databases/cap_theorem.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL (Structured Query Language) vs. NoSQL",permalink:"/docs/interviewPrep/system_design/memoryAndStorage/databases/SQL_vs_NoSQL"},next:{title:"Data Partitioning",permalink:"/docs/interviewPrep/system_design/memoryAndStorage/databases/data_partitioning"}},l={},m=[],p={toc:m};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"cap-theorem"},"CAP Theorem"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"CAP theorem states that it is impossible for a distributed software system",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"to simultaneously provide more than 2 out of 3 of the following guarantees (CAP)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Consistency, Availability, and Partition tolerance"))),(0,n.kt)("li",{parentName:"ul"},"When we design a distributed system, trading off among CAP is almost the first thing we want to consider"),(0,n.kt)("li",{parentName:"ul"},"CAP theorem says while designing a distributed system we can pick only 2 of the following three options: ### Consistency\n",(0,n.kt)("em",{parentName:"li"}," All nodes see the same data at the same time\n")," Consistency is achieved by updating several nodes before allowing further reads ### Availability\n",(0,n.kt)("em",{parentName:"li"}," Every request gets a response on success/failure\n")," Availability is achieved by replicating the data across different servers ### Partition tolerance\n",(0,n.kt)("em",{parentName:"li"}," The system continues to work despite message loss or partial failure\n")," A system that is partition-tolerant can sustain any amount of network failure\n",(0,n.kt)("em",{parentName:"li"}," that doesn\u2019t result in a failure of the entire network\n")," Data is sufficiently replicated across combinations of nodes ","*"," and networks to keep the system up through intermittent outages\n",(0,n.kt)("img",{parentName:"li",src:"https://github.com/reshinto/Basic_technologies_revision/raw/master/interviewPrep/system_design/images/cap_theorem.png",alt:"alt text",title:"CAP Theorem"})))),(0,n.kt)("li",{parentName:"ul"},"We cannot build a general data store that is",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"continually available, sequentially consistent, and tolerant to any partition failures"),(0,n.kt)("li",{parentName:"ul"},"We can only build a system that has any 2 of these three properties",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Because, to be consistent, all nodes should see the same set of updates in the same order",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"But if the network suffers a partition",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"updates in one partition might not make it to the other partitions",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"before a client reads from the out-of-date partition after having read from the up-to-date one",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The only thing that can be done to cope with this possibility is",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"to stop serving requests from the out-of-date partition",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"but then the service is no longer 100% available")))))))))))))))))))}u.isMDXComponent=!0}}]);