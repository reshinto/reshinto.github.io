"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[72848],{3905:(e,t,n)=>{n.d(t,{Zo:()=>v,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},v=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,v=o(e,["components","mdxType","originalType","parentName"]),m=s(n),u=a,g=m["".concat(p,".").concat(u)]||m[u]||c[u]||i;return n?r.createElement(g,l(l({ref:t},v),{},{components:n})):r.createElement(g,l({ref:t},v))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},37036:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=n(83117),a=(n(67294),n(3905));const i={},l="Java Example",o={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Observer/java/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Observer/java/readme",title:"Java Example",description:"- editor",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Observer/java",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Observer/java/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/go/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/javascript/"}},p={},s=[],v={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"java-example"},"Java Example"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"editor"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"editor/Editor.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.observer.example.editor;\n\nimport refactoring_guru.observer.example.publisher.EventManager;\n\nimport java.io.File;\n\npublic class Editor {\n    public EventManager events;\n    private File file;\n\n    public Editor() {\n        this.events = new EventManager("open", "save");\n    }\n\n    public void openFile(String filePath) {\n        this.file = new File(filePath);\n        events.notify("open", file);\n    }\n\n    public void saveFile() throws Exception {\n        if (this.file != null) {\n            events.notify("save", file);\n        } else {\n            throw new Exception("Please open a file first.");\n        }\n    }\n}\n'))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"listeners"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"listeners/EmailNotificationListener.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.observer.example.listeners;\n\nimport java.io.File;\n\npublic class EmailNotificationListener implements EventListener {\n    private String email;\n\n    public EmailNotificationListener(String email) {\n        this.email = email;\n    }\n\n    @Override\n    public void update(String eventType, File file) {\n        System.out.println("Email to " + email + ": Someone has performed " + eventType + " operation with the following file: " + file.getName());\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"listeners/EventListener.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.observer.example.listeners;\n\nimport java.io.File;\n\npublic interface EventListener {\n    void update(String eventType, File file);\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"listeners/LogOpenListener.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.observer.example.listeners;\n\nimport java.io.File;\n\npublic class LogOpenListener implements EventListener {\n    private File log;\n\n    public LogOpenListener(String fileName) {\n        this.log = new File(fileName);\n    }\n\n    @Override\n    public void update(String eventType, File file) {\n        System.out.println("Save to log " + log + ": Someone has performed " + eventType + " operation with the following file: " + file.getName());\n    }\n}\n'))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"publisher"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"publisher/EventManager.java"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.observer.example.publisher;\n\nimport refactoring_guru.observer.example.listeners.EventListener;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class EventManager {\n    Map<String, List<EventListener>> listeners = new HashMap<>();\n\n    public EventManager(String... operations) {\n        for (String operation : operations) {\n            this.listeners.put(operation, new ArrayList<>());\n        }\n    }\n\n    public void subscribe(String eventType, EventListener listener) {\n        List<EventListener> users = listeners.get(eventType);\n        users.add(listener);\n    }\n\n    public void unsubscribe(String eventType, EventListener listener) {\n        List<EventListener> users = listeners.get(eventType);\n        users.remove(listener);\n    }\n\n    public void notify(String eventType, File file) {\n        List<EventListener> users = listeners.get(eventType);\n        for (EventListener listener : users) {\n            listener.update(eventType, file);\n        }\n    }\n}\n"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Demo.java"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.observer.example;\n\nimport refactoring_guru.observer.example.editor.Editor;\nimport refactoring_guru.observer.example.listeners.EmailNotificationListener;\nimport refactoring_guru.observer.example.listeners.LogOpenListener;\n\npublic class Demo {\n    public static void main(String[] args) {\n        Editor editor = new Editor();\n        editor.events.subscribe("open", new LogOpenListener("/path/to/log/file.txt"));\n        editor.events.subscribe("save", new EmailNotificationListener("admin@example.com"));\n\n        try {\n            editor.openFile("test.txt");\n            editor.saveFile();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Save to log \\path\\to\\log\\file.txt: Someone has performed open operation with the following file: test.txt\nEmail to admin@example.com: Someone has performed save operation with the following file: test.txt\n")))}c.isMDXComponent=!0}}]);