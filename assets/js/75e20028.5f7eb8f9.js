"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[92034],{3905:(e,n,t)=>{t.d(n,{Zo:()=>y,kt:()=>u});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},y=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,y=l(e,["components","mdxType","originalType","parentName"]),p=c(t),u=a,h=p["".concat(s,".").concat(u)]||p[u]||g[u]||i;return t?r.createElement(h,o(o({ref:n},y),{},{components:t})):r.createElement(h,o({ref:n},y))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5846:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(83117),a=(t(67294),t(3905));const i={},o="C# Example",l={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Flyweight/cSharp/readme",id:"interviewPrep/designPatterns/Structural_patterns/Flyweight/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Flyweight/cSharp",slug:"/interviewPrep/designPatterns/Structural_patterns/Flyweight/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/go/"}},s={},c=[],y={toc:c};function g(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-example"},"C# Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// Flyweight Design Pattern\n//\n// Intent: Lets you fit more objects into the available amount of RAM by sharing\n// common parts of state between multiple objects, instead of keeping all of the\n// data in each object.\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n// Use Json.NET library, you can download it from NuGet Package Manager\nusing Newtonsoft.Json;\n\nnamespace RefactoringGuru.DesignPatterns.Flyweight.Conceptual\n{\n    // The Flyweight stores a common portion of the state (also called intrinsic\n    // state) that belongs to multiple real business entities. The Flyweight\n    // accepts the rest of the state (extrinsic state, unique for each entity)\n    // via its method parameters.\n    public class Flyweight\n    {\n        private Car _sharedState;\n\n        public Flyweight(Car car)\n        {\n            this._sharedState = car;\n        }\n\n        public void Operation(Car uniqueState)\n        {\n            string s = JsonConvert.SerializeObject(this._sharedState);\n            string u = JsonConvert.SerializeObject(uniqueState);\n            Console.WriteLine($"Flyweight: Displaying shared {s} and unique {u} state.");\n        }\n    }\n\n    // The Flyweight Factory creates and manages the Flyweight objects. It\n    // ensures that flyweights are shared correctly. When the client requests a\n    // flyweight, the factory either returns an existing instance or creates a\n    // new one, if it doesn\'t exist yet.\n    public class FlyweightFactory\n    {\n        private List<Tuple<Flyweight, string>> flyweights = new List<Tuple<Flyweight, string>>();\n\n        public FlyweightFactory(params Car[] args)\n        {\n            foreach (var elem in args)\n            {\n                flyweights.Add(new Tuple<Flyweight, string>(new Flyweight(elem), this.getKey(elem)));\n            }\n        }\n\n        // Returns a Flyweight\'s string hash for a given state.\n        public string getKey(Car key)\n        {\n            List<string> elements = new List<string>();\n\n            elements.Add(key.Model);\n            elements.Add(key.Color);\n            elements.Add(key.Company);\n\n            if (key.Owner != null && key.Number != null)\n            {\n                elements.Add(key.Number);\n                elements.Add(key.Owner);\n            }\n\n            elements.Sort();\n\n            return string.Join("_", elements);\n        }\n\n        // Returns an existing Flyweight with a given state or creates a new\n        // one.\n        public Flyweight GetFlyweight(Car sharedState)\n        {\n            string key = this.getKey(sharedState);\n\n            if (flyweights.Where(t => t.Item2 == key).Count() == 0)\n            {\n                Console.WriteLine("FlyweightFactory: Can\'t find a flyweight, creating new one.");\n                this.flyweights.Add(new Tuple<Flyweight, string>(new Flyweight(sharedState), key));\n            }\n            else\n            {\n                Console.WriteLine("FlyweightFactory: Reusing existing flyweight.");\n            }\n            return this.flyweights.Where(t => t.Item2 == key).FirstOrDefault().Item1;\n        }\n\n        public void listFlyweights()\n        {\n            var count = flyweights.Count;\n            Console.WriteLine($"\\nFlyweightFactory: I have {count} flyweights:");\n            foreach (var flyweight in flyweights)\n            {\n                Console.WriteLine(flyweight.Item2);\n            }\n        }\n    }\n\n    public class Car\n    {\n        public string Owner { get; set; }\n\n        public string Number { get; set; }\n\n        public string Company { get; set; }\n\n        public string Model { get; set; }\n\n        public string Color { get; set; }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // The client code usually creates a bunch of pre-populated\n            // flyweights in the initialization stage of the application.\n            var factory = new FlyweightFactory(\n                new Car { Company = "Chevrolet", Model = "Camaro2018", Color = "pink" },\n                new Car { Company = "Mercedes Benz", Model = "C300", Color = "black" },\n                new Car { Company = "Mercedes Benz", Model = "C500", Color = "red" },\n                new Car { Company = "BMW", Model = "M5", Color = "red" },\n                new Car { Company = "BMW", Model = "X6", Color = "white" }\n            );\n            factory.listFlyweights();\n\n            addCarToPoliceDatabase(factory, new Car {\n                Number = "CL234IR",\n                Owner = "James Doe",\n                Company = "BMW",\n                Model = "M5",\n                Color = "red"\n            });\n\n            addCarToPoliceDatabase(factory, new Car {\n                Number = "CL234IR",\n                Owner = "James Doe",\n                Company = "BMW",\n                Model = "X1",\n                Color = "red"\n            });\n\n            factory.listFlyweights();\n        }\n\n        public static void addCarToPoliceDatabase(FlyweightFactory factory, Car car)\n        {\n            Console.WriteLine("\\nClient: Adding a car to database.");\n\n            var flyweight = factory.GetFlyweight(new Car {\n                Color = car.Color,\n                Model = car.Model,\n                Company = car.Company\n            });\n\n            // The client code either stores or calculates extrinsic state and\n            // passes it to the flyweight\'s methods.\n            flyweight.Operation(car);\n        }\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'FlyweightFactory: I have 5 flyweights:\nCamaro2018_Chevrolet_pink\nblack_C300_Mercedes Benz\nC500_Mercedes Benz_red\nBMW_M5_red\nBMW_white_X6\n\nClient: Adding a car to database.\nFlyweightFactory: Reusing existing flyweight.\nFlyweight: Displaying shared {"Owner":null,"Number":null,"Company":"BMW","Model":"M5","Color":"red"} and unique {"Owner":"James Doe","Number":"CL234IR","Company":"BMW","Model":"M5","Color":"red"} state.\n\nClient: Adding a car to database.\nFlyweightFactory: Can\'t find a flyweight, creating new one.\nFlyweight: Displaying shared {"Owner":null,"Number":null,"Company":"BMW","Model":"X1","Color":"red"} and unique {"Owner":"James Doe","Number":"CL234IR","Company":"BMW","Model":"X1","Color":"red"} state.\n\nFlyweightFactory: I have 6 flyweights:\nCamaro2018_Chevrolet_pink\nblack_C300_Mercedes Benz\nC500_Mercedes Benz_red\nBMW_M5_red\nBMW_white_X6\nBMW_red_X1\n')))}g.isMDXComponent=!0}}]);