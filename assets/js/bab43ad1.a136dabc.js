"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[44682],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>y});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(r),y=i,d=m["".concat(s,".").concat(y)]||m[y]||u[y]||a;return r?n.createElement(d,o(o({ref:t},c),{},{components:r})):n.createElement(d,o({ref:t},c))}));function y(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},81983:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=r(83117),i=(r(67294),r(3905));const a={},o="Complexity Analysis",l={unversionedId:"interviewPrep/data_structures/03ComplexityAnalysis/readme",id:"interviewPrep/data_structures/03ComplexityAnalysis/readme",title:"Complexity Analysis",description:"- the process of determining how efficient an algorithm is",source:"@site/docs/interviewPrep/data_structures/03ComplexityAnalysis/readme.md",sourceDirName:"interviewPrep/data_structures/03ComplexityAnalysis",slug:"/interviewPrep/data_structures/03ComplexityAnalysis/",permalink:"/docs/interviewPrep/data_structures/03ComplexityAnalysis/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/data_structures/03ComplexityAnalysis/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Example",permalink:"/docs/interviewPrep/concurrency_parallel_programming/multithread/python/"},next:{title:"Memory",permalink:"/docs/interviewPrep/data_structures/04Memory/"}},s={},p=[{value:"Time Complexity",id:"time-complexity",level:2},{value:"Space Complexity",id:"space-complexity",level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"complexity-analysis"},"Complexity Analysis"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the process of determining how efficient an algorithm is",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"usually involves finding both the time and space complexity of an algorithm"))),(0,i.kt)("li",{parentName:"ul"},'it is effectively used to determine how "good" an algorithm is and whether is is "better" than another one')),(0,i.kt)("h2",{id:"time-complexity"},"Time Complexity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a measure of how fast an algorithm runs"),(0,i.kt)("li",{parentName:"ul"},"it is a central concept in the field of algorithms and in coding interviews"),(0,i.kt)("li",{parentName:"ul"},"it's expressed using Big O notation")),(0,i.kt)("h2",{id:"space-complexity"},"Space Complexity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a measure of how much auxillary memory an algorithm takes up"),(0,i.kt)("li",{parentName:"ul"},"it is a central concept in the field of algorithms and in coding interviews"),(0,i.kt)("li",{parentName:"ul"},"it's expressed using Big O notation")))}u.isMDXComponent=!0}}]);