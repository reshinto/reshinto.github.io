"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[45906],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>b});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},u=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),y=l(r),b=a,d=y["".concat(c,".").concat(b)]||y[b]||p[b]||i;return r?t.createElement(d,s(s({ref:n},u),{},{components:r})):t.createElement(d,s({ref:n},u))}));function b(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=y;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=r[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}y.displayName="MDXCreateElement"},98947:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=r(83117),a=(r(67294),r(3905));const i={},s="Dictionary Example",o={unversionedId:"interviewPrep/data_structures/09HashTables/typescript/dictionary",id:"interviewPrep/data_structures/09HashTables/typescript/dictionary",title:"Dictionary Example",description:"",source:"@site/docs/interviewPrep/data_structures/09HashTables/typescript/dictionary.md",sourceDirName:"interviewPrep/data_structures/09HashTables/typescript",slug:"/interviewPrep/data_structures/09HashTables/typescript/dictionary",permalink:"/docs/interviewPrep/data_structures/09HashTables/typescript/dictionary",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/data_structures/09HashTables/typescript/dictionary.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hash Tables",permalink:"/docs/interviewPrep/data_structures/09HashTables/"},next:{title:"Stacks and Queues",permalink:"/docs/interviewPrep/data_structures/10StacksAndQueues/"}},c={},l=[],u={toc:l};function p(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dictionary-example"},"Dictionary Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'class Dictionary<K, V> {\n  private table: Map<K, V>;\n\n  constructor() {\n    this.table = new Map();\n  }\n\n  /**\n   * @description: set key-value pair\n   * @param {K} key\n   * @param {V} value\n   * @return {boolean}\n   */\n  public set(key: K, value: V): boolean {\n    this.table.set(key, value);\n    return true;\n  }\n\n  /**\n   * @description: get value by key\n   * @param {K} key\n   * @return {V}\n   */\n  public get(key: K): V {\n    return this.table.get(key);\n  }\n\n  /**\n   * @description: Returns whether this key exists\n   * @param {K} key\n   * @return {boolean}\n   */\n  public hasKey(key: K): boolean {\n    return this.table.has(key);\n  }\n\n  /**\n   * @description: remove key-value pairs\n   * @param {K} key\n   * @return {boolean}\n   */\n  public remove(key: K): boolean {\n    return this.table.delete(key);\n  }\n\n  /**\n   * @description: return value array\n   * @return {Array<V>}\n   */\n  public values(): V[] {\n    return Array.from(this.table.values());\n  }\n\n  /**\n   * @description: return key array\n   * @return {Array<K>}\n   */\n  public keys(): K[] {\n    return Array.from(this.table.keys());\n  }\n\n  /**\n   * @description: Returns an array of key-value pairs\n   * @return {Array<K, V>}\n   */\n  public keyValues(): [K, V][] {\n    return Array.from(this.table.entries());\n  }\n\n  /**\n   * @description: iterate over the entire dictionary\n   * @param {function} callbackFn\n   */\n  public forEach(callbackFn: (key: K, value: V) => any) {\n    const valuePairs = this.keyValues();\n    for (let i = 0; i < valuePairs.length; i++) {\n      // Terminate the iteration when callbackFn returns false\n      if (callbackFn(valuePairs[i][0], valuePairs[i][1]) === false) {\n        break;\n      }\n    }\n  }\n\n  /**\n   * @description:\n   * @return {boolean}\n   */\n  public isEmpty(): boolean {\n    return this.size() === 0;\n  }\n\n  /**\n   * @description:\n   * @return {number}\n   */\n  public size(): number {\n    return this.table.size;\n  }\n\n  /**\n   * @description:\n   */\n  public clear() {\n    this.table.clear();\n  }\n\n  /**\n   * @description:\n   * @return {string}\n   */\n  public toString(): string {\n    if (this.isEmpty()) {\n      return "";\n    }\n\n    let objStringList = [];\n    for (const [key, value] of this.table) {\n      objStringList.push(`[${key}: ${value}]`);\n    }\n    return objStringList.join(",");\n  }\n}\n')))}p.isMDXComponent=!0}}]);