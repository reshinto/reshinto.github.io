"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[16835],{3905:(e,t,o)=>{o.d(t,{Zo:()=>s,kt:()=>P});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function p(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?p(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):p(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)o=p[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)o=p[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,p=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(o),P=r,d=u["".concat(l,".").concat(P)]||u[P]||y[P]||p;return o?n.createElement(d,a(a({ref:t},s),{},{components:o})):n.createElement(d,a({ref:t},s))}));function P(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=o.length,a=new Array(p);a[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var c=2;c<p;c++)a[c]=o[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},88073:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>y,frontMatter:()=>p,metadata:()=>i,toc:()=>c});var n=o(83117),r=(o(67294),o(3905));const p={},a="C++ Example",i={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Prototype/cPlusPlus/readme",id:"interviewPrep/designPatterns/Creational_patterns/Prototype/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Prototype/cPlusPlus",slug:"/interviewPrep/designPatterns/Creational_patterns/Prototype/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Prototype",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/cSharp/"}},l={},c=[],s={toc:c};function y(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"c-example"},"C++ Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n#include <unordered_map>\n\nusing std::string;\n\n// Prototype Design Pattern\n//\n// Intent: Lets you copy existing objects without making your code dependent on\n// their classes.\n\nenum Type {\n  PROTOTYPE_1 = 0,\n  PROTOTYPE_2\n};\n\n/**\n * The example class that has cloning ability. We\'ll see how the values of field\n * with different types will be cloned.\n */\n\nclass Prototype {\n protected:\n  string prototype_name_;\n  float prototype_field_;\n\n public:\n  Prototype() {}\n  Prototype(string prototype_name)\n      : prototype_name_(prototype_name) {\n  }\n  virtual ~Prototype() {}\n  virtual Prototype *Clone() const = 0;\n  virtual void Method(float prototype_field) {\n    this->prototype_field_ = prototype_field;\n    std::cout << "Call Method from " << prototype_name_ << " with field : " << prototype_field << std::endl;\n  }\n};\n\n/**\n * ConcretePrototype1 is a Sub-Class of Prototype and implement the Clone Method\n * In this example all data members of Prototype Class are in the Stack. If you\n * have pointers in your properties for ex: String* name_ ,you will need to\n * implement the Copy-Constructor to make sure you have a deep copy from the\n * clone method\n */\n\nclass ConcretePrototype1 : public Prototype {\n private:\n  float concrete_prototype_field1_;\n\n public:\n  ConcretePrototype1(string prototype_name, float concrete_prototype_field)\n      : Prototype(prototype_name), concrete_prototype_field1_(concrete_prototype_field) {\n  }\n\n  /**\n   * Notice that Clone method return a Pointer to a new ConcretePrototype1\n   * replica. so, the client (who call the clone method) has the responsability\n   * to free that memory. I you have smart pointer knowledge you may prefer to\n   * use unique_pointer here.\n   */\n  Prototype *Clone() const override {\n    return new ConcretePrototype1(*this);\n  }\n};\n\nclass ConcretePrototype2 : public Prototype {\n private:\n  float concrete_prototype_field2_;\n\n public:\n  ConcretePrototype2(string prototype_name, float concrete_prototype_field)\n      : Prototype(prototype_name), concrete_prototype_field2_(concrete_prototype_field) {\n  }\n  Prototype *Clone() const override {\n    return new ConcretePrototype2(*this);\n  }\n};\n\n/**\n * In PrototypeFactory you have two concrete prototypes, one for each concrete\n * prototype class, so each time you want to create a bullet , you can use the\n * existing ones and clone those.\n */\n\nclass PrototypeFactory {\n private:\n  std::unordered_map<Type, Prototype *, std::hash<int>> prototypes_;\n\n public:\n  PrototypeFactory() {\n    prototypes_[Type::PROTOTYPE_1] = new ConcretePrototype1("PROTOTYPE_1 ", 50.f);\n    prototypes_[Type::PROTOTYPE_2] = new ConcretePrototype2("PROTOTYPE_2 ", 60.f);\n  }\n\n  /**\n   * Be carefull of free all memory allocated. Again, if you have smart pointers\n   * knowelege will be better to use it here.\n   */\n\n  ~PrototypeFactory() {\n    delete prototypes_[Type::PROTOTYPE_1];\n    delete prototypes_[Type::PROTOTYPE_2];\n  }\n\n  /**\n   * Notice here that you just need to specify the type of the prototype you\n   * want and the method will create from the object with this type.\n   */\n  Prototype *CreatePrototype(Type type) {\n    return prototypes_[type]->Clone();\n  }\n};\n\nvoid Client(PrototypeFactory &prototype_factory) {\n  std::cout << "Let\'s create a Prototype 1\\n";\n\n  Prototype *prototype = prototype_factory.CreatePrototype(Type::PROTOTYPE_1);\n  prototype->Method(90);\n  delete prototype;\n\n  std::cout << "\\n";\n\n  std::cout << "Let\'s create a Prototype 2 \\n";\n\n  prototype = prototype_factory.CreatePrototype(Type::PROTOTYPE_2);\n  prototype->Method(10);\n\n  delete prototype;\n}\n\nint main() {\n  PrototypeFactory *prototype_factory = new PrototypeFactory();\n  Client(*prototype_factory);\n  delete prototype_factory;\n\n  return 0;\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Let's create a Prototype 1\nCall Method from PROTOTYPE_1  with field : 90\n\nLet's create a Prototype 2\nCall Method from PROTOTYPE_2  with field : 10\n")))}y.isMDXComponent=!0}}]);