"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[65674],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),u=a,f=d["".concat(c,".").concat(u)]||d[u]||h[u]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},46392:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(83117),a=(n(67294),n(3905));const o={},s="TypeScript Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/State/typescript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/State/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/State/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/State/typescript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/State/typescript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/State/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/swift/example2"},next:{title:"Strategy",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/"}},c={},l=[],p={toc:l};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * State Design Pattern\n *\n * Intent: Lets an object alter its behavior when its internal state changes. It\n * appears as if the object changed its class.\n */\n\n/**\n * The Context defines the interface of interest to clients. It also maintains a\n * reference to an instance of a State subclass, which represents the current\n * state of the Context.\n */\nclass Context {\n  /**\n   * @type {State} A reference to the current state of the Context.\n   */\n  private state: State;\n\n  constructor(state: State) {\n    this.transitionTo(state);\n  }\n\n  /**\n   * The Context allows changing the State object at runtime.\n   */\n  public transitionTo(state: State): void {\n    console.log(`Context: Transition to ${(<any>state).constructor.name}.`);\n    this.state = state;\n    this.state.setContext(this);\n  }\n\n  /**\n   * The Context delegates part of its behavior to the current State object.\n   */\n  public request1(): void {\n    this.state.handle1();\n  }\n\n  public request2(): void {\n    this.state.handle2();\n  }\n}\n\n/**\n * The base State class declares methods that all Concrete State should\n * implement and also provides a backreference to the Context object, associated\n * with the State. This backreference can be used by States to transition the\n * Context to another State.\n */\nabstract class State {\n  protected context: Context;\n\n  public setContext(context: Context) {\n    this.context = context;\n  }\n\n  public abstract handle1(): void;\n\n  public abstract handle2(): void;\n}\n\n/**\n * Concrete States implement various behaviors, associated with a state of the\n * Context.\n */\nclass ConcreteStateA extends State {\n  public handle1(): void {\n    console.log("ConcreteStateA handles request1.");\n    console.log("ConcreteStateA wants to change the state of the context.");\n    this.context.transitionTo(new ConcreteStateB());\n  }\n\n  public handle2(): void {\n    console.log("ConcreteStateA handles request2.");\n  }\n}\n\nclass ConcreteStateB extends State {\n  public handle1(): void {\n    console.log("ConcreteStateB handles request1.");\n  }\n\n  public handle2(): void {\n    console.log("ConcreteStateB handles request2.");\n    console.log("ConcreteStateB wants to change the state of the context.");\n    this.context.transitionTo(new ConcreteStateA());\n  }\n}\n\n/**\n * The client code.\n */\nconst context = new Context(new ConcreteStateA());\ncontext.request1();\ncontext.request2();\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Context: Transition to ConcreteStateA.\nConcreteStateA handles request1.\nConcreteStateA wants to change the state of the context.\nContext: Transition to ConcreteStateB.\nConcreteStateB handles request2.\nConcreteStateB wants to change the state of the context.\nContext: Transition to ConcreteStateA.\n")))}h.isMDXComponent=!0}}]);