"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[2993],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=u(n),h=i,g=p["".concat(s,".").concat(h)]||p[h]||c[h]||o;return n?r.createElement(g,a(a({ref:t},m),{},{components:n})):r.createElement(g,a({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},88126:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(87462),i=(n(67294),n(3905));const o={},a="Merge Sort",l={unversionedId:"interviewPrep/algorithms_and_techniques/sorting/mergeSort",id:"interviewPrep/algorithms_and_techniques/sorting/mergeSort",title:"Merge Sort",description:"- The merge sort algorithm closely follows the divide-and-conquer paradigm",source:"@site/docs/interviewPrep/algorithms_and_techniques/sorting/mergeSort.md",sourceDirName:"interviewPrep/algorithms_and_techniques/sorting",slug:"/interviewPrep/algorithms_and_techniques/sorting/mergeSort",permalink:"/docs/interviewPrep/algorithms_and_techniques/sorting/mergeSort",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/sorting/mergeSort.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Insertion Sort",permalink:"/docs/interviewPrep/algorithms_and_techniques/sorting/insertionSort"},next:{title:"Find All Numbers Disappeared In An Array",permalink:"/docs/interviewPrep/algorithms_and_techniques/tracking/findDisappearedNumbers"}},s={},u=[],m={toc:u};function c(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,r.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"merge-sort"},"Merge Sort"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The merge sort algorithm closely follows the divide-and-conquer paradigm"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Divide")," the n-element sequence to be sorted into two subsequences of n/2 elements each"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Conquer"),": Sort the two subsequences recursively using merge sort"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Combine"),": Merge the two sorted subsequences to produce the sorted answer")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Merge sort",src:n(99290).Z,width:"502",height:"477"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"example"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We take half the length of the array and divide it into two parts",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"And we call the merge function to the same sorting from the left and right sides"),(0,i.kt)("li",{parentName:"ul"},"The merge function itself compares and merges our sequences"))),(0,i.kt)("li",{parentName:"ul"},"Although the code for merge sort works correctly when the number of elements is not even, our recurrence-based analysis is simplified if we assume that the original problem size is a power of 2",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Each divide step then yields two subsequences of size exactly n/2"),(0,i.kt)("li",{parentName:"ul"},"This assumption does not affect the order of growth of the solution to the recurrence"))),(0,i.kt)("li",{parentName:"ul"},"We reason is to set up the recurrence for T(n), the worst-case running time of merge sort on n numbers",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Merge sort on just one element takes constant time"),(0,i.kt)("li",{parentName:"ul"},"When we have n > 1 elements, we break down the running time as follows:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Divide"),": The divide step just computes the middle of the subarray, which takes constant time",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Thus, D(n) = \u0398(1)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Conquer"),": We recursively solve two subproblems, each of size n/2, which contributes 2T(n/2) to the running time"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Combine"),": We have already noted that the MERGE procedure on an n-element subarray takes time \u0398(n), and so C(n) = \u0398(n)")))))),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function merge(left: number[], right: number[]) {\n  const result = [];\n  const leftLength = left.length;\n  const rightLength = right.length;\n  let leftIndex = 0;\n  let rightIndex = 0;\n\n  while (leftIndex < leftLength && rightIndex < rightLength) {\n    if (left[leftIndex] < right[rightIndex]) {\n      result.push(left[leftIndex++]);\n    } else {\n      result.push(right[rightIndex++]);\n    }\n  }\n\n  while (leftIndex < leftLength) {\n    result.push(left[leftIndex++]);\n  }\n\n  while (rightIndex < rightLength) {\n    result.push(right[rightIndex++]);\n  }\n\n  return result;\n}\n\nfunction mergeSort(numbers: number[]): number[] {\n  const length = numbers.length;\n  const mid = Math.floor(length * 0.5);\n  const left = numbers.slice(0, mid);\n  const right = numbers.slice(mid, length);\n\n  if (length === 1) {\n    return numbers;\n  }\n\n  return merge(mergeSort(left), mergeSort(right));\n}\n\nconsole.log(mergeSort([1, 600, 199, 20, 7, 6, 8, 1300, 12, 601]));\n")))))}c.isMDXComponent=!0},99290:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/merge_sort-de730a5e2b905dfe8e7a8ac41c063d31.png"}}]);