"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[21125],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(t),h=a,f=d["".concat(l,".").concat(h)]||d[h]||p[h]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},33409:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(83117),a=(t(67294),t(3905));const i={},o="TypeScript Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/typescript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/typescript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/typescript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/swift/example2"},next:{title:"Command",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/"}},l={},c=[],u={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Chain of Responsibility Design Pattern\n *\n * Intent: Lets you pass requests along a chain of handlers. Upon receiving a\n * request, each handler decides either to process the request or to pass it to\n * the next handler in the chain.\n */\n\n/**\n * The Handler interface declares a method for building the chain of handlers.\n * It also declares a method for executing a request.\n */\ninterface Handler {\n  setNext(handler: Handler): Handler;\n\n  handle(request: string): string;\n}\n\n/**\n * The default chaining behavior can be implemented inside a base handler class.\n */\nabstract class AbstractHandler implements Handler {\n  private nextHandler: Handler;\n\n  public setNext(handler: Handler): Handler {\n    this.nextHandler = handler;\n    // Returning a handler from here will let us link handlers in a\n    // convenient way like this:\n    // monkey.setNext(squirrel).setNext(dog);\n    return handler;\n  }\n\n  public handle(request: string): string {\n    if (this.nextHandler) {\n      return this.nextHandler.handle(request);\n    }\n\n    return null;\n  }\n}\n\n/**\n * All Concrete Handlers either handle a request or pass it to the next handler\n * in the chain.\n */\nclass MonkeyHandler extends AbstractHandler {\n  public handle(request: string): string {\n    if (request === "Banana") {\n      return `Monkey: I\'ll eat the ${request}.`;\n    }\n    return super.handle(request);\n  }\n}\n\nclass SquirrelHandler extends AbstractHandler {\n  public handle(request: string): string {\n    if (request === "Nut") {\n      return `Squirrel: I\'ll eat the ${request}.`;\n    }\n    return super.handle(request);\n  }\n}\n\nclass DogHandler extends AbstractHandler {\n  public handle(request: string): string {\n    if (request === "MeatBall") {\n      return `Dog: I\'ll eat the ${request}.`;\n    }\n    return super.handle(request);\n  }\n}\n\n/**\n * The client code is usually suited to work with a single handler. In most\n * cases, it is not even aware that the handler is part of a chain.\n */\nfunction clientCode(handler: Handler) {\n  const foods = ["Nut", "Banana", "Cup of coffee"];\n\n  for (const food of foods) {\n    console.log(`Client: Who wants a ${food}?`);\n\n    const result = handler.handle(food);\n    if (result) {\n      console.log(`  ${result}`);\n    } else {\n      console.log(`  ${food} was left untouched.`);\n    }\n  }\n}\n\n/**\n * The other part of the client code constructs the actual chain.\n */\nconst monkey = new MonkeyHandler();\nconst squirrel = new SquirrelHandler();\nconst dog = new DogHandler();\n\nmonkey.setNext(squirrel).setNext(dog);\n\n/**\n * The client should be able to send a request to any handler, not just the\n * first one in the chain.\n */\nconsole.log("Chain: Monkey > Squirrel > Dog\\n");\nclientCode(monkey);\nconsole.log("");\n\nconsole.log("Subchain: Squirrel > Dog\\n");\nclientCode(squirrel);\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Chain: Monkey > Squirrel > Dog\n\nClient: Who wants a Nut?\n  Squirrel: I'll eat the Nut.\nClient: Who wants a Banana?\n  Monkey: I'll eat the Banana.\nClient: Who wants a Cup of coffee?\n  Cup of coffee was left untouched.\n\nSubchain: Squirrel > Dog\n\nClient: Who wants a Nut?\n  Squirrel: I'll eat the Nut.\nClient: Who wants a Banana?\n  Banana was left untouched.\nClient: Who wants a Cup of coffee?\n  Cup of coffee was left untouched.\n")))}p.isMDXComponent=!0}}]);