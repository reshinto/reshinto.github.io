"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[56119],{3905:(e,n,i)=>{i.d(n,{Zo:()=>a,kt:()=>m});var t=i(67294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function l(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?o(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function c(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var p=t.createContext({}),s=function(e){var n=t.useContext(p),i=n;return e&&(i="function"==typeof e?e(n):l(l({},n),e)),i},a=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,a=c(e,["components","mdxType","originalType","parentName"]),d=s(i),m=r,y=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return i?t.createElement(y,l(l({ref:n},a),{},{components:i})):t.createElement(y,l({ref:n},a))}));function m(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=i.length,l=new Array(o);l[0]=d;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var s=2;s<o;s++)l[s]=i[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,i)}d.displayName="MDXCreateElement"},64222:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var t=i(83117),r=(i(67294),i(3905));const o={},l="TypeScript Example",c={unversionedId:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/typescript/readme",id:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/typescript/readme",title:"TypeScript Example",description:"Violate LSP",source:"@site/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/typescript/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/typescript",slug:"/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/typescript/",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Example",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/python/"},next:{title:"Open Closed Principle (OCP)",permalink:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/"}},p={},s=[{value:"Violate LSP",id:"violate-lsp",level:2},{value:"Pass LSP",id:"pass-lsp",level:2}],a={toc:s};function u(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,t.Z)({},a,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,r.kt)("h2",{id:"violate-lsp"},"Violate LSP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'interface Bird {\n  fly(): void;\n}\n\nclass Duck implements Bird {\n  quack() {\n    console.log("I can quack");\n  }\n\n  fly() {\n    console.log("I can fly");\n  }\n}\n\nclass Penguin implements Bird {\n  fly() {\n    throw new Error("Cannot fly");\n  }\n\n  swim() {\n    console.log("I can swim");\n  }\n}\n\n// this violates the Liskov Substitution Principle\n// as not every bird can fly\nfunction makeBirdFly(bird: Bird) {\n  bird.fly();\n}\n\nconst duck = new Duck();\nconst penguin = new Penguin();\n\nmakeBirdFly(duck);\nmakeBirdFly(penguin); // throws an error as penguin can\'t fly\n')),(0,r.kt)("h2",{id:"pass-lsp"},"Pass LSP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'interface FlyingBird {\n  fly(): void;\n}\n\ninterface SwimmingBird {\n  swim(): void;\n}\n\nclass Duck2 implements FlyingBird {\n  quack() {\n    console.log("I can quack");\n  }\n\n  fly() {\n    console.log("I can fly");\n  }\n}\n\nclass Penguin2 implements SwimmingBird {\n  swim() {\n    console.log("I can swim");\n  }\n}\n\nfunction makeFlyingBirdFly(bird: FlyingBird) {\n  bird.fly();\n}\n\nfunction makeSwimmingBirdSwim(bird: SwimmingBird) {\n  bird.swim();\n}\n\nconst duck2 = new Duck2();\nconst penguin2 = new Penguin2();\n\nmakeFlyingBirdFly(duck2);\nmakeSwimmingBirdSwim(penguin2);\n')))}u.isMDXComponent=!0}}]);