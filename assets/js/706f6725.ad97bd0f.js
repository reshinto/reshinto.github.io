"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[83584],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),p=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=p(e.components);return o.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(t),h=r,f=d["".concat(c,".").concat(h)]||d[h]||m[h]||a;return t?o.createElement(f,s(s({ref:n},l),{},{components:t})):o.createElement(f,s({ref:n},l))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<a;p++)s[p]=t[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},31383:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=t(83117),r=(t(67294),t(3905));const a={},s="Python Example",i={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Composite/python/readme",id:"interviewPrep/designPatterns/Structural_patterns/Composite/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Composite/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Composite/python",slug:"/interviewPrep/designPatterns/Structural_patterns/Composite/python/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Composite/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Composite/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Composite/javascript/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Composite/python/example2"}},c={},p=[],l={toc:p};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-example"},"Python Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"""\nComposite Design Pattern\n\nIntent: Lets you compose objects into tree structures and then work with these\nstructures as if they were individual objects.\n"""\n\n\nfrom __future__ import annotations\nfrom abc import ABC, abstractmethod\nfrom typing import List\n\n\nclass Component(ABC):\n    """\n    The base Component class declares common operations for both simple and\n    complex objects of a composition.\n    """\n\n    @property\n    def parent(self) -> Component:\n        return self._parent\n\n    @parent.setter\n    def parent(self, parent: Component):\n        """\n        Optionally, the base Component can declare an interface for setting and\n        accessing a parent of the component in a tree structure. It can also\n        provide some default implementation for these methods.\n        """\n\n        self._parent = parent\n\n    """\n    In some cases, it would be beneficial to define the child-management\n    operations right in the base Component class. This way, you won\'t need to\n    expose any concrete component classes to the client code, even during the\n    object tree assembly. The downside is that these methods will be empty for\n    the leaf-level components.\n    """\n\n    def add(self, component: Component) -> None:\n        pass\n\n    def remove(self, component: Component) -> None:\n        pass\n\n    def is_composite(self) -> bool:\n        """\n        You can provide a method that lets the client code figure out whether a\n        component can bear children.\n        """\n\n        return False\n\n    @abstractmethod\n    def operation(self) -> str:\n        """\n        The base Component may implement some default behavior or leave it to\n        concrete classes (by declaring the method containing the behavior as\n        "abstract").\n        """\n\n        pass\n\n\nclass Leaf(Component):\n    """\n    The Leaf class represents the end objects of a composition. A leaf can\'t\n    have any children.\n\n    Usually, it\'s the Leaf objects that do the actual work, whereas Composite\n    objects only delegate to their sub-components.\n    """\n\n    def operation(self) -> str:\n        return "Leaf"\n\n\nclass Composite(Component):\n    """\n    The Composite class represents the complex components that may have\n    children. Usually, the Composite objects delegate the actual work to their\n    children and then "sum-up" the result.\n    """\n\n    def __init__(self) -> None:\n        self._children: List[Component] = []\n\n    """\n    A composite object can add or remove other components (both simple or\n    complex) to or from its child list.\n    """\n\n    def add(self, component: Component) -> None:\n        self._children.append(component)\n        component.parent = self\n\n    def remove(self, component: Component) -> None:\n        self._children.remove(component)\n        component.parent = None\n\n    def is_composite(self) -> bool:\n        return True\n\n    def operation(self) -> str:\n        """\n        The Composite executes its primary logic in a particular way. It\n        traverses recursively through all its children, collecting and summing\n        their results. Since the composite\'s children pass these calls to their\n        children and so forth, the whole object tree is traversed as a result.\n        """\n\n        results = []\n        for child in self._children:\n            results.append(child.operation())\n        return f"Branch({\'+\'.join(results)})"\n\n\ndef client_code(component: Component) -> None:\n    """\n    The client code works with all of the components via the base interface.\n    """\n\n    print(f"RESULT: {component.operation()}", end="")\n\n\ndef client_code2(component1: Component, component2: Component) -> None:\n    """\n    Thanks to the fact that the child-management operations are declared in the\n    base Component class, the client code can work with any component, simple or\n    complex, without depending on their concrete classes.\n    """\n\n    if component1.is_composite():\n        component1.add(component2)\n\n    print(f"RESULT: {component1.operation()}", end="")\n\n\nif __name__ == "__main__":\n    # This way the client code can support the simple leaf components...\n    simple = Leaf()\n    print("Client: I\'ve got a simple component:")\n    client_code(simple)\n    print("\\n")\n\n    # ...as well as the complex composites.\n    tree = Composite()\n\n    branch1 = Composite()\n    branch1.add(Leaf())\n    branch1.add(Leaf())\n\n    branch2 = Composite()\n    branch2.add(Leaf())\n\n    tree.add(branch1)\n    tree.add(branch2)\n\n    print("Client: Now I\'ve got a composite tree:")\n    client_code(tree)\n    print("\\n")\n\n    print("Client: I don\'t need to check the components classes even when managing the tree:")\n    client_code2(tree, simple)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Client: I've got a simple component:\nRESULT: Leaf\n\nClient: Now I've got a composite tree:\nRESULT: Branch(Branch(Leaf+Leaf)+Branch(Leaf))\n\nClient: I don't need to check the components classes even when managing the tree:\nRESULT: Branch(Branch(Leaf+Leaf)+Branch(Leaf)+Leaf)\n")))}m.isMDXComponent=!0}}]);