"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[63886],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(t),h=a,f=p["".concat(o,".").concat(h)]||p[h]||c[h]||i;return t?r.createElement(f,l(l({ref:n},d),{},{components:t})):r.createElement(f,l({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1730:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(83117),a=(t(67294),t(3905));const i={},l="C++ Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cPlusPlus/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cPlusPlus",slug:"/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chain of Responsibility",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/cSharp/"}},o={},u=[],d={toc:u};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-example"},"C++ Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n#include <vector>\n\n/**\n * Chain of Responsibility Design Pattern\n *\n * Intent: Lets you pass requests along a chain of handlers. Upon receiving a\n * request, each handler decides either to process the request or to pass it to\n * the next handler in the chain.\n */\n/**\n * The Handler interface declares a method for building the chain of handlers.\n * It also declares a method for executing a request.\n */\nclass Handler {\n public:\n  virtual Handler *SetNext(Handler *handler) = 0;\n  virtual std::string Handle(std::string request) = 0;\n};\n/**\n * The default chaining behavior can be implemented inside a base handler class.\n */\nclass AbstractHandler : public Handler {\n  /**\n   * @var Handler\n   */\n private:\n  Handler *next_handler_;\n\n public:\n  AbstractHandler() : next_handler_(nullptr) {\n  }\n  Handler *SetNext(Handler *handler) override {\n    this->next_handler_ = handler;\n    // Returning a handler from here will let us link handlers in a convenient\n    // way like this:\n    // $monkey->setNext($squirrel)->setNext($dog);\n    return handler;\n  }\n  std::string Handle(std::string request) override {\n    if (this->next_handler_) {\n      return this->next_handler_->Handle(request);\n    }\n\n    return {};\n  }\n};\n/**\n * All Concrete Handlers either handle a request or pass it to the next handler\n * in the chain.\n */\nclass MonkeyHandler : public AbstractHandler {\n public:\n  std::string Handle(std::string request) override {\n    if (request == "Banana") {\n      return "Monkey: I\'ll eat the " + request + ".\\n";\n    } else {\n      return AbstractHandler::Handle(request);\n    }\n  }\n};\nclass SquirrelHandler : public AbstractHandler {\n public:\n  std::string Handle(std::string request) override {\n    if (request == "Nut") {\n      return "Squirrel: I\'ll eat the " + request + ".\\n";\n    } else {\n      return AbstractHandler::Handle(request);\n    }\n  }\n};\nclass DogHandler : public AbstractHandler {\n public:\n  std::string Handle(std::string request) override {\n    if (request == "MeatBall") {\n      return "Dog: I\'ll eat the " + request + ".\\n";\n    } else {\n      return AbstractHandler::Handle(request);\n    }\n  }\n};\n/**\n * The client code is usually suited to work with a single handler. In most\n * cases, it is not even aware that the handler is part of a chain.\n */\nvoid ClientCode(Handler &handler) {\n  std::vector<std::string> food = {"Nut", "Banana", "Cup of coffee"};\n  for (const std::string &f : food) {\n    std::cout << "Client: Who wants a " << f << "?\\n";\n    const std::string result = handler.Handle(f);\n    if (!result.empty()) {\n      std::cout << "  " << result;\n    } else {\n      std::cout << "  " << f << " was left untouched.\\n";\n    }\n  }\n}\n/**\n * The other part of the client code constructs the actual chain.\n */\nint main() {\n  MonkeyHandler *monkey = new MonkeyHandler;\n  SquirrelHandler *squirrel = new SquirrelHandler;\n  DogHandler *dog = new DogHandler;\n  monkey->SetNext(squirrel)->SetNext(dog);\n\n  /**\n   * The client should be able to send a request to any handler, not just the\n   * first one in the chain.\n   */\n  std::cout << "Chain: Monkey > Squirrel > Dog\\n\\n";\n  ClientCode(*monkey);\n  std::cout << "\\n";\n  std::cout << "Subchain: Squirrel > Dog\\n\\n";\n  ClientCode(*squirrel);\n\n  delete monkey;\n  delete squirrel;\n  delete dog;\n\n  return 0;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Chain: Monkey > Squirrel > Dog\n\nClient: Who wants a Nut?\n  Squirrel: I'll eat the Nut.\nClient: Who wants a Banana?\n  Monkey: I'll eat the Banana.\nClient: Who wants a Cup of coffee?\n  Cup of coffee was left untouched.\n\nSubchain: Squirrel > Dog\n\nClient: Who wants a Nut?\n  Squirrel: I'll eat the Nut.\nClient: Who wants a Banana?\n  Banana was left untouched.\nClient: Who wants a Cup of coffee?\n  Cup of coffee was left untouched.\n")))}c.isMDXComponent=!0}}]);