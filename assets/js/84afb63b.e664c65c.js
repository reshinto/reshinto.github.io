"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[7532],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,k=c["".concat(s,".").concat(d)]||c[d]||u[d]||i;return a?n.createElement(k,l(l({ref:t},m),{},{components:a})):n.createElement(k,l({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},74755:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={},l="Java",o={unversionedId:"languageSpecific/java/readme",id:"languageSpecific/java/readme",title:"Java",description:"- what is java",source:"@site/docs/languageSpecific/java/readme.md",sourceDirName:"languageSpecific/java",slug:"/languageSpecific/java/",permalink:"/docs/languageSpecific/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/languageSpecific/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"HTML",permalink:"/docs/languageSpecific/html/"},next:{title:"GUI example",permalink:"/docs/languageSpecific/java/GUI/"}},s={},p=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Compiled Language",id:"compiled-language",level:2},{value:"Statically-typed Language: resolution of types, members, properties, methods are done at compile-time",id:"statically-typed-language-resolution-of-types-members-properties-methods-are-done-at-compile-time",level:3},{value:"trying to access a method that is not defined in an object when compiling the app will get an immediate error feedback",id:"trying-to-access-a-method-that-is-not-defined-in-an-object-when-compiling-the-app-will-get-an-immediate-error-feedback",level:4},{value:"Hello World",id:"hello-world",level:2},{value:"Comments",id:"comments",level:2},{value:"Print",id:"print",level:2},{value:"Data types",id:"data-types",level:2},{value:"java 8",id:"java-8",level:3},{value:"2 major data types",id:"2-major-data-types",level:4},{value:"Variable declaration",id:"variable-declaration",level:2},{value:"Variable declaration int",id:"variable-declaration-int",level:2},{value:"Variable declaration float",id:"variable-declaration-float",level:2},{value:"Variable declaration None",id:"variable-declaration-none",level:2},{value:"Boolean",id:"boolean",level:2},{value:"Strings",id:"strings",level:2},{value:"String Concatenation",id:"string-concatenation",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:2},{value:"Comparison Operators",id:"comparison-operators",level:2},{value:"Logical Operators",id:"logical-operators",level:2},{value:"Bitwise Operators",id:"bitwise-operators",level:2},{value:"Increment",id:"increment",level:2},{value:"Getting Input",id:"getting-input",level:2},{value:"Arrays and Lists",id:"arrays-and-lists",level:2},{value:"Conditional Statement",id:"conditional-statement",level:2},{value:"Loops",id:"loops",level:2},{value:"Instantiation",id:"instantiation",level:2},{value:"Functions",id:"functions",level:2},{value:"Higher order functions",id:"higher-order-functions",level:2},{value:"Hash Tables",id:"hash-tables",level:2},{value:"Collections",id:"collections",level:2},{value:"Destructuring",id:"destructuring",level:2},{value:"Spread Operator",id:"spread-operator",level:2},{value:"Rest parameters",id:"rest-parameters",level:2},{value:"Class",id:"class",level:2},{value:"Importing Libraries",id:"importing-libraries",level:2},{value:"Type Conversions",id:"type-conversions",level:2},{value:"Find Data Type",id:"find-data-type",level:2},{value:"JSON",id:"json",level:2},{value:"Program Entry Point",id:"program-entry-point",level:2},{value:"Swapping values",id:"swapping-values",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Custom Error",id:"custom-error",level:2},{value:"Asynchronous",id:"asynchronous",level:2},{value:"Math",id:"math",level:2},{value:"Date and Time",id:"date-and-time",level:2},{value:"File System",id:"file-system",level:2},{value:"Access modifier",id:"access-modifier",level:2},{value:"Iterators",id:"iterators",level:2},{value:"Generators",id:"generators",level:2},{value:"Fetching Web Data",id:"fetching-web-data",level:2},{value:"Enum",id:"enum",level:2},{value:"Language Specific",id:"language-specific",level:2}],m={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"java"},"Java"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"what is java"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a simple language"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"derives its syntax from C++",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"removed many confusing and rarely-used features e.g. explicit pointers, operator overloading, etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/similarities-and-difference-between-java-and-c/"},"Similarities and Difference between Java and C++")))),(0,r.kt)("li",{parentName:"ul"},"takes care of memory management"),(0,r.kt)("li",{parentName:"ul"},"it provides an automatic garbage collector",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"collects the unused objects automatically"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a multithreaded language"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Java can perform many tasks at once by defining multiple threads",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For example, a program that manages a Graphical User Interface (GUI) while waiting for input from a network connection uses another thread to perform and wait instead of using the default GUI thread for both tasks, keeping the GUI responsive"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"can create applets"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Applets are programs that run in web browsers"),(0,r.kt)("li",{parentName:"ul"},"But applets support was deprecated in Java 9 release and has been removed in Java 11 release due to waning browser support for the Java plugin"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"object-oriented"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"OOP makes the complete program simpler by dividing it into a number of objects"),(0,r.kt)("li",{parentName:"ul"},"The objects can be used as a bridge to have data flow from one function to another"),(0,r.kt)("li",{parentName:"ul"},"We can easily modify data and functions as per the requirements of the program"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"does not require any preprocessor"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It does not require inclusion of header files for creating a Java application"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"platform-independent"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"programs written after compilation, are converted into an intermediate level language called the ",(0,r.kt)("inlineCode",{parentName:"li"},"bytecode"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it is a part of the Java platform irrespective of the machine on which the programs run"),(0,r.kt)("li",{parentName:"ul"},"Every Operating System has a different JVM",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"but the output they produce after the execution of bytecode is the same across all the operating systems"))))),(0,r.kt)("li",{parentName:"ul"},"This makes java highly portable as its bytecodes can be run on any machine by an interpreter called the ",(0,r.kt)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/jvm-works-jvm-architecture/"},"Java Virtual Machine (JVM)")," thus it provides \u2018reusability of code\u2019",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/jvm-works-jvm-architecture/"},"How JVM works - JVM architecture")),(0,r.kt)("li",{parentName:"ul"},"each java app executes within its own instance of the JVM"),(0,r.kt)("li",{parentName:"ul"},"the operating system treats that JVM instance as a separate, independent process"),(0,r.kt)("li",{parentName:"ul"},"thus if multiple java apps were run at the same time, they will each execute in a separate JVM process with their own independent memory space"),(0,r.kt)("li",{parentName:"ul"},"have 3 execution phases of a program",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"written",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Writing a program is done by a java programmer like you and me"))),(0,r.kt)("li",{parentName:"ol"},"compile",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The compilation is done by the JAVAC compiler which is a primary Java compiler included in the Java development kit (JDK)"),(0,r.kt)("li",{parentName:"ul"},"It takes the Java program as input and generates bytecode as output",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"so that it can be executed by JVM"),(0,r.kt)("li",{parentName:"ul"},"It is saved as .class file by the compiler"),(0,r.kt)("li",{parentName:"ul"},"To view the bytecode, a disassembler like javap can be used"))))),(0,r.kt)("li",{parentName:"ol"},"run",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In the Running phase of a program, JVM executes the bytecode generated by the compiler"))))))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a robust language"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Java programs must be reliable because they are used in both consumer and mission-critical applications, ranging from Blu-ray players to navigation systems"),(0,r.kt)("li",{parentName:"ul"},"It is developed in such a way that it puts a lot of effort into checking errors as early as possible",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"that is why the java compiler is able to detect even those errors that are not easy to detect by another programming language"))),(0,r.kt)("li",{parentName:"ul"},"The main features of java that make it robust are garbage collection, Exception Handling, and memory allocation"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Java Development Kit (JDK)"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{parentName:"p",src:"https://media.geeksforgeeks.org/wp-content/uploads/20210218150010/JDK.png",alt:"JDK"})),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it is a complete Java development kit that includes tools such as the compiler, Java Runtime Environment (JRE), java debuggers, java docs, Jar, etc."),(0,r.kt)("li",{parentName:"ul"},"For the program to execute in java, we need to install JDK on our computer in order to create, compile and run the java program"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Java Runtime Environment (JRE)"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"JDK includes JRE",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"JRE installation on our computers allows the java program to run",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"however, we cannot compile it"))),(0,r.kt)("li",{parentName:"ul"},"it contains the parts of the Java libraries required to run Java programs and is intended for end-users"))),(0,r.kt)("li",{parentName:"ul"},"JRE includes a browser, JVM, applet supports, and plugins",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For running the java program, a computer needs JRE"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/differences-jdk-jre-jvm/"},"Differences between JDK, JRE and JVM"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Garbage Collector"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"programmers can\u2019t delete the objects"),(0,r.kt)("li",{parentName:"ul"},"To delete or recollect that memory JVM has a program called Garbage Collector",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Garbage Collectors can recollect the objects that are not referenced"),(0,r.kt)("li",{parentName:"ul"},"Java makes the life of a programmer easy by handling memory management",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"However, programmers should be careful about their code whether they are using objects that have been used for a long time",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Because Garbage cannot recover the memory of objects being referenced"))))))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"ClassPath"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it is the file path where the java runtime and Java compiler look for .class files to load"),(0,r.kt)("li",{parentName:"ul"},"By default, JDK provides many libraries"),(0,r.kt)("li",{parentName:"ul"},"to include external libraries they should be added to the class path"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/introduction-to-java/#Primary/Main%20Features%20of%20Java:~:text=Primary/Main%20Features%20of%20Java"},"Primary/Main Features of Java"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Java keywords"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"words in a language that are used for some internal process or represent some predefined actions"),(0,r.kt)("li",{parentName:"ul"},"These words are not allowed to use as variable names or objects"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"abstract")," ",(0,r.kt)("inlineCode",{parentName:"li"},"assert")," ",(0,r.kt)("inlineCode",{parentName:"li"},"boolean")," ",(0,r.kt)("inlineCode",{parentName:"li"},"break")," ",(0,r.kt)("inlineCode",{parentName:"li"},"byte")," ",(0,r.kt)("inlineCode",{parentName:"li"},"case")," ",(0,r.kt)("inlineCode",{parentName:"li"},"catch")," ",(0,r.kt)("inlineCode",{parentName:"li"},"char")," ",(0,r.kt)("inlineCode",{parentName:"li"},"class")," ",(0,r.kt)("inlineCode",{parentName:"li"},"const")," ",(0,r.kt)("inlineCode",{parentName:"li"},"continue")," ",(0,r.kt)("inlineCode",{parentName:"li"},"default")," ",(0,r.kt)("inlineCode",{parentName:"li"},"do")," ",(0,r.kt)("inlineCode",{parentName:"li"},"double")," ",(0,r.kt)("inlineCode",{parentName:"li"},"else")," ",(0,r.kt)("inlineCode",{parentName:"li"},"enum")," ",(0,r.kt)("inlineCode",{parentName:"li"},"extends")," ",(0,r.kt)("inlineCode",{parentName:"li"},"final")," ",(0,r.kt)("inlineCode",{parentName:"li"},"finally")," ",(0,r.kt)("inlineCode",{parentName:"li"},"float")," ",(0,r.kt)("inlineCode",{parentName:"li"},"for")," ",(0,r.kt)("inlineCode",{parentName:"li"},"goto")," ",(0,r.kt)("inlineCode",{parentName:"li"},"if")," ",(0,r.kt)("inlineCode",{parentName:"li"},"implements")," ",(0,r.kt)("inlineCode",{parentName:"li"},"import")," ",(0,r.kt)("inlineCode",{parentName:"li"},"instanceof")," ",(0,r.kt)("inlineCode",{parentName:"li"},"int")," ",(0,r.kt)("inlineCode",{parentName:"li"},"interface")," ",(0,r.kt)("inlineCode",{parentName:"li"},"long")," ",(0,r.kt)("inlineCode",{parentName:"li"},"native")," ",(0,r.kt)("inlineCode",{parentName:"li"},"new")," ",(0,r.kt)("inlineCode",{parentName:"li"},"package")," ",(0,r.kt)("inlineCode",{parentName:"li"},"private")," ",(0,r.kt)("inlineCode",{parentName:"li"},"protected")," ",(0,r.kt)("inlineCode",{parentName:"li"},"public")," ",(0,r.kt)("inlineCode",{parentName:"li"},"return")," ",(0,r.kt)("inlineCode",{parentName:"li"},"short")," ",(0,r.kt)("inlineCode",{parentName:"li"},"static")," ",(0,r.kt)("inlineCode",{parentName:"li"},"strictfp")," ",(0,r.kt)("inlineCode",{parentName:"li"},"super")," ",(0,r.kt)("inlineCode",{parentName:"li"},"switch")," ",(0,r.kt)("inlineCode",{parentName:"li"},"synchronized")," ",(0,r.kt)("inlineCode",{parentName:"li"},"this")," ",(0,r.kt)("inlineCode",{parentName:"li"},"throw")," ",(0,r.kt)("inlineCode",{parentName:"li"},"throws")," ",(0,r.kt)("inlineCode",{parentName:"li"},"transient")," ",(0,r.kt)("inlineCode",{parentName:"li"},"try")," ",(0,r.kt)("inlineCode",{parentName:"li"},"void")," ",(0,r.kt)("inlineCode",{parentName:"li"},"volatile")," ",(0,r.kt)("inlineCode",{parentName:"li"},"while"))))),(0,r.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#compiled-language"},"Compiled Language")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#hello-world"},"Hello World")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#comments"},"Comments")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#print"},"Print")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#data-types"},"Data types")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#variable-declaration"},"Variable declaration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#variable-declaration-int"},"Variable declaration int")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#variable-declaration-float"},"Variable declaration float")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#variable-declaration-none"},"Variable declaration None")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#boolean"},"Boolean")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#strings"},"Strings")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#string-concatenation"},"String Concatenation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#arithmetic-operators"},"Arithmetic Operators")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#comparison-operators"},"Comparison Operators")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#logical-operators"},"Logical Operators")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#bitwise-operators"},"Bitwise Operators")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#increment"},"Increment")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#getting-input"},"Getting Input")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#arrays-and-lists"},"Arrays and Lists")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#conditional-statement"},"Conditional Statement")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#loops"},"Loops")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#instantiation"},"Instantiation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#functions"},"Functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#higher-order-functions"},"Higher order functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#hash-tables"},"Hash Tables")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#collections"},"Collections")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#destructuring"},"Destructuring")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#spread-operator"},"Spread Operator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rest-parameters"},"Rest parameters")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#class"},"Class")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#importing-libraries"},"Importing Libraries")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#type-conversions"},"Type Conversions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#find-data-type"},"Find Data Type")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#json"},"JSON")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#program-entry-point"},"Program Entry Point")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#swapping-values"},"Swapping values")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#error-handling"},"Error Handling")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#custom-error"},"Custom Error")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#asynchronous"},"Asynchronous")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#math"},"Math")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#date-and-time"},"Date and Time")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#access-modifier"},"Access modifier")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#file-system"},"File System")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#iterators"},"Iterators")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#generators"},"Generators")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#fetching-web-data"},"Fetching Web Data")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#enum"},"Enum")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#language-specific"},"Language Specific"))),(0,r.kt)("h2",{id:"compiled-language"},"Compiled Language"),(0,r.kt)("h3",{id:"statically-typed-language-resolution-of-types-members-properties-methods-are-done-at-compile-time"},"Statically-typed Language: resolution of types, members, properties, methods are done at compile-time"),(0,r.kt)("h4",{id:"trying-to-access-a-method-that-is-not-defined-in-an-object-when-compiling-the-app-will-get-an-immediate-error-feedback"},"trying to access a method that is not defined in an object when compiling the app will get an immediate error feedback"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Java: compiled to bytecode then interpreted by Java virtual machine into machine code"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Features"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"not compatible with other languages"),(0,r.kt)("li",{parentName:"ul"},"calls to native functions go through Java Native Interface (JNI)"),(0,r.kt)("li",{parentName:"ul"},"write once, run anywhere"),(0,r.kt)("li",{parentName:"ul"},"runs in a protected Java Virtual Machine (JVM)"),(0,r.kt)("li",{parentName:"ul"},"managed memory access"),(0,r.kt)("li",{parentName:"ul"},"limited to single inheritance"),(0,r.kt)("li",{parentName:"ul"},"class-based inheritance"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Types"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Java Platform, Standard Edition (SE)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Core language and Java Runtime Environment (JRE)"))),(0,r.kt)("li",{parentName:"ul"},"Java Platform, Enterprise Edition (EE)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Recommendation for industrial-strength web applications"))),(0,r.kt)("li",{parentName:"ul"},"Java Platform, Micro Edition (ME)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Microcontrollers, sensors, mobile devices, telephone sim cards"),(0,r.kt)("li",{parentName:"ul"},"A subset of Java SE"))),(0,r.kt)("li",{parentName:"ul"},"Java FX",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Desktop application framework (windows, mac, linux)"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Automatic memory management"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"memory for objects are allocated automatically")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"local variables & function calls are stored in stack")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"objects & member variables are stored in heap")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"objects are retained in memory until dereferenced")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"object is eligible for collection when all references expire"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"when do references expire"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"variables local to methods or code blocks expire with scope"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'void changeString() {\n  String localVar = "Won\'t be around for long!";\n  System.out.println("In function: " + localVar);\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"explicitly dereference variables with null keyword"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'void changeString() {\n  String localVar = "Won\'t be around for long!";\n  tempVar = null;\n}\n'))))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"when Java Virtual Machine runs out of memory for a newly requested object"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the system throws ",(0,r.kt)("inlineCode",{parentName:"li"},"OutOfMemoryError")),(0,r.kt)("li",{parentName:"ul"},"Tips for managing memory",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"minimize the number of objects created"),(0,r.kt)("li",{parentName:"ul"},"find out how much memory is available & is currently in used in the virtual machine",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Runtime.maxMemory()")," & ",(0,r.kt)("inlineCode",{parentName:"li"},"Runtime.totalMemory()")))),(0,r.kt)("li",{parentName:"ul"},"setting available memory",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"use command line options to manage amount of available heap memory",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"set initial heap size ",(0,r.kt)("inlineCode",{parentName:"li"},"java -Xms256s HelloWord")),(0,r.kt)("li",{parentName:"ul"},"set max heap size ",(0,r.kt)("inlineCode",{parentName:"li"},"java -Xmx256m HelloWord")),(0,r.kt)("li",{parentName:"ul"},"set heap size for new objects ",(0,r.kt)("inlineCode",{parentName:"li"},"java -Xmn256n HelloWord")))))))))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Java Garbage Collector"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"runs in its own thread"),(0,r.kt)("li",{parentName:"ul"},"allocates & deallocates memory"),(0,r.kt)("li",{parentName:"ul"},"can destroy dereferenced objects, but not required"),(0,r.kt)("li",{parentName:"ul"},"garbage collection is managed by the Virtual Machine"),(0,r.kt)("li",{parentName:"ul"},"cannot force garbage collection as it is an automatic process",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Can run System methods to call garbage collection",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Methods ",(0,r.kt)("inlineCode",{parentName:"li"},"System.gc()")," & ",(0,r.kt)("inlineCode",{parentName:"li"},"Runtime.gc()")," can request garbage collection",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"but there is no guarantee it will happen"))))))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Identifiers and Keywords"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Keywords can't be used as class or other identifiers"),(0,r.kt)("li",{parentName:"ul"},"class, method, field, and other names are identifiers"),(0,r.kt)("li",{parentName:"ul"},"identifiers must start with alpha character or underscore"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Identifier conventions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"classes are always Pascal case ",(0,r.kt)("inlineCode",{parentName:"p"},"class MyClass {}"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"methods and variables are Camel case ",(0,r.kt)("inlineCode",{parentName:"p"},"void doSomething(String withThis) {}"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"constants are all uppercase ",(0,r.kt)("inlineCode",{parentName:"p"},'public static final String FIRSTNAME="Myname";')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"final")," means once it has been set, it can't be changed")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"hello-world"},"Hello World"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"java classes are typically organized into packages",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"package is a global unique string that usually starts with your domain name in reverse domain order",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"ensures globally unique identifiers (e.g.: Main)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if there are more than 1 class named Main in an app",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"can be distinguished by using the package"))))))))),(0,r.kt)("li",{parentName:"ul"},"each source code file will contain 1 public class"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"public")," visible to all classes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"protected")," visible to class they belong and any subclasses"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"private")," (most restricted): visible only to class they belong"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"static")," can be accessed without creating a class instance"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"final")," constant value, value cannot be changed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"void")," means that the method doesn't return any value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package com.example;  // package declaration\n\n// class declaration\npublic class HelloWorld {\n  // main method: always have the 3 keywords (public, static, void)\n  // must also receive an array of strings as an argument\n  // String []args: This is the argument passed to the main function which is an array of strings with the array name args\n  // One can choose their own flexible name but this name is used by many developers\n  public static void main(String[] args) {\n    // executable code\n    System.out.println("Hello World");  // adds new line after printing\n    System.out.print("Hello World");  // no new line is added after\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"comments"},"Comments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Single line comment\n\n/*\nmulti-line comments\n*/\n\n/**\n * javadoc <b>documentation comments</b> for classes, javadocs can be used to auto generate documentation documents for code commented with javadocs\n */\n\n /**\n * javadoc <b>comments</b> for methods with parameters - example main method\n * @param args - an array of string values\n */\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"print"},"Print"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'System.out.println("Hello World");  // adds new line after printing\nSystem.out.print("Hello World");  // no new line is added after\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"formatting",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.baeldung.com/java-printstream-printf"},"print format reference")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s")," for strings"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"S")," for uppercase strings, it converts lowercase to uppercase"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"c")," for characters"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"C")," for uppercase characters"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"d")," for byte, short, int, long, and BigInteger"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"f")," for float and double"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"t")," for date/time values",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"time",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")," for time hh:mm:ss"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"H")," for hours"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"M")," for minutes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"S")," for seconds"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"L")," for milliseconds"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"N")," for nanoseconds"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"p")," adds a.m./p.m. formatting"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"z")," prints out the time-zone offset"))),(0,r.kt)("li",{parentName:"ul"},"data",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"A")," prints out the full day of the week"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"d")," formats a two-digit day of the month"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"B")," is for the full month name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"m")," formats a two-digit month"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Y")," outputs a year in four digits"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"y")," outputs the last two digits of the year"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"n")," for line separator"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"b")," for boolean")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// syntax\nSystem.out.printf(format, arguments);\nSystem.out.printf(locale, format, arguments);\n\n// example\nSystem.out.printf("Hello %s!%n", "World");  // Hello World!\n\n// add left spaces\nSystem.out.printf("\'%15s\' %n", "baeldung");  // \'       baeldung\'\n\n// add right spaces\nSystem.out.printf("\'%-10s\' %n", "baeldung");  // \'baeldung  \'\n\n// limit number of characters in string\n/*\n%x.ys syntax\nx is the padding, y is the number of chars\n*/\nSystem.out.printf("%2.2s", "Hi there!");  // \'Hi\'\n\n\n// control float precision\n/*\n%x.yf syntax\nx is the padding, y is the number of decimal places\n*/\nSystem.out.printf("\'%5.2f\'%n", 5.1473);  // \' 5.15\'\n\n// using locale to format numbers\nimport java.util.Locale;\nSystem.out.printf(Locale.US, "%,d %n", 10000);  // 10,000\nSystem.out.printf(Locale.ITALY, "%,d %n", 10000);  // 10.000\n\n// dates\nimport java.util.Date;\nSystem.out.printf("%tT%n", date);  // 13:51:15\nSystem.out.printf("hours %tH: minutes %tM: seconds %tS%n", date, date, date);  // hours 13: minutes 51: seconds 15\n\n// extracting from 1 argument\nSystem.out.printf("hours %1$tH: minutes %1$tM: seconds %1$tS%n", date);  // hours 13: minutes 51: seconds 15\n\n// date words format\nSystem.out.printf("%1$tA, %1$tB %1$tY %n", date);  // Thursday, November 2018\n\n// date numeric format\nSystem.out.printf("%1$td.%1$tm.%1$ty %n", date);  // 22.11.18\n\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"data-types"},"Data types"),(0,r.kt)("h3",{id:"java-8"},"java 8"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://media.geeksforgeeks.org/wp-content/cdn-uploads/20191105111644/Data-types-in-Java.jpg",alt:"data types"})),(0,r.kt)("h4",{id:"2-major-data-types"},"2 major data types"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Primitive data types"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{parentName:"p",src:"https://media.geeksforgeeks.org/wp-content/cdn-uploads/20191105122725/Primitive-Data-Types-in-Java-4.jpg",alt:"primitive data types"})),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"stored in fastest available memory")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"names are all camel case")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Java class library includes helper classes for each primitive"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"helper classes support conversion and formatting tools"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"import java.lang.Byte;")," import not required from java.lang libraries"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"all primitive numeric variables default to 0"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class Main {\n  private static int myInt;  // must be declared as static of a class to have default value\n\n  public static void main(String args[]) {\n    System.out.println(myInt);  // 0\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"data types"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"numbers"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"byte"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"8 bits"),(0,r.kt)("li",{parentName:"ul"},"-128 to 127"),(0,r.kt)("li",{parentName:"ul"},"default value ",(0,r.kt)("inlineCode",{parentName:"li"},"0")),(0,r.kt)("li",{parentName:"ul"},"helper class ",(0,r.kt)("inlineCode",{parentName:"li"},"Byte")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"short"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"16 bits"),(0,r.kt)("li",{parentName:"ul"},"-32,768 to 32,767"),(0,r.kt)("li",{parentName:"ul"},"default value ",(0,r.kt)("inlineCode",{parentName:"li"},"0")),(0,r.kt)("li",{parentName:"ul"},"helper class ",(0,r.kt)("inlineCode",{parentName:"li"},"Short")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"int"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"32 bits"),(0,r.kt)("li",{parentName:"ul"},"-2,147,483,648 to 2,147,483,647"),(0,r.kt)("li",{parentName:"ul"},"default value ",(0,r.kt)("inlineCode",{parentName:"li"},"0")),(0,r.kt)("li",{parentName:"ul"},"helper class ",(0,r.kt)("inlineCode",{parentName:"li"},"Integer")),(0,r.kt)("li",{parentName:"ul"},"from JAVA 8 onwards, it can be used to represent an unsigned 32-bit integer"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"long"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"64 bits"),(0,r.kt)("li",{parentName:"ul"},"-9.22337E+18 to 9.22337E+18"),(0,r.kt)("li",{parentName:"ul"},"default value ",(0,r.kt)("inlineCode",{parentName:"li"},"0L")),(0,r.kt)("li",{parentName:"ul"},"helper class ",(0,r.kt)("inlineCode",{parentName:"li"},"Long")),(0,r.kt)("li",{parentName:"ul"},"from JAVA 8 onwards, it can be used to represent an unsigned 64-bit long"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"float"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"32 bits"),(0,r.kt)("li",{parentName:"ul"},"up to 7 decimal digits"),(0,r.kt)("li",{parentName:"ul"},"default value ",(0,r.kt)("inlineCode",{parentName:"li"},"0.0f")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"0.0F")," or ",(0,r.kt)("inlineCode",{parentName:"li"},".0f")," or ",(0,r.kt)("inlineCode",{parentName:"li"},".0F")),(0,r.kt)("li",{parentName:"ul"},"helper class ",(0,r.kt)("inlineCode",{parentName:"li"},"Float")),(0,r.kt)("li",{parentName:"ul"},"use ",(0,r.kt)("inlineCode",{parentName:"li"},"BigDecimal")," class if accuracy is required"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"double"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"64 bits"),(0,r.kt)("li",{parentName:"ul"},"up to 16 decimal digits"),(0,r.kt)("li",{parentName:"ul"},"default value ",(0,r.kt)("inlineCode",{parentName:"li"},"0.0d")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"0.0D")," or ",(0,r.kt)("inlineCode",{parentName:"li"},".0d")," or ",(0,r.kt)("inlineCode",{parentName:"li"},".0D")),(0,r.kt)("li",{parentName:"ul"},"helper class ",(0,r.kt)("inlineCode",{parentName:"li"},"Double")),(0,r.kt)("li",{parentName:"ul"},"use ",(0,r.kt)("inlineCode",{parentName:"li"},"BigDecimal")," class if accuracy is required")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"double doubleValue = 156.5d;\nDouble doubleObj = new Double(doubleValue);  // declare instance of the double class\nint intValue = doubleObj.intValue();  // 156, use helper object to convert to desired numeric data type\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"characters"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"16 bits"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\u0000")," (or 0) to ",(0,r.kt)("inlineCode",{parentName:"li"},"\\uffff")," (or 65,535 inclusive)"),(0,r.kt)("li",{parentName:"ul"},"default value ",(0,r.kt)("inlineCode",{parentName:"li"},"\\u0000")),(0,r.kt)("li",{parentName:"ul"},"java uses the ",(0,r.kt)("inlineCode",{parentName:"li"},"Unicode system")," and not the ",(0,r.kt)("inlineCode",{parentName:"li"},"ASCII code system")," where 8 bits is enough",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Unicode defines a fully international character set that can represent most of the world\u2019s written languages"),(0,r.kt)("li",{parentName:"ul"},"It is a unification of dozens of character sets, such as Latin, Greeks, Cyrillic, Katakana, Arabic, and many more"),(0,r.kt)("li",{parentName:"ul"},"that's why 8 bits is not enough to represent all characters"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"booleans"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"default value ",(0,r.kt)("inlineCode",{parentName:"li"},"false")))))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Non-primitive data type or Reference Data Types"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"it contain a memory address of variable values because the reference types won\u2019t store the variable value directly in memory")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"String")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a complex object"),(0,r.kt)("li",{parentName:"ul"},"is an instance of the string class"),(0,r.kt)("li",{parentName:"ul"},"is an array of characters",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"string is designed to hold a sequence of characters in a single variable",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"whereas, a character array is a collection of separate char type entities"))),(0,r.kt)("li",{parentName:"ul"},"Unlike C/C++, Java strings are not terminated with a null character"))),(0,r.kt)("li",{parentName:"ul"},"string objects are immutable"),(0,r.kt)("li",{parentName:"ul"},"reassigning the string value creates a new object",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the old object can be cleared from memory thrown garbage collection process"))),(0,r.kt)("li",{parentName:"ul"},"helper class is ",(0,r.kt)("inlineCode",{parentName:"li"},"java.lang.String"),", thus import not required")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String string1 = new String("Hello");\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Class")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"it is a user-defined blueprint or prototype from which objects are created")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It represents the set of properties or methods that are common to all objects of one type")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In general, class declarations can include these components, in order:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Modifiers")," A class can be public or has default access"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Class name")," The name should begin with an initial letter (capitalized by convention)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Superclass")," The name of the class\u2019s parent (superclass), if any, preceded by the keyword extends",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A class can only extend (subclass) one parent"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Interfaces")," A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A class can implement more than one interface"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Body")," The class body is surrounded by braces, { }"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It is a basic unit of Object-Oriented Programming and represents real-life entities"),(0,r.kt)("li",{parentName:"ul"},"An object consists of",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"State")," It is represented by the attributes of an object",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It also reflects the properties of an object"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Behavior")," It is represented by the methods of an object",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It also reflects the response of an object to other objects"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Identity")," It gives a unique name to an object and enables one object to interact with other objects"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Interface")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it can have methods and variables, but the methods declared in an interface are by default abstract (only method signature, nobody)"),(0,r.kt)("li",{parentName:"ul"},"Interfaces specify what a class must do and not how",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It is the blueprint of the class"))),(0,r.kt)("li",{parentName:"ul"},"An Interface is about capabilities like a Player may be an interface and any class implementing Player must be able to (or must implement) a method called move",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"So it specifies a set of methods that the class has to implement"))),(0,r.kt)("li",{parentName:"ul"},"If a class implements an interface and does not provide method bodies for all functions specified in the interface, then the class must be declared abstract"),(0,r.kt)("li",{parentName:"ul"},"A Java library example is Comparator Interface",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If a class implements this interface, then it can be used to sort a collection"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Array")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"An array is a group of like-typed variables that are referred to by a common name"),(0,r.kt)("li",{parentName:"ul"},"Arrays in Java work differently than they do in C/C++. The following are some important points about Java arrays",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In Java, all arrays are dynamically allocated"),(0,r.kt)("li",{parentName:"ul"},"Since arrays are objects in Java, we can find their length using member length",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is different from C/C++ where we find length using size"))),(0,r.kt)("li",{parentName:"ul"},"A Java array variable can also be declared like other variables with [] after the data type"),(0,r.kt)("li",{parentName:"ul"},"The variables in the array are ordered and each has an index beginning from 0"),(0,r.kt)("li",{parentName:"ul"},"Java array can also be used as a static field, a local variable, or a method parameter"),(0,r.kt)("li",{parentName:"ul"},"The size of an array must be specified by an int value and not long or short"),(0,r.kt)("li",{parentName:"ul"},"The direct superclass of an array type is ",(0,r.kt)("inlineCode",{parentName:"li"},"Object")),(0,r.kt)("li",{parentName:"ul"},"Every array type implements the interfaces Cloneable and java.io.Serializable")))))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"variable-declaration"},"Variable declaration"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://media.geeksforgeeks.org/wp-content/uploads/Variables-in-Java.png",alt:"Variable declaration"})),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://media.geeksforgeeks.org/wp-content/uploads/20220216012050/variabletypes.png",alt:"Types of variables"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"also referred to as identifiers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Identifiers are the names of local variables, instance and class variables, and labels"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it is also the names for classes, packages, modules and methods"),(0,r.kt)("li",{parentName:"ul"},"All Unicode characters are valid, not just the ASCII subset"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"All identifiers can begin with a letter, a currency symbol or an underscore ",(0,r.kt)("inlineCode",{parentName:"p"},"_"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"According to the convention, a letter should be lower case for variables")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The first character of identifiers can be followed by any combination of letters, digits, currency symbols and the underscore")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The underscore is not recommended for the names of variables")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Constants (static final attributes and enums) should be in all Uppercase letters")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"identifiers are case-sensitive")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A keyword cannot be used as an identifier since it is a reserved word and has some special meaning")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"example"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"Legal identifiers: MinNumber, total, ak74, hello_world, $amount, _under_value\nIllegal identifiers: 74ak, -amount\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"multi variables declaration"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"double num1, num2, num3;\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"type inference: starting from ",(0,r.kt)("inlineCode",{parentName:"p"},"java 10")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"use ",(0,r.kt)("inlineCode",{parentName:"li"},"var")," key word"),(0,r.kt)("li",{parentName:"ul"},"type is derived from assigned value")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"var myVar = 5;  // data type becomes integer\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"primitive numbers are always signed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"long")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"integer")," methods support unsigned operations"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'int unsigned = Integer.parseUnsignedInt("3000000000");\nSystem.out.println(unsigned);  // -1294967296\n\nint result = Integer.divideUnsigned(unsigned, 2);\nSystem.out.println(result);  // 1500000000\n\nint unsigned2 = Integer.parseUnsignedInt("300");\nSystem.out.println(unsigned2);  // 300\n\nint result2 = Integer.divideUnsigned(unsigned2, 2);\nSystem.out.println(result2);  // 150\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"if a variable has already been declared in the outer scope first, the same variable cannot be declared again in the inner scope"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Test {\n    public static void main(String args[]) {\n        int a = 5;\n        for (int a = 0; a < 5; a++) {  // will raise an error that a is already defined\n            System.out.println(a);\n        }\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"if a variable was declared in the inner scope first before the same variable name was declared in the outer scope, it will work"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Test {\n  public static void main(String args[]) {\n    for (int i = 1; i <= 10; i++) {\n      System.out.println(i);\n    }\n    int i = 20;\n    System.out.println(i);\n  }\n}\n")))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"variable-declaration-int"},"Variable declaration int"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"integer ...-2, -1, 0, 1, 2...")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// public/private/protected static final byte/short/int/long integerName = 123;\n\n// byte: -128 ~ 127, 8 bits\n// wrapper class: Byte\nbyte byteName = 123;\n\n// short: -32768 ~ 32767, 16 bits\n// wrapper class: Short\nshort shortName = 123;\n\n// int: -2^31 ~ 2^31 - 1, -2147483648 ~ 2147483647, -2_147_483_648 ~ 2_147_483_647, 32 bits\n// wrapper class: Integer\nint integerName; integerName = 123;\nint integerName2 = 123;  // default is visible within the same package\n\n// long: -2^63 ~ 2^63 - 1, -9223372036854775808L ~ 9223372036854775807L, can use _ same as int, 64 bits\n// wrapper class: Long\nlong longName1 = 123l;  // 123\nlong longName2 = 123L;  // 123\nlong longName3 = 10_000;  // 10000, introduced in java 7, just makes it easier to read\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"variable-declaration-float"},"Variable declaration float"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"float, double")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// float: 32 bits, 4 bytes\n// wrapper class: Float\nfloat float_name = 1.123f;  // 1.123, have 7 decimal digits\nfloat float_name = (float) 1.123;\n\n// double: 64 bits, 8 bytes\n// wrapper class: Double\ndouble double_name = 1.123d;  // 1.123, have 16 decimal digits\ndouble double_name = 1.123;\n\n// using BigDecimal math class\nimport java.math.BigDecimal;\n\npublic class Main {\n\n  public static void main(String[] args) {\n    double value = .012;\n    double pSum = value + value + value;\n    System.out.println(pSum);  // 0.036000000000000004\n\n    String strValue = Double.toString(value);\n    System.out.println(strValue);  // 0.012\n\n    BigDecimal bigValue1 = new BigDecimal(value);\n    BigDecimal bSum1 = bigValue1.add(bigValue1).add(bigValue1);\n    System.out.println(bSum1.toString());  // 0.0360000000000000007494005416219806647859513759613037109375\n\n    // convert double value to string for accuracy\n    BigDecimal bigValue2 = new BigDecimal(strValue);\n    BigDecimal bSum2 = bigValue2.add(bigValue2).add(bigValue2);\n    System.out.println(bSum2.toString());  // 0.036\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"variable-declaration-none"},"Variable declaration None"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"String stringName = null;\n\n// NaN is produced if a floating point operation\nfloat floatName = Float.NaN;  // NaN\ndouble doubleName = Double.NaN;  // NaN\n\nDouble x = new Double(-2.0/0.0);  // -Infinity\nDouble y = new Double(0.0/0.0);  // NaN\nx.isNaN();  // false\ny.isNaN();  // true\n\nSystem.out.println(2.0 / 0);  // Infinity\n\n// set infinity value\ndouble inf = Double.POSITIVE_INFINITY;  // Infinity\ndouble inf = Double.NEGATIVE_INFINITY;  // -Infinity\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"boolean"},"Boolean"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"wrapper class: ",(0,r.kt)("inlineCode",{parentName:"li"},"Boolean"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean booleanName1 = true;\nboolean booleanName2 = false;\nboolean booleanName3 = !booleanName2;  // true\n\nString sBoolean = "true";\nboolean booleanName4 = Boolean.parseBoolean(sBoolean);  // true\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"strings"},"Strings"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"characters"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// character: 16 bits, 2 bytes, only 1 letter or symbol, must use single quotes ''\n// wrapper class: Character\nchar charName1 = 'a';\nchar charName2 = '\\u0061';  // unicode character for the letter a\n\n// modify character cases\nCharacter.toUpperCase(charName1);  // 'A'\nCharacter.toLowerCase(charName1);  // 'a'\n\n// convert Char Array to a string\nchar[] chars = {'H', 'e', 'l', 'l', 'o'};\nString s = new String(chars);  // \"Hello\"\n\n// convert string to char array\nchar[] chars2 = s.toCharArray();\nfor (char c : chars2) {  // for each loop\n  System.out.print(c);  // \"Hello\"\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"strings"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{parentName:"p",src:"https://media.geeksforgeeks.org/wp-content/uploads/20210711152428/JVMMemoryArea2.png",alt:"JVM Memory Area"})),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Strings in Java are Objects that are backed internally by a char array"),(0,r.kt)("li",{parentName:"ul"},"Since arrays are immutable(cannot grow), Strings are immutable as well"),(0,r.kt)("li",{parentName:"ul"},"Whenever a change to a String is made, an entirely new String is created"),(0,r.kt)("li",{parentName:"ul"},"memory allotment of string",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Whenever a String Object is created as a literal, the object will be created in String constant pool"),(0,r.kt)("li",{parentName:"ul"},"This allows JVM to optimize the initialization of String literal"))),(0,r.kt)("li",{parentName:"ul"},"The cache which stores these string instances is known as the String Constant pool or String Pool",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In earlier versions of Java up to JDK 6 String pool was located inside PermGen(Permanent Generation) space"),(0,r.kt)("li",{parentName:"ul"},"But in JDK 7 it is moved to the main heap area",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Why did the String pool move from PermGen to the normal heap area?",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"PermGen space is limited, the default size is just 64 MB"),(0,r.kt)("li",{parentName:"ul"},"it was a problem with creating and storing too many string objects in PermGen space"),(0,r.kt)("li",{parentName:"ul"},"To make Java more memory efficient, the concept of string literal is used"),(0,r.kt)("li",{parentName:"ul"},"By the use of the ",(0,r.kt)("inlineCode",{parentName:"li"},"new")," keyword, The JVM will create a new string object in the normal heap area even if the same string object is present in the string pool")))))))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// convert primitive values to string\nint intValue = 42;\nString fromInt = Integer.toString(intValue);  // "42"\n\nboolean boolValue = true;\nString fromBool = Boolean.toString(boolValue);  // "true"\n\n\n// strings: must use double quotes ""\nString stringName = new String("Hello");  // method 1, dynamically allocated, assigned a new memory location in heap\n// use "intern" method to store string in constant pool\nString internedString = stringName.intern();\n\n// this is preferred as it allows JVM to optimize memory allocation\nString stringName1 = "string";  // method 2: string literal, created in String constant pool\nString stringName2 = "multi-line " +\n                    "string";\n\n\n// get character of string with index\nchar charName = stringName1.charAt(0);  // \'s\'\n\n// get character code\nint charCode = (int) charName;  // 115\n\n// get character code difference\nSystem.out.println(\'b\' - \'a\');  // 98 - 97 = 1\n\n// modify string cases\nString stringName3 = stringName1.toUpperCase();  // "STRING"\nString stringName4 = stringName3.toLowerCase();  // "string"\n\n\n// get length of string\nstringName4.length();  // 6\n\n// Returns the index within the string of the first occurrence of the specified string\nint index = stringName4.indexOf("ng");  // 4\n\n// Returns the index within the string of the first occurrence of the specified string, starting at the specified index\nString s = "Learn Share Learn";\nint output = s.indexOf("ea", 3);  // returns 13\n\n// Returns the index within the string of the last occurrence of the specified string\nint output = s.lastIndexOf("a"); // returns 14\n\n// get substring with index\nString sub1 = stringName4.substring(4);  // "ng"\nString sub2 = stringName4.substring(4, 6);  // "ng" from starting index to but exclude last index\n\n// trim whitespaces from beginning and ending of string\nString trimStr = "  test  ";\nString newStr = trimStr.trim();  // "test"\n\n\n// Returns new string by replacing all occurrences of oldChar with newChar\nString s1 = \u201cfeeksforfeeks\u201c;\nString s2 = \u201cfeeksforfeeks\u201d.replace(\u2018f\u2019 ,\u2019g\u2019); // returns \u201cgeeksgorgeeks\u201d\n\n// toString method: convert primitive numeric values to string\ndouble doubleValue = .5d;\nString stringName5 = Double.toString(doubleValue);  // "0.5"\n\n\n// comparing strings\nString str1 = "Hello";  // object 1\nString str2 = "Hello";  // str2 points to str1, thus is still object 1\nstr1 == str2;  // true\n\nString part1 = "Hello ";\nString part2 = "World";\nString str3 = part1 + part2;  // object 1\nString str4 = "Hello World";  // object 2\nstr3 == str4;  // false\n// need to use .equals()\nstr3.equals(str4);  // true\n\n// Compares string to another string, ignoring case considerations\nstr3.equalsIgnoreCase(str4);\n\n// Compares two string lexicographically\n/*\nThis returns difference s1-s2. If:\nout < 0  // s1 comes before s2\nout = 0  // s1 and s2 are equal.\nout > 0   // s1 comes after s2.\n*/\nstr3.compareTo(str4);\n\n// Compares two string lexicographically, ignoring case considerations\nstr3.compareToIgnoreCase(str4);\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/stringtokenizer-class-in-java/"},"StringTokenizer library")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"used to break a string into tokens"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/stringjoiner-class-in-java/"},"StringJoiner")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a class in java.util package which is used to construct a sequence of characters(strings) separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"string constructors"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"String(byte[] byte_arr)")," Construct a new String by decoding the byte array"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"uses the platform\u2019s default character set for decoding")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"byte[] b_arr = {71, 101, 101, 107, 115};\nString s_byte = new String(b_arr); // Geeks\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"String(byte[] byte_arr, Charset char_set)")," Construct a new String by decoding the byte array"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It uses the char_set for decoding")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"byte[] b_arr = {71, 101, 101, 107, 115};\nCharset cs = Charset.defaultCharset();\nString s_byte_char = new String(b_arr, cs); // Geeks\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"String(byte[] byte_arr, String char_set_name)")," Construct a new String by decoding the byte array"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It uses the char_set_name for decoding")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'byte[] b_arr = {71, 101, 101, 107, 115};\nString s = new String(b_arr, "US-ASCII"); // Geeks\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"String(byte[] byte_arr, int start_index, int length)")," Construct a new string from the bytes array depending on the start_index(Starting location) and length(number of characters from starting location)"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"byte[] b_arr = {71, 101, 101, 107, 115};\nString s = new String(b_arr, 1, 3); // eek\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"String(byte[] byte_arr, int start_index, int length, Charset char_set)")," Construct a new string from the bytes array depending on the start_index(Starting location) and length(number of characters from starting location).Uses char_set for decoding"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"byte[] b_arr = {71, 101, 101, 107, 115};\nCharset cs = Charset.defaultCharset();\nString s = new String(b_arr, 1, 3, cs); // eek\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"String(byte[] byte_arr, int start_index, int length, String char_set_name)")," Construct a new string from the bytes array depending on the start_index(Starting location) and length(number of characters from starting location).Uses char_set_name for decoding"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'byte[] b_arr = {71, 101, 101, 107, 115};\nString s = new String(b_arr, 1, 4, "US-ASCII"); // eeks\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"String(char[] char_arr)")," Allocates a new String from the given Character array"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"char char_arr[] = {'G', 'e', 'e', 'k', 's'};\nString s = new String(char_arr); //Geeks\n")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"String(char[] char_array, int start_index, int count)")," Allocates a String from a given character array but choose count characters from the start_index"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"char char_arr[] = {'G', 'e', 'e', 'k', 's'};\nString s = new String(char_arr , 1, 3); //eek\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"String(int[] uni_code_points, int offset, int count)")," Allocates a String from a uni_code_array but choose count characters from the start_index"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"int[] uni_code = {71, 101, 101, 107, 115};\nString s = new String(uni_code, 1, 3); //eek\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"String(StringBuffer s_buffer)")," Allocates a new string from the string in s_buffer"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'StringBuffer s_buffer = new StringBuffer("Geeks");\nString s = new String(s_buffer); //Geeks\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"String(StringBuilder s_builder)")," Allocates a new string from the string in s_builder"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'StringBuilder s_builder = new StringBuilder("Geeks");\nString s = new String(s_builder); //Geeks\n')))))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"string-concatenation"},"String Concatenation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"method 1"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String string1 = "string";\nint num1 = 1;\n\nString stringName1 = string1 + num1;  // "string1"\n\n// method 2 (concat value must be string type)\nString newString1 = string1.concat(Integer.toString(num1));  // "string1"\n\n// method 3 (%s = string, %d = "byte, short, int, long, bigint", %c = char)\nString newString2 = String.format("%s%d", string1, num1);  // "string1"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"method 4: ",(0,r.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/stringbuilder-class-in-java-with-examples/"},"StringBuilder")," represents a mutable sequence of characters"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it is not synchronized, which means that it is not thread-safe"),(0,r.kt)("li",{parentName:"ul"},"The advantage of StringBuilder is faster performance")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String string1 = "string";\nint num1 = 1;\n\nStringBuilder sb1 = new StringBuilder(string1);\nsb1.append(num1);  // "string1"\n// or\nStringBuilder sb2 = new StringBuilder();\nsb2.append(string1).append(num1);  // "string1"\n// or\nStringBuilder sb3 = new StringBuilder(7);\nsb3.append("string");\nsb3.append(num1);\n\nsb2.delete(1, sb2.length());  // "s"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"method 5: ",(0,r.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/stringbuffer-class-in-java/"},"StringBuffer")," represents growable and writable character sequences"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"when using multithreading, must use StringBuffer rather than StringBuilder"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"because it is synchronized, thus is thread-safe"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"methods"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"append")," Used to add text at the end of the existing text"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"appendCodePoint")," appends the string representation of the codePoint argument to this sequence"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"length")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"capacity")," the total allocated capacity"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"charAt")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"delete")," Deletes a sequence of characters from the invoking object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deleteCharAt")," Deletes the character at the index specified by loc"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ensureCapacity")," Ensures capacity is at least equals to the given minimum"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"insert")," Inserts text at the specified index position"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reverse")," Reverse the characters within a StringBuffer object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"replace")," Replace one set of characters with another set inside a StringBuffer object")))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String string1 = "string";\nint num1 = 1;\n\nStringBuffer sBuffer1 = new StringBuffer(string1);\nsBuffer1.append(num1);\nsBuffer1.toString();  // "string1"\n// or\nStringBuffer sBuffer2 = new StringBuffer();\nsBuffer2.append(string1).append(num1);\nsBuffer2.toString();  // "string1"\n// or\nStringBuffer sBuffer3 = new StringBuffer(7);\nsBuffer3.append("string");\nsBuffer3.append(num1);\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://www.javatpoint.com/java-string-format"},"String format reference")))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"addition: ",(0,r.kt)("inlineCode",{parentName:"li"},"+")),(0,r.kt)("li",{parentName:"ul"},"subtraction: ",(0,r.kt)("inlineCode",{parentName:"li"},"-")),(0,r.kt)("li",{parentName:"ul"},"multiplication: ",(0,r.kt)("inlineCode",{parentName:"li"},"*")),(0,r.kt)("li",{parentName:"ul"},"division: ",(0,r.kt)("inlineCode",{parentName:"li"},"double double_name = 3.0/2; // output 1.5, 3/2 output 1")),(0,r.kt)("li",{parentName:"ul"},"modulus: ",(0,r.kt)("inlineCode",{parentName:"li"},"%")," divides the 2 numbers and returns the remainder"),(0,r.kt)("li",{parentName:"ul"},"exponent: ",(0,r.kt)("inlineCode",{parentName:"li"},"Math.pow(3, 2); // output 9")),(0,r.kt)("li",{parentName:"ul"},"floor division: ",(0,r.kt)("inlineCode",{parentName:"li"},"int integer_name = 3/2; // output 1"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"comparison-operators"},"Comparison Operators"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"==")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"reference comparison"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String s1 = new String("string value");\nString s2 = new String("string value");\nSystem.out.println(s1 == s2);  // false\n\nString s3, s4;\ns3 = "string value";\ns4 = "string value";\nSystem.out.println(s3 == s4);  // true\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"use equals method to compare string values"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String s1 = new String("string value");\nString s2 = new String("string value");\nSystem.out.println(s1.equals(s2));  // true\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"use equalsIgnoreCase to ignore cases"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String s1 = new String("String value");\nString s2 = new String("string value");\nSystem.out.println(s1.equals(s2));  // false\nSystem.out.println(s1.equalsIgnoreCase(s2));  // true\n'))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"!="))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},">"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"<"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},">="))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"<="))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"instanceof")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"used for type checking"),(0,r.kt)("li",{parentName:"ul"},"It can be used to test if an object is an instance of a class, a subclass, or an interface")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String s = "Hello";\nif (s instanceof java.lang.String) {\n  System.out.println(true);\n}\n')))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"logical-operators"},"Logical Operators"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"&&")," and"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"||")," or"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"^")," exclusive or"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"!")," not"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"?=")," Ternary (shorthand if-then)")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"bitwise-operators"},"Bitwise Operators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// & is binary AND Operator, return 1 if both a and b are 1, count the 1s\na & b  // 12 = ...0000 1100\n\n// | is binary OR Operator, return 1 if either a and or b HAVE a 1\na | b  // 61 = ...0011 1101\n\n// ^ is binary XOR Operator, return 1 if both a and b are not 1 or 0\na ^ b  // 49 = ...0011 0001\n\n// ~ is binary Complement Operator, invert everything, 1 change to 0 and vice versa, count the 0s\n~a  // -61 = ...1100 0011\n\n// << is binary left shift, shift everything to the left by n digit(s)\na << 2  // 240 = ...1111 0000\n\n// <<< is Unsigned Left shift operator\n\n// >> is Sign-propagating right shift, a binary right shift, shift everything to the right by n digit(s)\na >> 2  // 15 = ...0000 1111\nc >> 2  // 3 = ...0000 0010, count the 1s\nc = -9  // -9 = ...1111 0111\nc >> 2  // -3 = ...1111 1101, count the 0s\n\n// >>> is Unsigned Right shift operator, shift everything to the right by n digits(s), leftmost will add n 0s\nc >>> 2  // 2 = ...0000 0010, count the 1s\nc = -9  // -9 = ...1111 0111\nc >>> 2  // 1073741821 = 0011...1111 1101, count the 0s\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"increment"},"Increment"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x = x + 1;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x += 1;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"++x;")," pre-increment, add 1 now"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x++;")," post-increment, display without addition now then add 1 later when called again")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"getting-input"},"Getting Input"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"must import scanner library"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.Scanner;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// print question\nSystem.out.println(\"What's your name?\");\n\n// get raw input\nScanner scanner = new Scanner(System.in);\n// convert raw value to string type\n// can read the input only till the space\n// It can't read two words separated by a space\n// places the cursor in the same line after reading the input\nString input = scanner.next();\n// reads input including space between the words till the end of line \\n\n// Once the input is read, positions the cursor in the next line\nString input1 = scanner.nextLine();\n// convert raw value to int type\nInt input2 = scanner.nextInt();\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"single input"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String name;\ntry (Scanner in = new Scanner(System.in)) {\n  System.out.println("Enter your name: ");\n  name = in.nextLine();\n}\nSystem.out.println("name is " + name);\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"multiple inputs"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String firstname, surname;\ntry (Scanner in = new Scanner(System.in)) {\n  System.out.println("Enter your first name and then your surname: ");\n  firstname = in.nextLine();\n  surname = in.nextLine();\n}\nSystem.out.println("name is " + firstname + " " + surname);\n')))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"arrays-and-lists"},"Arrays and Lists"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Arrays",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In Java, all arrays are dynamically allocated",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Obtaining an array is a two-step process",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"First, you must declare a variable of the desired array type"),(0,r.kt)("li",{parentName:"ul"},"Second, you must allocate the memory to hold the array, using new, and assign it to the array variable"))),(0,r.kt)("li",{parentName:"ul"},"Thus, in Java, all arrays are dynamically allocated"))),(0,r.kt)("li",{parentName:"ul"},"Arrays are stored in contagious memory ","[consecutive memory locations]"),(0,r.kt)("li",{parentName:"ul"},"Since arrays are objects in Java, we can find their length using the object property length",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is different from C/C++, where we find length using ",(0,r.kt)("inlineCode",{parentName:"li"},"sizeof")))),(0,r.kt)("li",{parentName:"ul"},"A Java array variable can also be declared like other variables with ",(0,r.kt)("inlineCode",{parentName:"li"},"[]")," after the data type"),(0,r.kt)("li",{parentName:"ul"},"The variables in the array are ordered, and each has an index beginning from 0"),(0,r.kt)("li",{parentName:"ul"},"Java array can also be used as a static field, a local variable, or a method parameter"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"size")," of an array must be specified by ",(0,r.kt)("inlineCode",{parentName:"li"},"int")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"short")," value and not long"),(0,r.kt)("li",{parentName:"ul"},"The direct superclass of an array type is Object"),(0,r.kt)("li",{parentName:"ul"},"Every array type implements the interfaces Cloneable and java.io.Serializable"),(0,r.kt)("li",{parentName:"ul"},"This storage of arrays helps us in randomly accessing the elements of an array ","[Support Random Access]"),(0,r.kt)("li",{parentName:"ul"},"The size of the array cannot be altered(once initialized)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"However, an array reference can be made to point to another array"))),(0,r.kt)("li",{parentName:"ul"},"can only have 1 primitive or object data type: string, int, etc.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"primitive data are stored in the contiguous memory locations"),(0,r.kt)("li",{parentName:"ul"},"non primitive data are stored in a heap segment"))),(0,r.kt)("li",{parentName:"ul"},"printing this only shows the memory"),(0,r.kt)("li",{parentName:"ul"},"The elements in the array allocated by ",(0,r.kt)("inlineCode",{parentName:"li"},"new")," will automatically be initialized to ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," (for numeric types), ",(0,r.kt)("inlineCode",{parentName:"li"},"false")," (for boolean), or ",(0,r.kt)("inlineCode",{parentName:"li"},"null")," (for reference types)")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Empty string array of desired array size\nString[] stringArray = new String[length_of_desired_array];\n// New string array with elements inside\nString [] stringArray = new String [] {string1, string2,...};  // Method 1: array literal\nString[] stringArray = {string1, string2,...};  // Method 2\n\n// Add string array element, limited to array size\n// Modify string array element value\nstringArray[index] = element;\n\n// Access an element\nstringArray[index];\n\n// Find array size\nstringArray.length;\n\n// get class object information, it will return the run-time type signature "array with component type string" for this example\nstringArray.getClass();  // class [S\n\n// get superclass information\nstringArray.getClass().getSuperclass();  // class java.lang.Object\n\n// deep copy / clone for single-dimensional array\nString stringArray2 = stringArray.clone();\nSystem.out.println(stringArray == stringArray2);  // true\n\n// Copy array\nint sourceArrStartingIndex = 1;\nint destinationArrStartingIndex = 0;\nint copiedArrLen = 2;\nString[] copiedArr = new String[copiedArrLen];\nSystem.arraycopy(sourceArr, sourceArrStartingIndex, copiedArr, destinationArrStartingIndex, copiedArrLen);  // {"apple", "pear"}\n\n// multidimensional array (subarrays are of the same size) / jagged arrays (subarrays can be of different sizes)\nString[][] states = new String[3][2];\nstates[0][0] = "Japan";\nstates[0][1] = "Tokyo";\n\n// clone for multi-dimensional array is a shallow copy\n// because it creates a new array, but the subarrays are shared\nString[][] states2 = states.clone();\nSystem.out.println(states == states2);  // false\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sorting an array",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Sort array, can sort numbers, strings, etc.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.Arrays;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String[] sourceArr = {"orange", "apple", "pear"};\nArrays.sort(sourceArr);  // {"apple", "orange", "pear"}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Arraylist",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it is a class, extends the AbstractList class and implements List interface"),(0,r.kt)("li",{parentName:"ul"},"used to create a dynamic array that contains objects"),(0,r.kt)("li",{parentName:"ul"},"creates an array of objects where the array can grow dynamically"),(0,r.kt)("li",{parentName:"ul"},"can only have 1 data type: string, int, class, etc.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.ArrayList;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Empty string arrayList\nArrayList<String> arrayList = new ArrayList<String>();\n\n// Add element to string arrayList (left to right)\narrayList.add(element);\n\n// Modify an element at index\narrayList.set(index, element);\n\n// Access an element\narrayList.get(index);\n\n// Remove element from arrayList at index\narrayList.remove(index);\n\n// Find arrayList size\narrayList.size();\n\n// Remove all elements\narrayList.clear();\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"List",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it is an interface, extends the Collection framework"),(0,r.kt)("li",{parentName:"ul"},"used to create a list of elements(objects) which are associated with their index numbers"),(0,r.kt)("li",{parentName:"ul"},"creates a collection of elements that are stored in a sequence and they are identified and accessed using the index"),(0,r.kt)("li",{parentName:"ul"},"printing this shows the actual array")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.List;\nimport java.util.Arrays;\nimport java.util.ArrayList;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// method 1\nList<String> list = Arrays.asList(element, element, ...)\n\n// method 2\nList<String> list = new ArrayList<>();  // from java 7 onwards redundent <String> is not required, can just use <>\n\n// Add element to string List (left to right)\nlist.add(element);\n\n// Remove element from list at index\nlist.remove(index);\n\n// Access an element\nlist.get(index);\n\n// Find index of an element\nlist.indexOf(element);\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"conditional-statement"},"Conditional Statement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// If else statement\nif (condition_a) {\n    do_A;\n} else if (condition_b) {\n    do_B;\n} else {\n    do_something_else;\n}\n\n\n// {} not required if statement is a single line\nif (condition_a)\n    do_A;  // Single line statement\nelse if (condition_b)\n    do_B;  // Single line statement\nelse\n    do_something_else;  // Single line statement\n\n\n// Ternary operator\ncondition_a ? do_A : do_B;\n\n\n// Switch statement\nswitch(choice) {  // choice value can only be primitive values in java 7, since java 8 strings are also accepted\n    case choice_A:\n        do_A;\n        break;\n    case choice_B:\n        do_B;\n        break;\n    default:\n        do_something_else;\n        break;  // not required, but good to have in Java\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"loops"},"Loops"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// While loop\n// declare_initial_conditional_value\nint i = 0;\n// Set condition\nwhile (i<5) {  // Start from 0 to 4\n    doThis;\n    // Include condition_increment_or_decrement;\n    i++;\n    // Can use break or continue to add additional functionality, or not use any\n    break;  // Breaks out of the current closest enclosing loop\n    continue;  // Goes to the top of the closest enclosing loop\n}\n\n// Do while loop: execute first before setting conditions, it is an example of exit control loop\n// declare_initial_conditional_value\nint i = 0;\ndo {  // Start from 0 to 4\n    doThis;\n    // Include condition_increment_or_decrement;\n    i++;\n// Set condition\n} while (i<5);\n\n// For loop\nfor (int i=0; i<5; i++) {  // Start from 0 to 4\n    doThis;\n    // Can use break or continue to add additional functionality, or not use any\n    break;  // Breaks out of the current closest enclosing loop\n    continue;  // Goes to the top of the closest enclosing loop\n}\n// Reverse loop\nfor (int i=4; i>=0; i--) {  // Start from 4 to 0\n    doThis;\n}\n\n// for each loop, can also loop collections with iterators\nchar[] chars = {'H', 'e', 'l', 'l', 'o'};  // an array can only have a single data type\nfor (char c : chars) {  // for each element in the array\n  doThis;\n}\n\n// infinite for loop\nfor(;;){\n  //code to be executed\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"instantiation"},"Instantiation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class ClassName {\n  public String type;  // instance variable\n\n  public static void main(String[] args) {\n    ClassName t = new ClassName();  // instantiation\n    t.type = "something";\n    t.display();\n\n    doSomething();  // can call static method directly\n  }\n\n  // instance method\n  private void display() {}\n\n  // static method\n  static void doSomething() {}\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"All the method names should start with a lowercase letter")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If several words are used to form the name of the method, then each first letter of the inner word should be in Uppercase")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Underscores are allowed, but not recommended")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Also allowed are digits and currency symbols")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"example"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public void employeeRecords() // valid syntax\npublic void EmployeeRecords() // valid syntax, but discouraged\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Normal functions\npublic static void myFunction() {\n  do_something;\n}\n\n\n// Normal function with parameters\npublic static void myFunction(dataType a){\n  do_something_with_a\n}\n\n\n// Normal function with return value (change void to data type to return)\npublic static int sum(int a){\n  return a + 1;\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Lambda"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"interface"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"an interface that contains at most one abstract function"),(0,r.kt)("li",{parentName:"ul"},"represents abstract concepts such as functions, actions, or predicates"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Predicate:")," takes 1 argument, returns a Boolean",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.function.Predicate;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Predicate<String> stringLen = (s) -> s.length() < 10;\nSystem.out.println(stringLen.test("Apples") + " - Apples is less than 10");  // true - Apples is less than 10\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Consumer")," accepts single argument with no return value",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.function.Consumer;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Consumer<String> consumerStr = (s) -> System.out.println(s.toLowerCase());\nconsumerStr.accept("ABCDefghij");  // abcdefghij\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Function")," accepts 1 argument and produces a result",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.function.Function;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Function<Integer, String> converter = (num) -> Integer.toString(num);\nSystem.out.println("length of 26: " + converter.apply(26).length());  // length of 26: 2\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Supplier")," represents a supplier of results",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.function.Supplier;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Supplier<String> s = () -> "Java is fun";\nSystem.out.println(s.get());  // Java is fun\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Runnable")," similar to ",(0,r.kt)("inlineCode",{parentName:"li"},"Supplier"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// method 1\nRunnable r1 = new Runnable() {\n  @Override\n  public void run() {\n    System.out.println("run");\n  }\n};\nr1.run();  // run\n\n// method 2\nRunnable r2 = () -> System.out.println("run");\nr2.run();  // run\n')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"UnaryOperator")," single argument with a return value"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.function.UnaryOperator;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'UnaryOperator<String> str = (msg) -> msg.toUpperCase();\nSystem.out.println(str.apply("Msg in upper case"));  // MSG IN UPPER CASE\n\nUnaryOperator<String> makeGreeting = "Hello, "::concat;\nSystem.out.println(makeGreeting.apply("World"));  // Hello, World\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"BinaryOperator")," takes 2 arguments and returns value"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.function.BinaryOperator;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"BinaryOperator<Integer> add = (a, b) -> a + b;\nSystem.out.println(add.apply(10, 25));  // 35\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"BiFunction")," similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"BinaryOperator")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.function.BiFunction;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'BiFunction<String, String, String> concat = (a, b) -> a + b;\nString sentence = concat.apply("Today is ", "a great day");\nSystem.out.println(sentence);  // Today is a great day\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"custom interface"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@FunctionalInterface  // not a must but better to have\ninterface StringFunction {\n  String doSomething(String str);\n}\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'StringFunction strFunc = (s) -> s;\nSystem.out.println(strFunc.doSomething("test"));  // test\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"method as lambdas"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.function.Function;\nimport java.util.function.IntFunction;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// method 1\nIntFunction<String> intToString = num -> Integer.toString(num);\nSystem.out.println(intToString.apply(123));  // 123\n\n// method 2: static method reference using ::\nIntFunction<String> intToString2 = Integer::toString;\nSystem.out.println(intToString2.apply(123));  // 123\n")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"lambdas made using a constructor"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.math.BigInteger;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// method 1\nFunction<String, BigInteger> newBigInt1 = (num) -> new BigInteger(num);\nSystem.out.println("expected value: 123456789, actual value: " + newBigInt1.apply("123456789"));  // expected value: 123456789, actual value: 123456789\n\n// method 2\nFunction<String, BigInteger> newBigInt2 = BigInteger::new;\nSystem.out.println("expected value: 123456789, actual value: " + newBigInt2.apply("123456789"));  // expected value: 123456789, actual value: 123456789\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"lambdas made from an instance method"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.function.Consumer;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// method 1\nConsumer<String> print1 = (str1) -> System.out.println(str1);\nprint1.accept("Hello World");  // Hello World\n\n// method 2\nConsumer<String> print2 = System.out::println;\nprint2.accept("Hello World");  // Hello World\n')))))))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// import java.util.ArrayList;\n// import java.util.function.Consumer;  // must import\n\n// store non returning function\nArrayList<Integer> numbers = new ArrayList<Integer>();\nnumbers.add(5);\nConsumer<Integer> method = (n) -> { System.out.println(n); };  // can remove {} if is one liner\n\n// method 1\nnumbers.forEach( method );  // 5\n\n// method 2\nnumbers.forEach( (n) -> { System.out.println(n); } );  // 5\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"method overloading")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"static double addValues(String s1, String s2) {\n  double d1 = Double.parseDouble(s1);\n  double d2 = Double.parseDouble(s2);\n  double result = d1 + d2;\n  return result;\n}\n\nstatic double addValues(String s1, String s2, String s3) {\n  double d1 = Double.parseDouble(s1);\n  double d2 = Double.parseDouble(s2);\n  double d3 = Double.parseDouble(s3);\n  double result = d1 + d2 + d3;\n  return result;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"higher-order-functions"},"Higher order functions"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"hash-tables"},"Hash Tables"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Hash Tables, Dictionaries, Objects")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Map: it is an interface used to store data in key-value pair\nimport java.util.Map;  // must import\n\n// HashMap: it is the implementation class of the Map interface\nimport java.util.HashMap;  // must import\n\n// Set: it is an interface used to store data in value without duplicates\nimport java.util.Set;\n\n// HashSet: It is the implementation class of the Set interface\nimport java.util.HashSet;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// declaration of maps\nMap<String, String> map = new HashMap<>();\n// Map<Integer, Boolean> map = new HashMap<>();\n\n// add key value pair\nmap.put("jp", "Japan");\nmap.put("sg", "Singapore");\nmap.put("usa", "United States");\nSystem.out.println(map);  // { jp=Japan, sg=Singapore, usa=United States }\n\n// get value with key\nmap.get("jp");  // "Japan"\n\n// check if key exists\nmap.containsKey("kr");  // false\n\n// remove key value pair with key\nmap.remove("sg");  // { jp=Japan, usa=United States }\n\n// get a set of keys\n// import java.util.Set;  // must import\nSet<String> keys = map.keySet();  // [ usa, jp ]\n\n\n// declaration of sets\nSet<Integer> numbers = new HashSet<Integer>();\n\n// add value\nnumbers.add(1);\n\n// check if value exists\nnumbers.contains(1);  // true\n\n// Check if a HashSet is empty\nnumbers.isEmpty();\n\n// Find the size of a HashSet\nnumbers.size();\n\n// Remove an element from a HashSet (The remove() method returns false if the element does not exist in the HashSet)\nboolean isRemoved = numbers.remove(10);\n\n// Remove all elements matching a given predicate\nnumbers.removeIf(num -> num % 2 == 0);\n\n// Remove all elements from HashSet (clear it completely)\nnumbers.clear();\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"collections"},"Collections"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"introduced in Java 7"),(0,r.kt)("li",{parentName:"ul"},"it is a group of elements"),(0,r.kt)("li",{parentName:"ul"},"can store, retrieve, manipulate, and communicate aggregate data")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.List;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Collections;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> names = Arrays.asList("Paul", "Jane", "Michaela", "Sam");\n\n// method 1\nCollections.sort(names, new Comparator<String>() {\n  @Override\n  public int compare(String a, String b) {\n    return a.compareTo(b);  // ascending order\n  }\n});\nSystem.out.println(names);  // [Jane, Michaela, Paul, Sam]\n\n// method 2 using lambda\nCollections.sort(names, (a, b) -> b.compareTo(a));  // descending order\nSystem.out.println(names);  // [Sam, Paul, Michaela, Jane]\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"removing duplicates"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"elimate duplicates and auto sort")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"List<Integer> duplicateNums = Arrays.asList(4, 3, 3, 3, 2, 1, 1, 1);\nSystem.out.println(duplicateNums.toString());  // [4, 3, 3, 3, 2, 1, 1, 1]\n\n// method 1\nCollection<Integer> noDuplicatesNums = new HashSet<>(duplicateNums);\nSystem.out.println(noDuplicatesNums.toString());  // [1, 2, 3, 4]\n\n// method 2\nSet<Integer> noDuplicatesNums2 = new HashSet<>(duplicateNums);\nSystem.out.println(noDuplicatesNums2.toString());  // [1, 2, 3, 4]\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"streams"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the package contains interfaces for using streams"),(0,r.kt)("li",{parentName:"ul"},"a stream represents a sequence of elements"),(0,r.kt)("li",{parentName:"ul"},"the package was added to traverse collections"),(0,r.kt)("li",{parentName:"ul"},"most stream operations take a lambda expression"),(0,r.kt)("li",{parentName:"ul"},"Stream operations are either intermediate or terminal",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Terminal operations are either void or return a type",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g.: ",(0,r.kt)("inlineCode",{parentName:"li"},".collect(...)")))),(0,r.kt)("li",{parentName:"ul"},"Intermediate operations return the stream itself",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g.: ",(0,r.kt)("inlineCode",{parentName:"li"},".sorted()")))))),(0,r.kt)("li",{parentName:"ul"},"common operations include map, filter, forEach"),(0,r.kt)("li",{parentName:"ul"},"elements in a stream cannot be changed")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\npublic class Person {\n  private String name;\n\n  public Person(String name) {\n    this.name = name;\n  }\n\n  public String getName() {\n    return name;\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    List<String> names = Arrays.asList("Paul", "Jane", "Michaela", "Sam");\n    System.out.println(names.stream().collect(Collectors.joining(",")));  // Paul,Jane,Michaela,Sam\n\n    Person personA = new Person("Paul");\n    Person personB = new Person("Jane");\n    Person personC = new Person("Sam");\n    List<Person> people = Arrays.asList(personA, personB, personC);\n\n    // use .collect to aggregate names into a list\n    // use .map to get the name\n    List<String> names2 = people.stream().map(Person::getName).collect(Collectors.toList());\n    System.out.println(names2);  // [Paul, Jane, Sam]\n  }\n}\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Arrays.asList("red", "green", "blue").stream().sorted().findFirst().ifPresent(System.out::println);  // blue\n\nStream.of("red", "green", "blue").filter(color -> color.startsWith("g")).forEach(System.out::println);  // green\n\nList<String> collected = Stream.of("red", "green", "blue").map(string -> string.toUpperCase()).collect(Collectors.toList());\nSystem.out.println(collected.toString());  // [RED, GREEN, BLUE]\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.Arrays;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"IntStream.range(1, 4).forEach(System.out::print);  // 123\n\n// find the average of the numbers squared\nArrays.stream(new int[] {1, 2, 3, 4}).map(n -> n*n).average().ifPresent(System.out::println);  // 7.5\n\n// map doubles to ints\nStream.of(1.5, 2.3, 3.7).mapToInt(Double::intValue).forEach(System.out::print);  // 123\n")))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"destructuring"},"Destructuring"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"spread-operator"},"Spread Operator"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"rest-parameters"},"Rest parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"static double myFunction(String ... args) {\n  String[] argsArr = args;  // args is an array of arguments\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"class"},"Class"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The first letter of the class should be in Uppercase (lowercase is allowed, but discouraged)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If several words are used to form the name of the class, each inner word\u2019s first letter should be in Uppercase"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Underscores are allowed, but not recommended")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"numbers and currency symbols are also allowed"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"latter are also discouraged because they are used for a special purpose",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"for inner and anonymous classes"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"example"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class MyJavaProgram    // valid syntax\nclass 1Program         // invalid syntax\nclass My1Program       // valid syntax\nclass $Program         // valid syntax, but discouraged\nclass My$Program       // valid syntax, but discouraged (inner class Program inside the class My)\nclass myJavaProgram    // valid syntax, but discouraged\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"if no constructor has been defined, a constructor with no args will be auto generated")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"if a constructor with args has been defined, a constructor with no args will not be auto generated")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"constructor can be overloaded with multiple constructors"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class Math {\n  public int arg1;\n  public int arg2;\n  public int total;\n  public static final String NAME = "Math";  // declaring a constant variable\n\n  // constructor (must have the same name as class name, no return data type)\n  public Math(int arg1, int arg2) {\n    // this keyword is not a must, however, variable name must be different from the parameter\n    this.arg1 = arg1;\n    this.arg2 = arg2;\n    this.total = OuterAdd(arg1, arg2);\n  }\n\n  public int InnerAdd(int arg3) {\n    return this.arg1 + this.arg2 + arg3;\n  }\n\n  public static int OuterAdd(int number1, int number2) {\n    return number1 + number2;\n  }\n}\n\nclass MainClass {\n  public static void main(String[] args) {\n    Math test = new Math(2, 4);  // instantiation\n    // non-static variables or methods requires instantiation\n    System.out.println(test.total);  // 6\n    System.out.println(test.InnerAdd(2));  // 8\n    // static variables or methods does not requires instantiation\n    System.out.println(Math.OutterAdd(4, 5));  // 9\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"private key")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class Person {\n  private int age = 0;  // cannot be accessed other than within the class\n\n  // age can only be modified with the setter method\n  public void setAge(int age) {\n    this.age = age;\n  }\n\n  // age can only be retrieve with the getter method\n  public int getAge() {\n    return this.age;\n  }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"protected key"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// class with protected method\npackage p1;\n\n// Class A\npublic class A {\n  protected void display() {\n    System.out.println("test");\n  }\n}\n')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Calling protected function without extending the parent class"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package p2;\n\n// import all classes in package p1\nimport p1.*;\n\nclass B {\n  public static void main(String args[]) {\n    B obj = new B();\n    // not be able to access the function \u201cdisplay\u201d since child class has not inherited its value from the main class\n    obj.display();  // throw an exception\n  }\n}\n")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'throw an error Exception in thread "main" java.lang.RuntimeException: Uncompilable source code - Erroneous sym type: p2.B.display'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Accessing a protected class"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package p1;\n\n// Class A\nprotected class A {\n  void display()\n  {\n    System.out.println("test");\n  }\n}\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package p2;\n\n// import all classes in package p1\nimport p1.*;\n\n// Class B is a subclass of A\nclass B extends A {\n    public static void main(String args[])\n    {\n        B obj = new B();\n        obj.display();  // throw an exception\n    }\n}\n")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'throw an error Exception in thread "main" java.lang.RuntimeException: Uncompilable source code - Erroneous sym type: p2.B.display'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Accessing display function from the same package but different class"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class C {\n  public static void main(String args[]) {\n    A obj = new A();\n    obj.display();  // test\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Accessing display function from a different package"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package p2;\n\n// import all classes in package p1\nimport p1.*;\n\n// Class B is a subclass of A\nclass B extends A {\n  public static void main(String args[]) {\n    B obj = new B();\n    obj.display();  // test\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Accessing a protected class by overriding to sub-class within same package"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class C extends A {\n  // overridden function\n  protected void display() {\n    System.out.println("overridden");\n  }\n\n  public static void main(String args[]) {\n    C obj1 = new C();\n    obj1.display();  // overridden\n  }\n}\n'))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Anonymous classes"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.Scanner;\n\npublic class Calculator {\n  public static void main(String[] args) {\n    ClassName c = new ClassName();\n    c.calculate();\n  }\n\n  // can be accessed from within the same class, subclasses of same packages,\n  // different classes of same packages, subclasses of different packages\n  protected void calculate() {\n    InputHelper helper = new InputHelper();\n    String s1 = helper.getInput("Please do something");\n  }\n\n  // only Calculator class can use this\n  class InputHelper {\n    // can only be accessed from the same class\n    private String getInput(String prompt) {\n      System.out.println(prompt);\n      Scanner sc = new Scanner(System.in);\n      return sc.nextLine();\n    }\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"inheritance",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if a class isn't defined as ",(0,r.kt)("inlineCode",{parentName:"li"},"final")," it can be extended"),(0,r.kt)("li",{parentName:"ul"},"superclass members are inherited unless marked private")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// enum\npublic enum Names {\n  JOHN, PETER;\n}\n\n// parent / base / superclass\npublic class Person {\n  private int age;\n  private Names name;\n\n  public Person(int age, Names name) {\n    this.age = age;\n    this.name = name;\n  }\n\n  public void setAge(int age) {\n    this.age = age;\n  }\n\n  public int getAge() {\n    return this.age;\n  }\n\n  public Names getName() {\n    return this.name;\n  }\n\n  public void whoAmI() {\n    System.out.println("I am a Person");\n  }\n}\n\n// Inheritance: child / derived / subclass\npublic class John extends Person {\n  public John() {\n    super(25, Names.JOHN);\n  }\n\n  // Polymorphism: overriding the parent\'s method\n  @Override  // use this even if it is not required for 2 benefits: take adv of compiler check, easier to read\n  public void whoAmI() {\n    System.out.println("I a John");\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Person p = new Person(0, Names.JOHN);\n    p.whoAmI();  // "I am a Person\n    John j = new John();\n    j.setAge(25);\n    System.out.println(j.getAge());\n    System.out.println(j.getName());\n    j.whoAmI();  // "I am John"\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"interface",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it is a contract that defines a set of methods with a particular signatures"),(0,r.kt)("li",{parentName:"ul"},"any class that implement that interface must implement those methods")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// enum\npublic enum Names {\n  JOHN, PETER;\n}\n\n// interface: declaring of implementations are not required\n// declaring of implementations in Android might be required during instantiation\npublic interface Human {\n  public void setAge(int age);\n\n  public int getAge();\n\n  public Names getName();\n\n  public void whoAmI();\n}\n\n// class that implements an interface\n// if not all of the methods declared in the interface are implemented, an error will occur\n// additional methods not declared in the interface can be declared\npublic class Person implements Human {\n  private int age;\n  private Names name;\n\n  public Person(int age, Names name) {\n    this.age = age;\n    this.name = name;\n  }\n\n  @Override  // not required but better to be explicit\n  public void setAge(int age) {\n    this.age = age;\n  }\n\n  @Override\n  public int getAge() {\n    return this.age;\n  }\n\n  @Override\n  public Names getName() {\n    return this.name1;\n  }\n\n  @Override\n  public void whoAmI() {\n    System.out.println("I am a Person");\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"abstract",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"abstract")," keyword is added"),(0,r.kt)("li",{parentName:"ul"},"it can contain a mixture of fully implemented methods & abstract methods",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"abstract method is similar to a method in an interface",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"no implementation & only indicates method signature"),(0,r.kt)("li",{parentName:"ul"},"any subclasses of an abstract method must implement that method"))))),(0,r.kt)("li",{parentName:"ul"},"cannot be instantiated directly, only their subclasses can be instantiated")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// enum\npublic enum Names {\n  JOHN, PETER;\n}\n\n// interface\npublic interface Human {\n  public void setAge(int age);\n\n  public int getAge();\n\n  public Names getName();\n\n  public void whoAmI();\n}\n\n// abstract parent / base / superclass\npublic abstract class Person implements Human {\n  private int age;\n  private Names name;\n\n  public Person(int age, Names name) {\n    this.age = age;\n    this.name = name;\n  }\n\n  @Override\n  public void setAge(int age) {\n    this.age = age;\n  }\n\n  @Override\n  public int getAge() {\n    return this.age;\n  }\n\n  @Override\n  public Names getName() {\n    return this.name1;\n  }\n\n  @Override\n  public void whoAmI() {\n    System.out.println("I am a Person");\n  }\n\n  // this means that every subclass of this class must declare its own origin\n  public abstract String getOrigin();\n}\n\n// child / derived / subclass\npublic class John extends Person {\n  public John() {\n    super(25, Names.JOHN);\n  }\n\n  @Override\n  public void whoAmI() {\n    System.out.println("I a John");\n  }\n\n  @Override\n  public String getOrigin() {  // this must be declared here, else an error will occur\n    return "Japan";\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    // Person p = new Person(0, Names.JOHN);  // abstract classes cannot be instantiated and will cause an error\n    John j = new John();\n    j.setAge(25);\n    System.out.println(j.getAge());\n    System.out.println(j.getName());\n    j.whoAmI();  // "I am John"\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"importing-libraries"},"Importing Libraries"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Package in Java is a mechanism to encapsulate a group of classes, sub packages and interfaces"),(0,r.kt)("li",{parentName:"ul"},"Packages are used for:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Preventing naming conflicts",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For example there can be two classes with name Employee in two packages, college.staff.cse.Employee and college.staff.ee.Employee"))),(0,r.kt)("li",{parentName:"ul"},"Making searching/locating and usage of classes, interfaces, enumerations and annotations easier"),(0,r.kt)("li",{parentName:"ul"},"Providing controlled access",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"protected and default have package level access control"),(0,r.kt)("li",{parentName:"ul"},"A protected member is accessible by classes in the same package and its subclasses"),(0,r.kt)("li",{parentName:"ul"},"A default member (without any access specifier) is accessible by classes in the same package only"))),(0,r.kt)("li",{parentName:"ul"},"Packages can be considered as data encapsulation (or data-hiding)"))),(0,r.kt)("li",{parentName:"ul"},"How packages work?",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Package names and directory structure are closely related",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For example if a package name is college.staff.cse, then there are three directories, college, staff and cse such that cse is present in staff and staff is present college"),(0,r.kt)("li",{parentName:"ul"},"Also, the directory college is accessible through CLASSPATH variable, i.e., path of parent directory of college is present in CLASSPATH",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The idea is to make sure that classes are easy to locate"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Package naming conventions"),": Packages are named in reverse order of domain names",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"i.e., org.geeksforgeeks.practice"),(0,r.kt)("li",{parentName:"ul"},"For example, in a college, the recommended convention is college.tech.cse, college.tech.ee, college.art.history, etc."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Adding a class to a Package"),": We can add more classes to a created package by using package name at the top of the program and saving it in the package directory",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"We need a new java file to define a public class, otherwise we can add the new class to an existing .java file and recompile it")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// folder name that the current file is in, all other files that are in this folder can be imported without additional code\npackage com.example.demoapi.student;\n\n// importing of user defined packages\nimport com.example.demoapi.student.utilities.Helper;\n\nimport java.time.LocalDate;\nimport java.time.Period;\n\n// allows imports of all static members of the class (from java 5 and above)\nimport static java.time.LocalDate.*;\n\nimport javax.persistence.Entity;  // imports Entity class from the persistence package\nimport javax.persistence.Id;\nimport javax.persistence.Table;\nimport javax.persistence.Transient;\n\n// method 2\nimport javax.persistence.*;  // allows imports of all classes from the persistence package\n\n@Entity\n@Table\npublic class Student {\n  @Id\n  private Long id;\n  @Transient\n  private Integer age;\n\n  // using import java.time.LocalDate;\n  public Integer getAge1() {\n    return Period.between(dob, LocalDate.now()).getYears();\n  }\n\n  // using import static java.time.LocalDate.*;\n  public Integer getAge() {\n    return Period.between(dob, now()).getYears();\n  }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"common built-in packages",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"java.lang"),": Contains language support classes(e.g classed which defines primitive data types, math operations), this package is automatically imported"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"java.io"),": Contains classed for supporting input / output operations"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"java.util"),": Contains utility classes which implement data structures like Linked List, Dictionary and support, for Date / Time operations"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"java.applet"),": Contains classes for creating Applets"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"java.awt"),": Contain classes for implementing the components for graphical user interfaces (like button, menus etc)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"java.net"),": Contain classes for supporting networking operations")))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"type-conversions"},"Type Conversions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"implicit type conversion",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"occurs when an equation has multiple data types"),(0,r.kt)("li",{parentName:"ul"},"small memory value to big memory value only",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g.: byte to int"))))),(0,r.kt)("li",{parentName:"ul"},"explicit type conversion",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"occurs when we use casting to change the data type"),(0,r.kt)("li",{parentName:"ul"},"can convert big memory value to small memory value, however, data loss will occur",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"allow int to byte")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'System.out.println((3 + 5 + 8) / 3);  // 5\nSystem.out.println((3 + 5 + 8) / 3.0);  // 5.333333333333333\n\n// implicit type conversion\nbyte b = 1;\nint i = b;\nfloat f = i;\n\n// casting\n// explicit type conversion\nfloat pi = 3.14f;\nint intPi = (int) pi;  // 3\n\nint num = 256;\nbyte b = (byte) num; // 0 (surplus value will assigned if converting big data type value to smaller data type value)\n\nint num2 = 255;\nbyte b2 = (byte) num2; // 255\n\n// convert number to strings (user helper class)\nint i = 1234;\nString str = Integer.toString(i);  // "1234"\n\n// convert string to double\nString s = "423";\ndouble d1 = Double.parseDouble(s);\nSystem.out.println(d1);  // 423.0\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'String doubleValue = "156.5";\n\n// convert string to double\nDouble doubleObj = Double.parseDouble(doubleValue);\nSystem.out.println(doubleObj);  // 156.5\n\n// convert double to byte\nbyte byteValue = doubleObj.byteValue();\nSystem.out.println(byteValue);  // -100\n\n// convert double to int\nint intValue = doubleObj.intValue();\nSystem.out.println(intValue);  // 156\n\n// convert double to float\nfloat floatValue = doubleObj.floatValue();\nSystem.out.println(floatValue);  // 156.5\n\n// convert double to string\nvar stringValue = doubleObj.toString();\nSystem.out.println(stringValue);  // "156.5"\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"find-data-type"},"Find Data Type"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"json"},"JSON"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"program-entry-point"},"Program Entry Point"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the signature is public static void main(String\u2026 args)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"public")," So that JVM can execute the method from anywhere"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"static")," The main method is to be called without an object",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The modifiers public and static can be written in either order"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"void")," The main method doesn\u2019t return anything"),(0,r.kt)("li",{parentName:"ul"},"The method ",(0,r.kt)("inlineCode",{parentName:"li"},"main()")," is the main entry point into a Java program",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"must be inside the class definition"),(0,r.kt)("li",{parentName:"ul"},"The compiler executes the codes starting always from the main function"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"String[]")," The main method accepts a single argument, i.e., an array of elements of type String")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'class SomeClassName {\n  public static void main(String[] args) {\n    System.out.println("Hello World");\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"swapping-values"},"Swapping values"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'int nums[] = {0, 1};\nSystem.out.printf("%d, %d %n", nums[0], nums[1]);  // 0, 1\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'int temp;\ntemp = nums[0];\nnums[0] = nums[1];\nnums[1] = temp;\nSystem.out.printf("%d, %d %n", nums[0], nums[1]);  // 1, 0\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"error-handling"},"Error Handling"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"try: lets you test a block of code for errors"),(0,r.kt)("li",{parentName:"ul"},"catch: lets you handle the error",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'use "Exception" keyword to catch all exception types'),(0,r.kt)("li",{parentName:"ul"},"use specific exception types to catch that specific exception",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"exceptions are from java.lang library, so no imports are required"))),(0,r.kt)("li",{parentName:"ul"},"catch block can be chained (specific exception with highest priority should come first)"))),(0,r.kt)("li",{parentName:"ul"},"finally: lets you execute code, after try and catch, regardless of the result",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"very important for closing a file when an opened file in the try block triggered an exception")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"try {\n  doSomething;\n} catch(SomeSpecificException e) {\n  doSomethingIfErrorOccursRelatedToSomESpecificException;\n} catch(Exception e) {  // e is an arg (mandatory), e can be used to print general or more detailed error\n  e.printStackTrace();\n  doSomethingIfErrorOccursRelatedToAllExceptions;\n} finally {\n  doSomethingWhenTryAndCatchIsCompleted;\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"try with resources statement",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"only for java 8 or later versions, can't be used on android"),(0,r.kt)("li",{parentName:"ul"},"it is a try statement that declares 1 or more resources"),(0,r.kt)("li",{parentName:"ul"},"a resource is an object that must be closed after the program is finished with it")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// type 1\nimport java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.FileWriter;\n\npublic class Main {\n    // try-with-resources\n    try (BufferedReader bReader = new BufferedReader(new FileReader(sourceFile))) {\n      return bReader.readLine();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n\n// type 2\nimport java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.FileWriter;\n\npublic class Main {\n  public static void main(String[] args) {\n    String sourceFile = "textfile";  // textfile path\n    String targetFile = "newtextfile";  // newtextfile path\n\n    // try-with-resources\n    try (\n      FileReader fReader = new FileReader(sourceFile);  // read file\n      BufferedReader bReader = new BufferedReader(fReader);  // read lines in file\n      FileWriter writer = new FileWriter(targetFile);  // write file\n      ) {\n      while (true) {\n        String line = bReader.readLine();\n        if (line == null) {\n          break;\n        } else {\n          writer.write(line + "\\n");\n        }\n      }\n      System.out.println("File copied");\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"custom-error"},"Custom Error"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"must use either try catch statements or be inside a conditional statement to work")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// if using try catch, both throw and catch must handle the same Exception type\ntry {\n  // raise specific exception\n  throw new SpecificExceptionName("custom message");\n\n  // raise generic exception\n  throw new Exception("custom message");\n} catch (SpecificExceptionName e) {\n} catch (Exception e) {\n}\n\n\nif (true) {\n  // raise generic exception\n  throw new Exception("custom message");\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"asynchronous"},"Asynchronous"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Handling asynchronous code (making it synchronous)")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"math"},"Math"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.Random;\n\ndouble number1 = 10.5;\ndouble number2 = 15;\n\nSystem.out.println("Math.abs(number1) " + (Math.abs(number1)));  // Math.abs(number1) 10.5\nSystem.out.println("Math.ceil(number1) " + (Math.ceil(number1)));  // Math.ceil(number1) 11\nSystem.out.println("Math.floor(number1) " + (Math.floor(number1)));  // Math.floor(number1) 10\nSystem.out.println("Math.max(number1, number2) " + (Math.max(number1, number2)));  // Math.max(number1, number2) 15\nSystem.out.println("Math.min(number1, number2) " + (Math.min(number1, number2)));  // Math.min(number1, number2) 10.5\nSystem.out.println("Math.pow(number1, 2) " + (Math.pow(number1, 2)));  // Math.pow(number1, 2) 110.25\nSystem.out.println("Math.round(number1) " + (Math.round(number1)));  // Math.round(number1) 10\nSystem.out.println("Math.sqrt(number1) " + (Math.sqrt(number1)));  // Math.sqrt(number1) 3.24037034920393\n\nSystem.out.println("Random Number Between 0 and 10 = " + (int)(Math.random() * 11 + 1 + 0));  // Math.random() * (max - min + 1) + min2 = change min2 to 1 to become between 1 and 10\n\nRandom rand = new Random();\nSystem.out.println("Random Number Between 0 and 10 " + (rand.nextInt(11)));\nSystem.out.println("Random Number Between 1 and 10 " + (rand.nextInt(10 - 1 + 1) + 1));  // rand.nextInt((max - min) + 1) + min;\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"date-and-time"},"Date and Time"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"must import")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.text.DateFormat;\nimport java.util.Locale;\nimport java.time.LocalDateTime;  // java 8\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Date d = new Date();  // Fri Jul 09 00:46:09 SGT 2021\n\n// January = 0, Feburary = 1, ...\nGregorianCalendar gc = new GregorianCalendar(2009, 1, 28);\ngc.add(GregorianCalendar.DATE, 1);  // add a day\nDate d2 = gc.getTime();  // Sun Mar 01 00:00:00 SGT 2009\n\n// format date\n// method 1, with no specific style and locale\nDateFormat df = DateFormat.getDateInstance();\nSystem.out.println(df.format(d2));  // Mar 1, 2009\n// method 2, with style and no locale\nDateFormat df2 = DateFormat.getDateInstance(DateFormat.FULL);\nSystem.out.println(df2.format(d2));  // Sunday, March 1, 2009\n// method 3, with style and locale\nLocale locale = new Locale("en_SG", "SGP");  // set as Singapore\nDateFormat df3 = DateFormat.getDateInstance(DateFormat.FULL, locale);\nSystem.out.println(df3.format(d2));  // 2009 Mar 1, Sun\n\nLocalDateTime ldt = LocalDateTime.now();  // 2021-07-09T01:03:50.874932\n\n// January = 1, Feburary = 2, ...\nLocalDate ld = LocalDate.of(2009, 1, 28);  // 2009-01-28\n\nDateTimeFormatter dtf = DateTimeFormatter.ISO_DATE;\nSystem.out.println(dtf.format(ld));  // 2009-01-28\n\n// format with a specific pattern\nDateTimeFormatter dtf2 = DateTimeFormatter.ofPattern("M/d/yyyy");\nSystem.out.println(dtf2.format(ld));  // 1/28/2009\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"file-system"},"File System"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.FileWriter;\n\npublic class Main {\n  public static void main(String[] args) {\n    String sourceFile = "textfile";  // sourceFile path\n    String targetFile = "newtextfile";  // targetFile path\n\n    // try with resources statement, only available for java 8 and later versions\n    // can\'t be used on android\n    try (\n      FileReader fReader = new FileReader(sourceFile);  // read file\n      BufferedReader bReader = new BufferedReader(fReader);  // read lines in file\n      FileWriter writer = new FileWriter(targetFile);  // write file\n      ) {\n      while (true) {\n        String line = bReader.readLine();\n        if (line == null) {\n          break;\n        } else {\n          writer.write(line + "\\n");\n        }\n      }\n      System.out.println("File copied");\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.io.IOException;\n\npublic class Main {\n  public static void main(String[] args) {\n    String subDirectory = "";  // parent folder where the file is located\n    String sourceFilename = "textfile";\n    String targetFilename = "newtargetfile3";\n\n    // only for java 7 or later versions, not available for android\n    Path sourceFile = Paths.get(subDirectory, sourceFilename);\n    Path targetFile = Paths.get(subDirectory, targetFilename);\n\n    try {\n      // copy existing file contents into the new file\n      Files.copy(sourceFile, targetFile, StandardCopyOption.REPLACE_EXISTING);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using ",(0,r.kt)("inlineCode",{parentName:"li"},"commons-io")," library to copy file",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"for latest versions and for android"),(0,r.kt)("li",{parentName:"ul"},"download the ",(0,r.kt)("inlineCode",{parentName:"li"},"commons-io")," jar file"),(0,r.kt)("li",{parentName:"ul"},"create a ",(0,r.kt)("inlineCode",{parentName:"li"},"lib")," folder inside the root folder of your project and move the ",(0,r.kt)("inlineCode",{parentName:"li"},"commons-io")," jar file into it"),(0,r.kt)("li",{parentName:"ul"},"then add the jar file into the class path")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import org.apache.commons.io.FileUtils;  // common-io library\n\nimport java.io.File;\nimport java.io.IOException;\n\npublic class Main {\n  public static void main(String[] args) {\n    File sourceFile = new File("path/to/file.txt");\n    File targetFile = new File("path/to/newfile.txt");\n\n    try {\n      // use commons-io\n      FileUtils.copyFile(sourceFile, targetFile);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"reading a text file over the internet")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.net.URL;\nimport java.io.InputStream;\nimport java.io.BufferedInputStream;\nimport java.io.IOException;\n\npublic class Main {\n  private static final String FLOWERS_FEED = "https://services.hanselandpetal.com/feeds/flowers.xml";\n\n  // adding the throws block allow code to run safely without having to write another try catch statement in the finally block\n  public static void main(String[] args) throws IOException {\n    InputStream stream = null;\n    BufferedInputStream buf = null;\n    try {\n      URL url = new URL(FLOWERS_FEED);\n      stream = url.openStream();\n      buf = new BufferedInputStream(stream);\n\n      StringBuilder sb = new StringBuilder();\n\n      while (true) {\n        int data = buf.read();  // gets a single character from stream, returns a character integer value if found else returns -1\n\n        if (data == -1) {\n          break;\n        } else {\n          sb.append((char) data);  // translate the integer value into a character\n        }\n      }\n      System.out.println(sb);\n    } catch(IOException e) {\n      e.printStackTrace();\n    } finally {\n      // use finally to explicitly close the stream\n      stream.close();\n      buf.close();\n    }\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"access-modifier"},"Access modifier"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"These modifiers control the scope of class and methods",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Access Modifiers:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"default"),(0,r.kt)("li",{parentName:"ul"},"public",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"visible to all classes"))),(0,r.kt)("li",{parentName:"ul"},"protected",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"visible to class they belong and any subclasses"))),(0,r.kt)("li",{parentName:"ul"},"private",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"most restricted, visible only to class they belong"))))),(0,r.kt)("li",{parentName:"ul"},"Non-access Modifiers:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"final",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"constant value, value cannot be changed"))),(0,r.kt)("li",{parentName:"ul"},"abstract"),(0,r.kt)("li",{parentName:"ul"},"strictfp"),(0,r.kt)("li",{parentName:"ul"},"static",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"can be accessed without creating a class instance")))))))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"modifier"),(0,r.kt)("th",{parentName:"tr",align:null},"same class"),(0,r.kt)("th",{parentName:"tr",align:null},"same package"),(0,r.kt)("th",{parentName:"tr",align:null},"outside package by subclass"),(0,r.kt)("th",{parentName:"tr",align:null},"everywhere else"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"public"),(0,r.kt)("td",{parentName:"tr",align:null},"Y"),(0,r.kt)("td",{parentName:"tr",align:null},"Y"),(0,r.kt)("td",{parentName:"tr",align:null},"Y"),(0,r.kt)("td",{parentName:"tr",align:null},"Y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"protected"),(0,r.kt)("td",{parentName:"tr",align:null},"Y"),(0,r.kt)("td",{parentName:"tr",align:null},"Y"),(0,r.kt)("td",{parentName:"tr",align:null},"Y"),(0,r.kt)("td",{parentName:"tr",align:null},"N")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},'no modifier aka "package private"'),(0,r.kt)("td",{parentName:"tr",align:null},"Y"),(0,r.kt)("td",{parentName:"tr",align:null},"Y"),(0,r.kt)("td",{parentName:"tr",align:null},"N"),(0,r.kt)("td",{parentName:"tr",align:null},"N")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"private"),(0,r.kt)("td",{parentName:"tr",align:null},"Y"),(0,r.kt)("td",{parentName:"tr",align:null},"N"),(0,r.kt)("td",{parentName:"tr",align:null},"N"),(0,r.kt)("td",{parentName:"tr",align:null},"N")))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"iterators"},"Iterators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Iterator;  // must import\n\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Set;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using iterators to loop through collections")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> list = new ArrayList<>();\nlist.add("Japan");\nlist.add("China");\nlist.add("USA");\n\n// method 1: using Iterator\nIterator<String> iterator = list.iterator();\nwhile (iterator.hasNext()) {\n  String value = iterator.next();\n  System.out.println(value);\n}\n// method 2: using forEach loop\nfor (String value: list) {\n  System.out.println(value);\n}\n// method 3: using List\'s forEach method, only available for Java 8 onwards, not included in android java 8\nlist.forEach(System.out::println);  // method 1\nlist.forEach((s) -> {System.out.println(s});  // method 2\n\n\n// loop hash maps with Iterator\nMap<String, String> map = new HashMap<>();\nmap.put("jp", "Japan");\nmap.put("sg", "Singapore");\nmap.put("usa", "United States");\nSet<String> keys = map.keySet();\n\nIterator<String> iterator = keys.iterator();\nwhile (iterator.hasNext()) {\n  String key = iterator.next();\n  System.out.println(map.get(key));\n}\n\n// loop has maps with forEach\nfor (String key : keys) {\n  System.out.println(map.get(key));\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"generators"},"Generators"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"fetching-web-data"},"Fetching Web Data"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"enum"},"Enum"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Enumerations are lists of possible values that you can use for any particular variable"),(0,r.kt)("li",{parentName:"ul"},"An enumeration in java is called an enum class")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// usual enums\npublic enum Names1 {\n  JOHN, PETER;\n}\n\n// setting a string value for enums\npublic enum Names2 {\n  JOHN("John"), PETER("Peter");\n\n  private String name;\n\n  Names2(String name) {\n    this.name = name;\n  }\n\n  @Override\n  public String toString() {\n    return this.name;\n  }\n}\n\npublic class Person {\n  private Names1 name1 = Names1.JOHN;  // using enum to set a constant variable\n  private Names2 name2 = Names2.JOHN;\n\n  public Names1 getName1() {\n    return this.name1;\n  }\n\n  public Names2 getName2() {\n    return this.name2;\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Person p = new Person();\n    System.out.println(p.getName1());  // "JOHN"\n    System.out.println(p.getName2());  // "John"\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,r.kt)("h2",{id:"language-specific"},"Language Specific"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Number formatting")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'long longValue = 10_000_000;\n// method 1\n// using "import java.text.NumberFormat;"\nNumberFormat formatter = NumberFormat.getNumberInstance();\nString formatted = formatter.format(lognValue);  // "10,000,000" (us locale)\n// method 2\n// using "import java.util.Locale;"\nLocale locale = new Locale("da", "DK");  // set as Denmark\nNumberFormat formatter = NumberFormat.getNumberInstance(locale);\nString formatted = formatter.format(lognValue);  // "10.000.000" (dk locale)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Currency formatting")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'long longValue = 10_000_000.00;\n// method 1\n// using "import java.text.NumberFormat;"\nNumberFormat formatter = NumberFormat.getCurrencyInstance();\nString formatted = formatter.format(lognValue);  // "$10,000,000.00" (us locale)\n// method 2\n// using "import java.util.Locale;"\nLocale locale = new Locale("da", "DK");  // set as Denmark\nNumberFormat formatter = NumberFormat.getCurrencyInstance(locale);\nString formatted = formatter.format(lognValue);  // "kr10.000.000,00" (dk locale)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Integer formatting")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'long longValue = 10_000_000.89;\n// method 1\n// using "import java.text.NumberFormat;"\nNumberFormat formatter = NumberFormat.getIntegerInstance();\nString formatted = formatter.format(lognValue);  // "10,000,001" (us locale)\n// method 2\n// using "import java.util.Locale;"\nLocale locale = new Locale("da", "DK");  // set as Denmark\nNumberFormat formatter = NumberFormat.getIntegerInstance(locale);\nString formatted = formatter.format(lognValue);  // "10.000.001" (dk locale)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"double colon operator / method reference operator"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"<Class name>::<method name>"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"can be used for"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a static method")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.*;\n\nclass GFG {\n  // static function to be called\n  static void someFunction(String s)\n  {\n    System.out.println(s);\n  }\n\n  public static void main(String[] args)\n  {\n    List<String> list = new ArrayList<String>();\n    list.add("Geeks");\n    list.add("For");\n    list.add("GEEKS");\n\n    // call the static method\n    // using double colon operator\n    list.forEach(GFG::someFunction);\n  }\n}\n')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"an instance method")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.*;\n\nclass GFG {\n  // instance function to be called\n  void someFunction(String s)\n  {\n    System.out.println(s);\n  }\n\n  public static void main(String[] args)\n  {\n    List<String> list = new ArrayList<String>();\n    list.add("Geeks");\n    list.add("For");\n    list.add("GEEKS");\n\n    // call the instance method\n    // using double colon operator\n    list.forEach((new GFG())::someFunction);\n  }\n}\n')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"super method")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.*;\nimport java.util.function.*;\n\nclass Test {\n  // super function to be called\n  String print(String str)\n  {\n    return ("Hello " + str + "\\n");\n  }\n}\n\nclass GFG extends Test {\n  // instance method to override super method\n  @Override\n  String print(String s)\n  {\n    // call the super method\n    // using double colon operator\n    Function<String, String> func = super::print;\n\n    String newValue = func.apply(s);\n    newValue += "Bye " + s + "\\n";\n    System.out.println(newValue);\n    return newValue;\n  }\n\n  // Driver code\n  public static void main(String[] args)\n  {\n    List<String> list = new ArrayList<String>();\n    list.add("Geeks");\n    list.add("For");\n    list.add("GEEKS");\n\n    // call the instance method\n    // using double colon operator\n    list.forEach(new GFG()::print);\n  }\n}\n')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Instance method of an arbitrary object of a particular type")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.*;\n\nclass Test {\n  String str=null;\n\n  Test(String s)\n  {\n    this.str=s;\n  }\n  // instance function to be called\n  void someFunction()\n  {\n    System.out.println(this.str);\n  }\n}\n\nclass GFG {\n  public static void main(String[] args)\n  {\n    List<Test> list = new ArrayList<Test>();\n    list.add(new Test("Geeks"));\n    list.add(new Test("For"));\n    list.add(new Test("GEEKS"));\n\n    // call the instance method\n    // using double colon operator\n    list.forEach(Test::someFunction);\n  }\n}\n')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a constructor")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.*;\n\nclass GFG {\n  // Class constructor\n  public GFG(String s)\n  {\n    System.out.println("Hello " + s);\n  }\n\n  // Driver code\n  public static void main(String[] args)\n  {\n    List<String> list = new ArrayList<String>();\n    list.add("Geeks");\n    list.add("For");\n    list.add("GEEKS");\n\n    // call the class constructor\n    // using double colon operator\n    list.forEach(GFG::new);\n  }\n}\n')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")))}u.isMDXComponent=!0}}]);