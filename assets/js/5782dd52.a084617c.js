"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8584],{3905:(e,n,t)=>{t.d(n,{Zo:()=>a,kt:()=>m});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},a=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,a=d(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,h=p["".concat(l,".").concat(m)]||p[m]||c[m]||s;return t?r.createElement(h,o(o({ref:n},a),{},{components:t})):r.createElement(h,o({ref:n},a))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,o=new Array(s);o[0]=p;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:i,o[1]=d;for(var u=2;u<s;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3352:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var r=t(83117),i=(t(67294),t(3905));const s={},o="Singly Linked List Example",d={unversionedId:"interviewPrep/data_structures/08LinkedLists/typescript/singlyLinkedList",id:"interviewPrep/data_structures/08LinkedLists/typescript/singlyLinkedList",title:"Singly Linked List Example",description:"Utils",source:"@site/docs/interviewPrep/data_structures/08LinkedLists/typescript/singlyLinkedList.md",sourceDirName:"interviewPrep/data_structures/08LinkedLists/typescript",slug:"/interviewPrep/data_structures/08LinkedLists/typescript/singlyLinkedList",permalink:"/docs/interviewPrep/data_structures/08LinkedLists/typescript/singlyLinkedList",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/data_structures/08LinkedLists/typescript/singlyLinkedList.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Doubly Linked List Example",permalink:"/docs/interviewPrep/data_structures/08LinkedLists/typescript/doublyLinkedList"},next:{title:"Sorted Linked List Example",permalink:"/docs/interviewPrep/data_structures/08LinkedLists/typescript/sortedLinkedList"}},l={},u=[{value:"Utils",id:"utils",level:2},{value:"Node",id:"node",level:2},{value:"Linked List",id:"linked-list",level:2}],a={toc:u};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},a,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"singly-linked-list-example"},"Singly Linked List Example"),(0,i.kt)("h2",{id:"utils"},"Utils"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function defaultEquals<T>(a: T, b: T): boolean {\n  return a === b;\n}\n")),(0,i.kt)("h2",{id:"node"},"Node"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class Node<T> {\n  constructor(public element: T, public next?: Node<T>) {}\n}\n")),(0,i.kt)("h2",{id:"linked-list"},"Linked List"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'class LinkedList<T> {\n  protected count = 0;\n  protected head?: Node<T>;\n\n  /**\n   * @description:\n   * @param {T} element\n   */\n  public push(element: T) {\n    const node = new Node(element);\n    let current;\n\n    if (this.head == null) {\n      // add directly when the first element\n      this.head = node;\n    } else {\n      // find the last element, add after it\n      current = this.getNodeAt(this.size() - 1);\n      current.next = node;\n    }\n\n    // Finally increment the count by 1\n    this.count++;\n  }\n  /**\n   * @description: Get the node at the specified index\n   * @param {number} index\n   * @return {Node<T>} Returns the node at the specified index\n   */\n  public getNodeAt(index: number): Node<T> {\n    if (index >= 0 && index <= this.count) {\n      let node = this.head;\n      // How many times to iterate on from the first node\n      for (let i = 0; i < index && node != null; i++) {\n        node = node.next;\n      }\n      return node;\n    }\n    return undefined;\n  }\n\n  /**\n   * @description: Get the element at the specified index\n   * @param {number} index\n   * @return {T} Returns the element at the specified index\n   */\n  public getElementAt(index: number): T {\n    return this.getNodeAt(index)?.element;\n  }\n\n  /**\n   * @description: Inserts an element at the specified index\n   * @param {T} element\n   * @param {number} index\n   * @return {boolean} Returns whether the insertion was successful\n   */\n  public insert(element: T, index: number) {\n    if (index >= 0 && index <= this.count) {\n      const node = new Node(element);\n\n      // Insert elements are also divided into "first" and "non-first" cases\n      if (index === 0) {\n        const current = this.head;\n        node.next = current;\n        this.head = node;\n      } else {\n        // Untangle the next link at this location and insert a new node\n        const previous = this.getNodeAt(index - 1);\n        node.next = previous.next;\n        previous.next = node;\n      }\n      this.count++;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @description: removes the element at the specified index\n   * @param {number} index\n   * @return {T} Returns the removed element\n   */\n  public removeAt(index: number) {\n    if (index >= 0 && index < this.count) {\n      let current = this.head;\n\n      // Inserting and removing elements is also divided into two cases: "first" and "non-first"\n      if (index === 0) {\n        this.head = current.next;\n      } else {\n        const previous = this.getNodeAt(index - 1);\n        current = previous.next;\n        previous.next = current.next;\n      }\n      this.count--;\n      return current.element;\n    }\n    return undefined;\n  }\n\n  /**\n   * @description: remove the specified element\n   * @param {T} element\n   * @return {T} element returns the removed element\n   */\n  public remove(element: T): T {\n    const index = this.indexOf(element);\n    return this.removeAt(index);\n  }\n\n  /**\n   * @description: Returns the index of the specified element (only the first equal from the front is returned)\n   * @param {T} element\n   * @return {number} index\n   */\n  public indexOf(element: T): number {\n    let current = this.head;\n\n    // iterate over looking for equal elements\n    for (let i = 0; i < this.size() && current != null; i++) {\n      // use the method to determine equality\n      if (defaultEquals(element, current.element)) {\n        return i;\n      }\n      current = current.next;\n    }\n\n    return -1;\n  }\n\n  /**\n   * @description:\n   * @return {boolean}\n   */\n  public isEmpty(): boolean {\n    return this.size() === 0;\n  }\n\n  /**\n   * @description:\n   * @return {number}\n   */\n  public size(): number {\n    return this.count;\n  }\n\n  /**\n   * @description: Get the first node of the linked list\n   * @return {Node<T>}\n   */\n  public getHead(): Node<T> {\n    return this.head;\n  }\n\n  /**\n   * @description:\n   */\n  public clear() {\n    this.head = undefined;\n    this.count = 0;\n  }\n\n  /**\n   * @description:\n   * @return {string}\n   */\n  public toString(): string {\n    if (this.head == null) {\n      return "";\n    }\n    let objString = `${this.head.element}`;\n    let current = this.head.next;\n    for (let i = 1; i < this.size() && current != null; i++) {\n      objString = `${objString},${current.element}`;\n      current = current.next;\n    }\n    return objString;\n  }\n}\n')))}c.isMDXComponent=!0}}]);