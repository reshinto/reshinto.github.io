"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[25653],{3905:(e,n,t)=>{t.d(n,{Zo:()=>w,kt:()=>m});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),o=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},w=function(e){var n=o(e.components);return i.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,w=d(e,["components","mdxType","originalType","parentName"]),p=o(t),m=r,f=p["".concat(l,".").concat(m)]||p[m]||c[m]||s;return t?i.createElement(f,a(a({ref:n},w),{},{components:t})):i.createElement(f,a({ref:n},w))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,a=new Array(s);a[0]=p;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:r,a[1]=d;for(var o=2;o<s;o++)a[o]=t[o];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},41783:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>d,toc:()=>o});var i=t(83117),r=(t(67294),t(3905));const s={},a="Example 2",d={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Mediator/swift/example2",id:"interviewPrep/designPatterns/Behavioral_patterns/Mediator/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Mediator/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Mediator/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/typescript/"}},l={},o=[],w={toc:o};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},w,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"example-2"},"Example 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'import XCTest\n\nclass MediatorRealWorld: XCTestCase {\n\n    func test() {\n\n        let newsArray = [News(id: 1, title: "News1", likesCount: 1),\n                         News(id: 2, title: "News2", likesCount: 2)]\n\n        let numberOfGivenLikes = newsArray.reduce(0, { $0 + $1.likesCount })\n\n        let mediator = ScreenMediator()\n\n        let feedVC = NewsFeedViewController(mediator, newsArray)\n        let newsDetailVC = NewsDetailViewController(mediator, newsArray.first!)\n        let profileVC = ProfileViewController(mediator, numberOfGivenLikes)\n\n        mediator.update([feedVC, newsDetailVC, profileVC])\n\n        feedVC.userLikedAllNews()\n        feedVC.userDislikedAllNews()\n    }\n}\n\nclass NewsFeedViewController: ScreenUpdatable {\n\n    private var newsArray: [News]\n    private weak var mediator: ScreenUpdatable?\n\n    init(_ mediator: ScreenUpdatable?, _ newsArray: [News]) {\n        self.newsArray = newsArray\n        self.mediator = mediator\n    }\n\n    func likeAdded(to news: News) {\n\n        print("News Feed: Received a liked news model with id \\(news.id)")\n\n        for var item in newsArray {\n            if item == news {\n                item.likesCount += 1\n            }\n        }\n    }\n\n    func likeRemoved(from news: News) {\n\n        print("News Feed: Received a disliked news model with id \\(news.id)")\n\n        for var item in newsArray {\n            if item == news {\n                item.likesCount -= 1\n            }\n        }\n    }\n\n    func userLikedAllNews() {\n        print("\\n\\nNews Feed: User LIKED all news models")\n        print("News Feed: I am telling to mediator about it...\\n")\n        newsArray.forEach({ mediator?.likeAdded(to: $0) })\n    }\n\n    func userDislikedAllNews() {\n        print("\\n\\nNews Feed: User DISLIKED all news models")\n        print("News Feed: I am telling to mediator about it...\\n")\n        newsArray.forEach({ mediator?.likeRemoved(from: $0) })\n    }\n}\n\nclass NewsDetailViewController: ScreenUpdatable {\n\n    private var news: News\n    private weak var mediator: ScreenUpdatable?\n\n    init(_ mediator: ScreenUpdatable?, _ news: News) {\n        self.news = news\n        self.mediator = mediator\n    }\n\n    func likeAdded(to news: News) {\n        print("News Detail: Received a liked news model with id \\(news.id)")\n        if self.news == news {\n            self.news.likesCount += 1\n        }\n    }\n\n    func likeRemoved(from news: News) {\n        print("News Detail: Received a disliked news model with id \\(news.id)")\n        if self.news == news {\n            self.news.likesCount -= 1\n        }\n    }\n}\n\nclass ProfileViewController: ScreenUpdatable {\n\n    private var numberOfGivenLikes: Int\n    private weak var mediator: ScreenUpdatable?\n\n    init(_ mediator: ScreenUpdatable?, _ numberOfGivenLikes: Int) {\n        self.numberOfGivenLikes = numberOfGivenLikes\n        self.mediator = mediator\n    }\n\n    func likeAdded(to news: News) {\n        print("Profile: Received a liked news model with id \\(news.id)")\n        numberOfGivenLikes += 1\n    }\n\n    func likeRemoved(from news: News) {\n        print("Profile: Received a disliked news model with id \\(news.id)")\n        numberOfGivenLikes -= 1\n    }\n}\n\nprotocol ScreenUpdatable: class {\n\n    func likeAdded(to news: News)\n\n    func likeRemoved(from news: News)\n}\n\nclass ScreenMediator: ScreenUpdatable {\n\n    private var screens: [ScreenUpdatable]?\n\n    func update(_ screens: [ScreenUpdatable]) {\n        self.screens = screens\n    }\n\n    func likeAdded(to news: News) {\n        print("Screen Mediator: Received a liked news model with id \\(news.id)")\n        screens?.forEach({ $0.likeAdded(to: news) })\n    }\n\n    func likeRemoved(from news: News) {\n        print("ScreenMediator: Received a disliked news model with id \\(news.id)")\n        screens?.forEach({ $0.likeRemoved(from: news) })\n    }\n}\n\nstruct News: Equatable {\n\n    let id: Int\n\n    let title: String\n\n    var likesCount: Int\n\n    /// Other properties\n\n    static func == (left: News, right: News) -> Bool {\n        return left.id == right.id\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"News Feed: User LIKED all news models\nNews Feed: I am telling to mediator about it...\n\nScreen Mediator: Received a liked news model with id 1\nNews Feed: Received a liked news model with id 1\nNews Detail: Received a liked news model with id 1\nProfile: Received a liked news model with id 1\nScreen Mediator: Received a liked news model with id 2\nNews Feed: Received a liked news model with id 2\nNews Detail: Received a liked news model with id 2\nProfile: Received a liked news model with id 2\n\n\nNews Feed: User DISLIKED all news models\nNews Feed: I am telling to mediator about it...\n\nScreenMediator: Received a disliked news model with id 1\nNews Feed: Received a disliked news model with id 1\nNews Detail: Received a disliked news model with id 1\nProfile: Received a disliked news model with id 1\nScreenMediator: Received a disliked news model with id 2\nNews Feed: Received a disliked news model with id 2\nNews Detail: Received a disliked news model with id 2\nProfile: Received a disliked news model with id 2\n")))}c.isMDXComponent=!0}}]);