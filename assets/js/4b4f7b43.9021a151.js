"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[68207],{3905:(e,n,t)=>{t.d(n,{Zo:()=>a,kt:()=>_});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},a=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,a=p(e,["components","mdxType","originalType","parentName"]),d=c(t),_=o,f=d["".concat(l,".").concat(_)]||d[_]||u[_]||r;return t?i.createElement(f,s(s({ref:n},a),{},{components:t})):i.createElement(f,s({ref:n},a))}));function _(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=d;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,s[1]=p;for(var c=2;c<r;c++)s[c]=t[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},71015:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var i=t(83117),o=(t(67294),t(3905));const r={},s="TypeScript Example",p={unversionedId:"interviewPrep/design_principles/SOLID/OpenClosedPrinciple/typescript/readme",id:"interviewPrep/design_principles/SOLID/OpenClosedPrinciple/typescript/readme",title:"TypeScript Example",description:"Violate OCP",source:"@site/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/typescript/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/OpenClosedPrinciple/typescript",slug:"/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/typescript/",permalink:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Example",permalink:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/python/"},next:{title:"Single Responsibility Principle (SRP)",permalink:"/docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/"}},l={},c=[{value:"Violate OCP",id:"violate-ocp",level:2},{value:"Violate OCP Extended",id:"violate-ocp-extended",level:2},{value:"Pass OCP",id:"pass-ocp",level:2}],a={toc:c};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,i.Z)({},a,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,o.kt)("h2",{id:"violate-ocp"},"Violate OCP"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"potential issues:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"if later, you want to add a new option or new question type to the quiz",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"e.g.: a range of values type"))),(0,o.kt)("li",{parentName:"ul"},"refer to ",(0,o.kt)("strong",{parentName:"li"},"Violate OCP Extended"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'function printQuiz(questions) {\n  questions.forEach((question) => {\n    console.log(question.description);\n    switch (question.type) {\n      case "boolean":\n        console.log("1. True");\n        console.log("2.False");\n        break;\n      case "multipleChoice":\n        question.options.forEach((option, index) => {\n          console.log(`${index + 1}. ${option}`);\n        });\n        break;\n      case "text":\n        console.log("Answer: _______________");\n        break;\n      default:\n        console.log("");\n        break;\n    }\n  });\n}\n\nconst questions = [\n  {\n    type: "boolean",\n    description: "This video is useful.",\n  },\n  {\n    type: "multipleChoice",\n    description: "What is your favorite language?",\n    options: ["CSS", "HTML", "JS", "Python"],\n  },\n  {\n    type: "text",\n    description: "Describe your favorite JS feature",\n  },\n];\n\nprintQuiz(questions);\n')),(0,o.kt)("h2",{id:"violate-ocp-extended"},"Violate OCP Extended"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'function printQuiz(questions) {\n  // this allows us to extend new types, which passes the open portion of the open-closed principle\n  // when we add new features, it automatically extends the new questions and works\n  // thus, modification of the open portion is not required\n  questions.forEach((question) => {\n    console.log(question.description);\n    switch (question.type) {\n      case "boolean":\n        console.log("1. True");\n        console.log("2.False");\n        break;\n      case "multipleChoice":\n        question.options.forEach((option, index) => {\n          console.log(`${index + 1}. ${option}`);\n        });\n        break;\n      case "text":\n        console.log("Answer: _______________");\n        break;\n      // this violates the closed portion of the open-closed principle\n      // this function should be closed and not allowed for modifications\n      // it should just work when new features are extended\n      case "range":\n        console.log("Minimum: ______________");\n        console.log("Maximum: ______________");\n        break;\n      default:\n        console.log("");\n        break;\n    }\n  });\n}\n\nconst questions = [\n  {\n    type: "boolean",\n    description: "This video is useful.",\n  },\n  {\n    type: "multipleChoice",\n    description: "What is your favorite language?",\n    options: ["CSS", "HTML", "JS", "Python"],\n  },\n  {\n    type: "text",\n    description: "Describe your favorite JS feature",\n  },\n  // this is ok to modify as it is just extending new feature\n  {\n    type: "range",\n    description: "What is the speed limit in your city?",\n  },\n];\n\nprintQuiz(questions);\n')),(0,o.kt)("h2",{id:"pass-ocp"},"Pass OCP"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface QuestionInterface {\n  description: string;\n  printQuestionChoices(): void;\n}\n\nclass BooleanQuestion implements QuestionInterface {\n  description: string;\n\n  constructor(description: string) {\n    this.description = description;\n  }\n\n  printQuestionChoices() {\n    console.log("1. True");\n    console.log("2. False");\n  }\n}\n\nclass MultipleChoiceQuestion implements QuestionInterface {\n  description: string;\n  options: string[];\n\n  constructor(description: string, options: string[]) {\n    this.description = description;\n    this.options = options;\n  }\n\n  printQuestionChoices() {\n    this.options.forEach((option, index) => {\n      console.log(`${index + 1}. ${option}`);\n    });\n  }\n}\n\nclass TextQuestion implements QuestionInterface {\n  description: string;\n\n  constructor(description: string) {\n    this.description = description;\n  }\n\n  printQuestionChoices() {\n    console.log("Answer: _______________");\n  }\n}\n\nclass RangeQuestion implements QuestionInterface {\n  description: string;\n\n  constructor(description: string) {\n    this.description = description;\n  }\n\n  printQuestionChoices() {\n    console.log("Minimum: ______________");\n    console.log("Maximum: ______________");\n  }\n}\n\n// this is open to be extended\n// closed for modification as we do not need to touch this function\nfunction printQuiz(questions: QuestionInterface[]) {\n  questions.forEach((question) => {\n    console.log(question.description);\n    question.printQuestionChoices();\n  });\n}\n\n// only need to extend new features here\nconst questions: QuestionInterface[] = [\n  new BooleanQuestion("This video is useful."),\n  new MultipleChoiceQuestion("What is your favorite language?", [\n    "CSS",\n    "HTML",\n    "JS",\n    "Python",\n  ]),\n  new TextQuestion("Describe your favorite JS feature."),\n  new RangeQuestion("What is the speed limit in your city?"),\n];\n\nprintQuiz(questions);\n')))}u.isMDXComponent=!0}}]);