"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[52866],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=l(n),d=a,u=h["".concat(c,".").concat(d)]||h[d]||f[d]||o;return n?r.createElement(u,s(s({ref:t},p),{},{components:n})):r.createElement(u,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},87782:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(83117),a=(n(67294),n(3905));const o={},s="Python Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/State/python/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/State/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/State/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/State/python",slug:"/interviewPrep/designPatterns/Behavioral_patterns/State/python/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/State/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/javascript/"},next:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/swift/"}},c={},l=[],p={toc:l};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python-example"},"Python Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'"""\nState Design Pattern\n\nIntent: Lets an object alter its behavior when its internal state changes. It\nappears as if the object changed its class.\n"""\n\n\nfrom __future__ import annotations\nfrom abc import ABC, abstractmethod\n\n\nclass Context:\n    """\n    The Context defines the interface of interest to clients. It also maintains\n    a reference to an instance of a State subclass, which represents the current\n    state of the Context.\n    """\n\n    _state = None\n    """\n    A reference to the current state of the Context.\n    """\n\n    def __init__(self, state: State) -> None:\n        self.transition_to(state)\n\n    def transition_to(self, state: State):\n        """\n        The Context allows changing the State object at runtime.\n        """\n\n        print(f"Context: Transition to {type(state).__name__}")\n        self._state = state\n        self._state.context = self\n\n    """\n    The Context delegates part of its behavior to the current State object.\n    """\n\n    def request1(self):\n        self._state.handle1()\n\n    def request2(self):\n        self._state.handle2()\n\n\nclass State(ABC):\n    """\n    The base State class declares methods that all Concrete State should\n    implement and also provides a backreference to the Context object,\n    associated with the State. This backreference can be used by States to\n    transition the Context to another State.\n    """\n\n    @property\n    def context(self) -> Context:\n        return self._context\n\n    @context.setter\n    def context(self, context: Context) -> None:\n        self._context = context\n\n    @abstractmethod\n    def handle1(self) -> None:\n        pass\n\n    @abstractmethod\n    def handle2(self) -> None:\n        pass\n\n\n"""\nConcrete States implement various behaviors, associated with a state of the\nContext.\n"""\n\n\nclass ConcreteStateA(State):\n    def handle1(self) -> None:\n        print("ConcreteStateA handles request1.")\n        print("ConcreteStateA wants to change the state of the context.")\n        self.context.transition_to(ConcreteStateB())\n\n    def handle2(self) -> None:\n        print("ConcreteStateA handles request2.")\n\n\nclass ConcreteStateB(State):\n    def handle1(self) -> None:\n        print("ConcreteStateB handles request1.")\n\n    def handle2(self) -> None:\n        print("ConcreteStateB handles request2.")\n        print("ConcreteStateB wants to change the state of the context.")\n        self.context.transition_to(ConcreteStateA())\n\n\nif __name__ == "__main__":\n    # The client code.\n\n    context = Context(ConcreteStateA())\n    context.request1()\n    context.request2()\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Context: Transition to ConcreteStateA\nConcreteStateA handles request1.\nConcreteStateA wants to change the state of the context.\nContext: Transition to ConcreteStateB\nConcreteStateB handles request2.\nConcreteStateB wants to change the state of the context.\nContext: Transition to ConcreteStateA\n")))}f.isMDXComponent=!0}}]);