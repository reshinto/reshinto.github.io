"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[17552],{3905:(e,n,i)=>{i.d(n,{Zo:()=>p,kt:()=>f});var r=i(67294);function t(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,r)}return i}function c(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?o(Object(i),!0).forEach((function(n){t(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function l(e,n){if(null==e)return{};var i,r,t=function(e,n){if(null==e)return{};var i,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)i=o[r],n.indexOf(i)>=0||(t[i]=e[i]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)i=o[r],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(t[i]=e[i])}return t}var a=r.createContext({}),s=function(e){var n=r.useContext(a),i=n;return e&&(i="function"==typeof e?e(n):c(c({},n),e)),i},p=function(e){var n=s(e.components);return r.createElement(a.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var i=e.components,t=e.mdxType,o=e.originalType,a=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(i),f=t,m=d["".concat(a,".").concat(f)]||d[f]||u[f]||o;return i?r.createElement(m,c(c({ref:n},p),{},{components:i})):r.createElement(m,c({ref:n},p))}));function f(e,n){var i=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=i.length,c=new Array(o);c[0]=d;var l={};for(var a in n)hasOwnProperty.call(n,a)&&(l[a]=n[a]);l.originalType=e,l.mdxType="string"==typeof e?e:t,c[1]=l;for(var s=2;s<o;s++)c[s]=i[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,i)}d.displayName="MDXCreateElement"},21502:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=i(83117),t=(i(67294),i(3905));const o={},c="C# Example",l={unversionedId:"interviewPrep/design_principles/SOLID/OpenClosedPrinciple/cSharp/readme",id:"interviewPrep/design_principles/SOLID/OpenClosedPrinciple/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/cSharp/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/OpenClosedPrinciple/cSharp",slug:"/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/cSharp/",permalink:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Open Closed Principle (OCP)",permalink:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/javascript/"}},a={},s=[],p={toc:s};function u(e){let{components:n,...i}=e;return(0,t.kt)("wrapper",(0,r.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"c-example"},"C# Example"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\nOpen Closed Principle\n\n- parts of the system or in the subsystems have to be open for extensions\n  - so you should be able to extend the functionality of a filter\n    - but should be closed for modification\n\n- shouldn\'t have to go back into the filter to modify things\n  - instead, to add functionality, should make new classes, implement ISpecifications, and feed those into something that has already been made and something that have already been shipped\n\n- should not reship the functionality of the filter to customers, but can ship additional modules, which implements an ISpecification and make use of better filter\n\n- the reason for doing this is because the code might already been shipped to the client\n*/\n\nusing System.Collections.Generic;\n\n// different colors of a product\npublic enum Color {\n  Red, Green, Blue\n}\n\npublic enum Size {\n  Small, Medium, Large, Huge\n}\n\npublic class Product {\n  public string name;\n  public Color color;\n  public Size size;\n\n  public Product(string name, Color color, Size size) {\n    if (name == null)\n      throw new System.ArgumentNullException(paramName: nameof(name));\n    this.name = name;\n    this.color = color;\n    this.size = size;\n  }\n}\n\n// filter products on website\n// NOT a good filter, do not use this class\npublic class ProductFilter {\n  public IEnumerable<Product> FilterBySize(IEnumerable<Product> products, Size size) {\n    foreach (var p in products) {\n      if (p.size == size)\n        yield return p;\n    }\n  }\n\n  // this needs to be added if not implemented, which is not good in this case\n  // by adding more methods here, it breaks the open closed principle\n  public IEnumerable<Product> FilterByColor(IEnumerable<Product> products, Color color) {\n    foreach (var p in products) {\n      if (p.color == color)\n        yield return p;\n    }\n  }\n\n  public static IEnumerable<Product> FilterBySizeAndColor(IEnumerable<Product> products, Size size, Color color)\n    {\n      foreach (var p in products)\n        if (p.size == size && p.color == color)\n          yield return p;\n    } // state space explosion\n}\n\n\n// SOLUTION, use inheritance and interfaces\n// implement by using the Specification pattern\npublic interface ISpecification<T> {\n  bool IsSatisfied(T t);  // check if criteria is statified\n}\n\n// make filter interface dynamic\npublic interface IFilter<T> {\n  IEnumerable<T> Filter(IEnumerable<T> items, ISpecification<T> spec);\n}\n\npublic class ColorSpecification : ISpecification<Product>\n{\n  private Color color;\n\n  public ColorSpecification(Color color)\n  {\n    this.color = color;\n  }\n\n  public bool IsSatisfied(Product p)\n  {\n    return p.color == color;\n  }\n}\n\npublic class SizeSpecification : ISpecification<Product> {\n  private Size size;\n\n  public SizeSpecification(Size size) {\n    this.size = size;\n  }\n\n  public bool IsSatisfied(Product p) {\n    return p.size == size;\n  }\n}\n\n// combinator\npublic class AndSpecification<T> : ISpecification<T>\n{\n  private ISpecification<T> first, second;\n\n  public AndSpecification(ISpecification<T> first, ISpecification<T> second)\n  {\n    this.first = first ?? throw new System.ArgumentNullException(paramName: nameof(first));\n    this.second = second ?? throw new System.ArgumentNullException(paramName: nameof(second));\n  }\n\n  public bool IsSatisfied(T t)\n  {\n    return first.IsSatisfied(t) && second.IsSatisfied(t);\n  }\n}\n\npublic class BetterProductFilter : IFilter<Product>\n  {\n    public IEnumerable<Product> Filter(IEnumerable<Product> items, ISpecification<Product> spec)\n    {\n      foreach (var i in items)\n        if (spec.IsSatisfied(i))\n          yield return i;\n    }\n  }\n\npublic class Program {\n  public static void Main() {\n    Product apple = new Product("Apple", Color.Green, Size.Small);\n    Product tree = new Product("Tree", Color.Green, Size.Large);\n    Product house = new Product("House", Color.Blue, Size.Large);\n\n    Product[] products = {apple, tree, house};\n\n    // not a good filter\n    ProductFilter pf = new ProductFilter();\n    System.Console.WriteLine("Green products (old):");\n    foreach (var p in pf.FilterByColor(products, Color.Green))\n      System.Console.WriteLine($" - {p.name} is green");\n\n    // better filter\n    BetterProductFilter bf = new BetterProductFilter();\n    System.Console.WriteLine("Green products (new):");\n    foreach (var p in bf.Filter(products, new ColorSpecification(Color.Green)))\n      System.Console.WriteLine($" - {p.name} is green");\n\n    System.Console.WriteLine("Large products");\n    foreach (var p in bf.Filter(products, new SizeSpecification(Size.Large)))\n      System.Console.WriteLine($" - {p.name} is large");\n\n    System.Console.WriteLine("Large blue items");\n    foreach (var p in bf.Filter(products,\n      new AndSpecification<Product>(new ColorSpecification(Color.Blue), new SizeSpecification(Size.Large)))\n    )\n    {\n      System.Console.WriteLine($" - {p.name} is big and blue");\n    }\n  }\n}\n')))}u.isMDXComponent=!0}}]);