"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[48603],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(g,i(i({ref:t},s),{},{components:n})):a.createElement(g,i({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},73424:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const o={},i="Java Example",l={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Factory/java/readme",id:"interviewPrep/designPatterns/Creational_patterns/Factory/java/readme",title:"Java Example",description:"- buttons",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Factory/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Factory/java",slug:"/interviewPrep/designPatterns/Creational_patterns/Factory/java/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Factory/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/go/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/javascript/"}},c={},p=[],s={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"java-example"},"Java Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"buttons"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"buttons/Button.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.factory_method.example.buttons;\n\n/**\n * Common interface for all buttons.\n*/\npublic interface Button {\n    void render();\n    void onClick();\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"buttons/HtmlButton.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.factory_method.example.buttons;\n\n/**\n * HTML button implementation.\n*/\npublic class HtmlButton implements Button {\n\n    public void render() {\n        System.out.println("<button>Test Button</button>");\n        onClick();\n    }\n\n    public void onClick() {\n        System.out.println("Click! Button says - \'Hello World!\'");\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"buttons/WindowsButton.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.factory_method.example.buttons;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\n/**\n * Windows button implementation.\n*/\npublic class WindowsButton implements Button {\n    JPanel panel = new JPanel();\n    JFrame frame = new JFrame();\n    JButton button;\n\n    public void render() {\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JLabel label = new JLabel("Hello World!");\n        label.setOpaque(true);\n        label.setBackground(new Color(235, 233, 126));\n        label.setFont(new Font("Dialog", Font.BOLD, 44));\n        label.setHorizontalAlignment(SwingConstants.CENTER);\n        panel.setLayout(new FlowLayout(FlowLayout.CENTER));\n        frame.getContentPane().add(panel);\n        panel.add(label);\n        onClick();\n        panel.add(button);\n\n        frame.setSize(320, 200);\n        frame.setVisible(true);\n        onClick();\n    }\n\n    public void onClick() {\n        button = new JButton("Exit");\n        button.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                frame.setVisible(false);\n                System.exit(0);\n            }\n        });\n    }\n}\n'))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"factory"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"factory/Dialog.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.factory_method.example.factory;\n\nimport refactoring_guru.factory_method.example.buttons.Button;\n\n/**\n * Base factory class. Note that "factory" is merely a role for the class. It\n* should have some core business logic which needs different products to be\n* created.\n*/\npublic abstract class Dialog {\n\n    public void renderWindow() {\n        // ... other code ...\n\n        Button okButton = createButton();\n        okButton.render();\n    }\n\n    /**\n     * Subclasses will override this method in order to create specific button\n     * objects.\n     */\n    public abstract Button createButton();\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"factory/HtmlDialog.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.factory_method.example.factory;\n\nimport refactoring_guru.factory_method.example.buttons.Button;\nimport refactoring_guru.factory_method.example.buttons.HtmlButton;\n\n/**\n * HTML Dialog will produce HTML buttons.\n*/\npublic class HtmlDialog extends Dialog {\n\n    @Override\n    public Button createButton() {\n        return new HtmlButton();\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"factory/WindowsDialog.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.factory_method.example.factory;\n\nimport refactoring_guru.factory_method.example.buttons.Button;\nimport refactoring_guru.factory_method.example.buttons.WindowsButton;\n\n/**\n * Windows Dialog will produce Windows buttons.\n*/\npublic class WindowsDialog extends Dialog {\n\n    @Override\n    public Button createButton() {\n        return new WindowsButton();\n    }\n}\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Demo.java"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.factory_method.example;\n\nimport refactoring_guru.factory_method.example.factory.Dialog;\nimport refactoring_guru.factory_method.example.factory.HtmlDialog;\nimport refactoring_guru.factory_method.example.factory.WindowsDialog;\n\n/**\n * Demo class. Everything comes together here.\n */\npublic class Demo {\n    private static Dialog dialog;\n\n    public static void main(String[] args) {\n        configure();\n        runBusinessLogic();\n    }\n\n    /**\n     * The concrete factory is usually chosen depending on configuration or\n     * environment options.\n     */\n    static void configure() {\n        if (System.getProperty("os.name").equals("Windows 10")) {\n            dialog = new WindowsDialog();\n        } else {\n            dialog = new HtmlDialog();\n        }\n    }\n\n    /**\n     * All of the client code should work with factories and products through\n     * abstract interfaces. This way it does not care which factory it works\n     * with and what kind of product it returns.\n     */\n    static void runBusinessLogic() {\n        dialog.renderWindow();\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<button>Test Button</button>\nClick! Button says - 'Hello World!'\n")))}u.isMDXComponent=!0}}]);