"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[6328],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(f,u(u({ref:t},c),{},{components:n})):a.createElement(f,u({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,u=new Array(o);u[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,u[1]=l;for(var s=2;s<o;s++)u[s]=n[s];return a.createElement.apply(null,u)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4615:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={},u="React js",l={unversionedId:"Technologies/frontend/react/readme",id:"Technologies/frontend/react/readme",title:"React js",description:"React Hooks Reference",source:"@site/docs/Technologies/frontend/react/readme.md",sourceDirName:"Technologies/frontend/react",slug:"/Technologies/frontend/react/",permalink:"/docs/Technologies/frontend/react/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/Technologies/frontend/react/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Service Worker",permalink:"/docs/Technologies/frontend/progressiveWebApp/serviceWorker/"},next:{title:"Using Formik as forms example",permalink:"/docs/Technologies/frontend/react/Forms/Formik/"}},i={},s=[{value:"using docker",id:"using-docker",level:2},{value:"setState",id:"setstate",level:2},{value:"handle multiple states",id:"handle-multiple-states",level:3},{value:"Batch state updates (not required in React 18)",id:"batch-state-updates-not-required-in-react-18",level:3},{value:"Lifecycle vs Hooks",id:"lifecycle-vs-hooks",level:2},{value:"ComponentDidMount",id:"componentdidmount",level:3},{value:"useEffect",id:"useeffect",level:4},{value:"ComponentDidUpdate",id:"componentdidupdate",level:3},{value:"useEffect",id:"useeffect-1",level:4},{value:"ComponentWillUnmount",id:"componentwillunmount",level:3},{value:"useEffect",id:"useeffect-2",level:4},{value:"ShouldComponentUpdate",id:"shouldcomponentupdate",level:3},{value:"method 1: declaring in the shouldComponentUpdate method",id:"method-1-declaring-in-the-shouldcomponentupdate-method",level:4},{value:"method 2: use PureComponent (preferred method)",id:"method-2-use-purecomponent-preferred-method",level:4},{value:"method 3: use memo for functional components",id:"method-3-use-memo-for-functional-components",level:4},{value:"useMemo",id:"usememo",level:3},{value:"useCallback for functional methods",id:"usecallback-for-functional-methods",level:3},{value:"useContext",id:"usecontext",level:3},{value:"set state",id:"set-state",level:4},{value:"share state",id:"share-state",level:4},{value:"use state",id:"use-state",level:4},{value:"use generic context",id:"use-generic-context",level:4},{value:"useReducer",id:"usereducer",level:3},{value:"Single state",id:"single-state",level:4},{value:"Multiple states",id:"multiple-states",level:4},{value:"Lazy initialization",id:"lazy-initialization",level:4},{value:"useImperativeHandle",id:"useimperativehandle",level:3},{value:"useLayoutEffect",id:"uselayouteffect",level:3},{value:"useTransition (React 18)",id:"usetransition-react-18",level:3},{value:"useDeferredValue (React 18)",id:"usedeferredvalue-react-18",level:3},{value:"useId (React 18)",id:"useid-react-18",level:3},{value:"Custom Hooks",id:"custom-hooks",level:3},{value:"useDebugValue",id:"usedebugvalue",level:4},{value:"Forms",id:"forms",level:2},{value:"Uncontrolled form",id:"uncontrolled-form",level:3},{value:"using <code>useRef</code>",id:"using-useref",level:4},{value:"Controlled form",id:"controlled-form",level:3}],c={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"react-js"},"React js"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html"},"React Hooks Reference")),(0,r.kt)("h2",{id:"using-docker"},"using docker"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"run using docker",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"docker run -it --name appName -p 3000:3000 -d imageName"))),(0,r.kt)("li",{parentName:"ul"},"open bash in docker",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"docker exec -it appName bash")))),(0,r.kt)("h2",{id:"setstate"},"setState"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React from "react";\n\nexport default class App extends React.Component {\n  state = {\n    count: 0,\n  };\n\n  handleClick = () => {\n    // method 1\n    const {count} = this.state;\n    this.setState({count: count + 1});\n\n    // method 2\n    this.setState((prevState) => ({count: prevState.count + 1}));\n  };\n\n  render() {\n    const {count} = this.state;\n    return <div onClick={this.handleClick}>{count}</div>;\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useState} from "react";\n\nexport default function App() {\n  const [count, setCount] = useState(0); // 0 = initial state\n  const handleClick = () => {\n    setCount(count + 1);\n  };\n  return <div onClick={handleClick}>{count}</div>;\n}\n')),(0,r.kt)("h3",{id:"handle-multiple-states"},"handle multiple states"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"example 1")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React from "react";\n\nexport default class App extends React.Component {\n  state = {\n    name1: "",\n    name2: "",\n  };\n\n  handleChange = (e) => {\n    this.setState({[e.target.name]: e.target.value}); // requires the name attribute to be declared at the html tag\n  };\n\n  render() {\n    const {name1} = this.state;\n    return <input onChange={this.handleChange} name={name1} value={name1} />;\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useState} from "react";\n\nexport default function App() {\n  const [state, setState] = useState({\n    name1: "",\n    name2: "",\n  });\n\n  const handleChange = (e) => {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  return (\n    <input onChange={handleChange} value={state.name1} name={state.name1} />\n  );\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"example 2")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React from "react";\n\nexport default class App extends React.Component {\n  state = {\n    name1: "",\n    name2: "",\n  };\n\n  handleChange = (prop) => (e) => this.setState({[prop]: e.target.value});\n\n  render() {\n    const {name1} = this.state;\n    return <input onChange={this.handleChange("name1")} value={name1} />;\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useState} from "react";\n\nexport default function App() {\n  const [state, setState] = useState({\n    name1: "",\n    name2: "",\n  });\n\n  const handleChange = (prop) => (e) => {\n    setState({\n      ...state,\n      [prop]: e.target.value,\n    });\n  };\n\n  return <input onChange={handleChange("name1")} value={state.name1} />;\n}\n')),(0,r.kt)("h3",{id:"batch-state-updates-not-required-in-react-18"},"Batch state updates (not required in React 18)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"wrong way")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useState} from "react";\n\nexport default function App() {\n  const [count1, setCount1] = useState(0);  // 0 = initial state\n  const [count2, setCount2] = useState(0);  // 0 = initial state\n\n  const handleClick = () => {\n    // React doesn\'t automatically batch updates\n    // react will re-render the UI twice for this case\n    Promise.resolve().then(() => {\n      setCount1(count1 + 1);\n      setCount2(count2 + 1);\n    }\n  }\n\n  return (<div onClick={handleClick}>{count}</div>);\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"correct way")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useState} from "react";\nimport {unstable_batchedUpdates} from "react-dom";\n\nexport default function App() {\n  const [count1, setCount1] = useState(0);  // 0 = initial state\n  const [count2, setCount2] = useState(0);  // 0 = initial state\n\n  const handleClick = () => {\n    // react will re-render the UI once\n    Promise.resolve().then(() => {\n      unstable_batchedUpdates(() => {\n        setCount1(count1 + 1);\n        setCount2(count2 + 1);\n      })\n    }\n  }\n\n  return (<div onClick={handleClick}>{count}</div>);\n}\n')),(0,r.kt)("h2",{id:"lifecycle-vs-hooks"},"Lifecycle vs Hooks"),(0,r.kt)("h3",{id:"componentdidmount"},"ComponentDidMount"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React from "react";\n\nexport default class App extends React.Component {\n  ComponentDidMount() {\n    doSomething();\n  }\n\n  render() {\n    return <div></div>;\n  }\n}\n')),(0,r.kt)("h4",{id:"useeffect"},"useEffect"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useEffect} from "react";\n\nexport default function App() {\n  useEffect(() => {\n    doSomething();\n  }, []);\n\n  return <div></div>;\n}\n')),(0,r.kt)("h3",{id:"componentdidupdate"},"ComponentDidUpdate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React from "react";\n\nexport default class App extends React.Component {\n  ComponentDidUpdate(prevProps, prevStates) {\n    if (prevProps.something !== this.props.something) {\n      doSomething();\n    }\n  }\n\n  render() {\n    const {something} = this.props;\n    return <div>{something}</div>;\n  }\n}\n')),(0,r.kt)("h4",{id:"useeffect-1"},"useEffect"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useEffect} from "react";\n\nexport default function App(props) {\n  const {something} = props;\n\n  useEffect(() => {\n    doSomething();\n  }, [something]);\n\n  return <div>{something}</div>;\n}\n')),(0,r.kt)("h3",{id:"componentwillunmount"},"ComponentWillUnmount"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React from "react";\n\nexport default class App extends React.Component {\n  ComponentWillUnmount() {\n    doSomething();\n  }\n\n  render() {\n    return <div></div>;\n  }\n}\n')),(0,r.kt)("h4",{id:"useeffect-2"},"useEffect"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useEffect} from "react";\n\nexport default function App(props) {\n  useEffect(() => {\n    return doSomething; // must return the action for component when unmounted, must be an uncalled function\n  }, []); // this does not matter\n\n  return <div></div>;\n}\n')),(0,r.kt)("h3",{id:"shouldcomponentupdate"},"ShouldComponentUpdate"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Should be used if a function renders the same result given the same props and states (mainly for performance optimization)")),(0,r.kt)("h4",{id:"method-1-declaring-in-the-shouldcomponentupdate-method"},"method 1: declaring in the shouldComponentUpdate method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React from "react";\n\nexport default class App extends React.Component {\n  state = {\n    name: "",\n  };\n\n  shouldComponentUpdate(nextProps, nextStates) {\n    if (nextProps.something !== this.props.something) {\n      return true; // allow rerendering\n    }\n    if (nextStates.name !== this.state.name) {\n      return true;\n    }\n    return false; // do not allow rerendering\n  }\n\n  handleChange = (e) => {\n    this.setState({name: e.target.value});\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(this.state.name);\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input onChange={this.handleChange} value={this.state.name} />\n        <input type="submit" value="Submit" />\n      </form>\n    );\n  }\n}\n')),(0,r.kt)("h4",{id:"method-2-use-purecomponent-preferred-method"},"method 2: use PureComponent (preferred method)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React from "react";\n\nexport default class App extends React.PureComponent {\n  state = {\n    name: "",\n  };\n\n  handleChange = (e) => {\n    this.setState({name: e.target.value});\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(this.state.name);\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input onChange={this.handleChange} value={this.state.name} />\n        <input type="submit" value="Submit" />\n      </form>\n    );\n  }\n}\n')),(0,r.kt)("h4",{id:"method-3-use-memo-for-functional-components"},"method 3: use memo for functional components"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useState, memo} from "react";\n\nfunction App() {\n  const [name, setName] = useState("");\n\n  const handleChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(name);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input onChange={handleChange} value={name} />\n      <input type="submit" value="Submit" />\n    </form>\n  );\n}\n\n// return value is the inverse of shouldComponentUpdate\nfunction areEqual(prevProps, nextProps) {\n  if (nextProps.name !== prevProps.name) {\n    return false; // allow rerendering\n  }\n  return true; // do not allow rerendering\n}\n\nexport default memo(App, areEqual);\n')),(0,r.kt)("h3",{id:"usememo"},"useMemo"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Memoization: cache result of function call"),(0,r.kt)("li",{parentName:"ul"},"Warning: do not prematurely optimize performance, use only as needed for expensive calculations"),(0,r.kt)("li",{parentName:"ul"},"gives you referential equality between renders for values"),(0,r.kt)("li",{parentName:"ul"},"will only recompute the memoized value when 1 of the dependencies has changed"),(0,r.kt)("li",{parentName:"ul"},"help to avoid expensive calculations on every render"),(0,r.kt)("li",{parentName:"ul"},"if no dependency array is provided, a new value will be computed on every render"),(0,r.kt)("li",{parentName:"ul"},"calls its function and returns the result value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useState, useMemo} from "react";\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n\n  const expensiveCount = useMemo(() => {\n    return count ** 2;\n  }, [count]);\n\n  return <>{expensiveCount}</>;\n};\n\nexport default App;\n')),(0,r.kt)("h3",{id:"usecallback-for-functional-methods"},"useCallback for functional methods"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Memoization: cache result of function call"),(0,r.kt)("li",{parentName:"ul"},"Warning: do not prematurely optimize performance, use only as needed for expensive calculations"),(0,r.kt)("li",{parentName:"ul"},"gives you referential equality between renders for functions"),(0,r.kt)("li",{parentName:"ul"},"returns its memoized function when the dependencies change"),(0,r.kt)("li",{parentName:"ul"},"helps prevent unneccessary renders of the children because the children will always be using the same function object",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g. shouldComponentUpdate")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useState, useCallback } from "react";\nimport DisplayCount from "./DisplayCount";\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n\n  const showCount = useCallback(() => alert(`Count ${count}`)), [count]);\n\n  return (\n    <>\n      <DisplayCount handleDisplay={showCount} />\n    </>\n  );\n};\n\nexport default App;\n')),(0,r.kt)("h3",{id:"usecontext"},"useContext"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"allows us to work with react context api, which allows us to share data without passing props"),(0,r.kt)("li",{parentName:"ul"},"A component calling useContext will always re-render when the context value changes",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"optimize with memoization if component computation is expensive")))),(0,r.kt)("h4",{id:"set-state"},"set state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {createContext} from "react";\n\nexport default MoodContext = createContext(null);\n')),(0,r.kt)("h4",{id:"share-state"},"share state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useState} from "react";\nimport MoodContext from "./MoodContext";\nimport MoodEmoji from "./MoodEmoji";\n\nexport default function App() {\n  const [moodState] = useState({\n    happy: "happy",\n    sad: "sad",\n  });\n\n  return (\n    <MoodContext.Provider value={moodState}>\n      <MoodEmoji />\n    </MoodContext.Provider>\n  );\n}\n')),(0,r.kt)("h4",{id:"use-state"},"use state"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using ",(0,r.kt)("inlineCode",{parentName:"li"},"XxxContext.Consumer"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React from "react";\nimport MoodContext from "./MoodContext";\n\nexport default function MoodEmoji() {\n  return (\n    <MoodContext.Consumer>{(mood) => <p>{mood.happy}</p>}</MoodContext.Consumer>\n  );\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using ",(0,r.kt)("inlineCode",{parentName:"li"},"useContext"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useContext} from "react";\nimport MoodContext from "./MoodContext";\n\nexport default function MoodEmoji() {\n  const mood = useContext(MoodContext);\n\n  return <p>{mood.happy}</p>;\n}\n')),(0,r.kt)("h4",{id:"use-generic-context"},"use generic context"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GenericContext file")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import React, { Dispatch, createContext, SetStateAction, useState, PropsWithChildren } from "react;\n\nexport default function createCtx<A>(defaultValue: A) {\n  type UpdateType = Dispatch<\n    SetStateAction<typeof defaultValue>\n  >;\n\n  const defaultUpdate: UpdateType = () => defaultValue;\n\n  const ctx = createContext({\n    state: defaultValue,\n    update: defaultUpdate,\n  });\n\n  function Provider(props: PropsWithChildren<{}>) {\n    const [state, update] = useState(defaultValue);\n    return <ctx.Provider value={{ state, update }} {...props} />;\n  }\n\n  return [ctx, Provider] as const;\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"set state with SampleContext file")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import createCtx from "./GenericContext";\n\nexport const [SampleContext, SampleProvider] = createCtx("default value");\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"share state")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import React from "react";\nimport {SampleProvider} from "./SampleContext";\nimport SampleFeature from "./SampleFeature";\n\nexport default function App() {\n  return (\n    <SampleProvider>\n      <SampleFeature />\n    </SampleProvider>\n  );\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"use state with useContext")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import React, {useContext} from "react";\nimport SampleContext from "./SampleContext";\n\nexport default function SomeFeature() {\n  const {state: myStateName, update: handleUpdate} = useContext(SampleContext);\n\n  return <p onClick={() => handleUpdate("test")}>{myStateName}</p>;\n}\n')),(0,r.kt)("h3",{id:"usereducer"},"useReducer"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"an alternative to useState",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"returns an array of 2 values",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"first value is the state, second value is dispatch function"))))),(0,r.kt)("li",{parentName:"ul"},"it uses the redux pattern and has a different way to manage state",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"instead of updating the state directly, action is dispatched that goes to the reducer"),(0,r.kt)("li",{parentName:"ul"},"the reducer determines how to compute the next state"))),(0,r.kt)("li",{parentName:"ul"},"useReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"or when the next state depends on the previous one"))),(0,r.kt)("li",{parentName:"ul"},"useReducer also lets you optimize performance for components that trigger deep updates",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"because you can pass dispatch down instead of callbacks"))),(0,r.kt)("li",{parentName:"ul"},"React guarantees that dispatch function identity is stable and won\u2019t change on re-renders",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is why it\u2019s safe to omit from the useEffect or useCallback dependency list")))),(0,r.kt)("h4",{id:"single-state"},"Single state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useReducer} from "react";\n\nconst initialState = 0;\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case "increment":\n      return state + 1;\n    case "decrement":\n      return state - 1;\n    default:\n      throw new Error();\n  }\n}\n\nexport default function App() {\n  const [count, dispatch] = useReducer(reducer, initialState);\n\n  const handleDecrement = () => dispatch({type: "decrement"});\n\n  return (\n    <>\n      Count: {count}\n      <button onClick={handleDecrement}>-</button>\n    </>\n  );\n}\n')),(0,r.kt)("h4",{id:"multiple-states"},"Multiple states"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useReducer} from "react";\n\nconst initialState = {count: 0};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case "increment":\n      return state + 1;\n    case "decrement":\n      return state - 1;\n    default:\n      throw new Error();\n  }\n}\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const handleDecrement = () => dispatch({type: "decrement"});\n\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={handleDecrement}>-</button>\n    </>\n  );\n}\n')),(0,r.kt)("h4",{id:"lazy-initialization"},"Lazy initialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useReducer} from "react";\n\nfunction init(initialCount) {\n  return {count: initialCount};\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case "increment":\n      return {count: state.count + 1};\n    case "decrement":\n      return {count: state.count - 1};\n    case "reset":\n      return init(action.payload);\n    default:\n      throw new Error();\n  }\n}\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialCount, init);\n\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({type: "reset", payload: initialCount})}>\n        Reset\n      </button>\n      <button onClick={() => dispatch({type: "decrement"})}>-</button>\n      <button onClick={() => dispatch({type: "increment"})}>+</button>\n    </>\n  );\n}\n')),(0,r.kt)("h3",{id:"useimperativehandle"},"useImperativeHandle"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"customizes the instance value that is exposed to the parent components when using ref",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"imperative code using refs should be avoided in most cases"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"useImperativeHandle")," should be used with forwardRef"),(0,r.kt)("li",{parentName:"ul"},"it is mainly used to change the behavior of the exposed ref, which is a rare use case"),(0,r.kt)("li",{parentName:"ul"},"use cases",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if you build a reusable component library, you may need to get access to the underlying DOM element",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"and then forward it so that it can be accessed by the consumers of the component library")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {forwardRef, useRef} from "react";\n\nconst FancyInput = forwardRef((props, ref) => {\n  const inputRef = useRef();\n\n  const activateFocus = () => {\n    console.log("focused");\n    inputRef.current.focus();\n  };\n\n  React.useImperativeHandle(ref, () => ({\n    activateFocus,\n  }));\n\n  return (\n    <div>\n      <input ref={inputRef} />\n      <button onClick={activateFocus}>Focus from children</button>\n    </div>\n  );\n});\n\nexport default FancyInput;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useRef} from "react";\nimport FancyInput from "./FancyInput";\n\nfunction App() {\n  const inputRef = useRef();\n\n  return (\n    <div className="App">\n      <FancyInput ref={inputRef} />\n      <button onClick={() => inputRef.current.activateFocus()}>\n        Focus from parent\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"uselayouteffect"},"useLayoutEffect"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"identical to useEffect, but it fires synchronously after all DOM mutations",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"difference is that the callback will run after render but before the actual updates have been displayed to the screen"))),(0,r.kt)("li",{parentName:"ul"},"it will block visual UI updates until callback is completed"),(0,r.kt)("li",{parentName:"ul"},"use cases",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"situations when you need to calculate something in the UI before the DOM is visually updated"))),(0,r.kt)("li",{parentName:"ul"},"If you\u2019re migrating code from a class component",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"useLayoutEffect fires in the same phase as componentDidMount and componentDidUpdate"))),(0,r.kt)("li",{parentName:"ul"},"If you use server rendering",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"neither useLayoutEffect nor useEffect can run until the JavaScript is downloaded",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"To fix this, either move that logic to useEffect (if it isn\u2019t necessary for the first render)"),(0,r.kt)("li",{parentName:"ul"},"or delay showing that component until after the client renders (if the HTML looks broken until useLayoutEffect runs)")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useRef, useLayoutEffect} from "react";\n\nfunction App() {\n  const myBtn = useRef(null);\n\n  useLayoutEffect(() => {\n    const rect = myBtn.current.getBoundingClientRect();\n    console.log(rect.height);\n  });\n\n  return <button ref={myBtn}>button</button>;\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"usetransition-react-18"},"useTransition (React 18)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns a stateful value for the pending state of the transition, and a function to start it",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"startTransition")," lets you mark updates in the provided callback as transitions"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isPending")," indicates when a transition is active to show a pending state"),(0,r.kt)("li",{parentName:"ul"},"Updates in a transition yield to more urgent updates such as clicks"),(0,r.kt)("li",{parentName:"ul"},"Updates in a transitions will not show a fallback for re-suspended content",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This allows the user to continue interacting with the current content while rendering the update"))))),(0,r.kt)("li",{parentName:"ul"},"Original code")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {useState, useMemo} from "react";\n\nfunction ProductList({products}) {\n  return (\n    <ul>\n      {products.map((product) => (\n        <li>{product}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default function App() {\n  const [filterTerm, setFilterTerm] = useState("");\n\n  const dummyProducts = useMemo(() => {\n    const products = [];\n    for (let i = 0; i < 10000; i++) {\n      products.push(`Product ${i + 1}`);\n    }\n    return products;\n  }, []);\n\n  const filteredProducts = useMemo(() => {\n    if (!filterTerm) {\n      return dummyProducts;\n    }\n    return dummyProducts.filter((product) => product.includes(filterTerm));\n  }, [dummyProducts, filterTerm]);\n\n  const updateFilterHandler = (event) => {\n    setFilterTerm(event.target.value);\n  };\n\n  return (\n    <div id="app">\n      <input type="text" onChange={updateFilterHandler} />\n      <ProductList products={filteredProducts} />\n    </div>\n  );\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using the hook")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {useState, useMemo, useTransition} from "react";\nimport "./styles.css";\n\nfunction ProductList({products}) {\n  return (\n    <ul>\n      {products.map((product) => (\n        <li>{product}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default function App() {\n  const [isPending, startTransition] = useTransition();\n  const [filterTerm, setFilterTerm] = useState("");\n\n  const dummyProducts = useMemo(() => {\n    const products = [];\n    for (let i = 0; i < 10000; i++) {\n      products.push(`Product ${i + 1}`);\n    }\n    return products;\n  }, []);\n\n  const filteredProducts = useMemo(() => {\n    if (!filterTerm) {\n      return dummyProducts;\n    }\n    return dummyProducts.filter((product) => product.includes(filterTerm));\n  }, [dummyProducts, filterTerm]);\n\n  const updateFilterHandler = (event) => {\n    startTransition(() => {\n      setFilterTerm(event.target.value);\n    });\n  };\n\n  return (\n    <div id="app">\n      <input type="text" onChange={updateFilterHandler} />\n      {isPending && <p style={{color: "red"}}>Updating List...</p>}\n      <ProductList products={filteredProducts} />\n    </div>\n  );\n}\n')),(0,r.kt)("h3",{id:"usedeferredvalue-react-18"},"useDeferredValue (React 18)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"accepts a value and returns a new copy of the value that will defer to more urgent updates"),(0,r.kt)("li",{parentName:"ul"},"If the current render is the result of an urgent update",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"like user input, React will return the previous value and then render the new value after the urgent render has completed"))),(0,r.kt)("li",{parentName:"ul"},"useDeferredValue only defers the value that you pass to it",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If you want to prevent a child component from re-rendering during an urgent update, you must also memoize that component with React.memo or React.useMemo"))),(0,r.kt)("li",{parentName:"ul"},"Original code refer to useTransition original code example"),(0,r.kt)("li",{parentName:"ul"},"using the hook")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {useState, useMemo, useDeferredValue} from "react";\n\nfunction ProductList({products}) {\n  const deferredProducts = useDeferredValue(products);\n  return (\n    <ul>\n      {deferredProducts.map((product) => (\n        <li>{product}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default function App() {\n  const [filterTerm, setFilterTerm] = useState("");\n\n  const dummyProducts = useMemo(() => {\n    const products = [];\n    for (let i = 0; i < 10000; i++) {\n      products.push(`Product ${i + 1}`);\n    }\n    return products;\n  }, []);\n\n  const filteredProducts = useMemo(() => {\n    if (!filterTerm) {\n      return dummyProducts;\n    }\n    return dummyProducts.filter((product) => product.includes(filterTerm));\n  }, [dummyProducts, filterTerm]);\n\n  const updateFilterHandler = (event) => {\n    setFilterTerm(event.target.value);\n  };\n\n  return (\n    <div id="app">\n      <input type="text" onChange={updateFilterHandler} />\n      <ProductList products={filteredProducts} />\n    </div>\n  );\n}\n')),(0,r.kt)("h3",{id:"useid-react-18"},"useId (React 18)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches"),(0,r.kt)("li",{parentName:"ul"},"is not for generating keys in a list",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Keys should be generated from your data"))),(0,r.kt)("li",{parentName:"ul"},"example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, {useId} from "react";\n\nfunction Checkbox() {\n  const id = useId();\n  return (\n    <>\n      <label htmlFor={id}>Do you like React?</label>\n      <input id={id} type="checkbox" name="react" />\n    </>\n  );\n}\n\nexport default Checkbox;\n')),(0,r.kt)("h3",{id:"custom-hooks"},"Custom Hooks"),(0,r.kt)("h4",{id:"usedebugvalue"},"useDebugValue"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"used to display a label for custom hooks in React DevTools")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {useState, useEffect, useDebugValue} from "react";\n\nexport default function useCount() {\n  const [count, setCount] = useState();\n\n  useEffect(() => {\n    doSomething();\n\n    return doAnotherThing();\n  }, [count]);\n\n  const handleClick = () => {\n    if (count === undefined) {\n      setCount(0);\n    } else {\n      setCount(count + 1);\n    }\n  };\n\n  useDebugValue(count ?? "haven\'t started counting");\n\n  return {\n    count,\n    handleClick,\n  };\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React from "react";\nimport useCount from "./useCount";\n\nexport default function App() {\n  const {count, handleClick} = useCount();\n\n  return <div onClick={handleClick}>count {count}</div>;\n}\n')),(0,r.kt)("h2",{id:"forms"},"Forms"),(0,r.kt)("h3",{id:"uncontrolled-form"},"Uncontrolled form"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React from "react";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.name = React.createRef();\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(this.name.current.value);\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input ref={this.name} />\n        <input type="submit" value="Submit" />\n      </form>\n    );\n  }\n}\n')),(0,r.kt)("h4",{id:"using-useref"},"using ",(0,r.kt)("inlineCode",{parentName:"h4"},"useRef")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"allows you to create a mutable plain javascript object that keeps the same reference between renders"),(0,r.kt)("li",{parentName:"ul"},"can be used when there is a value that changes similar to setState",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"however, it does not trigger a re-render if the value changes"))),(0,r.kt)("li",{parentName:"ul"},"common use is to grab native HTML elements from the DOM"),(0,r.kt)("li",{parentName:"ul"},"this hook should be used when you need to grab an element from the DOM")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, { useRef } from "react";\n\nexport default function App() => {\n  const name = useRef();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(name.current.value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input ref={name} />\n      <input type="submit" value="Submit" />\n    </form>\n  );\n}\n')),(0,r.kt)("h3",{id:"controlled-form"},"Controlled form"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React from "react";\n\nexport default class App extends React.Component {\n  state = {\n    name: "",\n  };\n\n  handleChange = (e) => {\n    this.setState({name: e.target.value});\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(this.state.name);\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input onChange={this.handleChange} value={this.state.name} />\n        <input type="submit" value="Submit" />\n      </form>\n    );\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import React, { useState } from "react";\n\nexport default function App() => {\n  const [name, setName] = useState("");\n\n  const handleChange = e => {\n    setName(e.target.value);\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(name);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input onChange={handleChange} value={name} />\n      <input type="submit" value="Submit" />\n    </form>\n  );\n}\n')))}p.isMDXComponent=!0}}]);