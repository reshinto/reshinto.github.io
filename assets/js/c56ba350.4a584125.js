"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[164],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=c(t),g=i,d=f["".concat(l,".").concat(g)]||f[g]||u[g]||a;return t?r.createElement(d,o(o({ref:n},p),{},{components:t})):r.createElement(d,o({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},46803:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(83117),i=(t(67294),t(3905));const a={},o="Swift Example",s={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Singleton/swift/readme",id:"interviewPrep/designPatterns/Creational_patterns/Singleton/swift/readme",title:"Swift Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Singleton/swift",slug:"/interviewPrep/designPatterns/Creational_patterns/Singleton/swift/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 3: Singleton Borg",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/python/example3"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/swift/example2"}},l={},c=[],p={toc:c};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"swift-example"},"Swift Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"/// Singleton Design Pattern\n///\n/// Intent: Lets you ensure that a class has only one instance, while providing\n/// a global access point to this instance.\n\nimport XCTest\n\n/// The Singleton class defines the `shared` field that lets clients access the\n/// unique singleton instance.\nclass Singleton {\n\n    /// The static field that controls the access to the singleton instance.\n    ///\n    /// This implementation let you extend the Singleton class while keeping\n    /// just one instance of each subclass around.\n    static var shared: Singleton = {\n        let instance = Singleton()\n        // ... configure the instance\n        // ...\n        return instance\n    }()\n\n    /// The Singleton's initializer should always be private to prevent direct\n    /// construction calls with the `new` operator.\n    private init() {}\n\n    /// Finally, any singleton should define some business logic, which can be\n    /// executed on its instance.\n    func someBusinessLogic() -> String {\n        // ...\n        return \"Result of the 'someBusinessLogic' call\"\n    }\n}\n\n/// Singletons should not be cloneable.\nextension Singleton: NSCopying {\n\n    func copy(with zone: NSZone? = nil) -> Any {\n        return self\n    }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'/// The client code.\nclass Client {\n    // ...\n    static func someClientCode() {\n        let instance1 = Singleton.shared\n        let instance2 = Singleton.shared\n\n        if (instance1 === instance2) {\n            print("Singleton works, both variables contain the same instance.")\n        } else {\n            print("Singleton failed, variables contain different instances.")\n        }\n    }\n    // ...\n}\n\n/// Let\'s see how it all works together.\nclass SingletonConceptual: XCTestCase {\n\n    func testSingletonConceptual() {\n        Client.someClientCode()\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Singleton works, both variables contain the same instance.\n")))}u.isMDXComponent=!0}}]);