"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[7851],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(t),f=a,m=d["".concat(u,".").concat(f)]||d[f]||p[f]||s;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3258:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const s={},o="Branch Sums",i={unversionedId:"interviewPrep/codingTests/easy/binaryTrees/branchSums",id:"interviewPrep/codingTests/easy/binaryTrees/branchSums",title:"Branch Sums",description:"Write a function that takes in a Binary Tree and returns a list of its branch",source:"@site/docs/interviewPrep/codingTests/easy/binaryTrees/branchSums.md",sourceDirName:"interviewPrep/codingTests/easy/binaryTrees",slug:"/interviewPrep/codingTests/easy/binaryTrees/branchSums",permalink:"/docs/interviewPrep/codingTests/easy/binaryTrees/branchSums",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/codingTests/easy/binaryTrees/branchSums.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Find Closest Value In BST",permalink:"/docs/interviewPrep/codingTests/easy/binarySearchTrees/findClosestValueInBST"},next:{title:"Node Depths",permalink:"/docs/interviewPrep/codingTests/easy/binaryTrees/nodeDepths"}},u={},l=[],c={toc:l};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"branch-sums"},"Branch Sums"),(0,a.kt)("p",null,"Write a function that takes in a Binary Tree and returns a list of its branch\nsums ordered from leftmost branch sum to rightmost branch sum."),(0,a.kt)("p",null,"A branch sum is the sum of all values in a Binary Tree branch. A Binary Tree\nbranch is a path of nodes in a tree that starts at the root node and ends at\nany leaf node."),(0,a.kt)("p",null,"Each BinaryTree node has an integer value, a\nleft child node, and a right child node. Children\nnodes can either be BinaryTree nodes themselves or\nNone / null"),(0,a.kt)("p",null,"Sample Input"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"tree =     1\n        /     \\\n       2       3\n     /   \\    /  \\\n    4     5  6    7\n  /   \\  /\n8     9 10\n")),(0,a.kt)("p",null,"Sample Output\n",(0,a.kt)("inlineCode",{parentName:"p"},"[15, 16, 18, 10, 11]")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// 15 == 1 + 2 + 4 + 8\n// 16 == 1 + 2 + 4 + 9\n// 18 == 1 + 2 + 5 + 10\n// 10 == 1 + 3 + 6\n// 11 == 1 + 3 + 7\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# This is the class of the input root. Do not edit it.\nclass BinaryTree:\n  def __init__(self, value):\n    self.value = value\n    self.left = None\n    self.right = None\n\n\n# solution 1\ndef branchSums(root):\n  # Write your code here.\n  if root is None:\n    return []\n  sums = []\n  unvisited = {}\n  total = 0\n  tree_nodes = []\n  tree_nodes.append(root)\n\n  while len(tree_nodes) > 0:\n    current = tree_nodes.pop()\n    if current.value in unvisited:\n      total = unvisited[current.value]\n    total += current.value\n    if not current.left and not current.right:\n      sums.append(total)\n      total -= current.value\n    if current.right:\n      tree_nodes.append(current.right)\n      unvisited[current.right.value] = total\n    if current.left:\n      tree_nodes.append(current.left)\n  return sums\n\n\n# solution 2\ndef branchSums(root):\n  # Write your code here.\n  sums = []\n  dfs(root, 0, sums)\n  return sums\n\n\ndef dfs(current, total, sums):\n  if current:\n    total += current.value\n    if not current.left and not current.right:\n      sums.append(total)\n      return\n    dfs(current.left, total, sums)\n    dfs(current.right, total, sums)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// This is the class of the input root.\n// Do not edit it.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// solution 1\nfunction branchSums(root) {\n  // Write your code here.\n  const sums = [];\n  dfs(root, 0, sums);\n  return sums;\n}\n\nfunction dfs(current, total, sums) {\n  if (!current) {\n    return;\n  }\n  total += current.value;\n  if (!current.left && !current.right) {\n    sums.push(total);\n    return;\n  }\n  dfs(current.left, total, sums);\n  dfs(current.right, total, sums);\n}\n")))}p.isMDXComponent=!0}}]);