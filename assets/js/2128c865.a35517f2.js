"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[6622],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>b});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},l=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=s(a),b=r,f=m["".concat(p,".").concat(b)]||m[b]||u[b]||o;return a?n.createElement(f,c(c({ref:t},l),{},{components:a})):n.createElement(f,c({ref:t},l))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,c=new Array(o);c[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var s=2;s<o;s++)c[s]=a[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},17161:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=a(83117),r=(a(67294),a(3905));const o={},c="Java Example",i={unversionedId:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/java/readme",id:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/java/readme",title:"Java Example",description:"- app/Application.java",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/java",slug:"/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/java/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/go/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/javascript/"}},p={},s=[],l={toc:s};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"java-example"},"Java Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"app/Application.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.abstract_factory.example.app;\n\nimport refactoring_guru.abstract_factory.example.buttons.Button;\nimport refactoring_guru.abstract_factory.example.checkboxes.Checkbox;\nimport refactoring_guru.abstract_factory.example.factories.GUIFactory;\n\n/**\n * Factory users don't care which concrete factory they use since they work with\n * factories and products through abstract interfaces.\n */\npublic class Application {\n    private Button button;\n    private Checkbox checkbox;\n\n    public Application(GUIFactory factory) {\n        button = factory.createButton();\n        checkbox = factory.createCheckbox();\n    }\n\n    public void paint() {\n        button.paint();\n        checkbox.paint();\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"buttons"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"buttons/Button.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.abstract_factory.example.buttons;\n\n/**\n * Abstract Factory assumes that you have several families of products,\n* structured into separate class hierarchies (Button/Checkbox). All products of\n* the same family have the common interface.\n*\n* This is the common interface for buttons family.\n*/\npublic interface Button {\n    void paint();\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"buttons/MacOSButton.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.abstract_factory.example.buttons;\n\n/**\n * All products families have the same varieties (MacOS/Windows).\n*\n* This is a MacOS variant of a button.\n*/\npublic class MacOSButton implements Button {\n\n    @Override\n    public void paint() {\n        System.out.println("You have created MacOSButton.");\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"buttons/WindowsButton.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.abstract_factory.example.buttons;\n\n/**\n * All products families have the same varieties (MacOS/Windows).\n*\n* This is another variant of a button.\n*/\npublic class WindowsButton implements Button {\n\n    @Override\n    public void paint() {\n        System.out.println("You have created WindowsButton.");\n    }\n}\n'))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"checkboxes"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"checkboxes/Checkbox.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.abstract_factory.example.checkboxes;\n\n/**\n * Checkboxes is the second product family. It has the same variants as buttons.\n*/\npublic interface Checkbox {\n    void paint();\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"checkboxes/MacOSCheckbox.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.abstract_factory.example.checkboxes;\n\n/**\n * All products families have the same varieties (MacOS/Windows).\n*\n* This is a variant of a checkbox.\n*/\npublic class MacOSCheckbox implements Checkbox {\n\n    @Override\n    public void paint() {\n        System.out.println("You have created MacOSCheckbox.");\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"checkboxes/WindowsCheckbox.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.abstract_factory.example.checkboxes;\n\n/**\n * All products families have the same varieties (MacOS/Windows).\n*\n* This is another variant of a checkbox.\n*/\npublic class WindowsCheckbox implements Checkbox {\n\n    @Override\n    public void paint() {\n        System.out.println("You have created WindowsCheckbox.");\n    }\n}\n'))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"factories"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"factories/GUIFactory.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.abstract_factory.example.factories;\n\nimport refactoring_guru.abstract_factory.example.buttons.Button;\nimport refactoring_guru.abstract_factory.example.checkboxes.Checkbox;\n\n/**\n * Abstract factory knows about all (abstract) product types.\n*/\npublic interface GUIFactory {\n    Button createButton();\n    Checkbox createCheckbox();\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"factories/MacOSFactory.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.abstract_factory.example.factories;\n\nimport refactoring_guru.abstract_factory.example.buttons.Button;\nimport refactoring_guru.abstract_factory.example.buttons.MacOSButton;\nimport refactoring_guru.abstract_factory.example.checkboxes.Checkbox;\nimport refactoring_guru.abstract_factory.example.checkboxes.MacOSCheckbox;\n\n/**\n * Each concrete factory extends basic factory and responsible for creating\n* products of a single variety.\n*/\npublic class MacOSFactory implements GUIFactory {\n\n    @Override\n    public Button createButton() {\n        return new MacOSButton();\n    }\n\n    @Override\n    public Checkbox createCheckbox() {\n        return new MacOSCheckbox();\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"factories/WindowsFactory.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.abstract_factory.example.factories;\n\nimport refactoring_guru.abstract_factory.example.buttons.Button;\nimport refactoring_guru.abstract_factory.example.buttons.WindowsButton;\nimport refactoring_guru.abstract_factory.example.checkboxes.Checkbox;\nimport refactoring_guru.abstract_factory.example.checkboxes.WindowsCheckbox;\n\n/**\n * Each concrete factory extends basic factory and responsible for creating\n* products of a single variety.\n*/\npublic class WindowsFactory implements GUIFactory {\n\n    @Override\n    public Button createButton() {\n        return new WindowsButton();\n    }\n\n    @Override\n    public Checkbox createCheckbox() {\n        return new WindowsCheckbox();\n    }\n}\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Demo.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.abstract_factory.example;\n\nimport refactoring_guru.abstract_factory.example.app.Application;\nimport refactoring_guru.abstract_factory.example.factories.GUIFactory;\nimport refactoring_guru.abstract_factory.example.factories.MacOSFactory;\nimport refactoring_guru.abstract_factory.example.factories.WindowsFactory;\n\n/**\n * Demo class. Everything comes together here.\n */\npublic class Demo {\n\n    /**\n     * Application picks the factory type and creates it in run time (usually at\n     * initialization stage), depending on the configuration or environment\n     * variables.\n     */\n    private static Application configureApplication() {\n        Application app;\n        GUIFactory factory;\n        String osName = System.getProperty("os.name").toLowerCase();\n        if (osName.contains("mac")) {\n            factory = new MacOSFactory();\n            app = new Application(factory);\n        } else {\n            factory = new WindowsFactory();\n            app = new Application(factory);\n        }\n        return app;\n    }\n\n    public static void main(String[] args) {\n        Application app = configureApplication();\n        app.paint();\n    }\n}\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"You create WindowsButton.\nYou created WindowsCheckbox.\n")))))}u.isMDXComponent=!0}}]);