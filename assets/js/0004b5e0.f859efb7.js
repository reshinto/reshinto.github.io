"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[68639],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(r),h=o,f=d["".concat(i,".").concat(h)]||d[h]||u[h]||a;return r?n.createElement(f,c(c({ref:t},p),{},{components:r})):n.createElement(f,c({ref:t},p))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},49751:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(83117),o=(r(67294),r(3905));const a={},c="Swift Example",s={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Factory/swift/readme",id:"interviewPrep/designPatterns/Creational_patterns/Factory/swift/readme",title:"Swift Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Factory/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Factory/swift",slug:"/interviewPrep/designPatterns/Creational_patterns/Factory/swift/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Factory/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/python/example2"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/swift/example2"}},i={},l=[],p={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"swift-example"},"Swift Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'/// Factory Method Design Pattern\n///\n/// Intent: Provides an interface for creating objects in a superclass, but\n/// allows subclasses to alter the type of objects that will be created.\n\nimport XCTest\n\n/// The Creator protocol declares the factory method that\'s supposed to return a\n/// new object of a Product class. The Creator\'s subclasses usually provide the\n/// implementation of this method.\nprotocol Creator {\n\n    /// Note that the Creator may also provide some default implementation of\n    /// the factory method.\n    func factoryMethod() -> Product\n\n    /// Also note that, despite its name, the Creator\'s primary responsibility\n    /// is not creating products. Usually, it contains some core business logic\n    /// that relies on Product objects, returned by the factory method.\n    /// Subclasses can indirectly change that business logic by overriding the\n    /// factory method and returning a different type of product from it.\n    func someOperation() -> String\n}\n\n/// This extension implements the default behavior of the Creator. This behavior\n/// can be overridden in subclasses.\nextension Creator {\n\n    func someOperation() -> String {\n        // Call the factory method to create a Product object.\n        let product = factoryMethod()\n\n        // Now, use the product.\n        return "Creator: The same creator\'s code has just worked with " + product.operation()\n    }\n}\n\n/// Concrete Creators override the factory method in order to change the\n/// resulting product\'s type.\nclass ConcreteCreator1: Creator {\n\n    /// Note that the signature of the method still uses the abstract product\n    /// type, even though the concrete product is actually returned from the\n    /// method. This way the Creator can stay independent of concrete product\n    /// classes.\n    public func factoryMethod() -> Product {\n        return ConcreteProduct1()\n    }\n}\n\nclass ConcreteCreator2: Creator {\n\n    public func factoryMethod() -> Product {\n        return ConcreteProduct2()\n    }\n}\n\n/// The Product protocol declares the operations that all concrete products must\n/// implement.\nprotocol Product {\n\n    func operation() -> String\n}\n\n/// Concrete Products provide various implementations of the Product protocol.\nclass ConcreteProduct1: Product {\n\n    func operation() -> String {\n        return "{Result of the ConcreteProduct1}"\n    }\n}\n\nclass ConcreteProduct2: Product {\n\n    func operation() -> String {\n        return "{Result of the ConcreteProduct2}"\n    }\n}\n\n\n/// The client code works with an instance of a concrete creator, albeit through\n/// its base protocol. As long as the client keeps working with the creator via\n/// the base protocol, you can pass it any creator\'s subclass.\nclass Client {\n    // ...\n    static func someClientCode(creator: Creator) {\n        print("Client: I\'m not aware of the creator\'s class, but it still works.\\n"\n            + creator.someOperation())\n    }\n    // ...\n}\n\n/// Let\'s see how it all works together.\nclass FactoryMethodConceptual: XCTestCase {\n\n    func testFactoryMethodConceptual() {\n\n        /// The Application picks a creator\'s type depending on the\n        /// configuration or environment.\n\n        print("App: Launched with the ConcreteCreator1.")\n        Client.someClientCode(creator: ConcreteCreator1())\n\n        print("\\nApp: Launched with the ConcreteCreator2.")\n        Client.someClientCode(creator: ConcreteCreator2())\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"App: Launched with the ConcreteCreator1.\nClient: I'm not aware of the creator's class, but it still works.\nCreator: The same creator's code has just worked with {Result of the ConcreteProduct1}\n\nApp: Launched with the ConcreteCreator2.\nClient: I'm not aware of the creator's class, but it still works.\nCreator: The same creator's code has just worked with {Result of the ConcreteProduct2}\n")))}u.isMDXComponent=!0}}]);