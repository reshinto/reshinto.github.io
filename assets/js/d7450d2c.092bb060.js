"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[7772],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>v});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=r.createContext({}),c=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(m.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(t),v=o,u=d["".concat(m,".").concat(v)]||d[v]||p[v]||a;return t?r.createElement(u,i(i({ref:n},l),{},{components:t})):r.createElement(u,i({ref:n},l))}));function v(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},75173:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={},i="C# Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Command/cSharp/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Command/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Command/cSharp",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Command/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/go/"}},m={},c=[],l={toc:c};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"c-example"},"C# Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'// Command Design Pattern\n//\n// Intent: Turns a request into a stand-alone object that contains all\n// information about the request. This transformation lets you parameterize\n// methods with different requests, delay or queue a request\'s execution, and\n// support undoable operations.\n\nusing System;\n\nnamespace RefactoringGuru.DesignPatterns.Command.Conceptual\n{\n    // The Command interface declares a method for executing a command.\n    public interface ICommand\n    {\n        void Execute();\n    }\n\n    // Some commands can implement simple operations on their own.\n    class SimpleCommand : ICommand\n    {\n        private string _payload = string.Empty;\n\n        public SimpleCommand(string payload)\n        {\n            this._payload = payload;\n        }\n\n        public void Execute()\n        {\n            Console.WriteLine($"SimpleCommand: See, I can do simple things like printing ({this._payload})");\n        }\n    }\n\n    // However, some commands can delegate more complex operations to other\n    // objects, called "receivers."\n    class ComplexCommand : ICommand\n    {\n        private Receiver _receiver;\n\n        // Context data, required for launching the receiver\'s methods.\n        private string _a;\n\n        private string _b;\n\n        // Complex commands can accept one or several receiver objects along\n        // with any context data via the constructor.\n        public ComplexCommand(Receiver receiver, string a, string b)\n        {\n            this._receiver = receiver;\n            this._a = a;\n            this._b = b;\n        }\n\n        // Commands can delegate to any methods of a receiver.\n        public void Execute()\n        {\n            Console.WriteLine("ComplexCommand: Complex stuff should be done by a receiver object.");\n            this._receiver.DoSomething(this._a);\n            this._receiver.DoSomethingElse(this._b);\n        }\n    }\n\n    // The Receiver classes contain some important business logic. They know how\n    // to perform all kinds of operations, associated with carrying out a\n    // request. In fact, any class may serve as a Receiver.\n    class Receiver\n    {\n        public void DoSomething(string a)\n        {\n            Console.WriteLine($"Receiver: Working on ({a}.)");\n        }\n\n        public void DoSomethingElse(string b)\n        {\n            Console.WriteLine($"Receiver: Also working on ({b}.)");\n        }\n    }\n\n    // The Invoker is associated with one or several commands. It sends a\n    // request to the command.\n    class Invoker\n    {\n        private ICommand _onStart;\n\n        private ICommand _onFinish;\n\n        // Initialize commands.\n        public void SetOnStart(ICommand command)\n        {\n            this._onStart = command;\n        }\n\n        public void SetOnFinish(ICommand command)\n        {\n            this._onFinish = command;\n        }\n\n        // The Invoker does not depend on concrete command or receiver classes.\n        // The Invoker passes a request to a receiver indirectly, by executing a\n        // command.\n        public void DoSomethingImportant()\n        {\n            Console.WriteLine("Invoker: Does anybody want something done before I begin?");\n            if (this._onStart is ICommand)\n            {\n                this._onStart.Execute();\n            }\n\n            Console.WriteLine("Invoker: ...doing something really important...");\n\n            Console.WriteLine("Invoker: Does anybody want something done after I finish?");\n            if (this._onFinish is ICommand)\n            {\n                this._onFinish.Execute();\n            }\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // The client code can parameterize an invoker with any commands.\n            Invoker invoker = new Invoker();\n            invoker.SetOnStart(new SimpleCommand("Say Hi!"));\n            Receiver receiver = new Receiver();\n            invoker.SetOnFinish(new ComplexCommand(receiver, "Send email", "Save report"));\n\n            invoker.DoSomethingImportant();\n        }\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Invoker: Does anybody want something done before I begin?\nSimpleCommand: See, I can do simple things like printing (Say Hi!)\nInvoker: ...doing something really important...\nInvoker: Does anybody want something done after I finish?\nComplexCommand: Complex stuff should be done by a receiver object.\nReceiver: Working on (Send email.)\nReceiver: Also working on (Save report.)\n")))}p.isMDXComponent=!0}}]);