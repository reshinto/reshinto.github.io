"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[3497],{3905:(e,n,s)=>{s.d(n,{Zo:()=>g,kt:()=>d});var r=s(67294);function t(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function o(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,r)}return s}function a(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?o(Object(s),!0).forEach((function(n){t(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):o(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function p(e,n){if(null==e)return{};var s,r,t=function(e,n){if(null==e)return{};var s,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)s=o[r],n.indexOf(s)>=0||(t[s]=e[s]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)s=o[r],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(t[s]=e[s])}return t}var i=r.createContext({}),c=function(e){var n=r.useContext(i),s=n;return e&&(s="function"==typeof e?e(n):a(a({},n),e)),s},g=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var s=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,g=p(e,["components","mdxType","originalType","parentName"]),l=c(s),d=t,m=l["".concat(i,".").concat(d)]||l[d]||u[d]||o;return s?r.createElement(m,a(a({ref:n},g),{},{components:s})):r.createElement(m,a({ref:n},g))}));function d(e,n){var s=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=s.length,a=new Array(o);a[0]=l;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p.mdxType="string"==typeof e?e:t,a[1]=p;for(var c=2;c<o;c++)a[c]=s[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,s)}l.displayName="MDXCreateElement"},4044:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=s(83117),t=(s(67294),s(3905));const o={},a="Add Swagger to Express",p={unversionedId:"Technologies/API/express/swagger/readme",id:"Technologies/API/express/swagger/readme",title:"Add Swagger to Express",description:"Default express app",source:"@site/docs/Technologies/API/express/swagger/readme.md",sourceDirName:"Technologies/API/express/swagger",slug:"/Technologies/API/express/swagger/",permalink:"/docs/Technologies/API/express/swagger/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/Technologies/API/express/swagger/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Express",permalink:"/docs/Technologies/API/express/"},next:{title:"Flask",permalink:"/docs/Technologies/API/flaskTutorial/"}},i={},c=[{value:"Default express app",id:"default-express-app",level:2},{value:"Setup basic Swagger options",id:"setup-basic-swagger-options",level:2},{value:"Add route infos into Swagger",id:"add-route-infos-into-swagger",level:3}],g={toc:c};function u(e){let{components:n,...o}=e;return(0,t.kt)("wrapper",(0,r.Z)({},g,o,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"add-swagger-to-express"},"Add Swagger to Express"),(0,t.kt)("h2",{id:"default-express-app"},"Default express app"),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"npm i express")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'const express = require("express");\nconst app = express();\n\nconst port = process.env.PORT || 5000;\n\n// Routes\napp.get("/customers", (req, res) => {\n  res.status(200).send("Customer results");\n});\n\napp.put("/customer", (req, res) => {\n  res.status(200).send("Successfully updated customer");\n});\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n')),(0,t.kt)("h2",{id:"setup-basic-swagger-options"},"Setup basic Swagger options"),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"npm i swagger-ui-express swagger-jsdoc")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'const express = require("express");\nconst app = express();\nconst swaggerJsDoc = require("swagger-jsdoc");\nconst swaggerUi = require("swagger-ui-express");\n\nconst port = process.env.PORT || 5000;\n\n// for more info: https://swagger.io/specification/#infoObject\nconst swaggerOptions = {\n  swaggerDefinition: {\n    info: {\n      title: "Customer API",\n      description: "Customer API Information",\n      contact: {\n        name: "Amazing Developer",\n      },\n      servers: ["http://localhost:5000"],\n    },\n  },\n  // [\'.routes/*.js\']\n  apis: ["app.js"],\n};\n\nconst swaggerDocs = swaggerJsDoc(swaggerOptions);\n\napp.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocs));\n\n// Routes\napp.get("/customers", (req, res) => {\n  res.status(200).send("Customer results");\n});\n\napp.put("/customer", (req, res) => {\n  res.status(200).send("Successfully updated customer");\n});\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n')),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"verify at ",(0,t.kt)("inlineCode",{parentName:"li"},"http://localhost:5000/api-docs/")),(0,t.kt)("li",{parentName:"ul"},"result\n",(0,t.kt)("img",{alt:"Basic Swagger Setup",src:s(79815).Z,width:"1918",height:"868"}))),(0,t.kt)("h3",{id:"add-route-infos-into-swagger"},"Add route infos into Swagger"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'const express = require("express");\nconst app = express();\nconst swaggerJsDoc = require("swagger-jsdoc");\nconst swaggerUi = require("swagger-ui-express");\n\nconst port = process.env.PORT || 5000;\n\n// for more info: https://swagger.io/specification/#infoObject\nconst swaggerOptions = {\n  swaggerDefinition: {\n    info: {\n      version: "1.0.0",\n      title: "Customer API",\n      description: "Customer API Information",\n      contact: {\n        name: "Amazing Developer",\n      },\n      servers: ["http://localhost:5000"],\n    },\n  },\n  // [\'.routes/*.js\']\n  apis: ["app.js"],\n};\n\nconst swaggerDocs = swaggerJsDoc(swaggerOptions);\napp.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocs));\n\n// Routes\n// indentatin in the swagger declaration is important\n/**\n * @swagger\n * /customers:\n *  get:\n *    description: Use to request all customers\n *    responses:\n *      \'200\':\n *        description: A successful response\n */\napp.get("/customers", (req, res) => {\n  res.status(200).send("Customer results");\n});\n\n/**\n * @swagger\n * /customers:\n *    put:\n *      description: Use to return all customers\n *    parameters:\n *      - name: customer\n *        in: query\n *        description: Name of our customer\n *        required: false\n *        schema:\n *          type: string\n *          format: string\n *    responses:\n *      \'201\':\n *        description: Successfully created user\n */\napp.put("/customer", (req, res) => {\n  res.status(200).send("Successfully updated customer");\n});\n\napp.listen(port, () => {\n  console.log(`Server listening on port ${port}`);\n});\n')),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"Swagger Route Example",src:s(25395).Z,width:"1890",height:"1036"}),"\n",(0,t.kt)("img",{alt:"Swagger Route Content Example",src:s(11071).Z,width:"1886",height:"1246"})))}u.isMDXComponent=!0},79815:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/basicSwaggerSetup-02b8b1b97b0a8ce53b1e266e903a2a56.png"},11071:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/swaggerRouteContentExample-7e2748b8ce30f17d23b0ac8e4fea9687.png"},25395:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/swaggerRouteExample-e6dbbf44d6935b15b91d575b9609031d.png"}}]);