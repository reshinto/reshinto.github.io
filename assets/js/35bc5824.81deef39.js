"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[4896],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var s=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=s.createContext({}),u=function(e){var t=s.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return s.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),y=r,d=m["".concat(c,".").concat(y)]||m[y]||l[y]||a;return n?s.createElement(d,i(i({ref:t},p),{},{components:n})):s.createElement(d,i({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<a;u++)i[u]=n[u];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},30013:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var s=n(87462),r=(n(67294),n(3905));const a={},i="TypeScript Example",o={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Facade/typescript/readme",id:"interviewPrep/designPatterns/Structural_patterns/Facade/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Facade/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Facade/typescript",slug:"/interviewPrep/designPatterns/Structural_patterns/Facade/typescript/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Facade/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/swift/example2"},next:{title:"Flyweight",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/"}},c={},u=[],p={toc:u};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Facade Design Pattern\n *\n * Intent: Provides a simplified interface to a library, a framework, or any\n * other complex set of classes.\n */\n\n/**\n * The Facade class provides a simple interface to the complex logic of one or\n * several subsystems. The Facade delegates the client requests to the\n * appropriate objects within the subsystem. The Facade is also responsible for\n * managing their lifecycle. All of this shields the client from the undesired\n * complexity of the subsystem.\n */\nclass Facade {\n  protected subsystem1: Subsystem1;\n\n  protected subsystem2: Subsystem2;\n\n  /**\n   * Depending on your application\'s needs, you can provide the Facade with\n   * existing subsystem objects or force the Facade to create them on its own.\n   */\n  constructor(subsystem1: Subsystem1 = null, subsystem2: Subsystem2 = null) {\n    this.subsystem1 = subsystem1 || new Subsystem1();\n    this.subsystem2 = subsystem2 || new Subsystem2();\n  }\n\n  /**\n   * The Facade\'s methods are convenient shortcuts to the sophisticated\n   * functionality of the subsystems. However, clients get only to a fraction\n   * of a subsystem\'s capabilities.\n   */\n  public operation(): string {\n    let result = "Facade initializes subsystems:\\n";\n    result += this.subsystem1.operation1();\n    result += this.subsystem2.operation1();\n    result += "Facade orders subsystems to perform the action:\\n";\n    result += this.subsystem1.operationN();\n    result += this.subsystem2.operationZ();\n\n    return result;\n  }\n}\n\n/**\n * The Subsystem can accept requests either from the facade or client directly.\n * In any case, to the Subsystem, the Facade is yet another client, and it\'s not\n * a part of the Subsystem.\n */\nclass Subsystem1 {\n  public operation1(): string {\n    return "Subsystem1: Ready!\\n";\n  }\n\n  // ...\n\n  public operationN(): string {\n    return "Subsystem1: Go!\\n";\n  }\n}\n\n/**\n * Some facades can work with multiple subsystems at the same time.\n */\nclass Subsystem2 {\n  public operation1(): string {\n    return "Subsystem2: Get ready!\\n";\n  }\n\n  // ...\n\n  public operationZ(): string {\n    return "Subsystem2: Fire!";\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * The client code works with complex subsystems through a simple interface\n * provided by the Facade. When a facade manages the lifecycle of the subsystem,\n * the client might not even know about the existence of the subsystem. This\n * approach lets you keep the complexity under control.\n */\nfunction clientCode(facade: Facade) {\n  // ...\n\n  console.log(facade.operation());\n\n  // ...\n}\n\n/**\n * The client code may have some of the subsystem's objects already created. In\n * this case, it might be worthwhile to initialize the Facade with these objects\n * instead of letting the Facade create new instances.\n */\nconst subsystem1 = new Subsystem1();\nconst subsystem2 = new Subsystem2();\nconst facade = new Facade(subsystem1, subsystem2);\nclientCode(facade);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Facade initializes subsystems:\nSubsystem1: Ready!\nSubsystem2: Get ready!\nFacade orders subsystems to perform the action:\nSubsystem1: Go!\nSubsystem2: Fire!\n")))}l.isMDXComponent=!0}}]);