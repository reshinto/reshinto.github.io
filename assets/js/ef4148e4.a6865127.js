"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[76563],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),h=s(n),g=r,d=h["".concat(l,".").concat(g)]||h[g]||u[g]||i;return n?a.createElement(d,p(p({ref:t},c),{},{components:n})):a.createElement(d,p({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,p=new Array(i);p[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,p[1]=o;for(var s=2;s<i;s++)p[s]=n[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},31895:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(83117),r=(n(67294),n(3905));const i={},p="Java Example",o={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Prototype/java/readme",id:"interviewPrep/designPatterns/Creational_patterns/Prototype/java/readme",title:"Java Example",description:"- shapes",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Prototype/java",slug:"/interviewPrep/designPatterns/Creational_patterns/Prototype/java/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/go/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/java/example2"}},l={},s=[],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"java-example"},"Java Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/Circle.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.prototype.example.shapes;\n\npublic class Circle extends Shape {\n    public int radius;\n\n    public Circle() {\n    }\n\n    public Circle(Circle target) {\n        super(target);\n        if (target != null) {\n            this.radius = target.radius;\n        }\n    }\n\n    @Override\n    public Shape clone() {\n        return new Circle(this);\n    }\n\n    @Override\n    public boolean equals(Object object2) {\n        if (!(object2 instanceof Circle) || !super.equals(object2)) return false;\n        Circle shape2 = (Circle) object2;\n        return shape2.radius == radius;\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/Rectangle.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.prototype.example.shapes;\n\npublic class Rectangle extends Shape {\n    public int width;\n    public int height;\n\n    public Rectangle() {\n    }\n\n    public Rectangle(Rectangle target) {\n        super(target);\n        if (target != null) {\n            this.width = target.width;\n            this.height = target.height;\n        }\n    }\n\n    @Override\n    public Shape clone() {\n        return new Rectangle(this);\n    }\n\n    @Override\n    public boolean equals(Object object2) {\n        if (!(object2 instanceof Rectangle) || !super.equals(object2)) return false;\n        Rectangle shape2 = (Rectangle) object2;\n        return shape2.width == width && shape2.height == height;\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/Shape.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.prototype.example.shapes;\n\nimport java.util.Objects;\n\npublic abstract class Shape {\n    public int x;\n    public int y;\n    public String color;\n\n    public Shape() {\n    }\n\n    public Shape(Shape target) {\n        if (target != null) {\n            this.x = target.x;\n            this.y = target.y;\n            this.color = target.color;\n        }\n    }\n\n    public abstract Shape clone();\n\n    @Override\n    public boolean equals(Object object2) {\n        if (!(object2 instanceof Shape)) return false;\n        Shape shape2 = (Shape) object2;\n        return shape2.x == x && shape2.y == y && Objects.equals(shape2.color, color);\n    }\n}\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Demo.java"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.prototype.example;\n\nimport refactoring_guru.prototype.example.shapes.Circle;\nimport refactoring_guru.prototype.example.shapes.Rectangle;\nimport refactoring_guru.prototype.example.shapes.Shape;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Demo {\n    public static void main(String[] args) {\n        List<Shape> shapes = new ArrayList<>();\n        List<Shape> shapesCopy = new ArrayList<>();\n\n        Circle circle = new Circle();\n        circle.x = 10;\n        circle.y = 20;\n        circle.radius = 15;\n        circle.color = "red";\n        shapes.add(circle);\n\n        Circle anotherCircle = (Circle) circle.clone();\n        shapes.add(anotherCircle);\n\n        Rectangle rectangle = new Rectangle();\n        rectangle.width = 10;\n        rectangle.height = 20;\n        rectangle.color = "blue";\n        shapes.add(rectangle);\n\n        cloneAndCompare(shapes, shapesCopy);\n    }\n\n    private static void cloneAndCompare(List<Shape> shapes, List<Shape> shapesCopy) {\n        for (Shape shape : shapes) {\n            shapesCopy.add(shape.clone());\n        }\n\n        for (int i = 0; i < shapes.size(); i++) {\n            if (shapes.get(i) != shapesCopy.get(i)) {\n                System.out.println(i + ": Shapes are different objects (yay!)");\n                if (shapes.get(i).equals(shapesCopy.get(i))) {\n                    System.out.println(i + ": And they are identical (yay!)");\n                } else {\n                    System.out.println(i + ": But they are not identical (booo!)");\n                }\n            } else {\n                System.out.println(i + ": Shape objects are the same (booo!)");\n            }\n        }\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"0: Shapes are different objects (yay!)\n0: And they are identical (yay!)\n1: Shapes are different objects (yay!)\n1: And they are identical (yay!)\n2: Shapes are different objects (yay!)\n2: And they are identical (yay!)\n")))}u.isMDXComponent=!0}}]);