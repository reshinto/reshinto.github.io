"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[92166],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||o;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},29002:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(83117),i=(n(67294),n(3905));const o={},a="Insertion Sort",s={unversionedId:"interviewPrep/algorithms_and_techniques/sorting/insertionSort",id:"interviewPrep/algorithms_and_techniques/sorting/insertionSort",title:"Insertion Sort",description:"- it is a simple sorting algorithm that works similar to the way you sort playing cards in your hands",source:"@site/docs/interviewPrep/algorithms_and_techniques/sorting/insertionSort.md",sourceDirName:"interviewPrep/algorithms_and_techniques/sorting",slug:"/interviewPrep/algorithms_and_techniques/sorting/insertionSort",permalink:"/docs/interviewPrep/algorithms_and_techniques/sorting/insertionSort",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/sorting/insertionSort.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Heap Sort",permalink:"/docs/interviewPrep/algorithms_and_techniques/sorting/heapSort"},next:{title:"Merge Sort",permalink:"/docs/interviewPrep/algorithms_and_techniques/sorting/mergeSort"}},l={},p=[],u={toc:p};function m(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"insertion-sort"},"Insertion Sort"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"it is a simple sorting algorithm that works similar to the way you sort playing cards in your hands"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The array is virtually split into a sorted and an unsorted part"),(0,i.kt)("li",{parentName:"ul"},"Values from the unsorted part are picked and placed at the correct position in the sorted part"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The running time of the insertionSort procedure depends on the set of input values"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"it takes longer to sort thousands of numbers than to sort three numbers"),(0,i.kt)("li",{parentName:"ul"},"the running time of the algorithm increases with an increase in the amount of input data",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"it is a common practice to represent the running time of a program as a function depending on the number of input elements"),(0,i.kt)("li",{parentName:"ul"},'For this, the concepts of "algorithm time" and "size of input data" need to be determined more precisely'))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The most adequate concept of input data size depends on the problem in question"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For each task considered below, the way of measuring the size of the input data will be indicated"),(0,i.kt)("li",{parentName:"ul"},"In the case of insertion sort, the number of input elements is considered as the size of the input data"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'The running time of an algorithm on a particular input is the number of primitive operations or "steps" executed'),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It is convenient to define the notion of step so that it is as machine-independent as possible"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To sort an array of size n in ascending order"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Iterate from arr","[1]"," to arr","[n]"," over the array"),(0,i.kt)("li",{parentName:"ul"},"Compare the current element (key) to its predecessor"),(0,i.kt)("li",{parentName:"ul"},"If the key element is smaller than its predecessor, compare it to the elements before",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Move the greater elements one position up to make space for the swapped element")))),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Insertion Sort",src:n(24364).Z,width:"458",height:"631"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"example"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// prettier-ignore\nfunction insertionSort(numbers: number[]) {       // Cost | Repeats\n  for (let i = 1; i < numbers.length; i++) {      // c[1] | n\n    const numberToSort = numbers[i];              // \u0441[2] | n-1\n    let j = i - 1;                                // \u0441[3] | n-1\n\n    while (j >= 0 && numbers[j] > numberToSort) { // c[4] | Sum(j=2, n) t[j]\n      numbers[j + 1] = numbers[j];                // c[5] | Sum(j=2, n) t[j-1]\n      j--;                                        // c[6] | Sum(j=2, n) t[j-1]\n    }\n\n    numbers[j + 1] = numberToSort;                // \u0441[7] | n-1\n  }\n}\n\nconst numbers = [1, 600, 199, 20, 7, 6, 8, 1300, 12, 601];\n\ninsertionSort(numbers);\n\nconsole.log(numbers);\n")))))}m.isMDXComponent=!0},24364:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/insertion_sort-78506de5d6e4323dc0102c909c332e80.png"}}]);