"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[602],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=s(n),g=r,u=p["".concat(l,".").concat(g)]||p[g]||h[g]||i;return n?a.createElement(u,c(c({ref:t},m),{},{components:n})):a.createElement(u,c({ref:t},m))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var s=2;s<i;s++)c[s]=n[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},99492:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(83117),r=(n(67294),n(3905));const i={},c="TypeScript",o={unversionedId:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/typescript/readme",id:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/typescript/readme",title:"TypeScript",description:"Violate ISP",source:"@site/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/typescript/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/typescript",slug:"/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/typescript/",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Example",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/python/"},next:{title:"Liskov Substitution Principle (LSP)",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/"}},l={},s=[{value:"Violate ISP",id:"violate-isp",level:2},{value:"Pass ISP",id:"pass-isp",level:2}],m={toc:s};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"typescript"},"TypeScript"),(0,r.kt)("h2",{id:"violate-isp"},"Violate ISP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// this violates the interface segregation principle\n// because it is being used by multiple classes that does not requires all of it\ninterface Entity {\n  name: string;\n  attackDamage: number;\n  health: number;\n\n  move(): void | null;\n  attack(targetEntity: Entity | undefined): void | null;\n  takeDamage(amount: number): void | null;\n}\n\n// passes the interface segregation principle\nclass Character implements Entity {\n  name: string;\n  attackDamage: number;\n  health: number;\n\n  constructor(name: string, attackDamage: number, health: number) {\n    this.name = name;\n    this.attackDamage = attackDamage;\n    this.health = health;\n  }\n\n  move(): void {\n    console.log(`${this.name} moved`);\n  }\n\n  attack(targetEntity: Entity | undefined): void {\n    console.log(\n      `${this.name} attacked ${targetEntity.name} for ${this.attackDamage} damage`\n    );\n    targetEntity.takeDamage(this.attackDamage);\n  }\n\n  takeDamage(amount: number | undefined): void {\n    this.health -= amount;\n    console.log(`${this.name} has ${this.health} health remaining`);\n  }\n}\n\nclass Wall implements Entity {\n  name: string;\n  // violates the interface segregation principle\n  attackDamage: number;\n  health: number;\n\n  constructor(name: string, health: number) {\n    this.name = name;\n    this.attackDamage = 0;\n    this.health = health;\n  }\n\n  // violates the interface segregation principle\n  move(): null {\n    return null;\n  }\n\n  // violates the interface segregation principle\n  attack(): null {\n    return null;\n  }\n\n  takeDamage(amount: number): void {\n    this.health -= amount;\n    console.log(`${this.name} has ${this.health} health remaining`);\n  }\n}\n\nclass Turret implements Entity {\n  name: string;\n  attackDamage: number;\n  // violates the interface segregation principle\n  health: number;\n\n  constructor(name: string, attackDamage: number) {\n    this.name = name;\n    this.attackDamage = attackDamage;\n    this.health = 0;\n  }\n\n  // violates the interface segregation principle\n  move(): null {\n    return null;\n  }\n\n  attack(targetEntity: Entity): void {\n    console.log(\n      `${this.name} attacked ${targetEntity.name} for ${this.attackDamage} damage`\n    );\n    targetEntity.takeDamage(this.attackDamage);\n  }\n\n  // violates the interface segregation principle\n  takeDamage(): null {\n    return null;\n  }\n}\n\nconst turret = new Turret("turret", 5);\nconst character = new Character("Character", 3, 100);\nconst wall = new Wall("Wall", 200);\n\nturret.attack(character);\ncharacter.move();\ncharacter.attack(wall);\n')),(0,r.kt)("h2",{id:"pass-isp"},"Pass ISP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'interface Entity {\n  name: string;\n}\n\ninterface Mover {\n  move(): void;\n}\n\ninterface Attacker {\n  attackDamage: number;\n  attack(targetEntity: any): void;\n}\n\ninterface HasHealth {\n  health: number;\n  takeDamage(amount: number): void;\n}\n\nclass Character implements Entity, Mover, Attacker, HasHealth {\n  name: string;\n  attackDamage: number;\n  health: number;\n\n  constructor(name: string, attackDamage: number, health: number) {\n    this.name = name;\n    this.attackDamage = attackDamage;\n    this.health = health;\n  }\n\n  move(): void {\n    console.log(`${this.name} moved`);\n  }\n\n  attack(targetEntity: any): void {\n    console.log(\n      `${this.name} attacked ${targetEntity.name} for ${this.attackDamage} damage`\n    );\n    targetEntity.takeDamage(this.attackDamage);\n  }\n\n  takeDamage(amount: number): void {\n    this.health -= amount;\n    console.log(`${this.name} has ${this.health} health remaining`);\n  }\n}\n\nclass Wall implements Entity, HasHealth {\n  name: string;\n  health: number;\n\n  constructor(name: string, health: number) {\n    this.name = name;\n    this.health = health;\n  }\n\n  takeDamage(amount: number): void {\n    this.health -= amount;\n    console.log(`${this.name} has ${this.health} health remaining`);\n  }\n}\n\nclass Turret implements Entity, Attacker {\n  name: string;\n  attackDamage: number;\n\n  constructor(name: string, attackDamage: number) {\n    this.name = name;\n    this.attackDamage = attackDamage;\n  }\n\n  attack(targetEntity: any): void {\n    console.log(\n      `${this.name} attacked ${targetEntity.name} for ${this.attackDamage} damage`\n    );\n    targetEntity.takeDamage(this.attackDamage);\n  }\n}\n\nconst turret = new Turret("Turret", 5);\nconst character = new Character("Character", 3, 100);\nconst wall = new Wall("Wall", 200);\n\nturret.attack(character);\ncharacter.move();\ncharacter.attack(wall);\n')))}h.isMDXComponent=!0}}]);