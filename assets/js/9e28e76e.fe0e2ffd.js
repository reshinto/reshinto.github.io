"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[10782],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},95979:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const i={},l="Single Responsibility Principle (SRP)",o={unversionedId:"interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/readme",id:"interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/readme",title:"Single Responsibility Principle (SRP)",description:"- A class should have one and only one reason to change, meaning that a class should have only one job",source:"@site/docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple",slug:"/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/",permalink:"/docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TypeScript Example",permalink:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/typescript/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/cSharp/"}},s={},p=[{value:"Bad Example",id:"bad-example",level:2},{value:"Good Example",id:"good-example",level:2},{value:"Summary",id:"summary",level:2},{value:"When to use?",id:"when-to-use",level:3},{value:"How to apply?",id:"how-to-apply",level:3}],c={toc:p};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"single-responsibility-principle-srp"},"Single Responsibility Principle (SRP)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"A class should have one and only one reason to change, meaning that a class should have only one job")),(0,r.kt)("li",{parentName:"ul"},"Classes, software components and microservices that have only one responsibility are much easier to explain, understand and implement than the ones that provide a solution for everything",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This reduces the number of bugs, improves your development speed, and makes your life as a software developer a lot easier"))),(0,r.kt)("li",{parentName:"ul"},"Unfortunately, following the single responsibility principle sounds a lot easier than it often is",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If you build your software over a longer period and if you need to adapt it to changing requirements, it might seem like the easiest and fastest approach is adding a method or functionality to your existing code instead of writing a new class or component"),(0,r.kt)("li",{parentName:"ul"},"But that often results in classes with more responsibilities and makes it more and more difficult to maintain the software"))),(0,r.kt)("li",{parentName:"ul"},"You can avoid these problems by asking simple questions before you make any changes:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Is this class doing too much?",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Correct answer: No, it is responsible for only one specific functionality"))),(0,r.kt)("li",{parentName:"ul"},"How many sources of new requirements does this class have?",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Correct answer: Single source or new requirements"))),(0,r.kt)("li",{parentName:"ul"},"Who is this class responsible to?",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Correct answer: It is only responsible to one person or role")))))),(0,r.kt)("h2",{id:"bad-example"},"Bad Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Suppose we have ",(0,r.kt)("inlineCode",{parentName:"li"},"TradeProcessor")," class, which purpose is to retrieve trade operations from one data source and transfer them to another",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TradeProcessor")," class responsibilities are:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"read each line from the Stream parameter"),(0,r.kt)("li",{parentName:"ul"},"parse fields from each line and store them in an array of TradeRecord instances with validation"),(0,r.kt)("li",{parentName:"ul"},"iterate over an array of TradeRecord instances and save them to the database")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'class TradeProcessor {\n  public process(stream: Stream) {\n    const connection = new DBConnection(/* */);\n    const reader: StreamReader = new StreamReader(stream);\n    const lines: string[] = reader.readLines();\n\n    lines\n      .reduce((records: TradeRecord[], line: string) => {\n        const fields = line.split(",");\n\n        if (fields.length !== 2) {\n          /* handle format validation error */\n        }\n\n        const [amount, price] = [\n          parseInt(fields[1], 10),\n          parseInt(fields[2], 10),\n        ];\n\n        if (amount < 0 || price < 0) {\n          /* handle trade validation error */\n        }\n\n        return [...records, new TradeRecord(amount, price)];\n      }, [])\n      .forEach((trade: TradeRecord) => {\n        connection.save(trade);\n      });\n\n    connection.close();\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"SRP states that class should have only one reason to change"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"However, the reality of TradeProcessor is that it will change under the following circumstances:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"You need to change the data source from the stream to the REST API"),(0,r.kt)("li",{parentName:"ul"},"The data format needs to be changed"),(0,r.kt)("li",{parentName:"ul"},"Validation rules have changed"),(0,r.kt)("li",{parentName:"ul"},"When the procedure for saving data to the database changes",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"for example, instead of mapping incoming parameters to a database table, we will save them in several tables with foreign keys"))))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'Now you need to ask "Who is to blame for the changes?"'),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Having answered it, you will divide the requirements into three groups of responsibilities"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"What to do next?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Separate the interfaces and as a result make the class follow SRP"),(0,r.kt)("li",{parentName:"ul"},"So, the first step in refactoring ",(0,r.kt)("inlineCode",{parentName:"li"},"TradeProcessor")," is to create interfaces that will be used to perform three high-level tasks:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"reading"),(0,r.kt)("li",{parentName:"ul"},"processing"),(0,r.kt)("li",{parentName:"ul"},"storing trade data"))),(0,r.kt)("li",{parentName:"ul"},"In accordance with the SRP, three main responsibilities will be carried out by three different classes"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You may ask: What if we already have clients who use ",(0,r.kt)("inlineCode",{parentName:"p"},"TradeProcessor")," in its previous implementation?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is a valid question, and ideally you should already have an interface or abstract processor class allocated"),(0,r.kt)("li",{parentName:"ul"},"We just add a new processor implementation in the form of an adapter composing the new version and adjusting it to the old interface"),(0,r.kt)("li",{parentName:"ul"},"If we do not have such abstraction, then we can implement the adapter directly in the current processor implementation, declare it deprecated and remove it in the next version of the application/library")))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"SRP",src:n(19567).Z,width:"542",height:"294"})),(0,r.kt)("h2",{id:"good-example"},"Good Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class TradeProcessor {\n  constructor(private validator: Validator, private storage: Storage) {}\n\n  public process(trades: DataProvider) {\n    const validTrades = trades.reduce(\n      (validTrades: TradeRecord[], trade: TradeRecord) => {\n        if (!this.validator.isValid(trade)) {\n          /* handle invalid data */\n        }\n\n        return [...validTrades, trade];\n      },\n      []\n    );\n\n    this.storage.persist(validTrades);\n  }\n}\n")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"essence of SRP is to combine code that changes for 1 reason and separate the code that changes for another",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the principle suggests that we draw boundaries between modules so that a change in business rules affects as few modules as possible, ideally one"))),(0,r.kt)("li",{parentName:"ul"},"benefits of SRP",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"encourages the creation of modules that change for only 1 reason",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it helps to limit the impact of these changes and control the complexity of the program"))),(0,r.kt)("li",{parentName:"ul"},"the principle allows you to reduce the amount of code (modules) that needs to be changed when changing business rules")))),(0,r.kt)("h3",{id:"when-to-use"},"When to use?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Your module is constantly changing and the requirements for changes come from different roles in your project"),(0,r.kt)("li",{parentName:"ul"},"The actions in the module do not correlate with each other"),(0,r.kt)("li",{parentName:"ul"},"The logic in the module is too complex to understand and / or test")),(0,r.kt)("h3",{id:"how-to-apply"},"How to apply?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Combine things that change for one reason. Separate things that change for different reasons"),(0,r.kt)("li",{parentName:"ul"},"Isolate changes, separate the component parts of the module logically"),(0,r.kt)("li",{parentName:"ul"},"Reduce dependencies"),(0,r.kt)("li",{parentName:"ul"},"Apply the principle only when it matters. Do not introduce extra dependencies")))}d.isMDXComponent=!0},19567:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/srp-875f54480a03e336423ce9a263a68783.jpg"}}]);