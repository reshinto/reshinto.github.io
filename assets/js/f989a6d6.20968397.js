"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[7883],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>P});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=s(n),P=o,d=u["".concat(p,".").concat(P)]||u[P]||f[P]||c;return n?r.createElement(d,a(a({ref:t},l),{},{components:n})):r.createElement(d,a({ref:t},l))}));function P(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var s=2;s<c;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},52149:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>f,frontMatter:()=>c,metadata:()=>i,toc:()=>s});var r=n(83117),o=(n(67294),n(3905));const c={},a="Example 2",i={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Factory/swift/example2",id:"interviewPrep/designPatterns/Creational_patterns/Factory/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Factory/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Factory/swift",slug:"/interviewPrep/designPatterns/Creational_patterns/Factory/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Factory/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/typescript/"}},p={},s=[],l={toc:s};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"example-2"},"Example 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'import XCTest\n\nclass FactoryMethodRealWorld: XCTestCase {\n\n    func testFactoryMethodRealWorld() {\n\n        let info = "Very important info of the presentation"\n\n        let clientCode = ClientCode()\n\n        /// Present info over WiFi\n        clientCode.present(info: info, with: WifiFactory())\n\n        /// Present info over Bluetooth\n        clientCode.present(info: info, with: BluetoothFactory())\n    }\n}\n\nprotocol ProjectorFactory {\n\n    func createProjector() -> Projector\n\n    func syncedProjector(with projector: Projector) -> Projector\n}\n\nextension ProjectorFactory {\n\n    /// Base implementation of ProjectorFactory\n\n    func syncedProjector(with projector: Projector) -> Projector {\n\n        /// Every instance creates an own projector\n        let newProjector = createProjector()\n\n        /// sync projectors\n        newProjector.sync(with: projector)\n\n        return newProjector\n    }\n}\n\nclass WifiFactory: ProjectorFactory {\n\n    func createProjector() -> Projector {\n        return WifiProjector()\n    }\n}\n\nclass BluetoothFactory: ProjectorFactory {\n\n    func createProjector() -> Projector {\n        return BluetoothProjector()\n    }\n}\n\nprotocol Projector {\n\n    /// Abstract projector interface\n\n    var currentPage: Int { get }\n\n    func present(info: String)\n\n    func sync(with projector: Projector)\n\n    func update(with page: Int)\n}\n\nextension Projector {\n\n    /// Base implementation of Projector methods\n\n    func sync(with projector: Projector) {\n        projector.update(with: currentPage)\n    }\n}\n\nclass WifiProjector: Projector {\n\n    var currentPage = 0\n\n    func present(info: String) {\n        print("Info is presented over Wifi: \\(info)")\n    }\n\n    func update(with page: Int) {\n        /// ... scroll page via WiFi connection\n        /// ...\n        currentPage = page\n    }\n}\n\nclass BluetoothProjector: Projector {\n\n    var currentPage = 0\n\n    func present(info: String) {\n        print("Info is presented over Bluetooth: \\(info)")\n    }\n\n    func update(with page: Int) {\n        /// ... scroll page via Bluetooth connection\n        /// ...\n        currentPage = page\n    }\n}\n\nprivate class ClientCode {\n\n    private var currentProjector: Projector?\n\n    func present(info: String, with factory: ProjectorFactory) {\n\n        /// Check wheater a client code already present smth...\n\n        guard let projector = currentProjector else {\n\n            /// \'currentProjector\' variable is nil. Create a new projector and\n            /// start presentation.\n\n            let projector = factory.createProjector()\n            projector.present(info: info)\n            self.currentProjector = projector\n            return\n        }\n\n        /// Client code already has a projector. Let\'s sync pages of the old\n        /// projector with a new one.\n\n        self.currentProjector = factory.syncedProjector(with: projector)\n        self.currentProjector?.present(info: info)\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Info is presented over Wifi: Very important info of the presentation\nInfo is presented over Bluetooth: Very important info of the presentation\n")))}f.isMDXComponent=!0}}]);