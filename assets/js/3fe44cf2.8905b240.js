"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[55238],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(t),h=a,f=u["".concat(s,".").concat(h)]||u[h]||p[h]||l;return t?r.createElement(f,i(i({ref:n},d),{},{components:t})):r.createElement(f,i({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},66868:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var r=t(83117),a=(t(67294),t(3905));const l={},i="JavaScript Example",o={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/javascript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/javascript/readme",title:"JavaScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/javascript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/javascript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/javascript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/javascript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/javascript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/java/"},next:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/python/"}},s={},c=[],d={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"javascript-example"},"JavaScript Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * The default chaining behavior can be implemented inside a base handler class.\n */\nclass HandlerAbstract {\n  #nextHandler;\n\n  setNext(handler) {\n    this.#nextHandler = handler;\n    // Returning a handler from here will let us link handlers in a\n    // convenient way like this:\n    // monkey.setNext(squirrel).setNext(dog);\n    return handler;\n  }\n\n  handle(request) {\n    if (this.#nextHandler) {\n      return this.#nextHandler.handle(request);\n    }\n    return null;\n  }\n}\n\nmodule.exports = HandlerAbstract;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const HandlerAbstract = require("./HandlerAbstract");\n\n/**\n * All Concrete Handlers either handle a request or pass it to the next handler\n * in the chain.\n */\nclass DogHandler extends HandlerAbstract {\n  handle(request) {\n    if (request === "MeatBall") {\n      return `Dog: I\'ll eat the ${request}.`;\n    }\n    return super.handle(request);\n  }\n}\n\nmodule.exports = DogHandler;\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const HandlerAbstract = require("./HandlerAbstract");\n\n/**\n * All Concrete Handlers either handle a request or pass it to the next handler\n * in the chain.\n */\nclass MonkeyHandler extends HandlerAbstract {\n  handle(request) {\n    if (request === "Banana") {\n      return `Monkey: I\'ll eat the ${request}.`;\n    }\n    return super.handle(request);\n  }\n}\n\nmodule.exports = MonkeyHandler;\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const HandlerAbstract = require("./HandlerAbstract");\n\n/**\n * All Concrete Handlers either handle a request or pass it to the next handler\n * in the chain.\n */\nclass SquirrelHandler extends HandlerAbstract {\n  handle(request) {\n    if (request === "Nut") {\n      return `Squirrel: I\'ll eat the ${request}.`;\n    }\n    return super.handle(request);\n  }\n}\n\nmodule.exports = SquirrelHandler;\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const DogHandler = require("./DogHandler");\nconst MonkeyHandler = require("./MonkeyHandler");\nconst SquirrelHandler = require("./SquirrelHandler");\n\n/**\n * The client code is usually suited to work with a single handler. In most\n * cases, it is not even aware that the handler is part of a chain.\n */\nfunction clientCode(handler) {\n  const foods = ["Nut", "Banana", "Cup of coffee"];\n\n  for (const food of foods) {\n    console.log(`Client: Who wants a ${food}?`);\n\n    const result = handler.handle(food);\n    if (result) {\n      console.log(`  ${result}`);\n    } else {\n      console.log(`  ${food} was left untouched.`);\n    }\n  }\n}\n\n/**\n * The other part of the client code constructs the actual chain.\n */\nconst monkey = new MonkeyHandler();\nconst squirrel = new SquirrelHandler();\nconst dog = new DogHandler();\n\nmonkey.setNext(squirrel).setNext(dog);\n\n/**\n * The client should be able to send a request to any handler, not just the\n * first one in the chain.\n */\nconsole.log("Chain: Monkey > Squirrel > Dog\\n");\nclientCode(monkey);\nconsole.log("");\n\nconsole.log("Subchain: Squirrel > Dog\\n");\nclientCode(squirrel);\n')))}p.isMDXComponent=!0}}]);