"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[1021],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?i.createElement(f,a(a({ref:t},c),{},{components:n})):i.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var p=2;p<l;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5788:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const l={},a="Open Closed Principle",o={unversionedId:"interviewPrep/designPatterns/SOLID_design_principles/OpenClosedPrinciple/readme",id:"interviewPrep/designPatterns/SOLID_design_principles/OpenClosedPrinciple/readme",title:"Open Closed Principle",description:"- Software entities (classes, modules, functions, etc.) should be open for extension",source:"@site/docs/interviewPrep/designPatterns/SOLID_design_principles/OpenClosedPrinciple/readme.md",sourceDirName:"interviewPrep/designPatterns/SOLID_design_principles/OpenClosedPrinciple",slug:"/interviewPrep/designPatterns/SOLID_design_principles/OpenClosedPrinciple/",permalink:"/docs/interviewPrep/designPatterns/SOLID_design_principles/OpenClosedPrinciple/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/SOLID_design_principles/OpenClosedPrinciple/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Liskov Substitution Principle",permalink:"/docs/interviewPrep/designPatterns/SOLID_design_principles/LiskovSubstitutionPrinciple/"},next:{title:"Single Responsibility Principle",permalink:"/docs/interviewPrep/designPatterns/SOLID_design_principles/SingleResponsibilityPrinciple/"}},s={},p=[{value:"2 types",id:"2-types",level:2},{value:"Meyer&#39;s open-closed principle",id:"meyers-open-closed-principle",level:3},{value:"Polymorphic open-closed principle",id:"polymorphic-open-closed-principle",level:3},{value:"Example that violates the Open-Closed Principle",id:"example-that-violates-the-open-closed-principle",level:2},{value:"Example that passes the Open-Closed Principle",id:"example-that-passes-the-open-closed-principle",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"open-closed-principle"},"Open Closed Principle"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Software entities (classes, modules, functions, etc.) should be open for extension",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"but closed for modification"))),(0,r.kt)("li",{parentName:"ul"},"the entity can allow its behavior to be extended without modifying its source code")),(0,r.kt)("h2",{id:"2-types"},"2 types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Both ways use generalizations (for instance, inheritance or delegate functions) to resolve the apparent dilemma, but the goals, techniques, and results are different")),(0,r.kt)("h3",{id:"meyers-open-closed-principle"},"Meyer's open-closed principle"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A module is open if it is still available for extension",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g.: it should be possible to add fields to the data structures it contains, or new elements to the set of functions it performs"))),(0,r.kt)("li",{parentName:"ul"},"A module is closed if is available for use by other modules",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This assumes that the module has been given a well-defined, stable description (the interface in the sense of information hiding)"))),(0,r.kt)("li",{parentName:"ul"},"A class is closed, since it may be compiled, stored in a library, baselined, and used by client classes",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"But it is also open, since any new class may use it as parent, adding new features"),(0,r.kt)("li",{parentName:"ul"},"When a descendant class is defined, there is no need to change the original or to disturb its clients")))),(0,r.kt)("h3",{id:"polymorphic-open-closed-principle"},"Polymorphic open-closed principle"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"open-closed principle refer to the use of abstracted interfaces",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"where the implementations can be changed and multiple implementations could be created and polymorphically substituted for each other"))),(0,r.kt)("li",{parentName:"ul"},"this advocates inheritance from abstract base classes",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Interface specifications can be reused through inheritance but implementation need not be"),(0,r.kt)("li",{parentName:"ul"},"The existing interface is closed to modifications and new implementations must, at a minimum, implement that interface")))),(0,r.kt)("h2",{id:"example-that-violates-the-open-closed-principle"},"Example that violates the Open-Closed Principle"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"refer to ",(0,r.kt)("inlineCode",{parentName:"li"},"violateOpenClosedPrinciple.js")),(0,r.kt)("li",{parentName:"ul"},"potential issues:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if later, you want to add a new option or new question type to the quiz",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g.: a range of values type",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"refer to ",(0,r.kt)("inlineCode",{parentName:"li"},"violateOpenClosedPrincipleExtended.js"))))))))),(0,r.kt)("h2",{id:"example-that-passes-the-open-closed-principle"},"Example that passes the Open-Closed Principle"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"refer to ",(0,r.kt)("inlineCode",{parentName:"li"},"passOpenClosedPrinciple.js"))))}d.isMDXComponent=!0}}]);