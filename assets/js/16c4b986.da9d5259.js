"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[31906],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,f=u["".concat(l,".").concat(d)]||u[d]||g[d]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},79206:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(83117),a=(n(67294),n(3905));const o={},i="Swift Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/readme",title:"Swift Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/python/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/example2"}},l={},c=[],p={toc:c};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"swift-example"},"Swift Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'/// Strategy Design Pattern\n///\n/// Intent: Lets you define a family of algorithms, put each of them into a\n/// separate class, and make their objects interchangeable.\n\nimport XCTest\n\n/// The Context defines the interface of interest to clients.\nclass Context {\n\n    /// The Context maintains a reference to one of the Strategy objects. The\n    /// Context does not know the concrete class of a strategy. It should work\n    /// with all strategies via the Strategy interface.\n    private var strategy: Strategy\n\n    /// Usually, the Context accepts a strategy through the constructor, but\n    /// also provides a setter to change it at runtime.\n    init(strategy: Strategy) {\n        self.strategy = strategy\n    }\n\n    /// Usually, the Context allows replacing a Strategy object at runtime.\n    func update(strategy: Strategy) {\n        self.strategy = strategy\n    }\n\n    /// The Context delegates some work to the Strategy object instead of\n    /// implementing multiple versions of the algorithm on its own.\n    func doSomeBusinessLogic() {\n        print("Context: Sorting data using the strategy (not sure how it\'ll do it)\\n")\n\n        let result = strategy.doAlgorithm(["a", "b", "c", "d", "e"])\n        print(result.joined(separator: ","))\n    }\n}\n\n/// The Strategy interface declares operations common to all supported versions\n/// of some algorithm.\n///\n/// The Context uses this interface to call the algorithm defined by Concrete\n/// Strategies.\nprotocol Strategy {\n\n    func doAlgorithm<T: Comparable>(_ data: [T]) -> [T]\n}\n\n/// Concrete Strategies implement the algorithm while following the base\n/// Strategy interface. The interface makes them interchangeable in the Context.\nclass ConcreteStrategyA: Strategy {\n\n    func doAlgorithm<T: Comparable>(_ data: [T]) -> [T] {\n        return data.sorted()\n    }\n}\n\nclass ConcreteStrategyB: Strategy {\n\n    func doAlgorithm<T: Comparable>(_ data: [T]) -> [T] {\n        return data.sorted(by: >)\n    }\n}\n\n/// Let\'s see how it all works together.\nclass StrategyConceptual: XCTestCase {\n\n    func test() {\n\n        /// The client code picks a concrete strategy and passes it to the\n        /// context. The client should be aware of the differences between\n        /// strategies in order to make the right choice.\n\n        let context = Context(strategy: ConcreteStrategyA())\n        print("Client: Strategy is set to normal sorting.\\n")\n        context.doSomeBusinessLogic()\n\n        print("\\nClient: Strategy is set to reverse sorting.\\n")\n        context.update(strategy: ConcreteStrategyB())\n        context.doSomeBusinessLogic()\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Client: Strategy is set to normal sorting.\n\nContext: Sorting data using the strategy (not sure how it'll do it)\n\na,b,c,d,e\n\nClient: Strategy is set to reverse sorting.\n\nContext: Sorting data using the strategy (not sure how it'll do it)\n\ne,d,c,b,a\n")))}g.isMDXComponent=!0}}]);