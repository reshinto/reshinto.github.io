"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[84636],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=u(t),f=o,y=m["".concat(s,".").concat(f)]||m[f]||p[f]||i;return t?r.createElement(y,a(a({ref:n},l),{},{components:t})):r.createElement(y,a({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},25552:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var r=t(83117),o=(t(67294),t(3905));const i={},a="Non-Constructible Change",c={unversionedId:"interviewPrep/codingTests/easy/arrays/non-constructibleChange",id:"interviewPrep/codingTests/easy/arrays/non-constructibleChange",title:"Non-Constructible Change",description:"Given an array of positive integers representing the values of coins in your",source:"@site/docs/interviewPrep/codingTests/easy/arrays/non-constructibleChange.md",sourceDirName:"interviewPrep/codingTests/easy/arrays",slug:"/interviewPrep/codingTests/easy/arrays/non-constructibleChange",permalink:"/docs/interviewPrep/codingTests/easy/arrays/non-constructibleChange",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/codingTests/easy/arrays/non-constructibleChange.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Threads",permalink:"/docs/interviewPrep/basics/threads"},next:{title:"Sorted Squared Array",permalink:"/docs/interviewPrep/codingTests/easy/arrays/sortedSquaredArray"}},s={},u=[],l={toc:u};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"non-constructible-change"},"Non-Constructible Change"),(0,o.kt)("p",null,"Given an array of positive integers representing the values of coins in your\npossession, write a function that returns the minimum amount of change (the\nminimum sum of money) that you cannot create. The given coins can have\nany positive integer value and aren't necessarily unique (i.e., you can have\nmultiple coins of the same value)."),(0,o.kt)("p",null,"For example, if you're given ",(0,o.kt)("inlineCode",{parentName:"p"},"coins = [1, 2, 5]"),", the minimum\namount of change that you can't create is 4. If you're given no\ncoins, the minimum amount of change that you can't create is 1"),(0,o.kt)("p",null,"Sample Input\n",(0,o.kt)("inlineCode",{parentName:"p"},"coins = [5, 7, 1, 1, 2, 3, 22]"),"\nSample Output\n20"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def nonConstructibleChange(coins):\n  # Write your code here.\n  coins.sort()\n  if 1 not in coins:\n    return 1\n  min = 0\n  for i in range(len(coins)):\n    min += coins[i]\n    if i < len(coins) - 1:\n      if coins[i + 1] > min + 1:\n        return min + 1\n    else:\n      return min + 1\n    return 1\n\n\ndef nonConstructibleChange(coins):\n  # Write your code here.\n  coins.sort()\n\n  min = 0\n  for coin in coins:\n    if coin > min + 1:\n      return min + 1\n    min += coin\n  return min + 1\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"function nonConstructibleChange(coins) {\n  // Write your code here.\n  coins.sort((a, b) => a - b);\n  let min = 0;\n  for (let coin of coins) {\n    if (coin > min + 1) {\n      return min + 1;\n    }\n    min += coin;\n  }\n  return min + 1;\n}\n")))}p.isMDXComponent=!0}}]);