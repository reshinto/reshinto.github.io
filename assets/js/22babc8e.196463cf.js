"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[5551],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),g=i,f=m["".concat(s,".").concat(g)]||m[g]||p[g]||r;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81750:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(87462),i=(n(67294),n(3905));const r={},o="Functional Language Possibilities",l={unversionedId:"basics/programmingParadigm/FP/functionalLanguagePossibilities",id:"basics/programmingParadigm/FP/functionalLanguagePossibilities",title:"Functional Language Possibilities",description:"- to be a functional language, it is not enough to just follow functional principles, language itself has to support some functional possibilities",source:"@site/docs/basics/programmingParadigm/FP/functionalLanguagePossibilities.md",sourceDirName:"basics/programmingParadigm/FP",slug:"/basics/programmingParadigm/FP/functionalLanguagePossibilities",permalink:"/docs/basics/programmingParadigm/FP/functionalLanguagePossibilities",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/basics/programmingParadigm/FP/functionalLanguagePossibilities.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Functional Programming",permalink:"/docs/basics/programmingParadigm/FP/"},next:{title:"Functional Programming in JavaScript",permalink:"/docs/basics/programmingParadigm/FP/functionalProgrammingInJS"}},s={},u=[{value:"When to use functional approach",id:"when-to-use-functional-approach",level:3},{value:"First Class Functions",id:"first-class-functions",level:2},{value:"Higher Order Function",id:"higher-order-function",level:3},{value:"Currying",id:"currying",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"functional-language-possibilities"},"Functional Language Possibilities"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"to be a functional language, it is not enough to just follow functional principles, language itself has to support some functional possibilities"),(0,i.kt)("li",{parentName:"ul"},"a few examples of functional languages: Scala, Clojure, Lisp, Haskell")),(0,i.kt)("h3",{id:"when-to-use-functional-approach"},"When to use functional approach"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"in projects where a lot of math and concurrency is required"),(0,i.kt)("li",{parentName:"ul"},"example",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"digital signal processing"),(0,i.kt)("li",{parentName:"ul"},"digital image processing"),(0,i.kt)("li",{parentName:"ul"},"data manipulation"),(0,i.kt)("li",{parentName:"ul"},"supply chain projects"),(0,i.kt)("li",{parentName:"ul"},"agricultural projects")))),(0,i.kt)("h2",{id:"first-class-functions"},"First Class Functions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"a programming language supports first-class functions if it treats functions as first-class citizens")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"language supports first-class functions if it"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"can pass functions as parameters to other functions"),(0,i.kt)("li",{parentName:"ul"},"can return them as values from other functions"),(0,i.kt)("li",{parentName:"ul"},"can assign them to variables or can store them in data structures"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"storing function in object data structure example"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const example = {\n  name: "John",\n  getName() {\n    return console.log(this.name);\n  },\n};\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"the language must implement the feature passing function as a parameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"It is not a functional concept, and it is a language possibility"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"By using this feature we can follow another functional concept such as higher order function (HOF)")))),(0,i.kt)("h3",{id:"higher-order-function"},"Higher Order Function"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"it is any function that takes a function as an argument, returns a function, or both")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"it is often used to:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Abstract or isolate actions, effects, or async flow control using callback functions, promises, monads, etc."),(0,i.kt)("li",{parentName:"ul"},"Create utilities that can act on a wide variety of data types"),(0,i.kt)("li",{parentName:"ul"},"Partially apply a function to its arguments or create a curried function for the purpose of reuse or function composition"),(0,i.kt)("li",{parentName:"ul"},"Take a list of functions and return some composition of those input functions"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"example"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const consoleValue = (value) => console.log(value); // (1)\nconst logPowerOfTwo = (logFn, value) => logFn(value * value); // (2)\n\nlogPowerOfTwo(consoleValue, 5); // 25 (3)\n")))),(0,i.kt)("h2",{id:"currying"},"Currying"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"it is a technique that converts function with more than one parameter into the chain of functions with one argument")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In a math way, it is a process of transforming function with multiple arities in functions with less (usually one) arity"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Arity: number of function's arguments"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"it is not something that you have to use every time, it is something that is useful in certain situations"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For example, if you need to call the same function with some of the same parameters a lot"),(0,i.kt)("li",{parentName:"ul"},"This function can be divided into smaller ones and some of them can be called when needed"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For example, currying a function foo that takes three arguments creates three functions"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"usual syntax"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const foo = (a, b, c) => a + b + c;\n\nfoo(1, 2, 3); // 6\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"currying version 1"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const curryingSum = (a) => (b) => (c) => a + b + c;\n\ncurryingSum(1)(2)(3); // 6\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"currying version 2"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const curryingSum = function (a) {\n  return function (b) {\n    return function (c) {\n      return a + b + c;\n    };\n  };\n};\n\ncurryingSum(1)(2)(3); // 6\n")))))))}p.isMDXComponent=!0}}]);