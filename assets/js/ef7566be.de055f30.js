"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[2516],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),g=o,f=u["".concat(c,".").concat(g)]||u[g]||d[g]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},92815:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(83117),o=(t(67294),t(3905));const a={},i="Example 2",s={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Bridge/swift/example2",id:"interviewPrep/designPatterns/Structural_patterns/Bridge/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Bridge/swift",slug:"/interviewPrep/designPatterns/Structural_patterns/Bridge/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/typescript/"}},c={},l=[],p={toc:l};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"example-2"},"Example 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'import XCTest\n\nprivate class BridgeRealWorld: XCTestCase {\n\n    func testBridgeRealWorld() {\n\n        print("Client: Pushing Photo View Controller...")\n        push(PhotoViewController())\n\n        print()\n\n        print("Client: Pushing Feed View Controller...")\n        push(FeedViewController())\n    }\n\n    func push(_ container: SharingSupportable) {\n\n        let instagram = InstagramSharingService()\n        let facebook = FaceBookSharingService()\n\n        container.accept(service: instagram)\n        container.update(content: foodModel)\n\n        container.accept(service: facebook)\n        container.update(content: foodModel)\n    }\n\n    var foodModel: Content {\n        return FoodDomainModel(title: "This food is so various and delicious!",\n                               images: [UIImage(), UIImage()],\n                               calories: 47)\n    }\n}\n\nprivate protocol SharingSupportable {\n\n    /// Abstraction\n    func accept(service: SharingService)\n\n    func update(content: Content)\n}\n\nclass BaseViewController: UIViewController, SharingSupportable {\n\n    fileprivate var shareService: SharingService?\n\n    func update(content: Content) {\n        /// ...updating UI and showing a content...\n        /// ...\n        /// ... then, a user will choose a content and trigger an event\n        print("\\(description): User selected a \\(content) to share")\n        /// ...\n        shareService?.share(content: content)\n    }\n\n    func accept(service: SharingService) {\n        shareService = service\n    }\n}\n\nclass PhotoViewController: BaseViewController {\n\n    /// Custom UI and features\n\n    override var description: String {\n        return "PhotoViewController"\n    }\n}\n\nclass FeedViewController: BaseViewController {\n\n    /// Custom UI and features\n\n    override var description: String {\n        return "FeedViewController"\n    }\n}\n\nprotocol SharingService {\n\n    /// Implementation\n    func share(content: Content)\n}\n\nclass FaceBookSharingService: SharingService {\n\n    func share(content: Content) {\n\n        /// Use FaceBook API to share a content\n        print("Service: \\(content) was posted to the Facebook")\n    }\n}\n\nclass InstagramSharingService: SharingService {\n\n    func share(content: Content) {\n\n        /// Use Instagram API to share a content\n        print("Service: \\(content) was posted to the Instagram", terminator: "\\n\\n")\n    }\n}\n\nprotocol Content: CustomStringConvertible {\n\n    var title: String { get }\n    var images: [UIImage] { get }\n}\n\nstruct FoodDomainModel: Content {\n\n    var title: String\n    var images: [UIImage]\n    var calories: Int\n\n    var description: String {\n        return "Food Model"\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Client: Pushing Photo View Controller...\nPhotoViewController: User selected a Food Model to share\nService: Food Model was posted to the Instagram\n\nPhotoViewController: User selected a Food Model to share\nService: Food Model was posted to the Facebook\n\nClient: Pushing Feed View Controller...\nFeedViewController: User selected a Food Model to share\nService: Food Model was posted to the Instagram\n\nFeedViewController: User selected a Food Model to share\nService: Food Model was posted to the Facebook\n")))}d.isMDXComponent=!0}}]);