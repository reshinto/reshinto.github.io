"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[46743],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var r=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function n(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=r.createContext({}),u=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):n(n({},t),e)),a},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=u(a),m=i,b=h["".concat(o,".").concat(m)]||h[m]||p[m]||s;return a?r.createElement(b,n(n({ref:t},c),{},{components:a})):r.createElement(b,n({ref:t},c))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=a.length,n=new Array(s);n[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,n[1]=l;for(var u=2;u<s;u++)n[u]=a[u];return r.createElement.apply(null,n)}return r.createElement.apply(null,a)}h.displayName="MDXCreateElement"},25718:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>n,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var r=a(83117),i=(a(67294),a(3905));const s={},n="Observer",l={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Observer/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Observer/readme",title:"Observer",description:"- it lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they're observing",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Observer",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Observer/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/typescript/"},next:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/cPlusPlus/"}},o={},u=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2},{value:"Analogy",id:"analogy",level:2},{value:"Structure",id:"structure",level:2},{value:"When to use",id:"when-to-use",level:2},{value:"How to implement",id:"how-to-implement",level:2},{value:"Pros &amp; Cons",id:"pros--cons",level:2},{value:"Pros",id:"pros",level:3},{value:"Cons",id:"cons",level:3}],c={toc:u};function p(e){let{components:t,...s}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"observer"},"Observer"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"it lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they're observing")),(0,i.kt)("h2",{id:"problem"},"Problem"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if there are 2 types of objects: ",(0,i.kt)("inlineCode",{parentName:"li"},"Customer")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Store"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the customer is interested in a particular brand of product (e.g. a new iphone model), which would become available soon"))),(0,i.kt)("li",{parentName:"ul"},"the customer could visit the store every day and check the product availability",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"but while the product is still en route, most of these trips would be pointless"))),(0,i.kt)("li",{parentName:"ul"},"the store could send emails (might be considered spam) to all customers each time a new product becomes available",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"this would save some customers from endless trips to the store"),(0,i.kt)("li",{parentName:"ul"},"at the same time, it's upset other customers who aren't interested in new products"))),(0,i.kt)("li",{parentName:"ul"},"this arises in a conflict",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"either the customer wastes time checking the product availability"),(0,i.kt)("li",{parentName:"ul"},"or the store wastes resources notifying the wrong customers")))),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the object that has a state is called subject",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"since it's also going to notify other objects about the state change, it can be called publisher"),(0,i.kt)("li",{parentName:"ul"},"all other objects that went to track changes to the publisher's state are called subscribers"))),(0,i.kt)("li",{parentName:"ul"},"the observer pattern suggests that adding a subscription mechanism to the publisher class",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"allowing individual objects to subscribe or unsubscribe from a stream of events coming from that publisher"),(0,i.kt)("li",{parentName:"ul"},"this mechanism consists of",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"an array field for storing a list of references to subscriber objects"),(0,i.kt)("li",{parentName:"ol"},"several public methods which allows adding subscribers to and removing them from that list"))))),(0,i.kt)("li",{parentName:"ul"},"whenever an important event happens to the publisher",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"it goes over to its subscribers and calls the specific notification method on their objects"))),(0,i.kt)("li",{parentName:"ul"},"real apps might have dozens of different subscriber classes that are interested in tracking events of the same publisher class",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"should not couple the publisher to all of those subscriber classes"),(0,i.kt)("li",{parentName:"ul"},"also might not know about some of the subscriber classes beforehand if the publisher class is supposed to be used by other people"))),(0,i.kt)("li",{parentName:"ul"},"this is important that all subscribers implement the same interface and that the publisher communicates with them only via that interface",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"this interface should declare the notification method along with a set of parameters that the publisher can use to pass some contextual data along with the notification"))),(0,i.kt)("li",{parentName:"ul"},"if the app has several different types of publishers and you want to make the subscribers compatible with all of them",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"can make all publishers follow the same interface"),(0,i.kt)("li",{parentName:"ul"},"this interface would only need to describe a few subscription methods"),(0,i.kt)("li",{parentName:"ul"},"the interface would allow subscribers to observer publishers' status without coupling to their concrete classes")))),(0,i.kt)("h2",{id:"analogy"},"Analogy"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if you subscribe to a newspaper or magazine",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"you no longer need to go to the store to check for the next available issue"),(0,i.kt)("li",{parentName:"ul"},"instead the publisher sends the new issues directly to your mailbox right after publication or even in advance"))),(0,i.kt)("li",{parentName:"ul"},"the publisher maintains a list of subscribers and knows which magazines they're interested in",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"subscribers can leave the list at any time when they wish to stop the publisher sending new magazine issues to them")))),(0,i.kt)("h2",{id:"structure"},"Structure"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Observer",src:a(39782).Z,width:"1262",height:"680"})),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The Publisher issues events of interest to other objects."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"These events occur when the publisher changes its state or executes some behaviors. Publishers contain a subscription infrastructure that lets new subscribers join and current subscribers leave the list."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"When a new event happens, the publisher goes over the subscription list and calls the notification method declared in the subscriber interface on each subscriber object.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The Subscriber interface declares the notification interface."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In most cases, it consists of a single update method."),(0,i.kt)("li",{parentName:"ul"},"The method may have several parameters that let the publisher pass some event details along with the update."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Concrete Subscribers perform some actions in response to notifications issued by the publisher."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"All of these classes must implement the same interface so the publisher isn\u2019t coupled to concrete classes."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Usually, subscribers need some contextual information to handle the update correctly."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For this reason, publishers often pass some context data as arguments of the notification method."),(0,i.kt)("li",{parentName:"ul"},"The publisher can pass itself as an argument, letting subscriber fetch any required data directly."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The Client creates publisher and subscriber objects separately and then registers subscribers for publisher updates."))),(0,i.kt)("h2",{id:"when-to-use"},"When to use"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use the Observer pattern when changes to the state of one object may require changing other objects, and the actual set of objects is unknown beforehand or changes dynamically",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"You can often experience this problem when working with classes of the graphical user interface",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"e.g.: you created custom button classes, and you want to let the clients hook some custom code to your buttons so that it fires whenever a user presses a button"))),(0,i.kt)("li",{parentName:"ul"},"The Observer pattern lets any object that implements the subscriber interface subscribe for event notifications in publisher objects",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"You can add the subscription mechanism to your buttons, letting the clients hook up their custom code via custom subscriber classes"))))),(0,i.kt)("li",{parentName:"ul"},"Use the pattern when some objects in your app must observe others, but only for a limited time or in specific cases",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The subscription list is dynamic, so subscribers can join or leave the list whenever they need to")))),(0,i.kt)("h2",{id:"how-to-implement"},"How to implement"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Look over your business logic and try to break it down into two parts: the core functionality, independent from other code, will act as the publisher; the rest will turn into a set of subscriber classes"),(0,i.kt)("li",{parentName:"ol"},"Declare the subscriber interface",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"At a bare minimum, it should declare a single update method"))),(0,i.kt)("li",{parentName:"ol"},"Declare the publisher interface and describe a pair of methods for adding a subscriber object to and removing it from the list",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Remember that publishers must work with subscribers only via the subscriber interface"))),(0,i.kt)("li",{parentName:"ol"},"Decide where to put the actual subscription list and the implementation of subscription methods",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Usually, this code looks the same for all types of publishers, so the obvious place to put it is in an abstract class derived directly from the publisher interface"),(0,i.kt)("li",{parentName:"ul"},"Concrete publishers extend that class, inheriting the subscription behavior"),(0,i.kt)("li",{parentName:"ul"},"However, if you\u2019re applying the pattern to an existing class hierarchy, consider an approach based on composition: put the subscription logic into a separate object, and make all real publishers use it"))),(0,i.kt)("li",{parentName:"ol"},"Create concrete publisher classes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Each time something important happens inside a publisher, it must notify all its subscribers"))),(0,i.kt)("li",{parentName:"ol"},"Implement the update notification methods in concrete subscriber classes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Most subscribers would need some context data about the event"),(0,i.kt)("li",{parentName:"ul"},"It can be passed as an argument of the notification method"),(0,i.kt)("li",{parentName:"ul"},"But there\u2019s another option. Upon receiving a notification, the subscriber can fetch any data directly from the notification"),(0,i.kt)("li",{parentName:"ul"},"In this case, the publisher must pass itself via the update method"),(0,i.kt)("li",{parentName:"ul"},"The less flexible option is to link a publisher to the subscriber permanently via the constructor"))),(0,i.kt)("li",{parentName:"ol"},"The client must create all necessary subscribers and register them with proper publishers")),(0,i.kt)("h2",{id:"pros--cons"},"Pros & Cons"),(0,i.kt)("h3",{id:"pros"},"Pros"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open/Closed Principle",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"can introduce new subscriber classes without having to change the publisher\u2019s code (and vice versa if there\u2019s a publisher interface)"))),(0,i.kt)("li",{parentName:"ul"},"can establish relations between objects at runtime")),(0,i.kt)("h3",{id:"cons"},"Cons"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Subscribers are notified in random order")))}p.isMDXComponent=!0},39782:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/observer-89d004eba40da39f48a0a09607c033cb.png"}}]);