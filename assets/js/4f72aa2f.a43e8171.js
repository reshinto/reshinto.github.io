"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[74320],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),a=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=a(e.components);return i.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},_=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),_=a(t),d=o,f=_["".concat(l,".").concat(d)]||_[d]||c[d]||r;return t?i.createElement(f,s(s({ref:n},u),{},{components:t})):i.createElement(f,s({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=_;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,s[1]=p;for(var a=2;a<r;a++)s[a]=t[a];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}_.displayName="MDXCreateElement"},1406:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>p,toc:()=>a});var i=t(83117),o=(t(67294),t(3905));const r={},s="Python Example",p={unversionedId:"interviewPrep/design_principles/SOLID/OpenClosedPrinciple/python/readme",id:"interviewPrep/design_principles/SOLID/OpenClosedPrinciple/python/readme",title:"Python Example",description:"Violate OCP",source:"@site/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/python/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/OpenClosedPrinciple/python",slug:"/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/python/",permalink:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/javascript/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/typescript/"}},l={},a=[{value:"Violate OCP",id:"violate-ocp",level:2},{value:"Violate OCP Extended",id:"violate-ocp-extended",level:2},{value:"Pass OCP",id:"pass-ocp",level:2}],u={toc:a};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"python-example"},"Python Example"),(0,o.kt)("h2",{id:"violate-ocp"},"Violate OCP"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"potential issues:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"if later, you want to add a new option or new question type to the quiz",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"e.g.: a range of values type"))),(0,o.kt)("li",{parentName:"ul"},"refer to ",(0,o.kt)("strong",{parentName:"li"},"Violate OCP Extended"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def print_quiz(questions):\n    for question in questions:\n        print(question["description"])\n        if question["type"] == "boolean":\n            print("1. True")\n            print("2.False")\n        elif question["type"] == "multipleChoice":\n            for index, option in enumerate(question["options"]):\n                print(f"{index + 1}. {option}")\n        elif question["type"] == "text":\n            print("Answer: _______________")\n        else:\n            print("")\n\n\nquestions = [\n    {\n        "type": "boolean",\n        "description": "This video is useful.",\n    },\n    {\n        "type": "multipleChoice",\n        "description": "What is your favorite language?",\n        "options": ["CSS", "HTML", "JS", "Python"],\n    },\n    {\n        "type": "text",\n        "description": "Describe your favorite JS feature",\n    },\n]\n\nprint_quiz(questions)\n')),(0,o.kt)("h2",{id:"violate-ocp-extended"},"Violate OCP Extended"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def print_quiz(questions):\n    # this allows us to extend new types, which passes the open portion of the open-closed principle\n    # when we add new features, it automatically extends the new questions and works\n    # thus, modification of the open portion is not required\n    for question in questions:\n        print(question["description"])\n        if question["type"] == "boolean":\n            print("1. True")\n            print("2.False")\n        elif question["type"] == "multipleChoice":\n            for index, option in enumerate(question["options"]):\n                print(f"{index + 1}. {option}")\n        elif question["type"] == "text":\n            print("Answer: _______________")\n        # this violates the closed portion of the open-closed principle\n        # this function should be closed and not allowed for modifications\n        # it should just work when new features are extended\n        elif question["type"] == "range":\n            print("Minimum: ______________")\n            print("Maximum: ______________")\n        else:\n            print("")\n\n\nquestions = [\n    {\n        "type": "boolean",\n        "description": "This video is useful.",\n    },\n    {\n        "type": "multipleChoice",\n        "description": "What is your favorite language?",\n        "options": ["CSS", "HTML", "JS", "Python"],\n    },\n    {\n        "type": "text",\n        "description": "Describe your favorite JS feature",\n    },\n    # this is ok to modify as it is just extending new feature\n    {\n        "type": "range",\n        "description": "What is the speed limit in your city?",\n    },\n]\n\nprint_quiz(questions)\n')),(0,o.kt)("h2",{id:"pass-ocp"},"Pass OCP"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Polymorphic open-closed principle\nclass Question:\n    def __init__(self, description):\n        self.description = description\n\n    def print_question_choices(self):\n        print("")\n\n\nclass BooleanQuestion(Question):\n    def __init__(self, description):\n        super().__init__(description)\n\n    def print_question_choices(self):\n        print("1. True")\n        print("2. False")\n\n\nclass MultipleChoiceQuestion(Question):\n    def __init__(self, description, options):\n        super().__init__(description)\n        self.options = options\n\n    def print_question_choices(self):\n        for index, option in enumerate(self.options):\n            print(f"{index + 1}. {option}")\n\n\nclass TextQuestion(Question):\n    def __init__(self, description):\n        super().__init__(description)\n\n    def print_question_choices(self):\n        print("Answer: _______________")\n\n\nclass RangeQuestion(Question):\n    def __init__(self, description):\n        super().__init__(description)\n\n    def print_question_choices(self):\n        print("Minimum: ______________")\n        print("Maximum: ______________")\n\n\n# this is open to be extended\n# closed for modification as we do not need to touch this function\ndef print_quiz(questions):\n    for question in questions:\n        print(question.description)\n        question.print_question_choices()\n\n\n# only need to extend new features here\nquestions = [\n    BooleanQuestion("This video is useful."),\n    MultipleChoiceQuestion(\n        "What is your favorite language?",\n        [\n            "CSS",\n            "HTML",\n            "JS",\n            "Python",\n        ],\n    ),\n    TextQuestion("Describe your favorite JS feature."),\n    RangeQuestion("What is the speed limit in your city?"),\n]\n\nprint_quiz(questions)\n')))}c.isMDXComponent=!0}}]);