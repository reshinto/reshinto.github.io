"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[3681],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(r),h=i,f=p["".concat(c,".").concat(h)]||p[h]||l[h]||o;return r?n.createElement(f,a(a({ref:t},d),{},{components:r})):n.createElement(f,a({ref:t},d))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},22992:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(83117),i=(r(67294),r(3905));const o={},a="C++ Example",s={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Builder/cPlusPlus/readme",id:"interviewPrep/designPatterns/Creational_patterns/Builder/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Builder/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Builder/cPlusPlus",slug:"/interviewPrep/designPatterns/Creational_patterns/Builder/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Builder/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Builder/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Builder",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Builder/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Builder/cSharp/"}},c={},u=[],d={toc:u};function l(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"c-example"},"C++ Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n#include <vector>\n\n/**\n * Builder Design Pattern\n *\n * Intent: Lets you construct complex objects step by step. The pattern allows\n * you to produce different types and representations of an object using the\n * same construction code.\n */\n\n/**\n * It makes sense to use the Builder pattern only when your products are quite\n * complex and require extensive configuration.\n *\n * Unlike in other creational patterns, different concrete builders can produce\n * unrelated products. In other words, results of various builders may not\n * always follow the same interface.\n */\n\nclass Product1{\n    public:\n    std::vector<std::string> parts_;\n    void ListParts()const{\n        std::cout << "Product parts: ";\n        for (size_t i=0;i<parts_.size();i++){\n            if(parts_[i]== parts_.back()){\n                std::cout << parts_[i];\n            }else{\n                std::cout << parts_[i] << ", ";\n            }\n        }\n        std::cout << "\\n\\n";\n    }\n};\n\n\n/**\n * The Builder interface specifies methods for creating the different parts of\n * the Product objects.\n */\nclass Builder{\n    public:\n    virtual ~Builder(){}\n    virtual void ProducePartA() const =0;\n    virtual void ProducePartB() const =0;\n    virtual void ProducePartC() const =0;\n};\n/**\n * The Concrete Builder classes follow the Builder interface and provide\n * specific implementations of the building steps. Your program may have several\n * variations of Builders, implemented differently.\n */\nclass ConcreteBuilder1 : public Builder{\n    private:\n\n    Product1* product;\n\n    /**\n     * A fresh builder instance should contain a blank product object, which is\n     * used in further assembly.\n     */\n    public:\n\n    ConcreteBuilder1(){\n        this->Reset();\n    }\n\n    ~ConcreteBuilder1(){\n        delete product;\n    }\n\n    void Reset(){\n        this->product= new Product1();\n    }\n    /**\n     * All production steps work with the same product instance.\n     */\n\n    void ProducePartA()const override{\n        this->product->parts_.push_back("PartA1");\n    }\n\n    void ProducePartB()const override{\n        this->product->parts_.push_back("PartB1");\n    }\n\n    void ProducePartC()const override{\n        this->product->parts_.push_back("PartC1");\n    }\n\n    /**\n     * Concrete Builders are supposed to provide their own methods for\n     * retrieving results. That\'s because various types of builders may create\n     * entirely different products that don\'t follow the same interface.\n     * Therefore, such methods cannot be declared in the base Builder interface\n     * (at least in a statically typed programming language). Note that PHP is a\n     * dynamically typed language and this method CAN be in the base interface.\n     * However, we won\'t declare it there for the sake of clarity.\n     *\n     * Usually, after returning the end result to the client, a builder instance\n     * is expected to be ready to start producing another product. That\'s why\n     * it\'s a usual practice to call the reset method at the end of the\n     * `getProduct` method body. However, this behavior is not mandatory, and\n     * you can make your builders wait for an explicit reset call from the\n     * client code before disposing of the previous result.\n     */\n\n    /**\n     * Please be careful here with the memory ownership. Once you call\n     * GetProduct the user of this function is responsable to release this\n     * memory. Here could be a better option to use smart pointers to avoid\n     * memory leaks\n     */\n\n    Product1* GetProduct() {\n        Product1* result= this->product;\n        this->Reset();\n        return result;\n    }\n};\n\n/**\n * The Director is only responsible for executing the building steps in a\n * particular sequence. It is helpful when producing products according to a\n * specific order or configuration. Strictly speaking, the Director class is\n * optional, since the client can control builders directly.\n */\nclass Director{\n    /**\n     * @var Builder\n     */\n    private:\n    Builder* builder;\n    /**\n     * The Director works with any builder instance that the client code passes\n     * to it. This way, the client code may alter the final type of the newly\n     * assembled product.\n     */\n\n    public:\n\n    void set_builder(Builder* builder){\n        this->builder=builder;\n    }\n\n    /**\n     * The Director can construct several product variations using the same\n     * building steps.\n     */\n\n    void BuildMinimalViableProduct(){\n        this->builder->ProducePartA();\n    }\n\n    void BuildFullFeaturedProduct(){\n        this->builder->ProducePartA();\n        this->builder->ProducePartB();\n        this->builder->ProducePartC();\n    }\n};\n/**\n * The client code creates a builder object, passes it to the director and then\n * initiates the construction process. The end result is retrieved from the\n * builder object.\n */\n/**\n * I used raw pointers for simplicity however you may prefer to use smart\n * pointers here\n */\nvoid ClientCode(Director& director)\n{\n    ConcreteBuilder1* builder = new ConcreteBuilder1();\n    director.set_builder(builder);\n    std::cout << "Standard basic product:\\n";\n    director.BuildMinimalViableProduct();\n\n    Product1* p= builder->GetProduct();\n    p->ListParts();\n    delete p;\n\n    std::cout << "Standard full featured product:\\n";\n    director.BuildFullFeaturedProduct();\n\n    p= builder->GetProduct();\n    p->ListParts();\n    delete p;\n\n    // Remember, the Builder pattern can be used without a Director class.\n    std::cout << "Custom product:\\n";\n    builder->ProducePartA();\n    builder->ProducePartC();\n    p=builder->GetProduct();\n    p->ListParts();\n    delete p;\n\n    delete builder;\n}\n\nint main(){\n    Director* director= new Director();\n    ClientCode(*director);\n    delete director;\n    return 0;\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Standard basic product:\nProduct parts: PartA1\n\nStandard full featured product:\nProduct parts: PartA1, PartB1, PartC1\n\nCustom product:\nProduct parts: PartA1, PartC1\n")))}l.isMDXComponent=!0}}]);