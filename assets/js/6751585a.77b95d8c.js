"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[58195],{3905:(e,r,n)=>{n.d(r,{Zo:()=>l,kt:()=>v});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),p=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},l=function(e){var r=p(e.components);return t.createElement(s.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),v=a,g=u["".concat(s,".").concat(v)]||u[v]||d[v]||i;return n?t.createElement(g,o(o({ref:r},l),{},{components:n})):t.createElement(g,o({ref:r},l))}));function v(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85848:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var t=n(83117),a=(n(67294),n(3905));const i={},o="Example 2",c={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/example2",id:"interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Observer/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/typescript/"}},s={},p=[],l={toc:p};function d(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'import XCTest\n\nclass ObserverRealWorld: XCTestCase {\n\n    func test() {\n\n        let cartManager = CartManager()\n\n        let navigationBar = UINavigationBar()\n        let cartVC = CartViewController()\n\n        cartManager.add(subscriber: navigationBar)\n        cartManager.add(subscriber: cartVC)\n\n        let apple = Food(id: 111, name: "Apple", price: 10, calories: 20)\n        cartManager.add(product: apple)\n\n        let tShirt = Clothes(id: 222, name: "T-shirt", price: 200, size: "L")\n        cartManager.add(product: tShirt)\n\n        cartManager.remove(product: apple)\n    }\n}\n\nprotocol CartSubscriber: CustomStringConvertible {\n\n    func accept(changed cart: [Product])\n}\n\nprotocol Product {\n\n    var id: Int { get }\n    var name: String { get }\n    var price: Double { get }\n\n    func isEqual(to product: Product) -> Bool\n}\n\nextension Product {\n\n    func isEqual(to product: Product) -> Bool {\n        return id == product.id\n    }\n}\n\nstruct Food: Product {\n\n    var id: Int\n    var name: String\n    var price: Double\n\n    /// Food-specific properties\n    var calories: Int\n}\n\nstruct Clothes: Product {\n\n    var id: Int\n    var name: String\n    var price: Double\n\n    /// Clothes-specific properties\n    var size: String\n}\n\nclass CartManager {\n\n    private lazy var cart = [Product]()\n    private lazy var subscribers = [CartSubscriber]()\n\n    func add(subscriber: CartSubscriber) {\n        print("CartManager: I\'am adding a new subscriber: \\(subscriber.description)")\n        subscribers.append(subscriber)\n    }\n\n    func add(product: Product) {\n        print("\\nCartManager: I\'am adding a new product: \\(product.name)")\n        cart.append(product)\n        notifySubscribers()\n    }\n\n    func remove(subscriber filter: (CartSubscriber) -> (Bool)) {\n        guard let index = subscribers.firstIndex(where: filter) else { return }\n        subscribers.remove(at: index)\n    }\n\n    func remove(product: Product) {\n        guard let index = cart.firstIndex(where: { $0.isEqual(to: product) }) else { return }\n        print("\\nCartManager: Product \'\\(product.name)\' is removed from a cart")\n        cart.remove(at: index)\n        notifySubscribers()\n    }\n\n    private func notifySubscribers() {\n        subscribers.forEach({ $0.accept(changed: cart) })\n    }\n}\n\nextension UINavigationBar: CartSubscriber {\n\n    func accept(changed cart: [Product]) {\n        print("UINavigationBar: Updating an appearance of navigation items")\n    }\n\n    open override var description: String { return "UINavigationBar" }\n}\n\nclass CartViewController: UIViewController, CartSubscriber {\n\n    func accept(changed cart: [Product]) {\n        print("CartViewController: Updating an appearance of a list view with products")\n    }\n\n    open override var description: String { return "CartViewController" }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CartManager: I'am adding a new subscriber: UINavigationBar\nCartManager: I'am adding a new subscriber: CartViewController\n\nCartManager: I'am adding a new product: Apple\nUINavigationBar: Updating an appearance of navigation items\nCartViewController: Updating an appearance of a list view with products\n\nCartManager: I'am adding a new product: T-shirt\nUINavigationBar: Updating an appearance of navigation items\nCartViewController: Updating an appearance of a list view with products\n\nCartManager: Product 'Apple' is removed from a cart\nUINavigationBar: Updating an appearance of navigation items\nCartViewController: Updating an appearance of a list view with products\n")))}d.isMDXComponent=!0}}]);