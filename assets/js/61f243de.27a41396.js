"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[6575],{3905:(e,a,t)=>{t.d(a,{Zo:()=>s,kt:()=>c});var l=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);a&&(l=l.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function r(e,a){if(null==e)return{};var t,l,n=function(e,a){if(null==e)return{};var t,l,n={},i=Object.keys(e);for(l=0;l<i.length;l++)t=i[l],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)t=i[l],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var m=l.createContext({}),d=function(e){var a=l.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},s=function(e){var a=d(e.components);return l.createElement(m.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return l.createElement(l.Fragment,{},a)}},p=l.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,m=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),p=d(t),c=n,k=p["".concat(m,".").concat(c)]||p[c]||u[c]||i;return t?l.createElement(k,o(o({ref:a},s),{},{components:t})):l.createElement(k,o({ref:a},s))}));function c(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=p;var r={};for(var m in a)hasOwnProperty.call(a,m)&&(r[m]=a[m]);r.originalType=e,r.mdxType="string"==typeof e?e:n,o[1]=r;for(var d=2;d<i;d++)o[d]=t[d];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8996:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var l=t(7462),n=(t(7294),t(3905));const i={},o="Java 9",r={unversionedId:"languageSpecific/java/java9/readme",id:"languageSpecific/java/java9/readme",title:"Java 9",description:"- JPMS (Java Platform Module System) also known as Project Jigsaw",source:"@site/docs/languageSpecific/java/java9/readme.md",sourceDirName:"languageSpecific/java/java9",slug:"/languageSpecific/java/java9/",permalink:"/docs/languageSpecific/java/java9/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/languageSpecific/java/java9/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java",permalink:"/docs/languageSpecific/java/"},next:{title:"Java Version Manager - jEnv",permalink:"/docs/languageSpecific/java/jenv-manage-java-versions"}},m={},d=[{value:"What it is trying to solve",id:"what-it-is-trying-to-solve",level:2},{value:"Java 8",id:"java-8",level:3},{value:"Java 9 improvements",id:"java-9-improvements",level:3},{value:"Module-info",id:"module-info",level:2},{value:"Module name",id:"module-name",level:3},{value:"Module API",id:"module-api",level:3},{value:"Restricted API",id:"restricted-api",level:3},{value:"Module dependency",id:"module-dependency",level:3},{value:"Transitive dependencies",id:"transitive-dependencies",level:2},{value:"Qualified dependencies",id:"qualified-dependencies",level:2},{value:"Service dependencies",id:"service-dependencies",level:2},{value:"Optional dependencies",id:"optional-dependencies",level:2},{value:"Runtime dependencies",id:"runtime-dependencies",level:2},{value:"Open dependencies",id:"open-dependencies",level:3},{value:"Rules of modularization",id:"rules-of-modularization",level:2},{value:"Modular structure design",id:"modular-structure-design",level:2},{value:"JPMS introduces the module path",id:"jpms-introduces-the-module-path",level:3},{value:"Tools and Strategies",id:"tools-and-strategies",level:2},{value:"javac",id:"javac",level:3},{value:"Jar",id:"jar",level:3},{value:"Dependency checking tools",id:"dependency-checking-tools",level:3},{value:"Jdeps",id:"jdeps",level:4},{value:"Module packaging tools",id:"module-packaging-tools",level:3},{value:"Jmod",id:"jmod",level:4},{value:"Custom image building tools",id:"custom-image-building-tools",level:3},{value:"Jlink",id:"jlink",level:4},{value:"Jmod hasing",id:"jmod-hasing",level:4},{value:"Jar files vs Jmod files",id:"jar-files-vs-jmod-files",level:4},{value:"backward compatibility with classes",id:"backward-compatibility-with-classes",level:3},{value:"Jdeprscan",id:"jdeprscan",level:4},{value:"Explicit vs unamed modules",id:"explicit-vs-unamed-modules",level:4},{value:"backward compatibility with JARs",id:"backward-compatibility-with-jars",level:3},{value:"Automatic modules",id:"automatic-modules",level:4}],s={toc:d};function u(e){let{components:a,...i}=e;return(0,n.kt)("wrapper",(0,l.Z)({},s,i,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"java-9"},"Java 9"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"JPMS (Java Platform Module System) also known as Project Jigsaw",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"benefits",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"modularity as a first class citizen"),(0,n.kt)("li",{parentName:"ul"},"designing for modularity early"),(0,n.kt)("li",{parentName:"ul"},"new concepts, syntax, and tools"),(0,n.kt)("li",{parentName:"ul"},"modular platform"),(0,n.kt)("li",{parentName:"ul"},"smaller footprint"))))),(0,n.kt)("li",{parentName:"ul"},"5 pillars of modularity",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Encapulated: stronger encapsulation",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"protection of a module's internals"))),(0,n.kt)("li",{parentName:"ul"},"Interoperable: reliable modularity",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"working with other modules"))),(0,n.kt)("li",{parentName:"ul"},"Composable: reliable modularity",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"modules can be combined with other modules"))),(0,n.kt)("li",{parentName:"ul"},"Expandable: reliable modularity",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"modules can be scaled up"))),(0,n.kt)("li",{parentName:"ul"},"Autonomous: decomposable",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"modules work independently of other modules")))))),(0,n.kt)("h2",{id:"what-it-is-trying-to-solve"},"What it is trying to solve"),(0,n.kt)("h3",{id:"java-8"},"Java 8"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"limited in terms of expressing modularity beyond a single package")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"once a class is public, there is no further way to control which classes in other packages can see it"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"its all or nothing"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"path of the class that is stored on disk is intertwined with the package hierarchy"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"means that how you organize the package hierarchies must be aligned with the accessibility that you want to assign to your class"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"example"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"1 package example works fine"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"all packages are inside the movement package")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"single package module",src:t(6379).Z,width:"1688",height:"780"}))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"multiple packages example will not compile"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"multiple package module",src:t(1042).Z,width:"1750",height:"638"})))))),(0,n.kt)("h3",{id:"java-9-improvements"},"Java 9 improvements"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"class ccessibility"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"JPMS offers better controls to expose classes"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"classpath hell"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"JPMS maintains class integrity"),(0,n.kt)("li",{parentName:"ul"},"can be verified by static analysis"),(0,n.kt)("li",{parentName:"ul"},"support for versioning")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"classpath hell",src:t(707).Z,width:"1366",height:"676"}))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"controlling the system footprint"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"a large chunk of the JDK libraries were delivered as 1 big JAR file ",(0,n.kt)("inlineCode",{parentName:"li"},"rt.jar")),(0,n.kt)("li",{parentName:"ul"},"by java 8, it had grown to over 66 MB of line code"),(0,n.kt)("li",{parentName:"ul"},"typical apps will not use all 66 MB, so why make all of it available at runtime"),(0,n.kt)("li",{parentName:"ul"},"thus the ",(0,n.kt)("inlineCode",{parentName:"li"},"rt.jar")," has been modularized",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"libraries that used to eist in ",(0,n.kt)("inlineCode",{parentName:"li"},"rt.jar")," have now been segmented into smaller ",(0,n.kt)("inlineCode",{parentName:"li"},"JMOD")," files",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"a new file format to package modules")))))))),(0,n.kt)("h2",{id:"module-info"},"Module-info"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Regular java class"),(0,n.kt)("li",{parentName:"ul"},"Module-related syntax only"),(0,n.kt)("li",{parentName:"ul"},"module meta-data available at runtime"),(0,n.kt)("li",{parentName:"ul"},"providing fidelity across phrases"),(0,n.kt)("li",{parentName:"ul"},"1 module-info per module"),(0,n.kt)("li",{parentName:"ul"},"declared at the root of module"),(0,n.kt)("li",{parentName:"ul"},"mandatory for JPMS"),(0,n.kt)("li",{parentName:"ul"},"creates a namespace for the module"),(0,n.kt)("li",{parentName:"ul"},"must be globally unique, like package names"),(0,n.kt)("li",{parentName:"ul"},"no duplication"),(0,n.kt)("li",{parentName:"ul"},"modules dictate how packages are stored on file system"),(0,n.kt)("li",{parentName:"ul"},"module hierarchies must match filesystem hierarchies"),(0,n.kt)("li",{parentName:"ul"},"segregated package hierarchies"),(0,n.kt)("li",{parentName:"ul"},"modules could each have their own codebase and lifecycles, but is not a must"),(0,n.kt)("li",{parentName:"ul"},"filename ",(0,n.kt)("inlineCode",{parentName:"li"},"module-info.java"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"module module.name {                                 // 1\n  exports package.name.a;                            // 2\n  exports package.name.b to other.module.name.a;     // 3\n  requires other.module.name.b;                      // 4\n}\n")))),(0,n.kt)("h3",{id:"module-name"},"Module name"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"first line contains module keyword followed by module name",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"module.name")," in given example"))),(0,n.kt)("li",{parentName:"ul"},"Module naming convention is similar to package convention",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"reversed domain notation: domainName.module",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"domain name: organization.com"),(0,n.kt)("li",{parentName:"ul"},"module: project"),(0,n.kt)("li",{parentName:"ul"},"module name in module-info: ",(0,n.kt)("inlineCode",{parentName:"li"},"com.organization.project"))))))),(0,n.kt)("h3",{id:"module-api"},"Module API"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The second line declares that classes from a ",(0,n.kt)("inlineCode",{parentName:"li"},"package.name.a")," may be accessible for other modules"),(0,n.kt)("li",{parentName:"ul"},"Module descriptor can export multiple packages, each on a separate line")),(0,n.kt)("h3",{id:"restricted-api"},"Restricted API"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Line #3 declares that package ",(0,n.kt)("inlineCode",{parentName:"li"},"package.name.b")," is accessible only for ",(0,n.kt)("inlineCode",{parentName:"li"},"other.module.name.a")),(0,n.kt)("li",{parentName:"ul"},"This functionality should be use carefully, it brakes the rule that module knows only depended modules"),(0,n.kt)("li",{parentName:"ul"},"It also increases coupling of modules")),(0,n.kt)("h3",{id:"module-dependency"},"Module dependency"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"In the last line contains the information about the module dependencies"),(0,n.kt)("li",{parentName:"ul"},"In the provided example the ",(0,n.kt)("inlineCode",{parentName:"li"},"module module.name")," depends on ",(0,n.kt)("inlineCode",{parentName:"li"},"other.module.name.b")," module and has access to its exported packages"),(0,n.kt)("li",{parentName:"ul"},"dependencies are enforced at run time"),(0,n.kt)("li",{parentName:"ul"},"apps fail if they can't resolve all of their dependencies")),(0,n.kt)("h2",{id:"transitive-dependencies"},"Transitive dependencies"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a transfer of dependencies to dependent modules",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"in simpler terms",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"every package a given module requires gets automatically passed to dependent modules"))))),(0,n.kt)("li",{parentName:"ul"},"it keep dependency graphs coherent"),(0,n.kt)("li",{parentName:"ul"},"it is a clean way to transfer dependencies to dependent modules",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"but avoid having to repeat the dependency requirements")))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"module module.name {\n  requires transitive other.module.name.b;  // add transitive key word\n}\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"from"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"without transition",src:t(7708).Z,width:"1236",height:"1016"}))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"to"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"with transition",src:t(8747).Z,width:"1262",height:"1012"})))),(0,n.kt)("h2",{id:"qualified-dependencies"},"Qualified dependencies"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"exporting of packages to chosen modules"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"similar to white listing approach to exporting"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"allow the exporting module to choose which foreign modules are allowed to read it")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"acts as a fine-grained filter, giving individual access at the package level")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"drawbacks of using qualified dependencies"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"exporting modules should normally not know about which other modules are depending upon them"),(0,n.kt)("li",{parentName:"ul"},"qualified exports break this rule"),(0,n.kt)("li",{parentName:"ul"},"it should only be used in friend like contexts"),(0,n.kt)("li",{parentName:"ul"},"it is used because the modules are working closely with other modules to provide a functionality"),(0,n.kt)("li",{parentName:"ul"},"funcationalities are structured into independent modules",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"but federated to act as 1 in providing that functionality"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"limitations to qualified dependencies"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"it can't be used to grant readability to all forieng modules because they would all need to be known"),(0,n.kt)("li",{parentName:"ul"},"foreign modules must already exist, if not compilation will fail"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"qualified exporting should not be used as the default exporting tool"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"but should be instead be used in special circumstances"),(0,n.kt)("li",{parentName:"ul"},"best used to give fine-grained access to known modules working together"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"problem"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"without qualified dependency",src:t(7085).Z,width:"1390",height:"1016"}))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"solution 1: changing accessibility from public to package private"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"works if dependency does not require access from anywhere else")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"limited qualified solution",src:t(3583).Z,width:"1398",height:"1006"}))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"solution 2: refactor code"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"is a hacky solution")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"hacky qualified solution",src:t(1637).Z,width:"1392",height:"1008"}))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Proper solution:"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"change accessibility from public to package private"),(0,n.kt)("li",{parentName:"ul"},"use the ",(0,n.kt)("inlineCode",{parentName:"li"},"to")," key word in ",(0,n.kt)("inlineCode",{parentName:"li"},"module-info.java")," file")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"qualified solution",src:t(9978).Z,width:"1450",height:"1002"})))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"module module.name {\n  exports package.name.b to other.module.name.a, other.module.name.c, ...;  // use the to key, can export to multiple packages\n}\n")),(0,n.kt)("h2",{id:"service-dependencies"},"Service dependencies"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"service dependencies",src:t(6214).Z,width:"1606",height:"1046"})),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"service provider"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"has an interface where multiple types implements it"),(0,n.kt)("li",{parentName:"ul"},"in the ",(0,n.kt)("inlineCode",{parentName:"li"},"module-info.java")," file",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"module module.name {\n  exports package.name.a;;\n  provides package.name.a.InterfaceName with  // interface\n           package.name.a.type.One;           // class that implements interface\n           package.name.a.type.Two;           // can provide multiple classes that implements the interface\n           ...\n}\n"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"service consumer"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"module module.name.b {\n  requires package.name.a;\n  uses package.name.a.InterfaceName;  // only interface is specified\n}\n")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"service loader"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"pluggable services framework"),(0,n.kt)("li",{parentName:"ul"},"binds service providers to consumers"),(0,n.kt)("li",{parentName:"ul"},"not new, but enhanced for JPMS"),(0,n.kt)("li",{parentName:"ul"},"does not replace dependency injection frameworks",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"but can be used in apps that need to deliver functionality in a modular and interoperable way without using third party frameworks"),(0,n.kt)("li",{parentName:"ul"},"ideal for stand-alone jave SE apps"))),(0,n.kt)("li",{parentName:"ul"},"example: a class that uses the service loader to obtain an instance to one of the interface implementations")),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.ServiceLoader;\nimport java.util.Optional;\nimport com.red30tech.chassis.api.InterfaceName;\n")),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},'ServiceLoader<InterfaceName> serviceLoader = ServiceLoader.load(InterfaceName.class);\n\nSystem.out.println("Found " + serviceLoader.stream().count() + " interface name configured");  // count depends on number of classes implemented with interface that are provided in the modular-info.java file\n\nOptional<InterfaceName> optional = serviceLoader.findFirst();\noptional.orElseThrow(() -> new RuntimeException("No service providers found"));\nInterfaceName interfaceName = optional.get();\n')))))),(0,n.kt)("h2",{id:"optional-dependencies"},"Optional dependencies"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"mandatory at compilation time, but optional at run time"),(0,n.kt)("li",{parentName:"ul"},"the interface can now add an option to enable or disable the implementation of the optional dependencies"),(0,n.kt)("li",{parentName:"ul"},"optional dependencies must be coded defensively",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"must use with ",(0,n.kt)("inlineCode",{parentName:"li"},"try/catch")," and with ",(0,n.kt)("inlineCode",{parentName:"li"},"NoClassDefFoundError")," exception"))),(0,n.kt)("li",{parentName:"ul"},"optinal modules become regular modules if they get required by other modules in the graph")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"optional dependencies",src:t(144).Z,width:"1622",height:"1040"})),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"moduel module.name {\n  requires package.name.b;\n  requires static package.name.c;  // use the static keyword to make it optional\n  exports package.name.a;\n  provides package.name.a.InterfaceName with\n           package.name.a.type.One;\n           package.name.a.type.Two;\n}\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"try {\n  OptionalDependencyName a = new OptionalDependencyName();\n} catch (NoClassDefFoundError exception) {\n  a = null;\n}\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# run without optional dependency\njava --module-path mods/ -m com.domain.module/com.domain.module.Main\n\n# run with optional dependency\njava --module-path mods/ --add-modules com.domain.optionalmodule -m com.domain.module/com.domain.module.Main\n")),(0,n.kt)("h2",{id:"runtime-dependencies"},"Runtime dependencies"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"API misuses are caught at compilation time",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"by not exporting the package",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"the package won't be readable by foreign modules"))))),(0,n.kt)("li",{parentName:"ul"},"if a dependency was not exported",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"importing or instantiating the dependency will cause a compilation error"),(0,n.kt)("li",{parentName:"ul"},"reflection-based framework",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"not importing but using the type without instantiating will allow compilation but fails at runtime")))))),(0,n.kt)("h3",{id:"open-dependencies"},"Open dependencies"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"allows module access at run time only (via reflection)"),(0,n.kt)("li",{parentName:"ul"},"compile time access is closed")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"open dependencies",src:t(1566).Z,width:"1478",height:"948"})),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"moduel module.name {\n  requires package.name.b;\n  requires static package.name.c;\n  exports package.name.a;\n  opens package.name.a.type;  // use the opens keyword to allow reflection-based access at run time to all classes\n  provides package.name.a.InterfaceName with\n           package.name.a.type.One;\n           package.name.a.type.Two;\n}\n")),(0,n.kt)("h2",{id:"rules-of-modularization"},"Rules of modularization"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Firstly",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"cycles between modules (on compilation level) are prohibited"),(0,n.kt)("li",{parentName:"ul"},"It\u2019s a limitation but no one should cry because of that"),(0,n.kt)("li",{parentName:"ul"},"Cycles in general are sign of a bad design"))),(0,n.kt)("li",{parentName:"ul"},"Secondly, even if module encapsulation is controlled on compile and runtime level",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"you can brake it using reflection API and freely use debug tools"))),(0,n.kt)("li",{parentName:"ul"},"Thirdly, all modules have an implicit dependency to ",(0,n.kt)("inlineCode",{parentName:"li"},"java.base")," module and it doesn\u2019t have to be specified in module descriptor",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The implicit dependency on ",(0,n.kt)("inlineCode",{parentName:"li"},"java.base")," is similar to implicit import of ",(0,n.kt)("inlineCode",{parentName:"li"},"java.lang.String")," class"))),(0,n.kt)("li",{parentName:"ul"},"Fourthly, due to backward compatibility, every class not placed in the modules goes to unnamed module",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"That module has dependency to all other modules and has access to the packages which they exported"),(0,n.kt)("li",{parentName:"ul"},"It\u2019s important that not exported packages are not accessible"),(0,n.kt)("li",{parentName:"ul"},"Since Java 9 some APIs are marked as internal and are unavailable from regular packages"),(0,n.kt)("li",{parentName:"ul"},"If you compile code using such packages in Java 8 and try to use it with Java 9, you\u2019ll get runtime error")))),(0,n.kt)("h2",{id:"modular-structure-design"},"Modular structure design"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"small apps may have just 1 module"),(0,n.kt)("li",{parentName:"ul"},"9 tips",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"Token modularization",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"package non-modular classes into jars and use automatic modules"),(0,n.kt)("li",{parentName:"ul"},"automatic jars can be read and depended upon by modules"),(0,n.kt)("li",{parentName:"ul"},"gateway to modular java"))),(0,n.kt)("li",{parentName:"ol"},"Piecemeal Modularization",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"modularizing large code bases is a big undertaking",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"use a piecemeal approach"))),(0,n.kt)("li",{parentName:"ul"},"start with root packages, such as utility"),(0,n.kt)("li",{parentName:"ul"},"can be read by unnamed modules"))),(0,n.kt)("li",{parentName:"ol"},"use modularity for better design",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"modularity helps detect hidden bad designs"),(0,n.kt)("li",{parentName:"ul"},"cyclic dependencies, lack of interfaces, and packages that try to do too much"),(0,n.kt)("li",{parentName:"ul"},"take the opportunity to refactor during modularization"))),(0,n.kt)("li",{parentName:"ol"},"Break Monoliths along Natural Fault Lines",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"consider module boundaries in tiers"),(0,n.kt)("li",{parentName:"ul"},"front-end/back-end/persistence"),(0,n.kt)("li",{parentName:"ul"},"mobile, web, and desktop"),(0,n.kt)("li",{parentName:"ul"},"relational vs document vs graph databases"))),(0,n.kt)("li",{parentName:"ol"},"Keep Private Things Private",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"modules are the next level of lexical scope"),(0,n.kt)("li",{parentName:"ul"},"hide classes that shouldn't be exposed"),(0,n.kt)("li",{parentName:"ul"},"identify the export package",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"put public classes there"))),(0,n.kt)("li",{parentName:"ul"},"leads to better APIs"))),(0,n.kt)("li",{parentName:"ol"},"OSGi Status Quo",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"future of OSGi integration is not clear"),(0,n.kt)("li",{parentName:"ul"},"JPMS offers native modularity"),(0,n.kt)("li",{parentName:"ul"},"hold off JPMS until there is clarity with OSGi integration"))),(0,n.kt)("li",{parentName:"ol"},"Complement Microservices with JPMS",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"introduce JPMS to your microservices architecture"),(0,n.kt)("li",{parentName:"ul"},"JPMS will provide better encapsulation and the next level of lexical scoping",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"better code hygiene"))),(0,n.kt)("li",{parentName:"ul"},"focus on larger services"))),(0,n.kt)("li",{parentName:"ol"},"Use the Tools to Deliver Software",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"introduce the static analysis tools in your build process"),(0,n.kt)("li",{parentName:"ul"},"Jdeps, java -dry-run, jdeprscan"),(0,n.kt)("li",{parentName:"ul"},"used to produce metrics and quality software"))),(0,n.kt)("li",{parentName:"ol"},"All Things in Moderation",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"don't over-modularize"),(0,n.kt)("li",{parentName:"ul"},"over-modularized code is worse than a monolith"),(0,n.kt)("li",{parentName:"ul"},"understand the dependencies in your package")))))),(0,n.kt)("h3",{id:"jpms-introduces-the-module-path"},"JPMS introduces the module path"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"it tells the compiler and runtime where to find the modules")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"directory hierarchy must match module/package hierarchy"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"each module is a separate hierarchy"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"the module path supersedes the class path"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"the class path is for backward compatibility"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"the module path can aggregate many modules"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"each module can be its own island of code"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"1 modular structure"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"modular structure",src:t(6742).Z,width:"1776",height:"1026"}))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"multi modular structure"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{alt:"multi modular structure",src:t(9757).Z,width:"1746",height:"1032"})))),(0,n.kt)("h2",{id:"tools-and-strategies"},"Tools and Strategies"),(0,n.kt)("h3",{id:"javac"},"javac"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},'javac -d ./mods/ --module-source-path src $(find src -name "*.java")')),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"javac -d ./mods/ --module com.domain.module --module-source-path src")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"javac -d ./mods/ --module-path mods --module com.domain.module --module-source-path src")),(0,n.kt)("li",{parentName:"ul"},"build with version",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},'javac -d ./mods/ --module-source-path src --module-version 123.01 $(find src -name "*.java")'))))),(0,n.kt)("h3",{id:"jar"},"Jar"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"a jar file that contains module-info at its root")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"a module is 1 to 1 with a jar file")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"build"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'rm -rf bin\nmkdir bin\n\njavac -d ./mods/ --module-source-path src $(find src -name "*.java")\nfind src -name "*.java"\n\njar --create --file ./bin/com.domain.modulea.jar -C mods/com.domain.modulea .\njar --create --file ./bin/com.domain.moduleb.jar -C mods/com.domain.moduleb .\n'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"build with versioning"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'rm -rf bin\nmkdir bin\n\njavac -d ./mods/ --module-source-path src $(find src -name "*.java")\nfind src -name "*.java"\n\njar --create --file ./bin/com.domain.modulea.jar --module-version=123.02 -C mods/com.domain.modulea .\njar --create --file ./bin/com.domain.moduleb.jar -C mods/com.domain.moduleb .\n'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"run"),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"java --module-path bin -m com.domain.modulea/com.domain.modulea.ClassName")))),(0,n.kt)("h3",{id:"dependency-checking-tools"},"Dependency checking tools"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"describe module",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"describe modules used and their dependencies without running the program",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"java --module-path mods/ --describe-module com.domain.modulea"))))),(0,n.kt)("li",{parentName:"ul"},"list modules",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"list all of the observable modules",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"observable modules are modules that are available at run time"),(0,n.kt)("li",{parentName:"ul"},"but not necessarily the ones used by the application",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"java --module-path mods/ --list-modules com.domain.modulea"))))))),(0,n.kt)("li",{parentName:"ul"},"show module resolution",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"shows how modules are resolved before running the application"),(0,n.kt)("li",{parentName:"ul"},"will include both the JDK library modules and the application modules"),(0,n.kt)("li",{parentName:"ul"},"will also run the application",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"java --module-path mods/ --show-module-resolution -m com.domain.modulea/com.domain.modulea.ClassName"))))),(0,n.kt)("li",{parentName:"ul"},"dry run",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"to make sure application will resolve all dependencies without actually running the app"),(0,n.kt)("li",{parentName:"ul"},"an error will occur if module does not exist",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"java --module-path mods/ --dry-run -m com.domain.modulea/com.domain.modulea.ClassName"))))),(0,n.kt)("li",{parentName:"ul"},"upgrade version at run time",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"build first version",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},'javac -d ./mods/ --module-version 123.01 --module-source-path src $(find src -name "',"*",'.java")'))),(0,n.kt)("li",{parentName:"ul"},"build second version",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"javac -d ./mods2/ --module-version 123.02 --module com.domain.modulea --module-source-path src"))),(0,n.kt)("li",{parentName:"ul"},"run with upgraded version",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"java --upgrade-module-path mods2 --module-path mods -m com.domain.modulea/com.domain.modulea.ClassName")))))),(0,n.kt)("h4",{id:"jdeps"},"Jdeps"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a class dependency analyzer tool"),(0,n.kt)("li",{parentName:"ul"},"check dependencies",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"prints the dependencies between each module",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"jdeps --module-path mods/ mods/com.domain.modulea"))))),(0,n.kt)("li",{parentName:"ul"},"list jdeps",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"print a summarized list of dependencies",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"jdeps --list-deps --module-path mods/ mods/com.domain.modulea")))))),(0,n.kt)("h3",{id:"module-packaging-tools"},"Module packaging tools"),(0,n.kt)("h4",{id:"jmod"},"Jmod"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"a tool and a file format")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"it creates jmod files")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"similar in intent as jar files, but designed to work with ",(0,n.kt)("inlineCode",{parentName:"p"},"Jlink"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"used to build custom runtime images")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"pre-java9"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"1 jar file as ",(0,n.kt)("inlineCode",{parentName:"li"},"rt.jar")," contains all JDK libraries"),(0,n.kt)("li",{parentName:"ul"},"causes longer time to start"),(0,n.kt)("li",{parentName:"ul"},"not suitable for small apps with very short lifecycle"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"build jmods"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'rm -rf jmods jlink\nmkdir jmods\n\njavac -d ./mods/ --module-source-path src $(find src -name "*.java")\n\njmod create jmods/com.domain.modulea.jmod --class-path mods/com.domain.modulea\njmod create jmods/com.domain.moduleb.jmod --class-path mods/com.domain.moduleb\n'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"list jmod contents"),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"jmod list jmods/com.domain.modulea.jmod"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"describe jmod contents"),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"jmod describe jmods/com.domain.modulea.jmod"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"extract classes from jmod contents"),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"jmod extract jmods/com.domain.modulea.jmod")))),(0,n.kt)("h3",{id:"custom-image-building-tools"},"Custom image building tools"),(0,n.kt)("h4",{id:"jlink"},"Jlink"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"a tool to create custom runtime images")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"self-contained images that include the JRE")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"it contains everything needed to run, no pre-installing of Java Runtime on the host is required")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"it strips away everything from the JDK that isn't used by the app"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"results in a smaller overall app distribution"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"build jlink from jmod"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'rm -rf jmods jlink\nmkdir jmods\n\njavac -d ./mods/ --module-source-path src $(find src -name "*.java")\n\njmod create jmods/com.domain.modulea.jmod --class-path mods/com.domain.modulea\njmod create jmods/com.domain.moduleb.jmod --class-path mods/com.domain.moduleb\n\njlink --module-path $JAVA_HOME/jmods:jmods --add-modules com.domain.modulea --output jlink --launcher run=com.domain.modulea/com.domain.modulea.ClassName\n'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"run jlink"),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"jlink/bin/run")))),(0,n.kt)("h4",{id:"jmod-hasing"},"Jmod hasing"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"a hash is a tag that marks interrelated Jmod files ensuring they are used together")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"it prevents files from different tags to be interchanged")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"hash jmod"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'rm -rf jmods jlink\nmkdir jmods\n\njavac -d ./mods/ --module-source-path src $(find src -name "*.java")\n\njmod create jmods/com.domain.modulea.jmod --class-path mods/com.domain.modulea\njmod create jmods/com.domain.moduleb.jmod --class-path mods/com.domain.moduleb\n\njmod hash --module-path jmods --hash-modules .*\n\njlink --module-path $JAVA_HOME/jmods:jmods --add-modules com.domain.modulea --output jlink --launcher run=com.domain.modulea/com.domain.modulea.ClassName\n'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"view hash with describe"),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"jmod describe jmods/com.domain.modulea.jmod")))),(0,n.kt)("h4",{id:"jar-files-vs-jmod-files"},"Jar files vs Jmod files"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"jar files"),(0,n.kt)("th",{parentName:"tr",align:null},"jmod files"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"support modules"),(0,n.kt)("td",{parentName:"tr",align:null},"use for custom run time image")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"use for running on a pre-installed JRE"),(0,n.kt)("td",{parentName:"tr",align:null},"can hold native libraries")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"use for packaging on custom images")))),(0,n.kt)("h3",{id:"backward-compatibility-with-classes"},"backward compatibility with classes"),(0,n.kt)("h4",{id:"jdeprscan"},"Jdeprscan"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a static analysis tool that scans code for uses of deprecated API elements"),(0,n.kt)("li",{parentName:"ul"},"use to show every method in the standard JDK libraries that have been deprecated or slated for removal"),(0,n.kt)("li",{parentName:"ul"},"scan jdk libraries",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"jdeprscan --list --release 6"))),(0,n.kt)("li",{parentName:"ul"},"list jdk libraries for removel",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"jdeprscan --list --for-removal"))),(0,n.kt)("li",{parentName:"ul"},"scan classes",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"jdeprscan --class-path classes classes")))),(0,n.kt)("h4",{id:"explicit-vs-unamed-modules"},"Explicit vs unamed modules"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"the module path is always searched first when loading classes, and if it's not found there, the class path is searched, so classes and modules can coexist")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"All nonmodule classes loaded from the class path are part of what is called the unnamed module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"The unnamed module is a new concept created to bridge modularized and unmodularized code")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Explicit modules are those defined via the module-info class")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Unnamed modules are special modules created by their runtime that contain all classes that are loaded from the class path")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"At most, there will be only one unnamed module at runtime")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Classes within the unnamed module can read any public class from an exported package of an explicit module"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"But the reverse is not true"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Explicit modules cannot read the classes from the unnamed module, nor can they depend upon the unnamed module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"unnamed modules exist only for interoperability between modularized and unmodularized code"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"This means that the axle class can access anything that the movement module exports without explicitly requiring it"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"if a package is defined in both the class path and the module path, then the class found in the module is loaded")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"These readability rules are important to preserve reliable configuration in JPMS")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Otherwise, JPMS would be broken")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"These constructs exist for backward compatibility and not as an end state")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"While unnamed modules can participate in JPMS, they are second-class citizens in the world of modularity because they can't fully take advantage of all the features")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"build unnamed module"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"src_1 has no ",(0,n.kt)("inlineCode",{parentName:"li"},"module-info.java")," file",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"however, the classes inside can still import from src_2")))),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'rm -rf mods bin classes\nmkdir mods bin classes\n\njavac -d ./mods/ --module-source-path src_2 $(find src_2 -name "*.java")\njavac -d ./classes/ -cp mods/com.domain.moduleb --source-path src_1 $(find src_1 -name "*.java")\n\njar --create --file ./bin/com.domain.moduleb.jar -C mods/com.domain.moduleb .\n'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"run unnamed module"),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"java --module-path bin --add-modules ALL-MODULE-PATH -cp classes com.domain.modulea.ClassName")))),(0,n.kt)("h3",{id:"backward-compatibility-with-jars"},"backward compatibility with JARs"),(0,n.kt)("h4",{id:"automatic-modules"},"Automatic modules"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a jar that was created from unmodularized code doesn't have the module info class but can still be used within JPMS"),(0,n.kt)("li",{parentName:"ul"},"created by the platform to hold classes loaded from a non-modular jar"),(0,n.kt)("li",{parentName:"ul"},"classes loaded from non-modular jars are contained by the platform inside automatic modules"),(0,n.kt)("li",{parentName:"ul"},"it helps with the in between world of partially modularized code bases and libraries"),(0,n.kt)("li",{parentName:"ul"},"it offer better integration with modules",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"but still is limited because they cannot depend upon explicit modules"),(0,n.kt)("li",{parentName:"ul"},"together with unnamed modules, they allow piecemeal migration to modules",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"and avoid a big bang migration approach"))))),(0,n.kt)("li",{parentName:"ul"},"it is class exclusive",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"this means that if a class exists in 2 different jar files",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"only 1 jar file will be used as automatic"),(0,n.kt)("li",{parentName:"ul"},"the other jar will be discarded in its entirety")))))),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"automatic and unnamed modules",src:t(3509).Z,width:"1450",height:"998"})),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"build automatic module"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"src_1 has no ",(0,n.kt)("inlineCode",{parentName:"li"},"module-info.java")," file",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"however, the classes inside can still import from src_2")))),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'rm -rf mods bin classes\nmkdir mods bin classes\n\njavac -d ./mods/ --module-source-path src_2 $(find src_2 -name "*.java")\n\njavac -d ./classes/ -cp mods/com.domain.moduleb --source-path src_1 $(find src_1 -name "*.java")\n\njar --create --file ./bin/com.domain.moduleb.jar -C mods/com.domain.moduleb .\njar --create --file ./bin/com.domain.modulea.jar -C classes .\n'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"run automatic module"),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"java --module-path bin --add-modules ALL-MODULE-PATH com.domain.modulea.ClassName")))))}u.isMDXComponent=!0},3509:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/automaticAndUnnamedModules-988670ed5a9532636c9157b165ab7f3f.png"},707:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/classpathHell-c245fd9b65b2b7869020a10856e0aa64.png"},1637:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/hackyQualifiedSolution-9d9c55cd4e7cd04311d1443ad65efab7.png"},3583:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/limitedQualifiedSolution-2e8ee1951013100dbdd76bd1b9b02265.png"},6742:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/modularStructure-5f6645ea05fc21c382992678bf2a735c.png"},9757:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/multiModularStructure-66d108e3e5750e9c82efd5012c228961.png"},1042:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/multiPackagesModule-7c8d5464bdf482f82c8dbacdf67321ba.png"},1566:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/openDependencies-ef3b0ffb4526c5fcf81448dff8ec7202.png"},144:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/optionalDependencies-be3838a1eda8574e43eaf80bd3dcd083.png"},9978:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/qualifiedSolution-7881f19befab16e8b5017a5786c5d41f.png"},6214:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/serviceDependencies-17e1082eaf68a42055f204a5f6003134.png"},6379:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/singlePackageModule-da78a8766708c17dba848393dd9cdf0e.png"},8747:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/withTransition-933e8c864f85e5908bcf4661a7431772.png"},7085:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/withoutQualifiedDependency-c48dfaf15e6c81127c253664b373092d.png"},7708:(e,a,t)=>{t.d(a,{Z:()=>l});const l=t.p+"assets/images/withoutTransition-4fa28129cf66044923eefc3ab4d00202.png"}}]);