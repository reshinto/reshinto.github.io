"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[92092],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),f=o,y=d["".concat(l,".").concat(f)]||d[f]||c[f]||a;return n?r.createElement(y,i(i({ref:t},u),{},{components:n})):r.createElement(y,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},52288:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(83117),o=(n(67294),n(3905));const a={},i="Swift Example",s={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Prototype/swift/readme",id:"interviewPrep/designPatterns/Creational_patterns/Prototype/swift/readme",title:"Swift Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Prototype/swift",slug:"/interviewPrep/designPatterns/Creational_patterns/Prototype/swift/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 3",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/python/example3"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/swift/example2"}},l={},p=[],u={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"swift-example"},"Swift Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'/// Prototype Design Pattern\n///\n/// Intent: Lets you copy existing objects without making your code dependent on\n/// their classes.\n\nimport XCTest\n\n/// Swift has built-in cloning support. To add cloning support to your class,\n/// you need to implement the NSCopying protocol in that class and provide the\n/// implementation for the `copy` method.\nclass BaseClass: NSCopying, Equatable {\n\n    private var intValue = 1\n    private var stringValue = "Value"\n\n    required init(intValue: Int = 1, stringValue: String = "Value") {\n\n        self.intValue = intValue\n        self.stringValue = stringValue\n    }\n\n    /// MARK: - NSCopying\n    func copy(with zone: NSZone? = nil) -> Any {\n        let prototype = type(of: self).init()\n        prototype.intValue = intValue\n        prototype.stringValue = stringValue\n        print("Values defined in BaseClass have been cloned!")\n        return prototype\n    }\n\n    /// MARK: - Equatable\n    static func == (lhs: BaseClass, rhs: BaseClass) -> Bool {\n        return lhs.intValue == rhs.intValue && lhs.stringValue == rhs.stringValue\n    }\n}\n\n/// Subclasses can override the base `copy` method to copy their own data into\n/// the resulting object. But you should always call the base method first.\nclass SubClass: BaseClass {\n\n    private var boolValue = true\n\n    func copy() -> Any {\n        return copy(with: nil)\n    }\n\n    override func copy(with zone: NSZone?) -> Any {\n        guard let prototype = super.copy(with: zone) as? SubClass else {\n            return SubClass() // oops\n        }\n        prototype.boolValue = boolValue\n        print("Values defined in SubClass have been cloned!")\n        return prototype\n    }\n}\n\n/// The client code.\nclass Client {\n    // ...\n    static func someClientCode() {\n        let original = SubClass(intValue: 2, stringValue: "Value2")\n\n        guard let copy = original.copy() as? SubClass else {\n            XCTAssert(false)\n            return\n        }\n\n        /// See implementation of `Equatable` protocol for more details.\n        XCTAssert(copy == original)\n\n        print("The original object is equal to the copied object!")\n    }\n    // ...\n}\n\n/// Let\'s see how it all works together.\nclass PrototypeConceptual: XCTestCase {\n\n    func testPrototype_NSCopying() {\n        Client.someClientCode()\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Values defined in BaseClass have been cloned!\nValues defined in SubClass have been cloned!\nThe original object is equal to the copied object!\n")))}c.isMDXComponent=!0}}]);