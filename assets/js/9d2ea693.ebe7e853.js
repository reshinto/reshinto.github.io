"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9626],{3905:(n,e,r)=>{r.d(e,{Zo:()=>d,kt:()=>y});var i=r(67294);function t(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function a(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,i)}return r}function o(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){t(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function l(n,e){if(null==n)return{};var r,i,t=function(n,e){if(null==n)return{};var r,i,t={},a=Object.keys(n);for(i=0;i<a.length;i++)r=a[i],e.indexOf(r)>=0||(t[r]=n[r]);return t}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(i=0;i<a.length;i++)r=a[i],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(t[r]=n[r])}return t}var c=i.createContext({}),u=function(n){var e=i.useContext(c),r=e;return n&&(r="function"==typeof n?n(e):o(o({},e),n)),r},d=function(n){var e=u(n.components);return i.createElement(c.Provider,{value:e},n.children)},s={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},f=i.forwardRef((function(n,e){var r=n.components,t=n.mdxType,a=n.originalType,c=n.parentName,d=l(n,["components","mdxType","originalType","parentName"]),f=u(r),y=t,p=f["".concat(c,".").concat(y)]||f[y]||s[y]||a;return r?i.createElement(p,o(o({ref:e},d),{},{components:r})):i.createElement(p,o({ref:e},d))}));function y(n,e){var r=arguments,t=e&&e.mdxType;if("string"==typeof n||t){var a=r.length,o=new Array(a);o[0]=f;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=n,l.mdxType="string"==typeof n?n:t,o[1]=l;for(var u=2;u<a;u++)o[u]=r[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,r)}f.displayName="MDXCreateElement"},8557:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var i=r(83117),t=(r(67294),r(3905));const a={},o="Decimal To Binary",l={unversionedId:"interviewPrep/algorithms_and_techniques/recursion/decimalToBinary",id:"interviewPrep/algorithms_and_techniques/recursion/decimalToBinary",title:"Decimal To Binary",description:"- before working on the recursion, need to think about the following",source:"@site/docs/interviewPrep/algorithms_and_techniques/recursion/decimalToBinary.md",sourceDirName:"interviewPrep/algorithms_and_techniques/recursion",slug:"/interviewPrep/algorithms_and_techniques/recursion/decimalToBinary",permalink:"/docs/interviewPrep/algorithms_and_techniques/recursion/decimalToBinary",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/recursion/decimalToBinary.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Recursion",permalink:"/docs/interviewPrep/algorithms_and_techniques/recursion/"},next:{title:"Palindrome",permalink:"/docs/interviewPrep/algorithms_and_techniques/recursion/palindrome"}},c={},u=[{value:"Iterative solution",id:"iterative-solution",level:3}],d={toc:u};function s(n){let{components:e,...r}=n;return(0,t.kt)("wrapper",(0,i.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"decimal-to-binary"},"Decimal To Binary"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"Convert decimal base 10 values to binary base 2 values\n\ninput: 233\noutput: 1110 1001\n\nround down\n233 / 2 = 116, 233 % 2 = 1 remainder\n116 / 2 = 58, 116 % 2 = 0 remainder\n58 / 2 = 29, 58 % 2 = 0 remainder\n29 / 2 = 14, 29 % 2 = 1 remainder\n14 / 2 = 7, 14 % 2 = 0 remainder\n7 / 2 = 3, 7 % 2 = 1 remainder\n3 / 2 = 1, 3 % 2 = 1 remainder\n1 / 2 = 0, 1 % 2 = 1 remainder  (result is 0, this is the base case)\n...\n")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"before working on the recursion, need to think about the following",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"What is the base case / stopping condition?"))),(0,t.kt)("li",{parentName:"ul"},"What is the smallest amount of work I can do in each iteration?")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'function findBinary(decimal, result = "") {\n  if (decimal === 0) {\n    return result;\n  }\n  result = (decimal % 2) + result;\n  return findBinary(Math.floor(decimal / 2), result); // returns a string value\n}\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'input: 233\n\ncurrent input is 233\nwhen function is called, the return value is added to the call stack\n|----------------------|\n| findBinary(116, "1") |\n|----------------------|\n\nmove to the next recursion call\ncurrent input is 116\nwhen function is called, the return value is added to the call stack\n\n|----------------------|\n| findBinary(58, "01") |\n| findBinary(116, "1") |\n|----------------------|\n\nmove to the next recursion call\ncurrent input is 58\nwhen function is called, the return value is added to the call stack\n\n|-----------------------|\n| findBinary(29, "001") |\n| findBinary(58, "01")  |\n| findBinary(116, "1")  |\n|-----------------------|\n\nmove to the next recursion call\ncurrent input is 29\nwhen function is called, the return value is added to the call stack\n\n|------------------------|\n| findBinary(14, "1001") |\n| findBinary(29, "001")  |\n| findBinary(58, "01")   |\n| findBinary(116, "1")   |\n|------------------------|\n\nmove to the next recursion call\ncurrent input is 14\nwhen function is called, the return value is added to the call stack\n\n|------------------------|\n| findBinary(7, "01001") |\n| findBinary(14, "1001") |\n| findBinary(29, "001")  |\n| findBinary(58, "01")   |\n| findBinary(116, "1")   |\n|------------------------|\n\nmove to the next recursion call\ncurrent input is 7\nwhen function is called, the return value is added to the call stack\n\n|-------------------------|\n| findBinary(3, "101001") |\n| findBinary(7, "01001")  |\n| findBinary(14, "1001")  |\n| findBinary(29, "001")   |\n| findBinary(58, "01")    |\n| findBinary(116, "1")    |\n|-------------------------|\n\nmove to the next recursion call\ncurrent input is 3\nwhen function is called, the return value is added to the call stack\n\n|--------------------------|\n| findBinary(1, "1101001") |\n| findBinary(3, "101001")  |\n| findBinary(7, "01001")   |\n| findBinary(14, "1001")   |\n| findBinary(29, "001")    |\n| findBinary(58, "01")     |\n| findBinary(116, "1")     |\n|--------------------------|\n\nmove to the next recursion call\ncurrent input is 1\nwhen function is called, the return value is added to the call stack\n\n|---------------------------|\n| findBinary(0, "11101001") |\n| findBinary(1, "1101001")  |\n| findBinary(3, "101001")   |\n| findBinary(7, "01001")    |\n| findBinary(14, "1001")    |\n| findBinary(29, "001")     |\n| findBinary(58, "01")      |\n| findBinary(116, "1")      |\n|---------------------------|\n\nmove to the next recursion call\ncurrent input is 0\nsince return value for this has hit the base case,\nit will start executing by poping the top stack frame from the call stack\n\nreturn result: "11101001"\n|---------------------------|\n| "11101001"                |\n| findBinary(1, "1101001")  |\n| findBinary(3, "101001")   |\n| findBinary(7, "01001")    |\n| findBinary(14, "1001")    |\n| findBinary(29, "001")     |\n| findBinary(58, "01")      |\n| findBinary(116, "1")      |\n|---------------------------|\n\nreturn result: "11101001"\n|---------------------------|\n|                           |\n| "11101001"                |\n| findBinary(3, "101001")   |\n| findBinary(7, "01001")    |\n| findBinary(14, "1001")    |\n| findBinary(29, "001")     |\n| findBinary(58, "01")      |\n| findBinary(116, "1")      |\n|---------------------------|\n\nreturn result: "11101001"\n|---------------------------|\n|                           |\n|                           |\n| "11101001"                |\n| findBinary(7, "01001")    |\n| findBinary(14, "1001")    |\n| findBinary(29, "001")     |\n| findBinary(58, "01")      |\n| findBinary(116, "1")      |\n|---------------------------|\n\nreturn result: "11101001"\n|---------------------------|\n|                           |\n|                           |\n|                           |\n| "11101001"                |\n| findBinary(14, "1001")    |\n| findBinary(29, "001")     |\n| findBinary(58, "01")      |\n| findBinary(116, "1")      |\n|---------------------------|\n\nreturn result: "11101001"\n|---------------------------|\n|                           |\n|                           |\n|                           |\n|                           |\n| "11101001"                |\n| findBinary(29, "001")     |\n| findBinary(58, "01")      |\n| findBinary(116, "1")      |\n|---------------------------|\n\nreturn result: "11101001"\n|---------------------------|\n|                           |\n|                           |\n|                           |\n|                           |\n|                           |\n| "11101001"                |\n| findBinary(58, "01")      |\n| findBinary(116, "1")      |\n|---------------------------|\n\nreturn result: "11101001"\n|---------------------------|\n|                           |\n|                           |\n|                           |\n|                           |\n|                           |\n|                           |\n| "11101001"                |\n| findBinary(116, "1")      |\n|---------------------------|\n\nreturn result: "11101001"\n|---------------------------|\n|                           |\n|                           |\n|                           |\n|                           |\n|                           |\n|                           |\n|                           |\n| "11101001"                |\n|---------------------------|\n\nreturn result: "11101001"\n|---------------------------|\n|                           |\n|                           |\n|                           |\n|                           |\n|                           |\n|                           |\n|                           |\n|                           |\n|---------------------------|\n')),(0,t.kt)("h3",{id:"iterative-solution"},"Iterative solution"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'function findBinary(decimal, result = "") {\n  if (decimal === 0) return result;\n\n  while (decimal > 0) {\n    const remainder = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    result = remainder + result;\n  }\n  return result;\n}\n')))}s.isMDXComponent=!0}}]);