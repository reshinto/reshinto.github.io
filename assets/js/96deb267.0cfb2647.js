"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[1214],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=c(t),d=r,g=h["".concat(l,".").concat(d)]||h[d]||u[d]||s;return t?a.createElement(g,i(i({ref:n},p),{},{components:t})):a.createElement(g,i({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=h;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},29880:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=t(83117),r=(t(67294),t(3905));const s={},i="Python Example",o={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Singleton/python/readme",id:"interviewPrep/designPatterns/Creational_patterns/Singleton/python/readme",title:"Python Example",description:"- Non Thread Safe",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Singleton/python",slug:"/interviewPrep/designPatterns/Creational_patterns/Singleton/python/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/javascript/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Singleton/python/example2"}},l={},c=[],p={toc:c};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-example"},"Python Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Non Thread Safe")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"""\nSingleton Design Pattern\n\nIntent: Lets you ensure that a class has only one instance, while providing a\nglobal access point to this instance. One instance per each subclass (if any).\n"""\n\n\nclass SingletonMeta(type):\n    """\n    The Singleton class can be implemented in different ways in Python. Some\n    possible methods include: base class, decorator, metaclass. We will use the\n    metaclass because it is best suited for this purpose.\n    """\n\n    _instances = {}\n\n    def __call__(cls, *args, **kwargs):\n        """\n        Possible changes to the value of the `__init__` argument do not affect\n        the returned instance.\n        """\n        if cls not in cls._instances:\n            instance = super().__call__(*args, **kwargs)\n            cls._instances[cls] = instance\n        return cls._instances[cls]\n\n\nclass Singleton(metaclass=SingletonMeta):\n    def some_business_logic(self):\n        """\n        Finally, any singleton should define some business logic, which can be\n        executed on its instance.\n        """\n\n        # ...\n\n\nif __name__ == "__main__":\n    # The client code.\n\n    s1 = Singleton()\n    s2 = Singleton()\n\n    if id(s1) == id(s2):\n        print("Singleton works, both variables contain the same instance.")\n    else:\n        print("Singleton failed, variables contain different instances.")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Singleton works, both variables contain the same instance.\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Thread Safe")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"""\nSingleton Design Pattern\n\nIntent: Lets you ensure that a class has only one instance, while providing a\nglobal access point to this instance. One instance per each subclass (if any).\n"""\n\nfrom threading import Lock, Thread\n\n\nclass SingletonMeta(type):\n    """\n    This is a thread-safe implementation of Singleton.\n    """\n\n    _instances = {}\n\n    _lock: Lock = Lock()\n    """\n    We now have a lock object that will be used to synchronize threads during\n    first access to the Singleton.\n    """\n\n    def __call__(cls, *args, **kwargs):\n        """\n        Possible changes to the value of the `__init__` argument do not affect\n        the returned instance.\n        """\n        # Now, imagine that the program has just been launched. Since there\'s no\n        # Singleton instance yet, multiple threads can simultaneously pass the\n        # previous conditional and reach this point almost at the same time. The\n        # first of them will acquire lock and will proceed further, while the\n        # rest will wait here.\n        with cls._lock:\n            # The first thread to acquire the lock, reaches this conditional,\n            # goes inside and creates the Singleton instance. Once it leaves the\n            # lock block, a thread that might have been waiting for the lock\n            # release may then enter this section. But since the Singleton field\n            # is already initialized, the thread won\'t create a new object.\n            if cls not in cls._instances:\n                instance = super().__call__(*args, **kwargs)\n                cls._instances[cls] = instance\n        return cls._instances[cls]\n\n\nclass Singleton(metaclass=SingletonMeta):\n    value: str = None\n    """\n    We\'ll use this property to prove that our Singleton really works.\n    """\n\n    def __init__(self, value: str) -> None:\n        self.value = value\n\n    def some_business_logic(self):\n        """\n        Finally, any singleton should define some business logic, which can be\n        executed on its instance.\n        """\n\n\ndef test_singleton(value: str) -> None:\n    singleton = Singleton(value)\n    print(singleton.value)\n\n\nif __name__ == "__main__":\n    # The client code.\n\n    print("If you see the same value, then singleton was reused (yay!)\\n"\n          "If you see different values, "\n          "then 2 singletons were created (booo!!)\\n\\n"\n          "RESULT:\\n")\n\n    process1 = Thread(target=test_singleton, args=("FOO",))\n    process2 = Thread(target=test_singleton, args=("BAR",))\n    process1.start()\n    process2.start()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"If you see the same value, then singleton was reused (yay!)\nIf you see different values, then 2 singletons were created (booo!!)\n\nRESULT:\n\nFOO\nFOO\n")))}u.isMDXComponent=!0}}]);