"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9164],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),p=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(r),m=n,h=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return r?a.createElement(h,l(l({ref:t},c),{},{components:r})):a.createElement(h,l({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var p=2;p<i;p++)l[p]=r[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},21798:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=r(87462),n=(r(67294),r(3905));const i={},l="Adapter design pattern",s={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Adapter/readme",id:"interviewPrep/designPatterns/Structural_patterns/Adapter/readme",title:"Adapter design pattern",description:"- original definition",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Adapter",slug:"/interviewPrep/designPatterns/Structural_patterns/Adapter/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Single Responsibility Principle",permalink:"/docs/interviewPrep/designPatterns/SOLID_design_principles/SingleResponsibilityPrinciple/"},next:{title:"Bridge pattern",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/"}},o={},p=[{value:"When to use",id:"when-to-use",level:2},{value:"Structure",id:"structure",level:2},{value:"Summary",id:"summary",level:2}],c={toc:p};function u(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"adapter-design-pattern"},"Adapter design pattern"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"original definition",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Convert the interface of a class into another interface clients expect"),(0,n.kt)("li",{parentName:"ul"},"Adapter lets classes work together that couldn't otherwise because of incompatible interfaces"))),(0,n.kt)("li",{parentName:"ul"},"Adapters help mitigate incompatibilities between interfaces by adapting 1 interface to another")),(0,n.kt)("h2",{id:"when-to-use"},"When to use"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Make old component usable in a new system"),(0,n.kt)("li",{parentName:"ul"},'Make an "off-the-shelf" solution usable in a system that is not fully compatible'),(0,n.kt)("li",{parentName:"ul"},"example",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"if we are using a class, and a consumer is using the methods"),(0,n.kt)("li",{parentName:"ul"},"then we need to switch from the current class to a better class",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"the better class offers a different interface and will require the client code to be refactored to use it"),(0,n.kt)("li",{parentName:"ul"},"migration will not be easy, especially if it is a large enterprise app where methods are deeply integrated and extensively used"))),(0,n.kt)("li",{parentName:"ul"},"will need a decoupled solution which is easy to implement and does not involve refactoring as much as possible",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"by using the adapter pattern, refactoring can be minimized"),(0,n.kt)("li",{parentName:"ul"},"done by mapping methods from better class to how our clients expects"))),(0,n.kt)("li",{parentName:"ul"},"the adapter helps the consumer adapt to a new interface by using the pattern")))),(0,n.kt)("h2",{id:"structure"},"Structure"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Adapter",src:r(60709).Z,width:"1202",height:"708"})),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The Client is a class that contains the existing business logic of the program.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The Client Interface describes a protocol that other classes must follow to be able to collaborate with the client code.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The Service is some useful class (usually 3rd-party or legacy)."),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The client can\u2019t use this class directly because it has an incompatible interface."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The Adapter is a class that\u2019s able to work with both the client and the service: it implements the client interface, while wrapping the service object."),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The adapter receives calls from the client via the adapter interface and translates them into calls to the wrapped service object in a format it can understand."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The client code doesn\u2019t get coupled to the concrete adapter class as long as it works with the adapter via the client interface."),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Thanks to this, you can introduce new types of adapters into the program without breaking the existing client code."),(0,n.kt)("li",{parentName:"ul"},"This can be useful when the interface of the service class gets changed or replaced: you can just create a new adapter class without changing the client code.")))),(0,n.kt)("h2",{id:"summary"},"Summary"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the adapter pattern is used to create a bridge between 2 different interfaces"),(0,n.kt)("li",{parentName:"ul"},"removes incompatibilities between the interfaces"),(0,n.kt)("li",{parentName:"ul"},"prevents or minimizes refactoring client application code"),(0,n.kt)("li",{parentName:"ul"},"lets you build packages with an opinionated API, with custom adapters for maximum compatibility")))}u.isMDXComponent=!0},60709:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/adapter-c29cd9a356033ef7907178f4dc70e94d.png"}}]);