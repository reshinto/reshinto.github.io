"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[83480],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),h=o,f=u["".concat(i,".").concat(h)]||u[h]||d[h]||a;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},50204:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=r(83117),o=(r(67294),r(3905));const a={},s="Python Example",c={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Factory/python/readme",id:"interviewPrep/designPatterns/Creational_patterns/Factory/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Factory/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Factory/python",slug:"/interviewPrep/designPatterns/Creational_patterns/Factory/python/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Factory/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/javascript/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/python/example2"}},i={},l=[],p={toc:l};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"python-example"},"Python Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'"""\nFactory Method Design Pattern\n\nIntent: Provides an interface for creating objects in a superclass, but allows\nsubclasses to alter the type of objects that will be created.\n"""\n\n\nfrom __future__ import annotations\nfrom abc import ABC, abstractmethod\n\n\nclass Creator(ABC):\n    """\n    The Creator class declares the factory method that is supposed to return an\n    object of a Product class. The Creator\'s subclasses usually provide the\n    implementation of this method.\n    """\n\n    @abstractmethod\n    def factory_method(self):\n        """\n        Note that the Creator may also provide some default implementation of\n        the factory method.\n        """\n        pass\n\n    def some_operation(self) -> str:\n        """\n        Also note that, despite its name, the Creator\'s primary responsibility\n        is not creating products. Usually, it contains some core business logic\n        that relies on Product objects, returned by the factory method.\n        Subclasses can indirectly change that business logic by overriding the\n        factory method and returning a different type of product from it.\n        """\n\n        # Call the factory method to create a Product object.\n        product = self.factory_method()\n\n        # Now, use the product.\n        result = f"Creator: The same creator\'s code has just worked with {product.operation()}"\n\n        return result\n\n\n"""\nConcrete Creators override the factory method in order to change the resulting\nproduct\'s type.\n"""\n\n\nclass ConcreteCreator1(Creator):\n    """\n    Note that the signature of the method still uses the abstract product type,\n    even though the concrete product is actually returned from the method. This\n    way the Creator can stay independent of concrete product classes.\n    """\n\n    def factory_method(self) -> Product:\n        return ConcreteProduct1()\n\n\nclass ConcreteCreator2(Creator):\n    def factory_method(self) -> Product:\n        return ConcreteProduct2()\n\n\nclass Product(ABC):\n    """\n    The Product interface declares the operations that all concrete products\n    must implement.\n    """\n\n    @abstractmethod\n    def operation(self) -> str:\n        pass\n\n\n"""\nConcrete Products provide various implementations of the Product interface.\n"""\n\n\nclass ConcreteProduct1(Product):\n    def operation(self) -> str:\n        return "{Result of the ConcreteProduct1}"\n\n\nclass ConcreteProduct2(Product):\n    def operation(self) -> str:\n        return "{Result of the ConcreteProduct2}"\n\n\ndef client_code(creator: Creator) -> None:\n    """\n    The client code works with an instance of a concrete creator, albeit through\n    its base interface. As long as the client keeps working with the creator via\n    the base interface, you can pass it any creator\'s subclass.\n    """\n\n    print(f"Client: I\'m not aware of the creator\'s class, but it still works.\\n"\n          f"{creator.some_operation()}", end="")\n\n\nif __name__ == "__main__":\n    print("App: Launched with the ConcreteCreator1.")\n    client_code(ConcreteCreator1())\n    print("\\n")\n\n    print("App: Launched with the ConcreteCreator2.")\n    client_code(ConcreteCreator2())\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"App: Launched with the ConcreteCreator1.\nClient: I'm not aware of the creator's class, but it still works.\nCreator: The same creator's code has just worked with {Result of the ConcreteProduct1}\n\nApp: Launched with the ConcreteCreator2.\nClient: I'm not aware of the creator's class, but it still works.\nCreator: The same creator's code has just worked with {Result of the ConcreteProduct2}\n")))}d.isMDXComponent=!0}}]);