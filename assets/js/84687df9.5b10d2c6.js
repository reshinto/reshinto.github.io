"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[69819],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),u=r,v=c["".concat(d,".").concat(u)]||c[u]||p[u]||i;return n?a.createElement(v,o(o({ref:t},m),{},{components:n})):a.createElement(v,o({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},37413:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(83117),r=(n(67294),n(3905));const i={},o="Java Example",l={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Mediator/java/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Mediator/java/readme",title:"Java Example",description:"- components",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Mediator/java",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Mediator/java/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/go/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/javascript/"}},d={},s=[],m={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"java-example"},"Java Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"components"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"components/AddButton.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.mediator.example.components;\n\nimport refactoring_guru.mediator.example.mediator.Mediator;\nimport refactoring_guru.mediator.example.mediator.Note;\n\nimport javax.swing.*;\nimport java.awt.event.ActionEvent;\n\n/**\n * Concrete components don\'t talk with each other. They have only one\n* communication channel\u2013sending requests to the mediator.\n*/\npublic class AddButton extends JButton implements Component {\n    private Mediator mediator;\n\n    public AddButton() {\n        super("Add");\n    }\n\n    @Override\n    public void setMediator(Mediator mediator) {\n        this.mediator = mediator;\n    }\n\n    @Override\n    protected void fireActionPerformed(ActionEvent actionEvent) {\n        mediator.addNewNote(new Note());\n    }\n\n    @Override\n    public String getName() {\n        return "AddButton";\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"components/Component.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.mediator.example.components;\n\nimport refactoring_guru.mediator.example.mediator.Mediator;\n\n/**\n * Common component interface.\n*/\npublic interface Component {\n    void setMediator(Mediator mediator);\n    String getName();\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"components/DeleteButton.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.mediator.example.components;\n\nimport refactoring_guru.mediator.example.mediator.Mediator;\n\nimport javax.swing.*;\nimport java.awt.event.ActionEvent;\n\n/**\n * Concrete components don\'t talk with each other. They have only one\n* communication channel\u2013sending requests to the mediator.\n*/\npublic class DeleteButton extends JButton  implements Component {\n    private Mediator mediator;\n\n    public DeleteButton() {\n        super("Del");\n    }\n\n    @Override\n    public void setMediator(Mediator mediator) {\n        this.mediator = mediator;\n    }\n\n    @Override\n    protected void fireActionPerformed(ActionEvent actionEvent) {\n        mediator.deleteNote();\n    }\n\n    @Override\n    public String getName() {\n        return "DelButton";\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"components/Filter.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.mediator.example.components;\n\nimport refactoring_guru.mediator.example.mediator.Mediator;\nimport refactoring_guru.mediator.example.mediator.Note;\n\nimport javax.swing.*;\nimport java.awt.event.KeyEvent;\nimport java.util.ArrayList;\n\n/**\n * Concrete components don\'t talk with each other. They have only one\n* communication channel\u2013sending requests to the mediator.\n*/\npublic class Filter extends JTextField implements Component {\n    private Mediator mediator;\n    private ListModel listModel;\n\n    public Filter() {}\n\n    @Override\n    public void setMediator(Mediator mediator) {\n        this.mediator = mediator;\n    }\n\n    @Override\n    protected void processComponentKeyEvent(KeyEvent keyEvent) {\n        String start = getText();\n        searchElements(start);\n    }\n\n    public void setList(ListModel listModel) {\n        this.listModel = listModel;\n    }\n\n    private void searchElements(String s) {\n        if (listModel == null) {\n            return;\n        }\n\n        if (s.equals("")) {\n            mediator.setElementsList(listModel);\n            return;\n        }\n\n        ArrayList<Note> notes = new ArrayList<>();\n        for (int i = 0; i < listModel.getSize(); i++) {\n            notes.add((Note) listModel.getElementAt(i));\n        }\n        DefaultListModel<Note> listModel = new DefaultListModel<>();\n        for (Note note : notes) {\n            if (note.getName().contains(s)) {\n                listModel.addElement(note);\n            }\n        }\n        mediator.setElementsList(listModel);\n    }\n\n    @Override\n    public String getName() {\n        return "Filter";\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"components/List.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'\nimport refactoring_guru.mediator.example.mediator.Mediator;\nimport refactoring_guru.mediator.example.mediator.Note;\n\nimport javax.swing.*;\n\n/**\n * Concrete components don\'t talk with each other. They have only one\n* communication channel\u2013sending requests to the mediator.\n*/\n@SuppressWarnings("unchecked")\npublic class List extends JList implements Component {\n    private Mediator mediator;\n    private final DefaultListModel LIST_MODEL;\n\n    public List(DefaultListModel listModel) {\n        super(listModel);\n        this.LIST_MODEL = listModel;\n        setModel(listModel);\n        this.setLayoutOrientation(JList.VERTICAL);\n        Thread thread = new Thread(new Hide(this));\n        thread.start();\n    }\n\n    @Override\n    public void setMediator(Mediator mediator) {\n        this.mediator = mediator;\n    }\n\n    public void addElement(Note note) {\n        LIST_MODEL.addElement(note);\n        int index = LIST_MODEL.size() - 1;\n        setSelectedIndex(index);\n        ensureIndexIsVisible(index);\n        mediator.sendToFilter(LIST_MODEL);\n    }\n\n    public void deleteElement() {\n        int index = this.getSelectedIndex();\n        try {\n            LIST_MODEL.remove(index);\n            mediator.sendToFilter(LIST_MODEL);\n        } catch (ArrayIndexOutOfBoundsException ignored) {}\n    }\n\n    public Note getCurrentElement() {\n        return (Note)getSelectedValue();\n    }\n\n    @Override\n    public String getName() {\n        return "List";\n    }\n\n    private class Hide implements Runnable {\n        private List list;\n\n        Hide(List list) {\n            this.list = list;\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                try {\n                    Thread.sleep(300);\n                } catch (InterruptedException ex) {\n                    ex.printStackTrace();\n                }\n                if (list.isSelectionEmpty()) {\n                    mediator.hideElements(true);\n                } else {\n                    mediator.hideElements(false);\n                }\n            }\n        }\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"components/SaveButton.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.mediator.example.components;\n\nimport refactoring_guru.mediator.example.mediator.Mediator;\n\nimport javax.swing.*;\nimport java.awt.event.ActionEvent;\n\n/**\n * Concrete components don\'t talk with each other. They have only one\n* communication channel\u2013sending requests to the mediator.\n*/\npublic class SaveButton extends JButton implements Component {\n    private Mediator mediator;\n\n    public SaveButton() {\n        super("Save");\n    }\n\n    @Override\n    public void setMediator(Mediator mediator) {\n        this.mediator = mediator;\n    }\n\n    @Override\n    protected void fireActionPerformed(ActionEvent actionEvent) {\n        mediator.saveChanges();\n    }\n\n    @Override\n    public String getName() {\n        return "SaveButton";\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"components/TextBox.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.mediator.example.components;\n\nimport refactoring_guru.mediator.example.mediator.Mediator;\n\nimport javax.swing.*;\nimport java.awt.event.KeyEvent;\n\n/**\n * Concrete components don\'t talk with each other. They have only one\n* communication channel\u2013sending requests to the mediator.\n*/\npublic class TextBox extends JTextArea implements Component {\n    private Mediator mediator;\n\n    @Override\n    public void setMediator(Mediator mediator) {\n        this.mediator = mediator;\n    }\n\n    @Override\n    protected void processComponentKeyEvent(KeyEvent keyEvent) {\n        mediator.markNote();\n    }\n\n    @Override\n    public String getName() {\n        return "TextBox";\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"components/Title.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.mediator.example.components;\n\nimport refactoring_guru.mediator.example.mediator.Mediator;\n\nimport javax.swing.*;\nimport java.awt.event.KeyEvent;\n\n/**\n * Concrete components don\'t talk with each other. They have only one\n* communication channel\u2013sending requests to the mediator.\n*/\npublic class Title extends JTextField implements Component {\n    private Mediator mediator;\n\n    @Override\n    public void setMediator(Mediator mediator) {\n        this.mediator = mediator;\n    }\n\n    @Override\n    protected void processComponentKeyEvent(KeyEvent keyEvent) {\n        mediator.markNote();\n    }\n\n    @Override\n    public String getName() {\n        return "Title";\n    }\n}\n'))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"mediator"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"mediator/Editor.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.mediator.example.mediator;\n\nimport refactoring_guru.mediator.example.components.*;\nimport refactoring_guru.mediator.example.components.Component;\nimport refactoring_guru.mediator.example.components.List;\n\nimport javax.swing.*;\nimport javax.swing.border.LineBorder;\nimport java.awt.*;\n\n/**\n * Concrete mediator. All chaotic communications between concrete components\n* have been extracted to the mediator. Now components only talk with the\n* mediator, which knows who has to handle a request.\n*/\npublic class Editor implements Mediator {\n    private Title title;\n    private TextBox textBox;\n    private AddButton add;\n    private DeleteButton del;\n    private SaveButton save;\n    private List list;\n    private Filter filter;\n\n    private JLabel titleLabel = new JLabel("Title:");\n    private JLabel textLabel = new JLabel("Text:");\n    private JLabel label = new JLabel("Add or select existing note to proceed...");\n\n    /**\n     * Here the registration of components by the mediator.\n     */\n    @Override\n    public void registerComponent(Component component) {\n        component.setMediator(this);\n        switch (component.getName()) {\n            case "AddButton":\n                add = (AddButton)component;\n                break;\n            case "DelButton":\n                del = (DeleteButton)component;\n                break;\n            case "Filter":\n                filter = (Filter)component;\n                break;\n            case "List":\n                list = (List)component;\n                this.list.addListSelectionListener(listSelectionEvent -> {\n                    Note note = (Note)list.getSelectedValue();\n                    if (note != null) {\n                        getInfoFromList(note);\n                    } else {\n                        clear();\n                    }\n                });\n                break;\n            case "SaveButton":\n                save = (SaveButton)component;\n                break;\n            case "TextBox":\n                textBox = (TextBox)component;\n                break;\n            case "Title":\n                title = (Title)component;\n                break;\n        }\n    }\n\n    /**\n     * Various methods to handle requests from particular components.\n     */\n    @Override\n    public void addNewNote(Note note) {\n        title.setText("");\n        textBox.setText("");\n        list.addElement(note);\n    }\n\n    @Override\n    public void deleteNote() {\n        list.deleteElement();\n    }\n\n    @Override\n    public void getInfoFromList(Note note) {\n        title.setText(note.getName().replace(\'*\', \' \'));\n        textBox.setText(note.getText());\n    }\n\n    @Override\n    public void saveChanges() {\n        try {\n            Note note = (Note) list.getSelectedValue();\n            note.setName(title.getText());\n            note.setText(textBox.getText());\n            list.repaint();\n        } catch (NullPointerException ignored) {}\n    }\n\n    @Override\n    public void markNote() {\n        try {\n            Note note = list.getCurrentElement();\n            String name = note.getName();\n            if (!name.endsWith("*")) {\n                note.setName(note.getName() + "*");\n            }\n            list.repaint();\n        } catch (NullPointerException ignored) {}\n    }\n\n    @Override\n    public void clear() {\n        title.setText("");\n        textBox.setText("");\n    }\n\n    @Override\n    public void sendToFilter(ListModel listModel) {\n        filter.setList(listModel);\n    }\n\n    @SuppressWarnings("unchecked")\n    @Override\n    public void setElementsList(ListModel list) {\n        this.list.setModel(list);\n        this.list.repaint();\n    }\n\n    @Override\n    public void hideElements(boolean flag) {\n        titleLabel.setVisible(!flag);\n        textLabel.setVisible(!flag);\n        title.setVisible(!flag);\n        textBox.setVisible(!flag);\n        save.setVisible(!flag);\n        label.setVisible(flag);\n    }\n\n    @Override\n    public void createGUI() {\n        JFrame notes = new JFrame("Notes");\n        notes.setSize(960, 600);\n        notes.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        JPanel left = new JPanel();\n        left.setBorder(new LineBorder(Color.BLACK));\n        left.setSize(320, 600);\n        left.setLayout(new BoxLayout(left, BoxLayout.Y_AXIS));\n        JPanel filterPanel = new JPanel();\n        filterPanel.add(new JLabel("Filter:"));\n        filter.setColumns(20);\n        filterPanel.add(filter);\n        filterPanel.setPreferredSize(new Dimension(280, 40));\n        JPanel listPanel = new JPanel();\n        list.setFixedCellWidth(260);\n        listPanel.setSize(320, 470);\n        JScrollPane scrollPane = new JScrollPane(list);\n        scrollPane.setPreferredSize(new Dimension(275, 410));\n        listPanel.add(scrollPane);\n        JPanel buttonPanel = new JPanel();\n        add.setPreferredSize(new Dimension(85, 25));\n        buttonPanel.add(add);\n        del.setPreferredSize(new Dimension(85, 25));\n        buttonPanel.add(del);\n        buttonPanel.setLayout(new FlowLayout());\n        left.add(filterPanel);\n        left.add(listPanel);\n        left.add(buttonPanel);\n        JPanel right = new JPanel();\n        right.setLayout(null);\n        right.setSize(640, 600);\n        right.setLocation(320, 0);\n        right.setBorder(new LineBorder(Color.BLACK));\n        titleLabel.setBounds(20, 4, 50, 20);\n        title.setBounds(60, 5, 555, 20);\n        textLabel.setBounds(20, 4, 50, 130);\n        textBox.setBorder(new LineBorder(Color.DARK_GRAY));\n        textBox.setBounds(20, 80, 595, 410);\n        save.setBounds(270, 535, 80, 25);\n        label.setFont(new Font("Verdana", Font.PLAIN, 22));\n        label.setBounds(100, 240, 500, 100);\n        right.add(label);\n        right.add(titleLabel);\n        right.add(title);\n        right.add(textLabel);\n        right.add(textBox);\n        right.add(save);\n        notes.setLayout(null);\n        notes.getContentPane().add(left);\n        notes.getContentPane().add(right);\n        notes.setResizable(false);\n        notes.setLocationRelativeTo(null);\n        notes.setVisible(true);\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"mediator/Mediator.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.mediator.example.mediator;\n\nimport refactoring_guru.mediator.example.components.Component;\n\nimport javax.swing.*;\n\n/**\n * Common mediator interface.\n*/\npublic interface Mediator {\n    void addNewNote(Note note);\n    void deleteNote();\n    void getInfoFromList(Note note);\n    void saveChanges();\n    void markNote();\n    void clear();\n    void sendToFilter(ListModel listModel);\n    void setElementsList(ListModel list);\n    void registerComponent(Component component);\n    void hideElements(boolean flag);\n    void createGUI();\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"mediator/Note.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.mediator.example.mediator;\n\n/**\n * Note class.\n*/\npublic class Note {\n    private String name;\n    private String text;\n\n    public Note() {\n        name = "New note";\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setText(String text) {\n        this.text = text;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getText() {\n        return text;\n    }\n\n    @Override\n    public String toString() {\n        return name;\n    }\n}\n'))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Demo.java"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.mediator.example;\n\nimport refactoring_guru.mediator.example.components.*;\nimport refactoring_guru.mediator.example.mediator.Editor;\nimport refactoring_guru.mediator.example.mediator.Mediator;\n\nimport javax.swing.*;\n\n/**\n * Demo class. Everything comes together here.\n */\npublic class Demo {\n    public static void main(String[] args) {\n        Mediator mediator = new Editor();\n\n        mediator.registerComponent(new Title());\n        mediator.registerComponent(new TextBox());\n        mediator.registerComponent(new AddButton());\n        mediator.registerComponent(new DeleteButton());\n        mediator.registerComponent(new SaveButton());\n        mediator.registerComponent(new List(new DefaultListModel()));\n        mediator.registerComponent(new Filter());\n\n        mediator.createGUI();\n    }\n}\n")))}p.isMDXComponent=!0}}]);