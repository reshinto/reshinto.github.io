"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[3666],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=l(n),h=i,m=p["".concat(c,".").concat(h)]||p[h]||u[h]||s;return n?r.createElement(m,a(a({ref:t},d),{},{components:n})):r.createElement(m,a({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},98663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(87462),i=(n(67294),n(3905));const s={},a="Circular Linked List Example",o={unversionedId:"interviewPrep/data_structures/08LinkedLists/typescript/circularLinkedList",id:"interviewPrep/data_structures/08LinkedLists/typescript/circularLinkedList",title:"Circular Linked List Example",description:"Node",source:"@site/docs/interviewPrep/data_structures/08LinkedLists/typescript/circularLinkedList.md",sourceDirName:"interviewPrep/data_structures/08LinkedLists/typescript",slug:"/interviewPrep/data_structures/08LinkedLists/typescript/circularLinkedList",permalink:"/docs/interviewPrep/data_structures/08LinkedLists/typescript/circularLinkedList",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/data_structures/08LinkedLists/typescript/circularLinkedList.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Linked Lists",permalink:"/docs/interviewPrep/data_structures/08LinkedLists/"},next:{title:"Doubly Linked List Example",permalink:"/docs/interviewPrep/data_structures/08LinkedLists/typescript/doublyLinkedList"}},c={},l=[{value:"Node",id:"node",level:2},{value:"Circular Linked List",id:"circular-linked-list",level:2}],d={toc:l};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"circular-linked-list-example"},"Circular Linked List Example"),(0,i.kt)("h2",{id:"node"},"Node"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class Node<T> {\n  constructor(public element: T, public next?: Node<T>) {}\n}\n")),(0,i.kt)("h2",{id:"circular-linked-list"},"Circular Linked List"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export default class CircularLinkedList<T> extends LinkedList<T> {\n  /**\n   * @description: Add an element to the end of the linked list\n   * @param {T} element\n   */\n  public push(element: T) {\n    const node = new Node(element);\n    let current;\n\n    if (this.head == null) {\n      this.head = node;\n    } else {\n      current = this.getNodeAt(this.size() - 1);\n      current.next = node;\n    }\n\n    node.next = this.head; // \ud83d\udc48 Remember to point the next of the last node to head\n\n    this.count++;\n  }\n\n  /**\n   * @description: Inserts an element at the specified index\n   * @param {T} element\n   * @param {number} index\n   * @return {boolean} Returns whether the insertion was successful\n   */\n  public insert(element: T, index: number) {\n    if (index >= 0 && index <= this.count) {\n      const node = new Node(element);\n      let current = this.head;\n\n      if (index === 0) {\n        // \ud83d\udc47 When inserted into the first time, there are two cases\n        if (this.head == null) {\n          // no element\n          this.head = node;\n          node.next = this.head; // \ud83d\udc48 special\n        } else {\n          // already have some elements\n          let tail = this.getNodeAt(this.size() - 1);\n          this.head = node;\n          node.next = current;\n          tail.next = this.head; // \ud83d\udc48 special\n        }\n      } else {\n        const previous = this.getNodeAt(index - 1);\n        node.next = previous.next;\n        previous.next = node;\n      }\n      this.count++;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @description: removes the element at the specified index\n   * @param {number} index\n   * @return {T} Returns the removed element\n   */\n  public removeAt(index: number) {\n    if (index >= 0 && index < this.count) {\n      let current = this.head;\n\n      if (index === 0) {\n        // \ud83d\udc47 Delete the first time, have two cases\n        if (this.size() === 1) {\n          // only one element\n          this.head = undefined;\n        } else {\n          // has several elements\n          let tail = this.getNodeAt(this.size() - 1);\n          this.head = this.head.next;\n          tail.next = this.head; // \ud83d\udc48 next points to head\n        }\n      } else {\n        const previous = this.getNodeAt(index - 1);\n        current = previous.next;\n        previous.next = current.next;\n      }\n      this.count--;\n      return current.element;\n    }\n    return undefined;\n  }\n}\n")))}u.isMDXComponent=!0}}]);