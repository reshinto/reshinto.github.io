"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[26071],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,v=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(v,a(a({ref:t},p),{},{components:n})):r.createElement(v,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96508:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(83117),o=(n(67294),n(3905));const i={},a="C# Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/cSharp/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/cSharp",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Iterator/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/go/"}},l={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"c-example"},"C# Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'// Iterator Design Pattern\n//\n// Intent: Lets you traverse elements of a collection without exposing its\n// underlying representation (list, stack, tree, etc.).\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\n\nnamespace RefactoringGuru.DesignPatterns.Iterator.Conceptual\n{\n    abstract class Iterator : IEnumerator\n    {\n        object IEnumerator.Current => Current();\n\n        // Returns the key of the current element\n        public abstract int Key();\n\n        // Returns the current element\n        public abstract object Current();\n\n        // Move forward to next element\n        public abstract bool MoveNext();\n\n        // Rewinds the Iterator to the first element\n        public abstract void Reset();\n    }\n\n    abstract class IteratorAggregate : IEnumerable\n    {\n        // Returns an Iterator or another IteratorAggregate for the implementing\n        // object.\n        public abstract IEnumerator GetEnumerator();\n    }\n\n    // Concrete Iterators implement various traversal algorithms. These classes\n    // store the current traversal position at all times.\n    class AlphabeticalOrderIterator : Iterator\n    {\n        private WordsCollection _collection;\n\n        // Stores the current traversal position. An iterator may have a lot of\n        // other fields for storing iteration state, especially when it is\n        // supposed to work with a particular kind of collection.\n        private int _position = -1;\n\n        private bool _reverse = false;\n\n        public AlphabeticalOrderIterator(WordsCollection collection, bool reverse = false)\n        {\n            this._collection = collection;\n            this._reverse = reverse;\n\n            if (reverse)\n            {\n                this._position = collection.getItems().Count;\n            }\n        }\n\n        public override object Current()\n        {\n            return this._collection.getItems()[_position];\n        }\n\n        public override int Key()\n        {\n            return this._position;\n        }\n\n        public override bool MoveNext()\n        {\n            int updatedPosition = this._position + (this._reverse ? -1 : 1);\n\n            if (updatedPosition >= 0 && updatedPosition < this._collection.getItems().Count)\n            {\n                this._position = updatedPosition;\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n\n        public override void Reset()\n        {\n            this._position = this._reverse ? this._collection.getItems().Count - 1 : 0;\n        }\n    }\n\n    // Concrete Collections provide one or several methods for retrieving fresh\n    // iterator instances, compatible with the collection class.\n    class WordsCollection : IteratorAggregate\n    {\n        List<string> _collection = new List<string>();\n\n        bool _direction = false;\n\n        public void ReverseDirection()\n        {\n            _direction = !_direction;\n        }\n\n        public List<string> getItems()\n        {\n            return _collection;\n        }\n\n        public void AddItem(string item)\n        {\n            this._collection.Add(item);\n        }\n\n        public override IEnumerator GetEnumerator()\n        {\n            return new AlphabeticalOrderIterator(this, _direction);\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // The client code may or may not know about the Concrete Iterator\n            // or Collection classes, depending on the level of indirection you\n            // want to keep in your program.\n            var collection = new WordsCollection();\n            collection.AddItem("First");\n            collection.AddItem("Second");\n            collection.AddItem("Third");\n\n            Console.WriteLine("Straight traversal:");\n\n            foreach (var element in collection)\n            {\n                Console.WriteLine(element);\n            }\n\n            Console.WriteLine("\\nReverse traversal:");\n\n            collection.ReverseDirection();\n\n            foreach (var element in collection)\n            {\n                Console.WriteLine(element);\n            }\n        }\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Straight traversal:\nFirst\nSecond\nThird\n\nReverse traversal:\nThird\nSecond\nFirst\n")))}u.isMDXComponent=!0}}]);