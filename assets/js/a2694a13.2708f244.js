"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[73566],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),u=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(r),m=n,g=d["".concat(p,".").concat(m)]||d[m]||s[m]||o;return r?a.createElement(g,i(i({ref:t},l),{},{components:r})):a.createElement(g,i({ref:t},l))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var u=2;u<o;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},63678:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=r(83117),n=(r(67294),r(3905));const o={},i="Java Example",c={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Decorator/java/readme",id:"interviewPrep/designPatterns/Structural_patterns/Decorator/java/readme",title:"Java Example",description:"- decorators",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Decorator/java",slug:"/interviewPrep/designPatterns/Structural_patterns/Decorator/java/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/go/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/javascript/"}},p={},u=[],l={toc:u};function s(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"java-example"},"Java Example"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"decorators"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"decorators/CompressionDecorator.java"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.decorator.example.decorators;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Base64;\nimport java.util.zip.Deflater;\nimport java.util.zip.DeflaterOutputStream;\nimport java.util.zip.InflaterInputStream;\n\npublic class CompressionDecorator extends DataSourceDecorator {\n    private int compLevel = 6;\n\n    public CompressionDecorator(DataSource source) {\n        super(source);\n    }\n\n    public int getCompressionLevel() {\n        return compLevel;\n    }\n\n    public void setCompressionLevel(int value) {\n        compLevel = value;\n    }\n\n    @Override\n    public void writeData(String data) {\n        super.writeData(compress(data));\n    }\n\n    @Override\n    public String readData() {\n        return decompress(super.readData());\n    }\n\n    private String compress(String stringData) {\n        byte[] data = stringData.getBytes();\n        try {\n            ByteArrayOutputStream bout = new ByteArrayOutputStream(512);\n            DeflaterOutputStream dos = new DeflaterOutputStream(bout, new Deflater(compLevel));\n            dos.write(data);\n            dos.close();\n            bout.close();\n            return Base64.getEncoder().encodeToString(bout.toByteArray());\n        } catch (IOException ex) {\n            return null;\n        }\n    }\n\n    private String decompress(String stringData) {\n        byte[] data = Base64.getDecoder().decode(stringData);\n        try {\n            InputStream in = new ByteArrayInputStream(data);\n            InflaterInputStream iin = new InflaterInputStream(in);\n            ByteArrayOutputStream bout = new ByteArrayOutputStream(512);\n            int b;\n            while ((b = iin.read()) != -1) {\n                bout.write(b);\n            }\n            in.close();\n            iin.close();\n            bout.close();\n            return new String(bout.toByteArray());\n        } catch (IOException ex) {\n            return null;\n        }\n    }\n}\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"decorators/DataSource.java"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.decorator.example.decorators;\n\npublic interface DataSource {\n    void writeData(String data);\n\n    String readData();\n}\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"decorators/DataSourceDecorator.java"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.decorator.example.decorators;\n\npublic class DataSourceDecorator implements DataSource {\n    private DataSource wrappee;\n\n    DataSourceDecorator(DataSource source) {\n        this.wrappee = source;\n    }\n\n    @Override\n    public void writeData(String data) {\n        wrappee.writeData(data);\n    }\n\n    @Override\n    public String readData() {\n        return wrappee.readData();\n    }\n}\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"decorators/EncryptionDecorator.java"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.decorator.example.decorators;\n\nimport java.util.Base64;\n\npublic class EncryptionDecorator extends DataSourceDecorator {\n\n    public EncryptionDecorator(DataSource source) {\n        super(source);\n    }\n\n    @Override\n    public void writeData(String data) {\n        super.writeData(encode(data));\n    }\n\n    @Override\n    public String readData() {\n        return decode(super.readData());\n    }\n\n    private String encode(String data) {\n        byte[] result = data.getBytes();\n        for (int i = 0; i < result.length; i++) {\n            result[i] += (byte) 1;\n        }\n        return Base64.getEncoder().encodeToString(result);\n    }\n\n    private String decode(String data) {\n        byte[] result = Base64.getDecoder().decode(data);\n        for (int i = 0; i < result.length; i++) {\n            result[i] -= (byte) 1;\n        }\n        return new String(result);\n    }\n}\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"decorators/FileDataSource.java"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.decorator.example.decorators;\n\nimport java.io.*;\n\npublic class FileDataSource implements DataSource {\n    private String name;\n\n    public FileDataSource(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void writeData(String data) {\n        File file = new File(name);\n        try (OutputStream fos = new FileOutputStream(file)) {\n            fos.write(data.getBytes(), 0, data.length());\n        } catch (IOException ex) {\n            System.out.println(ex.getMessage());\n        }\n    }\n\n    @Override\n    public String readData() {\n        char[] buffer = null;\n        File file = new File(name);\n        try (FileReader reader = new FileReader(file)) {\n            buffer = new char[(int) file.length()];\n            reader.read(buffer);\n        } catch (IOException ex) {\n            System.out.println(ex.getMessage());\n        }\n        return new String(buffer);\n    }\n}\n"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Demo.java"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.decorator.example;\n\nimport refactoring_guru.decorator.example.decorators.*;\n\npublic class Demo {\n    public static void main(String[] args) {\n        String salaryRecords = "Name,Salary\\nJohn Smith,100000\\nSteven Jobs,912000";\n        DataSourceDecorator encoded = new CompressionDecorator(\n                                        new EncryptionDecorator(\n                                            new FileDataSource("out/OutputDemo.txt")));\n        encoded.writeData(salaryRecords);\n        DataSource plain = new FileDataSource("out/OutputDemo.txt");\n\n        System.out.println("- Input ----------------");\n        System.out.println(salaryRecords);\n        System.out.println("- Encoded --------------");\n        System.out.println(plain.readData());\n        System.out.println("- Decoded --------------");\n        System.out.println(encoded.readData());\n    }\n}\n')),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"- Input ----------------\nName,Salary\nJohn Smith,100000\nSteven Jobs,912000\n- Encoded --------------\nZkt7e1Q5eU8yUm1Qe0ZsdHJ2VXp6dDBKVnhrUHtUe0sxRUYxQkJIdjVLTVZ0dVI5Q2IwOXFISmVUMU5rcENCQmdxRlByaD4+\n- Decoded --------------\nName,Salary\nJohn Smith,100000\nSteven Jobs,912000\n")))))}s.isMDXComponent=!0}}]);