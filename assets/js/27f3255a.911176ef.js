"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[421],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),s=u(n),d=l,f=s["".concat(c,".").concat(d)]||s[d]||m[d]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,i=new Array(o);i[0]=s;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:l,i[1]=r;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},7539:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>u});var a=n(7462),l=(n(7294),n(3905));const o={},i="How to compile and run files of different languages in the terminal",r={unversionedId:"languageSpecific/run_language_tutorial",id:"languageSpecific/run_language_tutorial",title:"How to compile and run files of different languages in the terminal",description:"compile .cpp & .h files together",source:"@site/docs/languageSpecific/run_language_tutorial.md",sourceDirName:"languageSpecific",slug:"/languageSpecific/run_language_tutorial",permalink:"/docs/languageSpecific/run_language_tutorial",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/languageSpecific/run_language_tutorial.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Virtual Environment",permalink:"/docs/languageSpecific/python/virtualEnv"},next:{title:"XML (eXtensible Markup Language)",permalink:"/docs/languageSpecific/xml/"}},c={},u=[{value:"compile .cpp &amp; .h files together",id:"compile-cpp--h-files-together",level:2},{value:"syntax: -Wall: check for errors",id:"syntax--wall-check-for-errors",level:3},{value:"same as above but add -x c when compiling",id:"same-as-above-but-add--x-c-when-compiling",level:2},{value:"compile file",id:"compile-file",level:2},{value:"compile xxx.java file with javac in terminal",id:"compile-xxxjava-file-with-javac-in-terminal",level:2}],p={toc:u};function m(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"how-to-compile-and-run-files-of-different-languages-in-the-terminal"},"How to compile and run files of different languages in the terminal"),(0,l.kt)("h1",{id:"run-c-files"},"Run C++ files"),(0,l.kt)("h2",{id:"compile-cpp--h-files-together"},"compile .cpp & .h files together"),(0,l.kt)("h3",{id:"syntax--wall-check-for-errors"},"syntax: -Wall: check for errors"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"-o: is an output file"),(0,l.kt)("li",{parentName:"ul"},"output file name: zzz"),(0,l.kt)("li",{parentName:"ul"},".cpp and .h files"),(0,l.kt)("li",{parentName:"ul"},"old method of building",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"g++ -Wall -o zzz xxx.cpp abc.h"))),(0,l.kt)("li",{parentName:"ul"},"new method of building",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"g++ -Wall -o zzz xxx.cpp"))),(0,l.kt)("li",{parentName:"ul"},"run built file",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./zzz")))),(0,l.kt)("h1",{id:"run-c-files-1"},"Run C files"),(0,l.kt)("h2",{id:"same-as-above-but-add--x-c-when-compiling"},"same as above but add -x c when compiling"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"g++ -x c -Wall -o zzz xxx.c abc.h"),(0,l.kt)("h2",{parentName:"blockquote",id:"or"},"OR"),(0,l.kt)("p",{parentName:"blockquote"},"clang -o zzz xxx.c abc.h"),(0,l.kt)("h2",{parentName:"blockquote",id:"or-1"},"OR"),(0,l.kt)("p",{parentName:"blockquote"},"make xxx"),(0,l.kt)("h3",{parentName:"blockquote",id:"if-h-header-file-is-in-another-directory-need-to-use--i"},"If .h header file is in another directory need to use -I"),(0,l.kt)("p",{parentName:"blockquote"},"g++ -I /fullpath/myproject xxx.cpp /fullpath/myproject/header/yyy.h"),(0,l.kt)("h3",{parentName:"blockquote",id:"use--to-run-file"},"use ./ to run file"),(0,l.kt)("p",{parentName:"blockquote"},"./zzz"),(0,l.kt)("h3",{parentName:"blockquote",id:"if-no-output-file-name-is-defined-earlier"},"if no output file name is defined earlier"),(0,l.kt)("ul",{parentName:"blockquote"},(0,l.kt)("li",{parentName:"ul"},"ouput file will automatically create an a.out file"),(0,l.kt)("li",{parentName:"ul"},"to run\n./a.out"))),(0,l.kt)("h1",{id:"run-c-files-2"},"Run C# files"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Need to have Mono platform to compile and run code",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"if using MacOS",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"brew install mono")))))),(0,l.kt)("h2",{id:"compile-file"},"compile file"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"mcs xxx.cs"),(0,l.kt)("ul",{parentName:"blockquote"},(0,l.kt)("li",{parentName:"ul"},"xxx.exe will be created")),(0,l.kt)("h2",{parentName:"blockquote",id:"run-file"},"run file"),(0,l.kt)("p",{parentName:"blockquote"},"mono xxx.exe")),(0,l.kt)("h1",{id:"run-java-files"},"Run Java files"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"xxx.java file name must be the same as public class name"),(0,l.kt)("li",{parentName:"ul"},"note: it is case sensitive")),(0,l.kt)("h2",{id:"compile-xxxjava-file-with-javac-in-terminal"},"compile xxx.java file with javac in terminal"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"javac xxx.java"),(0,l.kt)("h2",{parentName:"blockquote",id:"java-class-will-be-created-run-class-file-with-java"},"java class will be created, run class file with java"),(0,l.kt)("p",{parentName:"blockquote"},"java xxx"),(0,l.kt)("h2",{parentName:"blockquote",id:"java-11-onwards-class-will-not-be-created-javac-not-required"},"java 11 onwards, class will not be created, javac not required"),(0,l.kt)("ul",{parentName:"blockquote"},(0,l.kt)("li",{parentName:"ul"},"compile and run java file\njava xxx.java")),(0,l.kt)("h2",{parentName:"blockquote",id:"compile-and-run-at-the-same-time"},"compile and run at the same time"),(0,l.kt)("p",{parentName:"blockquote"},"javac xxx.java && java xxx"),(0,l.kt)("h2",{parentName:"blockquote",id:"using-package"},"using package"),(0,l.kt)("ul",{parentName:"blockquote"},(0,l.kt)("li",{parentName:"ul"},"e.g.: Main.java")),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"package com.example.java;\n"))),(0,l.kt)("p",null,'public class Main {\npublic static void main(String[] args) {\nSystem.out.println("Hello from Java!");\n}\n}'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'### at root directory of project\n#### compile file\n> javac ./com/example/java/Main.java\n#### run file\n> java com.example.java.Main\n## using modularity\n- compile\n  > javac -d ./mods/ --module-source-path src $(find src -name "*.java")\n- run without optional dependencies\n  > java --module-path mods/ -m com.domain.module/com.domain.module.Main\n- run with optional dependencies\n  > java --module-path mods/ --add-modules com.domain.optionalmodule -m com.domain.module/com.domain.module.Main\n# Run Typescript files\n## run typescript files without compiling with ts-node in terminal (no javascript created)\n> ts-node xxx.ts\n## compile xxx.ts file with tsc in terminal\n> tsc ./xxx.ts\n## javascript file will be created, run file with node\n> node xxx.js\n\n# Run Javascript files\n## run with nodeJS\n> node filename.js\n### open nodejs shell\n> node\n\n# Run Python files\n## run with python 2\n> python2 filename.py\n### open python 2 shell\n> python2\n## run with python 3\n> python3 filename.py\n### open python 3 shell\n> python3\n\n# Run Ruby files\n> ruby filename.rb\n## open ruby shell\n> irb\n\n# Run assembly files\n* nasm compiler must be installed\n  * if using MacOS\n    > brew install nasm\n## compile & run x86 32 bit files\n### compile\n  > nasm -f macho xxx32.asm && ld -macosx_version_min 10.7.0 -o xxx32 xxx32.o\n### run\n  > ./xxx32\n## compile & run x86_64 64 bit files\n### compile\n  > nasm -f macho64 xxx64.asm && ld -macosx_version_min 10.7.0 -lSystem -o xxx64 xxx64.o\n### run\n  > ./xxx64\n\n# Run Groovy\n## Open GroovyShell to use the dynamic interpreter on the terminal\n- in the command line type ```groovysh```\n## Open GroovyConsole to open an external UI interface editor\n- in the command line type ```groovyConsole```\n## Execute groovy code on the command line\n- ```groovy -e "println \'Hello, World!\'"```\n## Run groovy file\n- ```groovy hello.groovy``` or ```groovy hello```\n\n# Compile Latex file\n> xelatex filename.tex\n')))}m.isMDXComponent=!0}}]);