"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[5580],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>d});var n=t(7294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),u=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=u(e.components);return n.createElement(s.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(t),d=i,g=m["".concat(s,".").concat(d)]||m[d]||c[d]||r;return t?n.createElement(g,l(l({ref:a},p),{},{components:t})):n.createElement(g,l({ref:a},p))}));function d(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=m;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7030:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var n=t(7462),i=(t(7294),t(3905));const r={},l="Functional Programming in JavaScript",o={unversionedId:"basics/programmingParadigm/FP/functionalProgrammingInJS",id:"basics/programmingParadigm/FP/functionalProgrammingInJS",title:"Functional Programming in JavaScript",description:"Functional concepts in JavaScript",source:"@site/docs/basics/programmingParadigm/FP/functionalProgrammingInJS.md",sourceDirName:"basics/programmingParadigm/FP",slug:"/basics/programmingParadigm/FP/functionalProgrammingInJS",permalink:"/docs/basics/programmingParadigm/FP/functionalProgrammingInJS",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/basics/programmingParadigm/FP/functionalProgrammingInJS.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Functional Language Possibilities",permalink:"/docs/basics/programmingParadigm/FP/functionalLanguagePossibilities"},next:{title:"Main Concepts",permalink:"/docs/basics/programmingParadigm/FP/mainConcepts"}},s={},u=[{value:"Functional concepts in JavaScript",id:"functional-concepts-in-javascript",level:2},{value:"Immutability concept",id:"immutability-concept",level:3},{value:"No Shared State concept",id:"no-shared-state-concept",level:3},{value:"Composition concept",id:"composition-concept",level:3},{value:"Functional possibilities in JavaScript",id:"functional-possibilities-in-javascript",level:2},{value:"Widespread functional JavaScript libraries",id:"widespread-functional-javascript-libraries",level:2},{value:"Ramda",id:"ramda",level:3},{value:"Lodash",id:"lodash",level:3},{value:"Pros and Cons of Functional Programming",id:"pros-and-cons-of-functional-programming",level:2}],p={toc:u};function c(e){let{components:a,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"functional-programming-in-javascript"},"Functional Programming in JavaScript"),(0,i.kt)("h2",{id:"functional-concepts-in-javascript"},"Functional concepts in JavaScript"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Based on the concepts of FP let's see if we can say that JS is implementing a functional programming paradigm")),(0,i.kt)("h3",{id:"immutability-concept"},"Immutability concept"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"JavaScript has built-in methods which follow this rule"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For example, filter, reduce, map"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"example: array mutation"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"not a functional approach")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const fruit = ["banana", "orange"];\nfruit.push("kiwi");\n\nconsole.log(fruit); // ["banana", "orange", "kiwi"]\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"example: immutable array"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"a functional approach")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const fruit = ["banana", "orange"];\nconst newFruit = [...fruit, "kiwi"];\n\nconsole.log(fruit); // ["banana", "orange"]\nconsole.log(newFruit); // ["banana", "orange", "kiwi"]\n')))),(0,i.kt)("h3",{id:"no-shared-state-concept"},"No Shared State concept"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In order to avoid a shared state in JS",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"you can use such a library like Redux, any other similar library, or all suggested approaches in the How to avoid shared state part could be used")))),(0,i.kt)("h3",{id:"composition-concept"},"Composition concept"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The main idea of inheritance is to make code more reusable"),(0,i.kt)("li",{parentName:"ul"},"With the functional way, we can do it without inheritance by using the composition of small functions"),(0,i.kt)("li",{parentName:"ul"},"It has some advantages over inheritance",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"it is more flexible, does not require thinking in advance, and is easier to test")))),(0,i.kt)("h2",{id:"functional-possibilities-in-javascript"},"Functional possibilities in JavaScript"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"First class function is implemented in JS, so we can use it for our purpose")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"example: functions are called one by one"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"not a functional approach")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const foo = (a, b) => a + b;\nconst buzz = (c) => console.log(c);\nconst res = foo(4, 5);\nbuzz(res);\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"example: passing function as an argument"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"a functional approach")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const foo = (a, b) => a + b;\nconst buzz = (c) => console.log(c);\nbuzz(foo(4, 5));\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Currying is a technique that has to be supported in the language"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"So functions with more than one argument can be divided into several functions with one argument"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"JavaScript follows all functional rules, but also includes OOP principles"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"thus it is both a FP and OOP"),(0,i.kt)("li",{parentName:"ul"},"can combine the best features of both approaches in order to achieve good results")))),(0,i.kt)("h2",{id:"widespread-functional-javascript-libraries"},"Widespread functional JavaScript libraries"),(0,i.kt)("h3",{id:"ramda"},"Ramda"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The library is designed specifically for a functional programming style")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"one that makes it easy to create functional pipelines, one that never mutates user data")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Ramda includes all of the favorite list-manipulation functions you expect"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"e.g. map, filter, reduce, find, etc."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Ramda methods are automatically curried"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For example, The function multiply returns another function, remembers the first arguments, and multiplies the first argument with the second one"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"example"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const double = R.multiply(2);\ndouble(3); // 6\n")))),(0,i.kt)("h3",{id:"lodash"},"Lodash"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The lodash/fp module promotes more functional programming (FP) friendly style by exporting an instance of lodash with its methods wrapped to produce immutable auto-curried iteratee-first data-last methods")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Lodash makes JavaScript easier by taking the hassle out of working with arrays, numbers, objects, strings, etc.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Lodash modular methods are great for:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Iterating arrays, objects, & strings"),(0,i.kt)("li",{parentName:"ul"},"Manipulating & testing values"),(0,i.kt)("li",{parentName:"ul"},"Creating composite functions"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"example: array filtering"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'var users = [\n  {user: "barney", age: 36, active: true},\n  {user: "fred", age: 40, active: false},\n];\n\n_.filter(users, function (o) {\n  return !o.active;\n}); // [{ user: "fred", age: 40, active: false }]\n')))),(0,i.kt)("h2",{id:"pros-and-cons-of-functional-programming"},"Pros and Cons of Functional Programming"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"PROS",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"No side effects (if they are not necessary)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"because we are following the immutability principle"))),(0,i.kt)("li",{parentName:"ul"},"Pure functions are easier to understand because they depend only on the given input and don't change any states",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"With the same input, they always give the same output"),(0,i.kt)("li",{parentName:"ul"},"Their function signature gives all the information about them"))),(0,i.kt)("li",{parentName:"ul"},"The ability of functional programming languages to treat functions as values and pass them to functions as parameters make the code more readable and easily understandable"),(0,i.kt)("li",{parentName:"ul"},"Testing and debugging are easier",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Since pure functions take only arguments and produce output, they don't produce any changes don't take input, or produce some hidden output"),(0,i.kt)("li",{parentName:"ul"},"They use immutable values, so it becomes easier to check some problems in programs written using pure functions"))),(0,i.kt)("li",{parentName:"ul"},"It is used to implement concurrency / parallelism because pure functions don't change variables or any other data outside it"),(0,i.kt)("li",{parentName:"ul"},"It adopts lazy evaluation which avoids repeated evaluation because the value is evaluated and stored only when it is needed"))),(0,i.kt)("li",{parentName:"ul"},"CONS",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The readability can be reduced by a lot of pure functions"),(0,i.kt)("li",{parentName:"ul"},"Loss of performance could take place, because of the immutability principle")))))}c.isMDXComponent=!0}}]);