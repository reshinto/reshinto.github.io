"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[6672],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={},o="Java Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/java/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/java/readme",title:"Java Example",description:"- order/Order.java",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/java",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Strategy/java/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/go/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/javascript/"}},p={},l=[],c={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"java-example"},"Java Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"order/Order.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.strategy.example.order;\n\nimport refactoring_guru.strategy.example.strategies.PayStrategy;\n\n/**\n * Order class. Doesn't know the concrete payment method (strategy) user has\n * picked. It uses common strategy interface to delegate collecting payment data\n * to strategy object. It can be used to save order to database.\n */\npublic class Order {\n    private int totalCost = 0;\n    private boolean isClosed = false;\n\n    public void processOrder(PayStrategy strategy) {\n        strategy.collectPaymentDetails();\n        // Here we could collect and store payment data from the strategy.\n    }\n\n    public void setTotalCost(int cost) {\n        this.totalCost += cost;\n    }\n\n    public int getTotalCost() {\n        return totalCost;\n    }\n\n    public boolean isClosed() {\n        return isClosed;\n    }\n\n    public void setClosed() {\n        isClosed = true;\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"strategies"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"strategies/CreditCard.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.strategy.example.strategies;\n\n/**\n * Dummy credit card class.\n*/\npublic class CreditCard {\n    private int amount;\n    private String number;\n    private String date;\n    private String cvv;\n\n    CreditCard(String number, String date, String cvv) {\n        this.amount = 100_000;\n        this.number = number;\n        this.date = date;\n        this.cvv = cvv;\n    }\n\n    public void setAmount(int amount) {\n        this.amount = amount;\n    }\n\n    public int getAmount() {\n        return amount;\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"strategies/PayByCreditCard.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.strategy.example.strategies;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * Concrete strategy. Implements credit card payment method.\n*/\npublic class PayByCreditCard implements PayStrategy {\n    private final BufferedReader READER = new BufferedReader(new InputStreamReader(System.in));\n    private CreditCard card;\n\n    /**\n     * Collect credit card data.\n     */\n    @Override\n    public void collectPaymentDetails() {\n        try {\n            System.out.print("Enter the card number: ");\n            String number = READER.readLine();\n            System.out.print("Enter the card expiration date \'mm/yy\': ");\n            String date = READER.readLine();\n            System.out.print("Enter the CVV code: ");\n            String cvv = READER.readLine();\n            card = new CreditCard(number, date, cvv);\n\n            // Validate credit card number...\n\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * After card validation we can charge customer\'s credit card.\n     */\n    @Override\n    public boolean pay(int paymentAmount) {\n        if (cardIsPresent()) {\n            System.out.println("Paying " + paymentAmount + " using Credit Card.");\n            card.setAmount(card.getAmount() - paymentAmount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private boolean cardIsPresent() {\n        return card != null;\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"strategies/PayByPayPal.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.strategy.example.strategies;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Concrete strategy. Implements PayPal payment method.\n*/\npublic class PayByPayPal implements PayStrategy {\n    private static final Map<String, String> DATA_BASE = new HashMap<>();\n    private final BufferedReader READER = new BufferedReader(new InputStreamReader(System.in));\n    private String email;\n    private String password;\n    private boolean signedIn;\n\n    static {\n        DATA_BASE.put("amanda1985", "amanda@ya.com");\n        DATA_BASE.put("qwerty", "john@amazon.eu");\n    }\n\n    /**\n     * Collect customer\'s data.\n     */\n    @Override\n    public void collectPaymentDetails() {\n        try {\n            while (!signedIn) {\n                System.out.print("Enter the user\'s email: ");\n                email = READER.readLine();\n                System.out.print("Enter the password: ");\n                password = READER.readLine();\n                if (verify()) {\n                    System.out.println("Data verification has been successful.");\n                } else {\n                    System.out.println("Wrong email or password!");\n                }\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    private boolean verify() {\n        setSignedIn(email.equals(DATA_BASE.get(password)));\n        return signedIn;\n    }\n\n    /**\n     * Save customer data for future shopping attempts.\n     */\n    @Override\n    public boolean pay(int paymentAmount) {\n        if (signedIn) {\n            System.out.println("Paying " + paymentAmount + " using PayPal.");\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private void setSignedIn(boolean signedIn) {\n        this.signedIn = signedIn;\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"strategies/PayStrategy.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.strategy.example.strategies;\n\n/**\n * Common interface for all strategies.\n*/\npublic interface PayStrategy {\n    boolean pay(int paymentAmount);\n    void collectPaymentDetails();\n}\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Demo.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.strategy.example;\n\nimport refactoring_guru.strategy.example.order.Order;\nimport refactoring_guru.strategy.example.strategies.PayByCreditCard;\nimport refactoring_guru.strategy.example.strategies.PayByPayPal;\nimport refactoring_guru.strategy.example.strategies.PayStrategy;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * World first console e-commerce application.\n */\npublic class Demo {\n    private static Map<Integer, Integer> priceOnProducts = new HashMap<>();\n    private static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    private static Order order = new Order();\n    private static PayStrategy strategy;\n\n    static {\n        priceOnProducts.put(1, 2200);\n        priceOnProducts.put(2, 1850);\n        priceOnProducts.put(3, 1100);\n        priceOnProducts.put(4, 890);\n    }\n\n    public static void main(String[] args) throws IOException {\n        while (!order.isClosed()) {\n            int cost;\n\n            String continueChoice;\n            do {\n                System.out.print("Please, select a product:" + "\\n" +\n                        "1 - Mother board" + "\\n" +\n                        "2 - CPU" + "\\n" +\n                        "3 - HDD" + "\\n" +\n                        "4 - Memory" + "\\n");\n                int choice = Integer.parseInt(reader.readLine());\n                cost = priceOnProducts.get(choice);\n                System.out.print("Count: ");\n                int count = Integer.parseInt(reader.readLine());\n                order.setTotalCost(cost * count);\n                System.out.print("Do you wish to continue selecting products? Y/N: ");\n                continueChoice = reader.readLine();\n            } while (continueChoice.equalsIgnoreCase("Y"));\n\n            if (strategy == null) {\n                System.out.println("Please, select a payment method:" + "\\n" +\n                        "1 - PalPay" + "\\n" +\n                        "2 - Credit Card");\n                String paymentMethod = reader.readLine();\n\n                // Client creates different strategies based on input from user,\n                // application configuration, etc.\n                if (paymentMethod.equals("1")) {\n                    strategy = new PayByPayPal();\n                } else {\n                    strategy = new PayByCreditCard();\n                }\n            }\n\n            // Order object delegates gathering payment data to strategy object,\n            // since only strategies know what data they need to process a\n            // payment.\n            order.processOrder(strategy);\n\n            System.out.print("Pay " + order.getTotalCost() + " units or Continue shopping? P/C: ");\n            String proceed = reader.readLine();\n            if (proceed.equalsIgnoreCase("P")) {\n                // Finally, strategy handles the payment.\n                if (strategy.pay(order.getTotalCost())) {\n                    System.out.println("Payment has been successful.");\n                } else {\n                    System.out.println("FAIL! Please, check your data.");\n                }\n                order.setClosed();\n            }\n        }\n    }\n}\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"Please, select a product:\n1 - Mother board\n2 - CPU\n3 - HDD\n4 - Memory\n1\nCount: 2\nDo you wish to continue selecting products? Y/N: y\nPlease, select a product:\n1 - Mother board\n2 - CPU\n3 - HDD\n4 - Memory\n2\nCount: 1\nDo you wish to continue selecting products? Y/N: n\nPlease, select a payment method:\n1 - PalPay\n2 - Credit Card\n1\nEnter the user's email: user@example.com\nEnter the password: qwerty\nWrong email or password!\nEnter user email: amanda@ya.com\nEnter password: amanda1985\nData verification has been successful.\nPay 6250 units or Continue shopping?  P/C: p\nPaying 6250 using PayPal.\nPayment has been successful.\n")))))}d.isMDXComponent=!0}}]);