"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9655],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},72498:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(83117),i=(n(67294),n(3905));const o={},a="Swift Example",s={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Bridge/swift/readme",id:"interviewPrep/designPatterns/Structural_patterns/Bridge/swift/readme",title:"Swift Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Bridge/swift",slug:"/interviewPrep/designPatterns/Structural_patterns/Bridge/swift/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/python/example2"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/swift/example2"}},l={},c=[],p={toc:c};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"swift-example"},"Swift Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'/// Bridge Design Pattern\n///\n/// Intent: Lets you split a large class or a set of closely related classes\n/// into two separate hierarchies\u2014abstraction and implementation\u2014which can be\n/// developed independently of each other.\n///\n///          \xa0         A\n///          \xa0      /     \\                        A         N\n///          \xa0    Aa      Ab        ===>        /     \\     / \\\n///          \xa0   / \\     /  \\                 Aa(N) Ab(N)  1   2\n///            Aa1 Aa2  Ab1 Ab2\n\nimport XCTest\n\n/// The Abstraction defines the interface for the "control" part of the two\n/// class hierarchies. It maintains a reference to an object of the\n/// Implementation hierarchy and delegates all of the real work to this object.\nclass Abstraction {\n\n    fileprivate var implementation: Implementation\n\n    init(_ implementation: Implementation) {\n        self.implementation = implementation\n    }\n\n    func operation() -> String {\n        let operation = implementation.operationImplementation()\n        return "Abstraction: Base operation with:\\n" + operation\n    }\n}\n\n/// You can extend the Abstraction without changing the Implementation classes.\nclass ExtendedAbstraction: Abstraction {\n\n    override func operation() -> String {\n        let operation = implementation.operationImplementation()\n        return "ExtendedAbstraction: Extended operation with:\\n" + operation\n    }\n}\n\n/// The Implementation defines the interface for all implementation classes. It\n/// doesn\'t have to match the Abstraction\'s interface. In fact, the two\n/// interfaces can be entirely different. Typically the Implementation interface\n/// provides only primitive operations, while the Abstraction defines higher-\n/// level operations based on those primitives.\nprotocol Implementation {\n\n    func operationImplementation() -> String\n}\n\n/// Each Concrete Implementation corresponds to a specific platform and\n/// implements the Implementation interface using that platform\'s API.\nclass ConcreteImplementationA: Implementation {\n\n    func operationImplementation() -> String {\n        return "ConcreteImplementationA: Here\'s the result on the platform A.\\n"\n    }\n}\n\nclass ConcreteImplementationB: Implementation {\n\n    func operationImplementation() -> String {\n        return "ConcreteImplementationB: Here\'s the result on the platform B\\n"\n    }\n}\n\n/// Except for the initialization phase, where an Abstraction object gets linked\n/// with a specific Implementation object, the client code should only depend on\n/// the Abstraction class. This way the client code can support any abstraction-\n/// implementation combination.\nclass Client {\n    // ...\n    static func someClientCode(abstraction: Abstraction) {\n        print(abstraction.operation())\n    }\n    // ...\n}\n\n/// Let\'s see how it all works together.\nclass BridgeConceptual: XCTestCase {\n\n    func testBridgeConceptual() {\n        // The client code should be able to work with any pre-configured\n        // abstraction-implementation combination.\n        let implementation = ConcreteImplementationA()\n        Client.someClientCode(abstraction: Abstraction(implementation))\n\n        let concreteImplementation = ConcreteImplementationB()\n        Client.someClientCode(abstraction: ExtendedAbstraction(concreteImplementation))\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Abstraction: Base operation with:\nConcreteImplementationA: Here's the result on the platform A\n\nExtendedAbstraction: Extended operation with:\nConcreteImplementationB: Here's the result on the platform B\n")))}m.isMDXComponent=!0}}]);