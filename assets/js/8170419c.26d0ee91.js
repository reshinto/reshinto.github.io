"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[6598],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>d});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),u=c(t),d=o,h=u["".concat(p,".").concat(d)]||u[d]||s[d]||a;return t?r.createElement(h,i(i({ref:n},l),{},{components:t})):r.createElement(h,i({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var m={};for(var p in n)hasOwnProperty.call(n,p)&&(m[p]=n[p]);m.originalType=e,m.mdxType="string"==typeof e?e:o,i[1]=m;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},44063:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>a,metadata:()=>m,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={},i="Pre-commit",m={unversionedId:"pre-hooks/python/pre-commit/readme",id:"pre-hooks/python/pre-commit/readme",title:"Pre-commit",description:"How to install",source:"@site/docs/pre-hooks/python/pre-commit/readme.md",sourceDirName:"pre-hooks/python/pre-commit",slug:"/pre-hooks/python/pre-commit/",permalink:"/docs/pre-hooks/python/pre-commit/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/pre-hooks/python/pre-commit/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Husky",permalink:"/docs/pre-hooks/javascript/husky/"},next:{title:"Apache Maven",permalink:"/docs/projectManagementTools/apacheMaven/"}},p={},c=[{value:"How to install",id:"how-to-install",level:2},{value:"Create a <code>.pre-commit-config.yaml</code> file",id:"create-a-pre-commit-configyaml-file",level:2},{value:"Setup",id:"setup",level:2},{value:"Add configs into <code>.pre-commit-config.yaml</code>",id:"add-configs-into-pre-commit-configyaml",level:3},{value:"Add <code>branchLint.py</code>",id:"add-branchlintpy",level:3},{value:"Add <code>commitLint.py</code> file",id:"add-commitlintpy-file",level:3}],l={toc:c};function s(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pre-commit"},"Pre-commit"),(0,o.kt)("h2",{id:"how-to-install"},"How to install"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"pip install pre-commit")),(0,o.kt)("h2",{id:"create-a-pre-commit-configyaml-file"},"Create a ",(0,o.kt)("inlineCode",{parentName:"h2"},".pre-commit-config.yaml")," file"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"touch .pre-commit-config.yaml")),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("h3",{id:"add-configs-into-pre-commit-configyaml"},"Add configs into ",(0,o.kt)("inlineCode",{parentName:"h3"},".pre-commit-config.yaml")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"sample",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.3.0\n    hooks:\n      - id: check-yaml\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n      - id: name-tests-test\n  - repo: https://github.com/psf/black\n    rev: 19.3b0\n    hooks:\n      - id: black\n  - repo: local\n    hooks:\n      - id: pytest-check\n        name: pytest-check\n        entry: pytest\n        language: system\n        pass_filenames: false\n        always_run: true\n      - id: commit-msg\n        name: commit-msg\n        entry: commit-msg\n        always_run: true\n        language: system\n        stages: [commit-msg]\n")))),(0,o.kt)("h3",{id:"add-branchlintpy"},"Add ",(0,o.kt)("inlineCode",{parentName:"h3"},"branchLint.py")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"sample"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import re\n\n# Manually change projectAcronym\nproject_acronym = "TEMPLATE"\nrule_branch = fr"^(feature|bugfix|improvement|library|prerelease|release|hotfix)\\/{project_acronym}-(\\d+)[a-z0-9._-]+$"\n\nmsg = f"""\n# Invalid branch name!\n#\n# Branch names in this project must adhere to this contract:\n# {rule_branch}\n#\n# Your commit will be rejected.\n# Please use the following rules:\n# \'[required key1]/(required key2)-<required name>\'\n#\n# - [required key1]: \'(key1)/\', when the (key1) is a type of branch of either\n#   - feature | bugfix | improvement | library | prerelease | release | hotfix\n# - (required key2): \'{project_acronym}-(key2)-\', when the (key2) is a valid JIRA issue key\n# - <required name>: \'(name)\', when the (name) is a clear branch name\n#\n# For example:\n# \'feature/{project_acronym}-01-feature-branch-name\'\n"""\n\nbranch_name = ""\nwith open(".git/HEAD", "r") as f:\n    branch_name = f.read().split("ref: refs/heads/")[1].split("\\n")[0]\n\nif not re.match(rule_branch, branch_name):\n    print(msg)\n    raise SystemExit("")\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"at ",(0,o.kt)("inlineCode",{parentName:"p"},".git/hooks/pre-commit")," file modify the contents to the following"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"#!/usr/bin/env python3.9\nimport os\nimport sys\n\nif sys.version_info < (3, 3):\n    from distutils.spawn import find_executable as which\nelse:\n    from shutil import which\n\n# work around https://github.com/Homebrew/homebrew-core/issues/30445\nos.environ.pop('__PYVENV_LAUNCHER__', None)\n\n# start templated\nINSTALL_PYTHON = 'venv/bin/python3.9'\nARGS = ['hook-impl', '--config=.pre-commit-config.yaml', '--hook-type=pre-commit']\n# end templated\nARGS.extend(('--hook-dir', os.path.realpath(os.path.dirname(__file__))))\nARGS.append('--')\nARGS.extend(sys.argv[1:])\n\nDNE = '`pre-commit` not found.  Did you forget to activate your virtualenv?'\nif os.access(INSTALL_PYTHON, os.X_OK):\n    CMD = [INSTALL_PYTHON, '-mpre_commit']\nelif which('pre-commit'):\n    CMD = ['pre-commit']\nelse:\n    raise SystemExit(DNE)\n\nCMD.extend(ARGS)\n\nexec(open(\"branchLint.py\").read())\n\nif sys.platform == 'win32':  # https://bugs.python.org/issue19124\n    import subprocess\n\n    if sys.version_info < (3, 7):  # https://bugs.python.org/issue25942\n        raise SystemExit(subprocess.Popen(CMD).wait())\n    else:\n        raise SystemExit(subprocess.call(CMD))\nelse:\n    os.execvp(CMD[0], CMD)\n")))),(0,o.kt)("h3",{id:"add-commitlintpy-file"},"Add ",(0,o.kt)("inlineCode",{parentName:"h3"},"commitLint.py")," file"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"sample"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import re\n\n# Manually change projectAcronym\nproject_acronym = "TEMPLATE"\nrule_commit = fr"\\[(({project_acronym})-(\\d)+)\\]:\\s\\w"\n\nmsg = f"""\n  # Invalid commit message!\n  #\n  # Please use the following rules:\n  # \'[required key]: <required message>\'\n  #\n  # - [required key]: \'[{project_acronym}-(key)]: \', when the (key) is a valid JIRA issue key\n  # - <required msg>: \'(msg)\', when the (msg) is a clear commit message\n  #\n  # For example:\n  # \'[{project_acronym}-1234]: Commit message\'\n"""\n\ncommit_msg = ""\nwith open(".git/COMMIT_EDITMSG", "r") as f:\n    commit_msg = f.read()\n\nif not re.match(rule_commit, commit_msg):\n    print(msg)\n    raise SystemExit("")\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"at ",(0,o.kt)("inlineCode",{parentName:"p"},".git/hooks/commit-msg")," file modify the contents to the following"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},'#!/usr/bin/env python3.9\nexec(open("commitLint.py").read())\n')))))}s.isMDXComponent=!0}}]);