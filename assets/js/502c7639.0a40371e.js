"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8552],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),s=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(r),d=n,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return r?a.createElement(f,o(o({ref:t},p),{},{components:r})):a.createElement(f,o({ref:t},p))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var s=2;s<i;s++)o[s]=r[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},17293:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var a=r(87462),n=(r(67294),r(3905));const i={},o="Abstract Factory",c={unversionedId:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/readme",id:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/readme",title:"Abstract Factory",description:"- it is an extension of the factory design pattern",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory",slug:"/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Visitor design pattern",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/"},next:{title:"Builder pattern",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Builder/"}},l={},s=[{value:"Allows you to create families of related objects without specifying a concrete class for each object",id:"allows-you-to-create-families-of-related-objects-without-specifying-a-concrete-class-for-each-object",level:2},{value:"Analogy:",id:"analogy",level:3},{value:"Coding terms:",id:"coding-terms",level:3},{value:"Structure",id:"structure",level:2},{value:"Summary",id:"summary",level:2}],p={toc:s};function u(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"abstract-factory"},"Abstract Factory"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"it is an extension of the factory design pattern"),(0,n.kt)("li",{parentName:"ul"},"it is needed when making an implementation or a factory that is more dynamic",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"which is to be able to add more features easily to the factory without needing to modify the factory again"))),(0,n.kt)("li",{parentName:"ul"},"better to create a factory first before modifying it into an abstract factory")),(0,n.kt)("h2",{id:"allows-you-to-create-families-of-related-objects-without-specifying-a-concrete-class-for-each-object"},"Allows you to create families of related objects without specifying a concrete class for each object"),(0,n.kt)("h3",{id:"analogy"},"Analogy:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Imagine that you're a clothing designer"),(0,n.kt)("li",{parentName:"ul"},"You need to build types of clothing",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"e.g.: shirts, sweaters, jeans"))),(0,n.kt)("li",{parentName:"ul"},"You also need sizes of clothing",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"e.g.: petites, regular, tall"))),(0,n.kt)("li",{parentName:"ul"},"To build these with Abstract Factory pattern",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"create an interface to build the clothing type (e.g.: sweater)"),(0,n.kt)("li",{parentName:"ol"},"create another interface to build the size (e.g.: petites)")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"These 2 interfaces will work together to generate a (petite-sized sweater)")))),(0,n.kt)("h3",{id:"coding-terms"},"Coding terms:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},'Imagine you\'re creating a "submit" button that will be used on windows and mac operating systems'),(0,n.kt)("li",{parentName:"ul"},"The button is the same object with the same functionality",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"only with a different class (Windows or Mac) depending on the operating system")))),(0,n.kt)("h2",{id:"structure"},"Structure"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Abstract Factory",src:r(25318).Z,width:"1448",height:"962"})),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Abstract Products declare interfaces for a set of distinct but related products which make up a product family.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Concrete Products are various implementations of abstract products, grouped by variants. Each abstract product (chair/sofa) must be implemented in all given variants (Victorian/Modern).")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The Abstract Factory interface declares a set of methods for creating each of the abstract products.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Concrete Factories implement creation methods of the abstract factory."),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Each concrete factory corresponds to a specific variant of products and creates only those product variants."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Although concrete factories instantiate concrete products, signatures of their creation methods must return corresponding abstract products."),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"This way the client code that uses a factory doesn\u2019t get coupled to the specific variant of the product it gets from a factory."),(0,n.kt)("li",{parentName:"ul"},"The Client can work with any concrete factory/product variant, as long as it communicates with their objects via abstract interfaces.")))),(0,n.kt)("h2",{id:"summary"},"Summary"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"makes the factory process easier by offering a generic interface to build a family of related objects")))}u.isMDXComponent=!0},25318:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/abstract_factory-b81ea05202c266f54cbe4a515b230b64.png"}}]);