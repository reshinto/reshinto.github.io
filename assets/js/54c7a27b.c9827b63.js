"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[95],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var s=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=s.createContext({}),p=function(e){var t=s.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return s.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,y=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?s.createElement(y,o(o({ref:t},l),{},{components:n})):s.createElement(y,o({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<a;p++)o[p]=n[p];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},26383:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var s=n(83117),r=(n(67294),n(3905));const a={},o="Python Example",i={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Facade/python/readme",id:"interviewPrep/designPatterns/Structural_patterns/Facade/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Facade/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Facade/python",slug:"/interviewPrep/designPatterns/Structural_patterns/Facade/python/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Facade/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/javascript/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/python/example2"}},c={},p=[],l={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-example"},"Python Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"""\nFacade Design Pattern\n\nIntent: Provides a simplified interface to a library, a framework, or any other\ncomplex set of classes.\n"""\n\n\nfrom __future__ import annotations\n\n\nclass Facade:\n    """\n    The Facade class provides a simple interface to the complex logic of one or\n    several subsystems. The Facade delegates the client requests to the\n    appropriate objects within the subsystem. The Facade is also responsible for\n    managing their lifecycle. All of this shields the client from the undesired\n    complexity of the subsystem.\n    """\n\n    def __init__(self, subsystem1: Subsystem1, subsystem2: Subsystem2) -> None:\n        """\n        Depending on your application\'s needs, you can provide the Facade with\n        existing subsystem objects or force the Facade to create them on its\n        own.\n        """\n\n        self._subsystem1 = subsystem1 or Subsystem1()\n        self._subsystem2 = subsystem2 or Subsystem2()\n\n    def operation(self) -> str:\n        """\n        The Facade\'s methods are convenient shortcuts to the sophisticated\n        functionality of the subsystems. However, clients get only to a fraction\n        of a subsystem\'s capabilities.\n        """\n\n        results = []\n        results.append("Facade initializes subsystems:")\n        results.append(self._subsystem1.operation1())\n        results.append(self._subsystem2.operation1())\n        results.append("Facade orders subsystems to perform the action:")\n        results.append(self._subsystem1.operation_n())\n        results.append(self._subsystem2.operation_z())\n        return "\\n".join(results)\n\n\nclass Subsystem1:\n    """\n    The Subsystem can accept requests either from the facade or client directly.\n    In any case, to the Subsystem, the Facade is yet another client, and it\'s\n    not a part of the Subsystem.\n    """\n\n    def operation1(self) -> str:\n        return "Subsystem1: Ready!"\n\n    # ...\n\n    def operation_n(self) -> str:\n        return "Subsystem1: Go!"\n\n\nclass Subsystem2:\n    """\n    Some facades can work with multiple subsystems at the same time.\n    """\n\n    def operation1(self) -> str:\n        return "Subsystem2: Get ready!"\n\n    # ...\n\n    def operation_z(self) -> str:\n        return "Subsystem2: Fire!"\n\n\ndef client_code(facade: Facade) -> None:\n    """\n    The client code works with complex subsystems through a simple interface\n    provided by the Facade. When a facade manages the lifecycle of the\n    subsystem, the client might not even know about the existence of the\n    subsystem. This approach lets you keep the complexity under control.\n    """\n\n    print(facade.operation(), end="")\n\n\nif __name__ == "__main__":\n    # The client code may have some of the subsystem\'s objects already created.\n    # In this case, it might be worthwhile to initialize the Facade with these\n    # objects instead of letting the Facade create new instances.\n    subsystem1 = Subsystem1()\n    subsystem2 = Subsystem2()\n    facade = Facade(subsystem1, subsystem2)\n    client_code(facade)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Facade initializes subsystems:\nSubsystem1: Ready!\nSubsystem2: Get ready!\nFacade orders subsystems to perform the action:\nSubsystem1: Go!\nSubsystem2: Fire!\n")))}u.isMDXComponent=!0}}]);