"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9449],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>d});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),i=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},p=function(e){var n=i(e.components);return t.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=i(r),d=o,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return r?t.createElement(g,s(s({ref:n},p),{},{components:r})):t.createElement(g,s({ref:n},p))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var i=2;i<a;i++)s[i]=r[i];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},30303:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var t=r(83117),o=(r(67294),r(3905));const a={},s="JavaScript Example",l={unversionedId:"interviewPrep/concurrency_parallel_programming/multithread/javascript/readme",id:"interviewPrep/concurrency_parallel_programming/multithread/javascript/readme",title:"JavaScript Example",description:"Single Threaded",source:"@site/docs/interviewPrep/concurrency_parallel_programming/multithread/javascript/readme.md",sourceDirName:"interviewPrep/concurrency_parallel_programming/multithread/javascript",slug:"/interviewPrep/concurrency_parallel_programming/multithread/javascript/",permalink:"/docs/interviewPrep/concurrency_parallel_programming/multithread/javascript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/concurrency_parallel_programming/multithread/javascript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Threads",permalink:"/docs/interviewPrep/concurrency_parallel_programming/multithread/"},next:{title:"Python Example",permalink:"/docs/interviewPrep/concurrency_parallel_programming/multithread/python/"}},c={},i=[{value:"Single Threaded",id:"single-threaded",level:2},{value:"Asynchronous blocking",id:"asynchronous-blocking",level:3},{value:"Asynchronous Non-blocking",id:"asynchronous-non-blocking",level:3}],p={toc:i};function u(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"javascript-example"},"JavaScript Example"),(0,o.kt)("h2",{id:"single-threaded"},"Single Threaded"),(0,o.kt)("h3",{id:"asynchronous-blocking"},"Asynchronous blocking"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"can be slow or fast, but will not be faster than non-blocking code")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const fetch = require("node-fetch");\n\nconst url = "https://jsonplaceholder.typicode.com/posts/";\nconst postIds = [\n  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\n  42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n  80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n  99, 100,\n];\nconst results = [];\n\nasync function runTasks() {\n  for (const postId of postIds) {\n    console.log(`Working on post id ${postId}`);\n    const response = await fetch(`${url}${postId}`);\n    results.push(await response.json());\n  }\n}\n\nasync function main() {\n  console.log("Timer started...");\n  const startHrTime = process.hrtime();\n\n  await runTasks();\n\n  console.log(results);\n\n  const elapsedHrTime = process.hrtime(startHrTime);\n  const elapsedTimeInMs = elapsedHrTime[0] + "." + elapsedHrTime[1];\n  console.log(\n    `It took ${elapsedTimeInMs} seconds to make ${postIds.length} API calls`\n  );\n}\n\nmain();\n')),(0,o.kt)("h3",{id:"asynchronous-non-blocking"},"Asynchronous Non-blocking"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"almost as fast as parallel programming in other languages")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const fetch = require("node-fetch");\n\nconst url = "https://jsonplaceholder.typicode.com/posts/";\nconst postIds = [\n  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\n  42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n  80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n  99, 100,\n];\nconst results = [];\n\nasync function runTasks() {\n  for (const postId of postIds) {\n    console.log(`Working on post id ${postId}`);\n    results.push(fetch(`${url}${postId}`));\n  }\n}\n\nasync function main() {\n  console.log("Timer started...");\n  const startHrTime = process.hrtime();\n\n  await runTasks();\n\n  for (const result of results) {\n    const response = await result;\n    console.log(await response.json());\n  }\n\n  const elapsedHrTime = process.hrtime(startHrTime);\n  const elapsedTimeInMs = elapsedHrTime[0] + "." + elapsedHrTime[1];\n  console.log(\n    `It took ${elapsedTimeInMs} seconds to make ${postIds.length} API calls`\n  );\n}\n\nmain();\n')))}u.isMDXComponent=!0}}]);