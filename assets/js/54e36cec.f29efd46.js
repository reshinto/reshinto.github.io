"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[78019],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=l(n),d=r,m=h["".concat(c,".").concat(d)]||h[d]||u[d]||o;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},77618:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(83117),r=(n(67294),n(3905));const o={},s="JavaScript Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/State/javascript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/State/javascript/readme",title:"JavaScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/State/javascript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/State/javascript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/State/javascript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/javascript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/State/javascript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/java/"},next:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/python/"}},c={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"javascript-example"},"JavaScript Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * The base State class declares methods that all Concrete State should\n * implement and also provides a backreference to the Context object, associated\n * with the State. This backreference can be used by States to transition the\n * Context to another State.\n */\nclass State {\n  setContext(context) {\n    this.context = context;\n  }\n\n  handle1() {}\n\n  handle2() {}\n}\n\nmodule.exports = State;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * The Context defines the interface of interest to clients. It also maintains a\n * reference to an instance of a State subclass, which represents the current\n * state of the Context.\n */\nclass Context {\n  constructor(state) {\n    /**\n     * type {State} A reference to the current state of the Context.\n     */\n    this.transitionTo(state);\n  }\n\n  /**\n   * The Context allows changing the State object at runtime.\n   */\n  transitionTo(state) {\n    console.log(`Context: Transition to ${state.constructor.name}.`);\n    this.state = state;\n    this.state.setContext(this);\n  }\n\n  /**\n   * The Context delegates part of its behavior to the current State object.\n   */\n  request1() {\n    this.state.handle1();\n  }\n\n  request2() {\n    this.state.handle2();\n  }\n}\n\nmodule.exports = Context;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const State = require("./State");\n\n/**\n * Concrete States implement various behaviors, associated with a state of the\n * Context.\n */\nclass ConcreteStateA extends State {\n  handle1() {\n    console.log("ConcreteStateA handles request1.");\n    console.log("ConcreteStateA wants to change the state of the context.");\n    this.context.transitionTo(new ConcreteStateB());\n  }\n\n  handle2() {\n    console.log("ConcreteStateA handles request2.");\n  }\n}\n\nclass ConcreteStateB extends State {\n  handle1() {\n    console.log("ConcreteStateB handles request1.");\n  }\n\n  handle2() {\n    console.log("ConcreteStateB handles request2.");\n    console.log("ConcreteStateB wants to change the state of the context.");\n    this.context.transitionTo(new ConcreteStateA());\n  }\n}\n\nmodule.exports = {\n  ConcreteStateA,\n  ConcreteStateB,\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * State Design Pattern\n *\n * Intent: Lets an object alter its behavior when its internal state changes. It\n * appears as if the object changed its class.\n */\n\nconst {ConcreteStateA} = require("./ConcreteState");\nconst Context = require("./Context");\n\nconst context = new Context(new ConcreteStateA());\ncontext.request1();\ncontext.request2();\n')))}u.isMDXComponent=!0}}]);