"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[39181],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),m=i,h=c["".concat(o,".").concat(m)]||c[m]||d[m]||l;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var u=2;u<l;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},39334:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var a=n(83117),i=(n(67294),n(3905));const l={},r="Designing Good Classes",s={unversionedId:"interviewPrep/design_principles/designingGoodClasses/readme",id:"interviewPrep/design_principles/designingGoodClasses/readme",title:"Designing Good Classes",description:"- Classes bind related data and expose functions that operate on that data",source:"@site/docs/interviewPrep/design_principles/designingGoodClasses/readme.md",sourceDirName:"interviewPrep/design_principles/designingGoodClasses",slug:"/interviewPrep/design_principles/designingGoodClasses/",permalink:"/docs/interviewPrep/design_principles/designingGoodClasses/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/designingGoodClasses/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Curly's Law - Do One Thing",permalink:"/docs/interviewPrep/design_principles/curlyLaw/"},next:{title:"Designing Good Functions",permalink:"/docs/interviewPrep/design_principles/designingGoodFunctions/"}},o={},u=[{value:"Organized and Encapsulated",id:"organized-and-encapsulated",level:2},{value:"Should be small and should do just one thing",id:"should-be-small-and-should-do-just-one-thing",level:2},{value:"Small number of instance variables",id:"small-number-of-instance-variables",level:2}],p={toc:u};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"designing-good-classes"},"Designing Good Classes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Classes bind related data and expose functions that operate on that data",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This helps make the code more organized"))),(0,i.kt)("li",{parentName:"ul"},"There are many design principles and patterns that can help make our code better organized",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Let's look at some rules which can help us design better classes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Organized and Encapsulated"),(0,i.kt)("li",{parentName:"ul"},"Should be small and should do just one thing"),(0,i.kt)("li",{parentName:"ul"},"Small number of instance variables")))))),(0,i.kt)("h2",{id:"organized-and-encapsulated"},"Organized and Encapsulated"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A class should keep all data attributes and utility functions private",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Only the functions that are supposed to be exposed should be kept public"))),(0,i.kt)("li",{parentName:"ul"},"A class should be ordered like this",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Start with the variables",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"public static constants"),(0,i.kt)("li",{parentName:"ul"},"followed by private static attributes"),(0,i.kt)("li",{parentName:"ul"},"followed by private instance attributes"))),(0,i.kt)("li",{parentName:"ul"},"followed by public functions"),(0,i.kt)("li",{parentName:"ul"},"private utility function just after the public function that calls it")))),(0,i.kt)("h2",{id:"should-be-small-and-should-do-just-one-thing"},"Should be small and should do just one thing"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A class should be very small. Different experts have different views on ",(0,i.kt)("inlineCode",{parentName:"li"},"how small?"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Based on most of the views, a class should be small enough that it does just one thing"),(0,i.kt)("li",{parentName:"ul"},"In general, it should have less than 20 functions"))),(0,i.kt)("li",{parentName:"ul"},"If a class does more than one thing then it should be broken down into different classes each of which does a single thing")),(0,i.kt)("h2",{id:"small-number-of-instance-variables"},"Small number of instance variables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A class should have strong cohesion",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"i.e., the functions of a class should be strongly related in supporting a single central purpose"))),(0,i.kt)("li",{parentName:"ul"},"A maximal cohesive class is one in which all functions work with all the instance variables",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Achieving that is pretty difficult"),(0,i.kt)("li",{parentName:"ul"},"We should try to make our classes as cohesive as possible"),(0,i.kt)("li",{parentName:"ul"},"This can be done by having a smaller number of instance variables such that each function in the class work with as many of the instance variables as possible"),(0,i.kt)("li",{parentName:"ul"},"This can be done by splitting the class into multiple classes based on the responsibility of each class")))))}d.isMDXComponent=!0}}]);