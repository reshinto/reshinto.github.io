"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[79111],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||a;return n?i.createElement(h,l(l({ref:t},c),{},{components:n})):i.createElement(h,l({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},58173:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var i=n(83117),r=(n(67294),n(3905));const a={},l="Open Closed Principle (OCP)",o={unversionedId:"interviewPrep/design_principles/SOLID/OpenClosedPrinciple/readme",id:"interviewPrep/design_principles/SOLID/OpenClosedPrinciple/readme",title:"Open Closed Principle (OCP)",description:"- Software entities (classes, modules, functions, etc.)",source:"@site/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/OpenClosedPrinciple",slug:"/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/",permalink:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TypeScript Example",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/typescript/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/cSharp/"}},s={},p=[{value:"2 types",id:"2-types",level:2},{value:"Meyer&#39;s open-closed principle",id:"meyers-open-closed-principle",level:3},{value:"Polymorphic open-closed principle",id:"polymorphic-open-closed-principle",level:3},{value:"Example",id:"example",level:2},{value:"Single Choice Principle",id:"single-choice-principle",level:3},{value:"Summary",id:"summary",level:2}],c={toc:p};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"open-closed-principle-ocp"},"Open Closed Principle (OCP)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Software entities (classes, modules, functions, etc.)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"should be open for extension"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It means that the behavior of the module can be extended"),(0,r.kt)("li",{parentName:"ul"},"When the requirements for the application change, we add new behavior to the module to meet the changed requirements"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"but closed for modification"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It means that extending a module's behavior does not involve changes to the source code of the module"))))),(0,r.kt)("li",{parentName:"ul"},"the entity can allow its behavior to be extended without modifying its source code"),(0,r.kt)("li",{parentName:"ul"},"In other words, we should be able to change the behavior of the module without changing the module itself")),(0,r.kt)("h2",{id:"2-types"},"2 types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Both ways use generalizations (for instance, inheritance or delegate functions) to resolve the apparent dilemma, but the goals, techniques, and results are different")),(0,r.kt)("h3",{id:"meyers-open-closed-principle"},"Meyer's open-closed principle"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A module is open if it is still available for extension",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g.: it should be possible to add fields to the data structures it contains, or new elements to the set of functions it performs"))),(0,r.kt)("li",{parentName:"ul"},"A module is closed if is available for use by other modules",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This assumes that the module has been given a well-defined, stable description (the interface in the sense of information hiding)"))),(0,r.kt)("li",{parentName:"ul"},"A class is closed, since it may be compiled, stored in a library, baselined, and used by client classes",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"But it is also open, since any new class may use it as parent, adding new features"),(0,r.kt)("li",{parentName:"ul"},"When a descendant class is defined, there is no need to change the original or to disturb its clients")))),(0,r.kt)("h3",{id:"polymorphic-open-closed-principle"},"Polymorphic open-closed principle"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"open-closed principle refer to the use of abstracted interfaces",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"where the implementations can be changed and multiple implementations could be created and polymorphically substituted for each other"))),(0,r.kt)("li",{parentName:"ul"},"this advocates inheritance from abstract base classes",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Interface specifications can be reused through inheritance but implementation need not be"),(0,r.kt)("li",{parentName:"ul"},"The existing interface is closed to modifications and new implementations must, at a minimum, implement that interface")))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When we removed data retrieval, parsing and saving from ",(0,r.kt)("inlineCode",{parentName:"li"},"TradeProcessor")," class and created separate class for each type of responsibility, we made ",(0,r.kt)("inlineCode",{parentName:"li"},"TradeProcessor")," class to conform to OCP",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If the requirements change, we can get completely different functionality without changing the TradeProcessor itself"))),(0,r.kt)("li",{parentName:"ul"},"Suppose at some point we were given requirement to support multiple data sources at the same time (stream, REST API and XML file)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It is not a problem for us"),(0,r.kt)("li",{parentName:"ul"},"We can use polymorphic DataProvider in TradeProcessor"),(0,r.kt)("li",{parentName:"ul"},"As you can see on the diagram below, we have created classes for every data source:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"StreamDataProvider"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"RESTAPIDataProvider")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"XMLFileDataProvider")),(0,r.kt)("li",{parentName:"ul"},"All of them are inherited from base ",(0,r.kt)("inlineCode",{parentName:"li"},"DataProvider")," class and override ",(0,r.kt)("inlineCode",{parentName:"li"},"reduce()")," method"),(0,r.kt)("li",{parentName:"ul"},"So, in the future, whenever we need to receive data from some new sources, we will do exactly the same thing"),(0,r.kt)("li",{parentName:"ul"},"Therefore, OCP is not violated"),(0,r.kt)("li",{parentName:"ul"},"We are closed for modifications (no need to change DataProvider class) and at the same time we are open for expansion")))))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"OCP",src:n(93704).Z,width:"810",height:"316"})),(0,r.kt)("h3",{id:"single-choice-principle"},"Single Choice Principle"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Suppose we have a hierarchy of classes designed to import data from files of different formats",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"We also have a factory method that creates the required Importer depending on the file extension"))),(0,r.kt)("li",{parentName:"ul"},"Does the implementation of such a factory comply with the OCP?",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Or do we need to introduce an ImporterFactory interface and factory hierarchy to comply with this principle?"))),(0,r.kt)("li",{parentName:"ul"},"The factory method by itself already hides the way to get the desired Importer from its customers and an additional level of indirection is not needed here")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'class ImporterFactory {\n  public static create(fileName: string): Importer {\n    switch (getExtension(fileName)) {\n      case "json":\n        return new JsonImporter();\n      case "xls":\n      case "xlsx":\n        return new XlsImporter();\n      default:\n        throw new Error("Extension is not supported");\n    }\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"according to ",(0,r.kt)("inlineCode",{parentName:"li"},"Bertrand Meyer"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It is necessary to admit the possibility that the list of variants, given and known at some stage of program development, may subsequently be changed by adding or removing variants"),(0,r.kt)("li",{parentName:"ul"},"To ensure that this approach to the software development process is implemented, you need to find a way to protect the program structure from the impact of such changes"),(0,r.kt)("li",{parentName:"ul"},"Hence, follows the principle of Single Choice"))),(0,r.kt)("li",{parentName:"ul"},"In other words: ",(0,r.kt)("strong",{parentName:"li"},"whenever a software system needs to support multiple alternatives, only one module of the system should know the complete list"))),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the goal of OCP is to minimize changes to existing classes when new functionality is added",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It is achieved by adding extension points (not just inheritance) that allow us to take advantage of powerful tools like composition, aggregation, and polymorphism")))))}d.isMDXComponent=!0},93704:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/ocp-8e1dceaf7f7b5a538b10b3afe37507ea.jpg"}}]);