"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[1748],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),f=o,b=u["".concat(l,".").concat(f)]||u[f]||p[f]||a;return n?r.createElement(b,i(i({ref:t},c),{},{components:n})):r.createElement(b,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},26037:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=n(83117),o=(n(67294),n(3905));const a={},i="Python Example",s={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Builder/python/readme",id:"interviewPrep/designPatterns/Creational_patterns/Builder/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Builder/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Builder/python",slug:"/interviewPrep/designPatterns/Creational_patterns/Builder/python/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Builder/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Builder/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Builder/javascript/example2"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Builder/python/example2"}},l={},d=[],c={toc:d};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"python-example"},"Python Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'"""\nBuilder Design Pattern\n\nIntent: Lets you construct complex objects step by step. The pattern allows you\nto produce different types and representations of an object using the same\nconstruction code.\n"""\n\n\nfrom __future__ import annotations\nfrom abc import ABC, abstractmethod, abstractproperty\nfrom typing import Any\n\n\nclass Builder(ABC):\n    """\n    The Builder interface specifies methods for creating the different parts of\n    the Product objects.\n    """\n\n    @abstractproperty\n    def product(self) -> None:\n        pass\n\n    @abstractmethod\n    def produce_part_a(self) -> None:\n        pass\n\n    @abstractmethod\n    def produce_part_b(self) -> None:\n        pass\n\n    @abstractmethod\n    def produce_part_c(self) -> None:\n        pass\n\n\nclass ConcreteBuilder1(Builder):\n    """\n    The Concrete Builder classes follow the Builder interface and provide\n    specific implementations of the building steps. Your program may have\n    several variations of Builders, implemented differently.\n    """\n\n    def __init__(self) -> None:\n        """\n        A fresh builder instance should contain a blank product object, which is\n        used in further assembly.\n        """\n        self.reset()\n\n    def reset(self) -> None:\n        self._product = Product1()\n\n    @property\n    def product(self) -> Product1:\n        """\n        Concrete Builders are supposed to provide their own methods for\n        retrieving results. That\'s because various types of builders may create\n        entirely different products that don\'t follow the same interface.\n        Therefore, such methods cannot be declared in the base Builder interface\n        (at least in a statically typed programming language).\n\n        Usually, after returning the end result to the client, a builder\n        instance is expected to be ready to start producing another product.\n        That\'s why it\'s a usual practice to call the reset method at the end of\n        the `getProduct` method body. However, this behavior is not mandatory,\n        and you can make your builders wait for an explicit reset call from the\n        client code before disposing of the previous result.\n        """\n        product = self._product\n        self.reset()\n        return product\n\n    def produce_part_a(self) -> None:\n        self._product.add("PartA1")\n\n    def produce_part_b(self) -> None:\n        self._product.add("PartB1")\n\n    def produce_part_c(self) -> None:\n        self._product.add("PartC1")\n\n\nclass Product1():\n    """\n    It makes sense to use the Builder pattern only when your products are quite\n    complex and require extensive configuration.\n\n    Unlike in other creational patterns, different concrete builders can produce\n    unrelated products. In other words, results of various builders may not\n    always follow the same interface.\n    """\n\n    def __init__(self) -> None:\n        self.parts = []\n\n    def add(self, part: Any) -> None:\n        self.parts.append(part)\n\n    def list_parts(self) -> None:\n        print(f"Product parts: {\', \'.join(self.parts)}", end="")\n\n\nclass Director:\n    """\n    The Director is only responsible for executing the building steps in a\n    particular sequence. It is helpful when producing products according to a\n    specific order or configuration. Strictly speaking, the Director class is\n    optional, since the client can control builders directly.\n    """\n\n    def __init__(self) -> None:\n        self._builder = None\n\n    @property\n    def builder(self) -> Builder:\n        return self._builder\n\n    @builder.setter\n    def builder(self, builder: Builder) -> None:\n        """\n        The Director works with any builder instance that the client code passes\n        to it. This way, the client code may alter the final type of the newly\n        assembled product.\n        """\n        self._builder = builder\n\n    """\n    The Director can construct several product variations using the same\n    building steps.\n    """\n\n    def build_minimal_viable_product(self) -> None:\n        self.builder.produce_part_a()\n\n    def build_full_featured_product(self) -> None:\n        self.builder.produce_part_a()\n        self.builder.produce_part_b()\n        self.builder.produce_part_c()\n\n\nif __name__ == "__main__":\n    """\n    The client code creates a builder object, passes it to the director and then\n    initiates the construction process. The end result is retrieved from the\n    builder object.\n    """\n\n    director = Director()\n    builder = ConcreteBuilder1()\n    director.builder = builder\n\n    print("Standard basic product: ")\n    director.build_minimal_viable_product()\n    builder.product.list_parts()\n\n    print("\\n")\n\n    print("Standard full featured product: ")\n    director.build_full_featured_product()\n    builder.product.list_parts()\n\n    print("\\n")\n\n    # Remember, the Builder pattern can be used without a Director class.\n    print("Custom product: ")\n    builder.produce_part_a()\n    builder.produce_part_b()\n    builder.product.list_parts()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Standard basic product:\nProduct parts: PartA1\n\nStandard full featured product:\nProduct parts: PartA1, PartB1, PartC1\n\nCustom product:\nProduct parts: PartA1, PartB1\n")))}p.isMDXComponent=!0}}]);