"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[80563],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},12534:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(83117),i=(n(67294),n(3905));const a={},o="Curly's Law - Do One Thing",l={unversionedId:"interviewPrep/design_principles/curlyLaw/readme",id:"interviewPrep/design_principles/curlyLaw/readme",title:"Curly's Law - Do One Thing",description:"- it is about choosing a single, clearly defined goal for any particular bit of code: Do One Thing",source:"@site/docs/interviewPrep/design_principles/curlyLaw/readme.md",sourceDirName:"interviewPrep/design_principles/curlyLaw",slug:"/interviewPrep/design_principles/curlyLaw/",permalink:"/docs/interviewPrep/design_principles/curlyLaw/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/curlyLaw/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"You Aren't Gonna Need It (YAGNI)",permalink:"/docs/interviewPrep/design_principles/YAGNI/"},next:{title:"Designing Good Classes",permalink:"/docs/interviewPrep/design_principles/designingGoodClasses/"}},s={},u=[{value:"it is reflected in several core principles of modern software development",id:"it-is-reflected-in-several-core-principles-of-modern-software-development",level:2},{value:"Don&#39;t Repeat Yourself",id:"dont-repeat-yourself",level:3},{value:"Once and Only Once",id:"once-and-only-once",level:3},{value:"Single Point of Truth",id:"single-point-of-truth",level:3}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"curlys-law---do-one-thing"},"Curly's Law - Do One Thing"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"it is about choosing a single, clearly defined goal for any particular bit of code: Do One Thing"),(0,i.kt)("li",{parentName:"ul"},"An entity (class, function, variable) should mean one thing, and one thing only",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It should not mean one thing in one circumstance and carry a different value from a different domain some other time"),(0,i.kt)("li",{parentName:"ul"},"It should not mean two things at once"),(0,i.kt)("li",{parentName:"ul"},"It should mean One Thing and should mean it all of the time"))),(0,i.kt)("li",{parentName:"ul"},"A variable should mean one thing, and one thing only",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It should not mean one thing in one circumstance, and carry a different value from a different domain some other time"),(0,i.kt)("li",{parentName:"ul"},"It should not mean two things at once"),(0,i.kt)("li",{parentName:"ul"},"It must not be both a floor polish and a dessert topping"),(0,i.kt)("li",{parentName:"ul"},"It should mean One Thing, and should mean it all of the time"))),(0,i.kt)("li",{parentName:"ul"},"Bob Martin refers to Curly's Law as The Single Responsibility Principle"),(0,i.kt)("li",{parentName:"ul"},"Curly's Law is about choosing a single, clearly defined goal for any particular bit of code: Do One Thing",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"But in choosing one thing, you are ruling out an infinite universe of other possible things you could have done"))),(0,i.kt)("li",{parentName:"ul"},"Curly's Law also means consciously choosing what your code won't do",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This is much more difficult than choosing what to do, because it runs counter to all the natural generalist tendencies of software developers"),(0,i.kt)("li",{parentName:"ul"},"It could mean breaking code apart, violating traditional OOP rules, or introducing duplicate code"),(0,i.kt)("li",{parentName:"ul"},"It's taking one step backward to go two steps forward"))),(0,i.kt)("li",{parentName:"ul"},"Each variable, each line of code, each function, each class, each project should Do One Thing",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Unfortunately, we usually don't find out what that one thing is until we've reached the end of it")))),(0,i.kt)("h2",{id:"it-is-reflected-in-several-core-principles-of-modern-software-development"},"it is reflected in several core principles of modern software development"),(0,i.kt)("h3",{id:"dont-repeat-yourself"},"Don't Repeat Yourself"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you have more than one way to express the same thing, at some point the two or three different representations will most likely fall out of step with each other",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Even if they don't, you're guaranteeing yourself the headache of maintaining them in parallel whenever a change occurs"),(0,i.kt)("li",{parentName:"ul"},"And change will occur"),(0,i.kt)("li",{parentName:"ul"},"Don't repeat yourself is important if you want flexible and maintainable software")))),(0,i.kt)("h3",{id:"once-and-only-once"},"Once and Only Once"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each and every declaration of behavior should occur once, and only once",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This is one of the main goals, if not the main goal, when refactoring code"),(0,i.kt)("li",{parentName:"ul"},"The design goal is to eliminate duplicated declarations of behavior, typically by merging them or replacing multiple similar implementations with a unifying abstraction")))),(0,i.kt)("h3",{id:"single-point-of-truth"},"Single Point of Truth"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Repetition leads to inconsistency and code that is subtly broken, because you changed only some repetitions when you needed to change all of them",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Often, it also means that you haven't properly thought through the organization of your code"),(0,i.kt)("li",{parentName:"ul"},"Any time you see duplicate code, that's a danger sign"),(0,i.kt)("li",{parentName:"ul"},"Complexity is a cost, don't pay it twice")))))}p.isMDXComponent=!0}}]);