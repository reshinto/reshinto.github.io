"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[615],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var r=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=r.createContext({}),m=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=m(a),c=i,y=d["".concat(s,".").concat(c)]||d[c]||p[c]||n;return a?r.createElement(y,o(o({ref:t},u),{},{components:a})):r.createElement(y,o({ref:t},u))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,o=new Array(n);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var m=2;m<n;m++)o[m]=a[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},57555:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>m});var r=a(83117),i=(a(67294),a(3905));const n={},o="Memory",l={unversionedId:"interviewPrep/data_structures/04Memory/readme",id:"interviewPrep/data_structures/04Memory/readme",title:"Memory",description:"- it is the foundational layer of computing where all data is stored",source:"@site/docs/interviewPrep/data_structures/04Memory/readme.md",sourceDirName:"interviewPrep/data_structures/04Memory",slug:"/interviewPrep/data_structures/04Memory/",permalink:"/docs/interviewPrep/data_structures/04Memory/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/data_structures/04Memory/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Complexity Analysis",permalink:"/docs/interviewPrep/data_structures/03ComplexityAnalysis/"},next:{title:"Heap",permalink:"/docs/interviewPrep/data_structures/05Heap/"}},s={},m=[{value:"Example of memory usage",id:"example-of-memory-usage",level:2},{value:"Binary Digit (Bit)",id:"binary-digit-bit",level:2},{value:"Byte",id:"byte",level:2},{value:"Fixed-Width Integer",id:"fixed-width-integer",level:2},{value:"American Standard Code for Information Interchange (ASCII)",id:"american-standard-code-for-information-interchange-ascii",level:2},{value:"Pointers",id:"pointers",level:2}],u={toc:m};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"memory"},"Memory"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"it is the foundational layer of computing where all data is stored",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"data stored in memory is stored in bytes and by extension bits"),(0,i.kt)("li",{parentName:"ul"},"bytes in memory can point to other bytes in memory",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"so as to store references to other data"))),(0,i.kt)("li",{parentName:"ul"},"the amount of memory that a machine has is bounded, making it valuable to limit how much memory an algorithm takes up"),(0,i.kt)("li",{parentName:"ul"},"accessing a byte or a fixed number of bytes (like 4 bytes or 8 bytes in the case of 32 bit and 64 bit integers) is an elementary operation which can be loosely treated as a single unit of operational work"))),(0,i.kt)("li",{parentName:"ul"},"in other words",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"memory is a bounded canvas of memory slots that can store data",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"bounded means that you have a limited amount of data that you can store in it"),(0,i.kt)("li",{parentName:"ul"},"it is possible to run out of memory"),(0,i.kt)("li",{parentName:"ul"},"information that's stored in these memory slots are stored in base 2 format (binary number format) as bits",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"1 memory slot can hold 8 bits which is 1 byte"))),(0,i.kt)("li",{parentName:"ul"},"when storing an integer in memory, that integer is a fixed-width integer",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"meaning its either 32 bits or 64 bits",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"if the Operating System (OS) using 32 bit architecture, it would always need 4 memory slot to hold 32 bits which is 4 bytes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"order is dependent of OS endianess",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Little endian ",(0,i.kt)("inlineCode",{parentName:"li"},"00000001 00000000 00000000 00000000"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"least significant bytes comes first"))),(0,i.kt)("li",{parentName:"ul"},"Big endian ",(0,i.kt)("inlineCode",{parentName:"li"},"00000000 00000000 00000000 00000001"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"most significant bytes comes first"))))),(0,i.kt)("li",{parentName:"ul"},"when accessing a 32 bit integer, you will be accessing 4 memory slots",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"this is a very inexpensive operation from a time point of view")))))))))))))),(0,i.kt)("h2",{id:"example-of-memory-usage"},"Example of memory usage"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"e.g.: storing a fixed-width 32 bit integer value to a variable",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"foobar = 1")),(0,i.kt)("li",{parentName:"ul"},"what happens under the hood is where the program is going to store this variable, the number 1 in a memory slot or series of memory slots that is free in the memory canvas"),(0,i.kt)("li",{parentName:"ul"},"if the value requires more than 1 memory slots to be stored, it will store them back to back\n",(0,i.kt)("img",{alt:"singleValueMemory",src:a(38968).Z,width:"1494",height:"1020"})))),(0,i.kt)("li",{parentName:"ul"},"e.g.: storing a list of fixed-width 32 bit integer value to a variable",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"foobar = [1, 2]"),(0,i.kt)("img",{alt:"listValueMemory",src:a(25619).Z,width:"1310",height:"974"})))),(0,i.kt)("li",{parentName:"ul"},"the computer can access any of the memory slots very quickly with the memory address")),(0,i.kt)("h2",{id:"binary-digit-bit"},"Binary Digit (Bit)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"it is a fundamental unit of information in Computer Science that represents a state with 1 of 2 values",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"usually 0 and 1"))),(0,i.kt)("li",{parentName:"ul"},"any data stored in a computer is at the most basic level, represented in bits")),(0,i.kt)("h2",{id:"byte"},"Byte"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a group of 8 bits",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"e.g.: 01101000 is a byte"))),(0,i.kt)("li",{parentName:"ul"},"a single byte can represent up to 256 data values 2^8"),(0,i.kt)("li",{parentName:"ul"},"since a binary number is a number expressed with only 2 symbols, like 0 and 1",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"a byte can represent all the numbers between 0 and 255 in binary format",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"1: 0000 0001\n2: 0000 0010\n3: 0000 0011\n4: 0000 0100\n")))))),(0,i.kt)("h2",{id:"fixed-width-integer"},"Fixed-Width Integer"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"an integer represented by a fixed amount of bits"),(0,i.kt)("li",{parentName:"ul"},"e.g.: a 32 bit integer is a type int integer represented by 32 bits (4 bytes)\n",(0,i.kt)("inlineCode",{parentName:"li"},"00000000 00000000 00000000 00000001"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"a 64 bit integer is a type long integer represented by 64 bits (8 bytes)\n",(0,i.kt)("inlineCode",{parentName:"li"},"00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001")))),(0,i.kt)("li",{parentName:"ul"},"regardless of how large an integer is, its fixed-width-integer representation is by definition made up of a constant number of bits",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"an operation performed on its fixed-width-integer representation consists of a constant number of bit manipulations",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"since the integer is made up of a fixed number of bits")))))),(0,i.kt)("h2",{id:"american-standard-code-for-information-interchange-ascii"},"American Standard Code for Information Interchange (ASCII)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"map a character to a number"),(0,i.kt)("li",{parentName:"ul"},'e.g.: ASCII code for character "A" is 65 which would be turned into bits'),(0,i.kt)("li",{parentName:"ul"},"thus a string of characters will be stored as a list of numbers in memory")),(0,i.kt)("h2",{id:"pointers"},"Pointers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"at any memory slot, a memory address of another memory slot can be stored in base 2 format (binary number format)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"allows you to not have to store specific data at a memory slot"),(0,i.kt)("li",{parentName:"ul"},"but instead point to another memory slot that stores that data"))),(0,i.kt)("li",{parentName:"ul"},"e.g.: store memory slot 16 at memory slot 2\n",(0,i.kt)("img",{alt:"pointer",src:a(7797).Z,width:"1298",height:"894"}))))}p.isMDXComponent=!0},25619:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/listValueMemory-eab948bef7f29a3ce1023ab29a8f3e58.png"},7797:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/pointer-cee628064ba190d02ab604a6aaf03654.png"},38968:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/singleValueMemory-5672e4bc0be00a9dabacb058c418d5b9.png"}}]);