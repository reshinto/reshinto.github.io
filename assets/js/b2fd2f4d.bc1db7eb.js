"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[50644],{3905:(e,t,i)=>{i.d(t,{Zo:()=>u,kt:()=>m});var n=i(67294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function l(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?l(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)i=l[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)i=l[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(i),m=a,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||l;return i?n.createElement(h,r(r({ref:t},u),{},{components:i})):n.createElement(h,r({ref:t},u))}));function m(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=i.length,r=new Array(l);r[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var p=2;p<l;p++)r[p]=i[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}c.displayName="MDXCreateElement"},28596:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=i(83117),a=(i(67294),i(3905));const l={},r="Design Principles",o={unversionedId:"interviewPrep/design_principles/readme",id:"interviewPrep/design_principles/readme",title:"Design Principles",description:"Overview",source:"@site/docs/interviewPrep/design_principles/readme.md",sourceDirName:"interviewPrep/design_principles",slug:"/interviewPrep/design_principles/",permalink:"/docs/interviewPrep/design_principles/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/typescript/"},next:{title:"Big Design Up Front (BDUF)",permalink:"/docs/interviewPrep/design_principles/BDUF/"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Code Smells",id:"code-smells",level:2},{value:"Rigidity",id:"rigidity",level:3},{value:"Fragility",id:"fragility",level:3},{value:"Immobility",id:"immobility",level:3},{value:"Viscosity",id:"viscosity",level:3},{value:"Needless complexity",id:"needless-complexity",level:3},{value:"Low Coupling and High Cohesion",id:"low-coupling-and-high-cohesion",level:2},{value:"Low coupling",id:"low-coupling",level:3},{value:"High cohesion",id:"high-cohesion",level:3},{value:"SOLID",id:"solid",level:2},{value:"Single-responsibility Principle",id:"single-responsibility-principle",level:3},{value:"Open-closed Principle",id:"open-closed-principle",level:3},{value:"Liskov Substitution Principle",id:"liskov-substitution-principle",level:3},{value:"Interface Segregation Principle",id:"interface-segregation-principle",level:3},{value:"Dependency Inversion Principle",id:"dependency-inversion-principle",level:3},{value:"Don&#39;t Repeat Yourself",id:"dont-repeat-yourself",level:2},{value:"Keep it simple, stupid",id:"keep-it-simple-stupid",level:2},{value:"You Aren&#39;t Gonna Need It",id:"you-arent-gonna-need-it",level:2},{value:"Big Design Up Front",id:"big-design-up-front",level:2},{value:"Separation Of Concerns",id:"separation-of-concerns",level:2},{value:"Curly&#39;s Law",id:"curlys-law",level:2},{value:"Premature Optimization is the Root of All Evil",id:"premature-optimization-is-the-root-of-all-evil",level:2},{value:"Boy-Scout Rule",id:"boy-scout-rule",level:2},{value:"Code for the Maintainer",id:"code-for-the-maintainer",level:2},{value:"Principle of Least Astonishment",id:"principle-of-least-astonishment",level:2},{value:"Hide Implementation Details",id:"hide-implementation-details",level:2},{value:"Maximize Cohesion",id:"maximize-cohesion",level:2},{value:"Minimize Coupling",id:"minimize-coupling",level:2},{value:"Law of Demeter / Principle of Least Knowledge",id:"law-of-demeter--principle-of-least-knowledge",level:2},{value:"Design by Contract",id:"design-by-contract",level:2},{value:"Command-Query Separation (CQS)",id:"command-query-separation-cqs",level:2},{value:"Meaningful Variable Names",id:"meaningful-variable-names",level:2},{value:"Designing Good Functions",id:"designing-good-functions",level:2},{value:"Designing Good Classes",id:"designing-good-classes",level:2},{value:"Minimum Viable Product",id:"minimum-viable-product",level:2},{value:"Proof Of Concept",id:"proof-of-concept",level:2},{value:"Anti SOLID",id:"anti-solid",level:2},{value:"Anti-SRP",id:"anti-srp",level:3},{value:"Anti-OCP",id:"anti-ocp",level:3},{value:"Anti-LSP",id:"anti-lsp",level:3},{value:"Anti-ISP",id:"anti-isp",level:3},{value:"Anti-DIP",id:"anti-dip",level:3}],u={toc:p};function d(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"design-principles"},"Design Principles"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"there are ",(0,a.kt)("strong",{parentName:"li"},"formal measurable criteria")," that describe the quality of the code or design",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"examples",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"the cyclomatic complexity of methods"),(0,a.kt)("li",{parentName:"ul"},"the depth of the inheritance hierarchy"),(0,a.kt)("li",{parentName:"ul"},"the number of method lines"))))),(0,a.kt)("li",{parentName:"ul"},"they are useful and keeping these values in the normal range is necessary but not sufficient condition for good software design"),(0,a.kt)("li",{parentName:"ul"},"in addition to formal criteria, there are common concepts of good design",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"e.g.: ",(0,a.kt)("inlineCode",{parentName:"li"},"low coupling and high cohesion")))),(0,a.kt)("li",{parentName:"ul"},"there are design principles ",(0,a.kt)("strong",{parentName:"li"},"between formal and informal criteria"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"design principles are rules that experienced designers rely on"),(0,a.kt)("li",{parentName:"ul"},"main goal is to describe in simple words what is ",(0,a.kt)("inlineCode",{parentName:"li"},"good and bad")," in software design"))),(0,a.kt)("li",{parentName:"ul"},"design principles are used to combat complexity and make it easier to introduce changes needed")),(0,a.kt)("h2",{id:"code-smells"},"Code Smells"),(0,a.kt)("h3",{id:"rigidity"},"Rigidity"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"hard to change")),(0,a.kt)("h3",{id:"fragility"},"Fragility"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"easy to break")),(0,a.kt)("h3",{id:"immobility"},"Immobility"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"hard to reuse")),(0,a.kt)("h3",{id:"viscosity"},"Viscosity"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"hard to choose the right way to introduce changes")),(0,a.kt)("h3",{id:"needless-complexity"},"Needless complexity"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"over design")),(0,a.kt)("h2",{id:"low-coupling-and-high-cohesion"},"Low Coupling and High Cohesion"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"these concepts are useful, but are also too abstract and informal")),(0,a.kt)("h3",{id:"low-coupling"},"Low coupling"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"modules should be as independent as possible from other modules",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"so that changes to modules do not heavily impact other modules")))),(0,a.kt)("h3",{id:"high-cohesion"},"High cohesion"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"keep elements of the module that are related to the functionality that module provides as close to each other as possible")),(0,a.kt)("h2",{id:"solid"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/SOLID/"},"SOLID")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"when the application has only 200 lines",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"the design itself is not needed"),(0,a.kt)("li",{parentName:"ul"},"it is enough to write 5 - 7 methods carefully and everything will be fine"),(0,a.kt)("li",{parentName:"ul"},"problems might arise when the system grows and requires scaling"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SOLID")," is an acronym used for the first 5 object-oriented principles by ",(0,a.kt)("inlineCode",{parentName:"li"},"Robert C. Martin")," also known as ",(0,a.kt)("inlineCode",{parentName:"li"},"Uncle Bob"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"he did not invent or discover them"),(0,a.kt)("li",{parentName:"ul"},"but structured and combined them into a set of 5 principles commonly known as ",(0,a.kt)("inlineCode",{parentName:"li"},"SOLID")))),(0,a.kt)("li",{parentName:"ul"},"these principles establish the practices that tend to develop software with considerations for maintaining and extending as the project grows",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"adopting these practices can also contribute to avoiding code smells, refactoring code, and agile or adaptive software development")))),(0,a.kt)("h3",{id:"single-responsibility-principle"},(0,a.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/"},"Single-responsibility Principle")),(0,a.kt)("h3",{id:"open-closed-principle"},(0,a.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/"},"Open-closed Principle")),(0,a.kt)("h3",{id:"liskov-substitution-principle"},(0,a.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/"},"Liskov Substitution Principle")),(0,a.kt)("h3",{id:"interface-segregation-principle"},(0,a.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/"},"Interface Segregation Principle")),(0,a.kt)("h3",{id:"dependency-inversion-principle"},(0,a.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/"},"Dependency Inversion Principle")),(0,a.kt)("h2",{id:"dont-repeat-yourself"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/DRY/"},"Don't Repeat Yourself")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"it is a principle of software development that aims at reducing the repetition of patterns and code duplication in favor of abstractions and avoiding redundancy")),(0,a.kt)("h2",{id:"keep-it-simple-stupid"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/KISS/"},"Keep it simple, stupid")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"it is a design principle which states that designs and/or systems should be as simple as possible",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Wherever possible, complexity should be avoided in a system\u2014as simplicity guarantees the greatest levels of user acceptance and interaction")))),(0,a.kt)("h2",{id:"you-arent-gonna-need-it"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/YAGNI/"},"You Aren't Gonna Need It")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"it is a practice in software development which states that features should only be added when required",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"As a part of the extreme programming (XP) philosophy, YAGNI trims away excess and inefficiency in development to facilitate the desired increased frequency of releases")))),(0,a.kt)("h2",{id:"big-design-up-front"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/BDUF/"},"Big Design Up Front")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"you should spend more time fully designing the application before you even write the first line of code")),(0,a.kt)("h2",{id:"separation-of-concerns"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/SOC/"},"Separation Of Concerns")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"if you\u2019re designing a system that deals with several concepts, you want to group your functions into modules depending on what they have to deal with")),(0,a.kt)("h2",{id:"curlys-law"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/curlyLaw/"},"Curly's Law")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"it is about choosing a single, clearly defined goal for any particular bit of code: Do One Thing")),(0,a.kt)("h2",{id:"premature-optimization-is-the-root-of-all-evil"},"Premature Optimization is the Root of All Evil"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Programmers waste enormous amounts of time thinking about or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"We should forget about small efficiencies, say about 97% of the time",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"premature optimization is the root of all evil"))),(0,a.kt)("li",{parentName:"ul"},"Yet we should not pass up our opportunities in that critical 3%")))),(0,a.kt)("h2",{id:"boy-scout-rule"},"Boy-Scout Rule"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Any time someone sees some code that isn't as clear as it should be, they should take the opportunity to fix it right there and then",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"or at least within a few minutes"))),(0,a.kt)("li",{parentName:"ul"},"This opportunistic refactoring is referred to by Uncle Bob as following the boy-scout rule",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"always leave the code behind in a better state than you found it"))),(0,a.kt)("li",{parentName:"ul"},"The code quality tends to degrade with each change",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This results in technical debt"),(0,a.kt)("li",{parentName:"ul"},"The Boy-Scout Principle saves us from that")))),(0,a.kt)("h2",{id:"code-for-the-maintainer"},"Code for the Maintainer"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Code maintenance is an expensive and difficult process",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Always code considering someone else as the maintainer and making changes accordingly even if you're the maintainer"),(0,a.kt)("li",{parentName:"ul"},"After a while, you'll remember the code as much as a stranger"))),(0,a.kt)("li",{parentName:"ul"},"Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live")),(0,a.kt)("h2",{id:"principle-of-least-astonishment"},"Principle of Least Astonishment"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Principle of Least Astonishment states that a component of a system should behave in a way that most users will expect it to behave",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The behavior should not astonish or surprise users"))),(0,a.kt)("li",{parentName:"ul"},"Code should do what the name and comments suggest",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Conventions should be followed"),(0,a.kt)("li",{parentName:"ul"},"Surprising side effects should be avoided as much as possible")))),(0,a.kt)("h2",{id:"hide-implementation-details"},"Hide Implementation Details"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Hiding implementation details helps to make changes in a component without making changes in the other modules/clients using that component",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This can be achieved by creating interfaces and using them instead of the concrete classes"))),(0,a.kt)("li",{parentName:"ul"},"Encapsulation with proper access management should also be done to expose only the required public functions")),(0,a.kt)("h2",{id:"maximize-cohesion"},"Maximize Cohesion"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Cohesion is the degree to how strongly related and focused are the various responsibilities of a module",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"It is a measure of the strength of the relationship between the class\u2019s methods and data themselves"),(0,a.kt)("li",{parentName:"ul"},"We should strive to maximize cohesion"),(0,a.kt)("li",{parentName:"ul"},"High cohesion results in better understanding, maintaining, and reusing components"))),(0,a.kt)("li",{parentName:"ul"},"Cohesion is increased if",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The functionalities embedded in a class, accessed through its methods, have much in common"),(0,a.kt)("li",{parentName:"ul"},"Methods carry out a small number of related activities, by avoiding coarsely grained or unrelated sets of data"),(0,a.kt)("li",{parentName:"ul"},"Related methods are in the same source file or otherwise grouped together",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"for example, in separate files but in the same sub-directory/folder")))))),(0,a.kt)("h2",{id:"minimize-coupling"},"Minimize Coupling"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Coupling is the degree to which each module depends on other modules; a measure of how closely connected two modules are",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"We should strive to minimize coupling"))),(0,a.kt)("li",{parentName:"ul"},"Coupling is usually contrasted with cohesion",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Low coupling often correlates with high cohesion and vice versa"))),(0,a.kt)("li",{parentName:"ul"},"Tightly coupled modules have the following disadvantages",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Change in one module might break another module"),(0,a.kt)("li",{parentName:"ul"},"Change in one module usually forces a ripple effect of changes in other modules"),(0,a.kt)("li",{parentName:"ul"},"Reusability decreases as dependency over other modules increases"),(0,a.kt)("li",{parentName:"ul"},"Assembly of modules might require more effort and/or time"))),(0,a.kt)("li",{parentName:"ul"},"Coupling can be reduced by",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"By hiding inner details and interacting through interfaces"),(0,a.kt)("li",{parentName:"ul"},"Avoid interacting with classes that it can avoid directly dealing with"))),(0,a.kt)("li",{parentName:"ul"},"Components in a loosely coupled system can be replaced with alternative implementations that provide the same services")),(0,a.kt)("h2",{id:"law-of-demeter--principle-of-least-knowledge"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/lawOfDemeter/"},"Law of Demeter / Principle of Least Knowledge")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Code components should only talk to its direct relations and not to strangers")),(0,a.kt)("h2",{id:"design-by-contract"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/designByContract/"},"Design by Contract")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"it is a software correctness methodology",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"It prescribes that software designers should define formal, precise and verifiable interface specifications for software components"),(0,a.kt)("li",{parentName:"ul"},"which extend the ordinary definition of abstract data types with preconditions, postconditions and invariants")))),(0,a.kt)("h2",{id:"command-query-separation-cqs"},"Command-Query Separation (CQS)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"it states that every method should either be a command that performs an action, or a query that returns data to the caller, but not both",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"In other words, asking a question should not change the answer"))),(0,a.kt)("li",{parentName:"ul"},"Query",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Returns a result without changing the state"))),(0,a.kt)("li",{parentName:"ul"},"Command\nChanges the state but does not return any value"),(0,a.kt)("li",{parentName:"ul"},"This way the query method could be used anywhere without changing the data / state",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"We should apply naming conventions (get, set, add, etc.) to imply whether it is a command or a query")))),(0,a.kt)("h2",{id:"meaningful-variable-names"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/meaningfulVariableNames/"},"Meaningful Variable Names")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"variable names might be easy to write but it makes the code difficult to read and makes debugging more time-consuming")),(0,a.kt)("h2",{id:"designing-good-functions"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/designingGoodFunctions/"},"Designing Good Functions")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A good function allows understanding it without going into lower-level details unless required")),(0,a.kt)("h2",{id:"designing-good-classes"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/designingGoodClasses/"},"Designing Good Classes")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Classes bind related data and expose functions that operate on that data",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This helps make the code more organized")))),(0,a.kt)("h2",{id:"minimum-viable-product"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/MVP/"},"Minimum Viable Product")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"it represents the minimum amount of functionality your product needs to have in order to understand how viable it is in reality")),(0,a.kt)("h2",{id:"proof-of-concept"},(0,a.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/POC/"},"Proof Of Concept")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"It normally comes before the MVP and it is only meant as a practical proof that the core functionality of what you\u2019re trying to build is possible")),(0,a.kt)("h2",{id:"anti-solid"},"Anti SOLID"),(0,a.kt)("h3",{id:"anti-srp"},"Anti-SRP"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Blurred")," responsibility principle:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"classes are split into many small classes, resulting in logic being spread across multiple classes and/or modules")))),(0,a.kt)("h3",{id:"anti-ocp"},"Anti-OCP"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Factory-Factory Principle"),(0,a.kt)("li",{parentName:"ul"},"The design is too general and extensible, with too many levels of abstraction")),(0,a.kt)("h3",{id:"anti-lsp"},"Anti-LSP"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The principle of unclear inheritance:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"either an excessive amount of inheritance, or in its complete absence")))),(0,a.kt)("h3",{id:"anti-isp"},"Anti-ISP"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Thousand Interface Principle"),(0,a.kt)("li",{parentName:"ul"},"Class interfaces are fragmented into too many pieces, making them awkward for all clients to use")),(0,a.kt)("h3",{id:"anti-dip"},"Anti-DIP"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DI-brain")," Principle"),(0,a.kt)("li",{parentName:"ul"},"Interfaces are allocated for each class and passed in batches through constructors"),(0,a.kt)("li",{parentName:"ul"},"It becomes almost impossible to understand where the logic is")))}d.isMDXComponent=!0}}]);