"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8571],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>p});var t=r(67294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function u(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?u(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},u=Object.keys(e);for(t=0;t<u.length;t++)r=u[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(t=0;t<u.length;t++)r=u[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var m=t.createContext({}),s=function(e){var n=t.useContext(m),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},c=function(e){var n=s(e.components);return t.createElement(m.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},v=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,u=e.originalType,m=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),v=s(r),p=i,S=v["".concat(m,".").concat(p)]||v[p]||l[p]||u;return r?t.createElement(S,a(a({ref:n},c),{},{components:r})):t.createElement(S,a({ref:n},c))}));function p(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var u=r.length,a=new Array(u);a[0]=v;var o={};for(var m in n)hasOwnProperty.call(n,m)&&(o[m]=n[m]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var s=2;s<u;s++)a[s]=r[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}v.displayName="MDXCreateElement"},90088:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>m,contentTitle:()=>a,default:()=>l,frontMatter:()=>u,metadata:()=>o,toc:()=>s});var t=r(83117),i=(r(67294),r(3905));const u={},a="Sum of natural numbers",o={unversionedId:"interviewPrep/algorithms_and_techniques/recursion/sumOfNaturalNumbers",id:"interviewPrep/algorithms_and_techniques/recursion/sumOfNaturalNumbers",title:"Sum of natural numbers",description:"- positive integers that start from 1 onwards",source:"@site/docs/interviewPrep/algorithms_and_techniques/recursion/sumOfNaturalNumbers.md",sourceDirName:"interviewPrep/algorithms_and_techniques/recursion",slug:"/interviewPrep/algorithms_and_techniques/recursion/sumOfNaturalNumbers",permalink:"/docs/interviewPrep/algorithms_and_techniques/recursion/sumOfNaturalNumbers",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/recursion/sumOfNaturalNumbers.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Recursion with strings",permalink:"/docs/interviewPrep/algorithms_and_techniques/recursion/reverseString"},next:{title:"Sorting algorithms",permalink:"/docs/interviewPrep/algorithms_and_techniques/sorting/"}},m={},s=[{value:"Iterative solution",id:"iterative-solution",level:2}],c={toc:s};function l(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sum-of-natural-numbers"},"Sum of natural numbers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"positive integers that start from 1 onwards")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"input: 10\noutput: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"before working on the recursion, need to think about the following",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"What is the base case / stopping condition?"))),(0,i.kt)("li",{parentName:"ul"},"What is the smallest amount of work I can do in each iteration?")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function recursiveSummation(inputNum) {\n  if (inputNum <= 1) return inputNum;\n  return inputNum + recursiveSummation(inputNum - 1);\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"input: 10\n\ncurrent input is 10\nwhen function is called, the return value is added to the call stack\n|----------------------------|\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nmove to the next recursion call\ncurrent input is 9\nwhen function is called, the return value is added to the call stack\n\n|----------------------------|\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nmove to the next recursion call\ncurrent input is 8\nwhen function is called, the return value is added to the call stack\n\n|----------------------------|\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nmove to the next recursion call\ncurrent input is 7\nwhen function is called, the return value is added to the call stack\n\n|----------------------------|\n|  7 + recursiveSummation(6) |\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nmove to the next recursion call\ncurrent input is 6\nwhen function is called, the return value is added to the call stack\n\n|----------------------------|\n|  6 + recursiveSummation(5) |\n|  7 + recursiveSummation(6) |\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nmove to the next recursion call\ncurrent input is 5\nwhen function is called, the return value is added to the call stack\n\n|----------------------------|\n|  5 + recursiveSummation(4) |\n|  6 + recursiveSummation(5) |\n|  7 + recursiveSummation(6) |\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nmove to the next recursion call\ncurrent input is 4\nwhen function is called, the return value is added to the call stack\n\n|----------------------------|\n|  4 + recursiveSummation(3) |\n|  5 + recursiveSummation(4) |\n|  6 + recursiveSummation(5) |\n|  7 + recursiveSummation(6) |\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nmove to the next recursion call\ncurrent input is 3\nwhen function is called, the return value is added to the call stack\n\n|----------------------------|\n|  3 + recursiveSummation(2) |\n|  4 + recursiveSummation(3) |\n|  5 + recursiveSummation(4) |\n|  6 + recursiveSummation(5) |\n|  7 + recursiveSummation(6) |\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nmove to the next recursion call\ncurrent input is 2\nwhen function is called, the return value is added to the call stack\n\n|----------------------------|\n|  2 + recursiveSummation(1) |\n|  3 + recursiveSummation(2) |\n|  4 + recursiveSummation(3) |\n|  5 + recursiveSummation(4) |\n|  6 + recursiveSummation(5) |\n|  7 + recursiveSummation(6) |\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nmove to the next recursion call\ncurrent input is 1\nsince return value for this has hit the base case,\nit will start executing by poping the top stack frame from the call stack\n\n|----------------------------|\n|  1                         |\n|  2 + recursiveSummation(1) |\n|  3 + recursiveSummation(2) |\n|  4 + recursiveSummation(3) |\n|  5 + recursiveSummation(4) |\n|  6 + recursiveSummation(5) |\n|  7 + recursiveSummation(6) |\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nreturn result: 1\n|----------------------------|\n|  2 + 1                     |\n|  3 + recursiveSummation(2) |\n|  4 + recursiveSummation(3) |\n|  5 + recursiveSummation(4) |\n|  6 + recursiveSummation(5) |\n|  7 + recursiveSummation(6) |\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nreturn result: 3\n|----------------------------|\n|  3 + 3                     |\n|  4 + recursiveSummation(3) |\n|  5 + recursiveSummation(4) |\n|  6 + recursiveSummation(5) |\n|  7 + recursiveSummation(6) |\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nreturn result: 6\n|----------------------------|\n|  4 + 6                     |\n|  5 + recursiveSummation(4) |\n|  6 + recursiveSummation(5) |\n|  7 + recursiveSummation(6) |\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nreturn result: 10\n|----------------------------|\n|  5 + 10                    |\n|  6 + recursiveSummation(5) |\n|  7 + recursiveSummation(6) |\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nreturn result: 15\n|----------------------------|\n|  6 + 15                    |\n|  7 + recursiveSummation(6) |\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nreturn result: 21\n|----------------------------|\n|  7 + 21                    |\n|  8 + recursiveSummation(7) |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nreturn result: 28\n|----------------------------|\n|  8 + 28                    |\n|  9 + recursiveSummation(8) |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nreturn result: 36\n|----------------------------|\n|  9 + 36                    |\n| 10 + recursiveSummation(9) |\n|----------------------------|\n\nreturn result: 45\n|----------------------------|\n| 10 + 45                    |\n|----------------------------|\n\nreturn result: 55\n|----------------------------|\n|                            |\n|----------------------------|\n")),(0,i.kt)("h2",{id:"iterative-solution"},"Iterative solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function recursiveSummation(inputNum) {\n  let sum = 0;\n  for (let i = 0; i < inputNum; i++) {\n    sum += inputNum - i;\n  }\n  return sum;\n}\n")))}l.isMDXComponent=!0}}]);