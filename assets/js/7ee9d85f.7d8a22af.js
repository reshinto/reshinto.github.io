"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[66977],{3905:(e,t,n)=>{n.d(t,{Zo:()=>y,kt:()=>h});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},y=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),g=c(n),h=i,u=g["".concat(l,".").concat(h)]||g[h]||p[h]||a;return n?r.createElement(u,s(s({ref:t},y),{},{components:n})):r.createElement(u,s({ref:t},y))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},79449:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=n(83117),i=(n(67294),n(3905));const a={},s="TypeScript Example",o={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Flyweight/typescript/readme",id:"interviewPrep/designPatterns/Structural_patterns/Flyweight/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Flyweight/typescript",slug:"/interviewPrep/designPatterns/Structural_patterns/Flyweight/typescript/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Flyweight/swift/example2"},next:{title:"Proxy",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/"}},l={},c=[],y={toc:c};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Flyweight Design Pattern\n *\n * Intent: Lets you fit more objects into the available amount of RAM by sharing\n * common parts of state between multiple objects, instead of keeping all of the\n * data in each object.\n */\n\n/**\n * The Flyweight stores a common portion of the state (also called intrinsic\n * state) that belongs to multiple real business entities. The Flyweight accepts\n * the rest of the state (extrinsic state, unique for each entity) via its\n * method parameters.\n */\nclass Flyweight {\n  private sharedState: any;\n\n  constructor(sharedState: any) {\n    this.sharedState = sharedState;\n  }\n\n  public operation(uniqueState): void {\n    const s = JSON.stringify(this.sharedState);\n    const u = JSON.stringify(uniqueState);\n    console.log(`Flyweight: Displaying shared (${s}) and unique (${u}) state.`);\n  }\n}\n\n/**\n * The Flyweight Factory creates and manages the Flyweight objects. It ensures\n * that flyweights are shared correctly. When the client requests a flyweight,\n * the factory either returns an existing instance or creates a new one, if it\n * doesn\'t exist yet.\n */\nclass FlyweightFactory {\n  private flyweights: {[key: string]: Flyweight} = <any>{};\n\n  constructor(initialFlyweights: string[][]) {\n    for (const state of initialFlyweights) {\n      this.flyweights[this.getKey(state)] = new Flyweight(state);\n    }\n  }\n\n  /**\n   * Returns a Flyweight\'s string hash for a given state.\n   */\n  private getKey(state: string[]): string {\n    return state.join("_");\n  }\n\n  /**\n   * Returns an existing Flyweight with a given state or creates a new one.\n   */\n  public getFlyweight(sharedState: string[]): Flyweight {\n    const key = this.getKey(sharedState);\n\n    if (!(key in this.flyweights)) {\n      console.log(\n        "FlyweightFactory: Can\'t find a flyweight, creating new one."\n      );\n      this.flyweights[key] = new Flyweight(sharedState);\n    } else {\n      console.log("FlyweightFactory: Reusing existing flyweight.");\n    }\n\n    return this.flyweights[key];\n  }\n\n  public listFlyweights(): void {\n    const count = Object.keys(this.flyweights).length;\n    console.log(`\\nFlyweightFactory: I have ${count} flyweights:`);\n    for (const key in this.flyweights) {\n      console.log(key);\n    }\n  }\n}\n\n/**\n * The client code usually creates a bunch of pre-populated flyweights in the\n * initialization stage of the application.\n */\nconst factory = new FlyweightFactory([\n  ["Chevrolet", "Camaro2018", "pink"],\n  ["Mercedes Benz", "C300", "black"],\n  ["Mercedes Benz", "C500", "red"],\n  ["BMW", "M5", "red"],\n  ["BMW", "X6", "white"],\n  // ...\n]);\nfactory.listFlyweights();\n\n// ...\n\nfunction addCarToPoliceDatabase(\n  ff: FlyweightFactory,\n  plates: string,\n  owner: string,\n  brand: string,\n  model: string,\n  color: string\n) {\n  console.log("\\nClient: Adding a car to database.");\n  const flyweight = ff.getFlyweight([brand, model, color]);\n\n  // The client code either stores or calculates extrinsic state and passes it\n  // to the flyweight\'s methods.\n  flyweight.operation([plates, owner]);\n}\n\naddCarToPoliceDatabase(factory, "CL234IR", "James Doe", "BMW", "M5", "red");\n\naddCarToPoliceDatabase(factory, "CL234IR", "James Doe", "BMW", "X1", "red");\n\nfactory.listFlyweights();\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'FlyweightFactory: I have 5 flyweights:\nChevrolet_Camaro2018_pink\nMercedes Benz_C300_black\nMercedes Benz_C500_red\nBMW_M5_red\nBMW_X6_white\n\nClient: Adding a car to database.\nFlyweightFactory: Reusing existing flyweight.\nFlyweight: Displaying shared (["BMW","M5","red"]) and unique (["CL234IR","James Doe"]) state.\n\nClient: Adding a car to database.\nFlyweightFactory: Can\'t find a flyweight, creating new one.\nFlyweight: Displaying shared (["BMW","X1","red"]) and unique (["CL234IR","James Doe"]) state.\n\nFlyweightFactory: I have 6 flyweights:\nChevrolet_Camaro2018_pink\nMercedes Benz_C300_black\nMercedes Benz_C500_red\nBMW_M5_red\nBMW_X6_white\nBMW_X1_red\n')))}p.isMDXComponent=!0}}]);