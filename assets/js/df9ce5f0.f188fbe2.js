"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[3063],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),l=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(t),d=a,b=p["".concat(o,".").concat(d)]||p[d]||m[d]||i;return t?r.createElement(b,u(u({ref:n},c),{},{components:t})):r.createElement(b,u({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,u=new Array(i);u[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,u[1]=s;for(var l=2;l<i;l++)u[l]=t[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},408:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>u,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const i={},u="Find All Numbers Disappeared In An Array",s={unversionedId:"interviewPrep/algorithms_and_techniques/tracking/findDisappearedNumbers",id:"interviewPrep/algorithms_and_techniques/tracking/findDisappearedNumbers",title:"Find All Numbers Disappeared In An Array",description:"Solution: Keep track of the numbers visited",source:"@site/docs/interviewPrep/algorithms_and_techniques/tracking/findDisappearedNumbers.md",sourceDirName:"interviewPrep/algorithms_and_techniques/tracking",slug:"/interviewPrep/algorithms_and_techniques/tracking/findDisappearedNumbers",permalink:"/docs/interviewPrep/algorithms_and_techniques/tracking/findDisappearedNumbers",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/tracking/findDisappearedNumbers.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sum of natural numbers",permalink:"/docs/interviewPrep/algorithms_and_techniques/recursion/sumOfNaturalNumbers"},next:{title:"Non-Constructible Change",permalink:"/docs/interviewPrep/codingTests/easy/arrays/non-constructibleChange"}},o={},l=[{value:"Solution: Keep track of the numbers visited",id:"solution-keep-track-of-the-numbers-visited",level:2}],c={toc:l};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"find-all-numbers-disappeared-in-an-array"},"Find All Numbers Disappeared In An Array"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Given an array nums of n integers where nums[i] is in the range [1, n], \nreturn an array of all the integers in the range [1, n] that do not appear in nums.\n\nExample 1:\nInput: nums = [4,3,2,7,8,2,3,1]\nOutput: [5,6]\n\nExample 2:\nInput: nums = [1,1]\nOutput: [2]\n \nConstraints:\nn == nums.length\n1 <= n <= 105\n1 <= nums[i] <= n\n \nFollow up:\nCould you do it without extra space and in O(n) runtime?\nYou may assume the returned list does not count as extra space.\n")),(0,a.kt)("h2",{id:"solution-keep-track-of-the-numbers-visited"},"Solution: Keep track of the numbers visited"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"use the original array to keep track of the numbers visited",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Since all the numbers are positive intergers",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"for every number visited",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"we mark the presence of that number by negating the number at the index equal to the current number"),(0,a.kt)("li",{parentName:"ul"},"Since JavaScript follows 0-indexing, the index we mark is the actuall number - 1"),(0,a.kt)("li",{parentName:"ul"},"If the number at that index is already negated we do nothing"))),(0,a.kt)("li",{parentName:"ul"},"In the end, we just return the indices (index + 1 for the number) where there are still postive numbers")))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"function findDisappearedNumbers(nums) {\n  const n = nums.length;\n  for (let i=0; i<n; i++) {\n    const trackedIndex = Math.abs(nums[i]) - 1;  // get index of current value\n    if (nums[trackedIndex] > 0) {  // check if index value has been tracked before\n      nums[trackedIndex] *= -1;  // mark value as tracked by making it negative\n    }\n  }\n\n  const result = [];\n  for (let i=0; i<n; i++) {\n    if (nums[i] > 0) {\n      result.push(i+1);  // value not marked as negative are index numbers not used, add 1 since numbers don't start from 0\n    }\n  }\n  return result;\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"input: nums = [4, 3, 2, 7, 8, 2, 3, 1]\n\nAt iter = 0,\ncurrent number: |4| (|.| here refers to taking the absolute value)\nnumber at index = 3 (current number 4 - 1), value = 7 and negate it to -7\nAfter negation: nums = [4, 3, 2, -7, 8, 2, 3, 1]\n\nAt iter = 1\ncurrent number: |3|\nnumber at index = 2 (current number 3 - 1), value = 2 and negate it to -2\nAfter negation: nums = [4, 3, -2, -7, 8, 2, 3, 1]\n\nAt iter = 2\ncurrent number: |-2|\nnumber at index = 1 (current number 2 - 1), value = 3 and negate it to -3\nAfter negation: nums = [4, -3, -2, -7, 8, 2, 3, 1]\n\nAt iter = 3\ncurrent number: |-7|\nnumber at index = 6 (current number 7 - 1), value = 3 and negate it to -3\nAfter negation: nums = [4, -3, -2, -7, 8, 2, -3, 1]\n\nAt iter = 4\ncurrent number: |8|\nnumber at index = 7 (current number 8 - 1), value = 1 and negate it to -1\nAfter negation: nums = [4, -3, -2, -7, 8, 2, -3, -1]\n\nAt iter = 5\ncurrent number: |2|\nnumber at index = 1 (current number 2 - 1), value = -3 and stays as -3\nArray stays unchanged: nums = [4, -3, -2, -7, 8, 2, -3, -1]\n\nAt iter = 6\ncurrent number: |-3|\nnumber at index = 2 (current number 3 - 1), value = -2 and stays as -2\nArray stays unchanged: nums = [4, -3, -2, -7, 8, 2, -3, -1]\n\nAt iter = 7\ncurrent number: |-1|\nnumber at index = 0 (current number 1 - 1), value = 4 and negate it to -4\nAfter negation: nums = [-4, -3, -2, -7, 8, 2, -3, -1]\n\nNow the indices at which there are still positive numbers are the numbers (index+1) that weren't present in the array\n\nat value 8, index is 4 + 1 = 5\nat value 2, index is 5 + 1 = 6\noutput: [5, 6]\n")))}m.isMDXComponent=!0}}]);