"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[70490],{3905:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>v});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=t.createContext({}),c=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},l=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),m=c(r),v=a,d=m["".concat(p,".").concat(v)]||m[v]||u[v]||i;return r?t.createElement(d,s(s({ref:n},l),{},{components:r})):t.createElement(d,s({ref:n},l))}));function v(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},16316:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=r(83117),a=(r(67294),r(3905));const i={},s="JavaScript Example",o={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Interpreter/javascript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Interpreter/javascript/readme",title:"JavaScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/javascript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Interpreter/javascript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/javascript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/javascript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/javascript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/java/"},next:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/python/"}},p={},c=[],l={toc:c};function u(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"javascript-example"},"JavaScript Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// contains the information that will be interpreted\nclass Context {\n  constructor(value) {\n    this.v = value;\n  }\n}\n\nmodule.exports = Context;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// provide specific conversions on different types of data\nclass MinusNonTerminalExpression {\n  constructor(numA, numB) {\n    this.numA = numA;\n    this.numB = numB;\n  }\n\n  interpret(context) {\n    return this.numA.interpret(context) - this.numB.interpret(context);\n  }\n}\n\nmodule.exports = MinusNonTerminalExpression;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// provide specific conversions on different types of data\nclass NumberTerminalExpression {\n  constructor(num) {\n    this.num = num;\n  }\n\n  interpret(context) {\n    return this.num;\n  }\n}\n\nmodule.exports = NumberTerminalExpression;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// provide specific conversions on different types of data\nclass TimesNonTerminalExpression {\n  constructor(numA, numB) {\n    this.numA = numA;\n    this.numB = numB;\n  }\n\n  interpret(context) {\n    return this.numA.interpret(context) * this.numB.interpret(context);\n  }\n}\n\nmodule.exports = TimesNonTerminalExpression;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// provide specific conversions on different types of data\nclass VariableTerminalExpression {\n  constructor(variable) {\n    this.variable = variable;\n  }\n\n  interpret(context) {\n    return context[this.variable] || 0;\n  }\n}\n\nmodule.exports = VariableTerminalExpression;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const Context = require("./Context");\nconst NumberTerminalExpression = require("./NumberTerminalExpression");\nconst VariableTerminalExpression = require("./VariableTerminalExpression");\nconst TimesNonTerminalExpression = require("./TimesNonTerminalExpression");\nconst MinusNonTerminalExpression = require("./MinusNonTerminalExpression");\n\nclass Client {\n  constructor(context) {\n    this.context = context;\n  }\n\n  parse(expression) {\n    const values = expression.split(" ");\n    const queue = [];\n    let exp;\n    let numB;\n    let numA;\n    for (const value of values) {\n      switch (value) {\n        case "*":\n          numB = queue.pop();\n          numA = queue.pop();\n          exp = new TimesNonTerminalExpression(numA, numB);\n          break;\n        case "-":\n          numB = queue.pop();\n          numA = queue.pop();\n          exp = new MinusNonTerminalExpression(numA, numB);\n          break;\n        default:\n          if (isNaN(parseInt(value))) {\n            exp = new VariableTerminalExpression(value);\n          } else {\n            const number = parseInt(value);\n            exp = new NumberTerminalExpression(number);\n          }\n          break;\n      }\n      queue.push(exp);\n    }\n    const main = queue.pop();\n    return main.interpret(this.context);\n  }\n}\n\nconst ctxt = new Context(45);\nconst res = new Client(ctxt).parse("16 v * 76 q - -");\nconsole.log(res);\n')))}u.isMDXComponent=!0}}]);