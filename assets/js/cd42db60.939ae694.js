"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8803],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var a=n.createContext({}),c=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(a.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(r),f=i,b=d["".concat(a,".").concat(f)]||d[f]||u[f]||o;return r?n.createElement(b,s(s({ref:t},l),{},{components:r})):n.createElement(b,s({ref:t},l))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,s=new Array(o);s[0]=d;var p={};for(var a in t)hasOwnProperty.call(t,a)&&(p[a]=t[a]);p.originalType=e,p.mdxType="string"==typeof e?e:i,s[1]=p;for(var c=2;c<o;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},91987:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var n=r(87462),i=(r(67294),r(3905));const o={},s="Liskov Substitution Principle",p={unversionedId:"interviewPrep/designPatterns/SOLID_design_principles/LiskovSubstitutionPrinciple/readme",id:"interviewPrep/designPatterns/SOLID_design_principles/LiskovSubstitutionPrinciple/readme",title:"Liskov Substitution Principle",description:"- if S is a subtype of T, then objects of type T may be replaced with objects of type S",source:"@site/docs/interviewPrep/designPatterns/SOLID_design_principles/LiskovSubstitutionPrinciple/readme.md",sourceDirName:"interviewPrep/designPatterns/SOLID_design_principles/LiskovSubstitutionPrinciple",slug:"/interviewPrep/designPatterns/SOLID_design_principles/LiskovSubstitutionPrinciple/",permalink:"/docs/interviewPrep/designPatterns/SOLID_design_principles/LiskovSubstitutionPrinciple/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/SOLID_design_principles/LiskovSubstitutionPrinciple/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Interface Segregation Principle",permalink:"/docs/interviewPrep/designPatterns/SOLID_design_principles/InterfaceSegregationPrinciple/"},next:{title:"Open Closed Principle",permalink:"/docs/interviewPrep/designPatterns/SOLID_design_principles/OpenClosedPrinciple/"}},a={},c=[],l={toc:c};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"liskov-substitution-principle"},"Liskov Substitution Principle"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if S is a subtype of T, then objects of type T may be replaced with objects of type S",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"which means that every single usage of the parent class should be replaceable with its child class")))))}u.isMDXComponent=!0}}]);