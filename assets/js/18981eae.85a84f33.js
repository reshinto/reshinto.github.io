"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[1749],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4602:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={},o="Big O Notation",l={unversionedId:"interviewPrep/data_structures/05Big_O_notation/readme",id:"interviewPrep/data_structures/05Big_O_notation/readme",title:"Big O Notation",description:"- the speed and memory usage of an algorithm aren't necessarily fixed",source:"@site/docs/interviewPrep/data_structures/05Big_O_notation/readme.md",sourceDirName:"interviewPrep/data_structures/05Big_O_notation",slug:"/interviewPrep/data_structures/05Big_O_notation/",permalink:"/docs/interviewPrep/data_structures/05Big_O_notation/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/data_structures/05Big_O_notation/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Memory",permalink:"/docs/interviewPrep/data_structures/04Memory/"},next:{title:"Logarithm",permalink:"/docs/interviewPrep/data_structures/06Logarithm/"}},s={},u=[{value:"common complexities and their Big O notations ordered from fastest to slowest",id:"common-complexities-and-their-big-o-notations-ordered-from-fastest-to-slowest",level:2},{value:"Constant: O(1)",id:"constant-o1",level:3},{value:"Logarithmic: O(log n)",id:"logarithmic-olog-n",level:3},{value:"Linear: O(n)",id:"linear-on",level:3},{value:"Log-linear: O(n log n)",id:"log-linear-on-log-n",level:3},{value:"Quadratic: O(n<sup>2</sup>)",id:"quadratic-on2",level:3},{value:"Cubic: O(n<sup>3</sup>)",id:"cubic-on3",level:3},{value:"Exponential: O(2<sup>n</sup>)",id:"exponential-o2n",level:3},{value:"Factorial: O(n!)",id:"factorial-on",level:3}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"big-o-notation"},"Big O Notation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the speed and memory usage of an algorithm aren't necessarily fixed",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"they might change depending on the input"))),(0,a.kt)("li",{parentName:"ul"},"it is a powerl tool that allow us to generalize the space-time complexity of an algorithm as a function of its input size"),(0,a.kt)("li",{parentName:"ul"},"variables used in Big O notation denote the sizes of inputs to algorithms",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"e.g.: O(n) might be the time complexity of an algorithm that traverses through an array of length n"),(0,a.kt)("li",{parentName:"ul"},"similarly, O(n + m) might be the time complexity of an algorithm that traverses through an array of length n and through a string of length m"))),(0,a.kt)("li",{parentName:"ul"},"not that in the context of coding interviews, Big O notation is usually understood to describe the worst-case complexity of an algorithm",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"even though the worst case complexity might differ from the average-case complexity"),(0,a.kt)("li",{parentName:"ul"},"e.g.: some sorting algorithms have different time complexities depending on the layout of elements in their input array",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"in rare cases, their time complexity will be much worse than in more common cases"),(0,a.kt)("li",{parentName:"ul"},"similarly, an algorithm that takes in a string and performs special operations on uppercase characters might have a different time complexity when run on a input string of only uppercase characters vs on an input string with just a few uppercase characters")))))),(0,a.kt)("h2",{id:"common-complexities-and-their-big-o-notations-ordered-from-fastest-to-slowest"},"common complexities and their Big O notations ordered from fastest to slowest"),(0,a.kt)("h3",{id:"constant-o1"},"Constant: O(1)"),(0,a.kt)("h3",{id:"logarithmic-olog-n"},"Logarithmic: O(log n)"),(0,a.kt)("h3",{id:"linear-on"},"Linear: O(n)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"do not join them together if the input value are from a different source",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"O(n + m)")))),(0,a.kt)("h3",{id:"log-linear-on-log-n"},"Log-linear: O(n log n)"),(0,a.kt)("h3",{id:"quadratic-on2"},"Quadratic: O(n",(0,a.kt)("sup",null,"2"),")"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"drop the smaller unit if the input value are from the same source",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"O(n",(0,a.kt)("sup",null,"2")," + n) = O(n",(0,a.kt)("sup",null,"2"),")"))),(0,a.kt)("li",{parentName:"ul"},"do not drop the smaller unit if the input value are from a different source"),(0,a.kt)("li",{parentName:"ul"},"O(n",(0,a.kt)("sup",null,"2")," + 2m) = O(n",(0,a.kt)("sup",null,"2")," + m)")),(0,a.kt)("h3",{id:"cubic-on3"},"Cubic: O(n",(0,a.kt)("sup",null,"3"),")"),(0,a.kt)("h3",{id:"exponential-o2n"},"Exponential: O(2",(0,a.kt)("sup",null,"n"),")"),(0,a.kt)("h3",{id:"factorial-on"},"Factorial: O(n!)"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"4! = 4 ",(0,a.kt)("em",{parentName:"p"}," 3 ")," 2 * 1 = 24")))}c.isMDXComponent=!0}}]);