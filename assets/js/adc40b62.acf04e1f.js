"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[6621],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,v=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(v,a(a({ref:t},p),{},{components:n})):r.createElement(v,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},65708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(83117),o=(n(67294),n(3905));const i={},a="TypeScript Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/typescript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/typescript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Iterator/typescript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/swift/example2"},next:{title:"Mediator",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/"}},l={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Iterator Design Pattern\n *\n * Intent: Lets you traverse elements of a collection without exposing its\n * underlying representation (list, stack, tree, etc.).\n */\n\ninterface Iterator<T> {\n  // Return the current element.\n  current(): T;\n\n  // Return the current element and move forward to next element.\n  next(): T;\n\n  // Return the key of the current element.\n  key(): number;\n\n  // Checks if current position is valid.\n  valid(): boolean;\n\n  // Rewind the Iterator to the first element.\n  rewind(): void;\n}\n\ninterface Aggregator {\n  // Retrieve an external iterator.\n  getIterator(): Iterator<string>;\n}\n\n/**\n * Concrete Iterators implement various traversal algorithms. These classes\n * store the current traversal position at all times.\n */\n\nclass AlphabeticalOrderIterator implements Iterator<string> {\n  private collection: WordsCollection;\n\n  /**\n   * Stores the current traversal position. An iterator may have a lot of\n   * other fields for storing iteration state, especially when it is supposed\n   * to work with a particular kind of collection.\n   */\n  private position: number = 0;\n\n  /**\n   * This variable indicates the traversal direction.\n   */\n  private reverse: boolean = false;\n\n  constructor(collection: WordsCollection, reverse: boolean = false) {\n    this.collection = collection;\n    this.reverse = reverse;\n\n    if (reverse) {\n      this.position = collection.getCount() - 1;\n    }\n  }\n\n  public rewind() {\n    this.position = this.reverse ? this.collection.getCount() - 1 : 0;\n  }\n\n  public current(): string {\n    return this.collection.getItems()[this.position];\n  }\n\n  public key(): number {\n    return this.position;\n  }\n\n  public next(): string {\n    const item = this.collection.getItems()[this.position];\n    this.position += this.reverse ? -1 : 1;\n    return item;\n  }\n\n  public valid(): boolean {\n    if (this.reverse) {\n      return this.position >= 0;\n    }\n\n    return this.position < this.collection.getCount();\n  }\n}\n\n/**\n * Concrete Collections provide one or several methods for retrieving fresh\n * iterator instances, compatible with the collection class.\n */\nclass WordsCollection implements Aggregator {\n  private items: string[] = [];\n\n  public getItems(): string[] {\n    return this.items;\n  }\n\n  public getCount(): number {\n    return this.items.length;\n  }\n\n  public addItem(item: string): void {\n    this.items.push(item);\n  }\n\n  public getIterator(): Iterator<string> {\n    return new AlphabeticalOrderIterator(this);\n  }\n\n  public getReverseIterator(): Iterator<string> {\n    return new AlphabeticalOrderIterator(this, true);\n  }\n}\n\n/**\n * The client code may or may not know about the Concrete Iterator or Collection\n * classes, depending on the level of indirection you want to keep in your\n * program.\n */\nconst collection = new WordsCollection();\ncollection.addItem("First");\ncollection.addItem("Second");\ncollection.addItem("Third");\n\nconst iterator = collection.getIterator();\n\nconsole.log("Straight traversal:");\nwhile (iterator.valid()) {\n  console.log(iterator.next());\n}\n\nconsole.log("");\nconsole.log("Reverse traversal:");\nconst reverseIterator = collection.getReverseIterator();\nwhile (reverseIterator.valid()) {\n  console.log(reverseIterator.next());\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Straight traversal:\nFirst\nSecond\nThird\n\nReverse traversal:\nThird\nSecond\nFirst\n")))}u.isMDXComponent=!0}}]);