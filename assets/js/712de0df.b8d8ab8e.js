"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[64138],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,c=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=l(t),m=i,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||c;return t?r.createElement(f,a(a({ref:n},s),{},{components:t})):r.createElement(f,a({ref:n},s))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var c=t.length,a=new Array(c);a[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var l=2;l<c;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},93811:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>l});var r=t(83117),i=(t(67294),t(3905));const c={},a="C# Example",o={unversionedId:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/cSharp/readme",id:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/cSharp/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/cSharp",slug:"/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/cSharp/",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Interface Segregation Principle (ISP)",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/"},next:{title:"JavaScript",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/javascript/"}},p={},l=[],s={toc:l};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"c-example"},"C# Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"/*\nInterface Segregation Principle\n\n- Interfaces should be segregated so that nobody who implements the interface will need to implement functions which they don't actually need.\n*/\n\npublic class Document {\n}\n\n// not a good design as it forces different printer types to implement all of these features\npublic interface IMachine {\n  void Print(Document d);\n  void Scan(Document d);\n  void Fax(Document d);\n}\n\n// this is ok because this product uses all the features\npublic class MultiFunctionPrinter : IMachine {\n  public void Print(Document d) {}\n\n  public void Scan(Document d) {}\n\n  public void Fax(Document d) {}\n}\n\n// this is NOT ok because the product cannot scan and fax\npublic class OldFashionPrinter : IMachine {\n  public void Print(Document d) {}\n\n  // should not have this, even if throw an exception\n  public void Scan(Document d) {\n    throw new System.NotImplementedException();\n  }\n\n  // should not have this, even if throw an exception\n  public void Fax(Document d) {\n    throw new System.NotImplementedException();\n  }\n}\n\n\n// better to design interfaces separately in this case\npublic interface IPrinter {\n  void Print(Document d);\n}\n\npublic interface IScanner {\n  void Scan(Document d);\n}\n\n// use multiple interface inheritance to implement multiple features\npublic class Photocopier : IPrinter, IScanner {\n  public void Print(Document d) {}\n\n  public void Scan(Document d) {}\n}\n\n// or can make an interface inherit multiple interfaces\npublic interface IMultiFunctionDevice : IScanner, IPrinter {}\n\npublic class MultiFunctionMachine : IMultiFunctionDevice {\n  /* method 1\n  public void Scan(Document d) {}\n\n  public void Print(Document d) {}\n  */\n\n  // method 2\n  private IPrinter _printer;\n  private IScanner _scanner;\n\n  public MultiFunctionMachine(IPrinter printer, IScanner scanner) {\n    if (printer == null)\n      throw new System.ArgumentNullException(paramName: nameof(printer));\n    if (scanner == null)\n      throw new System.ArgumentNullException(paramName: nameof(scanner));\n    this._printer = printer;\n    this._scanner = scanner;\n  }\n\n  // Print will be delegated to _printer\n  public void Print(Document d) {\n    _printer.Print(d);\n  }  // decorator pattern\n\n  // Scan will be delegated to _scanner\n  public void Scan(Document d) {\n    _scanner.Scan(d);\n  }  // decorator pattern\n}\n\npublic class Program {\n  public static void Main() {}\n}\n")))}u.isMDXComponent=!0}}]);