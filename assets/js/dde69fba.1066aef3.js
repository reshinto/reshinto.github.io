"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[24109],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>f});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),l=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(r),f=a,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||i;return r?t.createElement(d,o(o({ref:n},c),{},{components:r})):t.createElement(d,o({ref:n},c))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=r[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},83732:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var t=r(83117),a=(r(67294),r(3905));const i={},o="Python Example",p={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Interpreter/python/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Interpreter/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Interpreter/python",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/python/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/javascript/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/typescript/"}},s={},l=[],c={toc:l};function u(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python-example"},"Python Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Context:\n    def __init__(self, value):\n        self.v = value\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class MinusNonTerminalExpression:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def interpret(self, context):\n        return self.a.interpret(context) - self.b.interpret(context)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class NumberTerminalExpression:\n    def __init__(self, num):\n        self.num = num\n\n    def interpret(self, context):\n        return self.num\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class TimesNonTerminalExpression:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def interpret(self, context):\n        return self.a.interpret(context) * self.b.interpret(context)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class VariableTerminalExpression:\n    def __init__(self, variable):\n        self.variable = variable\n\n    def interpret(self, context):\n        return context.get(self.variable) or 0\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from Context import Context\nfrom NumberTerminalExpression import NumberTerminalExpression\nfrom VariableTerminalExpression import VariableTerminalExpression\nfrom TimesNonTerminalExpression import TimesNonTerminalExpression\nfrom MinusNonTerminalExpression import MinusNonTerminalExpression\n\n\nclass Client:\n    def __init__(self, context):\n        self.context = context\n\n    def parse(self, expression):\n        values = expression.split(" ")\n        queue = []\n        for value in values:\n            if value == "*":\n                b = queue.pop()\n                a = queue.pop()\n                exp = TimesNonTerminalExpression(a, b)\n            elif value == "-":\n                b = queue.pop()\n                a = queue.pop()\n                exp = MinusNonTerminalExpression(a, b)\n            else:\n                try:\n                    number = int(value)\n                    exp = NumberTerminalExpression(number)\n                except ValueError:\n                    exp = VariableTerminalExpression(value)\n            queue.append(exp)\n        main = queue.pop()\n        return main.interpret(self.context)\n\n\nif __name__ == "__main__":\n    ctxt = Context(45)\n    res = Client(ctxt.__dict__).parse("16 v * 76 q - -")\n    print(res)\n')))}u.isMDXComponent=!0}}]);