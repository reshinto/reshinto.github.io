"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[58535],{3905:(e,n,r)=>{r.d(n,{Zo:()=>m,kt:()=>x});var t=r(67294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var p=t.createContext({}),l=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},m=function(e){var n=l(e.components);return t.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,i=e.originalType,p=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),c=l(r),x=s,f=c["".concat(p,".").concat(x)]||c[x]||u[x]||i;return r?t.createElement(f,o(o({ref:n},m),{},{components:r})):t.createElement(f,o({ref:n},m))}));function x(e,n){var r=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=r.length,o=new Array(i);o[0]=c;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a.mdxType="string"==typeof e?e:s,o[1]=a;for(var l=2;l<i;l++)o[l]=r[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}c.displayName="MDXCreateElement"},16106:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=r(83117),s=(r(67294),r(3905));const i={},o="TypeScript Example",a={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Interpreter/typescript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Interpreter/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Interpreter/typescript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/typescript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/python/"},next:{title:"Iterator",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/"}},p={},l=[],m={toc:l};function u(e){let{components:n,...r}=e;return(0,s.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"// defines all the methods needed to perform the different conversions\nexport default interface AbstractExpression {\n  interpret(context: any): number;\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"// contains the information that will be interpreted\nexport default class Context {\n  v: number;\n\n  constructor(value: number) {\n    this.v = value;\n  }\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import Context from "./Context";\nimport AbstractExpression from "./AbstractExpressions";\n\n// provide specific conversions on different types of data\nexport default class NumberTerminalExpression implements AbstractExpression {\n  num: number;\n\n  constructor(num: number) {\n    this.num = num;\n  }\n\n  public interpret(context: AbstractExpression | Context): number {\n    return this.num;\n  }\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import Context from "./Context";\nimport AbstractExpression from "./AbstractExpressions";\n\n// provide specific conversions on different types of data\nexport default class VariableTerminalExpression implements AbstractExpression {\n  variable: string;\n\n  constructor(variable: string) {\n    this.variable = variable;\n  }\n\n  public interpret(context: AbstractExpression | Context): number {\n    return context[this.variable] || 0;\n  }\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import Context from "./Context";\nimport AbstractExpression from "./AbstractExpressions";\nimport TimesNonTerminalExpression from "./TimesNonTerminalExpression";\nimport VariableTerminalExpression from "./VariableTerminalExpression";\nimport NumberTerminalExpression from "./NumberTerminalExpression";\n\ntype allExpressions =\n  | TimesNonTerminalExpression\n  | MinusNonTerminalExpression\n  | VariableTerminalExpression\n  | NumberTerminalExpression;\n\n// provide specific conversions on different types of data\nexport default class MinusNonTerminalExpression implements AbstractExpression {\n  numA: allExpressions;\n  numB: allExpressions;\n\n  constructor(numA: allExpressions, numB: allExpressions) {\n    this.numA = numA;\n    this.numB = numB;\n  }\n\n  public interpret(context: AbstractExpression | Context): number {\n    return this.numA.interpret(context) - this.numB.interpret(context);\n  }\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import Context from "./Context";\nimport AbstractExpression from "./AbstractExpressions";\nimport MinusNonTerminalExpression from "./MinusNonTerminalExpression";\nimport VariableTerminalExpression from "./VariableTerminalExpression";\nimport NumberTerminalExpression from "./NumberTerminalExpression";\n\ntype allExpressions =\n  | TimesNonTerminalExpression\n  | MinusNonTerminalExpression\n  | VariableTerminalExpression\n  | NumberTerminalExpression;\n\n// provide specific conversions on different types of data\nexport default class TimesNonTerminalExpression implements AbstractExpression {\n  numA: allExpressions;\n  numB: allExpressions;\n\n  constructor(numA: allExpressions, numB: allExpressions) {\n    this.numA = numA;\n    this.numB = numB;\n  }\n\n  public interpret(context: AbstractExpression | Context): number {\n    return this.numA.interpret(context) * this.numB.interpret(context);\n  }\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import Context from "./Context";\nimport NumberTerminalExpression from "./NumberTerminalExpression";\nimport VariableTerminalExpression from "./VariableTerminalExpression";\nimport TimesNonTerminalExpression from "./TimesNonTerminalExpression";\nimport MinusNonTerminalExpression from "./MinusNonTerminalExpression";\n\ntype allExpressions =\n  | TimesNonTerminalExpression\n  | MinusNonTerminalExpression\n  | VariableTerminalExpression\n  | NumberTerminalExpression;\n\nclass Client {\n  context: Context;\n\n  constructor(context: Context) {\n    this.context = context;\n  }\n\n  parse(expression: string): number {\n    const values: string[] = expression.split(" ");\n    const queue: allExpressions[] = [];\n    let exp: allExpressions;\n    let numB: allExpressions;\n    let numA: allExpressions;\n    for (const value of values) {\n      switch (value) {\n        case "*":\n          numB = queue.pop();\n          numA = queue.pop();\n          exp = new TimesNonTerminalExpression(numA, numB);\n          break;\n        case "-":\n          numB = queue.pop();\n          numA = queue.pop();\n          exp = new MinusNonTerminalExpression(numA, numB);\n          break;\n        default:\n          if (isNaN(parseInt(value))) {\n            exp = new VariableTerminalExpression(value);\n          } else {\n            const number = parseInt(value);\n            exp = new NumberTerminalExpression(number);\n          }\n          break;\n      }\n      queue.push(exp);\n    }\n    const main: allExpressions = queue.pop();\n    return main.interpret(this.context);\n  }\n}\n\nconst ctxt: Context = new Context(45);\nconst res: number = new Client(ctxt).parse("16 v * 76 q - -");\nconsole.log(res);\n')))}u.isMDXComponent=!0}}]);