"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[59544],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),y=l(n),u=a,d=y["".concat(c,".").concat(u)]||y[u]||g[u]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=y;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},42610:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(83117),a=(n(67294),n(3905));const o={},i="TypeScript Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/typescript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/typescript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Strategy/typescript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/example2"},next:{title:"Template",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/"}},c={},l=[],p={toc:l};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Strategy Design Pattern\n *\n * Intent: Lets you define a family of algorithms, put each of them into a\n * separate class, and make their objects interchangeable.\n */\n\n/**\n * The Context defines the interface of interest to clients.\n */\nclass Context {\n  /**\n   * @type {Strategy} The Context maintains a reference to one of the Strategy\n   * objects. The Context does not know the concrete class of a strategy. It\n   * should work with all strategies via the Strategy interface.\n   */\n  private strategy: Strategy;\n\n  /**\n   * Usually, the Context accepts a strategy through the constructor, but also\n   * provides a setter to change it at runtime.\n   */\n  constructor(strategy: Strategy) {\n    this.strategy = strategy;\n  }\n\n  /**\n   * Usually, the Context allows replacing a Strategy object at runtime.\n   */\n  public setStrategy(strategy: Strategy) {\n    this.strategy = strategy;\n  }\n\n  /**\n   * The Context delegates some work to the Strategy object instead of\n   * implementing multiple versions of the algorithm on its own.\n   */\n  public doSomeBusinessLogic(): void {\n    // ...\n\n    console.log(\n      "Context: Sorting data using the strategy (not sure how it\'ll do it)"\n    );\n    const result = this.strategy.doAlgorithm(["a", "b", "c", "d", "e"]);\n    console.log(result.join(","));\n\n    // ...\n  }\n}\n\n/**\n * The Strategy interface declares operations common to all supported versions\n * of some algorithm.\n *\n * The Context uses this interface to call the algorithm defined by Concrete\n * Strategies.\n */\ninterface Strategy {\n  doAlgorithm(data: string[]): string[];\n}\n\n/**\n * Concrete Strategies implement the algorithm while following the base Strategy\n * interface. The interface makes them interchangeable in the Context.\n */\nclass ConcreteStrategyA implements Strategy {\n  public doAlgorithm(data: string[]): string[] {\n    return data.sort();\n  }\n}\n\nclass ConcreteStrategyB implements Strategy {\n  public doAlgorithm(data: string[]): string[] {\n    return data.reverse();\n  }\n}\n\n/**\n * The client code picks a concrete strategy and passes it to the context. The\n * client should be aware of the differences between strategies in order to make\n * the right choice.\n */\nconst context = new Context(new ConcreteStrategyA());\nconsole.log("Client: Strategy is set to normal sorting.");\ncontext.doSomeBusinessLogic();\n\nconsole.log("");\n\nconsole.log("Client: Strategy is set to reverse sorting.");\ncontext.setStrategy(new ConcreteStrategyB());\ncontext.doSomeBusinessLogic();\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Client: Strategy is set to normal sorting.\nContext: Sorting data using the strategy (not sure how it'll do it)\na,b,c,d,e\n\nClient: Strategy is set to reverse sorting.\nContext: Sorting data using the strategy (not sure how it'll do it)\ne,d,c,b,a\n")))}g.isMDXComponent=!0}}]);