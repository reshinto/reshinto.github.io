"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[2243],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||a;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},34805:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(87462),i=(t(67294),t(3905));const a={},o="Example 2",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Command/swift/example2",id:"interviewPrep/designPatterns/Behavioral_patterns/Command/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Command/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Command/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/typescript/"}},l={},p=[],c={toc:p};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'import Foundation\nimport XCTest\n\n\nclass DelayedOperation: Operation {\n\n    private var delay: TimeInterval\n\n    init(_ delay: TimeInterval = 0) {\n        self.delay = delay\n    }\n\n    override var isExecuting : Bool {\n        get { return _executing }\n        set {\n            willChangeValue(forKey: "isExecuting")\n            _executing = newValue\n            didChangeValue(forKey: "isExecuting")\n        }\n    }\n    private var _executing : Bool = false\n\n    override var isFinished : Bool {\n        get { return _finished }\n        set {\n            willChangeValue(forKey: "isFinished")\n            _finished = newValue\n            didChangeValue(forKey: "isFinished")\n        }\n    }\n    private var _finished : Bool = false\n\n    override func start() {\n\n        guard delay > 0 else {\n            _start()\n            return\n        }\n\n        let deadline = DispatchTime.now() + delay\n        DispatchQueue(label: "").asyncAfter(deadline: deadline) {\n            self._start()\n        }\n    }\n\n    private func _start() {\n\n        guard !self.isCancelled else {\n            print("\\(self): operation is canceled")\n            self.isFinished = true\n            return\n        }\n\n        self.isExecuting = true\n        self.main()\n        self.isExecuting = false\n        self.isFinished = true\n    }\n}\n\nclass WindowOperation: DelayedOperation {\n\n    override func main() {\n        print("\\(self): Windows are closed via HomeKit.")\n    }\n\n    override var description: String { return "WindowOperation" }\n}\n\nclass DoorOperation: DelayedOperation {\n\n    override func main() {\n        print("\\(self): Doors are closed via HomeKit.")\n    }\n\n    override var description: String { return "DoorOperation" }\n}\n\nclass TaxiOperation: DelayedOperation {\n\n    override func main() {\n        print("\\(self): Taxi is ordered via Uber")\n    }\n\n    override var description: String { return "TaxiOperation" }\n}\n\n\n\nclass CommandRealWorld: XCTestCase {\n\n    func testCommandRealWorld() {\n        prepareTestEnvironment {\n\n            let siri = SiriShortcuts.shared\n\n            print("User: Hey Siri, I am leaving my home")\n            siri.perform(.leaveHome)\n\n            print("User: Hey Siri, I am leaving my work in 3 minutes")\n            siri.perform(.leaveWork, delay: 3) /// for simplicity, we use seconds\n\n            print("User: Hey Siri, I am still working")\n            siri.cancel(.leaveWork)\n        }\n    }\n}\n\nextension CommandRealWorld {\n\n    struct ExecutionTime {\n        static let max: TimeInterval = 5\n        static let waiting: TimeInterval = 4\n    }\n\n    func prepareTestEnvironment(_ execution: () -> ()) {\n\n        /// This method tells Xcode to wait for async operations. Otherwise the\n        /// main test is done immediately.\n\n        let expectation = self.expectation(description: "Expectation for async operations")\n\n        let deadline = DispatchTime.now() + ExecutionTime.waiting\n        DispatchQueue.main.asyncAfter(deadline: deadline) { expectation.fulfill() }\n\n        execution()\n\n        wait(for: [expectation], timeout: ExecutionTime.max)\n    }\n}\n\nclass SiriShortcuts {\n\n    static let shared = SiriShortcuts()\n    private lazy var queue = OperationQueue()\n\n    private init() {}\n\n    enum Action: String {\n        case leaveHome\n        case leaveWork\n    }\n\n    func perform(_ action: Action, delay: TimeInterval = 0) {\n        print("Siri: performing \\(action)-action\\n")\n        switch action {\n        case .leaveHome:\n            add(operation: WindowOperation(delay))\n            add(operation: DoorOperation(delay))\n        case .leaveWork:\n            add(operation: TaxiOperation(delay))\n        }\n    }\n\n    func cancel(_ action: Action) {\n        print("Siri: canceling \\(action)-action\\n")\n        switch action {\n        case .leaveHome:\n            cancelOperation(with: WindowOperation.self)\n            cancelOperation(with: DoorOperation.self)\n        case .leaveWork:\n            cancelOperation(with: TaxiOperation.self)\n        }\n    }\n\n    private func cancelOperation(with operationType: Operation.Type) {\n        queue.operations.filter { operation in\n            return type(of: operation) == operationType\n        }.forEach({ $0.cancel() })\n    }\n\n    private func add(operation: Operation) {\n        queue.addOperation(operation)\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"User: Hey Siri, I am leaving my home\nSiri: performing leaveHome-action\n\nUser: Hey Siri, I am leaving my work in 3 minutes\nSiri: performing leaveWork-action\n\nUser: Hey Siri, I am still working\nSiri: canceling leaveWork-action\n\nDoorOperation: Doors are closed via HomeKit.\nWindowOperation: Windows are closed via HomeKit.\nTaxiOperation: operation is canceled\n")))}d.isMDXComponent=!0}}]);