"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[50834],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>u});var i=r(67294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,i)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,i,t=function(e,n){if(null==e)return{};var r,i,t={},s=Object.keys(e);for(i=0;i<s.length;i++)r=s[i],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)r=s[i],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var l=i.createContext({}),p=function(e){var n=i.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var r=e.components,t=e.mdxType,s=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),h=p(r),u=t,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||s;return r?i.createElement(m,o(o({ref:n},c),{},{components:r})):i.createElement(m,o({ref:n},c))}));function u(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var s=r.length,o=new Array(s);o[0]=h;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:t,o[1]=a;for(var p=2;p<s;p++)o[p]=r[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,r)}h.displayName="MDXCreateElement"},33964:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>p});var i=r(83117),t=(r(67294),r(3905));const s={},o="C# Example",a={unversionedId:"interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/cSharp/readme",id:"interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/cSharp/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/cSharp",slug:"/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/cSharp/",permalink:"/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dependency Inversion Principle (DIP)",permalink:"/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/javascript/"}},l={},p=[],c={toc:p};function d(e){let{components:n,...r}=e;return(0,t.kt)("wrapper",(0,i.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"c-example"},"C# Example"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\nDependency Inversion Principle\n\n- high level parts of the system should not depend on low level parts of the system directly\n- high level parts of the system should depend on some kind of abstraction\n*/\n\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic enum Relationship {\n  Parent,\n  Child,\n  Sibling\n}\n\npublic class Person {\n  public string Name;\n  public System.DateTime DateOfBirth;\n}\n\n// low level\n/*\npublic class Relationships {\n  // tuples\n  // this is a bad example as Relationships cannot change how it stores data, and the data structure is exposed to the high level module\n  private List<(Person, Relationship, Person)> _relations = new List<(Person, Relationship, Person)> ();\n\n  public void AddParentAndChild(Person parent, Person child) {\n    _relations.Add((parent, Relationship.Parent, child));\n    _relations.Add((child, Relationship.Child, parent));\n  }\n\n  // this is bad and should be removed\n  public List<(Person, Relationship, Person)> Relations => _relations;\n}\n*/\n\n\n// Solution\n// create an interface\npublic interface IRelationshipBrowser {\n  IEnumerable<Person> FindAllChildrenOf(string name);\n}\n\n// low level\npublic class Relationships : IRelationshipBrowser {\n  // tuples\n  // relationships can change the underlying data structure because it\'s never exposed to the high level modules which are actually consuming it\n  private List<(Person, Relationship, Person)> _relations = new List<(Person, Relationship, Person)> ();\n\n  public void AddParentAndChild(Person parent, Person child) {\n    _relations.Add((parent, Relationship.Parent, child));\n    _relations.Add((child, Relationship.Child, parent));\n  }\n\n  public IEnumerable<Person> FindAllChildrenOf(string name) {\n    return _relations.Where(\n          x => x.Item1.Name == "John" &&\n          x.Item2 == Relationship.Parent\n          ).Select(r => r.Item3);\n  }\n}\n\n// High level\n// should not depend on low level, but rather an abstraction, in this case Interface\npublic class Research {\n  // do not do this as it depends on the low level module\n  /*\n  public Research(Relationships relationships) {\n    var relations = relationships.Relations;\n    foreach (var r in relations.Where(\n          x => x.Item1.Name == "John" &&\n          x.Item2 == Relationship.Parent\n          )) {\n      System.Console.WriteLine($"John has a child called {r.Item3.Name}");\n    }\n  }\n  */\n\n  // do this as it depends on the abstraction, interface\n  public Research(IRelationshipBrowser browser) {\n    foreach (var p in browser.FindAllChildrenOf("John"))\n      System.Console.WriteLine($"John has a child called {p.Name}");\n  }\n\n  public static void Main() {\n    Person parent = new Person {Name = "John"};\n    Person child1 = new Person {Name = "Chris"};\n    Person child2 = new Person {Name = "Mary"};\n\n    Relationships relationships = new Relationships();\n    relationships.AddParentAndChild(parent, child1);\n    relationships.AddParentAndChild(parent, child2);\n\n    new Research(relationships);\n  }\n}\n')))}d.isMDXComponent=!0}}]);