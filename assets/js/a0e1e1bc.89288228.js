"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9399],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=u(t),m=i,b=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return t?r.createElement(b,o(o({ref:n},c),{},{components:t})):r.createElement(b,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=d;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var u=2;u<l;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},29761:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var r=t(83117),i=(t(67294),t(3905));const l={},o="Builder",a={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Builder/readme",id:"interviewPrep/designPatterns/Creational_patterns/Builder/readme",title:"Builder",description:"- A builder builds anything that requires the culmination of multiple variant steps and processes that result in a finished entity",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Builder/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Builder",slug:"/interviewPrep/designPatterns/Creational_patterns/Builder/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Builder/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Builder/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/typescript/example2"},next:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Builder/cPlusPlus/"}},s={},u=[{value:"Purpose for using it",id:"purpose-for-using-it",level:2},{value:"summary: A builder is essentially a separate component, so when piecewise object construction is complicated, provide an API for doing it succinctly",id:"summary-a-builder-is-essentially-a-separate-component-so-when-piecewise-object-construction-is-complicated-provide-an-api-for-doing-it-succinctly",level:3},{value:"Structure",id:"structure",level:2},{value:"Why do we need it",id:"why-do-we-need-it",level:2},{value:"When to apply",id:"when-to-apply",level:2},{value:"Pros and Cons",id:"pros-and-cons",level:2},{value:"example",id:"example",level:2},{value:"TypeScript",id:"typescript",level:3},{value:"C#",id:"c",level:3},{value:"Fluent Builder inheritance with recursive generics",id:"fluent-builder-inheritance-with-recursive-generics",level:2},{value:"Functional Builder",id:"functional-builder",level:2},{value:"Faceted Builder",id:"faceted-builder",level:2}],c={toc:u};function p(e){let{components:n,...l}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"builder"},"Builder"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A builder builds anything that requires the culmination of multiple variant steps and processes that result in a finished entity"),(0,i.kt)("li",{parentName:"ul"},"A builder understands the requirement in the easiest of expression and translates that into the outcome, using several complex internal processes"),(0,i.kt)("li",{parentName:"ul"},"Definition by the Gang of Four",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A builder separates the construction of a complex object from its representation so that the same construction process can create different representations"))),(0,i.kt)("li",{parentName:"ul"},"in other words",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"it lets you construct complex objects step by step",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The pattern allows you to produce different types and representations of an object using the same construction code"))),(0,i.kt)("li",{parentName:"ul"},"Builder pattern allows creating different parts of object, avoiding overload of constructor",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Builder pattern can be used, when object should be built with several parts, or if objects creation takes lots of steps and each of these steps should be configurable"))),(0,i.kt)("li",{parentName:"ul"},"Think of it as dividing an object creation into several steps with different parameters")))),(0,i.kt)("h2",{id:"purpose-for-using-it"},"Purpose for using it"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"some objects are simple and can be created in a single constructor call"),(0,i.kt)("li",{parentName:"ul"},"other objects require a lot of ceremony to create"),(0,i.kt)("li",{parentName:"ul"},"having an object with 10 constructor arguments is not productive",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"eg instead of concatenating multiple strings, use a string builder instead"))),(0,i.kt)("li",{parentName:"ul"},"instead, opt for piecewise construction",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"eg allow people to construct objects piece by piece"))),(0,i.kt)("li",{parentName:"ul"},"builder provides an API for constructing an object step by step")),(0,i.kt)("h3",{id:"summary-a-builder-is-essentially-a-separate-component-so-when-piecewise-object-construction-is-complicated-provide-an-api-for-doing-it-succinctly"},"summary: A builder is essentially a separate component, so when piecewise object construction is complicated, provide an API for doing it succinctly"),(0,i.kt)("h2",{id:"structure"},"Structure"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Builder",src:t(79943).Z,width:"966",height:"1188"})),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The Builder interface declares product construction steps that are common to all types of builders.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Concrete Builders provide different implementations of the construction steps."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Concrete builders may produce products that don\u2019t follow the common interface."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Products are resulting objects."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Products constructed by different builders don\u2019t have to belong to the same class hierarchy or interface."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The Director class defines the order in which to call construction steps, so you can create and reuse specific configurations of products.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The Client must associate one of the builder objects with the director."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Usually, it\u2019s done just once, via parameters of the director\u2019s constructor."),(0,i.kt)("li",{parentName:"ul"},"Then the director uses that builder object for all further construction."),(0,i.kt)("li",{parentName:"ul"},"However, there\u2019s an alternative approach for when the client passes the builder object to the production method of the director."),(0,i.kt)("li",{parentName:"ul"},"In this case, you can use a different builder each time you produce something with the director.")))),(0,i.kt)("h2",{id:"why-do-we-need-it"},"Why do we need it"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"because sometimes you just want a bit of convenience when building up objects",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"especially if those objects are complicated")))),(0,i.kt)("h2",{id:"when-to-apply"},"When to apply"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'to get rid of a "telescopic constructor"',(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the pattern lets you build objects step by step, using only those steps that you really need"),(0,i.kt)("li",{parentName:"ul"},"After implementing the pattern, you do not have to cram dozens of parameters into your constructors anymore"))),(0,i.kt)("li",{parentName:"ul"},"to construct complex objects",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"a builder does not expose the unfinished product while running construction steps"),(0,i.kt)("li",{parentName:"ul"},"This prevents the client code from fetching an incomplete result")))),(0,i.kt)("h2",{id:"pros-and-cons"},"Pros and Cons"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"pros"),(0,i.kt)("th",{parentName:"tr",align:null},"cons"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"constructing objects step-by-step, defer construction steps or run steps recursively"),(0,i.kt)("td",{parentName:"tr",align:null},"increases complexity of the code since the pattern requires creating multiple new classes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"reusing the same construction code when building various representations of products"),(0,i.kt)("td",{parentName:"tr",align:null},"client will be bound to concrete builder classes, since builders interface does not have a method for fetching the result of the construction")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"isolating complex construction code from the business logic of the product"),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("h2",{id:"example"},"example"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the following is an example of not creating a html builder",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"resulting in a tedious method of creating a html")))),(0,i.kt)("h3",{id:"typescript"},"TypeScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class Car {}\n\ninterface Builder {\n  reset();\n  setSeats(n: Number);\n  setEngine(n: String);\n  setTripComputer(n: Boolean);\n  setGPS(n: Boolean);\n}\n\nclass CarBuilder implements Builder {\n  private car: Car;\n\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    this.car = new Car();\n  }\n  setSeats() {}\n  setEngine() {}\n  setTripComputer() {}\n  setGPS() {}\n\n  getProduct(): Car {\n    const product = this.car;\n    this.reset();\n    return product;\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'class Director {\n  private builder: Builder;\n\n  setBuilder(b: Builder) {\n    this.builder = b;\n  }\n\n  makeSportCar(b: Builder = this.builder) {\n    b.reset();\n    b.setSeats(2);\n    b.setEngine("V12");\n    b.setTripComputer(true);\n    b.setGPS(true);\n  }\n}\n\nconst director = new Director();\nconst builder = new CarBuilder();\n\ndirector.makeSportCar(builder);\n')),(0,i.kt)("h3",{id:"c"},"C#"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Not using a html builder")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'public class Program {\n  public static void Main() {\n    string hello = "hello";\n    // StringBuilder is a type of builder to build strings\n    System.Text.StringBuilder sb = new System.Text.StringBuilder();\n    sb.Append("<p>");\n    sb.Append(hello);\n    sb.Append("</p>");\n    System.Console.WriteLine(sb);\n\n    string[] words = new[] {"Hello", "World"};\n    sb.Clear();\n    sb.Append("<ul>");\n    foreach (string word in words)\n      sb.AppendFormat($"<li>{word}</li>");\n    sb.Append("</ul>");\n    System.Console.WriteLine(sb);\n    /*\n    <p>hello</p>\n    <ul><li>Hello</li><li>World</li></ul>\n    */\n  }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Creating a html builder")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Collections.Generic;\n\npublic class HtmlElement {\n  public string Name, Text;\n  public List<HtmlElement> Elements = new List<HtmlElement>();\n  private const int indentSize = 2;\n\n  public HtmlElement() {\n  }\n\n  public HtmlElement(string name, string text) {\n    Name = name ?? throw new System.ArgumentNullException(paramName: nameof(name));\n    Text = text ?? throw new System.ArgumentNullException(paramName: nameof(text));\n  }\n\n  private string ToStringImpl(int indent) {\n    System.Text.StringBuilder sb = new System.Text.StringBuilder();\n    string i = new string(\' \', indentSize * indent);\n    sb.AppendLine($"{i}<{Name}>");\n\n    if (!string.IsNullOrWhiteSpace(Text)) {\n      sb.Append(new string(\' \', indentSize * (indent + 1)));\n      sb.AppendLine(Text);\n    }\n\n    foreach (var e in Elements) {\n      sb.Append(e.ToStringImpl(indent + 1));\n    }\n    sb.AppendLine($"{i}</{Name}>");\n    return sb.ToString();\n  }\n\n  public override string ToString() {\n    return ToStringImpl(0);\n  }\n}\n\npublic class HtmlBuilder {\n  private readonly string rootName;\n  HtmlElement root = new HtmlElement();\n\n  public HtmlBuilder(string rootName) {\n    this.rootName = rootName;\n    root.Name = rootName;\n  }\n\n  public void AddChild(string childName, string childText) {\n    HtmlElement e = new HtmlElement(childName, childText);\n    root.Elements.Add(e);\n  }\n\n  public override string ToString() {\n    return root.ToString();\n  }\n\n  public void Clear() {\n    root = new HtmlElement{Name = rootName};\n  }\n}\n\npublic class Program {\n  public static void Main() {\n    HtmlBuilder builder = new HtmlBuilder("ul");\n    builder.AddChild("li", "hello");\n    builder.AddChild("li", "world");\n    System.Console.WriteLine(builder.ToString());\n    /*\n    <ul>\n      <li>\n        hello\n      </li>\n      <li>\n        world\n      </li>\n    </ul>\n    */\n  }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fluent builder",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"enable chaining of methods")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Collections.Generic;\n\npublic class HtmlElement {\n  public string Name, Text;\n  public List<HtmlElement> Elements = new List<HtmlElement>();\n  private const int indentSize = 2;\n\n  public HtmlElement() {\n  }\n\n  public HtmlElement(string name, string text) {\n    Name = name ?? throw new System.ArgumentNullException(paramName: nameof(name));\n    Text = text ?? throw new System.ArgumentNullException(paramName: nameof(text));\n  }\n\n  private string ToStringImpl(int indent) {\n    System.Text.StringBuilder sb = new System.Text.StringBuilder();\n    string i = new string(\' \', indentSize * indent);\n    sb.AppendLine($"{i}<{Name}>");\n\n    if (!string.IsNullOrWhiteSpace(Text)) {\n      sb.Append(new string(\' \', indentSize * (indent + 1)));\n      sb.AppendLine(Text);\n    }\n\n    foreach (var e in Elements) {\n      sb.Append(e.ToStringImpl(indent + 1));\n    }\n    sb.AppendLine($"{i}</{Name}>");\n    return sb.ToString();\n  }\n\n  public override string ToString() {\n    return ToStringImpl(0);\n  }\n}\n\npublic class HtmlBuilder {\n  private readonly string rootName;\n  HtmlElement root = new HtmlElement();\n\n  public HtmlBuilder(string rootName) {\n    this.rootName = rootName;\n    root.Name = rootName;\n  }\n\n  // change void to HtmlBuilder to return this object\n  public HtmlBuilder AddChild(string childName, string childText) {\n    HtmlElement e = new HtmlElement(childName, childText);\n    root.Elements.Add(e);\n    return this;\n  }\n\n  public override string ToString() {\n    return root.ToString();\n  }\n\n  public void Clear() {\n    root = new HtmlElement{Name = rootName};\n  }\n}\n\npublic class Program {\n  public static void Main() {\n    HtmlBuilder builder = new HtmlBuilder("ul");\n    builder.AddChild("li", "hello").AddChild("li", "world");\n    System.Console.WriteLine(builder.ToString());\n  }\n}\n')),(0,i.kt)("h2",{id:"fluent-builder-inheritance-with-recursive-generics"},"Fluent Builder inheritance with recursive generics"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"builders inherit from other builders",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"will be problematic if used fluent interface approach")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Collections.Generic;\n\npublic class Person\n{\n  public string Name;\n  public string Position;\n  public override string ToString()\n  {\n    return $\"{nameof(Name)}: {Name}, {nameof(Position)}: {Position}\";\n  }\n}\n\npublic class PersonInfoBuilder\n{\n  protected Person person = new Person();\n  public PersonInfoBuilder Called(string name)\n  {\n    person.Name = name;\n    return this;\n  }\n}\n\npublic class PersonJobBuilder : PersonInfoBuilder\n{\n  public PersonJobBuilder WorksAsA(string position)\n  {\n    person.Position = position;\n    return this;\n  }\n}\n\ninternal class Program\n{\n  public static void Main(string[] args)\n  {\n    var builder = new PersonJobBuilder();\n    builder.Called(\"Terence\").WorkAsA  // can't call WorkAsA method\n    // The reason why it's not working is because when you call the Called method, you return a PersonInfoBuilder\n    // PersonInfoBuilder doesn't know anything about WorkAsA method because it's not part of its inheritance hierarchy\n    // PersonInfoBuilder just gives you an interface to the PersonInfoBuilder\n    // Therefore the problem with inheritance of fluid interfaces is that you are not allowed to use the containing type as the return type\n    // This makes no sense because if you were to do this, eventually as soon as someone calls the Called method, you are degrading your builder from a PersonJobBuilder to a PersonInfoBuilder\n  }\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1 way to get to get fluent interfaces to inherit is to use recursive generics approach",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"eg. class Foo : Bar\\<Foo",">")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\n\npublic class Person\n{\n  public string Name;\n  public string Position;\n\n  // use to expose own builder\n  // can try to prevent accessibility from outside, but is difficult to control effectively\n  // therefore, can make the builder internally and give it an internal constructor\n  // but cannot make it private as it is already being exposed through the api\n  public class Builder : PersonJobBuilder<Builder>\n  {\n  }\n\n  // whenever a new person is constructed, a new builder will be given\n  public static Builder New => new Builder();\n\n  public override string ToString()\n  {\n    return $"{nameof(Name)}: {Name}, {nameof(Position)}: {Position}";\n  }\n}\n\npublic abstract class PersonBuilder\n{\n  protected Person person = new Person();\n\n  public Person Build()\n  {\n    return person;\n  }\n}\n\n// class Foo : Bar<Foo>\npublic class PersonInfoBuilder<SELF>\n  : PersonBuilder\n  where SELF : PersonInfoBuilder<SELF>  // this is used to restrict SELF, and not int, string, etc.\n{\n  public SELF Called(string name)\n  {\n    person.Name = name;\n    return (SELF) this;  // need to cast (SELF) to work\n  }\n}\n\n// this class cannot be initialized directly as there will be type issue at SELF (eg. new PersonJobBuilder<???>)\npublic class PersonJobBuilder<SELF>\n  : PersonInfoBuilder<PersonJobBuilder<SELF>>\n  where SELF : PersonJobBuilder<SELF>  // this is used to restrict SELF, and not int, string, etc.\n{\n  public SELF WorksAsA(string position)\n  {\n    person.Position = position;\n    return (SELF) this;  // need to cast (SELF) to work\n  }\n}\n\ninternal class Program\n{\n  public static void Main(string[] args)\n  {\n    var me = Person.New.Called("Terence").WorksAsA("software engineer").Build();\n    Console.WriteLine(me);  // Name: Terence, Position: software engineer\n  }\n}\n')),(0,i.kt)("h2",{id:"functional-builder"},"Functional Builder"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"functional programming style")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\n\npublic class Person\n{\n  public string Name, Position;\n}\n\npublic class PersonBuilder\n{\n  private string Name, Position;\n\n  public readonly List<Action<Person>> Actions =\n    new List<Action<Person>>();\n\n  public PersonBuilder Called(string name)\n  {\n    Actions.Add(p => { p.Name = name; });\n    return this;\n  }\n\n  public Person Build()\n  {\n    var p = new Person();\n    Actions.ForEach(a => a(p));\n    Name = p.Name;\n    Position = p.Position;\n    return p;\n  }\n\n  public override string ToString()\n  {\n    return $"{nameof(Name)}: {Name}, {nameof(Position)}: {Position}";\n  }\n}\n\npublic static class PersonBuilderExtensions\n{\n  public static PersonBuilder WorkAsA(this PersonBuilder builder, string position)\n  {\n    builder.Actions.Add(p => { p.Position = position; });\n    return builder;\n  }\n}\n\nclass Program\n{\n  public static void Main(string[] args)\n  {\n    var pb = new PersonBuilder();\n    pb.Called("Terence").WorkAsA("software engineer").Build();\n    Console.WriteLine(pb);  // Name: Terence, Position: software engineer\n  }\n}\n')),(0,i.kt)("h2",{id:"faceted-builder"},"Faceted Builder"))}p.isMDXComponent=!0},79943:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/builder-8369eda61eae1b3e1156f09fb7aa3049.png"}}]);