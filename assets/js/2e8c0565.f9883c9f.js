"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[71888],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var l=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,l,o=function(e,t){if(null==e)return{};var n,l,o={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=l.createContext({}),u=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return l.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},h=l.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),h=u(n),p=o,m=h["".concat(s,".").concat(p)]||h[p]||c[p]||a;return n?l.createElement(m,i(i({ref:t},d),{},{components:n})):l.createElement(m,i({ref:t},d))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var u=2;u<a;u++)i[u]=n[u];return l.createElement.apply(null,i)}return l.createElement.apply(null,n)}h.displayName="MDXCreateElement"},74586:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>u});var l=n(83117),o=(n(67294),n(3905));const a={},i="Designing Good Functions",r={unversionedId:"interviewPrep/design_principles/designingGoodFunctions/readme",id:"interviewPrep/design_principles/designingGoodFunctions/readme",title:"Designing Good Functions",description:"- Functions are one of the most important parts of writing code",source:"@site/docs/interviewPrep/design_principles/designingGoodFunctions/readme.md",sourceDirName:"interviewPrep/design_principles/designingGoodFunctions",slug:"/interviewPrep/design_principles/designingGoodFunctions/",permalink:"/docs/interviewPrep/design_principles/designingGoodFunctions/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/designingGoodFunctions/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Designing Good Classes",permalink:"/docs/interviewPrep/design_principles/designingGoodClasses/"},next:{title:"The Law of Demeter / Principle of Least Knowledge",permalink:"/docs/interviewPrep/design_principles/lawOfDemeter/"}},s={},u=[{value:"Should be small",id:"should-be-small",level:2},{value:"How small?",id:"how-small",level:3},{value:"How to make functions smaller?",id:"how-to-make-functions-smaller",level:3},{value:"Single line code blocks",id:"single-line-code-blocks",level:3},{value:"Should do just one thing",id:"should-do-just-one-thing",level:2},{value:"Should have fewer arguments",id:"should-have-fewer-arguments",level:2},{value:"Should not have side effects",id:"should-not-have-side-effects",level:2},{value:"Conclusion",id:"conclusion",level:2}],d={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"designing-good-functions"},"Designing Good Functions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Functions are one of the most important parts of writing code",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"They make the code reusable and easy to read and maintain. Functions make the code organized"))),(0,o.kt)("li",{parentName:"ul"},"A good function should have the following properties:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Should be small"),(0,o.kt)("li",{parentName:"ul"},"Should do just one thing"),(0,o.kt)("li",{parentName:"ul"},"Should have fewer arguments"),(0,o.kt)("li",{parentName:"ul"},"Should not have side effects"))),(0,o.kt)("li",{parentName:"ul"},"One should be able to look at the function name and understand what that function does",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If they want to know more, they should just be able to skim through the function to get detail which is at a lower level"),(0,o.kt)("li",{parentName:"ul"},"For more lower-level details, they should look at the implementation of the functions called inside it"))),(0,o.kt)("li",{parentName:"ul"},"A good function allows understanding it without going into lower-level details unless required")),(0,o.kt)("h2",{id:"should-be-small"},"Should be small"),(0,o.kt)("h3",{id:"how-small"},"How small?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Functions should be very small",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"It should be hardly 20 lines long")))),(0,o.kt)("h3",{id:"how-to-make-functions-smaller"},"How to make functions smaller?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Anything inside that function that can be made into a separate function should be extracted",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The extracted function should be called from the previous function")))),(0,o.kt)("h3",{id:"single-line-code-blocks"},"Single line code blocks"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Nested structures like if, else, while, for, try, etc should ideally call another function in their code block",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This makes the code easier to read and understand")))),(0,o.kt)("h2",{id:"should-do-just-one-thing"},"Should do just one thing"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A function should do one thing and do it well",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"In general, all the things in a function should be at the same abstraction level"),(0,o.kt)("li",{parentName:"ul"},"A function should not have both lower-level and higher-level details"))),(0,o.kt)("li",{parentName:"ul"},"If another function can be extracted out of a function then it is doing more than one thing",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"We should extract functions to achieve the same level of abstraction"))),(0,o.kt)("li",{parentName:"ul"},"Functions that can be divided into multiple sections do more than one thing")),(0,o.kt)("h2",{id:"should-have-fewer-arguments"},"Should have fewer arguments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ideal number of arguments for a function is zero (niladic)",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Next comes one (monadic), followed closely by two (dyadic)"),(0,o.kt)("li",{parentName:"ul"},"Three arguments (triadic) should be avoided where possible"),(0,o.kt)("li",{parentName:"ul"},"More than three (polyadic) requires very special justification\u2014and then shouldn\u2019t be used anyway"))),(0,o.kt)("li",{parentName:"ul"},"Arguments make the code harder to understand and test and so we should keep it as low as possible",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"In most cases, a set of related arguments used across functions deserves to be wrapped in a class of its own"))),(0,o.kt)("li",{parentName:"ul"},"Output arguments are arguments that are required by the function only to be modified to contain the output",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Output arguments make the function harder to understand and should be avoided"))),(0,o.kt)("li",{parentName:"ul"},"Flag arguments are boolean arguments that make the code do two things based on the flag value",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"It should be avoided as it breaks the rule of doing only one thing")))),(0,o.kt)("h2",{id:"should-not-have-side-effects"},"Should not have side effects"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A function should not promise one thing and do something else as a side effect"),(0,o.kt)("li",{parentName:"ul"},"Example",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Changing the parameters/class properties in a get/query method"))),(0,o.kt)("li",{parentName:"ul"},"A set/update (command) function should not ideally update the parameters",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"They can however update the properties of the class the function belongs to")))),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"It is okay to start with long functions with multiple arguments which do more than one thing",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Start refactoring larger functions into smaller functions till there is a single level of abstraction in the function and no more functions can be extracted"),(0,o.kt)("li",{parentName:"ul"},"Make sure that the function names are descriptive and have fewer arguments"),(0,o.kt)("li",{parentName:"ul"},"In the end, all the functions should follow the above rules")))))}c.isMDXComponent=!0}}]);