"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[34532],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=l(n),d=a,f=h["".concat(c,".").concat(d)]||h[d]||u[d]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},99073:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(83117),a=(n(67294),n(3905));const o={},i="C# Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/State/cSharp/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/State/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/State/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/State/cSharp",slug:"/interviewPrep/designPatterns/Behavioral_patterns/State/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/State/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/go/"}},c={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-example"},"C# Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// State Design Pattern\n//\n// Intent: Lets an object alter its behavior when its internal state changes. It\n// appears as if the object changed its class.\n\nusing System;\n\nnamespace RefactoringGuru.DesignPatterns.State.Conceptual\n{\n    // The Context defines the interface of interest to clients. It also\n    // maintains a reference to an instance of a State subclass, which\n    // represents the current state of the Context.\n    class Context\n    {\n        // A reference to the current state of the Context.\n        private State _state = null;\n\n        public Context(State state)\n        {\n            this.TransitionTo(state);\n        }\n\n        // The Context allows changing the State object at runtime.\n        public void TransitionTo(State state)\n        {\n            Console.WriteLine($"Context: Transition to {state.GetType().Name}.");\n            this._state = state;\n            this._state.SetContext(this);\n        }\n\n        // The Context delegates part of its behavior to the current State\n        // object.\n        public void Request1()\n        {\n            this._state.Handle1();\n        }\n\n        public void Request2()\n        {\n            this._state.Handle2();\n        }\n    }\n\n    // The base State class declares methods that all Concrete State should\n    // implement and also provides a backreference to the Context object,\n    // associated with the State. This backreference can be used by States to\n    // transition the Context to another State.\n    abstract class State\n    {\n        protected Context _context;\n\n        public void SetContext(Context context)\n        {\n            this._context = context;\n        }\n\n        public abstract void Handle1();\n\n        public abstract void Handle2();\n    }\n\n    // Concrete States implement various behaviors, associated with a state of\n    // the Context.\n    class ConcreteStateA : State\n    {\n        public override void Handle1()\n        {\n            Console.WriteLine("ConcreteStateA handles request1.");\n            Console.WriteLine("ConcreteStateA wants to change the state of the context.");\n            this._context.TransitionTo(new ConcreteStateB());\n        }\n\n        public override void Handle2()\n        {\n            Console.WriteLine("ConcreteStateA handles request2.");\n        }\n    }\n\n    class ConcreteStateB : State\n    {\n        public override void Handle1()\n        {\n            Console.Write("ConcreteStateB handles request1.");\n        }\n\n        public override void Handle2()\n        {\n            Console.WriteLine("ConcreteStateB handles request2.");\n            Console.WriteLine("ConcreteStateB wants to change the state of the context.");\n            this._context.TransitionTo(new ConcreteStateA());\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // The client code.\n            var context = new Context(new ConcreteStateA());\n            context.Request1();\n            context.Request2();\n        }\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Context: Transition to ConcreteStateA.\nConcreteStateA handles request1.\nConcreteStateA wants to change the state of the context.\nContext: Transition to ConcreteStateB.\nConcreteStateB handles request2.\nConcreteStateB wants to change the state of the context.\nContext: Transition to ConcreteStateA.\n")))}u.isMDXComponent=!0}}]);