"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8035],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},w=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),w=s(t),h=i,d=w["".concat(c,".").concat(h)]||w[h]||p[h]||o;return t?r.createElement(d,a(a({ref:n},u),{},{components:t})):r.createElement(d,a({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=w;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}w.displayName="MDXCreateElement"},71860:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(83117),i=(t(67294),t(3905));const o={},a="Example 2",l={unversionedId:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/example2",id:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift",slug:"/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/typescript/"}},c={},s=[],u={toc:s};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'import Foundation\nimport UIKit\nimport XCTest\n\nenum AuthType {\n    case login\n    case signUp\n}\n\n\nprotocol AuthViewFactory {\n\n    static func authView(for type: AuthType) -> AuthView\n    static func authController(for type: AuthType) -> AuthViewController\n}\n\nclass StudentAuthViewFactory: AuthViewFactory {\n\n    static func authView(for type: AuthType) -> AuthView {\n        print("Student View has been created")\n        switch type {\n            case .login: return StudentLoginView()\n            case .signUp: return StudentSignUpView()\n        }\n    }\n\n    static func authController(for type: AuthType) -> AuthViewController {\n        let controller = StudentAuthViewController(contentView: authView(for: type))\n        print("Student View Controller has been created")\n        return controller\n    }\n}\n\nclass TeacherAuthViewFactory: AuthViewFactory {\n\n    static func authView(for type: AuthType) -> AuthView {\n        print("Teacher View has been created")\n        switch type {\n            case .login: return TeacherLoginView()\n            case .signUp: return TeacherSignUpView()\n        }\n    }\n\n    static func authController(for type: AuthType) -> AuthViewController {\n        let controller = TeacherAuthViewController(contentView: authView(for: type))\n        print("Teacher View Controller has been created")\n        return controller\n    }\n}\n\n\n\nprotocol AuthView {\n\n    typealias AuthAction = (AuthType) -> ()\n\n    var contentView: UIView { get }\n    var authHandler: AuthAction? { get set }\n\n    var description: String { get }\n}\n\nclass StudentSignUpView: UIView, AuthView {\n\n    private class StudentSignUpContentView: UIView {\n\n        /// This view contains a number of features available only during a\n        /// STUDENT authorization.\n    }\n\n    var contentView: UIView = StudentSignUpContentView()\n\n    /// The handler will be connected for actions of buttons of this view.\n    var authHandler: AuthView.AuthAction?\n\n    override var description: String {\n        return "Student-SignUp-View"\n    }\n}\n\nclass StudentLoginView: UIView, AuthView {\n\n    private let emailField = UITextField()\n    private let passwordField = UITextField()\n    private let signUpButton = UIButton()\n\n    var contentView: UIView {\n        return self\n    }\n\n    /// The handler will be connected for actions of buttons of this view.\n    var authHandler: AuthView.AuthAction?\n\n    override var description: String {\n        return "Student-Login-View"\n    }\n}\n\n\n\nclass TeacherSignUpView: UIView, AuthView {\n\n    class TeacherSignUpContentView: UIView {\n\n        /// This view contains a number of features available only during a\n        /// TEACHER authorization.\n    }\n\n    var contentView: UIView = TeacherSignUpContentView()\n\n    /// The handler will be connected for actions of buttons of this view.\n    var authHandler: AuthView.AuthAction?\n\n    override var description: String {\n        return "Teacher-SignUp-View"\n    }\n}\n\nclass TeacherLoginView: UIView, AuthView {\n\n    private let emailField = UITextField()\n    private let passwordField = UITextField()\n    private let loginButton = UIButton()\n    private let forgotPasswordButton = UIButton()\n\n    var contentView: UIView {\n        return self\n    }\n\n    /// The handler will be connected for actions of buttons of this view.\n    var authHandler: AuthView.AuthAction?\n\n    override var description: String {\n        return "Teacher-Login-View"\n    }\n}\n\n\n\nclass AuthViewController: UIViewController {\n\n    fileprivate var contentView: AuthView\n\n    init(contentView: AuthView) {\n        self.contentView = contentView\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    required convenience init?(coder aDecoder: NSCoder) {\n        return nil\n    }\n}\n\nclass StudentAuthViewController: AuthViewController {\n\n    /// Student-oriented features\n}\n\nclass TeacherAuthViewController: AuthViewController {\n\n    /// Teacher-oriented features\n}\n\n\nprivate class ClientCode {\n\n    private var currentController: AuthViewController?\n\n    private lazy var navigationController: UINavigationController = {\n        guard let vc = currentController else { return UINavigationController() }\n        return UINavigationController(rootViewController: vc)\n    }()\n\n    private let factoryType: AuthViewFactory.Type\n\n    init(factoryType: AuthViewFactory.Type) {\n        self.factoryType = factoryType\n    }\n\n    /// MARK: - Presentation\n\n    func presentLogin() {\n        let controller = factoryType.authController(for: .login)\n        navigationController.pushViewController(controller, animated: true)\n    }\n\n    func presentSignUp() {\n        let controller = factoryType.authController(for: .signUp)\n        navigationController.pushViewController(controller, animated: true)\n    }\n\n    /// Other methods...\n}\n\n\nclass AbstractFactoryRealWorld: XCTestCase {\n\n    func testFactoryMethodRealWorld() {\n\n        #if teacherMode\n            let clientCode = ClientCode(factoryType: TeacherAuthViewFactory.self)\n        #else\n            let clientCode = ClientCode(factoryType: StudentAuthViewFactory.self)\n        #endif\n\n        /// Present LogIn flow\n        clientCode.presentLogin()\n        print("Login screen has been presented")\n\n        /// Present SignUp flow\n        clientCode.presentSignUp()\n        print("Sign up screen has been presented")\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Teacher View has been created\nTeacher View Controller has been created\nLogin screen has been presented\nTeacher View has been created\nTeacher View Controller has been created\nSign up screen has been presented\n")))}p.isMDXComponent=!0}}]);