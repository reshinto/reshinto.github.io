"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[96163],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>l});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var m=r.createContext({}),c=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(m.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,m=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),l=i,f=p["".concat(m,".").concat(l)]||p[l]||d[l]||a;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function l(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8047:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(83117),i=(t(67294),t(3905));const a={},o="Go Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/State/go/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/State/go/readme",title:"Go Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/State/go/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/State/go",slug:"/interviewPrep/designPatterns/Behavioral_patterns/State/go/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/go/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/State/go/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/cSharp/"},next:{title:"Java Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/java/"}},m={},c=[],u={toc:c};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"go-example"},"Go Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\ntype hasItemState struct {\n    vendingMachine *vendingMachine\n}\n\nfunc (i *hasItemState) requestItem() error {\n    if i.vendingMachine.itemCount == 0 {\n        i.vendingMachine.setState(i.vendingMachine.noItem)\n        return fmt.Errorf("No item present")\n    }\n    fmt.Printf("Item requestd\\n")\n    i.vendingMachine.setState(i.vendingMachine.itemRequested)\n    return nil\n}\n\nfunc (i *hasItemState) addItem(count int) error {\n    fmt.Printf("%d items added\\n", count)\n    i.vendingMachine.incrementItemCount(count)\n    return nil\n}\n\nfunc (i *hasItemState) insertMoney(money int) error {\n    return fmt.Errorf("Please select item first")\n}\nfunc (i *hasItemState) dispenseItem() error {\n    return fmt.Errorf("Please select item first")\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\ntype hasMoneyState struct {\n    vendingMachine *vendingMachine\n}\n\nfunc (i *hasMoneyState) requestItem() error {\n    return fmt.Errorf("Item dispense in progress")\n}\n\nfunc (i *hasMoneyState) addItem(count int) error {\n    return fmt.Errorf("Item dispense in progress")\n}\n\nfunc (i *hasMoneyState) insertMoney(money int) error {\n    return fmt.Errorf("Item out of stock")\n}\nfunc (i *hasMoneyState) dispenseItem() error {\n    fmt.Println("Dispensing Item")\n    i.vendingMachine.itemCount = i.vendingMachine.itemCount - 1\n    if i.vendingMachine.itemCount == 0 {\n        i.vendingMachine.setState(i.vendingMachine.noItem)\n    } else {\n        i.vendingMachine.setState(i.vendingMachine.hasItem)\n    }\n    return nil\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\ntype itemRequestedState struct {\n    vendingMachine *vendingMachine\n}\n\nfunc (i *itemRequestedState) requestItem() error {\n    return fmt.Errorf("Item already requested")\n}\n\nfunc (i *itemRequestedState) addItem(count int) error {\n    return fmt.Errorf("Item Dispense in progress")\n}\n\nfunc (i *itemRequestedState) insertMoney(money int) error {\n    if money < i.vendingMachine.itemPrice {\n        fmt.Errorf("Inserted money is less. Please insert %d", i.vendingMachine.itemPrice)\n    }\n    fmt.Println("Money entered is ok")\n    i.vendingMachine.setState(i.vendingMachine.hasMoney)\n    return nil\n}\nfunc (i *itemRequestedState) dispenseItem() error {\n    return fmt.Errorf("Please insert money first")\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\ntype noItemState struct {\n    vendingMachine *vendingMachine\n}\n\nfunc (i *noItemState) requestItem() error {\n    return fmt.Errorf("Item out of stock")\n}\n\nfunc (i *noItemState) addItem(count int) error {\n    i.vendingMachine.incrementItemCount(count)\n    i.vendingMachine.setState(i.vendingMachine.hasItem)\n    return nil\n}\n\nfunc (i *noItemState) insertMoney(money int) error {\n    return fmt.Errorf("Item out of stock")\n}\nfunc (i *noItemState) dispenseItem() error {\n    return fmt.Errorf("Item out of stock")\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"package main\n\ntype state interface {\n    addItem(int) error\n    requestItem() error\n    insertMoney(money int) error\n    dispenseItem() error\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\ntype vendingMachine struct {\n    hasItem       state\n    itemRequested state\n    hasMoney      state\n    noItem        state\n\n    currentState state\n\n    itemCount int\n    itemPrice int\n}\n\nfunc newVendingMachine(itemCount, itemPrice int) *vendingMachine {\n    v := &vendingMachine{\n        itemCount: itemCount,\n        itemPrice: itemPrice,\n    }\n    hasItemState := &hasItemState{\n        vendingMachine: v,\n    }\n    itemRequestedState := &itemRequestedState{\n        vendingMachine: v,\n    }\n    hasMoneyState := &hasMoneyState{\n        vendingMachine: v,\n    }\n    noItemState := &noItemState{\n        vendingMachine: v,\n    }\n\n    v.setState(hasItemState)\n    v.hasItem = hasItemState\n    v.itemRequested = itemRequestedState\n    v.hasMoney = hasMoneyState\n    v.noItem = noItemState\n    return v\n}\n\nfunc (v *vendingMachine) requestItem() error {\n    return v.currentState.requestItem()\n}\n\nfunc (v *vendingMachine) addItem(count int) error {\n    return v.currentState.addItem(count)\n}\n\nfunc (v *vendingMachine) insertMoney(money int) error {\n    return v.currentState.insertMoney(money)\n}\n\nfunc (v *vendingMachine) dispenseItem() error {\n    return v.currentState.dispenseItem()\n}\n\nfunc (v *vendingMachine) setState(s state) {\n    v.currentState = s\n}\n\nfunc (v *vendingMachine) incrementItemCount(count int) {\n    fmt.Printf("Adding %d items\\n", count)\n    v.itemCount = v.itemCount + count\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "log"\n)\n\nfunc main() {\n    vendingMachine := newVendingMachine(1, 10)\n\n    err := vendingMachine.requestItem()\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n\n    err = vendingMachine.insertMoney(10)\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n\n    err = vendingMachine.dispenseItem()\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n\n    fmt.Println()\n\n    err = vendingMachine.addItem(2)\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n\n    fmt.Println()\n\n    err = vendingMachine.requestItem()\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n\n    err = vendingMachine.insertMoney(10)\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n\n    err = vendingMachine.dispenseItem()\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Item requestd\nMoney entered is ok\nDispensing Item\n\nAdding 2 items\n\nItem requestd\nMoney entered is ok\nDispensing Item\n")))}d.isMDXComponent=!0}}]);