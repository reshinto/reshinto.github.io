"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[3132],{3905:(t,e,n)=>{n.d(e,{Zo:()=>g,kt:()=>p});var r=n(67294);function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){s(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,s=function(t,e){if(null==t)return{};var n,r,s={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(s[n]=t[n]);return s}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(s[n]=t[n])}return s}var l=r.createContext({}),c=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},g=function(t){var e=c(t.components);return r.createElement(l.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,s=t.mdxType,a=t.originalType,l=t.parentName,g=i(t,["components","mdxType","originalType","parentName"]),u=c(n),p=s,h=u["".concat(l,".").concat(p)]||u[p]||d[p]||a;return n?r.createElement(h,o(o({ref:e},g),{},{components:n})):r.createElement(h,o({ref:e},g))}));function p(t,e){var n=arguments,s=e&&e.mdxType;if("string"==typeof t||s){var a=n.length,o=new Array(a);o[0]=u;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:s,o[1]=i;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},15462:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(83117),s=(n(67294),n(3905));const a={},o="C++ Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/cPlusPlus/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/cPlusPlus",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Strategy/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Strategy",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/cSharp/"}},l={},c=[],g={toc:c};function d(t){let{components:e,...n}=t;return(0,s.kt)("wrapper",(0,r.Z)({},g,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"c-example"},"C++ Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\n/**\n * Strategy Design Pattern\n *\n * Intent: Lets you define a family of algorithms, put each of them into a\n * separate class, and make their objects interchangeable.\n */\n\n/**\n * The Strategy interface declares operations common to all supported versions\n * of some algorithm.\n *\n * The Context uses this interface to call the algorithm defined by Concrete\n * Strategies.\n */\nclass Strategy\n{\npublic:\n    virtual ~Strategy() {}\n    virtual std::string DoAlgorithm(const std::vector<std::string> &data) const = 0;\n};\n\n/**\n * The Context defines the interface of interest to clients.\n */\n\nclass Context\n{\n    /**\n     * @var Strategy The Context maintains a reference to one of the Strategy\n     * objects. The Context does not know the concrete class of a strategy. It\n     * should work with all strategies via the Strategy interface.\n     */\nprivate:\n    Strategy *strategy_;\n    /**\n     * Usually, the Context accepts a strategy through the constructor, but also\n     * provides a setter to change it at runtime.\n     */\npublic:\n    Context(Strategy *strategy = nullptr) : strategy_(strategy)\n    {\n    }\n    ~Context()\n    {\n        delete this->strategy_;\n    }\n    /**\n     * Usually, the Context allows replacing a Strategy object at runtime.\n     */\n    void set_strategy(Strategy *strategy)\n    {\n        delete this->strategy_;\n        this->strategy_ = strategy;\n    }\n    /**\n     * The Context delegates some work to the Strategy object instead of\n     * implementing +multiple versions of the algorithm on its own.\n     */\n    void DoSomeBusinessLogic() const\n    {\n        // ...\n        std::cout << "Context: Sorting data using the strategy (not sure how it\'ll do it)\\n";\n        std::string result = this->strategy_->DoAlgorithm(std::vector<std::string>{"a", "e", "c", "b", "d"});\n        std::cout << result << "\\n";\n        // ...\n    }\n};\n\n/**\n * Concrete Strategies implement the algorithm while following the base Strategy\n * interface. The interface makes them interchangeable in the Context.\n */\nclass ConcreteStrategyA : public Strategy\n{\npublic:\n    std::string DoAlgorithm(const std::vector<std::string> &data) const override\n    {\n        std::string result;\n        std::for_each(std::begin(data), std::end(data), [&result](const std::string &letter) {\n            result += letter;\n        });\n        std::sort(std::begin(result), std::end(result));\n\n        return result;\n    }\n};\nclass ConcreteStrategyB : public Strategy\n{\n    std::string DoAlgorithm(const std::vector<std::string> &data) const override\n    {\n        std::string result;\n        std::for_each(std::begin(data), std::end(data), [&result](const std::string &letter) {\n            result += letter;\n        });\n        std::sort(std::begin(result), std::end(result));\n        for (int i = 0; i < result.size() / 2; i++)\n        {\n            std::swap(result[i], result[result.size() - i - 1]);\n        }\n\n        return result;\n    }\n};\n/**\n * The client code picks a concrete strategy and passes it to the context. The\n * client should be aware of the differences between strategies in order to make\n * the right choice.\n */\n\nvoid ClientCode()\n{\n    Context *context = new Context(new ConcreteStrategyA);\n    std::cout << "Client: Strategy is set to normal sorting.\\n";\n    context->DoSomeBusinessLogic();\n    std::cout << "\\n";\n    std::cout << "Client: Strategy is set to reverse sorting.\\n";\n    context->set_strategy(new ConcreteStrategyB);\n    context->DoSomeBusinessLogic();\n    delete context;\n}\n\nint main()\n{\n    ClientCode();\n    return 0;\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Client: Strategy is set to normal sorting.\nContext: Sorting data using the strategy (not sure how it'll do it)\nabcde\n\nClient: Strategy is set to reverse sorting.\nContext: Sorting data using the strategy (not sure how it'll do it)\nedcba\n")))}d.isMDXComponent=!0}}]);