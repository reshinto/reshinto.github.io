"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[45583],{3905:(e,n,i)=>{i.d(n,{Zo:()=>c,kt:()=>m});var t=i(67294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function s(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?o(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function l(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var a=t.createContext({}),p=function(e){var n=t.useContext(a),i=n;return e&&(i="function"==typeof e?e(n):s(s({},n),e)),i},c=function(e){var n=p(e.components);return t.createElement(a.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(i),m=r,f=d["".concat(a,".").concat(m)]||d[m]||u[m]||o;return i?t.createElement(f,s(s({ref:n},c),{},{components:i})):t.createElement(f,s({ref:n},c))}));function m(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=i.length,s=new Array(o);s[0]=d;var l={};for(var a in n)hasOwnProperty.call(n,a)&&(l[a]=n[a]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=i[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,i)}d.displayName="MDXCreateElement"},49026:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var t=i(83117),r=(i(67294),i(3905));const o={},s="C# Example",l={unversionedId:"interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/cSharp/readme",id:"interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/cSharp/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/cSharp",slug:"/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/cSharp/",permalink:"/docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Single Responsibility Principle (SRP)",permalink:"/docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/javascript/"}},a={},p=[],c={toc:p};function u(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,t.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"c-example"},"C# Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\nSingle Responsibility Principle\n\n- A good advice on how to build systems\n- it specifies that any particular class should have just a single reason to change\n- the whole point of this principle is that a typical class is responsible for 1 thing and has 1 reason to change\n*/\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Diagnostics;\n\n// this example violates the Single Responsibility Principle as the class has too many responsibilities\npublic class Journal {\n  private readonly List<string> entries = new List<string>();\n  private static int count = 0;\n\n  public int AddEntry(string text) {\n    entries.Add($"{++count}: {text}");\n    return count;  // memento pattern\n  }\n\n  public void RemoveEntry(int index) {\n    entries.RemoveAt(index);  // not a stable way of removing entries as once removed, indices of other elements become invalid\n  }\n\n  public override string ToString() {\n    return string.Join(Environment.NewLine, entries);\n  }\n\n  /*\n  // breaks single responsibility principle\n  public void Save(string filename) {\n    File.WriteAllText(filename, ToString());\n  }\n\n  public static Journal Load(string filename) {}\n\n  public void Load(Uri uri) {}\n  */\n}\n\n// solution is to separate the persistence to a different class\npublic class Persistence {\n  public void SaveToFile(Journal j, string filename, bool overwrite = false) {\n    if (overwrite || !File.Exists(filename))\n      File.WriteAllText(filename, j.ToString());\n  }\n}\n\npublic class Program {\n  public static void Main() {\n    var j = new Journal();\n    j.AddEntry("I cried today!");\n    j.AddEntry("I ate a bug2!");\n    Console.WriteLine(j);\n\n    var p = new Persistence();\n    var filename = @"./journal.txt";  // mac file format\n    p.SaveToFile(j, filename, true);  // create and save file, overwrite if exist\n    Process.Start(filename);  // open file\n  }\n}\n')))}u.isMDXComponent=!0}}]);