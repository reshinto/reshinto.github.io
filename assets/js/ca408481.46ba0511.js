"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[99836],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),u=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(a),c=l,k=p["".concat(o,".").concat(c)]||p[c]||m[c]||r;return a?n.createElement(k,i(i({ref:t},d),{},{components:a})):n.createElement(k,i({ref:t},d))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:l,i[1]=s;for(var u=2;u<r;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},61466:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var n=a(83117),l=(a(67294),a(3905));const r={},i="Databases",s={unversionedId:"interviewPrep/system_design/storage/databases/readme",id:"interviewPrep/system_design/storage/databases/readme",title:"Databases",description:"- In the world of databases, there are 2 main types of solutions:",source:"@site/docs/interviewPrep/system_design/storage/databases/readme.md",sourceDirName:"interviewPrep/system_design/storage/databases",slug:"/interviewPrep/system_design/storage/databases/",permalink:"/docs/interviewPrep/system_design/storage/databases/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/system_design/storage/databases/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL vs Graph Database example",permalink:"/docs/interviewPrep/system_design/storage/14SpecializedStorageParadigms/sqlVsGraphDbExample/"},next:{title:"Relational Databases",permalink:"/docs/interviewPrep/system_design/storage/databases/12RelationalDatabases/"}},o={},u=[{value:"SQL (Structured Query Language)",id:"sql-structured-query-language",level:2},{value:"NoSQL",id:"nosql",level:2},{value:"Key-Value Stores",id:"key-value-stores",level:3},{value:"Document Databases",id:"document-databases",level:3},{value:"Wide-Column Databases",id:"wide-column-databases",level:3},{value:"Graph Databases",id:"graph-databases",level:3},{value:"High level differences between SQL and NoSQL",id:"high-level-differences-between-sql-and-nosql",level:2},{value:"Storage",id:"storage",level:3},{value:"Schema",id:"schema",level:3},{value:"Querying",id:"querying",level:3},{value:"Scalability",id:"scalability",level:3},{value:"Reliability or ACID Compliancy (Atomicity, Consistency, Isolation, Durability)",id:"reliability-or-acid-compliancy-atomicity-consistency-isolation-durability",level:3},{value:"Available Tools",id:"available-tools",level:3},{value:"SQL VS. NoSQL - Which one to use?",id:"sql-vs-nosql---which-one-to-use",level:2},{value:"Reasons to use SQL database",id:"reasons-to-use-sql-database",level:3},{value:"Reasons to use NoSQL database",id:"reasons-to-use-nosql-database",level:3}],d={toc:u};function m(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"databases"},"Databases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In the world of databases, there are 2 main types of solutions:",(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"SQL (relational databases)"),(0,l.kt)("li",{parentName:"ol"},"NoSQL (non-relational databases)")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Both differ in the way they were built, the kind of information they store, and the storage method they use"))),(0,l.kt)("li",{parentName:"ul"},"Relational databases are structured and have predefined schemas",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"like phone books that store phone numbers and addresses"))),(0,l.kt)("li",{parentName:"ul"},"Non-relational databases are unstructured, distributed, and have a dynamic schema",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"like file folders that hold a person\u2019s address and phone number, etc.")))),(0,l.kt)("h2",{id:"sql-structured-query-language"},"SQL (Structured Query Language)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Relational databases store data in tables with rows and columns"),(0,l.kt)("li",{parentName:"ul"},"Each row contains all the information about one entity"),(0,l.kt)("li",{parentName:"ul"},"each column contains all the separate data points"),(0,l.kt)("li",{parentName:"ul"},"Popular relational databases: MySQL, Oracle, MS SQL Server, SQLite, Postgres, and MariaDB"),(0,l.kt)("li",{parentName:"ul"},"uses relational data model")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE tag_list (\n  id INT PRIMARY KEY NOT NULL,\n  post_id INT FOREIGN KEY REFERENCES post (id) NOT NULL,\n  tag VARCHAR(50) NOT NULL\n)\n")),(0,l.kt)("h2",{id:"nosql"},"NoSQL"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"common types of NoSQL:"),(0,l.kt)("li",{parentName:"ul"},"uses data models such as",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"column store"),(0,l.kt)("li",{parentName:"ul"},"document store"),(0,l.kt)("li",{parentName:"ul"},"key value / tuple store"),(0,l.kt)("li",{parentName:"ul"},"graph databases"),(0,l.kt)("li",{parentName:"ul"},"multi-model databases")))),(0,l.kt)("h3",{id:"key-value-stores"},"Key-Value Stores"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Data is stored in an array of key-value pairs"),(0,l.kt)("li",{parentName:"ul"},"The \u2018key\u2019 is an attribute name which is linked to a \u2018value\u2019"),(0,l.kt)("li",{parentName:"ul"},"e.g. Redis, Voldemort, and Dynamo")),(0,l.kt)("h3",{id:"document-databases"},"Document Databases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In these databases, data is stored in documents (instead of rows and columns in a table)"),(0,l.kt)("li",{parentName:"ul"},"these documents are grouped together in collections"),(0,l.kt)("li",{parentName:"ul"},"Each document can have an entirely different structure"),(0,l.kt)("li",{parentName:"ul"},"key features:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"each record is stored with its associated data in a single document"),(0,l.kt)("li",{parentName:"ul"},"fast reads"),(0,l.kt)("li",{parentName:"ul"},"query language"),(0,l.kt)("li",{parentName:"ul"},"dynamic schema"),(0,l.kt)("li",{parentName:"ul"},"use cases:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"cache, sessions, logging, CMS, blogging platforms, etc."))))),(0,l.kt)("li",{parentName:"ul"},"looks similar to JSON"),(0,l.kt)("li",{parentName:"ul"},"e.g. CouchDB, MongoDB, Firebase, MarkLogic")),(0,l.kt)("h3",{id:"wide-column-databases"},"Wide-Column Databases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Instead of \u2018tables,\u2019 in columnar databases we have column families, which are containers for rows"),(0,l.kt)("li",{parentName:"ul"},"Unlike relational databases, we don\u2019t need to know all the columns up front"),(0,l.kt)("li",{parentName:"ul"},"each row doesn\u2019t have to have the same number of columns"),(0,l.kt)("li",{parentName:"ul"},"Columnar databases are best suited for analyzing large datasets"),(0,l.kt)("li",{parentName:"ul"},"e.g. Cassandra and HBase")),(0,l.kt)("h3",{id:"graph-databases"},"Graph Databases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"These databases are used to store data whose relations are best represented in a graph"),(0,l.kt)("li",{parentName:"ul"},"Data is saved in graph structures with nodes (entities)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"properties (information about the entities)"),(0,l.kt)("li",{parentName:"ul"},"and lines (connections between the entities)"))),(0,l.kt)("li",{parentName:"ul"},"e.g. Neo4J and InfiniteGraph")),(0,l.kt)("h2",{id:"high-level-differences-between-sql-and-nosql"},"High level differences between SQL and NoSQL"),(0,l.kt)("h3",{id:"storage"},"Storage"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"SQL"),(0,l.kt)("th",{parentName:"tr",align:null},"NoSQL"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"stores data in tables where each row represents an entity"),(0,l.kt)("td",{parentName:"tr",align:null},"have different data storage models")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"each column represents a data point about that entity"),(0,l.kt)("td",{parentName:"tr",align:null},"The main ones are key-value, document, graph, and columnar")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"e.g. if we are storing a car entity in a table, different columns could be \u2018Color\u2019, \u2018Make\u2019, \u2018Model\u2019, etc."),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"schema"},"Schema"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"SQL"),(0,l.kt)("th",{parentName:"tr",align:null},"NoSQL"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"defined schema"),(0,l.kt)("td",{parentName:"tr",align:null},"schemaless")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"each record conforms to a fixed schema"),(0,l.kt)("td",{parentName:"tr",align:null},"schemas are dynamic")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"meaning the columns must be decided and chosen before data entry and each row must have data for each column"),(0,l.kt)("td",{parentName:"tr",align:null},"Columns can be added on the fly")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"The schema can be altered later"),(0,l.kt)("td",{parentName:"tr",align:null},"each ",(0,l.kt)("inlineCode",{parentName:"td"},"row")," (or equivalent) doesn\u2019t have to contain data for each ",(0,l.kt)("inlineCode",{parentName:"td"},"column"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"but it involves modifying the whole database and going offline"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"querying"},"Querying"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"SQL"),(0,l.kt)("th",{parentName:"tr",align:null},"NoSQL"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"use SQL (structured query language) for defining and manipulating the data, which is very powerful"),(0,l.kt)("td",{parentName:"tr",align:null},"object-based APIs")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"queries are focused on a collection of documents")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Sometimes it is also called UnQL (Unstructured Query Language)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Different databases have different syntax for using UnQL")))),(0,l.kt)("h3",{id:"scalability"},"Scalability"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"SQL"),(0,l.kt)("th",{parentName:"tr",align:null},"NoSQL"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"vertically scalable (scale up)"),(0,l.kt)("td",{parentName:"tr",align:null},"horizontally scalable (scale up and out)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"i.e., by increasing the horsepower (higher Memory, CPU, etc.) of the hardware, which can get very expensive"),(0,l.kt)("td",{parentName:"tr",align:null},"meaning we can add more servers easily in our NoSQL database infrastructure to handle a lot of traffic")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"It is possible to scale a relational database across multiple servers"),(0,l.kt)("td",{parentName:"tr",align:null},"Any cheap commodity hardware or cloud instances can host NoSQL databases")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"but this is a challenging and time-consuming process."),(0,l.kt)("td",{parentName:"tr",align:null},"thus making it a lot more cost-effective than vertical scaling")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"A lot of NoSQL technologies also distribute data across servers automatically")))),(0,l.kt)("h3",{id:"reliability-or-acid-compliancy-atomicity-consistency-isolation-durability"},"Reliability or ACID Compliancy (Atomicity, Consistency, Isolation, Durability)"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"SQL"),(0,l.kt)("th",{parentName:"tr",align:null},"NoSQL"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"vast majority of relational databases are ACID compliant"),(0,l.kt)("td",{parentName:"tr",align:null},"BASE (basically available, soft state, eventual consistency) compliant")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"So, when it comes to data reliability and safe guarantee of performing transactions"),(0,l.kt)("td",{parentName:"tr",align:null},"Most of the NoSQL solutions sacrifice ACID compliance for performance and scalability")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SQL databases are still the better bet"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"available-tools"},"Available Tools"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"SQL"),(0,l.kt)("th",{parentName:"tr",align:null},"NoSQL"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"lost of tools for DB development"),(0,l.kt)("td",{parentName:"tr",align:null},"applications are the primary interface to the DB")))),(0,l.kt)("h2",{id:"sql-vs-nosql---which-one-to-use"},"SQL VS. NoSQL - Which one to use?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"When it comes to database technology, there\u2019s no one-size-fits-all solution",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"That\u2019s why many businesses rely on both relational and non-relational databases for different needs"),(0,l.kt)("li",{parentName:"ul"},"Even as NoSQL databases are gaining popularity for their speed and scalability",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"there are still situations where a highly structured SQL database may perform better"),(0,l.kt)("li",{parentName:"ul"},"choosing the right technology hinges on the use case")))))),(0,l.kt)("h3",{id:"reasons-to-use-sql-database"},"Reasons to use SQL database"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"reasons to choose a SQL database:",(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"We need to ensure ACID compliance",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"ACID compliance reduces anomalies and protects the integrity of your database",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"by prescribing exactly how transactions interact with the database"),(0,l.kt)("li",{parentName:"ul"},"Generally, NoSQL databases sacrifice ACID compliance for scalability and processing speed",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"but for many e-commerce and financial applications, an ACID-compliant database remains the preferred option"))))))),(0,l.kt)("li",{parentName:"ol"},"Your data is structured and unchanging",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If your business is not experiencing massive growth that would require more servers"),(0,l.kt)("li",{parentName:"ul"},"if you\u2019re only working with data that is consistent",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"then there may be no reason to use a system designed to support a variety of data types and high traffic volume")))))))),(0,l.kt)("h3",{id:"reasons-to-use-nosql-database"},"Reasons to use NoSQL database"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"When all the other components of our application are fast and seamless",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"NoSQL databases prevent data from being the bottleneck"),(0,l.kt)("li",{parentName:"ul"},"Big data is contributing to a large success for NoSQL databases",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"mainly because it handles data differently than the traditional relational databases",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. popular examples of NoSQL databases: MongoDB, CouchDB, Cassandra, and HBase")))))))),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Storing large volumes of data that often have little to no structure",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"A NoSQL database sets no limits on the types of data we can store together"),(0,l.kt)("li",{parentName:"ul"},"allows us to add new types as the need changes"),(0,l.kt)("li",{parentName:"ul"},"With document-based databases",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"can store data in one place without having to define what \u201ctypes\u201d of data those are in advance"))))),(0,l.kt)("li",{parentName:"ol"},"Making the most of cloud computing and storage")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Cloud-based storage is an excellent cost-saving solution",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"but requires data to be easily spread across multiple servers to scale up"),(0,l.kt)("li",{parentName:"ul"},"Using commodity (affordable, smaller) hardware on-site",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"or in the cloud saves you the hassle of additional software"),(0,l.kt)("li",{parentName:"ul"},"NoSQL databases like Cassandra are designed to be scaled across multiple data centers out of the box without hassles")))))),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Rapid development",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"NoSQL is extremely useful for rapid development",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"as it doesn\u2019t need to be prepped ahead of time"),(0,l.kt)("li",{parentName:"ul"},"If you\u2019re working on quick iterations of your system",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"which require making frequent updates to the data structure without a lot of downtime between versions",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"a relational database will slow you down")))))))))))}m.isMDXComponent=!0}}]);