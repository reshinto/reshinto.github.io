"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[988],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>h});var a=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function n(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?n(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):n(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,a,r=function(e,t){if(null==e)return{};var i,a,r={},n=Object.keys(e);for(a=0;a<n.length;a++)i=n[a],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)i=n[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var m=a.createContext({}),s=function(e){var t=a.useContext(m),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},d=function(e){var t=s(e.components);return a.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var i=e.components,r=e.mdxType,n=e.originalType,m=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(i),h=r,p=u["".concat(m,".").concat(h)]||u[h]||c[h]||n;return i?a.createElement(p,l(l({ref:t},d),{},{components:i})):a.createElement(p,l({ref:t},d))}));function h(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=i.length,l=new Array(n);l[0]=u;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<n;s++)l[s]=i[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,i)}u.displayName="MDXCreateElement"},7772:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>c,frontMatter:()=>n,metadata:()=>o,toc:()=>s});var a=i(7462),r=(i(7294),i(3905));const n={},l="Git tutorial",o={unversionedId:"others/gitCommands",id:"others/gitCommands",title:"Git tutorial",description:"- It is a type of Distributed Version Control Systems",source:"@site/docs/others/gitCommands.md",sourceDirName:"others",slug:"/others/gitCommands",permalink:"/docs/others/gitCommands",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/others/gitCommands.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Machine Learning Basics",permalink:"/docs/machine_learning/"},next:{title:"Linux terminal commands",permalink:"/docs/others/linux"}},m={},s=[{value:"Set config values",id:"set-config-values",level:3},{value:"View config values",id:"view-config-values",level:3},{value:"Get help for git commands",id:"get-help-for-git-commands",level:3},{value:"Initialize a repository from existing code",id:"initialize-a-repository-from-existing-code",level:3},{value:"View current status of repository",id:"view-current-status-of-repository",level:3},{value:"Ignore files to prevent it from being tracked by git",id:"ignore-files-to-prevent-it-from-being-tracked-by-git",level:3},{value:"Git stages",id:"git-stages",level:3},{value:"Add new file or recently modified file to the &quot;Staging area&quot;",id:"add-new-file-or-recently-modified-file-to-the-staging-area",level:3},{value:"Remove file from &quot;Staging area&quot;",id:"remove-file-from-staging-area",level:3},{value:"Reference branch HEAD to different commit",id:"reference-branch-head-to-different-commit",level:3},{value:"Rename or move file then add to the &quot;Staging area&quot;",id:"rename-or-move-file-then-add-to-the-staging-area",level:3},{value:"Unmodify file",id:"unmodify-file",level:3},{value:"Commit files from the &quot;Staging area&quot; to the &quot;.git directory&quot;",id:"commit-files-from-the-staging-area-to-the-git-directory",level:3},{value:"Edit specific commit contents and message",id:"edit-specific-commit-contents-and-message",level:3},{value:"Add and commit",id:"add-and-commit",level:3},{value:"Undo commit",id:"undo-commit",level:3},{value:"View git history",id:"view-git-history",level:3},{value:"Stashing to put untracked or staged files into a temporary space",id:"stashing-to-put-untracked-or-staged-files-into-a-temporary-space",level:3},{value:"Cloning a remote repository",id:"cloning-a-remote-repository",level:3},{value:"View remote information about the repository",id:"view-remote-information-about-the-repository",level:3},{value:"Add remote repositories",id:"add-remote-repositories",level:3},{value:"Inspect a remote respository",id:"inspect-a-remote-respository",level:3},{value:"Rename remote repository",id:"rename-remote-repository",level:3},{value:"Remove remote repository",id:"remove-remote-repository",level:3},{value:"View all branches information in the repository",id:"view-all-branches-information-in-the-repository",level:3},{value:"View the differences of recently modified files in the &quot;working directory&quot; compared to the last commit",id:"view-the-differences-of-recently-modified-files-in-the-working-directory-compared-to-the-last-commit",level:3},{value:"Create new branch",id:"create-new-branch",level:3},{value:"Change to a different branch",id:"change-to-a-different-branch",level:3},{value:"Create and change to the new branch",id:"create-and-change-to-the-new-branch",level:3},{value:"Delete branch",id:"delete-branch",level:3},{value:"Merge branch with current master",id:"merge-branch-with-current-master",level:3},{value:"Fetch data from the server but do not merge with your client",id:"fetch-data-from-the-server-but-do-not-merge-with-your-client",level:3},{value:"Fetch data from the server AND merge with your client",id:"fetch-data-from-the-server-and-merge-with-your-client",level:3},{value:"Update server from the client",id:"update-server-from-the-client",level:3},{value:"Repositioning commits to the latest",id:"repositioning-commits-to-the-latest",level:3}],d={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"git-tutorial"},"Git tutorial"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It is a type of Distributed Version Control Systems",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"clients fully mirror the repository and history"),(0,r.kt)("li",{parentName:"ul"},"if any server dies, the client repositories can be copied back up to the server to restore it",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"only if the systems were collaborating via that server"))),(0,r.kt)("li",{parentName:"ul"},"every clone is a full backup of all the data"))),(0,r.kt)("li",{parentName:"ul"},"It is better than the Centralized Version Control Systems",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"file is stored and modified in the server"),(0,r.kt)("li",{parentName:"ul"},"clients can view or modify the file if authorized by the administrator"),(0,r.kt)("li",{parentName:"ul"},"problem is if server is down, no one can view or modify the file"))),(0,r.kt)("li",{parentName:"ul"},"It is better than the Local Version Control System",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"file is stored and modified locally"),(0,r.kt)("li",{parentName:"ul"},"problem is it is error prone (ex: save or copy wrong file)")))),(0,r.kt)("h3",{id:"set-config-values"},"Set config values"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'git config --global user.name "My Name"')," let collaborators know who modified the source code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'git config --global user.email "myemail@email.com"')," let collaborators know the email of the person who modified the source code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git difftool --tool=<toolName>")," set external graphical diff viewing program")),(0,r.kt)("h3",{id:"view-config-values"},"View config values"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git config --list"))),(0,r.kt)("h3",{id:"get-help-for-git-commands"},"Get help for git commands"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git help <verb>")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"git <verb> --help"))),(0,r.kt)("h3",{id:"initialize-a-repository-from-existing-code"},"Initialize a repository from existing code"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git init")," creates a .git folder to track changes")),(0,r.kt)("h3",{id:"view-current-status-of-repository"},"View current status of repository"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git status"))),(0,r.kt)("h3",{id:"ignore-files-to-prevent-it-from-being-tracked-by-git"},"Ignore files to prevent it from being tracked by git"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a .gitignore file if it does not exist"),(0,r.kt)("li",{parentName:"ul"},"Write the filename or folders to ignore in the file",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".DS_Store")," add file"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"*.pyc")," add all file that end with .pyc"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"!test.pyc")," track test.pyc even though all files that end with .pyc is to be ignored"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/filename")," ONLY ignore this file in the current directory and not in other directories"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"folderName/")," ignore all files in with this folderName")))),(0,r.kt)("h3",{id:"git-stages"},"Git stages"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Newly created or recently modified files are in the "working directory"'),(0,r.kt)("li",{parentName:"ul"},'Files can only be committed if recent file changes are transferred from the "working directory" to the "staging area"'),(0,r.kt)("li",{parentName:"ul"},'When files are committed, the files are transferred from the "staging area" to the ".git directory"')),(0,r.kt)("h3",{id:"add-new-file-or-recently-modified-file-to-the-staging-area"},'Add new file or recently modified file to the "Staging area"'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git add <filename>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git add -A")," stages all changes (new files, modified files, deleted files)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git add .")," (version 1.x) stages new files and modified files only, (version 2.x) stages ALL changes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git add --ignore-removal .")," stages new files and modified files only (only in version 2.x)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git add -u")," stages modified files and deleted files only")),(0,r.kt)("h3",{id:"remove-file-from-staging-area"},'Remove file from "Staging area"'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git reset <filename>")," unstage file from the staging area (unstaged change will NOT be displayed in the history)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git rm --cached <filename>")," stages the file's removal from the staging area",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git rm <filename>")," WARNING: this will actually delete the file from the system and stage the file's removal"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git reset")," remove all files from staging area"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git reset --hard <shortRepoName>/<branchName>")," discards all history and changes back to the specified commit ",(0,r.kt)("inlineCode",{parentName:"li"},"git reset --hard origin/master"))),(0,r.kt)("h3",{id:"reference-branch-head-to-different-commit"},"Reference branch HEAD to different commit"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git branch -f <branchName> <commit>"))),(0,r.kt)("h3",{id:"rename-or-move-file-then-add-to-the-staging-area"},'Rename or move file then add to the "Staging area"'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git mv <oldFilenameOrWithPath> <newFilenameOrWithPath>"))),(0,r.kt)("h3",{id:"unmodify-file"},"Unmodify file"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git checkout -- <filename>")," revert modified file to the last commit")),(0,r.kt)("h3",{id:"commit-files-from-the-staging-area-to-the-git-directory"},'Commit files from the "Staging area" to the ".git directory"'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git commit")," an editor will open to allow you to write the commit changes message"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'git commit -m "message about the changes made"')," write the commit changes message directly in the terminal"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git commit --amend")," undo and recommit new changes (ex: add forgotten files, modify commit messages)")),(0,r.kt)("h3",{id:"edit-specific-commit-contents-and-message"},"Edit specific commit contents and message"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git rebase -i '<commit>^'"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the ^ will ensure the latest commit will be taken into consideration"),(0,r.kt)("li",{parentName:"ul"},"after entering the command, a help menu will be displayed in the text editor and you need to change the specific commits to the desired command")))),(0,r.kt)("h3",{id:"add-and-commit"},"Add and commit"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git commit -a"),' "-a" adds all new and modified files and open an editor for comments'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'git commit -am "message about the changes made"')," adds all new and modified files with comments on 1 line")),(0,r.kt)("h3",{id:"undo-commit"},"Undo commit"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git revert [saved hash]")," git will create a new commit that undoes that commit")),(0,r.kt)("h3",{id:"view-git-history"},"View git history"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git log")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git log --pretty=oneline")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"git log --oneline")," display one line logs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git log --graph")," display logs with ASCII graph showing the branch and merge history")),(0,r.kt)("h3",{id:"stashing-to-put-untracked-or-staged-files-into-a-temporary-space"},"Stashing to put untracked or staged files into a temporary space"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"remove from current commit and store at a temporary space",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git stash")))),(0,r.kt)("li",{parentName:"ul"},"put back untracked or staged files to commit",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git stash pop"))))),(0,r.kt)("h3",{id:"cloning-a-remote-repository"},"Cloning a remote repository"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git clone <gitURL> <whereToClone>"))),(0,r.kt)("h3",{id:"view-remote-information-about-the-repository"},"View remote information about the repository"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git remote -v"))),(0,r.kt)("h3",{id:"add-remote-repositories"},"Add remote repositories"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git remote add <shortRepoName> <url>"),' shortRepoName is usually named as "origin"')),(0,r.kt)("h3",{id:"inspect-a-remote-respository"},"Inspect a remote respository"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git remote show <shortRepoName>"))),(0,r.kt)("h3",{id:"rename-remote-repository"},"Rename remote repository"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git remote rename <oldShortRepoName> <newShortRepoName>"))),(0,r.kt)("h3",{id:"remove-remote-repository"},"Remove remote repository"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git remote remove <shortRepoName>"))),(0,r.kt)("h3",{id:"view-all-branches-information-in-the-repository"},"View all branches information in the repository"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git branch -a")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"git branch"))),(0,r.kt)("h3",{id:"view-the-differences-of-recently-modified-files-in-the-working-directory-compared-to-the-last-commit"},'View the differences of recently modified files in the "working directory" compared to the last commit'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git diff"),' does not work on files that are already added to the "Staging area" or ".git directory"'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git diff --staged")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"git diff --cached"),' view differences for files in the "Staging area" compared to the last commit'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git difftool -y"),' change diff to difftool to use external program, add "-y" to agree to launching the external program')),(0,r.kt)("h3",{id:"create-new-branch"},"Create new branch"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git branch <newBranchName>"))),(0,r.kt)("h3",{id:"change-to-a-different-branch"},"Change to a different branch"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git checkout <branchName>"))),(0,r.kt)("h3",{id:"create-and-change-to-the-new-branch"},"Create and change to the new branch"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git checkout -b <newBranchName>"))),(0,r.kt)("h3",{id:"delete-branch"},"Delete branch"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git branch -d <branchName>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git push origin --delete <branchName>")," delete branch from remote repository")),(0,r.kt)("h3",{id:"merge-branch-with-current-master"},"Merge branch with current master"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git merge <branchName>"))),(0,r.kt)("h3",{id:"fetch-data-from-the-server-but-do-not-merge-with-your-client"},"Fetch data from the server but do not merge with your client"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git fetch <nameOfRemoteRepository> <branchNameThatWeWantToGet>"))),(0,r.kt)("h3",{id:"fetch-data-from-the-server-and-merge-with-your-client"},"Fetch data from the server AND merge with your client"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git pull <nameOfRemoteRepository> <branchNameThatWeWantToGet>")," usually use ",(0,r.kt)("inlineCode",{parentName:"li"},"git pull origin master"))),(0,r.kt)("h3",{id:"update-server-from-the-client"},"Update server from the client"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git push <nameOfRemoteRepository> <branchNameThatWeWantToSend>")," usually use ",(0,r.kt)("inlineCode",{parentName:"li"},"git push origin master")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git push -u origin <branchName>")," -u is required when pushing the branch for the FIRST time")),(0,r.kt)("h3",{id:"repositioning-commits-to-the-latest"},"Repositioning commits to the latest"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git rebase master")," when this is called at branch, it will reposition the branch commits to the latest master commits\n",(0,r.kt)("img",{alt:"rebaseMaster",src:i(7522).Z,width:"920",height:"378"})),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git rebase <branchName>")," when this is called at master, it will merge the branch commits as new commits\n",(0,r.kt)("img",{alt:"rebaseBranch",src:i(2110).Z,width:"796",height:"370"})),(0,r.kt)("li",{parentName:"ul"},"AFTER rebasing, must do a ",(0,r.kt)("inlineCode",{parentName:"li"},"git push -f"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"do NOT do just ",(0,r.kt)("inlineCode",{parentName:"li"},"git push"))))))}c.isMDXComponent=!0},2110:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/rebaseBranch-5e3a4898344634f13ced86aa9656dad6.png"},7522:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/rebaseMaster-d899ef118fa60c4974f1eef34340055f.png"}}]);