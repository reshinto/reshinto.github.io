"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[3253],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),h=r,d=u["".concat(s,".").concat(h)]||u[h]||c[h]||i;return a?n.createElement(d,l(l({ref:t},m),{},{components:a})):n.createElement(d,l({ref:t},m))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},11476:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={},l="Behavior Patterns",o={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/readme",title:"Behavior Patterns",description:"- related to algorithms and the assignment of responsibilities between objects",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns",slug:"/interviewPrep/designPatterns/Behavioral_patterns/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Design Patterns",permalink:"/docs/interviewPrep/designPatterns/"},next:{title:"Chain of Responsibility",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/"}},s={},p=[{value:"Chain of Responsibility",id:"chain-of-responsibility",level:3},{value:"Command",id:"command",level:3},{value:"Interpreter",id:"interpreter",level:3},{value:"Iterator",id:"iterator",level:3},{value:"Mediator",id:"mediator",level:3},{value:"Memento",id:"memento",level:3},{value:"Observer",id:"observer",level:3},{value:"State",id:"state",level:3},{value:"Strategy",id:"strategy",level:3},{value:"Template Method",id:"template-method",level:3},{value:"Visitor",id:"visitor",level:3}],m={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"behavior-patterns"},"Behavior Patterns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"related to algorithms and the assignment of responsibilities between objects",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"They can be based on both",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"inheritance and composition"))))),(0,r.kt)("li",{parentName:"ul"},"they are all different, no central theme"),(0,r.kt)("li",{parentName:"ul"},"using completely different object oriented mechanisms, so will have some overlap"),(0,r.kt)("li",{parentName:"ul"},"generally most of the behavioral design patterns are unique in their approach"),(0,r.kt)("li",{parentName:"ul"},"it solves a problem in a particular way",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Class: Use inheritance to describe algorithms and flow of control",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Interpreter"),(0,r.kt)("li",{parentName:"ul"},"Template Method"))),(0,r.kt)("li",{parentName:"ul"},"Object: Describe how a group of objects cooperate to perform a task that no single object can carry out alone",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Chain of Responsibility"),(0,r.kt)("li",{parentName:"ul"},"Command"),(0,r.kt)("li",{parentName:"ul"},"Iterator"),(0,r.kt)("li",{parentName:"ul"},"Mediator"),(0,r.kt)("li",{parentName:"ul"},"Memento"),(0,r.kt)("li",{parentName:"ul"},"Observer"),(0,r.kt)("li",{parentName:"ul"},"State"),(0,r.kt)("li",{parentName:"ul"},"Strategy"),(0,r.kt)("li",{parentName:"ul"},"Visitor")))))),(0,r.kt)("h3",{id:"chain-of-responsibility"},(0,r.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/"},"Chain of Responsibility")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Avoid coupling the sender of a request to its receiver by giving more than 1 object a chance to handle the request"),(0,r.kt)("li",{parentName:"ul"},"Chain the receiving objects and pass the request along the chain until an object handles it"),(0,r.kt)("li",{parentName:"ul"},"Deal with object relationships, which can be changed at run time and are more dynamic"),(0,r.kt)("li",{parentName:"ul"},"Almost all patterns use inheritance to some extent")),(0,r.kt)("h3",{id:"command"},(0,r.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/"},"Command")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Encapsulate a request as an object,"),(0,r.kt)("li",{parentName:"ul"},"thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations"),(0,r.kt)("li",{parentName:"ul"},"Deal with object relationships, which can be changed at run time and are more dynamic"),(0,r.kt)("li",{parentName:"ul"},"Almost all patterns use inheritance to some extent"),(0,r.kt)("li",{parentName:"ul"},"Design patterns can address the issue of objects being able to vary tremendously in size and number",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Command pattern: yield objects responsible for only implementing a request on anther object or group of object")))),(0,r.kt)("h3",{id:"interpreter"},(0,r.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Interpreter/"},"Interpreter")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language"),(0,r.kt)("li",{parentName:"ul"},"Deal with relationships between classes & their subclasses (focus on class relationships)"),(0,r.kt)("li",{parentName:"ul"},"relationships are established through inheritance, so they are static-fixed at compile time")),(0,r.kt)("h3",{id:"iterator"},(0,r.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/"},"Iterator")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation"),(0,r.kt)("li",{parentName:"ul"},"Deal with object relationships, which can be changed at run time and are more dynamic"),(0,r.kt)("li",{parentName:"ul"},"Almost all patterns use inheritance to some extent"),(0,r.kt)("li",{parentName:"ul"},"often used with Composite or Visitor")),(0,r.kt)("h3",{id:"mediator"},(0,r.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/"},"Mediator")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Define an object that encapsulates how a set of objects interact"),(0,r.kt)("li",{parentName:"ul"},"Mediator promotes loose coupling by keeping objects from referring to each other explicitly,"),(0,r.kt)("li",{parentName:"ul"},"and it lets you vary their interaction independently"),(0,r.kt)("li",{parentName:"ul"},"Deal with object relationships, which can be changed at run time and are more dynamic"),(0,r.kt)("li",{parentName:"ul"},"Almost all patterns use inheritance to some extent")),(0,r.kt)("h3",{id:"memento"},(0,r.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/"},"Memento")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Without violating encapsulation, capture and externalize an object's internal state so that the object can be restored to this state later"),(0,r.kt)("li",{parentName:"ul"},"Deal with object relationships, which can be changed at run time and are more dynamic"),(0,r.kt)("li",{parentName:"ul"},"Almost all patterns use inheritance to some extent"),(0,r.kt)("li",{parentName:"ul"},"Design patterns will also tell you what not to put in the interfaces",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Memento pattern: describes how to encapsulate & save the internal state of an object to allow object restoration later",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"must define 2 interfaces:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a restricted one that lets clients hold & copy mementos"),(0,r.kt)("li",{parentName:"ul"},"a privileged one that only the original object can use to store & retrieve state in the momento")))))))),(0,r.kt)("h3",{id:"observer"},(0,r.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/"},"Observer")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Define a 1 to many dependency between objects so that when 1 object changes state,"),(0,r.kt)("li",{parentName:"ul"},"all its dependents are notified and updated automatically"),(0,r.kt)("li",{parentName:"ul"},"Deal with object relationships, which can be changed at run time and are more dynamic"),(0,r.kt)("li",{parentName:"ul"},"Almost all patterns use inheritance to some extent")),(0,r.kt)("h3",{id:"state"},(0,r.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/"},"State")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Allow an object to alter its behavior when its internal state changes"),(0,r.kt)("li",{parentName:"ul"},"The object will appear to change its class"),(0,r.kt)("li",{parentName:"ul"},"Deal with object relationships, which can be changed at run time and are more dynamic"),(0,r.kt)("li",{parentName:"ul"},"Almost all patterns use inheritance to some extent"),(0,r.kt)("li",{parentName:"ul"},"Design patterns helps you to identify less-obvious abstractions & the objects that can capture them",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"State pattern represents each state of an entity as an object")))),(0,r.kt)("h3",{id:"strategy"},(0,r.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/"},"Strategy")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Define a family of algorithms, encapsulate each 1, and make them interchangeable"),(0,r.kt)("li",{parentName:"ul"},"Strategy lets the algorithm vary independently from clients that use it"),(0,r.kt)("li",{parentName:"ul"},"Deal with object relationships, which can be changed at run time and are more dynamic"),(0,r.kt)("li",{parentName:"ul"},"Almost all patterns use inheritance to some extent"),(0,r.kt)("li",{parentName:"ul"},"Design patterns helps you to identify less-obvious abstractions & the objects that can capture them",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Strategy pattern describes how to implement interchangeable families of algorithms")))),(0,r.kt)("h3",{id:"template-method"},(0,r.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/"},"Template Method")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Define the skeleton of an algorithm in an operation, deferring some steps to subclasses"),(0,r.kt)("li",{parentName:"ul"},"Template method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure"),(0,r.kt)("li",{parentName:"ul"},"Deal with relationships between classes & their subclasses (focus on class relationships)"),(0,r.kt)("li",{parentName:"ul"},"relationships are established through inheritance, so they are static-fixed at compile time")),(0,r.kt)("h3",{id:"visitor"},(0,r.kt)("a",{parentName:"h3",href:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/"},"Visitor")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Represent an operation to be performed on the elements of an object structure"),(0,r.kt)("li",{parentName:"ul"},"Visitor lets you define a new operation without changing the classes of the elements on which it operates"),(0,r.kt)("li",{parentName:"ul"},"Deal with object relationships, which can be changed at run time and are more dynamic"),(0,r.kt)("li",{parentName:"ul"},"Almost all patterns use inheritance to some extent"),(0,r.kt)("li",{parentName:"ul"},"often used with Iterator or Composite"),(0,r.kt)("li",{parentName:"ul"},"Design patterns can address the issue of objects being able to vary tremendously in size and number",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Visitor pattern: yield objects responsible for only implementing a request on anther object or group of object"))),(0,r.kt)("li",{parentName:"ul"},"Design patterns specify relationships between interfaces, by requiring some classes to have similar interfaces or placing constraints on the interfaces of some classes",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Visitor pattern: visitor interface must reflect all classes of objects that visitors can visit")))))}c.isMDXComponent=!0}}]);