"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[7157],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),l=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(o.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=l(n),m=r,u=g["".concat(o,".").concat(m)]||g[m]||h[m]||i;return n?a.createElement(u,c(c({ref:t},p),{},{components:n})):a.createElement(u,c({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=g;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var l=2;l<i;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},57458:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(83117),r=(n(67294),n(3905));const i={},c="JavaScript",s={unversionedId:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/javascript/readme",id:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/javascript/readme",title:"JavaScript",description:"Violate ISP",source:"@site/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/javascript/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/javascript",slug:"/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/javascript/",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/javascript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/javascript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C# Example",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/cSharp/"},next:{title:"Python Example",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/python/"}},o={},l=[{value:"Violate ISP",id:"violate-isp",level:2},{value:"Pass ISP",id:"pass-isp",level:2}],p={toc:l};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"javascript"},"JavaScript"),(0,r.kt)("h2",{id:"violate-isp"},"Violate ISP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// this violates the interface segregation principle\n// because it is being used by multiple classes that does not requires all of it\nclass Entity {\n  constructor(name, attackDamage, health) {\n    this.name = name;\n    this.attackDamage = attackDamage;\n    this.health = health;\n  }\n\n  move() {\n    console.log(`${this.name} moved`);\n  }\n\n  attack(targetEntity) {\n    console.log(\n      `${this.name} attacked ${targetEntity.name} for ${this.attackDamage} damage`\n    );\n    targetEntity.takeDamage(this.attackDamage);\n  }\n\n  takeDamage(amount) {\n    this.health -= amount;\n    console.log(`${this.name} has ${this.health} health remaining`);\n  }\n}\n\n// passes the interface segregation principle\nclass Character extends Entity {}\n\nclass Wall extends Entity {\n  constructor(name, health) {\n    // violates the interface segregation principle\n    super(name, 0, health);\n  }\n\n  // violates the interface segregation principle\n  move() {\n    return null;\n  }\n\n  // violates the interface segregation principle\n  attack() {\n    return null;\n  }\n}\n\nclass Turret extends Entity {\n  constructor(name, attackDamage) {\n    // violates the interface segregation principle\n    super(name, attackDamage, 0);\n  }\n\n  // violates the interface segregation principle\n  move() {\n    return null;\n  }\n\n  // violates the interface segregation principle\n  takeDamage() {\n    return null;\n  }\n}\n\nconst turret = new Turret("Turret", 5);\nconst character = new Character("Character", 3, 100);\nconst wall = new Wall("Wall", 200);\n\nturret.attack(character);\ncharacter.move();\ncharacter.attack(wall);\n')),(0,r.kt)("h2",{id:"pass-isp"},"Pass ISP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'class Entity {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nconst mover = {\n  move() {\n    console.log(`${this.name} moved`);\n  },\n};\n\nconst attacker = {\n  attack(targetEntity) {\n    console.log(\n      `${this.name} attacked ${targetEntity.name} for ${this.attackDamage} damage`\n    );\n    targetEntity.takeDamage(this.attackDamage);\n  },\n};\n\nconst hasHealth = {\n  takeDamage(amount) {\n    this.health -= amount;\n    console.log(`${this.name} has ${this.health} health remaining`);\n  },\n};\n\nclass Character extends Entity {\n  constructor(name, attackDamage, health) {\n    super(name);\n    this.attackDamage = attackDamage;\n    this.health = health;\n  }\n}\n\nObject.assign(Character.prototype, mover);\nObject.assign(Character.prototype, attacker);\nObject.assign(Character.prototype, hasHealth);\n\nclass Wall extends Entity {\n  constructor(name, health) {\n    super(name);\n    this.health = health;\n  }\n}\n\nObject.assign(Wall.prototype, hasHealth);\n\nclass Turret extends Entity {\n  constructor(name, attackDamage) {\n    super(name);\n    this.attackDamage = attackDamage;\n  }\n}\n\nObject.assign(Turret.prototype, attacker);\n\nconst turret = new Turret("Turret", 5);\nconst character = new Character("Character", 3, 100);\nconst wall = new Wall("Wall", 200);\n\nturret.attack(character);\ncharacter.move();\ncharacter.attack(wall);\n')))}h.isMDXComponent=!0}}]);