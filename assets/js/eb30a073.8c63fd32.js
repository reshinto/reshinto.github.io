"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[91021],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=r.createContext({}),c=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(m.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(t),f=o,u=p["".concat(m,".").concat(f)]||p[f]||d[f]||a;return t?r.createElement(u,i(i({ref:n},l),{},{components:t})):r.createElement(u,i({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},83679:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(83117),o=(t(67294),t(3905));const a={},i="Python Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Command/python/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Command/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Command/python",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Command/python/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/javascript/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/python/example2"}},m={},c=[],l={toc:c};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"python-example"},"Python Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'"""\nCommand Design Pattern\n\nIntent: Turns a request into a stand-alone object that contains all information\nabout the request. This transformation lets you parameterize methods with\ndifferent requests, delay or queue a request\'s execution, and support undoable\noperations.\n"""\n\n\nfrom __future__ import annotations\nfrom abc import ABC, abstractmethod\n\n\nclass Command(ABC):\n    """\n    The Command interface declares a method for executing a command.\n    """\n\n    @abstractmethod\n    def execute(self) -> None:\n        pass\n\n\nclass SimpleCommand(Command):\n    """\n    Some commands can implement simple operations on their own.\n    """\n\n    def __init__(self, payload: str) -> None:\n        self._payload = payload\n\n    def execute(self) -> None:\n        print(f"SimpleCommand: See, I can do simple things like printing"\n              f"({self._payload})")\n\n\nclass ComplexCommand(Command):\n    """\n    However, some commands can delegate more complex operations to other\n    objects, called "receivers."\n    """\n\n    def __init__(self, receiver: Receiver, a: str, b: str) -> None:\n        """\n        Complex commands can accept one or several receiver objects along with\n        any context data via the constructor.\n        """\n\n        self._receiver = receiver\n        self._a = a\n        self._b = b\n\n    def execute(self) -> None:\n        """\n        Commands can delegate to any methods of a receiver.\n        """\n\n        print("ComplexCommand: Complex stuff should be done by a receiver object", end="")\n        self._receiver.do_something(self._a)\n        self._receiver.do_something_else(self._b)\n\n\nclass Receiver:\n    """\n    The Receiver classes contain some important business logic. They know how to\n    perform all kinds of operations, associated with carrying out a request. In\n    fact, any class may serve as a Receiver.\n    """\n\n    def do_something(self, a: str) -> None:\n        print(f"\\nReceiver: Working on ({a}.)", end="")\n\n    def do_something_else(self, b: str) -> None:\n        print(f"\\nReceiver: Also working on ({b}.)", end="")\n\n\nclass Invoker:\n    """\n    The Invoker is associated with one or several commands. It sends a request\n    to the command.\n    """\n\n    _on_start = None\n    _on_finish = None\n\n    """\n    Initialize commands.\n    """\n\n    def set_on_start(self, command: Command):\n        self._on_start = command\n\n    def set_on_finish(self, command: Command):\n        self._on_finish = command\n\n    def do_something_important(self) -> None:\n        """\n        The Invoker does not depend on concrete command or receiver classes. The\n        Invoker passes a request to a receiver indirectly, by executing a\n        command.\n        """\n\n        print("Invoker: Does anybody want something done before I begin?")\n        if isinstance(self._on_start, Command):\n            self._on_start.execute()\n\n        print("Invoker: ...doing something really important...")\n\n        print("Invoker: Does anybody want something done after I finish?")\n        if isinstance(self._on_finish, Command):\n            self._on_finish.execute()\n\n\nif __name__ == "__main__":\n    """\n    The client code can parameterize an invoker with any commands.\n    """\n\n    invoker = Invoker()\n    invoker.set_on_start(SimpleCommand("Say Hi!"))\n    receiver = Receiver()\n    invoker.set_on_finish(ComplexCommand(\n        receiver, "Send email", "Save report"))\n\n    invoker.do_something_important()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Invoker: Does anybody want something done before I begin?\nSimpleCommand: See, I can do simple things like printing (Say Hi!)\nInvoker: ...doing something really important...\nInvoker: Does anybody want something done after I finish?\nComplexCommand: Complex stuff should be done by a receiver object\nReceiver: Working on (Send email.)\nReceiver: Also working on (Save report.)\n")))}d.isMDXComponent=!0}}]);