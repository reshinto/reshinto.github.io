"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[3054],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>p});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),h=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=h(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=h(a),p=r,m=c["".concat(l,".").concat(p)]||c[p]||d[p]||i;return a?n.createElement(m,s(s({ref:t},u),{},{components:a})):n.createElement(m,s({ref:t},u))}));function p(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var h=2;h<i;h++)s[h]=a[h];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2827:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>h});var n=a(7462),r=(a(7294),a(3905));const i={},s="Hashing",o={unversionedId:"interviewPrep/system_design/11Hashing/readme",id:"interviewPrep/system_design/11Hashing/readme",title:"Hashing",description:"- hashing is an action that you can perform to transform an arbitrary piece of data into a fixed size value (typically an integer value)",source:"@site/docs/interviewPrep/system_design/11Hashing/readme.md",sourceDirName:"interviewPrep/system_design/11Hashing",slug:"/interviewPrep/system_design/11Hashing/",permalink:"/docs/interviewPrep/system_design/11Hashing/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/system_design/11Hashing/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Weighted Round Robin Load Balancer Example",permalink:"/docs/interviewPrep/system_design/10LoadBalancers/example/"},next:{title:"Rendezvous Hashing example",permalink:"/docs/interviewPrep/system_design/11Hashing/rendezvousHashingExample/"}},l={},h=[{value:"potentional problem with round robin strategy approach of a load balancer",id:"potentional-problem-with-round-robin-strategy-approach-of-a-load-balancer",level:2},{value:"naive solution via hashing",id:"naive-solution-via-hashing",level:3},{value:"Better solution by using Consistent hashing or Rendezvous hashing",id:"better-solution-by-using-consistent-hashing-or-rendezvous-hashing",level:3},{value:"Terms used",id:"terms-used",level:2},{value:"Hashing function",id:"hashing-function",level:3},{value:"Consistent hashing",id:"consistent-hashing",level:3},{value:"Rendezvous hashing",id:"rendezvous-hashing",level:3},{value:"SHA (Secure Hash Algorithms)",id:"sha-secure-hash-algorithms",level:3}],u={toc:h};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hashing"},"Hashing"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"hashing is an action that you can perform to transform an arbitrary piece of data into a fixed size value (typically an integer value)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"in terms of system design, the arbitrary piece of data can be an IP address, username, or HTTP request, anything that can be hashed or transformed into an integer value")))),(0,r.kt)("h2",{id:"potentional-problem-with-round-robin-strategy-approach-of-a-load-balancer"},"potentional problem with round robin strategy approach of a load balancer"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a client performs a computional heavy request and cache is stored in server a",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if the same client performs the same heavy request but instead got redirected to a different server, the cache is gone and have to be cached again")))),(0,r.kt)("h3",{id:"naive-solution-via-hashing"},"naive solution via hashing"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"first hash the requests that comes into the load balancer",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"then based on the hash value, the request will be redirected to the server located at the hash value"),(0,r.kt)("li",{parentName:"ul"},"by doing so, all request made by the same client will always be redirected to the same server"))),(0,r.kt)("li",{parentName:"ul"},"however, other problems can arise when dealing with large scale distributed systems",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g.: servers can die, or a server is overloaded and requires new servers"),(0,r.kt)("li",{parentName:"ul"},"in the case where a new server is added, or when a server fails",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"we would need to modify the hashing logic to produce different hash values for the server locations",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"however, by doing so, all the clients that were redirected to a specific server would change, causing the servers to compute the cache again"))))))),(0,r.kt)("li",{parentName:"ul"},"therefore, this solution does not work the moment a server fails or a new server is added")),(0,r.kt)("h3",{id:"better-solution-by-using-consistent-hashing-or-rendezvous-hashing"},"Better solution by using Consistent hashing or Rendezvous hashing"),(0,r.kt)("h2",{id:"terms-used"},"Terms used"),(0,r.kt)("h3",{id:"hashing-function"},"Hashing function"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a funtion that takes in a specific data type (such as a string or an identifier)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"and outputs a number"))),(0,r.kt)("li",{parentName:"ul"},"different inputs may have the same output",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"but a good hashing function attempts to mnimize those hashing collisions (equivalent to maximizing uniformity)"))),(0,r.kt)("li",{parentName:"ul"},"a good hashing function will evenly distribute your data values"),(0,r.kt)("li",{parentName:"ul"},"in practice you never write your own hashing function",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"normally use a pre-made industry grade hashing function or hashing algorithm",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g.: MD5, SHA-1, Bcrypt")))))),(0,r.kt)("h3",{id:"consistent-hashing"},"Consistent hashing"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a type of hashing that minimizes the number of keys that need to be remapped when a hash table gets resized"),(0,r.kt)("li",{parentName:"ul"},"it's often used by load balancers to distribute traffic to servers"),(0,r.kt)("li",{parentName:"ul"},"it minimizes the number of requests that get forwarded to different servers when new servers are added or when existing servers are brought down"),(0,r.kt)("li",{parentName:"ul"},"if a server gets removed or is newly added, most of the clients will still be redirected to the same server"),(0,r.kt)("li",{parentName:"ul"},"the same server can also be placed at multiple locations to allow more clients to be redirected to it\n",(0,r.kt)("img",{alt:"consistentHashing",src:a(8086).Z,width:"1258",height:"1138"}))),(0,r.kt)("h3",{id:"rendezvous-hashing"},"Rendezvous hashing"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a type of hashing also coined highest random weight hashing"),(0,r.kt)("li",{parentName:"ul"},"allows for minimal re-distribution of mappings when a server goes down"),(0,r.kt)("li",{parentName:"ul"},"for every client, it will calculate a score or ranks the servers or destinations",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the client would then be associated with the highest score or ranking of the server"),(0,r.kt)("li",{parentName:"ul"},"in the event a server fails, a new calculation of the highest score or ranking of the server will be done and thus be associated to the new server")))),(0,r.kt)("h3",{id:"sha-secure-hash-algorithms"},"SHA (Secure Hash Algorithms)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"is a collection of cryptographic hash functions used in the industry"),(0,r.kt)("li",{parentName:"ul"},"SHA-3 is a popular choice to use in a system these days")))}d.isMDXComponent=!0},8086:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/consistentHashing-1e8514e23beeca79b55eb71393be1403.png"}}]);