"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[5868],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),b=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=b(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=b(n),v=s,h=p["".concat(c,".").concat(v)]||p[v]||l[v]||o;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function v(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var b=2;b<o;b++)a[b]=n[b];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},27717:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>b});var r=n(83117),s=(n(67294),n(3905));const o={},a="TypeScript Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Observer/typescript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Observer/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Observer/typescript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Observer/typescript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/example2"},next:{title:"State",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/"}},c={},b=[],u={toc:b};function l(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Observer Design Pattern\n *\n * Intent: Lets you define a subscription mechanism to notify multiple objects\n * about any events that happen to the object they\'re observing.\n *\n * Note that there\'s a lot of different terms with similar meaning associated\n * with this pattern. Just remember that the Subject is also called the\n * Publisher and the Observer is often called the Subscriber and vice versa.\n * Also the verbs "observe", "listen" or "track" usually mean the same thing.\n */\n\n/**\n * The Subject interface declares a set of methods for managing subscribers.\n */\ninterface Subject {\n  // Attach an observer to the subject.\n  attach(observer: Observer): void;\n\n  // Detach an observer from the subject.\n  detach(observer: Observer): void;\n\n  // Notify all observers about an event.\n  notify(): void;\n}\n\n/**\n * The Subject owns some important state and notifies observers when the state\n * changes.\n */\nclass ConcreteSubject implements Subject {\n  /**\n   * @type {number} For the sake of simplicity, the Subject\'s state, essential\n   * to all subscribers, is stored in this variable.\n   */\n  public state: number;\n\n  /**\n   * @type {Observer[]} List of subscribers. In real life, the list of\n   * subscribers can be stored more comprehensively (categorized by event\n   * type, etc.).\n   */\n  private observers: Observer[] = [];\n\n  /**\n   * The subscription management methods.\n   */\n  public attach(observer: Observer): void {\n    const isExist = this.observers.includes(observer);\n    if (isExist) {\n      return console.log("Subject: Observer has been attached already.");\n    }\n\n    console.log("Subject: Attached an observer.");\n    this.observers.push(observer);\n  }\n\n  public detach(observer: Observer): void {\n    const observerIndex = this.observers.indexOf(observer);\n    if (observerIndex === -1) {\n      return console.log("Subject: Nonexistent observer.");\n    }\n\n    this.observers.splice(observerIndex, 1);\n    console.log("Subject: Detached an observer.");\n  }\n\n  /**\n   * Trigger an update in each subscriber.\n   */\n  public notify(): void {\n    console.log("Subject: Notifying observers...");\n    for (const observer of this.observers) {\n      observer.update(this);\n    }\n  }\n\n  /**\n   * Usually, the subscription logic is only a fraction of what a Subject can\n   * really do. Subjects commonly hold some important business logic, that\n   * triggers a notification method whenever something important is about to\n   * happen (or after it).\n   */\n  public someBusinessLogic(): void {\n    console.log("\\nSubject: I\'m doing something important.");\n    this.state = Math.floor(Math.random() * (10 + 1));\n\n    console.log(`Subject: My state has just changed to: ${this.state}`);\n    this.notify();\n  }\n}\n\n/**\n * The Observer interface declares the update method, used by subjects.\n */\ninterface Observer {\n  // Receive update from subject.\n  update(subject: Subject): void;\n}\n\n/**\n * Concrete Observers react to the updates issued by the Subject they had been\n * attached to.\n */\nclass ConcreteObserverA implements Observer {\n  public update(subject: Subject): void {\n    if (subject instanceof ConcreteSubject && subject.state < 3) {\n      console.log("ConcreteObserverA: Reacted to the event.");\n    }\n  }\n}\n\nclass ConcreteObserverB implements Observer {\n  public update(subject: Subject): void {\n    if (\n      subject instanceof ConcreteSubject &&\n      (subject.state === 0 || subject.state >= 2)\n    ) {\n      console.log("ConcreteObserverB: Reacted to the event.");\n    }\n  }\n}\n\n/**\n * The client code.\n */\n\nconst subject = new ConcreteSubject();\n\nconst observer1 = new ConcreteObserverA();\nsubject.attach(observer1);\n\nconst observer2 = new ConcreteObserverB();\nsubject.attach(observer2);\n\nsubject.someBusinessLogic();\nsubject.someBusinessLogic();\n\nsubject.detach(observer2);\n\nsubject.someBusinessLogic();\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Subject: Attached an observer.\nSubject: Attached an observer.\n\nSubject: I'm doing something important.\nSubject: My state has just changed to: 6\nSubject: Notifying observers...\nConcreteObserverB: Reacted to the event.\n\nSubject: I'm doing something important.\nSubject: My state has just changed to: 1\nSubject: Notifying observers...\nConcreteObserverA: Reacted to the event.\nSubject: Detached an observer.\n\nSubject: I'm doing something important.\nSubject: My state has just changed to: 5\nSubject: Notifying observers...\n")))}l.isMDXComponent=!0}}]);