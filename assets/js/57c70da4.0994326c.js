"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[2402],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>c});var n=t(67294);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=n.createContext({}),d=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},m=function(e){var a=d(e.components);return n.createElement(o.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},s=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),s=d(t),c=l,k=s["".concat(o,".").concat(c)]||s[c]||u[c]||i;return t?n.createElement(k,r(r({ref:a},m),{},{components:t})):n.createElement(k,r({ref:a},m))}));function c(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=s;var p={};for(var o in a)hasOwnProperty.call(a,o)&&(p[o]=a[o]);p.originalType=e,p.mdxType="string"==typeof e?e:l,r[1]=p;for(var d=2;d<i;d++)r[d]=t[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}s.displayName="MDXCreateElement"},15574:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var n=t(87462),l=(t(67294),t(3905));const i={},r="Gradle",p={unversionedId:"Technologies/projectManagementTools/gradle/readme",id:"Technologies/projectManagementTools/gradle/readme",title:"Gradle",description:"- a general purpose build automation tool",source:"@site/docs/Technologies/projectManagementTools/gradle/readme.md",sourceDirName:"Technologies/projectManagementTools/gradle",slug:"/Technologies/projectManagementTools/gradle/",permalink:"/docs/Technologies/projectManagementTools/gradle/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/Technologies/projectManagementTools/gradle/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Apache Maven",permalink:"/docs/Technologies/projectManagementTools/apacheMaven/"},next:{title:"Algorithms",permalink:"/docs/interviewPrep/algorithms_and_techniques/"}},o={},d=[{value:"Installation",id:"installation",level:2},{value:"Basic terminology",id:"basic-terminology",level:2},{value:"Build logic",id:"build-logic",level:2},{value:"File format",id:"file-format",level:2},{value:"Gradle wrapper",id:"gradle-wrapper",level:2},{value:"disadvantages of not using gradle wrapper",id:"disadvantages-of-not-using-gradle-wrapper",level:3},{value:"benefits",id:"benefits",level:3},{value:"terminal command",id:"terminal-command",level:3},{value:"Build file and conventions",id:"build-file-and-conventions",level:2},{value:"Build Execution under the Hood",id:"build-execution-under-the-hood",level:3},{value:"Single project build",id:"single-project-build",level:3},{value:"Multi module build",id:"multi-module-build",level:3},{value:"Settings file in a build",id:"settings-file-in-a-build",level:3},{value:"Properties file in a build",id:"properties-file-in-a-build",level:3},{value:"Defining and configuring a task",id:"defining-and-configuring-a-task",level:2},{value:"Task purpose",id:"task-purpose",level:3},{value:"Ad Hoc Task",id:"ad-hoc-task",level:3},{value:"Task Declaring a type",id:"task-declaring-a-type",level:3},{value:"Task Execution Order",id:"task-execution-order",level:3},{value:"Fined-Gradle Dependency Control",id:"fined-gradle-dependency-control",level:3},{value:"Directed Acyclic Graph (DAG)",id:"directed-acyclic-graph-dag",level:3},{value:"Circular Dependencies (Not allowed)",id:"circular-dependencies-not-allowed",level:4},{value:"Domain Objects in Memory",id:"domain-objects-in-memory",level:4},{value:"import domain objects",id:"import-domain-objects",level:5},{value:"Build lifecycle phases",id:"build-lifecycle-phases",level:2},{value:"Plugins",id:"plugins",level:2},{value:"2 types of plugins",id:"2-types-of-plugins",level:3},{value:"Build a java project",id:"build-a-java-project",level:2},{value:"Using Gradle Java Plugin",id:"using-gradle-java-plugin",level:3},{value:"Dependency Management",id:"dependency-management",level:3},{value:"Dependency management in Java",id:"dependency-management-in-java",level:4},{value:"Declaring a dependency on an external library",id:"declaring-a-dependency-on-an-external-library",level:4},{value:"Dependency tree",id:"dependency-tree",level:4},{value:"Multi-project builds",id:"multi-project-builds",level:4},{value:"Publishing libraries",id:"publishing-libraries",level:4},{value:"Testing a Java Project",id:"testing-a-java-project",level:3},{value:"Declaring JUnit dependencies",id:"declaring-junit-dependencies",level:4},{value:"Building with docker",id:"building-with-docker",level:3}],m={toc:d};function u(e){let{components:a,...t}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"gradle"},"Gradle"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a general purpose build automation tool"),(0,l.kt)("li",{parentName:"ul"},"flexible yet powerful for different use cases",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"building android apps"),(0,l.kt)("li",{parentName:"ul"},"automating ",(0,l.kt)("inlineCode",{parentName:"li"},"Go")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"python")," projects"),(0,l.kt)("li",{parentName:"ul"},"generating documentations"))),(0,l.kt)("li",{parentName:"ul"},"runs on Java Virtual Machine (JVM)"),(0,l.kt)("li",{parentName:"ul"},"build logic defined as instructions in a script"),(0,l.kt)("li",{parentName:"ul"},"plugins can provide predefined functionality"),(0,l.kt)("li",{parentName:"ul"},"tool can be executed from the terminal and IDE"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://docs.gradle.org/current/dsl/org.gradle.api.Project.html"},"Gradle url"))),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"brew install gradle")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"check version",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"gradle -v")))),(0,l.kt)("h2",{id:"basic-terminology"},"Basic terminology"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Project: models a software component"),(0,l.kt)("li",{parentName:"ul"},"Build script: contains automation instructions for a project"),(0,l.kt)("li",{parentName:"ul"},"Task: defines executable automation instructions")),(0,l.kt)("h2",{id:"build-logic"},"Build logic"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"gradle defines a Domain Specific Language (DSL)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"2 options",(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"Groovy DSL"),(0,l.kt)("li",{parentName:"ol"},"Kotlin DSL"))))),(0,l.kt)("li",{parentName:"ul"},"can mix in imperative logic")),(0,l.kt)("h2",{id:"file-format"},"File format"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"using ",(0,l.kt)("inlineCode",{parentName:"p"},"Groovy DSL")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"use the ",(0,l.kt)("inlineCode",{parentName:"p"},".gradle")," extension"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g.: ",(0,l.kt)("inlineCode",{parentName:"li"},"build.gradle")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"print Hello world"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"task")," a method call on an API available to the Gradle build script",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"it is to express that we want to create a task for project"),(0,l.kt)("li",{parentName:"ul"},"string parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"helloWorld")," is the name of the task"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"doLast")," defines the action executed at runtime"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"println")," is a method call provided by Groovy to print the message to standard output")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},'task helloWorld {\n  doLast {\n    println "Hello World"\n  }\n}\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"run file"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"call function not the filename"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"gradle helloWorld"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"output"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"> Task :helloWorld\nHello World\n\nBUILD SUCCESSFUL in 823ms\n1 actionable task: 1 executed\n"))))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"using ",(0,l.kt)("inlineCode",{parentName:"p"},"Kotlin DSL")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"use the ",(0,l.kt)("inlineCode",{parentName:"p"},".gradle.kts")," extension"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g.: ",(0,l.kt)("inlineCode",{parentName:"li"},"build.gradle.kts")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"print Hello world"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},'tasks.create("helloWorld") {\n  doLast {\n    println("Hello World")\n  }\n}\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"run file"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"call function not the filename"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"gradle helloWorld"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"output"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"> Task :helloWorld\nHello World\n\nBUILD SUCCESSFUL in 823ms\n1 actionable task: 1 executed\n")))))))),(0,l.kt)("h2",{id:"gradle-wrapper"},"Gradle wrapper"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"it is a set of files checked into SCM alongside source code"),(0,l.kt)("li",{parentName:"ul"},"standardizes compatible gradle version for a project"),(0,l.kt)("li",{parentName:"ul"},"automatically downloads the gradle distribution with defined version")),(0,l.kt)("h3",{id:"disadvantages-of-not-using-gradle-wrapper"},"disadvantages of not using gradle wrapper"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"gradle API can include breaking changes in between major versions"),(0,l.kt)("li",{parentName:"ul"},"maintaining multiple gradle installations on a developer machine is not convenient")),(0,l.kt)("h3",{id:"benefits"},"benefits"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"developers do not need to install gradle runtime"),(0,l.kt)("li",{parentName:"ul"},"developers can check out project source code and build right away"),(0,l.kt)("li",{parentName:"ul"},"wrapper works the same way on continuous integration servers")),(0,l.kt)("h3",{id:"terminal-command"},"terminal command"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"gradle wrapper")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"creates files and directories",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"gradle directory"),(0,l.kt)("li",{parentName:"ul"},"gradlew"),(0,l.kt)("li",{parentName:"ul"},"gradlew.bat"))),(0,l.kt)("li",{parentName:"ul"},"view properties created",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"cat gradle/wrapper/gradle-wrapper.properties"),(0,l.kt)("ul",{parentName:"blockquote"},(0,l.kt)("li",{parentName:"ul"},"output",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"distributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-7.4.2-bin.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n")))))),(0,l.kt)("li",{parentName:"ul"},"run gradle wrapper instead of gradle on mac",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew helloWorld")))),(0,l.kt)("h2",{id:"build-file-and-conventions"},"Build file and conventions"),(0,l.kt)("h3",{id:"build-execution-under-the-hood"},"Build Execution under the Hood"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"evaluates instructions in build scripts"),(0,l.kt)("li",{parentName:"ul"},"creates and configures tasks"),(0,l.kt)("li",{parentName:"ul"},"executes tasks in correct order")),(0,l.kt)("h3",{id:"single-project-build"},"Single project build"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"src -> build.gradle")),(0,l.kt)("li",{parentName:"ul"},"characteristics",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"resides in root directory of project"),(0,l.kt)("li",{parentName:"ul"},"contains all build logic"),(0,l.kt)("li",{parentName:"ul"},"can become hard to maintain")))),(0,l.kt)("h3",{id:"multi-module-build"},"Multi module build"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"build.gradle -> module -> build.gradle\n             -> module -> build.gradle\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"maintainable, highly cohesive build logic")),(0,l.kt)("h3",{id:"settings-file-in-a-build"},"Settings file in a build"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"build.gradle\nsettings.gradle -> module\n                -> module\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"characteristics"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"resides in root directory of project hierarchy"),(0,l.kt)("li",{parentName:"ul"},"declares participating projects"),(0,l.kt)("li",{parentName:"ul"},"can change defaults",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g.: project name"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Gradle auto derives project name from directory"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"gradle projects")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"output"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"> Task :projects\n\n------------------------------------------------------------\nRoot project 'hello-world'\n------------------------------------------------------------\n\nRoot project 'hello-world'\nNo sub-projects\n\nTo see a list of the tasks of a project, run gradle <project-path>:tasks\nFor example, try running gradle :tasks\n\nBUILD SUCCESSFUL in 1s\n1 actionable task: 1 executed\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"modify project name"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"create ",(0,l.kt)("inlineCode",{parentName:"p"},"settings.gradle")," file with the following contents"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},'rootProject.name = "starter-example"\n')),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"gradle projects"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"output"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"> Task :projects\n\n------------------------------------------------------------\nRoot project 'starter-example'\n------------------------------------------------------------\n\nRoot project 'starter-example'\nNo sub-projects\n\nTo see a list of the tasks of a project, run gradle <project-path>:tasks\nFor example, try running gradle :tasks\n\nBUILD SUCCESSFUL in 1s\n1 actionable task: 1 executed\n")))))))),(0,l.kt)("h3",{id:"properties-file-in-a-build"},"Properties file in a build"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"build.gradle\nsettings.gradle\ngradle.properties\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"characteristics",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"resides in root directory of project hierarchy or gradle user home directory"),(0,l.kt)("li",{parentName:"ul"},"preconfigures runtime behavior"))),(0,l.kt)("li",{parentName:"ul"},"create ",(0,l.kt)("inlineCode",{parentName:"li"},"gradle.properties")," file with the following contents",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"changing log level for a console output to info",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},"org.gradle.logging.level = info\n"))),(0,l.kt)("li",{parentName:"ul"},"declare custom version of project",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},"version = 1.0.0\n"))),(0,l.kt)("li",{parentName:"ul"},"retrieve variable from property",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"in ",(0,l.kt)("inlineCode",{parentName:"li"},"build.gradle")," file",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},'task helloWorld {\n  doLast {\n    println "Hello World, version = " + version\n  }\n}\n'))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gradle helloWorld")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"./gradlew helloWorld"))))),(0,l.kt)("h2",{id:"defining-and-configuring-a-task"},"Defining and configuring a task"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"view all available tasks",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"gradle tasks --all")))),(0,l.kt)("h3",{id:"task-purpose"},"Task purpose"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"defines executable unit of work"),(0,l.kt)("li",{parentName:"ul"},"actions contain logic to be executed runtime"),(0,l.kt)("li",{parentName:"ul"},"general categorization: ad hoc tasks and tasks explicitly declaring a type")),(0,l.kt)("h3",{id:"ad-hoc-task"},"Ad Hoc Task"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Default Task\n    ^\n    | extends\nAd hoc Task\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"characteristics",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"implements one-off, simplistic action code by defining doFirst or doLast"),(0,l.kt)("li",{parentName:"ul"},"automatically extend DefaultTask without having to declare it"))),(0,l.kt)("li",{parentName:"ul"},"the ",(0,l.kt)("inlineCode",{parentName:"li"},"helloWorld")," is an example of an ",(0,l.kt)("inlineCode",{parentName:"li"},"Ad Hock Task"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"it also has no explicity declare type ",(0,l.kt)("inlineCode",{parentName:"li"},"task helloWorld {"))))),(0,l.kt)("h3",{id:"task-declaring-a-type"},"Task Declaring a type"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Copy\n  ^\n  | extends\nTyped Task\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"characteristics"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"explicitly declares type",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g.:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},'task copyFiles(type: Copy) {\n  from "sourceFiles"\n  into "target"\n}\n'))))),(0,l.kt)("li",{parentName:"ul"},"does not necessarily need to define actions as they are already provided by type"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"real copy example"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"in ",(0,l.kt)("inlineCode",{parentName:"li"},"build.gradle")," file",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"check for all ",(0,l.kt)("inlineCode",{parentName:"li"},".bat")," files from current directory and into nested directories"),(0,l.kt)("li",{parentName:"ul"},"then add them into test folder with their respective directories")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},'task copyExample(type: Copy) {\n  from "."\n  into "test"\n  include "**/*bat"\n  includeEmptyDirs = false\n}\n'))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"real copy and zip example"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"in ",(0,l.kt)("inlineCode",{parentName:"p"},"build.gradle")," file"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},'task copyExample(type: Copy) {\n  from "."\n  into "test"\n  include "**/*bat"\n  includeEmptyDirs = false\n}\n\ntask createZip(type: Zip) {\n  from "test"\n  archiveFileName = "docs.zip"\n  destinationDirectory = file("test/dist")\n}\n')),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"need to run each task individually")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"to enable it to run without running each task independently, use ",(0,l.kt)("inlineCode",{parentName:"p"},"dependsOn")," key"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},'task copyExample(type: Copy) {\n  from "."\n  into "test"\n  include "**/*bat"\n  includeEmptyDirs = false\n}\n\ntask createZip(type: Zip) {\n  from "test"\n  archiveFileName = "docs.zip"\n  destinationDirectory = file("test/dist")\n  dependsOn copyExample\n}\n')))))))),(0,l.kt)("h3",{id:"task-execution-order"},"Task Execution Order"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"  dependsOn\nA -> B\n  -> C\n  dependsOn\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"ensures that B and C is executed before A"),(0,l.kt)("li",{parentName:"ul"},"does not explicitly define if B or C is executed first")),(0,l.kt)("h3",{id:"fined-gradle-dependency-control"},"Fined-Gradle Dependency Control"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"  dependsOn\nA -> B\n     | mustRunAfter\n     v\n  -> C\n  dependsOn\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"use ",(0,l.kt)("inlineCode",{parentName:"li"},"mustRunAfter"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"shouldRunAfter"),", or ",(0,l.kt)("inlineCode",{parentName:"li"},"finalizedBy"))),(0,l.kt)("h3",{id:"directed-acyclic-graph-dag"},"Directed Acyclic Graph (DAG)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"node      node\n A    ->   B\n  graph edge\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"at runtime, the gradle buils a directed acyclic graph for tasks in memory",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"thus, runtime will know all the tasks participating in the build and their proper execution order"))),(0,l.kt)("li",{parentName:"ul"},"task is represented as node"),(0,l.kt)("li",{parentName:"ul"},"task dependency is represented as graph edge"),(0,l.kt)("li",{parentName:"ul"},"Gradle does not provide a built-in feature for visualizing the task graph of a project",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"to emulate the task dependencies in action",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"gradle taskname --dry-run"))),(0,l.kt)("li",{parentName:"ul"},"can use the ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/dorongold/gradle-task-tree"},"gradle-task-tree")," to render the tasks as a tree")))),(0,l.kt)("h4",{id:"circular-dependencies-not-allowed"},"Circular Dependencies (Not allowed)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"dependency cycles cannot be formed"),(0,l.kt)("li",{parentName:"ul"},"gradle will fail build if detected"),(0,l.kt)("li",{parentName:"ul"},"e.g.: task A cannot dependsOn task B, while task B cannot dependsOn task A at the same time")),(0,l.kt)("h4",{id:"domain-objects-in-memory"},"Domain Objects in Memory"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"each node represents the DAG in memory"),(0,l.kt)("li",{parentName:"ul"},"tasks are just 1 example of domain object of a build"),(0,l.kt)("li",{parentName:"ul"},"domain objects can be inspected and modified from the build script")),(0,l.kt)("h5",{id:"import-domain-objects"},"import domain objects"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Gradle"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"org.gradle.invocation.Gradle"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"represents invocation of the build"),(0,l.kt)("li",{parentName:"ul"},"every invocation of a greater build is represented by a domain object called ",(0,l.kt)("inlineCode",{parentName:"li"},"Gradle"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"this domain object has knowledge about the project hierarchy in a single project",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"or multi project build provides pointers to the higher level properties of a build"))),(0,l.kt)("li",{parentName:"ul"},"e.g.: the gradle user home directory, the used Gradle version can register callback logic to react to certain events in the build"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Gradle")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"Project"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"org.gradle.api.Project"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"represents a software component and provides API access to object hierarchy"),(0,l.kt)("li",{parentName:"ul"},"it serves as the main entry point of a build"),(0,l.kt)("li",{parentName:"ul"},"provides methods for walking the whole hierarchy of domain objects"),(0,l.kt)("li",{parentName:"ul"},"e.g.: can ask for the reference to the Gradle instance, register new tasks, or get a modified typical environmental properties like the build output directory"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Gradle")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"Project")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"Task"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"org.gradle.api.Task"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"represents unit of work with potential dependencies"),(0,l.kt)("li",{parentName:"ul"},"performs the actual work at runtime"),(0,l.kt)("li",{parentName:"ul"},"from the project, can register as many tasks as you like"),(0,l.kt)("li",{parentName:"ul"},"every task can declare task dependencies"),(0,l.kt)("li",{parentName:"ul"},"in most cases, tasks define at least 1 action"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Gradle")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"Project")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"Task")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"Action"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"org.gradle.api.Action"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"actual work performed during execution phase"),(0,l.kt)("li",{parentName:"ul"},"gradle executes actions in order of declaration"),(0,l.kt)("li",{parentName:"ul"},"can also define doFirst and doLast actions"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"Gradle - Project - Task - Action\n           |\n           v\n        Plugin   org.gradle.api.Plugin\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"provides reusable logic for a project"),(0,l.kt)("li",{parentName:"ul"},"every plugin applied to a project is represented as a plugin domain object"),(0,l.kt)("li",{parentName:"ul"},"a plugin has full access to the project it works on",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"thus can access other domain objects by name or by type and modify them as necessary")))))),(0,l.kt)("h2",{id:"build-lifecycle-phases"},"Build lifecycle phases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"every build performs 3 lifecycle phases")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Initialization Phase"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"evaluates settings file and sets up build"),(0,l.kt)("li",{parentName:"ul"},"file contains the information about the projects that should participate in the build"),(0,l.kt)("li",{parentName:"ul"},"settings file can exist for a single and multi project builds"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Configuration Phase"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"evaluates build scripts and runs configuration logic")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"each project can define a distinct build script but doesn't have to")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"all code in build script will be exercised")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"during configuration phase, task actions are not executed"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"tasks are only configured"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"configuration counts as assigning values to properties or calling task methods exposed by its API")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"make sure that code defined does not necessarily execute expensive logic as it would affect the performance")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"example in ",(0,l.kt)("inlineCode",{parentName:"p"},"build.gradle")," file"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"always outide of ",(0,l.kt)("inlineCode",{parentName:"li"},"doFirst")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"doLast")," actions"),(0,l.kt)("li",{parentName:"ul"},"executed during configuration phase")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},"// configuration code\n\ntask helloWorld {\n  // configuration code\n\n  doFirst {}\n  doLast {}\n}\n"))))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Execution Phase"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"executes task actions in correct order",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"it looks at the directed acyclic graph that was built in memory and executes every task action in the the correct order"))),(0,l.kt)("li",{parentName:"ul"},"example in ",(0,l.kt)("inlineCode",{parentName:"li"},"build.gradle")," file",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"always inside of ",(0,l.kt)("inlineCode",{parentName:"li"},"doFirst")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"doLast")," actions"),(0,l.kt)("li",{parentName:"ul"},"executed during execution phase")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},"task helloWorld {\n  doFirst {\n    // execution code\n  }\n  doLast {\n    // execution code\n  }\n}\n")))))),(0,l.kt)("h2",{id:"plugins"},"Plugins"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"avoid repetitive code"),(0,l.kt)("li",{parentName:"ul"},"make build logic more maintainable"),(0,l.kt)("li",{parentName:"ul"},"provide reusable functionality across projects")),(0,l.kt)("h3",{id:"2-types-of-plugins"},"2 types of plugins"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Script Plugins"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"             includes\nbuild.gradle -> publishing.gradle\n             -> deployment.gradle\n             includes\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"same syntax, just another build script that can be included in the main ",(0,l.kt)("inlineCode",{parentName:"p"},"build.gradle")," file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"primary reason for wanting to use it is to split up build logic and make it more maintainable")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"example"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"create a ",(0,l.kt)("inlineCode",{parentName:"p"},"archiving.gradle")," file"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"add the usual code from ",(0,l.kt)("inlineCode",{parentName:"li"},"build.gradle"))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},'task copyExample(type: Copy) {\n  from "."\n  into "test"\n  include "**/*bat"\n  includeEmptyDirs = false\n}\n\ntask createZip(type: Zip) {\n  from "test"\n  archiveFileName = "docs.zip"\n  destinationDirectory = file("test/dist")\n  dependsOn copyExample\n}\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"create a ",(0,l.kt)("inlineCode",{parentName:"p"},"build.gradle")," file"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"implement script plugin with the ",(0,l.kt)("inlineCode",{parentName:"li"},"apply")," key word")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},'apply from: "archiving.gradle"\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"run file as usual"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"gradle createZip"))))))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Binary Plugins"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"             includes\nbuild.gradle -> gradle core plugin\n             -> community plugin\n             includes\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"implemented as classes")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"bundled as JAR files")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can reuse the functionality across multiple self-contained software projects"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"these software projects usually live in different version control repositories"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"example"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"create a ",(0,l.kt)("inlineCode",{parentName:"p"},"archiving.gradle")," file"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"add the usual code from ",(0,l.kt)("inlineCode",{parentName:"li"},"build.gradle")),(0,l.kt)("li",{parentName:"ul"},"use the ",(0,l.kt)("inlineCode",{parentName:"li"},"apply")," key word"),(0,l.kt)("li",{parentName:"ul"},"delete the ",(0,l.kt)("inlineCode",{parentName:"li"},"archiveFileName")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"destionationDirectory")," as they are provided by the ",(0,l.kt)("inlineCode",{parentName:"li"},"base")," plugin, thus no longer required")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},"// single plugin\napply plugin: \"base\"\n\n// multi plugins\nplugins {\n  id 'java'\n}\n")))))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'   task copyExample(type: Copy) {\n     from "."\n     into "test"\n     include "**/*bat"\n     includeEmptyDirs = false\n   }\n\n   task createZip(type: Zip) {\n     from "test"\n     dependsOn copyExample\n   }\n   ```\n\n - create a `build.gradle` file\n   - implement script plugin with the `apply` key word\n   ```gradle\n   apply from: "archiving.gradle"\n   ```\n - run file as usual\n   > gradle createZip\n')),(0,l.kt)("h2",{id:"build-a-java-project"},"Build a java project"),(0,l.kt)("h3",{id:"using-gradle-java-plugin"},"Using Gradle Java Plugin"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"standard source code directories"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"src/main/java       -> contains the production source code\nsrc/main/resources  -> contains resource files needed at runtime\nsrc/test/java       -> contains test source code\nsrc/test/resources  -> contains resource files needed at test execution time\nbuild.gradle\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"build output directories"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"build/classes       -> contains compiles class files\nbuild/libs          -> contains generated JAR file\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"build.gradle")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},'// basic requirement\nplugins {\n  id \'java\'\n  id \'application\'\n}\n\nversion = "1.0.0"\n\njava {\n  sourceCompatibility = JavaVersion.VERSION_11\n  targetCompatibility = JavaVersion.VERSION_11\n}\n\ntasks.withType(JavaCompile) {\n  //enable compilation in a separate daemon process\n  options.fork = true\n}\n\njar {\n  // use preset jar file name\n  archiveBaseName = "newName"\n}\n\napplication {\n  mainClass = "com.domain.appname.Main"\n}\n\njavadoc {\n  options.header = "appname"\n  options.verbose()  // to print logs\n}\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"run wrapper"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"gradle wrapper"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"src/main/java")," can be compiled using the task ",(0,l.kt)("inlineCode",{parentName:"p"},"compileJava")),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew compileJava --console=verbose"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"copies files from ",(0,l.kt)("inlineCode",{parentName:"p"},"src/main_resources")," into ",(0,l.kt)("inlineCode",{parentName:"p"},"build")," directory using task ",(0,l.kt)("inlineCode",{parentName:"p"},"processResources")),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew processResources --console=verbose"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"combine both ",(0,l.kt)("inlineCode",{parentName:"p"},"compileJava")," task and ",(0,l.kt)("inlineCode",{parentName:"p"},"processResources")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"classes")),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew classes --console=verbose"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"package jar file"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew jar"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"run application"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew run"),(0,l.kt)("ul",{parentName:"blockquote"},(0,l.kt)("li",{parentName:"ul"},'run with args\n./gradlew run --args="add 1 2"')))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"install application to allow running without java"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew installDist"),(0,l.kt)("ul",{parentName:"blockquote"},(0,l.kt)("li",{parentName:"ul"},"run application\n./build/install/appname/bin/appname",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"run with args\n./build/install/appname/bin/appname add 1 2")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"zip application"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"single bundle",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew distZip"))),(0,l.kt)("li",{parentName:"ul"},"multi bundle",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew distZip distTar"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"run ",(0,l.kt)("inlineCode",{parentName:"p"},"javadoc")),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew javadoc"),(0,l.kt)("ul",{parentName:"blockquote"},(0,l.kt)("li",{parentName:"ul"},"output in ",(0,l.kt)("inlineCode",{parentName:"li"},"build/docs/")," directory"),(0,l.kt)("li",{parentName:"ul"},"open docs\nopen build/docs/javadoc/index.html"))))),(0,l.kt)("h3",{id:"dependency-management"},"Dependency Management"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"within gradle project, can define a dependency on libraries in Maven Central or any other binary repository"),(0,l.kt)("li",{parentName:"ul"},"at build time, gradle's dependency management engine downloads its artifacts",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"stores them in the local cache for reuse"),(0,l.kt)("li",{parentName:"ul"},"adds them to the class path of the project"))),(0,l.kt)("li",{parentName:"ul"},"gradle calls the scope of a dependency a configuration",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"can be very specific about the scope of a dependency",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g.: can express that the dependency is only needed at runtime, but not for compilation process"))))),(0,l.kt)("li",{parentName:"ul"},"another type of dependency is ",(0,l.kt)("inlineCode",{parentName:"li"},"project dependency"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"when application logic becomes complex",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"will want to separate it based on functional boundaries, modules, or components"))),(0,l.kt)("li",{parentName:"ul"},"a module, all can use other modules",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"each of it are modeled as a gradle project"),(0,l.kt)("li",{parentName:"ul"},"referred to as ",(0,l.kt)("inlineCode",{parentName:"li"},"multi-project build")))))),(0,l.kt)("li",{parentName:"ul"},"when a project is ready to ship",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"will want to produce a library or distribution"),(0,l.kt)("li",{parentName:"ul"},"common practice to publish those artifacts to a binary repository for consumption by other developers or end users"),(0,l.kt)("li",{parentName:"ul"},"gradle supports publishing java libraries to Maven repositories")))),(0,l.kt)("h4",{id:"dependency-management-in-java"},"Dependency management in Java"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"java ecosystem offers a mature set of reusable functionality"),(0,l.kt)("li",{parentName:"ul"},"the most popular libraries are available on Maven Central",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"it is a centrally hosted binary repository")))),(0,l.kt)("h4",{id:"declaring-a-dependency-on-an-external-library"},"Declaring a dependency on an external library"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"need to know 3 aspects"),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"dependency coordinates which is the Group, Artifact, Version (GAV) you want to consume"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"Group:Artifact:Version\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g.:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"commons-cli:commons-cli:1.4\n"))))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"to consume the dependency, need to declare the repository using the ",(0,l.kt)("inlineCode",{parentName:"p"},"repositories")," method in ",(0,l.kt)("inlineCode",{parentName:"p"},"build.gradle")," file"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},"plugins {\n  id 'java'\n  id 'application'\n}\n\njava {\n  sourceCompatibility = JavaVersion.VERSION_11\n  targetCompatibility = JavaVersion.VERSION_11\n}\n\njar {\n  archiveBaseName = \"newName\"\n}\n\napplication {\n  mainClass = \"com.domain.appname.Main\"\n}\n\n// allows gradle to know where to resolve the dependency from\nrepositories {\n  mavenCentral()\n}\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"define the GAV of the dependency by using the ",(0,l.kt)("inlineCode",{parentName:"p"},"dependencies")," method with ",(0,l.kt)("inlineCode",{parentName:"p"},"implementation")," scope"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"after adding the dependencies, you can import it in the java code")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},'plugins {\n  id \'java\'\n  id \'application\'\n}\n\njava {\n  sourceCompatibility = JavaVersion.VERSION_11\n  targetCompatibility = JavaVersion.VERSION_11\n}\n\njar {\n  archiveBaseName = "newName"\n}\n\napplication {\n  mainClass = "com.domain.appname.Main"\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  implementation "commons-cli:commons-cli:1.4"\n}\n')),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"to test if dependencies are working, install and run them",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"installation",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew installDist"))),(0,l.kt)("li",{parentName:"ul"},"run",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./build/install/appname/bin/appname"),(0,l.kt)("ul",{parentName:"blockquote"},(0,l.kt)("li",{parentName:"ul"},"run with args\n./build/install/appname/bin/appname --operation functionname --value value1 --value2 value2"))))))))))),(0,l.kt)("h4",{id:"dependency-tree"},"Dependency tree"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"over time, the number of dependencies will grow"),(0,l.kt)("li",{parentName:"ul"},"declared dependencies oftentimes pull in transitive dependencies"),(0,l.kt)("li",{parentName:"ul"},"result in a large tree of dependencies to manage"),(0,l.kt)("li",{parentName:"ul"},"check dependency tree",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew dependencies"))),(0,l.kt)("li",{parentName:"ul"},"use ",(0,l.kt)("inlineCode",{parentName:"li"},"dependencyInsight")," task to find out why the dependency is needed and where it is coming from",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew -q dependencyInsight --dependency commons-cli")))),(0,l.kt)("h4",{id:"multi-project-builds"},"Multi-project builds"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"projects with a lot of code easily become hard to maintain")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"breaking up a project into components increases cohesion and makes it more manageable")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"gradle can model each of the components with a project instance, ",(0,l.kt)("inlineCode",{parentName:"p"},"multi-project build"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sample multi-project structure"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"api/src/main/java/com/domainname/appname/Appname.java\napp/src/main/java/com/domainname/appname/Main.java\napp/build.gradle\nbuild.gradle\nsettings.gradle\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"app/build.gradle")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},"plugins {\n  id 'application'\n}\n\napplication {\n  mainClass = 'com.domainname.appname.Main'\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  implementation project(':api')\n  implementation 'commons-cli:commons-cli:1.4'\n}\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"settings.gradle")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},"rootProject.name = 'appname'\n\ninclude ':api', ':app'\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"build.gradle")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},"allprojects {\n  version = '1.0.0'\n}\n\nsubprojects {\n  apply plugin: 'java'\n\n  java {\n    sourceCompatibility = JavaVersion.VERSION_11\n    targetCompatibility = JavaVersion.VERSION_11\n  }\n}\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"check projects taking part of the build using the ",(0,l.kt)("inlineCode",{parentName:"p"},"projects")," task"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew projects"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"compile and copy resources, this will check if build works"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew classes")))))),(0,l.kt)("h4",{id:"publishing-libraries"},"Publishing libraries"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"library needs to be published to a binary repository")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"a published library can be identified by its coordinates (GAV)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"the Maven Publish plugin automates the publishing process")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"api/build.gradle")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"publish to a local folder"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},"plugins {\n  id 'maven-publish'\n}\n\npublishing {\n  publications {\n    maven(MavenPublication) {\n      groupId = 'org.domainname'\n      artifactId = 'appname'\n      from components.java\n    }\n  }\n  repositories {\n    maven {\n      url = \"$rootProject.buildDir/m2repo\"\n    }\n  }\n}\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"publish to a cloud binary repository"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},"plugins {\n  id 'maven-publish'\n}\n\npublishing {\n  publications {\n    maven(MavenPublication) {\n      groupId = 'org.domainname'\n      artifactId = 'appname'\n      from components.java\n    }\n  }\n  repositories {\n    maven {\n      url = 'http://localhost:8082/artifactory/libs-release-local/'\n      credentials {\n        username = 'admin'\n        password = 'admin_123'\n      }\n    }\n  }\n}\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"run ",(0,l.kt)("inlineCode",{parentName:"p"},"publish")," task in the root directory"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"works for multi-project builds",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew publish")))))))),(0,l.kt)("h3",{id:"testing-a-java-project"},"Testing a Java Project"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"JUnit is the established standard test framework in the Java ecosystem"),(0,l.kt)("li",{parentName:"ul"},"importing into code",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java"},"import org.junit.jupiter.api.Test;\n")))),(0,l.kt)("h4",{id:"declaring-junit-dependencies"},"Declaring JUnit dependencies"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Test dependency configurations"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"JUnit dependencies need to be declared with the correct configurations"),(0,l.kt)("li",{parentName:"ul"},"configuration will only work on the test code"),(0,l.kt)("li",{parentName:"ul"},"the dependencies declared with this configuration won't be bundled when shipping the app",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"will use the test runtime instead")))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"testImplementation -> Needed for compilation and text execution\ntestRuntime -> Only needed for test execution\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"example ",(0,l.kt)("inlineCode",{parentName:"p"},"build.gradle")," at root directory"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},"plugins {\n  id 'java'\n  id 'application'\n}\n\nversion = '1.0.0'\n\njava {\n  sourceCompatibility = JavaVersion.VERSION_11\n  targetCompatibility = JavaVersion.VERSION_11\n}\n\napplication {\n  mainClass = 'com.domainname.appname.Main'\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  implementation 'commons-cli:commons-cli:1.4'\n  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'\n  testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.7.0'\n}\n\ntest {\n  useJUnitPlatform()  // basic requirement to work\n\n  testLogging {  // change logging behavior\n    events 'started', 'skipped', 'failed'  // show on console the test events\n    exceptionFormat 'full'  // gives a deeper hint on what is actually wrong\n  }\n}\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"compile tests with ",(0,l.kt)("inlineCode",{parentName:"li"},"compileTestJava")," task",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew compileTestJava"))),(0,l.kt)("li",{parentName:"ul"},"run unit test",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew test"))),(0,l.kt)("li",{parentName:"ul"},"open test report",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"open build/reports/tests/test/index.html"))),(0,l.kt)("li",{parentName:"ul"},"open xml test report",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"open build/test-results/test/TEST-com.linkedinlearning.calculator.CalculatorTest.xml")))))))),(0,l.kt)("h3",{id:"building-with-docker"},"Building with docker"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"build.gradle")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-gradle"},"buildscript {\n  repositories {\n    maven {\n      url \"https://plugins.gradle.org/m2/\"\n    }\n  }\n\n  dependencies {\n    classpath 'com.bmuschko:gradle-docker-plugin:7.3.0'\n  }\n}\n\napply plugin: 'java'\napply plugin: 'application'\napply plugin: 'com.bmuschko.docker-java-application'\n\nimport com.bmuschko.gradle.docker.tasks.container.*\nimport com.bmuschko.gradle.docker.tasks.image.*\n\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n\ngroup = 'com.dockerapp'\nversion = '1.0-SNAPSHOT'\n\nmainClassName = \"com.dockerapp.App\"\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  testImplementation 'junit:junit:4.12'\n}\n\ndocker {\n  javaApplication {\n    baseImage = 'openjdk:latest'\n  }\n}\n\ntask createContainer(type: DockerCreateContainer) {\n  dependsOn dockerBuildImage\n  targetImageId dockerBuildImage.getImageId()\n}\n\ntask startContainer(type: DockerStartContainer) {\n  dependsOn createContainer\n  targetContainerId createContainer.getContainerId()\n}\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"build and run app normally"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew build run"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"build docker image"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew dockerBuildImage"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"create docker container"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew createContainer"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"start docker container"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"./gradlew startContainer"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"check docker output"),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"docker container logs containerId")))))}u.isMDXComponent=!0}}]);