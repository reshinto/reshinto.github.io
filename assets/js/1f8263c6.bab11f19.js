"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8049],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>d});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),m=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=m(e.components);return t.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=m(r),d=a,g=p["".concat(s,".").concat(d)]||p[d]||u[d]||i;return r?t.createElement(g,o(o({ref:n},c),{},{components:r})):t.createElement(g,o({ref:n},c))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var m=2;m<i;m++)o[m]=r[m];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},4251:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var t=r(7462),a=(r(7294),r(3905));const i={},o="Grid Traveler example",l={unversionedId:"interviewPrep/algorithms_and_techniques/dynamic_programming/gridTraveler",id:"interviewPrep/algorithms_and_techniques/dynamic_programming/gridTraveler",title:"Grid Traveler example",description:"- explanation",source:"@site/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/gridTraveler.md",sourceDirName:"interviewPrep/algorithms_and_techniques/dynamic_programming",slug:"/interviewPrep/algorithms_and_techniques/dynamic_programming/gridTraveler",permalink:"/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/gridTraveler",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/gridTraveler.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Fibonacci example",permalink:"/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/fibonacci"},next:{title:"How Sum example",permalink:"/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/howSum"}},s={},m=[{value:"Naive solution",id:"naive-solution",level:2},{value:"Memoization solution",id:"memoization-solution",level:2},{value:"Tabulation solution",id:"tabulation-solution",level:2}],c={toc:m};function u(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"grid-traveler-example"},"Grid Traveler example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Say that you are a traveler on a 2D grid.\nYou begin in the top-left corner and your goal is to travel to the bottom-right corner.\nYou may only move down or right.\n\nIn how many ways can you travel to the goal on a grid with dimensions m * n?\n\nWrite a function "gridTraveler(m, n)" that calculates this.\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"explanation")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Question: Caculate gridTraveler(2, 3)\n\nExplanation: question is asking us in how many ways can you travel from the top left to the bottom right of a 2 by 3 grid?\n\nAnswer: 3\n-------\n|S| | |\n-------\n| | |E|\n-------\n\n1. right, right, down\n2. right, down, right\n3. down, right, right\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"graph display of what goes behind the hood for ",(0,a.kt)("inlineCode",{parentName:"li"},"gridTraveler(2, 3)"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"graph display when m, n is 2, 3, the number of levels for this case is n + m\n\n               2,3                                1\n       /                 \\\n     1,3                 2,2                      * 2\n  /        \\         /         \\\n0,3        1,2      1,2        2,1                * 2\n           /  \\     /  \\       /  \\\n         0,2  1,1  0,2  1,1  1,1  0,0             * 2\n\nparent = left child + right child\ngo from bottom up\n\neach m,n that contains value 0 will return the value of 0\neach m,n that does not contains value of 0 and contains value of 1 will return the value of 1\nvalue of both child will be added and be returned to the parent\nthis goes on up the tree to give the final value of 3\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"0 ways to travel")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"gridTraveler(0, 0) -> 0 ways to travel as rows and columns are missing\ngridTraveler(0, n) -> 0 ways to travel as rows are missing\ngradTraveler(n, 0) -> 0 ways to travel as columns are missing\n")),(0,a.kt)("h2",{id:"naive-solution"},"Naive solution"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"time complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(2^(n + m))"),", which is reduced to ",(0,a.kt)("inlineCode",{parentName:"li"},"O(2^n)")),(0,a.kt)("li",{parentName:"ul"},"space complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n + m)"),", which is reduced to ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const gridTraveler = (m, n) => {\n  if (m === 1 && n === 1) return 1;\n  if (m === 0 || n === 0) return 0;\n  return gridTraveler(m - 1, n) + gridTraveler(m, n - 1);\n};\n\nconsole.log(gridTraveler(1, 1)); // 1\nconsole.log(gridTraveler(2, 3)); // 3\nconsole.log(gridTraveler(3, 2)); // 3\nconsole.log(gridTraveler(3, 3)); // 6\nconsole.log(gridTraveler(18, 18)); // 2333606220\n")),(0,a.kt)("h2",{id:"memoization-solution"},"Memoization solution"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"time complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(m * n)")),(0,a.kt)("li",{parentName:"ul"},"space complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n + m)"),", which is reduced to ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const gridTraveler = (m, n, memo = {}) => {\n  const key = `${m},${n}`;\n  if (key in memo) return memo[key];\n  if (m === 1 && n === 1) return 1;\n  if (m === 0 || n === 0) return 0;\n  memo[key] = gridTraveler(m - 1, n, memo) + gridTraveler(m, n - 1, memo);\n  return memo[key];\n};\n\nconsole.log(gridTraveler(1, 1)); // 1\nconsole.log(gridTraveler(2, 3)); // 3\nconsole.log(gridTraveler(3, 2)); // 3\nconsole.log(gridTraveler(3, 3)); // 6\nconsole.log(gridTraveler(18, 18)); // 2333606220\n")),(0,a.kt)("h2",{id:"tabulation-solution"},"Tabulation solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"gridTraveler(2, 3) -> 3\n\nstart by forming a table\n   0 1 2 3\n  ---------\n0 | | | | |\n  ---------\n1 | | | | |\n  ---------\n2 | | | | |\n  ---------\n\nnext set all initial values as 0\n   0 1 2 3\n  ---------\n0 |0|0|0|0|\n  ---------\n1 |0|0|0|0|\n  ---------\n2 |0|0|0|0|\n  ---------\n\nnext set all value to 1 for index 1, 1\n   0 1 2 3\n  ---------\n0 |0|0|0|0|\n  ---------\n1 |0|1|0|0|\n  ---------\n2 |0|0|0|0|\n  ---------\n\nduring iteration, when current index is at 1, 1, add current value to index 1, 2 on the right, and index 2, 1 on the bottom\n   0 1 2 3\n  ---------\n0 |0|0|0|0|\n  ---------\n1 |0|1|1|0|\n  ---------\n2 |0|1|0|0|\n  ---------\n\nfollow the same step as before\n   0 1 2 3\n  ---------\n0 |0|0|0|0|\n  ---------\n1 |0|1|1|1|\n  ---------\n2 |0|1|1|0|\n  ---------\n\nfollow the same step as before, except that index 4, 1 is out of range, thus ignore\n   0 1 2 3\n  ---------\n0 |0|0|0|0|\n  ---------\n1 |0|1|1|1|\n  ---------\n2 |0|1|1|1|\n  ---------\n\nfollow the same step as before, except that index 0, 3 is out of range, thus ignore\n   0 1 2 3\n  ---------\n0 |0|0|0|0|\n  ---------\n1 |0|1|1|1|\n  ---------\n2 |0|1|1|1|\n  ---------\n\nfollow the same step as before, except that index 1, 3 is out of range, thus ignore\n   0 1 2 3\n  ---------\n0 |0|0|0|0|\n  ---------\n1 |0|1|1|1|\n  ---------\n2 |0|1|2|1|\n  ---------\n\nfollow the same step as before, except that index 2, 3 is out of range, thus ignore\n   0 1 2 3\n  ---------\n0 |0|0|0|0|\n  ---------\n1 |0|1|1|1|\n  ---------\n2 |0|1|2|3|\n  ---------\n\ncomplete, index 3, 3 and index 4, 2 is out of range, thus ignore\n   0 1 2 3\n  ---------\n0 |0|0|0|0|\n  ---------\n1 |0|1|1|1|\n  ---------\n2 |0|1|2|3|\n  ---------\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"time complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(m * n)")),(0,a.kt)("li",{parentName:"ul"},"space complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n * m)"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const gridTraveler = (m, n) => {\n  const table = Array(m + 1)\n    .fill()\n    .map(() => Array(n + 1).fill(0));\n  table[1][1] = 1;\n\n  for (let i = 0; i <= m; i++) {\n    for (let j = 0; j <= n; j++) {\n      const current = table[i][j];\n      if (j + 1 <= n) table[i][j + 1] += current;\n      if (i + 1 <= m) table[i + 1][j] += current;\n    }\n  }\n  return table[m][n];\n};\n\nconsole.log(gridTraveler(1, 1)); // 1\nconsole.log(gridTraveler(2, 3)); // 3\nconsole.log(gridTraveler(3, 2)); // 3\nconsole.log(gridTraveler(3, 3)); // 6\nconsole.log(gridTraveler(18, 18)); // 2333606220\n")))}u.isMDXComponent=!0}}]);