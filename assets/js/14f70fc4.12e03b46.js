"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[3354],{3905:(e,r,n)=>{n.d(r,{Zo:()=>l,kt:()=>d});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=t.createContext({}),p=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},l=function(e){var r=p(e.components);return t.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},y=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),y=p(n),d=a,g=y["".concat(c,".").concat(d)]||y[d]||u[d]||i;return n?t.createElement(g,o(o({ref:r},l),{},{components:n})):t.createElement(g,o({ref:r},l))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=y;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}y.displayName="MDXCreateElement"},7248:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var t=n(7462),a=(n(7294),n(3905));const i={},o="Caesar Cipher Encryptor",s={unversionedId:"interviewPrep/codingTests/easy/strings/caesarCipherEncryptor",id:"interviewPrep/codingTests/easy/strings/caesarCipherEncryptor",title:"Caesar Cipher Encryptor",description:"Given a non-empty string of lowercase letters and a non-negative integer",source:"@site/docs/interviewPrep/codingTests/easy/strings/caesarCipherEncryptor.md",sourceDirName:"interviewPrep/codingTests/easy/strings",slug:"/interviewPrep/codingTests/easy/strings/caesarCipherEncryptor",permalink:"/docs/interviewPrep/codingTests/easy/strings/caesarCipherEncryptor",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/codingTests/easy/strings/caesarCipherEncryptor.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Selection Sort",permalink:"/docs/interviewPrep/codingTests/easy/sorting/selectionSort"},next:{title:"Generate Document",permalink:"/docs/interviewPrep/codingTests/easy/strings/generateDocument"}},c={},p=[],l={toc:p};function u(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"caesar-cipher-encryptor"},"Caesar Cipher Encryptor"),(0,a.kt)("p",null,"Given a non-empty string of lowercase letters and a non-negative integer\nrepresenting a key, write a function that returns a new string obtained by\nshifting every letter in the input string by k positions in the alphabet,\nwhere k is the key."),(0,a.kt)("p",null,'Note that letters should "wrap" around the alphabet; in other words, the\nletter z shifted by one returns the letter a'),(0,a.kt)("p",null,"Sample Input\n",(0,a.kt)("inlineCode",{parentName:"p"},'string = "xyz"'),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"key = 2"),"\nSample Output\nzab"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# solution 1\ndef caesarCipherEncryptor(string, key):\n  # Write your code here.\n  aValue = ord("a")\n  zValue = ord("z")\n  newStr = []\n  for i in range(len(string)):\n    currentValue = ord(string[i]) + key\n    while currentValue > zValue:\n      currentValue = currentValue - zValue + aValue - 1\n    newStr.append(chr(currentValue))\n  return "".join(newStr)\n\n\n# solution 2\ndef caesarCipherEncryptor(string, key):\n  # Write your code here.\n  aValue = ord("a")\n  zValue = ord("z")\n  newStr = []\n  newKey = key % 26\n  for i in range(len(string)):\n    currentValue = ord(string[i]) + newKey\n    if currentValue > zValue:\n      newStr.append(chr(currentValue - zValue + aValue - 1))\n    else:\n      newStr.append(chr(currentValue))\n  return "".join(newStr)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'function caesarCipherEncryptor(string, key) {\n  // Write your code here.\n  const aValue = "a".charCodeAt();\n  const zValue = "z".charCodeAt();\n  const newKey = key % 26;\n  const newStr = [];\n  for (let i = 0; i < string.length; i++) {\n    const currentValue = string[i].charCodeAt(0) + newKey;\n    if (currentValue > zValue) {\n      newStr.push(String.fromCharCode(currentValue - zValue + aValue - 1));\n    } else {\n      newStr.push(String.fromCharCode(currentValue));\n    }\n  }\n  return newStr.join("");\n}\n')))}u.isMDXComponent=!0}}]);