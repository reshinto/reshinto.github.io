"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[69078],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>u});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function _(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?_(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):_(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},_=Object.keys(t);for(r=0;r<_.length;r++)n=_[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var _=Object.getOwnPropertySymbols(t);for(r=0;r<_.length;r++)n=_[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),c=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},l=function(t){var e=c(t.components);return r.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,_=t.originalType,s=t.parentName,l=o(t,["components","mdxType","originalType","parentName"]),d=c(n),u=a,m=d["".concat(s,".").concat(u)]||d[u]||p[u]||_;return n?r.createElement(m,i(i({ref:e},l),{},{components:n})):r.createElement(m,i({ref:e},l))}));function u(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var _=n.length,i=new Array(_);i[0]=d;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:a,i[1]=o;for(var c=2;c<_;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},74755:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>_,metadata:()=>o,toc:()=>c});var r=n(83117),a=(n(67294),n(3905));const _={},i="C++ Example",o={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/cPlusPlus/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Iterator/cPlusPlus",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Iterator/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Iterator",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Iterator/cSharp/"}},s={},c=[],l={toc:c};function p(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-example"},"C++ Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'/**\n * Iterator Design Pattern\n *\n * Intent: Lets you traverse elements of a collection without exposing its\n * underlying representation (list, stack, tree, etc.).\n */\n\n#include <iostream>\n#include <string>\n#include <vector>\n\n/**\n * C++ has its own implementation of iterator that works with a different\n * generics containers defined by the standard library.\n */\n\ntemplate <typename T, typename U>\nclass Iterator {\n public:\n  typedef typename std::vector<T>::iterator iter_type;\n  Iterator(U *p_data, bool reverse = false) : m_p_data_(p_data) {\n    m_it_ = m_p_data_->m_data_.begin();\n  }\n\n  void First() {\n    m_it_ = m_p_data_->m_data_.begin();\n  }\n\n  void Next() {\n    m_it_++;\n  }\n\n  bool IsDone() {\n    return (m_it_ == m_p_data_->m_data_.end());\n  }\n\n  iter_type Current() {\n    return m_it_;\n  }\n\n private:\n  U *m_p_data_;\n  iter_type m_it_;\n};\n\n/**\n * Generic Collections/Containers provides one or several methods for retrieving\n * fresh iterator instances, compatible with the collection class.\n */\n\ntemplate <class T>\nclass Container {\n  friend class Iterator<T, Container>;\n\n public:\n  void Add(T a) {\n    m_data_.push_back(a);\n  }\n\n  Iterator<T, Container> *CreateIterator() {\n    return new Iterator<T, Container>(this);\n  }\n\n private:\n  std::vector<T> m_data_;\n};\n\nclass Data {\n public:\n  Data(int a = 0) : m_data_(a) {}\n\n  void set_data(int a) {\n    m_data_ = a;\n  }\n\n  int data() {\n    return m_data_;\n  }\n\n private:\n  int m_data_;\n};\n\n/**\n * The client code may or may not know about the Concrete Iterator or Collection\n * classes, for this implementation the container is generic so you can used\n * with an int or with a custom class.\n */\nvoid ClientCode() {\n  std::cout << "________________Iterator with int______________________________________" << std::endl;\n  Container<int> cont;\n\n  for (int i = 0; i < 10; i++) {\n    cont.Add(i);\n  }\n\n  Iterator<int, Container<int>> *it = cont.CreateIterator();\n  for (it->First(); !it->IsDone(); it->Next()) {\n    std::cout << *it->Current() << std::endl;\n  }\n\n  Container<Data> cont2;\n  Data a(100), b(1000), c(10000);\n  cont2.Add(a);\n  cont2.Add(b);\n  cont2.Add(c);\n\n  std::cout << "________________Iterator with custom Class______________________________" << std::endl;\n  Iterator<Data, Container<Data>> *it2 = cont2.CreateIterator();\n  for (it2->First(); !it2->IsDone(); it2->Next()) {\n    std::cout << it2->Current()->data() << std::endl;\n  }\n  delete it;\n  delete it2;\n}\n\nint main() {\n  ClientCode();\n  return 0;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"________________Iterator with int______________________________________\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n________________Iterator with custom Class______________________________\n100\n1000\n10000\n")))}p.isMDXComponent=!0}}]);