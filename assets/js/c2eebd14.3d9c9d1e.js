"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[80176],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),h=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=h(e.components);return i.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=h(n),u=a,d=p["".concat(l,".").concat(u)]||p[u]||m[u]||s;return n?i.createElement(d,r(r({ref:t},c),{},{components:n})):i.createElement(d,r({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var h=2;h<s;h++)r[h]=n[h];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},88908:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>h});var i=n(83117),a=(n(67294),n(3905));const s={},r="Consistent Hashing",o={unversionedId:"interviewPrep/system_design/consistent_hashing",id:"interviewPrep/system_design/consistent_hashing",title:"Consistent Hashing",description:"- Distributed Hash Table (DHT) is one of the fundamental components used in distributed scalable systems",source:"@site/docs/interviewPrep/system_design/consistent_hashing.md",sourceDirName:"interviewPrep/system_design",slug:"/interviewPrep/system_design/consistent_hashing",permalink:"/docs/interviewPrep/system_design/consistent_hashing",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/system_design/consistent_hashing.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OSI (Open System Interconnection) Model",permalink:"/docs/interviewPrep/system_design/OSI_model"},next:{title:"Distributed System Characteristics",permalink:"/docs/interviewPrep/system_design/distributed_systems_key_characteristics"}},l={},h=[{value:"What is Consistent Hashing?",id:"what-is-consistent-hashing",level:2},{value:"How does it work?",id:"how-does-it-work",level:2}],c={toc:h};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"consistent-hashing"},"Consistent Hashing"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Distributed Hash Table (DHT) is one of the fundamental components used in distributed scalable systems"),(0,a.kt)("li",{parentName:"ul"},"Hash Tables need a key, a value, and a hash function",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"where hash function maps the key to a location where the value is stored",(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"index = hash_function(key)"))))),(0,a.kt)("li",{parentName:"ul"},"Suppose we are designing a distributed caching system",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Given \u2018n\u2019 cache servers, an intuitive hash function would be \u2018key % n\u2019",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"It is simple and commonly used",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"But has 2 major drawbacks:",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"It is NOT horizontally scalable",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Whenever a new cache host is added to the system, all existing mappings are broken"),(0,a.kt)("li",{parentName:"ul"},"It will be a pain point in maintenance if the caching system contains lots of data"),(0,a.kt)("li",{parentName:"ul"},"Practically, it becomes difficult to schedule a downtime to update all caching mappings"))),(0,a.kt)("li",{parentName:"ol"},"It may NOT be load balanced, especially for non-uniformly distributed data",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"In practice, it can be easily assumed that the data will not be distributed uniformly"),(0,a.kt)("li",{parentName:"ul"},"For the caching system, it translates into some caches",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"becoming hot and saturated while the others idle and are almost empty")))))),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"In such situations, consistent hashing is a good way to improve the caching system")))))))))),(0,a.kt)("h2",{id:"what-is-consistent-hashing"},"What is Consistent Hashing?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Consistent hashing is a very useful strategy for distributed caching system and DHTs"),(0,a.kt)("li",{parentName:"ul"},"It allows us to distribute data across a cluster in such a way",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"that will minimize reorganization when nodes are added or removed"),(0,a.kt)("li",{parentName:"ul"},"Hence, the caching system will be easier to scale up or scale down"))),(0,a.kt)("li",{parentName:"ul"},"In Consistent Hashing, when the hash table is resized",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"(e.g. a new cache host is added to the system)"),(0,a.kt)("li",{parentName:"ul"},"only \u2018k/n\u2019 keys need to be remapped where \u2018k\u2019 is the total number of keys",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"and \u2018n\u2019 is the total number of servers"))),(0,a.kt)("li",{parentName:"ul"},"Recall that in a caching system using the \u2018mod\u2019 as the hash function, all keys need to be remapped"))),(0,a.kt)("li",{parentName:"ul"},"In Consistent Hashing, objects are mapped to the same host if possible",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"When a host is removed from the system, the objects on that host are shared by other hosts"),(0,a.kt)("li",{parentName:"ul"},"when a new host is added, it takes its share from a few hosts without touching other\u2019s shares")))),(0,a.kt)("h2",{id:"how-does-it-work"},"How does it work?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"As a typical hash function, consistent hashing maps a key to an integer"),(0,a.kt)("li",{parentName:"ul"},"Suppose the output of the hash function is in the range of [0, 256)"),(0,a.kt)("li",{parentName:"ul"},"Imagine that the integers in the range are placed on a ring such that the values are wrapped around"),(0,a.kt)("li",{parentName:"ul"},"Here\u2019s how consistent hashing works:",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Given a list of cache servers, hash them to integers in the range"),(0,a.kt)("li",{parentName:"ol"},"To map a key to a server\n",(0,a.kt)("em",{parentName:"li"}," Hash it to a single integer\n")," Move clockwise on the ring until finding the first cache it encounters ","*"," That cache is the one that contains the key.\n",(0,a.kt)("img",{parentName:"li",src:"https://github.com/reshinto/Basic_technologies_revision/raw/master/interviewPrep/system_design/images/consistentHashingPt1.png",alt:"alt text",title:"Consistent Hashing pt1"}),(0,a.kt)("img",{parentName:"li",src:"https://github.com/reshinto/Basic_technologies_revision/raw/master/interviewPrep/system_design/images/consistentHashingPt2.png",alt:"alt text",title:"Consistent Hashing pt2"}),(0,a.kt)("img",{parentName:"li",src:"https://github.com/reshinto/Basic_technologies_revision/raw/master/interviewPrep/system_design/images/consistentHashingPt3.png",alt:"alt text",title:"Consistent Hashing pt3"}),(0,a.kt)("img",{parentName:"li",src:"https://github.com/reshinto/Basic_technologies_revision/raw/master/interviewPrep/system_design/images/consistentHashingPt4.png",alt:"alt text",title:"Consistent Hashing pt4"}),(0,a.kt)("img",{parentName:"li",src:"https://github.com/reshinto/Basic_technologies_revision/raw/master/interviewPrep/system_design/images/consistentHashingPt5.png",alt:"alt text",title:"Consistent Hashing pt5"}))))))}m.isMDXComponent=!0}}]);