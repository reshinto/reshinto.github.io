"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[92423],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7182:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const i={},l="Interface Segregation Principle (ISP)",o={unversionedId:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/readme",id:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/readme",title:"Interface Segregation Principle (ISP)",description:"- no client should be forced to depend on methods it does not use",source:"@site/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple",slug:"/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TypeScript",permalink:"/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/typescript/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/cSharp/"}},s={},p=[{value:"Purpose",id:"purpose",level:2},{value:"Example",id:"example",level:2},{value:"Summary",id:"summary",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interface-segregation-principle-isp"},"Interface Segregation Principle (ISP)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"no client should be forced to depend on methods it does not use"),(0,r.kt)("li",{parentName:"ul"},"this helps to split interfaces that are very large into smaller and more specific ones",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"so that clients will only have to know about the methods that are of interest to them",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"also referred to as ",(0,r.kt)("inlineCode",{parentName:"li"},"role interfaces")))))),(0,r.kt)("li",{parentName:"ul"},"the goal of this principle is to reduce the side effects of using larger interfaces by breaking application interfaces into smaller ones",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It is like the Single Responsibility Principle, where each class or interface serves a single purpose"))),(0,r.kt)("li",{parentName:"ul"},"Precise application design and correct abstraction is the key behind the Interface Segregation Principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Though it will take more time and effort in the design phase of an application and might increase the code complexity, in the end, we get a flexible code")))),(0,r.kt)("h2",{id:"purpose"},"Purpose"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the purpose is to",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"keep a system decoupled"),(0,r.kt)("li",{parentName:"ul"},"allow easy refactor, change, and redeploy")))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We have ",(0,r.kt)("inlineCode",{parentName:"li"},"Staff")," interface and class ",(0,r.kt)("inlineCode",{parentName:"li"},"Lecturer")," that implements ",(0,r.kt)("inlineCode",{parentName:"li"},"Staff")," interface",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Thus, it does not violate the principle"),(0,r.kt)("li",{parentName:"ul"},"For simplicity, let us ignore the actual business implementation of these methods")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Staff {\n  name: string;\n  salary: number;\n  adjustSalary(): number;\n}\n\nclass Lecturer implements Staff {\n  constructor(public name: string, public salary: number) {}\n\n  adjustSalary() {\n    return this.salary * 0.9;\n  }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Now, as we move ahead in time, and more features come in, there is a need to add management staff, so we created ",(0,r.kt)("inlineCode",{parentName:"li"},"Administrator")," class"),(0,r.kt)("li",{parentName:"ul"},"Everything looks good so far"),(0,r.kt)("li",{parentName:"ul"},"But what if we need to extend ",(0,r.kt)("inlineCode",{parentName:"li"},"Lecturer")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Administrator")," classes behavior?",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Let us say that we want to add ",(0,r.kt)("inlineCode",{parentName:"li"},"giveLecture()")," method to ",(0,r.kt)("inlineCode",{parentName:"li"},"Lecturer")," class and ",(0,r.kt)("inlineCode",{parentName:"li"},"arrangeMeeting()")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Administrator")),(0,r.kt)("li",{parentName:"ul"},"In this case we need to extend ",(0,r.kt)("inlineCode",{parentName:"li"},"Staff")," interface with those methods")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Staff {\n  name: string;\n  salary: number;\n  adjustSalary(): number;\n  giveLecture(): void;\n  arrangeMeeting(): void;\n}\n\nclass Lecturer implements Staff {\n  constructor(public name: string, public salary: number) {}\n\n  adjustSalary() {\n    return this.salary * 0.9;\n  }\n  giveLecture() {}\n  arrangeMeeting() {}\n}\n\nclass Administrator implements Staff {\n  constructor(public name: string, public salary: number) {}\n\n  adjustSalary() {\n    return this.salary * 0.75;\n  }\n  arrangeMeeting() {}\n  giveLecture() {}\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Now, since the ",(0,r.kt)("inlineCode",{parentName:"li"},"Staff")," interface has changed and more methods were added, all the implementing classes now must implement the new methods"),(0,r.kt)("li",{parentName:"ul"},"The problem is, implementing them is unwanted and could lead to many side effects"),(0,r.kt)("li",{parentName:"ul"},"Here, the ",(0,r.kt)("inlineCode",{parentName:"li"},"Administrator")," implementation class must implement the ",(0,r.kt)("inlineCode",{parentName:"li"},"giveLecture()")," method without any actual need for this"),(0,r.kt)("li",{parentName:"ul"},"And so, the principle is violated"),(0,r.kt)("li",{parentName:"ul"},"Let us break up the interfaces and apply the Interface Segregation Principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"As you can see, we have created two more interfaces ",(0,r.kt)("inlineCode",{parentName:"li"},"AcademicStaff")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"ManagerStaff")," that extend the base Staff interface"),(0,r.kt)("li",{parentName:"ul"},"Each of the new interfaces contain only those methods that they need"),(0,r.kt)("li",{parentName:"ul"},"Therefore, Lecturer class now implements ",(0,r.kt)("inlineCode",{parentName:"li"},"AcademicStaff")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Administrator")," class ",(0,r.kt)("inlineCode",{parentName:"li"},"AcademicStaff")," interface")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Staff {\n  name: string;\n  salary: number;\n  adjustSalary(): number;\n}\n\ninterface AcademicStaff extends Staff {\n  giveLecture(): void;\n}\n\ninterface ManagerStaff extends Staff {\n  arrangeMeeting(): void;\n}\n\nclass Lecturer implements AcademicStaff {\n  constructor(public name: string, public salary: number) {}\n\n  adjustSalary() {\n    return this.salary * 0.9;\n  }\n  giveLecture() {}\n}\n\nclass Administrator implements ManagerStaff {\n  constructor(public name: string, public salary: number) {}\n\n  adjustSalary() {\n    return this.salary * 0.75;\n  }\n  arrangeMeeting() {}\n}\n")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"essence of ISP"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"design interfaces so that the entities that implement them do not depend on methods they do not use",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the ISP helps to design the interfaces so that changes only affect those modules whose functionality they actually affect"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"benefits of DIP"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"reduced coupling of modules",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"high-level modules should not depend on low-level modules"),(0,r.kt)("li",{parentName:"ul"},"both types must depend on abstractions"))),(0,r.kt)("li",{parentName:"ul"},"increased module cohesion",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"according to the principle, modules should not directly depend on other modules, but on abstractions"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"As you can see fat interfaces lead to inadvertent coupling between classes, and you should avoid them"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When designing interfaces, you should always ask yourself the question ",(0,r.kt)("strong",{parentName:"li"},"Do really need all the methods on this interface I'm using? If not, how can I break them into smaller interfaces?")),(0,r.kt)("li",{parentName:"ul"},"Treat interface segregation with certain pragmatism and use common sense")))))}m.isMDXComponent=!0}}]);