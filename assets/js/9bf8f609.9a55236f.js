"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[3633],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),b=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=b(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=b(n),v=s,h=p["".concat(c,".").concat(v)]||p[v]||l[v]||a;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function v(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var b=2;b<a;b++)o[b]=n[b];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},91086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>b});var r=n(83117),s=(n(67294),n(3905));const a={},o="Swift Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/readme",title:"Swift Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Observer/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/python/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/example2"}},c={},b=[],u={toc:b};function l(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"swift-example"},"Swift Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-swift"},'/// Observer Design Pattern\n///\n/// Intent: Lets you define a subscription mechanism to notify multiple objects\n/// about any events that happen to the object they\'re observing.\n///\n/// Note that there\'s a lot of different terms with similar meaning associated\n/// with this pattern. Just remember that the Subject is also called the\n/// Publisher and the Observer is often called the Subscriber and vice versa.\n/// Also the verbs "observe", "listen" or "track" usually mean the same thing.\n///\n/// Swift language has multiple ways of implementing the Observer pattern:\n///\n/// - KVO. Here is an example of how to implement it in a dozen lines of code:\n/// https://www.objc.io/blog/2018/04/24/bindings-with-kvo-and-keypaths/\n///\n/// - NotificationCenter\n/// https://developer.apple.com/documentation/foundation/notificationcenter\n///\n/// - RxSwift:\n/// https://github.com/ReactiveX/RxSwift\n///\n/// In this example we\'ll implement a custom observer from scratch.\n\nimport XCTest\n\n/// The Subject owns some important state and notifies observers when the state\n/// changes.\nclass Subject {\n\n    /// For the sake of simplicity, the Subject\'s state, essential to all\n    /// subscribers, is stored in this variable.\n    var state: Int = { return Int(arc4random_uniform(10)) }()\n\n    /// @var array List of subscribers. In real life, the list of subscribers\n    /// can be stored more comprehensively (categorized by event type, etc.).\n    private lazy var observers = [Observer]()\n\n    /// The subscription management methods.\n    func attach(_ observer: Observer) {\n        print("Subject: Attached an observer.\\n")\n        observers.append(observer)\n    }\n\n    func detach(_ observer: Observer) {\n        if let idx = observers.firstIndex(where: { $0 === observer }) {\n            observers.remove(at: idx)\n            print("Subject: Detached an observer.\\n")\n        }\n    }\n\n    /// Trigger an update in each subscriber.\n    func notify() {\n        print("Subject: Notifying observers...\\n")\n        observers.forEach({ $0.update(subject: self)})\n    }\n\n    /// Usually, the subscription logic is only a fraction of what a Subject can\n    /// really do. Subjects commonly hold some important business logic, that\n    /// triggers a notification method whenever something important is about to\n    /// happen (or after it).\n    func someBusinessLogic() {\n        print("\\nSubject: I\'m doing something important.\\n")\n        state = Int(arc4random_uniform(10))\n        print("Subject: My state has just changed to: \\(state)\\n")\n        notify()\n    }\n}\n\n/// The Observer protocol declares the update method, used by subjects.\nprotocol Observer: class {\n\n    func update(subject: Subject)\n}\n\n/// Concrete Observers react to the updates issued by the Subject they had been\n/// attached to.\nclass ConcreteObserverA: Observer {\n\n    func update(subject: Subject) {\n\n        if subject.state < 3 {\n            print("ConcreteObserverA: Reacted to the event.\\n")\n        }\n    }\n}\n\nclass ConcreteObserverB: Observer {\n\n    func update(subject: Subject) {\n\n        if subject.state >= 3 {\n            print("ConcreteObserverB: Reacted to the event.\\n")\n        }\n    }\n}\n\n/// Let\'s see how it all works together.\nclass ObserverConceptual: XCTestCase {\n\n    func testObserverConceptual() {\n\n        let subject = Subject()\n\n        let observer1 = ConcreteObserverA()\n        let observer2 = ConcreteObserverB()\n\n        subject.attach(observer1)\n        subject.attach(observer2)\n\n        subject.someBusinessLogic()\n        subject.someBusinessLogic()\n        subject.detach(observer2)\n        subject.someBusinessLogic()\n    }\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Subject: Attached an observer.\n\nSubject: Attached an observer.\n\n\nSubject: I'm doing something important.\n\nSubject: My state has just changed to: 4\n\nSubject: Notifying observers...\n\nConcreteObserverB: Reacted to the event.\n\n\nSubject: I'm doing something important.\n\nSubject: My state has just changed to: 2\n\nSubject: Notifying observers...\n\nConcreteObserverA: Reacted to the event.\n\nSubject: Detached an observer.\n\n\nSubject: I'm doing something important.\n\nSubject: My state has just changed to: 8\n\nSubject: Notifying observers...\n")))}l.isMDXComponent=!0}}]);