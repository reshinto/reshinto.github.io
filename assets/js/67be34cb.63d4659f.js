"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[63283],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),b=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=b(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=b(n),h=s,d=u["".concat(c,".").concat(h)]||u[h]||p[h]||o;return n?r.createElement(d,a(a({ref:t},l),{},{components:n})):r.createElement(d,a({ref:t},l))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var b=2;b<o;b++)a[b]=n[b];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},26609:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>b});var r=n(83117),s=(n(67294),n(3905));const o={},a="Python Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Observer/python/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Observer/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Observer/python",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Observer/python/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/javascript/"},next:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/swift/"}},c={},b=[],l={toc:b};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"python-example"},"Python Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'"""\nObserver Design Pattern\n\nIntent: Lets you define a subscription mechanism to notify multiple objects\nabout any events that happen to the object they\'re observing.\n\nNote that there\'s a lot of different terms with similar meaning associated with\nthis pattern. Just remember that the Subject is also called the Publisher and\nthe Observer is often called the Subscriber and vice versa. Also the verbs\n"observe", "listen" or "track" usually mean the same thing.\n"""\n\n\nfrom __future__ import annotations\nfrom abc import ABC, abstractmethod\nfrom random import randrange\nfrom typing import List\n\n\nclass Subject(ABC):\n    """\n    The Subject interface declares a set of methods for managing subscribers.\n    """\n\n    @abstractmethod\n    def attach(self, observer: Observer) -> None:\n        """\n        Attach an observer to the subject.\n        """\n        pass\n\n    @abstractmethod\n    def detach(self, observer: Observer) -> None:\n        """\n        Detach an observer from the subject.\n        """\n        pass\n\n    @abstractmethod\n    def notify(self) -> None:\n        """\n        Notify all observers about an event.\n        """\n        pass\n\n\nclass ConcreteSubject(Subject):\n    """\n    The Subject owns some important state and notifies observers when the state\n    changes.\n    """\n\n    _state: int = None\n    """\n    For the sake of simplicity, the Subject\'s state, essential to all\n    subscribers, is stored in this variable.\n    """\n\n    _observers: List[Observer] = []\n    """\n    List of subscribers. In real life, the list of subscribers can be stored\n    more comprehensively (categorized by event type, etc.).\n    """\n\n    def attach(self, observer: Observer) -> None:\n        print("Subject: Attached an observer.")\n        self._observers.append(observer)\n\n    def detach(self, observer: Observer) -> None:\n        self._observers.remove(observer)\n\n    """\n    The subscription management methods.\n    """\n\n    def notify(self) -> None:\n        """\n        Trigger an update in each subscriber.\n        """\n\n        print("Subject: Notifying observers...")\n        for observer in self._observers:\n            observer.update(self)\n\n    def some_business_logic(self) -> None:\n        """\n        Usually, the subscription logic is only a fraction of what a Subject can\n        really do. Subjects commonly hold some important business logic, that\n        triggers a notification method whenever something important is about to\n        happen (or after it).\n        """\n\n        print("\\nSubject: I\'m doing something important.")\n        self._state = randrange(0, 10)\n\n        print(f"Subject: My state has just changed to: {self._state}")\n        self.notify()\n\n\nclass Observer(ABC):\n    """\n    The Observer interface declares the update method, used by subjects.\n    """\n\n    @abstractmethod\n    def update(self, subject: Subject) -> None:\n        """\n        Receive update from subject.\n        """\n        pass\n\n\n"""\nConcrete Observers react to the updates issued by the Subject they had been\nattached to.\n"""\n\n\nclass ConcreteObserverA(Observer):\n    def update(self, subject: Subject) -> None:\n        if subject._state < 3:\n            print("ConcreteObserverA: Reacted to the event")\n\n\nclass ConcreteObserverB(Observer):\n    def update(self, subject: Subject) -> None:\n        if subject._state == 0 or subject._state >= 2:\n            print("ConcreteObserverB: Reacted to the event")\n\n\nif __name__ == "__main__":\n    # The client code.\n\n    subject = ConcreteSubject()\n\n    observer_a = ConcreteObserverA()\n    subject.attach(observer_a)\n\n    observer_b = ConcreteObserverB()\n    subject.attach(observer_b)\n\n    subject.some_business_logic()\n    subject.some_business_logic()\n\n    subject.detach(observer_a)\n\n    subject.some_business_logic()\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Subject: Attached an observer.\nSubject: Attached an observer.\n\nSubject: I'm doing something important.\nSubject: My state has just changed to: 0\nSubject: Notifying observers...\nConcreteObserverA: Reacted to the event\nConcreteObserverB: Reacted to the event\n\nSubject: I'm doing something important.\nSubject: My state has just changed to: 5\nSubject: Notifying observers...\nConcreteObserverB: Reacted to the event\n\nSubject: I'm doing something important.\nSubject: My state has just changed to: 0\nSubject: Notifying observers...\nConcreteObserverB: Reacted to the event\n")))}p.isMDXComponent=!0}}]);