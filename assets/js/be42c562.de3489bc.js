"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[6231],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),p=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(a),g=r,d=c["".concat(m,".").concat(g)]||c[g]||u[g]||i;return a?n.createElement(d,o(o({ref:t},s),{},{components:a})):n.createElement(d,o({ref:t},s))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6967:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={},o="Programming Paradigm",l={unversionedId:"basics/programmingParadigm/readme",id:"basics/programmingParadigm/readme",title:"Programming Paradigm",description:"- it is a sort of programming style",source:"@site/docs/basics/programmingParadigm/readme.md",sourceDirName:"basics/programmingParadigm",slug:"/basics/programmingParadigm/",permalink:"/docs/basics/programmingParadigm/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/basics/programmingParadigm/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Memory Leaks",permalink:"/docs/basics/memoryLeaks"},next:{title:"Object Oriented Programming",permalink:"/docs/basics/programmingParadigm/OOP/"}},m={},p=[{value:"Declarative Programming",id:"declarative-programming",level:2},{value:"Imperative Programming",id:"imperative-programming",level:2},{value:"Object-Oriented Programming",id:"object-oriented-programming",level:2},{value:"Functional Programming",id:"functional-programming",level:2}],s={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"programming-paradigm"},"Programming Paradigm"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it is a sort of programming style"),(0,r.kt)("li",{parentName:"ul"},"it is not bound to a certain programming language"),(0,r.kt)("li",{parentName:"ul"},"it provides us with means and structure for execution of a program"),(0,r.kt)("li",{parentName:"ul"},"it is a complex of concepts, instruments, principles that define the fundamentals of programming style")),(0,r.kt)("h2",{id:"declarative-programming"},"Declarative Programming"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"programmer instructs the computer on what is to be computed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"you do not know how it works, but you know what it does")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"it is a good idea to decouple DOM manipulation from app logic"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"improves the testability of code"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"improves readability of code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"must define the specification for solving a task"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g.: we describe what the problem's field and how and what kind of result we expect"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"the order of execution and the method of achieving results does not matter")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"common example is ",(0,r.kt)("inlineCode",{parentName:"p"},"HTML")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it describes the contents of the page, but not the way it should be rendered"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"with declarative programming, the exact path of a program is not deterministic from the perspective of executed code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"SQL example"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select upper(name)\nfrom people\nwhere length(name) > 5\norder by name\n")))),(0,r.kt)("h2",{id:"imperative-programming"},"Imperative Programming"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the script is basically telling the computer how to do something"),(0,r.kt)("li",{parentName:"ul"},"imperative phrases which change the global state of a program"),(0,r.kt)("li",{parentName:"ul"},"not scalable"),(0,r.kt)("li",{parentName:"ul"},"we describe the system as a process of execution of instructions that change the state of the system"),(0,r.kt)("li",{parentName:"ul"},"it is commonly considered to be less extensible that the others"),(0,r.kt)("li",{parentName:"ul"},"examples: ",(0,r.kt)("inlineCode",{parentName:"li"},"C++"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"C"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Go"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"JavaScript")),(0,r.kt)("li",{parentName:"ul"},"not all languages can be categorized to a single programming paradigm",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"usually a language support 2 or even 3 paradigms at the same time"),(0,r.kt)("li",{parentName:"ul"},"example, ",(0,r.kt)("inlineCode",{parentName:"li"},"JavaScript")," supports imperative, functional, and object-oriented paradigms at the same time"))),(0,r.kt)("li",{parentName:"ul"},"with imperative programming, you know exactly what is happening",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"you can dial into the execution of a program and easily debug it"))),(0,r.kt)("li",{parentName:"ul"},"all code is imperative in the end when it is executed by the processor")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"result = []\n    i = 0\nstart:\n    numPeople = length(people)\n    if i >= numPeople goto finished\n    p = people[i]\n    nameLength = length(p.name)\n    if nameLength <= 5 goto nextOne\n    upperName = toUpper(p.name)\n    addToList(result, upperName)\nnextOne:\n    i = i + 1\n    goto start\nfinished:\n    return sort(result)\n")),(0,r.kt)("h2",{id:"object-oriented-programming"},"Object-Oriented Programming"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"program is defined by object which combine state and behavior"),(0,r.kt)("li",{parentName:"ul"},"good for structured and modular code"),(0,r.kt)("li",{parentName:"ul"},"well suited for big projects"),(0,r.kt)("li",{parentName:"ul"},"it describes the computer program as a set of specific objects, that are instances of a class"),(0,r.kt)("li",{parentName:"ul"},"the objects communicate by sending, receiving, and processing the messages",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the messages may include parameters"))),(0,r.kt)("li",{parentName:"ul"},"the objects have state",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"they can change when processing a message"))),(0,r.kt)("li",{parentName:"ul"},"objects may create other objects or may send messages when processing a message"),(0,r.kt)("li",{parentName:"ul"},"it is well-suited for big projects that require having a state within the app"),(0,r.kt)("li",{parentName:"ul"},"its message-oriented approach provides a way for objects to be replaced by other objects of a same type",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"means that the behavior of a program can be changed just by replacing an object"))),(0,r.kt)("li",{parentName:"ul"},"same objects as building blocks could be reused in other parts of the same system")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"result = []\n\nfor p in people {\n  if p.name.length > 5 {\n    result.add(p.name.toUpper);\n  }\n}\n\nreturn result.sort;\n")),(0,r.kt)("h2",{id:"functional-programming"},"Functional Programming"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"treats computations as the evaluation of functions and avoids changing state and mutable data"),(0,r.kt)("li",{parentName:"ul"},"eliminating side effects",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g.: changes in state that do not depend on the function inputs",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"can make it much easier to understand and predict the behavior of a program"))))),(0,r.kt)("li",{parentName:"ul"},"emphasize using of immutable data"),(0,r.kt)("li",{parentName:"ul"},"it describe the program as a set of functions (not objects or procedures)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"that are used as building blocks to manipulate data"))),(0,r.kt)("li",{parentName:"ul"},"it forces us to use function in their mathematical sense",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"as they just declare a relationship between 2 entities"))),(0,r.kt)("li",{parentName:"ul"},"functions do not change the state of a program (also known as ",(0,r.kt)("inlineCode",{parentName:"li"},"pure"),")",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"they pipe the data through them to produce a result"))),(0,r.kt)("li",{parentName:"ul"},"there are no variables, only constants"),(0,r.kt)("li",{parentName:"ul"},"can have a certain nesting of functions",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"where the result of the function can be expressed as a list of arguments that are passed to the function"),(0,r.kt)("li",{parentName:"ul"},"however, arguments can also be functions"))),(0,r.kt)("li",{parentName:"ul"},"programming languages that can pass a function as a parameter to another function are known as ",(0,r.kt)("inlineCode",{parentName:"li"},"first-class citizen function"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g.: JavaScript"))),(0,r.kt)("li",{parentName:"ul"},"a program in functional programming is not represented by a specific state, but by a combination of function calls at a certain point in time"),(0,r.kt)("li",{parentName:"ul"},"it pushes the idea that is is good to use immutable data",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"immutable data is faster because it is put into memory once and it does not change"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pure functions")," are functions without side effects",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"when there is",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a list of parameters as function arguments"),(0,r.kt)("li",{parentName:"ul"},"a certain logic for handling them"),(0,r.kt)("li",{parentName:"ul"},"a certain result in return"))),(0,r.kt)("li",{parentName:"ul"},"the function does not change data and state outside its scope"),(0,r.kt)("li",{parentName:"ul"},"if you change a variable outside the scope of the function",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this indicates that the function is impure, having a ",(0,r.kt)("inlineCode",{parentName:"li"},"side effect")))),(0,r.kt)("li",{parentName:"ul"},"functional programming assumes that the functions are pure and should follow the principle of single responsibility",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"each function should have a single responsibility"),(0,r.kt)("li",{parentName:"ul"},"because the essense of functional programming is in the combination of various functions with different responsibilities to achieve the result")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sort(\n  filter(\u03bbs.length s > 5,\n    map(\u03bbp.to_upper(name p),\n      people)))\n")))}u.isMDXComponent=!0}}]);