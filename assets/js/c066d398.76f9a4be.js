"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[7862],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,c(c({ref:t},l),{},{components:n})):r.createElement(f,c({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93787:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(83117),o=(n(67294),n(3905));const a={},c="TypeScript Example",i={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Decorator/typescript/readme",id:"interviewPrep/designPatterns/Structural_patterns/Decorator/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Decorator/typescript",slug:"/interviewPrep/designPatterns/Structural_patterns/Decorator/typescript/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/swift/example2"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/typescript/example2"}},p={},s=[],l={toc:s};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Decorator Design Pattern\n *\n * Intent: Lets you attach new behaviors to objects by placing these objects\n * inside special wrapper objects that contain the behaviors.\n */\n\n/**\n * The base Component interface defines operations that can be altered by\n * decorators.\n */\ninterface Component {\n  operation(): string;\n}\n\n/**\n * Concrete Components provide default implementations of the operations. There\n * might be several variations of these classes.\n */\nclass ConcreteComponent implements Component {\n  public operation(): string {\n    return "ConcreteComponent";\n  }\n}\n\n/**\n * The base Decorator class follows the same interface as the other components.\n * The primary purpose of this class is to define the wrapping interface for all\n * concrete decorators. The default implementation of the wrapping code might\n * include a field for storing a wrapped component and the means to initialize\n * it.\n */\nclass Decorator implements Component {\n  protected component: Component;\n\n  constructor(component: Component) {\n    this.component = component;\n  }\n\n  /**\n   * The Decorator delegates all work to the wrapped component.\n   */\n  public operation(): string {\n    return this.component.operation();\n  }\n}\n\n/**\n * Concrete Decorators call the wrapped object and alter its result in some way.\n */\nclass ConcreteDecoratorA extends Decorator {\n  /**\n   * Decorators may call parent implementation of the operation, instead of\n   * calling the wrapped object directly. This approach simplifies extension\n   * of decorator classes.\n   */\n  public operation(): string {\n    return `ConcreteDecoratorA(${super.operation()})`;\n  }\n}\n\n/**\n * Decorators can execute their behavior either before or after the call to a\n * wrapped object.\n */\nclass ConcreteDecoratorB extends Decorator {\n  public operation(): string {\n    return `ConcreteDecoratorB(${super.operation()})`;\n  }\n}\n\n/**\n * The client code works with all objects using the Component interface. This\n * way it can stay independent of the concrete classes of components it works\n * with.\n */\nfunction clientCode(component: Component) {\n  // ...\n\n  console.log(`RESULT: ${component.operation()}`);\n\n  // ...\n}\n\n/**\n * This way the client code can support both simple components...\n */\nconst simple = new ConcreteComponent();\nconsole.log("Client: I\'ve got a simple component:");\nclientCode(simple);\nconsole.log("");\n\n/**\n * ...as well as decorated ones.\n *\n * Note how decorators can wrap not only simple components but the other\n * decorators as well.\n */\nconst decorator1 = new ConcreteDecoratorA(simple);\nconst decorator2 = new ConcreteDecoratorB(decorator1);\nconsole.log("Client: Now I\'ve got a decorated component:");\nclientCode(decorator2);\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Client: I've got a simple component:\nRESULT: ConcreteComponent\n\nClient: Now I've got a decorated component:\nRESULT: ConcreteDecoratorB(ConcreteDecoratorA(ConcreteComponent))\n")))}m.isMDXComponent=!0}}]);