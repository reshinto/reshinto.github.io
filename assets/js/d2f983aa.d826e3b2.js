"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[23160],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>u});var a=r(67294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var o=a.createContext({}),p=function(e){var n=a.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},c=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(r),u=t,h=m["".concat(o,".").concat(u)]||m[u]||d[u]||i;return r?a.createElement(h,s(s({ref:n},c),{},{components:r})):a.createElement(h,s({ref:n},c))}));function u(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=r.length,s=new Array(i);s[0]=m;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:t,s[1]=l;for(var p=2;p<i;p++)s[p]=r[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},94206:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=r(83117),t=(r(67294),r(3905));const i={},s="Java Example",l={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/java/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/java/readme",title:"Java Example",description:"- middleware",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/java",slug:"/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/java/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/go/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/javascript/"}},o={},p=[],c={toc:p};function d(e){let{components:n,...r}=e;return(0,t.kt)("wrapper",(0,a.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"java-example"},"Java Example"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"middleware"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"middleware/Middleware.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.chain_of_responsibility.example.middleware;\n\n/**\n * Base middleware class.\n*/\npublic abstract class Middleware {\n    private Middleware next;\n\n    /**\n     * Builds chains of middleware objects.\n     */\n    public Middleware linkWith(Middleware next) {\n        this.next = next;\n        return next;\n    }\n\n    /**\n     * Subclasses will implement this method with concrete checks.\n     */\n    public abstract boolean check(String email, String password);\n\n    /**\n     * Runs check on the next object in chain or ends traversing if we're in\n     * last object in chain.\n     */\n    protected boolean checkNext(String email, String password) {\n        if (next == null) {\n            return true;\n        }\n        return next.check(email, password);\n    }\n}\n"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"middleware/RoleCheckMiddleware.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.chain_of_responsibility.example.middleware;\n\n/**\n * ConcreteHandler. Checks a user\'s role.\n*/\npublic class RoleCheckMiddleware extends Middleware {\n    public boolean check(String email, String password) {\n        if (email.equals("admin@example.com")) {\n            System.out.println("Hello, admin!");\n            return true;\n        }\n        System.out.println("Hello, user!");\n        return checkNext(email, password);\n    }\n}\n'))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"middleware/ThrottlingMiddleware.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.chain_of_responsibility.example.middleware;\n\n/**\n * ConcreteHandler. Checks whether there are too many failed login requests.\n*/\npublic class ThrottlingMiddleware extends Middleware {\n    private int requestPerMinute;\n    private int request;\n    private long currentTime;\n\n    public ThrottlingMiddleware(int requestPerMinute) {\n        this.requestPerMinute = requestPerMinute;\n        this.currentTime = System.currentTimeMillis();\n    }\n\n    /**\n     * Please, not that checkNext() call can be inserted both in the beginning\n     * of this method and in the end.\n     *\n     * This gives much more flexibility than a simple loop over all middleware\n     * objects. For instance, an element of a chain can change the order of\n     * checks by running its check after all other checks.\n     */\n    public boolean check(String email, String password) {\n        if (System.currentTimeMillis() > currentTime + 60_000) {\n            request = 0;\n            currentTime = System.currentTimeMillis();\n        }\n\n        request++;\n\n        if (request > requestPerMinute) {\n            System.out.println("Request limit exceeded!");\n            Thread.currentThread().stop();\n        }\n        return checkNext(email, password);\n    }\n}\n'))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"middleware/UserExistsMiddleware.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.chain_of_responsibility.example.middleware;\n\nimport refactoring_guru.chain_of_responsibility.example.server.Server;\n\n/**\n * ConcreteHandler. Checks whether a user with the given credentials exists.\n*/\npublic class UserExistsMiddleware extends Middleware {\n    private Server server;\n\n    public UserExistsMiddleware(Server server) {\n        this.server = server;\n    }\n\n    public boolean check(String email, String password) {\n        if (!server.hasEmail(email)) {\n            System.out.println("This email is not registered!");\n            return false;\n        }\n        if (!server.isValidPassword(email, password)) {\n            System.out.println("Wrong password!");\n            return false;\n        }\n        return checkNext(email, password);\n    }\n}\n'))))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"server"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"server/Server.java"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.chain_of_responsibility.example.server;\n\nimport refactoring_guru.chain_of_responsibility.example.middleware.Middleware;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Server class.\n*/\npublic class Server {\n    private Map<String, String> users = new HashMap<>();\n    private Middleware middleware;\n\n    /**\n     * Client passes a chain of object to server. This improves flexibility and\n     * makes testing the server class easier.\n     */\n    public void setMiddleware(Middleware middleware) {\n        this.middleware = middleware;\n    }\n\n    /**\n     * Server gets email and password from client and sends the authorization\n     * request to the chain.\n     */\n    public boolean logIn(String email, String password) {\n        if (middleware.check(email, password)) {\n            System.out.println("Authorization have been successful!");\n\n            // Do something useful here for authorized users.\n\n            return true;\n        }\n        return false;\n    }\n\n    public void register(String email, String password) {\n        users.put(email, password);\n    }\n\n    public boolean hasEmail(String email) {\n        return users.containsKey(email);\n    }\n\n    public boolean isValidPassword(String email, String password) {\n        return users.get(email).equals(password);\n    }\n}\n'))))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Demo.java"))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.chain_of_responsibility.example;\n\nimport refactoring_guru.chain_of_responsibility.example.middleware.Middleware;\nimport refactoring_guru.chain_of_responsibility.example.middleware.RoleCheckMiddleware;\nimport refactoring_guru.chain_of_responsibility.example.middleware.ThrottlingMiddleware;\nimport refactoring_guru.chain_of_responsibility.example.middleware.UserExistsMiddleware;\nimport refactoring_guru.chain_of_responsibility.example.server.Server;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * Demo class. Everything comes together here.\n */\npublic class Demo {\n    private static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    private static Server server;\n\n    private static void init() {\n        server = new Server();\n        server.register("admin@example.com", "admin_pass");\n        server.register("user@example.com", "user_pass");\n\n        // All checks are linked. Client can build various chains using the same\n        // components.\n        Middleware middleware = new ThrottlingMiddleware(2);\n        middleware.linkWith(new UserExistsMiddleware(server))\n                .linkWith(new RoleCheckMiddleware());\n\n        // Server gets a chain from client code.\n        server.setMiddleware(middleware);\n    }\n\n    public static void main(String[] args) throws IOException {\n        init();\n\n        boolean success;\n        do {\n            System.out.print("Enter email: ");\n            String email = reader.readLine();\n            System.out.print("Input password: ");\n            String password = reader.readLine();\n            success = server.logIn(email, password);\n        } while (!success);\n    }\n}\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"Enter email: admin@example.com\nInput password: admin_pass\nHello, admin!\nAuthorization have been successful!\n\n\nEnter email: user@example.com\nInput password: user_pass\nHello, user!\nAuthorization have been successful!\n")))}d.isMDXComponent=!0}}]);