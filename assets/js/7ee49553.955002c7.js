"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[82287],{3905:(e,t,n)=>{n.d(t,{Zo:()=>f,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),o=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},f=function(e){var t=o(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,f=s(e,["components","mdxType","originalType","parentName"]),p=o(n),d=r,_=p["".concat(c,".").concat(d)]||p[d]||m[d]||i;return n?a.createElement(_,l(l({ref:t},f),{},{components:n})):a.createElement(_,l({ref:t},f))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3715:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var a=n(83117),r=(n(67294),n(3905));const i={},l="Python Example",s={unversionedId:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/python/readme",id:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/python/readme",title:"Python Example",description:"Violate ISP",source:"@site/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/python/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/python",slug:"/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/python/",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/javascript/"},next:{title:"TypeScript",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/typescript/"}},c={},o=[{value:"Violate ISP",id:"violate-isp",level:2},{value:"Pass ISP",id:"pass-isp",level:2}],f={toc:o};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-example"},"Python Example"),(0,r.kt)("h2",{id:"violate-isp"},"Violate ISP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from abc import ABC, abstractmethod\n\n# this violates the interface segregation principle\n# because it is being used by multiple classes that does not requires all of it\nclass Entity(ABC):\n    def __init__(self, name, attack_damage, health):\n        self.name = name\n        self.attack_damage = attack_damage\n        self.health = health\n\n    @abstractmethod\n    def move(self):\n        pass\n\n    @abstractmethod\n    def attack(self, target_entity):\n        pass\n\n    @abstractmethod\n    def take_damage(self, amount):\n        pass\n\n\nclass Character(Entity):\n    def __init__(self, name, attack_damage, health):\n        super().__init__(name, attack_damage, health)\n\n    def move(self):\n        print(f"{self.name} moved")\n\n    def attack(self, target_entity):\n        print(\n            f"{self.name} attacked {target_entity.name} for {self.attack_damage} damage",\n        )\n        target_entity.take_damage(self.attack_damage)\n\n    def take_damage(self, amount):\n        self.health -= amount\n        print(f"{self.name} has {self.health} health remaining")\n\n\nclass Wall(Entity):\n    def __init__(self, name, health):\n        super().__init__(name, 0, health)\n\n    def move(self):\n        return None\n\n    def attack(self):\n        return None\n\n    def take_damage(self, amount):\n        self.health -= amount\n        print(f"{self.name} has {self.health} health remaining")\n\n\nclass Turret(Entity):\n    def __init__(self, name, attack_damage):\n        super().__init__(name, attack_damage, 0)\n\n    def move(self):\n        return None\n\n    def take_damage(self):\n        return None\n\n    def attack(self, target_entity):\n        print(\n            f"{self.name} attacked {target_entity.name} for {self.attack_damage} damage",\n        )\n        target_entity.take_damage(self.attack_damage)\n\n\nturret = Turret("Turret", 5)\ncharacter = Character("Character", 3, 100)\nwall = Wall("Wall", 200)\n\nturret.attack(character)\ncharacter.move()\ncharacter.attack(wall)\n')),(0,r.kt)("h2",{id:"pass-isp"},"Pass ISP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from abc import ABC, abstractmethod\n\n\nclass Entity(ABC):\n    def __init__(self, name):\n        self.name = name\n\n\nclass Mover(ABC):\n    @abstractmethod\n    def move(self):\n        pass\n\n\nclass Attacker(ABC):\n    def __init__(self, attack_damage):\n        self.attack_damage = attack_damage\n\n    @abstractmethod\n    def attack(self, target_entity):\n        pass\n\n\nclass HasHealth(ABC):\n    def __init__(self, health):\n        self.health = health\n\n    @abstractmethod\n    def take_damage(self, amount):\n        pass\n\n\nclass Character(Entity, Mover, Attacker, HasHealth):\n    def __init__(self, name, attack_damage, health):\n        Entity.__init__(self, name)\n        Attacker.__init__(self, attack_damage)\n        HasHealth.__init__(self, health)\n\n    def move(self):\n        print(f"{self.name} moved")\n\n    def attack(self, target_entity):\n        print(\n            f"{self.name} attacked {target_entity.name} for {self.attack_damage} damage",\n        )\n        target_entity.take_damage(self.attack_damage)\n\n    def take_damage(self, amount):\n        self.health -= amount\n        print(f"{self.name} has {self.health} health remaining")\n\n\nclass Wall(Entity, HasHealth):\n    def __init__(self, name, health):\n        Entity.__init__(self, name)\n        HasHealth.__init__(self, health)\n\n    def take_damage(self, amount):\n        self.health -= amount\n        print(f"{self.name} has {self.health} health remaining")\n\n\nclass Turret(Entity, Attacker):\n    def __init__(self, name, attack_damage):\n        Entity.__init__(self, name)\n        Attacker.__init__(self, attack_damage)\n\n    def attack(self, target_entity):\n        print(\n            f"{self.name} attacked {target_entity.name} for {self.attack_damage} damage",\n        )\n        target_entity.take_damage(self.attack_damage)\n\n\nturret = Turret("Turret", 5)\ncharacter = Character("Character", 3, 100)\nwall = Wall("Wall", 200)\n\nturret.attack(character)\ncharacter.move()\ncharacter.attack(wall)\n')))}m.isMDXComponent=!0}}]);