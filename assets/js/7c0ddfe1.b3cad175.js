"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[2233],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),g=m(t),c=r,d=g["".concat(s,".").concat(c)]||g[c]||u[c]||l;return t?a.createElement(d,o(o({ref:n},p),{},{components:t})):a.createElement(d,o({ref:n},p))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var m=2;m<l;m++)o[m]=t[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},80623:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var a=t(83117),r=(t(67294),t(3905));const l={},o="Groovy",i={unversionedId:"languageSpecific/groovy/readme",id:"languageSpecific/groovy/readme",title:"Groovy",description:"- it allows optionally-typed dynamic capabilities",source:"@site/docs/languageSpecific/groovy/readme.md",sourceDirName:"languageSpecific/groovy",slug:"/languageSpecific/groovy/",permalink:"/docs/languageSpecific/groovy/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/languageSpecific/groovy/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"c# summary notes",permalink:"/docs/languageSpecific/cSharp/"},next:{title:"HTML",permalink:"/docs/languageSpecific/html/"}},s={},m=[{value:"Both Interpreted And Compiled Language",id:"both-interpreted-and-compiled-language",level:2},{value:"GroovyShell and Console",id:"groovyshell-and-console",level:2},{value:"Hello World",id:"hello-world",level:2},{value:"Variable declaration",id:"variable-declaration",level:2},{value:"Duck typing",id:"duck-typing",level:3},{value:"Strings",id:"strings",level:2},{value:"Imports",id:"imports",level:2},{value:"Conditional Statements",id:"conditional-statements",level:2},{value:"Loops",id:"loops",level:2},{value:"Class",id:"class",level:2},{value:"Access modifier",id:"access-modifier",level:3},{value:"Annotations",id:"annotations",level:3},{value:"Error handling",id:"error-handling",level:2},{value:"Closures",id:"closures",level:2},{value:"Collections",id:"collections",level:2},{value:"File System",id:"file-system",level:2},{value:"Reading Files",id:"reading-files",level:3},{value:"Writing files",id:"writing-files",level:3}],p={toc:m};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"groovy"},"Groovy"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"it allows optionally-typed dynamic capabilities"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"meaning you do not need to spell out the type of a field"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://groovy-lang.org/gdk.html"},"Groovy Development Kit (GDK) Documentation")))),(0,r.kt)("h2",{id:"both-interpreted-and-compiled-language"},"Both Interpreted And Compiled Language"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it is a Java-syntax-compatible object-oriented programming language for the Java platform"),(0,r.kt)("li",{parentName:"ul"},"is both a static and dynamic language with features similar to those of Python"),(0,r.kt)("li",{parentName:"ul"},"can be used as both a programming language and a scripting language for the Java Platform",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it is compiled to Java byte code that can run on the Java virtual machine (JVM)"),(0,r.kt)("li",{parentName:"ul"},"interoperates seamlessly with other Java code and libraries"))),(0,r.kt)("li",{parentName:"ul"},"allows optionally-typed dynamic capabilities",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"do not need to spell out the type of field"))),(0,r.kt)("li",{parentName:"ul"},"allows advance programming",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"meta-programming, functional programming, closures"))),(0,r.kt)("li",{parentName:"ul"},"supports authoring of domain-specific languages",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"jenkins file: to create a built pipeline with jenkins"),(0,r.kt)("li",{parentName:"ul"},"gradle build script"))),(0,r.kt)("li",{parentName:"ul"},"requires installation of ",(0,r.kt)("inlineCode",{parentName:"li"},"Java Development Kit")," (JDK) to work"),(0,r.kt)("li",{parentName:"ul"},"allows duck typing: provides the option to use the ",(0,r.kt)("inlineCode",{parentName:"li"},"def")," keyword to determine the type at runtime"),(0,r.kt)("li",{parentName:"ul"},"can also have a variable assign a concrete type",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"can tell groovy compiler to enforce static typing if needed"))),(0,r.kt)("li",{parentName:"ul"},"auto generates getter and setter methods at runtime for class members"),(0,r.kt)("li",{parentName:"ul"},"contains Abstract Syntax Tree (AST) transformations: provides annotations for generating methods at runtime",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"such as defining constructors, equals, hashCode, toString methods"))),(0,r.kt)("li",{parentName:"ul"},"automatically imports commonly-used packages",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"like ",(0,r.kt)("inlineCode",{parentName:"li"},"java.util.*")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"java.io.*")))),(0,r.kt)("li",{parentName:"ul"},"makes the default modifier as public, leading to less verbose code"),(0,r.kt)("li",{parentName:"ul"},"semicolons are optional, only required if want to define more than 1 statement on a single line")),(0,r.kt)("h2",{id:"groovyshell-and-console"},"GroovyShell and Console"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"they are tools for running Groovy without a compiler"),(0,r.kt)("li",{parentName:"ul"},"GroovyShell is a ",(0,r.kt)("inlineCode",{parentName:"li"},"read-eval-print loop")," (REPL) interpreter"),(0,r.kt)("li",{parentName:"ul"},"Groovy Console is a UI for executing a single-line Groovy statements")),(0,r.kt)("h2",{id:"hello-world"},"Hello World"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using dynamic type method")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'println "Hello World"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using static type method")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'class HelloWorld {\n  static void main(String[] args) {\n    // semicolons are optional\n    // only needed if defining more than 1 statement on a single line\n    println("Hello World");\n  }\n}\n')),(0,r.kt)("h2",{id:"variable-declaration"},"Variable declaration"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"follows java syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},"int age = 40\n\n// print variable type\nprintln(age.getClass())\n")),(0,r.kt)("h3",{id:"duck-typing"},"Duck typing"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"having the option to use a particular keyword for this case ",(0,r.kt)("inlineCode",{parentName:"li"},"def")," to determine the type at runtime")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'def msg = "string"\n')),(0,r.kt)("h2",{id:"strings"},"Strings"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'String test = "test"\n\nprintln test  // test\nprintln test.dropRight(1)  // tes\nprintln test  // test\n')),(0,r.kt)("h2",{id:"imports"},"Imports"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"automatically imports commonly used packages like ",(0,r.kt)("inlineCode",{parentName:"li"},"java.util.*")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"java.io.*"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},"import com.example.SomePackage\n")),(0,r.kt)("h2",{id:"conditional-statements"},"Conditional Statements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'int age = 40\n\nif (age == 40) {\n  println "You are 40"\n} else if (age > 40) {\n  println "You are older than 40"\n} else {\n  println "You are younger than 40"\n}\n')),(0,r.kt)("h2",{id:"loops"},"Loops"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'def strArr = ["a", "b", "c"];\n\nfor (String s : strArr) {\n  println(s)\n}\n')),(0,r.kt)("h2",{id:"class"},"Class"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Getter and Setter method are auto generated at runtime for class members")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'class Person {\n  String firstName\n  String lastName\n  int age\n\n  String getFullName() {\n    firstName + " " + lastName  // method 1\n    // return firstName + " " + lastName  // method 2\n  }\n}\n\n// method 1\nPerson person = new Person()\nperson.setFirstName("John");  // auto generated and not required to define\nperson.setLastName("Doe");\nperson.setAge(48);\n\nprintln(person.getFullName())  // auto generated and not required to define\nprintln(person.getAge())\n\n// method 2: auto set via constructor\nPerson person2 = new Person("firstName": "Mary", "lastName": "Hill", "age": 40)\n\nprintln(person2.getFullName())\nprintln(person2.getAge())\n')),(0,r.kt)("h3",{id:"access-modifier"},"Access modifier"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"default modifier is ",(0,r.kt)("inlineCode",{parentName:"li"},"public"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},"class Operator {}\n")),(0,r.kt)("h3",{id:"annotations"},"Annotations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it provides annotations for generating methods at runtime")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'// method 1: without annotations\nclass Person {\n  String firstName\n  String lastName\n  int age\n\n  Person() {}\n\n  Person(String firstName, String lastName, int age) {\n    this.firstName = firstName\n    this.lastName = lastName\n    this.age = age\n  }\n\n  String getFullName() {\n    return firstName + " " + lastName\n  }\n\n  @Override\n  boolean equals(o) {\n    if (this.is(o)) {\n      return true\n    }\n\n    if (!(o instanceof Person)) {\n      return false\n    }\n\n    Person person = (Person) o\n\n    if (age != person.age) {\n      return false\n    }\n\n    if (firstName != person.firstName) {\n      return false\n    }\n\n    if (lastName != person.lastName) {\n      return false\n    }\n\n    return true\n  }\n\n  @Override\n  int hashCode() {\n    int result\n    result = (firstName != null ? firstName.hashCode() : 0)\n    result = 31 * result + (lastName != null ? lastName.hashCode() : 0)\n    result = 31 * result + age\n    return result\n  }\n\n  @Override\n  String toString() {\n    return "Person(" + firstName + ", " + lastName + ", " + age + ", " + getFullName() + ")";\n  }\n}\n\nPerson person = new Person("firstName": "Mary", "lastName": "Hill", "age": 40)\n\nassert person.toString() == "Person(Mary, Hill, 40, Mary Hill)"\nassert person.equals(person2)\nassert !person.equals(new Person("firstName": "John", "lastName": "Doe", "age": 30))\nassert new Person("firstName": "Mary", "lastName": "Hill", "age": 40).toString() == "Person(Mary, Hill, 40, Mary Hill)"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'// method 2: using annotation\nimport groovy.transform.ToString\nimport groovy.transform.EqualsAndHashCode\nimport groovy.transform.TupleConstructor\n\n@ToString\n@EqualsAndHashCode\n@TupleConstructor\nclass Person {\n  String firstName\n  String lastName\n  int age\n\n  String getFullName() {\n    return firstName + " " + lastName\n  }\n}\n\nPerson person = new Person("firstName": "Mary", "lastName": "Hill", "age": 40)\n\nassert person.toString() == "Person(Mary, Hill, 40, Mary Hill)"\nassert person.equals(person2)\nassert !person.equals(new Person("firstName": "John", "lastName": "Doe", "age": 30))\nassert new Person("firstName": "Mary", "lastName": "Hill", "age": 40).toString() == "Person(Mary, Hill, 40, Mary Hill)"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'// method 3: using Canonical\nimport groovy.transform.Canonical\n\n@Canonical\nclass Person {\n  String firstName\n  String lastName\n  int age\n\n  String getFullName() {\n    return firstName + " " + lastName\n  }\n}\n\nPerson person = new Person("firstName": "Mary", "lastName": "Hill", "age": 40)\n\nassert person.toString() == "Person(Mary, Hill, 40, Mary Hill)"\nassert person.equals(person2)\nassert !person.equals(new Person("firstName": "John", "lastName": "Doe", "age": 30))\nassert new Person("firstName": "Mary", "lastName": "Hill", "age": 40).toString() == "Person(Mary, Hill, 40, Mary Hill)"\n')),(0,r.kt)("h2",{id:"error-handling"},"Error handling"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'String test = "test"\n\ntry {\n  test.toLong()\n} catch (NumberFormatException e) {\n  assert e instanceof NumberFormatException\n  println "Cannot convert a String into a Long"\n}\n')),(0,r.kt)("h2",{id:"closures"},"Closures"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it is an anonymous block of code defined within curly braces"),(0,r.kt)("li",{parentName:"ul"},"it is essential to writing and using domain-specific languages"),(0,r.kt)("li",{parentName:"ul"},"executed on demand"),(0,r.kt)("li",{parentName:"ul"},"used heavily across the Groovy API")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'import groovy.transform.Canonical\n\n@Canonical\nclass Person {\n  String firstName\n  String lastName\n  int age\n}\n\nPerson person = new Person()\nperson.setFirstName("John");\nperson.setLastName("Doe");\nperson.setAge(48);\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'// method 1\nClosure personToString = { println person.toString() }\npersonToString()  // Person(John, Doe, 48)\n\n// method 2\nClosure personToString2 = { Person _person -> println _person.toString() }\npersonToString2(person)  // Person(John, Doe, 48)\n\n// method 3: pass Closure to a method and execute it\ndef handlePerson(Closure c, Person p) {\n  if (p == null) {\n    throw new RuntimeException("Person is null")\n  }\n  c(p)\n}\n\nhandlePerson(personToString2, person)  // Person(John, Doe, 48)\n\n\n// prints full name of a person\nClosure personFullName = { Person _person ->\n  println _person.firstName + " " + person.lastName\n}\n\nhandlePerson(personFullName, person)  // John Doe\n')),(0,r.kt)("h2",{id:"collections"},"Collections"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Groovy simplifies collection handling"),(0,r.kt)("li",{parentName:"ul"},"provides methods for manipulation, filtering, sorting, and querying entries"),(0,r.kt)("li",{parentName:"ul"},"closures are central element in collection usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'import groovy.transform.Canonical\n\n@Canonical\nclass Person {\n  String firstName\n  String lastName\n  int age\n}\n\nPerson johnDoe = new Person("firstName": "John", "lastName": "Doe", "age": 40)\nPerson maryHill = new Person("firstName": "Mary", "lastName": "Hill", "age": 30)\nPerson thomasMarks = new Person("firstName": "Thomas", "lastName": "Marks", "age": 21)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'// create a list\ndef persons = [johnDoe, maryHill, thomasMarks]\n\n// querying collections\nassert persons instanceof List\nassert persons.size() == 3\nassert persons[2] == thomasMarks\n\n\n// iterate over elements\npersons.each {\n  println it\n}\n// Person(John, Doe, 40)\n// Person(Mary, Hill, 30)\n// Person(Thomas, Marks, 21)\n\n// iterate over elements and using an index\npersons.eachWithIndex { Person entry, int i ->\n  println i + ": " + entry\n}\n// 0: Person(John, Doe, 40)\n// 1: Person(Mary, Hill, 30)\n// 2: Person(Thomas, Marks, 21)\n\n// filtering a specific element\npersons.find { it.lastName == "Hill" } == maryHill  // true\n\n// transforming elements into something else\npersons.collect { it.age <= 30 } == [false, true, true]  // true\n\n// sorting elements based on a criterion\npersons.sort { it.age } == [thomasMarks, maryHill, johnDoe]  // true\n')),(0,r.kt)("h2",{id:"file-system"},"File System"),(0,r.kt)("h3",{id:"reading-files"},"Reading Files"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"manages underlying file handle"),(0,r.kt)("li",{parentName:"ul"},"automatically closes file resources even in error conditions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},"import groovy.transform.Canonical\n\n@Canonical\nclass Person {\n  String firstName\n  String lastName\n  int age\n}\n\nPerson johnDoe = new Person()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'// read full contents of file\nFile file = new File("./john-doe.txt")\nprintln file.getText("UTF-8")\n\n// iterate over each line of file\nfile.eachLine { line, no ->\n  if (no == 1) {\n    johnDoe.setFirstName(line)\n  } else if (no == 2) {\n    johnDoe.setLastName(line)\n  } else if (no == 3) {\n    johnDoe.setAge(line.toInteger())\n  } else {\n    throw new RuntimeException("A person text file should only have 3 lines")\n  }\n}\n\nprintln johnDoe\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'def readAllNumbers() {\n  File resourcesDir = new File("resources")  // folder name at current location\n  List<Integer> allNumbers = []\n\n  resourcesDir.eachFile { file ->\n    file.eachLine { line ->\n      if (line.isNumber()) {\n        allNumbers << line.toInteger()\n      }\n    }\n  }\n\n  return allNumbers\n}\n\n// read numbers from files and store them in List\nList<Integer> allNumbers = readAllNumbers()\nprintln allNumbers  // [30, 12, 40]\n\n// find the highest number\nInteger maxNumber = allNumbers.max()\nassert maxNumber == 40\n\n// create the sum of all numbers\nInteger sum = allNumbers.sum()\nassert sum == 82\n')),(0,r.kt)("h3",{id:"writing-files"},"Writing files"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"able to populate a file with plain-text content"),(0,r.kt)("li",{parentName:"ul"},"provides shortcuts for appending to file content"),(0,r.kt)("li",{parentName:"ul"},"serializing objects with a single method call")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},"import groovy.transform.Canonical\n\n@Canonical\nclass Person implements Serializable {  // only required for serializing\n  String firstName\n  String lastName\n  int age\n}\n\nPerson johnDoe = new Person()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'// create a file and populate contents\nFile textFile = new File("./mary-hill.txt")\ntextFile.withWriter("UTF-8") { writer ->\n  writer.writeLine("Mary")\n  writer.writeLine("Hill")\n  writer.writeLine("30")\n}\n\n// appending contents to a file\ntextFile.append("1")  // method 1: adds to a new line\ntextFile << "2"  // method 2: adds to the end of the file\n\n// serializing an object to a file\nPerson thomasMarks = new Person("Thomas", "Marks", 21)\nFile binFile = new File("./thomas-marks.bin")\nbinFile.withObjectOutputStream { out ->\n  out.writeObject(thomasMarks)\n}\n')))}u.isMDXComponent=!0}}]);