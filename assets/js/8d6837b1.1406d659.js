"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[46736],{3905:(e,n,i)=>{i.d(n,{Zo:()=>c,kt:()=>f});var t=i(67294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function l(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function o(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?l(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function p(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)i=l[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)i=l[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var a=t.createContext({}),s=function(e){var n=t.useContext(a),i=n;return e&&(i="function"==typeof e?e(n):o(o({},n),e)),i},c=function(e){var n=s(e.components);return t.createElement(a.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,l=e.originalType,a=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(i),f=r,m=u["".concat(a,".").concat(f)]||u[f]||d[f]||l;return i?t.createElement(m,o(o({ref:n},c),{},{components:i})):t.createElement(m,o({ref:n},c))}));function f(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=i.length,o=new Array(l);o[0]=u;var p={};for(var a in n)hasOwnProperty.call(n,a)&&(p[a]=n[a]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var s=2;s<l;s++)o[s]=i[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,i)}u.displayName="MDXCreateElement"},87783:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var t=i(83117),r=(i(67294),i(3905));const l={},o="SOLID",p={unversionedId:"interviewPrep/design_principles/SOLID/readme",id:"interviewPrep/design_principles/SOLID/readme",title:"SOLID",description:"Single Responsibility Principle",source:"@site/docs/interviewPrep/design_principles/SOLID/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID",slug:"/interviewPrep/design_principles/SOLID/",permalink:"/docs/interviewPrep/design_principles/SOLID/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Separation Of Concerns (SOC)",permalink:"/docs/interviewPrep/design_principles/SOC/"},next:{title:"Dependency Inversion Principle (DIP)",permalink:"/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/"}},a={},s=[{value:"Single Responsibility Principle",id:"single-responsibility-principle",level:2},{value:"Open Closed Principle",id:"open-closed-principle",level:2},{value:"Linskov Substitution Principle",id:"linskov-substitution-principle",level:2},{value:"Interface Segregation Principle",id:"interface-segregation-principle",level:2},{value:"Dependency Inversion Principle",id:"dependency-inversion-principle",level:2}],c={toc:s};function d(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,t.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"solid"},"SOLID"),(0,r.kt)("h2",{id:"single-responsibility-principle"},(0,r.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/SOLID/SingleResponsibilityPrinciple/"},"Single Responsibility Principle")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A class should have one and only one reason to change, meaning that a class should have only one job")),(0,r.kt)("h2",{id:"open-closed-principle"},(0,r.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/SOLID/OpenClosedPrinciple/"},"Open Closed Principle")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Objects or entities should be open for extension but closed for modification")),(0,r.kt)("h2",{id:"linskov-substitution-principle"},(0,r.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/"},"Linskov Substitution Principle")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Let ",(0,r.kt)("inlineCode",{parentName:"li"},"Q(x)")," be a property provable about objects x of type T",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Then ",(0,r.kt)("inlineCode",{parentName:"li"},"Q(y)")," should be true for objects y of type S where S is a subtype of T"))),(0,r.kt)("li",{parentName:"ul"},"in another words",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"objects of a superclass should be replaceable with objects of its subclasses without breaking the application")))),(0,r.kt)("h2",{id:"interface-segregation-principle"},(0,r.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/"},"Interface Segregation Principle")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A client should never be forced to implement an interface that it does not use, or clients should not be forced to depend on methods that they do not use")),(0,r.kt)("h2",{id:"dependency-inversion-principle"},(0,r.kt)("a",{parentName:"h2",href:"/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/"},"Dependency Inversion Principle")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"High-level modules should not depend on low-level modules",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Both should depend on abstractions"),(0,r.kt)("li",{parentName:"ul"},"Abstractions should not depend on details"),(0,r.kt)("li",{parentName:"ul"},"Details should depend on abstractions")))))}d.isMDXComponent=!0}}]);