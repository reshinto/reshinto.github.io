"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[43008],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),p=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(n),d=a,u=g["".concat(m,".").concat(d)]||g[d]||l[d]||o;return n?r.createElement(u,i(i({ref:t},c),{},{components:n})):r.createElement(u,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6003:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(83117),a=(n(67294),n(3905));const o={},i="Swift Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/readme",title:"Swift Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Memento/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/python/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/example2"}},m={},p=[],c={toc:p};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"swift-example"},"Swift Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'/// Memento Design Pattern\n///\n/// Intent: Lets you save and restore the previous state of an object without\n/// revealing the details of its implementation.\n\nimport XCTest\n\n/// The Originator holds some important state that may change over time. It also\n/// defines a method for saving the state inside a memento and another method\n/// for restoring the state from it.\nclass Originator {\n\n    /// For the sake of simplicity, the originator\'s state is stored inside a\n    /// single variable.\n    private var state: String\n\n    init(state: String) {\n        self.state = state\n        print("Originator: My initial state is: \\(state)")\n    }\n\n    /// The Originator\'s business logic may affect its internal state.\n    /// Therefore, the client should backup the state before launching methods\n    /// of the business logic via the save() method.\n    func doSomething() {\n        print("Originator: I\'m doing something important.")\n        state = generateRandomString()\n        print("Originator: and my state has changed to: \\(state)")\n    }\n\n    private func generateRandomString() -> String {\n        return String(UUID().uuidString.suffix(4))\n    }\n\n    /// Saves the current state inside a memento.\n    func save() -> Memento {\n        return ConcreteMemento(state: state)\n    }\n\n    /// Restores the Originator\'s state from a memento object.\n    func restore(memento: Memento) {\n        guard let memento = memento as? ConcreteMemento else { return }\n        self.state = memento.state\n        print("Originator: My state has changed to: \\(state)")\n    }\n}\n\n/// The Memento interface provides a way to retrieve the memento\'s metadata,\n/// such as creation date or name. However, it doesn\'t expose the Originator\'s\n/// state.\nprotocol Memento {\n\n    var name: String { get }\n    var date: Date { get }\n}\n\n/// The Concrete Memento contains the infrastructure for storing the\n/// Originator\'s state.\nclass ConcreteMemento: Memento {\n\n    /// The Originator uses this method when restoring its state.\n    private(set) var state: String\n    private(set) var date: Date\n\n    init(state: String) {\n        self.state = state\n        self.date = Date()\n    }\n\n    /// The rest of the methods are used by the Caretaker to display metadata.\n    var name: String { return state + " " + date.description.suffix(14).prefix(8) }\n}\n\n/// The Caretaker doesn\'t depend on the Concrete Memento class. Therefore, it\n/// doesn\'t have access to the originator\'s state, stored inside the memento. It\n/// works with all mementos via the base Memento interface.\nclass Caretaker {\n\n    private lazy var mementos = [Memento]()\n    private var originator: Originator\n\n    init(originator: Originator) {\n        self.originator = originator\n    }\n\n    func backup() {\n        print("\\nCaretaker: Saving Originator\'s state...\\n")\n        mementos.append(originator.save())\n    }\n\n    func undo() {\n\n        guard !mementos.isEmpty else { return }\n        let removedMemento = mementos.removeLast()\n\n        print("Caretaker: Restoring state to: " + removedMemento.name)\n        originator.restore(memento: removedMemento)\n    }\n\n    func showHistory() {\n        print("Caretaker: Here\'s the list of mementos:\\n")\n        mementos.forEach({ print($0.name) })\n    }\n}\n\n/// Let\'s see how it all works together.\nclass MementoConceptual: XCTestCase {\n\n    func testMementoConceptual() {\n\n        let originator = Originator(state: "Super-duper-super-puper-super.")\n        let caretaker = Caretaker(originator: originator)\n\n        caretaker.backup()\n        originator.doSomething()\n\n        caretaker.backup()\n        originator.doSomething()\n\n        caretaker.backup()\n        originator.doSomething()\n\n        print("\\n")\n        caretaker.showHistory()\n\n        print("\\nClient: Now, let\'s rollback!\\n\\n")\n        caretaker.undo()\n\n        print("\\nClient: Once more!\\n\\n")\n        caretaker.undo()\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Originator: My initial state is: Super-duper-super-puper-super.\n\nCaretaker: Saving Originator's state...\n\nOriginator: I'm doing something important.\nOriginator: and my state has changed to: 1923\n\nCaretaker: Saving Originator's state...\n\nOriginator: I'm doing something important.\nOriginator: and my state has changed to: 74FB\n\nCaretaker: Saving Originator's state...\n\nOriginator: I'm doing something important.\nOriginator: and my state has changed to: 3681\n\n\nCaretaker: Here's the list of mementos:\n\nSuper-duper-super-puper-super. 11:45:44\n1923 11:45:44\n74FB 11:45:44\n\nClient: Now, let's rollback!\n\n\nCaretaker: Restoring state to: 74FB 11:45:44\nOriginator: My state has changed to: 74FB\n\nClient: Once more!\n\n\nCaretaker: Restoring state to: 1923 11:45:44\nOriginator: My state has changed to: 1923\n")))}l.isMDXComponent=!0}}]);