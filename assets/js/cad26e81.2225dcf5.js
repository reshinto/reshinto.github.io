"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[75232],{3905:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>y});var t=r(67294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var p=t.createContext({}),c=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},l=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,a=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),m=c(r),y=s,P=m["".concat(p,".").concat(y)]||m[y]||u[y]||a;return r?t.createElement(P,i(i({ref:n},l),{},{components:r})):t.createElement(P,i({ref:n},l))}));function y(e,n){var r=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=r.length,i=new Array(a);i[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9752:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var t=r(83117),s=(r(67294),r(3905));const a={},i="TypeScript",o={unversionedId:"interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/typescript/readme",id:"interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/typescript/readme",title:"TypeScript",description:"Violate DIP",source:"@site/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/typescript/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/typescript",slug:"/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/typescript/",permalink:"/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Example",permalink:"/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/python/"},next:{title:"Interface Segregation Principle (ISP)",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/"}},p={},c=[{value:"Violate DIP",id:"violate-dip",level:2},{value:"Pass DIP",id:"pass-dip",level:2}],l={toc:c};function u(e){let{components:n,...r}=e;return(0,s.kt)("wrapper",(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"typescript"},"TypeScript"),(0,s.kt)("h2",{id:"violate-dip"},"Violate DIP"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// Violates the dependency inversion principle\n// store has to be rewritten to change the payment service from stripe to paypal\nclass Store {\n  strip: Stripe;\n  paypal: Paypal;\n  user: string;\n\n  constructor(user: string) {\n    // this.stripe = new Stripe(user);\n    this.paypal = new Paypal();\n    this.user = user;\n  }\n\n  purchaseBike(quantity: number) {\n    // this.stripe.makePayment(200 * quantity * 100);\n    this.paypal.makePayment(this.user, 200 * quantity);\n  }\n\n  purchaseHelmet(quantity: number) {\n    // this.stripe.makePayment(15 * quantity * 100);\n    this.paypal.makePayment(this.user, 15 * quantity);\n  }\n}\n\nclass Stripe {\n  user: string;\n\n  constructor(user: string) {\n    this.user = user;\n  }\n\n  makePayment(amountInCents: number) {\n    console.log(\n      `${this.user} made payment of $${amountInCents / 100} with Stripe`\n    );\n  }\n}\n\nclass Paypal {\n  makePayment(user: string, amountInDollars: number) {\n    console.log(`${user} made payment of $${amountInDollars} with Paypal`);\n  }\n}\n\nconst store = new Store("John");\nstore.purchaseBike(2);\nstore.purchaseHelmet(2);\n')),(0,s.kt)("h2",{id:"pass-dip"},"Pass DIP"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// does not change regardless of payment services\ninterface PaymentProcessor {\n  pay(amountInDollars: number): void;\n}\n\nclass Store {\n  paymentProcessor: PaymentProcessor;\n\n  constructor(paymentProcessor: PaymentProcessor) {\n    this.paymentProcessor = paymentProcessor;\n  }\n\n  purchaseBike(quantity: number) {\n    this.paymentProcessor.pay(200 * quantity);\n  }\n\n  purchaseHelmet(quantity: number) {\n    this.paymentProcessor.pay(15 * quantity);\n  }\n}\n\n// behaves as a wrapper\nclass StripePaymentProcessor implements PaymentProcessor {\n  stripe: Stripe;\n\n  constructor(user: string) {\n    this.stripe = new Stripe(user);\n  }\n\n  pay(amountInDollars: number) {\n    this.stripe.makePayment(amountInDollars * 100);\n  }\n}\n\nclass Stripe {\n  user: string;\n\n  constructor(user: string) {\n    this.user = user;\n  }\n\n  makePayment(amountInCents: number) {\n    console.log(\n      `${this.user} made payment of $${amountInCents / 100} with Stripe`\n    );\n  }\n}\n\n// behaves as a wrapper\nclass PaypalPaymentProcessor implements PaymentProcessor {\n  paypal: Paypal;\n  user: string;\n\n  constructor(user: string) {\n    this.paypal = new Paypal();\n    this.user = user;\n  }\n\n  pay(amountInDollars: number) {\n    this.paypal.makePayment(this.user, amountInDollars);\n  }\n}\n\nclass Paypal {\n  makePayment(user: string, amountInDollars: number) {\n    console.log(`${user} made payment of $${amountInDollars} with Paypal`);\n  }\n}\n\nconst store = new Store(new StripePaymentProcessor("John"));\nstore.purchaseBike(2);\nstore.purchaseHelmet(2);\n\nconst store2 = new Store(new PaypalPaymentProcessor("John2"));\nstore2.purchaseBike(2);\nstore2.purchaseHelmet(2);\n')))}u.isMDXComponent=!0}}]);