"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9526],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),d=r,f=u["".concat(o,".").concat(d)]||u[d]||m[d]||i;return a?n.createElement(f,l(l({ref:t},p),{},{components:a})):n.createElement(f,l({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},27205:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const i={},l="Interface",s={unversionedId:"interviewPrep/basics/programmingParadigm/OOP/interface",id:"interviewPrep/basics/programmingParadigm/OOP/interface",title:"Interface",description:"- OOP is directly related to messages sent between objects",source:"@site/docs/interviewPrep/basics/programmingParadigm/OOP/interface.md",sourceDirName:"interviewPrep/basics/programmingParadigm/OOP",slug:"/interviewPrep/basics/programmingParadigm/OOP/interface",permalink:"/docs/interviewPrep/basics/programmingParadigm/OOP/interface",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/basics/programmingParadigm/OOP/interface.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Inheritance in Details",permalink:"/docs/interviewPrep/basics/programmingParadigm/OOP/inheritanceInDetails"},next:{title:"Mixins",permalink:"/docs/interviewPrep/basics/programmingParadigm/OOP/mixins"}},o={},c=[{value:"Public Interfaces",id:"public-interfaces",level:3},{value:"Private Interfaces",id:"private-interfaces",level:3},{value:"When Should a Class Implement an Interface?",id:"when-should-a-class-implement-an-interface",level:2},{value:"When Should a Class Depend on an Interface?",id:"when-should-a-class-depend-on-an-interface",level:2},{value:"Interface vs Abstract Class",id:"interface-vs-abstract-class",level:2},{value:"Summary: Creating a Message-Based Application",id:"summary-creating-a-message-based-application",level:2}],p={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interface"},"Interface"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"OOP is directly related to messages sent between objects"),(0,r.kt)("li",{parentName:"ul"},"it is important for objects to know what behavior they have inside, on whom they depend (to whom messages are sent)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"and also how they communicate with each other"))),(0,r.kt)("li",{parentName:"ul"},"Objects communicate through interfaces"),(0,r.kt)("li",{parentName:"ul"},"What do interfaces give us?",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The presence of interfaces allows you to think about the task in a more abstract way, ignoring minor details"),(0,r.kt)("li",{parentName:"ul"},"There are different levels of abstraction or ignorance of details")))),(0,r.kt)("h3",{id:"public-interfaces"},"Public Interfaces"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Reveal its primary responsibility"),(0,r.kt)("li",{parentName:"ul"},"Are expected to be invoked by others"),(0,r.kt)("li",{parentName:"ul"},"Will not change on a whim"),(0,r.kt)("li",{parentName:"ul"},"Are safe for others to depend on"),(0,r.kt)("li",{parentName:"ul"},"Are thoroughly documented in the tests")),(0,r.kt)("h3",{id:"private-interfaces"},"Private Interfaces"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Handle implementation details"),(0,r.kt)("li",{parentName:"ul"},"Are not expected to be sent by other objects"),(0,r.kt)("li",{parentName:"ul"},"Can change for any reason whatsoever"),(0,r.kt)("li",{parentName:"ul"},"Are unsafe for others to depend on"),(0,r.kt)("li",{parentName:"ul"},"May not even be referenced in the tests")),(0,r.kt)("h2",{id:"when-should-a-class-implement-an-interface"},"When Should a Class Implement an Interface?"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Class implements Strategy pattern, or it is part of family of objects"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"IRepository, IFormatter, IPrecondition"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Class implements role interface (as a result of ISP: Interface Segregation Principle)"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"ICloneable, IComparable"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Class implements interface required for connection with other classes"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Class is an Adapter, the need for an interface is determined by DIP (Dependency Inversion Principle)"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Class implements interface, because external environment depends on it"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Provides testability to users of this class"),(0,r.kt)("li",{parentName:"ul"},"This is not a single reason to create an interface")))),(0,r.kt)("h2",{id:"when-should-a-class-depend-on-an-interface"},"When Should a Class Depend on an Interface?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"getting it through the constructor",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The arguments of the class indicate that it cannot take some decision on its own, and it needs help from the called class"),(0,r.kt)("li",{parentName:"ul"},"It's easiest when a class depends on primitives, a little more complicated when it depends on specific classes, and most difficult when it depends on an interface")))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Class deals with family of types"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'the "family of types" exists already and defined by requirements of existing model'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"As a result of DIP"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"class wants to communicate with object of another level, it defines the interface by itself and requires its implementation"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"For testing purposes: useful in case if implementation of the abstraction relies on external environment"))),(0,r.kt)("h2",{id:"interface-vs-abstract-class"},"Interface vs Abstract Class"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"Interface"),(0,r.kt)("th",{parentName:"tr",align:null},"Abstract class"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Multiple inheritances"),(0,r.kt)("td",{parentName:"tr",align:null},"Implement several interfaces Only"),(0,r.kt)("td",{parentName:"tr",align:null},"one abstract class")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Structure"),(0,r.kt)("td",{parentName:"tr",align:null},"Abstract methods"),(0,r.kt)("td",{parentName:"tr",align:null},"Abstract & concrete methods")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"When to use"),(0,r.kt)("td",{parentName:"tr",align:null},"Future enhancements"),(0,r.kt)("td",{parentName:"tr",align:null},"To avoid independence")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Adding new methods"),(0,r.kt)("td",{parentName:"tr",align:null},"Could be hard"),(0,r.kt)("td",{parentName:"tr",align:null},"Easy to do")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Access modifiers"),(0,r.kt)("td",{parentName:"tr",align:null},"Only public"),(0,r.kt)("td",{parentName:"tr",align:null},"Public, protected, private")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Usage"),(0,r.kt)("td",{parentName:"tr",align:null},"Defines the peripheral abilities of a class"),(0,r.kt)("td",{parentName:"tr",align:null},"Defines the identity of a class")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An interface is more flexible from a client's point of view: any class can implement any interface"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'But the interface is "stiffer" from the point of view of its developer',(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it is more difficult to change it (the work of all clients will be broken)"),(0,r.kt)("li",{parentName:"ul"},"restrictions cannot be imposed on the client's constructor"),(0,r.kt)("li",{parentName:"ul"},"the code cannot be reused"))),(0,r.kt)("li",{parentName:"ul"},"Important Reasons For Using Interfaces:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Interfaces are used to achieve abstraction"),(0,r.kt)("li",{parentName:"ul"},"Designed to support dynamic method resolution at run time"),(0,r.kt)("li",{parentName:"ul"},"It helps you to achieve loose coupling"),(0,r.kt)("li",{parentName:"ul"},"Allows you to separate the definition of a method from the inheritance hierarchy"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'An abstract class is "stiffer" from the clients\' point of view: the client will be forced to abandon the current base class'),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'But an abstract class is "more flexible" from the point of view of its developer',(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it allows you to reuse code"),(0,r.kt)("li",{parentName:"ul"},"restrict the constructor of descendants"),(0,r.kt)("li",{parentName:"ul"},"allow you to make changes (easily add a virtual method without breaking existing clients)"),(0,r.kt)("li",{parentName:"ul"},'more clearly define a "contract" with descendants using Template Methods'))),(0,r.kt)("li",{parentName:"ul"},"Important Reasons For Using Abstract Class:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Abstract classes offer default functionality for the subclasses"),(0,r.kt)("li",{parentName:"ul"},"Provides a template for future specific classes"),(0,r.kt)("li",{parentName:"ul"},"Helps you to define a common interface for its subclasses"),(0,r.kt)("li",{parentName:"ul"},"Abstract class allows code reusability")))))),(0,r.kt)("h2",{id:"summary-creating-a-message-based-application"},"Summary: Creating a Message-Based Application"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create Explicit Interfaces",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"every time you create a class, declare its interfaces"),(0,r.kt)("li",{parentName:"ul"},"Methods in the public interface should:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Be explicitly identified as such"),(0,r.kt)("li",{parentName:"ul"},"Be more about what than how"),(0,r.kt)("li",{parentName:"ul"},"Have names that, insofar as you can anticipate, will not change"))))),(0,r.kt)("li",{parentName:"ol"},"Honor the Public Interfaces of Others",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"do your best to interact with other classes using only their public interfaces"))),(0,r.kt)("li",{parentName:"ol"},"Exercise Caution When Depending on Private Interfaces",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"despite your best efforts, you may find that you must depend on a private interface, this is a dangerous dependency that should be isolated"))),(0,r.kt)("li",{parentName:"ol"},"Minimize Context",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"construct public interfaces with an eye toward minimizing the context they require from others"),(0,r.kt)("li",{parentName:"ul"},"Keep the what versus how distinction in mind"),(0,r.kt)("li",{parentName:"ul"},"create public methods that allow senders to get what they want without knowing how your class implements its behavior")))))}m.isMDXComponent=!0}}]);