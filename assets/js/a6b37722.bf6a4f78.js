"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[27889],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),h=o,m=p["".concat(i,".").concat(h)]||p[h]||d[h]||a;return r?n.createElement(m,c(c({ref:t},u),{},{components:r})):n.createElement(m,c({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},60504:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(83117),o=(r(67294),r(3905));const a={},c="C++ Example",s={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Factory/cPlusPlus/readme",id:"interviewPrep/designPatterns/Creational_patterns/Factory/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Factory/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Factory/cPlusPlus",slug:"/interviewPrep/designPatterns/Creational_patterns/Factory/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Factory/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Factory",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Factory/cSharp/"}},i={},l=[],u={toc:l};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"c-example"},"C++ Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n\n/**\n * Factory Method Design Pattern\n *\n * Intent: Provides an interface for creating objects in a superclass, but\n * allows subclasses to alter the type of objects that will be created.\n */\n\n/**\n * The Product interface declares the operations that all concrete products must\n * implement.\n */\n\nclass Product {\n public:\n  virtual ~Product() {}\n  virtual std::string Operation() const = 0;\n};\n\n/**\n * Concrete Products provide various implementations of the Product interface.\n */\nclass ConcreteProduct1 : public Product {\n public:\n  std::string Operation() const override {\n    return "{Result of the ConcreteProduct1}";\n  }\n};\nclass ConcreteProduct2 : public Product {\n public:\n  std::string Operation() const override {\n    return "{Result of the ConcreteProduct2}";\n  }\n};\n\n/**\n * The Creator class declares the factory method that is supposed to return an\n * object of a Product class. The Creator\'s subclasses usually provide the\n * implementation of this method.\n */\n\nclass Creator {\n  /**\n   * Note that the Creator may also provide some default implementation of the\n   * factory method.\n   */\n public:\n  virtual ~Creator(){};\n  virtual Product* FactoryMethod() const = 0;\n  /**\n   * Also note that, despite its name, the Creator\'s primary responsibility is\n   * not creating products. Usually, it contains some core business logic that\n   * relies on Product objects, returned by the factory method. Subclasses can\n   * indirectly change that business logic by overriding the factory method and\n   * returning a different type of product from it.\n   */\n\n  std::string SomeOperation() const {\n    // Call the factory method to create a Product object.\n    Product* product = this->FactoryMethod();\n    // Now, use the product.\n    std::string result = "Creator: The same creator\'s code has just worked with " + product->Operation();\n    delete product;\n    return result;\n  }\n};\n\n/**\n * Concrete Creators override the factory method in order to change the\n * resulting product\'s type.\n */\nclass ConcreteCreator1 : public Creator {\n  /**\n   * Note that the signature of the method still uses the abstract product type,\n   * even though the concrete product is actually returned from the method. This\n   * way the Creator can stay independent of concrete product classes.\n   */\n public:\n  Product* FactoryMethod() const override {\n    return new ConcreteProduct1();\n  }\n};\n\nclass ConcreteCreator2 : public Creator {\n public:\n  Product* FactoryMethod() const override {\n    return new ConcreteProduct2();\n  }\n};\n\n/**\n * The client code works with an instance of a concrete creator, albeit through\n * its base interface. As long as the client keeps working with the creator via\n * the base interface, you can pass it any creator\'s subclass.\n */\nvoid ClientCode(const Creator& creator) {\n  // ...\n  std::cout << "Client: I\'m not aware of the creator\'s class, but it still works.\\n"\n            << creator.SomeOperation() << std::endl;\n  // ...\n}\n\n/**\n * The Application picks a creator\'s type depending on the configuration or\n * environment.\n */\n\nint main() {\n  std::cout << "App: Launched with the ConcreteCreator1.\\n";\n  Creator* creator = new ConcreteCreator1();\n  ClientCode(*creator);\n  std::cout << std::endl;\n  std::cout << "App: Launched with the ConcreteCreator2.\\n";\n  Creator* creator2 = new ConcreteCreator2();\n  ClientCode(*creator2);\n\n  delete creator;\n  delete creator2;\n  return 0;\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"App: Launched with the ConcreteCreator1.\nClient: I'm not aware of the creator's class, but it still works.\nCreator: The same creator's code has just worked with {Result of the ConcreteProduct1}\n\nApp: Launched with the ConcreteCreator2.\nClient: I'm not aware of the creator's class, but it still works.\nCreator: The same creator's code has just worked with {Result of the ConcreteProduct2}\n")))}d.isMDXComponent=!0}}]);