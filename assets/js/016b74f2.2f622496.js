"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8257],{3905:(e,t,i)=>{i.d(t,{Zo:()=>s,kt:()=>g});var r=i(67294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var u=r.createContext({}),m=function(e){var t=r.useContext(u),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},s=function(e){var t=m(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,a=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=m(i),g=n,d=c["".concat(u,".").concat(g)]||c[g]||p[g]||a;return i?r.createElement(d,l(l({ref:t},s),{},{components:i})):r.createElement(d,l({ref:t},s))}));function g(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=i.length,l=new Array(a);l[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var m=2;m<a;m++)l[m]=i[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,i)}c.displayName="MDXCreateElement"},38140:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>m});var r=i(87462),n=(i(67294),i(3905));const a={},l="Dynamic Programming",o={unversionedId:"interviewPrep/algorithms_and_techniques/dynamic_programming/readme",id:"interviewPrep/algorithms_and_techniques/dynamic_programming/readme",title:"Dynamic Programming",description:"- notice any overlapping subproblems",source:"@site/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/readme.md",sourceDirName:"interviewPrep/algorithms_and_techniques/dynamic_programming",slug:"/interviewPrep/algorithms_and_techniques/dynamic_programming/",permalink:"/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Merge Two Sorted Linked Lists",permalink:"/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/mergeTwoSortedLinkedLists"},next:{title:"All Construct example",permalink:"/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/allConstruct"}},u={},m=[{value:"examples",id:"examples",level:2},{value:"2 types of techniques",id:"2-types-of-techniques",level:3},{value:"Memoization technique",id:"memoization-technique",level:2},{value:"Strategies",id:"strategies",level:3},{value:"Guidelines for solving dynamic programming problems using memoization strategy",id:"guidelines-for-solving-dynamic-programming-problems-using-memoization-strategy",level:3},{value:"Tabulation technique",id:"tabulation-technique",level:2},{value:"Strategies",id:"strategies-1",level:3},{value:"Guidelines for solving dynamic programming problems using tabulation strategy",id:"guidelines-for-solving-dynamic-programming-problems-using-tabulation-strategy",level:3}],s={toc:m};function p(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,r.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"dynamic-programming"},"Dynamic Programming"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"notice any overlapping subproblems"),(0,n.kt)("li",{parentName:"ul"},"decide what is the trivially smallest input"),(0,n.kt)("li",{parentName:"ul"},"think recursively to use Memoization"),(0,n.kt)("li",{parentName:"ul"},"think iteratively to use Tabulation"),(0,n.kt)("li",{parentName:"ul"},"draw a strategy first")),(0,n.kt)("h2",{id:"examples"},"examples"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"canSum: Decision Problem"),(0,n.kt)("li",{parentName:"ul"},"howSum: Combination Problem"),(0,n.kt)("li",{parentName:"ul"},"bestSum: Optimization Problem")),(0,n.kt)("h3",{id:"2-types-of-techniques"},"2 types of techniques"),(0,n.kt)("h2",{id:"memoization-technique"},"Memoization technique"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Store subproblems and reuse it when required")),(0,n.kt)("h3",{id:"strategies"},"Strategies"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"try to think about the recursive functions in terms of a tree",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"with the tree information, you can implement brute force",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"then from there you can see where to optimize the brute force solution")))))),(0,n.kt)("h3",{id:"guidelines-for-solving-dynamic-programming-problems-using-memoization-strategy"},"Guidelines for solving dynamic programming problems using memoization strategy"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"make it work",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"visualize the problem as a tree"),(0,n.kt)("li",{parentName:"ul"},"implement the tree using recursion"),(0,n.kt)("li",{parentName:"ul"},"test it"))),(0,n.kt)("li",{parentName:"ol"},"make it efficient",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"add a memo object, key = input, value = return value"),(0,n.kt)("li",{parentName:"ul"},"add a base case to return memo values"),(0,n.kt)("li",{parentName:"ul"},"store return values into the memo before returning")))),(0,n.kt)("h2",{id:"tabulation-technique"},"Tabulation technique"),(0,n.kt)("h3",{id:"strategies-1"},"Strategies"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"instead of breaking a problem to multiple subproblems recursively, we do it iteratively",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"by building a table, which is just an array",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"create an array with 1 greater length than n input value"),(0,n.kt)("li",{parentName:"ul"},"use starting value of 0 for all elements if need to calculate a running sum"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"[0, 0, 0] if n is 2"))))))),(0,n.kt)("h3",{id:"guidelines-for-solving-dynamic-programming-problems-using-tabulation-strategy"},"Guidelines for solving dynamic programming problems using tabulation strategy"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"solution is already efficient and does not requires brute force",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"visualize the problem as a table"),(0,n.kt)("li",{parentName:"ul"},"size the table based on the inputs"),(0,n.kt)("li",{parentName:"ul"},"initialize the table with default values"),(0,n.kt)("li",{parentName:"ul"},"seed the trivial answer into the table"),(0,n.kt)("li",{parentName:"ul"},"iterate through the table"),(0,n.kt)("li",{parentName:"ul"},"fill further positions based on the current position")))))}p.isMDXComponent=!0}}]);