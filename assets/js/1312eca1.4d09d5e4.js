"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[58619],{3905:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>g});var i=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function p(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,i,r=function(n,e){if(null==n)return{};var t,i,r={},a=Object.keys(n);for(i=0;i<a.length;i++)t=a[i],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(i=0;i<a.length;i++)t=a[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=i.createContext({}),c=function(n){var e=i.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):p(p({},e),n)),t},l=function(n){var e=c(n.components);return i.createElement(s.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},d=i.forwardRef((function(n,e){var t=n.components,r=n.mdxType,a=n.originalType,s=n.parentName,l=o(n,["components","mdxType","originalType","parentName"]),d=c(t),g=r,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||a;return t?i.createElement(m,p(p({ref:e},l),{},{components:t})):i.createElement(m,p({ref:e},l))}));function g(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=t.length,p=new Array(a);p[0]=d;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=n,o.mdxType="string"==typeof n?n:r,p[1]=o;for(var c=2;c<a;c++)p[c]=t[c];return i.createElement.apply(null,p)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},30482:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=t(83117),r=(t(67294),t(3905));const a={},p="Java Example",o={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/java/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/java/readme",title:"Java Example",description:"- shapes",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/java",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Visitor/java/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/go/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/javascript/"}},s={},c=[],l={toc:c};function u(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,i.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"java-example"},"Java Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/Circle.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.visitor.example.shapes;\n\nimport refactoring_guru.visitor.example.visitor.Visitor;\n\npublic class Circle extends Dot {\n    private int radius;\n\n    public Circle(int id, int x, int y, int radius) {\n        super(id, x, y);\n        this.radius = radius;\n    }\n\n    @Override\n    public String accept(Visitor visitor) {\n        return visitor.visitCircle(this);\n    }\n\n    public int getRadius() {\n        return radius;\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/CompoundShape.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.visitor.example.shapes;\n\nimport refactoring_guru.visitor.example.visitor.Visitor;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CompoundShape implements Shape {\n    public int id;\n    public List<Shape> children = new ArrayList<>();\n\n    public CompoundShape(int id) {\n        this.id = id;\n    }\n\n    @Override\n    public void move(int x, int y) {\n        // move shape\n    }\n\n    @Override\n    public void draw() {\n        // draw shape\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    @Override\n    public String accept(Visitor visitor) {\n        return visitor.visitCompoundGraphic(this);\n    }\n\n    public void add(Shape shape) {\n        children.add(shape);\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/Dot.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.visitor.example.shapes;\n\nimport refactoring_guru.visitor.example.visitor.Visitor;\n\npublic class Dot implements Shape {\n    private int id;\n    private int x;\n    private int y;\n\n    public Dot() {\n    }\n\n    public Dot(int id, int x, int y) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n    }\n\n    @Override\n    public void move(int x, int y) {\n        // move shape\n    }\n\n    @Override\n    public void draw() {\n        // draw shape\n    }\n\n    @Override\n    public String accept(Visitor visitor) {\n        return visitor.visitDot(this);\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/Rectangle.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.visitor.example.shapes;\n\nimport refactoring_guru.visitor.example.visitor.Visitor;\n\npublic class Rectangle implements Shape {\n    private int id;\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n\n    public Rectangle(int id, int x, int y, int width, int height) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    @Override\n    public String accept(Visitor visitor) {\n        return visitor.visitRectangle(this);\n    }\n\n    @Override\n    public void move(int x, int y) {\n        // move shape\n    }\n\n    @Override\n    public void draw() {\n        // draw shape\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n\n    public int getHeight() {\n        return height;\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"shapes/Shape.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.visitor.example.shapes;\n\nimport refactoring_guru.visitor.example.visitor.Visitor;\n\npublic interface Shape {\n    void move(int x, int y);\n    void draw();\n    String accept(Visitor visitor);\n}\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"visitor"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"visitor/Visitor.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.visitor.example.visitor;\n\nimport refactoring_guru.visitor.example.shapes.Circle;\nimport refactoring_guru.visitor.example.shapes.CompoundShape;\nimport refactoring_guru.visitor.example.shapes.Dot;\nimport refactoring_guru.visitor.example.shapes.Rectangle;\n\npublic interface Visitor {\n    String visitDot(Dot dot);\n\n    String visitCircle(Circle circle);\n\n    String visitRectangle(Rectangle rectangle);\n\n    String visitCompoundGraphic(CompoundShape cg);\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"visitor/XMLExportVisitor.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.visitor.example.visitor;\n\nimport refactoring_guru.visitor.example.shapes.*;\n\npublic class XMLExportVisitor implements Visitor {\n\n    public String export(Shape... args) {\n        StringBuilder sb = new StringBuilder();\n        sb.append("<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>" + "\\n");\n        for (Shape shape : args) {\n            sb.append(shape.accept(this)).append("\\n");\n        }\n        return sb.toString();\n    }\n\n    public String visitDot(Dot d) {\n        return "<dot>" + "\\n" +\n                "    <id>" + d.getId() + "</id>" + "\\n" +\n                "    <x>" + d.getX() + "</x>" + "\\n" +\n                "    <y>" + d.getY() + "</y>" + "\\n" +\n                "</dot>";\n    }\n\n    public String visitCircle(Circle c) {\n        return "<circle>" + "\\n" +\n                "    <id>" + c.getId() + "</id>" + "\\n" +\n                "    <x>" + c.getX() + "</x>" + "\\n" +\n                "    <y>" + c.getY() + "</y>" + "\\n" +\n                "    <radius>" + c.getRadius() + "</radius>" + "\\n" +\n                "</circle>";\n    }\n\n    public String visitRectangle(Rectangle r) {\n        return "<rectangle>" + "\\n" +\n                "    <id>" + r.getId() + "</id>" + "\\n" +\n                "    <x>" + r.getX() + "</x>" + "\\n" +\n                "    <y>" + r.getY() + "</y>" + "\\n" +\n                "    <width>" + r.getWidth() + "</width>" + "\\n" +\n                "    <height>" + r.getHeight() + "</height>" + "\\n" +\n                "</rectangle>";\n    }\n\n    public String visitCompoundGraphic(CompoundShape cg) {\n        return "<compound_graphic>" + "\\n" +\n                "   <id>" + cg.getId() + "</id>" + "\\n" +\n                _visitCompoundGraphic(cg) +\n                "</compound_graphic>";\n    }\n\n    private String _visitCompoundGraphic(CompoundShape cg) {\n        StringBuilder sb = new StringBuilder();\n        for (Shape shape : cg.children) {\n            String obj = shape.accept(this);\n            // Proper indentation for sub-objects.\n            obj = "    " + obj.replace("\\n", "\\n    ") + "\\n";\n            sb.append(obj);\n        }\n        return sb.toString();\n    }\n\n}\n'))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Demo.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.visitor.example;\n\nimport refactoring_guru.visitor.example.shapes.*;\nimport refactoring_guru.visitor.example.visitor.XMLExportVisitor;\n\npublic class Demo {\n    public static void main(String[] args) {\n        Dot dot = new Dot(1, 10, 55);\n        Circle circle = new Circle(2, 23, 15, 10);\n        Rectangle rectangle = new Rectangle(3, 10, 17, 20, 30);\n\n        CompoundShape compoundShape = new CompoundShape(4);\n        compoundShape.add(dot);\n        compoundShape.add(circle);\n        compoundShape.add(rectangle);\n\n        CompoundShape c = new CompoundShape(5);\n        c.add(dot);\n        compoundShape.add(c);\n\n        export(circle, compoundShape);\n    }\n\n    private static void export(Shape... shapes) {\n        XMLExportVisitor exportVisitor = new XMLExportVisitor();\n        System.out.println(exportVisitor.export(shapes));\n    }\n}\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="utf-8"?>\n<circle>\n    <id>2</id>\n    <x>23</x>\n    <y>15</y>\n    <radius>10</radius>\n</circle>\n\n<?xml version="1.0" encoding="utf-8"?>\n<compound_graphic>\n  <id>4</id>\n    <dot>\n        <id>1</id>\n        <x>10</x>\n        <y>55</y>\n    </dot>\n    <circle>\n        <id>2</id>\n        <x>23</x>\n        <y>15</y>\n        <radius>10</radius>\n    </circle>\n    <rectangle>\n        <id>3</id>\n        <x>10</x>\n        <y>17</y>\n        <width>20</width>\n        <height>30</height>\n    </rectangle>\n    <compound_graphic>\n      <id>5</id>\n        <dot>\n            <id>1</id>\n            <x>10</x>\n            <y>55</y>\n        </dot>\n    </compound_graphic>\n</compound_graphic>\n')))))}u.isMDXComponent=!0}}]);