"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[71738],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>b});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(t),b=a,h=d["".concat(l,".").concat(b)]||d[b]||p[b]||i;return t?r.createElement(h,s(s({ref:n},u),{},{components:t})):r.createElement(h,s({ref:n},u))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},78591:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(83117),a=(t(67294),t(3905));const i={},s="JavaScript",o={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Adapter/javascript/readme",id:"interviewPrep/designPatterns/Structural_patterns/Adapter/javascript/readme",title:"JavaScript",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/javascript/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Adapter/javascript",slug:"/interviewPrep/designPatterns/Structural_patterns/Adapter/javascript/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/javascript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/javascript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/java/"},next:{title:"Python Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/python/"}},l={},c=[],u={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"javascript"},"JavaScript"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"class Db {\n  constructor(db) {\n    this.db = db;\n  }\n  init(collection) {\n    return this.db.defaults({[collection]: []}).write();\n  }\n  add({collection, data}) {\n    return this.db.get(collection).push(data).write();\n  }\n  get(collection) {\n    return this.db.get(collection).value();\n  }\n}\n\nmodule.exports = Db;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'class LokiAdapter {\n  constructor(lokiDb) {\n    this.lokiDb = lokiDb;\n    this.collection = null;\n    this.op = null;\n  }\n  defaults(obj) {\n    this.collection = Object.keys(obj)[0];\n    this.op = "INIT";\n    return this;\n  }\n  get(collection) {\n    this.collection = this.lokiDb.getCollection(collection);\n    return this;\n  }\n  push(data) {\n    this.dataToPush = data;\n    this.op = "WRITE";\n    return this;\n  }\n  value() {\n    return this.collection.find();\n  }\n  write() {\n    if (this.op) {\n      switch (this.op) {\n        case "INIT":\n          this.lokiDb.addCollection(this.collection);\n          this.collection = null;\n          this.op = null;\n          break;\n        case "WRITE":\n          this.collection.insert(this.dataToPush);\n          this.dataToPush = null;\n          this.collection = null;\n          this.op = null;\n          break;\n      }\n\n      this.lokiDb.saveDatabase();\n    }\n\n    return this;\n  }\n}\n\nmodule.exports = LokiAdapter;\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "filename": "dbs.json",\n  "collections": [\n    {\n      "name": "users",\n      "data": [\n        {\n          "name": "John Doe",\n          "age": 32,\n          "meta": {"revision": 0, "created": 1608665527485, "version": 0},\n          "$loki": 1\n        }\n      ],\n      "idIndex": null,\n      "binaryIndices": {},\n      "constraints": null,\n      "uniqueNames": [],\n      "transforms": {},\n      "objType": "users",\n      "dirty": false,\n      "cachedIndex": null,\n      "cachedBinaryIndex": null,\n      "cachedData": null,\n      "adaptiveBinaryIndices": true,\n      "transactional": false,\n      "cloneObjects": false,\n      "cloneMethod": "parse-stringify",\n      "asyncListeners": false,\n      "disableMeta": false,\n      "disableChangesApi": true,\n      "disableDeltaChangesApi": true,\n      "autoupdate": false,\n      "serializableIndices": true,\n      "disableFreeze": true,\n      "ttl": null,\n      "maxId": 1,\n      "DynamicViews": [],\n      "events": {\n        "insert": [],\n        "update": [],\n        "pre-insert": [],\n        "pre-update": [],\n        "close": [],\n        "flushbuffer": [],\n        "error": [],\n        "delete": [null],\n        "warning": [null]\n      },\n      "changes": [],\n      "dirtyIds": []\n    }\n  ],\n  "databaseVersion": 1.5,\n  "engineVersion": 1.5,\n  "autosave": false,\n  "autosaveInterval": 5000,\n  "autosaveHandle": null,\n  "throttledSaves": true,\n  "options": {"serializationMethod": "normal", "destructureDelimiter": "$<\\n"},\n  "persistenceMethod": "fs",\n  "persistenceAdapter": null,\n  "verbose": false,\n  "events": {\n    "init": [null],\n    "loaded": [],\n    "flushChanges": [],\n    "close": [],\n    "changes": [],\n    "warning": []\n  },\n  "ENV": "NODEJS"\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const Db = require("./Db");\nconst {join} = require("path");\n\n// Database File\nconst dbFile = join("dbs.json");\n\n// old class\n// LowDB\n// const low = require("lowdb");\n// const FileSync = require("lowdb/adapters/FileSync");\n// const adapter = new FileSync(dbFile);\n// const dbs = low(adapter);\n\n// DB module instance\n// const db = new Db(dbs);\n\n// new class\n// LokiJS\nconst loki = require("lokijs");\nconst LokiAdapter = require("./LokiAdapter");\nconst ldb = new loki(dbFile);\nconst LokiAdp = new LokiAdapter(ldb);\n\n// DB module instance\nconst db = new Db(LokiAdp);\n\ndb.init("users");\ndb.add({\n  collection: "users",\n  data: {\n    name: "John Doe",\n    age: 32,\n  },\n});\n\nconsole.log(db.get("users"));\n')))}p.isMDXComponent=!0}}]);