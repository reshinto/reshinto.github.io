"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9333],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),b=l(n),h=o,d=b["".concat(s,".").concat(h)]||b[h]||p[h]||a;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},81303:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(83117),o=(n(67294),n(3905));const a={},i="C# Example",c={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Proxy/cSharp/readme",id:"interviewPrep/designPatterns/Structural_patterns/Proxy/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Proxy/cSharp",slug:"/interviewPrep/designPatterns/Structural_patterns/Proxy/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/go/"}},s={},l=[],u={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"c-example"},"C# Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'// Proxy Design Pattern\n//\n// Intent: Lets you provide a substitute or placeholder for another object. A\n// proxy controls access to the original object, allowing you to perform\n// something either before or after the request gets through to the original\n// object.\n\nusing System;\n\nnamespace RefactoringGuru.DesignPatterns.Proxy.Conceptual\n{\n    // The Subject interface declares common operations for both RealSubject and\n    // the Proxy. As long as the client works with RealSubject using this\n    // interface, you\'ll be able to pass it a proxy instead of a real subject.\n    public interface ISubject\n    {\n        void Request();\n    }\n\n    // The RealSubject contains some core business logic. Usually, RealSubjects\n    // are capable of doing some useful work which may also be very slow or\n    // sensitive - e.g. correcting input data. A Proxy can solve these issues\n    // without any changes to the RealSubject\'s code.\n    class RealSubject : ISubject\n    {\n        public void Request()\n        {\n            Console.WriteLine("RealSubject: Handling Request.");\n        }\n    }\n\n    // The Proxy has an interface identical to the RealSubject.\n    class Proxy : ISubject\n    {\n        private RealSubject _realSubject;\n\n        public Proxy(RealSubject realSubject)\n        {\n            this._realSubject = realSubject;\n        }\n\n        // The most common applications of the Proxy pattern are lazy loading,\n        // caching, controlling the access, logging, etc. A Proxy can perform\n        // one of these things and then, depending on the result, pass the\n        // execution to the same method in a linked RealSubject object.\n        public void Request()\n        {\n            if (this.CheckAccess())\n            {\n                this._realSubject.Request();\n\n                this.LogAccess();\n            }\n        }\n\n        public bool CheckAccess()\n        {\n            // Some real checks should go here.\n            Console.WriteLine("Proxy: Checking access prior to firing a real request.");\n\n            return true;\n        }\n\n        public void LogAccess()\n        {\n            Console.WriteLine("Proxy: Logging the time of request.");\n        }\n    }\n\n    public class Client\n    {\n        // The client code is supposed to work with all objects (both subjects\n        // and proxies) via the Subject interface in order to support both real\n        // subjects and proxies. In real life, however, clients mostly work with\n        // their real subjects directly. In this case, to implement the pattern\n        // more easily, you can extend your proxy from the real subject\'s class.\n        public void ClientCode(ISubject subject)\n        {\n            // ...\n\n            subject.Request();\n\n            // ...\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Client client = new Client();\n\n            Console.WriteLine("Client: Executing the client code with a real subject:");\n            RealSubject realSubject = new RealSubject();\n            client.ClientCode(realSubject);\n\n            Console.WriteLine();\n\n            Console.WriteLine("Client: Executing the same client code with a proxy:");\n            Proxy proxy = new Proxy(realSubject);\n            client.ClientCode(proxy);\n        }\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Client: Executing the client code with a real subject:\nRealSubject: Handling Request.\n\nClient: Executing the same client code with a proxy:\nProxy: Checking access prior to firing a real request.\nRealSubject: Handling Request.\nProxy: Logging the time of request.\n")))}p.isMDXComponent=!0}}]);