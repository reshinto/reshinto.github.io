"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[34508],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),p=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return i.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},b=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(n),d=r,g=b["".concat(c,".").concat(d)]||b[d]||u[d]||a;return n?i.createElement(g,o(o({ref:t},l),{},{components:n})):i.createElement(g,o({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}b.displayName="MDXCreateElement"},23274:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var i=n(83117),r=(n(67294),n(3905));const a={},o="C# Example",s={unversionedId:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/cSharp/readme",id:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/cSharp/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/cSharp",slug:"/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/cSharp/",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Liskov Substitution Principle (LSP)",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/javascript/"}},c={},p=[],l={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"c-example"},"C# Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\nLiskov Substitution Principle\n\n- should be able to substitute a base type for a subtype\n*/\n\npublic class Rectangle {\n  //public int Width { get; set; }\n  //public int Height { get; set; }\n  public virtual int Width { get; set; }\n  public virtual int Height { get; set; }\n\n  public Rectangle() {}\n\n  public Rectangle(int width, int height) {\n    Width = width;\n    Height = height;\n  }\n\n  public override string ToString() {\n    return $"{nameof(Width)}: {Width}, {nameof(Height)}: {Height}";\n  }\n}\n\npublic class Square : Rectangle {\n  //public new int Width {\n  //  set { base.Width = base.Height = value; }\n  //}\n\n  //public new int Height {\n  //  set { base.Width = base.Height = value; }\n  //}\n  public override int Width {\n    set { base.Width = base.Height = value; }\n  }\n\n  public override int Height {\n    set { base.Width = base.Height = value; }\n  }\n}\n\npublic class Program {\n  public static int Area(Rectangle r) => r.Width * r.Height;\n\n  public static void Main() {\n    Rectangle rc = new Rectangle();\n    System.Console.WriteLine($"{rc} has area {Area(rc)}");\n\n    // should be able to substitute a base type for a subtype\n    //Square sq = new Square();\n    Rectangle sq = new Square();\n    sq.Width = 4;\n    System.Console.WriteLine($"{sq} has area {Area(sq)}");\n  }\n}\n')))}u.isMDXComponent=!0}}]);