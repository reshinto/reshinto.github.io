"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[36497],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),y=a,h=d["".concat(l,".").concat(y)]||d[y]||g[y]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},77874:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(83117),a=(n(67294),n(3905));const o={},i="Python Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/python/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/python",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Strategy/python/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/javascript/"},next:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/swift/"}},l={},c=[],p={toc:c};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python-example"},"Python Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'"""\nStrategy Design Pattern\n\nIntent: Lets you define a family of algorithms, put each of them into a separate\nclass, and make their objects interchangeable.\n"""\n\n\nfrom __future__ import annotations\nfrom abc import ABC, abstractmethod\nfrom typing import List\n\n\nclass Context():\n    """\n    The Context defines the interface of interest to clients.\n    """\n\n    def __init__(self, strategy: Strategy) -> None:\n        """\n        Usually, the Context accepts a strategy through the constructor, but\n        also provides a setter to change it at runtime.\n        """\n\n        self._strategy = strategy\n\n    @property\n    def strategy(self) -> Strategy:\n        """\n        The Context maintains a reference to one of the Strategy objects. The\n        Context does not know the concrete class of a strategy. It should work\n        with all strategies via the Strategy interface.\n        """\n\n        return self._strategy\n\n    @strategy.setter\n    def strategy(self, strategy: Strategy) -> None:\n        """\n        Usually, the Context allows replacing a Strategy object at runtime.\n        """\n\n        self._strategy = strategy\n\n    def do_some_business_logic(self) -> None:\n        """\n        The Context delegates some work to the Strategy object instead of\n        implementing multiple versions of the algorithm on its own.\n        """\n\n        # ...\n\n        print("Context: Sorting data using the strategy (not sure how it\'ll do it)")\n        result = self._strategy.do_algorithm(["a", "b", "c", "d", "e"])\n        print(",".join(result))\n\n        # ...\n\n\nclass Strategy(ABC):\n    """\n    The Strategy interface declares operations common to all supported versions\n    of some algorithm.\n\n    The Context uses this interface to call the algorithm defined by Concrete\n    Strategies.\n    """\n\n    @abstractmethod\n    def do_algorithm(self, data: List):\n        pass\n\n\n"""\nConcrete Strategies implement the algorithm while following the base Strategy\ninterface. The interface makes them interchangeable in the Context.\n"""\n\n\nclass ConcreteStrategyA(Strategy):\n    def do_algorithm(self, data: List) -> List:\n        return sorted(data)\n\n\nclass ConcreteStrategyB(Strategy):\n    def do_algorithm(self, data: List) -> List:\n        return reversed(sorted(data))\n\n\nif __name__ == "__main__":\n    # The client code picks a concrete strategy and passes it to the context.\n    # The client should be aware of the differences between strategies in order\n    # to make the right choice.\n\n    context = Context(ConcreteStrategyA())\n    print("Client: Strategy is set to normal sorting.")\n    context.do_some_business_logic()\n    print()\n\n    print("Client: Strategy is set to reverse sorting.")\n    context.strategy = ConcreteStrategyB()\n    context.do_some_business_logic()\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Client: Strategy is set to normal sorting.\nContext: Sorting data using the strategy (not sure how it'll do it)\na,b,c,d,e\n\nClient: Strategy is set to reverse sorting.\nContext: Sorting data using the strategy (not sure how it'll do it)\ne,d,c,b,a\n")))}g.isMDXComponent=!0}}]);