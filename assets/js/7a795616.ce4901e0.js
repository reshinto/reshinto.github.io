"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[14178],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),a=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=a(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,u=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=a(n),d=i,f=m["".concat(c,".").concat(d)]||m[d]||l[d]||u;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var u=n.length,s=new Array(u);s[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var a=2;a<u;a++)s[a]=n[a];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},26427:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>u,metadata:()=>o,toc:()=>a});var r=n(83117),i=(n(67294),n(3905));const u={},s="Queue Example",o={unversionedId:"interviewPrep/data_structures/10StacksAndQueues/typescript/queue",id:"interviewPrep/data_structures/10StacksAndQueues/typescript/queue",title:"Queue Example",description:"",source:"@site/docs/interviewPrep/data_structures/10StacksAndQueues/typescript/queue.md",sourceDirName:"interviewPrep/data_structures/10StacksAndQueues/typescript",slug:"/interviewPrep/data_structures/10StacksAndQueues/typescript/queue",permalink:"/docs/interviewPrep/data_structures/10StacksAndQueues/typescript/queue",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/data_structures/10StacksAndQueues/typescript/queue.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Priority Queue Array Example",permalink:"/docs/interviewPrep/data_structures/10StacksAndQueues/typescript/priorityQueueArray"},next:{title:"Stack Example",permalink:"/docs/interviewPrep/data_structures/10StacksAndQueues/typescript/stack"}},c={},a=[],p={toc:a};function l(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"queue-example"},"Queue Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'class Queue<T> {\n  private count: number;\n  private lowestCount: number;\n  private items: Map<number, T>;\n\n  constructor() {\n    this.count = 0;\n    this.lowestCount = 0;\n    this.items = new Map();\n  }\n\n  /**\n   * @description: Enqueue in the count direction (bottom of the queue)\n   * @param {T} element\n   */\n  public enqueue(element: T): void {\n    this.items.set(this.count, element);\n    this.count++;\n  }\n\n  /**\n   * @description: Dequeue in the direction of lowestCount (top of queue)\n   * @return {T} element\n   */\n  public dequeue(): T {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    const result: T = this.items.get(this.lowestCount);\n    this.items.delete(this.lowestCount);\n    this.lowestCount++;\n    return result;\n  }\n\n  /**\n   * @description: Returns the element at the top of the queue\n   * @return {T} element\n   */\n  public peek(): T {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    return this.items.get(this.lowestCount);\n  }\n\n  /**\n   * @description: Returns whether the queue is empty\n   * @return {Boolean}\n   */\n  public isEmpty(): boolean {\n    return this.items.size === 0;\n  }\n\n  /**\n   * @description: empty the queue\n   */\n  public clear(): void {\n    this.items = new Map();\n    this.count = 0;\n    this.lowestCount = 0;\n  }\n\n  /**\n   * @description: Returns the number of queue elements\n   * @return {Number}\n   */\n  public size(): number {\n    return this.items.size;\n  }\n\n  /**\n   * @description: Override Object\'s default toString\n   * @return {String}\n   */\n  public toString(): string {\n    if (this.isEmpty()) {\n      return "";\n    }\n    let objString: string = `${this.items.get(this.lowestCount)}`;\n    for (let i = this.lowestCount + 1; i < this.count; i++) {\n      objString = `${objString},${this.items.get(i)}`;\n    }\n    return objString;\n  }\n}\n')))}l.isMDXComponent=!0}}]);