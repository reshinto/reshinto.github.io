"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[39267],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),h=a,v=d["".concat(c,".").concat(h)]||d[h]||u[h]||o;return n?r.createElement(v,s(s({ref:t},p),{},{components:n})):r.createElement(v,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2165:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(83117),a=(n(67294),n(3905));const o={},s="C++ Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/State/cPlusPlus/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/State/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/State/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/State/cPlusPlus",slug:"/interviewPrep/designPatterns/Behavioral_patterns/State/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/State/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"State",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/cSharp/"}},c={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-example"},"C++ Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <typeinfo>\n/**\n * State Design Pattern\n *\n * Intent: Lets an object alter its behavior when its internal state changes. It\n * appears as if the object changed its class.\n */\n\n/**\n * The base State class declares methods that all Concrete State should\n * implement and also provides a backreference to the Context object, associated\n * with the State. This backreference can be used by States to transition the\n * Context to another State.\n */\n\nclass Context;\n\nclass State {\n  /**\n   * @var Context\n   */\n protected:\n  Context *context_;\n\n public:\n  virtual ~State() {\n  }\n\n  void set_context(Context *context) {\n    this->context_ = context;\n  }\n\n  virtual void Handle1() = 0;\n  virtual void Handle2() = 0;\n};\n\n/**\n * The Context defines the interface of interest to clients. It also maintains a\n * reference to an instance of a State subclass, which represents the current\n * state of the Context.\n */\nclass Context {\n  /**\n   * @var State A reference to the current state of the Context.\n   */\n private:\n  State *state_;\n\n public:\n  Context(State *state) : state_(nullptr) {\n    this->TransitionTo(state);\n  }\n  ~Context() {\n    delete state_;\n  }\n  /**\n   * The Context allows changing the State object at runtime.\n   */\n  void TransitionTo(State *state) {\n    std::cout << "Context: Transition to " << typeid(*state).name() << ".\\n";\n    if (this->state_ != nullptr)\n      delete this->state_;\n    this->state_ = state;\n    this->state_->set_context(this);\n  }\n  /**\n   * The Context delegates part of its behavior to the current State object.\n   */\n  void Request1() {\n    this->state_->Handle1();\n  }\n  void Request2() {\n    this->state_->Handle2();\n  }\n};\n\n/**\n * Concrete States implement various behaviors, associated with a state of the\n * Context.\n */\n\nclass ConcreteStateA : public State {\n public:\n  void Handle1() override;\n\n  void Handle2() override {\n    std::cout << "ConcreteStateA handles request2.\\n";\n  }\n};\n\nclass ConcreteStateB : public State {\n public:\n  void Handle1() override {\n    std::cout << "ConcreteStateB handles request1.\\n";\n  }\n  void Handle2() override {\n    std::cout << "ConcreteStateB handles request2.\\n";\n    std::cout << "ConcreteStateB wants to change the state of the context.\\n";\n    this->context_->TransitionTo(new ConcreteStateA);\n  }\n};\n\nvoid ConcreteStateA::Handle1() {\n  {\n    std::cout << "ConcreteStateA handles request1.\\n";\n    std::cout << "ConcreteStateA wants to change the state of the context.\\n";\n\n    this->context_->TransitionTo(new ConcreteStateB);\n  }\n}\n\n/**\n * The client code.\n */\nvoid ClientCode() {\n  Context *context = new Context(new ConcreteStateA);\n  context->Request1();\n  context->Request2();\n  delete context;\n}\n\nint main() {\n  ClientCode();\n  return 0;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Context: Transition to 14ConcreteStateA.\nConcreteStateA handles request1.\nConcreteStateA wants to change the state of the context.\nContext: Transition to 14ConcreteStateB.\nConcreteStateB handles request2.\nConcreteStateB wants to change the state of the context.\nContext: Transition to 14ConcreteStateA.\n")))}u.isMDXComponent=!0}}]);