"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[4697],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,b=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return n?r.createElement(b,o(o({ref:t},p),{},{components:n})):r.createElement(b,o({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},20109:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(83117),i=(n(67294),n(3905));const a={},o="C++ Example",s={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Bridge/cPlusPlus/readme",id:"interviewPrep/designPatterns/Structural_patterns/Bridge/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Bridge/cPlusPlus",slug:"/interviewPrep/designPatterns/Structural_patterns/Bridge/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Bridge",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Bridge/cSharp/"}},l={},c=[],p={toc:c};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"c-example"},"C++ Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n\n/**\n * Bridge Design Pattern\n *\n * Intent: Lets you split a large class or a set of closely related classes into\n * two separate hierarchies\u2014abstraction and implementation\u2014which can be\n * developed independently of each other.\n *\n *               A\n *            /     \\                        A         N\n *          Aa      Ab        ===>        /     \\     / \\\n *         / \\     /  \\                 Aa(N) Ab(N)  1   2\n *       Aa1 Aa2  Ab1 Ab2\n */\n\n/**\n * The Implementation defines the interface for all implementation classes. It\n * doesn\'t have to match the Abstraction\'s interface. In fact, the two\n * interfaces can be entirely different. Typically the Implementation interface\n * provides only primitive operations, while the Abstraction defines higher-\n * level operations based on those primitives.\n */\n\nclass Implementation {\n public:\n  virtual ~Implementation() {}\n  virtual std::string OperationImplementation() const = 0;\n};\n\n/**\n * Each Concrete Implementation corresponds to a specific platform and\n * implements the Implementation interface using that platform\'s API.\n */\nclass ConcreteImplementationA : public Implementation {\n public:\n  std::string OperationImplementation() const override {\n    return "ConcreteImplementationA: Here\'s the result on the platform A.\\n";\n  }\n};\nclass ConcreteImplementationB : public Implementation {\n public:\n  std::string OperationImplementation() const override {\n    return "ConcreteImplementationB: Here\'s the result on the platform B.\\n";\n  }\n};\n\n/**\n * The Abstraction defines the interface for the "control" part of the two class\n * hierarchies. It maintains a reference to an object of the Implementation\n * hierarchy and delegates all of the real work to this object.\n */\n\nclass Abstraction {\n  /**\n   * @var Implementation\n   */\n protected:\n  Implementation* implementation_;\n\n public:\n  Abstraction(Implementation* implementation) : implementation_(implementation) {\n  }\n\n  virtual ~Abstraction() {\n  }\n\n  virtual std::string Operation() const {\n    return "Abstraction: Base operation with:\\n" +\n           this->implementation_->OperationImplementation();\n  }\n};\n/**\n * You can extend the Abstraction without changing the Implementation classes.\n */\nclass ExtendedAbstraction : public Abstraction {\n public:\n  ExtendedAbstraction(Implementation* implementation) : Abstraction(implementation) {\n  }\n  std::string Operation() const override {\n    return "ExtendedAbstraction: Extended operation with:\\n" +\n           this->implementation_->OperationImplementation();\n  }\n};\n\n/**\n * Except for the initialization phase, where an Abstraction object gets linked\n * with a specific Implementation object, the client code should only depend on\n * the Abstraction class. This way the client code can support any abstraction-\n * implementation combination.\n */\nvoid ClientCode(const Abstraction& abstraction) {\n  // ...\n  std::cout << abstraction.Operation();\n  // ...\n}\n/**\n * The client code should be able to work with any pre-configured abstraction-\n * implementation combination.\n */\n\nint main() {\n  Implementation* implementation = new ConcreteImplementationA;\n  Abstraction* abstraction = new Abstraction(implementation);\n  ClientCode(*abstraction);\n  std::cout << std::endl;\n  delete implementation;\n  delete abstraction;\n\n  implementation = new ConcreteImplementationB;\n  abstraction = new ExtendedAbstraction(implementation);\n  ClientCode(*abstraction);\n\n  delete implementation;\n  delete abstraction;\n\n  return 0;\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Abstraction: Base operation with:\nConcreteImplementationA: Here's the result on the platform A.\n\nExtendedAbstraction: Extended operation with:\nConcreteImplementationB: Here's the result on the platform B.\n")))}m.isMDXComponent=!0}}]);