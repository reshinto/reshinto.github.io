"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[1456],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(t),d=a,_=p["".concat(s,".").concat(d)]||p[d]||m[d]||l;return t?i.createElement(_,r(r({ref:n},c),{},{components:t})):i.createElement(_,r({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var u=2;u<l;u++)r[u]=t[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},59842:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var i=t(87462),a=(t(67294),t(3905));const l={},r="Fibonacci example",o={unversionedId:"interviewPrep/algorithms_and_techniques/dynamic_programming/fibonacci",id:"interviewPrep/algorithms_and_techniques/dynamic_programming/fibonacci",title:"Fibonacci example",description:"- calculate the 40th number of the fibonacci sequence",source:"@site/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/fibonacci.md",sourceDirName:"interviewPrep/algorithms_and_techniques/dynamic_programming",slug:"/interviewPrep/algorithms_and_techniques/dynamic_programming/fibonacci",permalink:"/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/fibonacci",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/fibonacci.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Count Construct example",permalink:"/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/countConstruct"},next:{title:"Grid Traveler example",permalink:"/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/gridTraveler"}},s={},u=[{value:"Naive solution",id:"naive-solution",level:2},{value:"Memoization solution",id:"memoization-solution",level:2},{value:"Tabulation solution",id:"tabulation-solution",level:2}],c={toc:u};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"fibonacci-example"},"Fibonacci example"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"calculate the 40th number of the fibonacci sequence")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Write a function `fib(n)` that takes in a number as an argument.\nThe function should return the n-th number of the Fibonacci sequence.\n\nThe 1st and 2nd number of the sequence is 1. OR 1st is 0 and 2nd number is 1\nTo generate the next number of the sequence, we sum the previous two.\n\nn:      1, 2, 3, 4, 5, 6, 7,  8,  9, ...\nfib(n): 1, 1, 2, 3, 5, 8, 13, 21, 32, ...\n\nor\nn:      1, 2, 3, 4, 5, 6, 7,  8,  9, ...\nfib(n): 0, 1, 1, 2, 3, 5, 8, 13, 21, ...\n")),(0,a.kt)("h2",{id:"naive-solution"},"Naive solution"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"time complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(2^n)")),(0,a.kt)("li",{parentName:"ul"},"space complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// if fib starts with 1\nconst fib = (n) => {\n  if (n <= 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\nconsole.log(fib(6)); // 8\nconsole.log(fib(7)); // 13\nconsole.log(fib(8)); // 21\nconsole.log(fib(50)); // 12,586,269,025, will take very long to compute\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"graph display of what goes behind the hood during `fib(7)`\neach number of 2 or 1 will return the value of 1\nvalue both child will add up and be returned to the parent\nthis goes on up the tree to give the final value of 13\n\n                      7\n                /            \\\n          6                        5\n        /    \\                   /    \\\n     5           4           4           3\n    / \\         / \\         / \\         / \\\n  4     3     3     2     3     2     2     1\n  /\\    /\\    /\\         /\\\n 3  2  2  1  2  1       2  1\n /\\\n2  1\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"breaking down fibonacci time complexity",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"this will return ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)")," time complexity"),(0,a.kt)("li",{parentName:"ul"},"this will also return ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)")," space complexity as it has n times function calls added to the stack")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const foo = (n) => {\n  if (n <= 2) return;\n  foo(n - 1);\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"graph display when n is 5\n\n5 -> 4 -> 3 -> 2 -> 1\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"this will return ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n/2)")," time complexity which is the same as ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)")," by removing the constant"),(0,a.kt)("li",{parentName:"ul"},"this will also return ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n/2)")," space complexity as it has ",(0,a.kt)("inlineCode",{parentName:"li"},"n/2")," times function calls added to the stack",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"becomes ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)")," after removing the constant")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const bar = (n) => {\n  if (n <= 1) return;\n  bar(n - 2);\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"graph display when n is 5\n\n5 -> 3 -> 1\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"this will return ",(0,a.kt)("inlineCode",{parentName:"li"},"O(2^n)")," time complexity because at each level it would call the function 2 times from its parent node"),(0,a.kt)("li",{parentName:"ul"},"this will also return ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)")," space complexity as it only has n level of function calls each time",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"the function that has already been called would be removed, thus not contributing to the space complexity")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const dib = (n) => {\n  if (n <= 1) return;\n  dib(n - 1);\n  dib(n - 1);\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"graph display when n is 5 which is also the number of levels for this case\n\n                5                                   1\n           /          \\\n        4                  4                        * 2\n    /       \\             /    \\\n   3          3        3         3                  * 2\n  /  \\       /  \\     /  \\      /  \\\n 2    2     2    2   2    2    2    2               * 2\n /\\   /\\   /\\   /\\   /\\   /\\   /\\   /\\\n1  1 1  1 1  1 1  1 1  1 1  1 1  1 1  1             * 2\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"this will return ",(0,a.kt)("inlineCode",{parentName:"li"},"O(2^(n/2))")," time complexity because at each level it would call the function 2 times from its parent node",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"and it will reduce by 2 levels, so after simplifying it becomes ",(0,a.kt)("inlineCode",{parentName:"li"},"O(2^n)")))),(0,a.kt)("li",{parentName:"ul"},"this will also return ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n/2)")," space complexity as it only has n level of function calls",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"and will also reduce by 2 level each time, so after simplifying it becomes ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)")),(0,a.kt)("li",{parentName:"ul"},"the function that has already been called would be removed, thus not contributing to the space complexity")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const lib = (n) => {\n  if (n <= 1) return;\n  lib(n - 2);\n  lib(n - 2);\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"graph display when n is 5 which is also the number of levels for this case\n\n        5                          1\n     /     \\\n   3        3                      * 2\n /   \\    /    \\\n1     1  1      1                  * 2\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"therefore the complexity of fib is",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"time: ",(0,a.kt)("inlineCode",{parentName:"li"},"O(dib) <= O(fib) <= O(lib)"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"O(2^n) <= O(???) <= O(2^n)")," thus fib is also ",(0,a.kt)("inlineCode",{parentName:"li"},"O(2^n)")))))),(0,a.kt)("li",{parentName:"ul"},"count the number of different ways to move through a 6x9 grid"),(0,a.kt)("li",{parentName:"ul"},"given a set of coins, how can we make 27 cents in the least number of coins"),(0,a.kt)("li",{parentName:"ul"},'given a set of substrings, what are the possible ways to construct the string "potentpot"')),(0,a.kt)("h2",{id:"memoization-solution"},"Memoization solution"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"time complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(2n)"),", simplified to ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)")),(0,a.kt)("li",{parentName:"ul"},"space complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// memoization\n// js object, keys will be arg to functoin, value will be the return value\n\n// if fib starts with 1\nconst fib = (n, memo = {}) => {\n  if (n in memo) return memo[n];\n  if (n <= 2) return 1;\n  memo[n] = fib(n - 1, memo) + fib(n - 2, memo);\n  return memo[n];\n};\n\nconsole.log(fib(6)); // 8\nconsole.log(fib(7)); // 13\nconsole.log(fib(8)); // 21\nconsole.log(fib(50)); // 12,586,269,025, will take very fast to compute\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// change to memo = {1: 0, 2: 1} if fib starts with 0\nconst fib = (n, memo = {1: 1, 2: 1}) => {\n  if (n in memo) return memo[n];\n  memo[n] = fib(n - 1, memo) + fib(n - 2, memo);\n  return memo[n];\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"graph display of what goes behind the hood during `fib(7)` with memoization\nvalues that has already been stored in the memo will be used and does not requires computation\n\nmemo\n{\n  3: 2,\n  4: 3,\n  5: 5,\n  6: 8,\n  7, 13\n}\n\n          7\n         / \\\n        6   5\n       / \\\n      5   4\n     / \\\n    4    3\n   / \\\n  3  2\n / \\\n2   1\n")),(0,a.kt)("h2",{id:"tabulation-solution"},"Tabulation solution"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"start index 1 value of 1",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"[0, 1, 0] if n is 2"))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fib(6) -> 8\nstart current position at index 0\n\nindex: 0, 1, 2, 3, 4, 5, 6\nvalue: 0, 1, 0, 0, 0, 0, 0\n\nwhen current position is at index 0, value at index 1 and index 2 needs to add index 0 value\n\nresults:\nindex: 0,  1,   2,  3, 4, 5, 6\nvalue: 0, 1+0, 0+0, 0, 0, 0, 0\n_______________________________\ncurrent position at index 1\n\nindex: 0, 1, 2, 3, 4, 5, 6\nvalue: 0, 1, 0, 0, 0, 0, 0\n\nwhen current position is at index 1, value at index 2 and index 3 needs to add index 1 value\n\nresults:\nindex: 0, 1,  2,   3,  4, 5, 6\nvalue: 0, 1, 0+1, 0+1, 0, 0, 0\n_______________________________\ncurrent position at index 2\n\nindex: 0, 1, 2, 3, 4, 5, 6\nvalue: 0, 1, 1, 1, 0, 0, 0\n\nwhen current position is at index 2, value at index 3 and index 4 needs to add index 2 value\n\nresults:\nindex: 0, 1,  2,  3,   4,  5, 6\nvalue: 0, 1,  1, 1+1, 0+1, 0, 0\n_______________________________\ncurrent position at index 3\n\nindex: 0, 1, 2, 3, 4, 5, 6\nvalue: 0, 1, 1, 2, 1, 0, 0\n\nwhen current position is at index 3, value at index 4 and index 5 needs to add index 3 value\n\nresults:\nindex: 0, 1,  2, 3,  4,  5,   6\nvalue: 0, 1,  1, 2, 1+2, 0+2, 0\n_______________________________\ncurrent position at index 4\n\nindex: 0, 1, 2, 3, 4, 5, 6\nvalue: 0, 1, 1, 2, 3, 2, 0\n\nwhen current position is at index 4, value at index 5 and index 6 needs to add index 4 value\n\nresults:\nindex: 0, 1,  2, 3, 4, 5,   6\nvalue: 0, 1,  1, 2, 3, 2+3, 0+3\n_______________________________\ncurrent position at index 5\n\nindex: 0, 1, 2, 3, 4, 5, 6\nvalue: 0, 1, 1, 2, 3, 5, 3\n\nwhen current position is at index 5, value at index 6 needs to add index 5 value\n\nresults:\nindex: 0, 1,  2, 3, 4, 5,  6\nvalue: 0, 1,  1, 2, 3, 5, 3+5\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"time complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)")),(0,a.kt)("li",{parentName:"ul"},"space complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const fib = (n) => {\n  const table = Array(n + 1).fill(0);\n  // if fib starts with 1\n  table[1] = 1;\n  // change to table[2] = 1; if fib starts with 0\n  for (let i = 0; i < n; i++) {\n    table[i + 1] += table[i];\n    if (i + 2 <= n) {\n      // not required in javascript\n      table[i + 2] += table[i];\n    }\n  }\n  return table[n];\n};\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"time complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(n)")),(0,a.kt)("li",{parentName:"ul"},"space complexity is ",(0,a.kt)("inlineCode",{parentName:"li"},"O(1)"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const fib = (n) => {\n  const lastTwo = [0, 1];\n  let counter = 2; // if fib starts with 1\n  // change to let counter = 3; if fib starts with 0\n  while (counter <= n) {\n    const lastFibValue = lastTwo[0] + lastTwo[1];\n    lastTwo[0] = lastTwo[1];\n    lastTwo[1] = lastFibValue;\n    counter++;\n  }\n  return lastTwo[1]; // if fib starts with 1\n  // change to return n > 1 ? lastTwo[1] : lastTwo[0]; if fib starts with 0\n};\n")))}m.isMDXComponent=!0}}]);