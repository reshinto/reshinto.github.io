"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8484],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var l=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function n(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,l,r=function(e,t){if(null==e)return{};var a,l,r={},i=Object.keys(e);for(l=0;l<i.length;l++)a=i[l],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)a=i[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=l.createContext({}),u=function(e){var t=l.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):n(n({},t),e)),a},m=function(e){var t=u(e.components);return l.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},c=l.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=u(a),h=r,d=c["".concat(s,".").concat(h)]||c[h]||p[h]||i;return a?l.createElement(d,n(n({ref:t},m),{},{components:a})):l.createElement(d,n({ref:t},m))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,n=new Array(i);n[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,n[1]=o;for(var u=2;u<i;u++)n[u]=a[u];return l.createElement.apply(null,n)}return l.createElement.apply(null,a)}c.displayName="MDXCreateElement"},23269:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>n,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var l=a(83117),r=(a(67294),a(3905));const i={},n="Greedy Algorithm",o={unversionedId:"interviewPrep/algorithms_and_techniques/greedy_algorithms/readme",id:"interviewPrep/algorithms_and_techniques/greedy_algorithms/readme",title:"Greedy Algorithm",description:"- an algorithm that makes a greedy choice / optimal choice at every single step in the solution or in the problem",source:"@site/docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/readme.md",sourceDirName:"interviewPrep/algorithms_and_techniques/greedy_algorithms",slug:"/interviewPrep/algorithms_and_techniques/greedy_algorithms/",permalink:"/docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How Sum example",permalink:"/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/howSum"},next:{title:"Recursion",permalink:"/docs/interviewPrep/algorithms_and_techniques/recursion/"}},s={},u=[{value:"Simple example",id:"simple-example",level:2},{value:"Problem",id:"problem",level:3},{value:"Solution",id:"solution",level:3},{value:"formal properties if true, greedy algorithm could be used to solve a problem",id:"formal-properties-if-true-greedy-algorithm-could-be-used-to-solve-a-problem",level:2},{value:"Greedy Choice Property",id:"greedy-choice-property",level:3},{value:"Optimal Substructure",id:"optimal-substructure",level:3},{value:"Greedy Algorithm application",id:"greedy-algorithm-application",level:2},{value:"Fractional Knapsack Problem",id:"fractional-knapsack-problem",level:3},{value:"solution",id:"solution-1",level:4},{value:"Knapsack Problem",id:"knapsack-problem",level:3},{value:"using of greedy algorithm for this example will fail",id:"using-of-greedy-algorithm-for-this-example-will-fail",level:4},{value:"for this case, using of dynamic programming might be a better solution than to using a greedy algorithm",id:"for-this-case-using-of-dynamic-programming-might-be-a-better-solution-than-to-using-a-greedy-algorithm",level:5}],m={toc:u};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,l.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"greedy-algorithm"},"Greedy Algorithm"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"an algorithm that makes a greedy choice / optimal choice at every single step in the solution or in the problem",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the greedy choice is defined by some rule",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"that rule could be e.g.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"select the largest number"),(0,r.kt)("li",{parentName:"ul"},"or select the smallest number"),(0,r.kt)("li",{parentName:"ul"},"select the element that has a certain property etc."))))))),(0,r.kt)("li",{parentName:"ul"},"the algorithm can be quite complicated and can also be quite simple"),(0,r.kt)("li",{parentName:"ul"},"1 example that uses greedy algorithm is ",(0,r.kt)("inlineCode",{parentName:"li"},"Dijkstra algorithm"))),(0,r.kt)("h2",{id:"simple-example"},"Simple example"),(0,r.kt)("h3",{id:"problem"},"Problem"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"find the N numbers in the array that is equal to the largest sum")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const array = [3, 4, -1, 2, -3, 0];\nconst n = 4;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the greedy algorithm approach to solving this problem is to simply select the largest number at every single step until we've selected n numbers")),(0,r.kt)("h3",{id:"solution"},"Solution"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"select the largest number ",(0,r.kt)("inlineCode",{parentName:"li"},"4"),", then the next largest ",(0,r.kt)("inlineCode",{parentName:"li"},"3"),", then the next largest ",(0,r.kt)("inlineCode",{parentName:"li"},"2"),", then the next largest ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this gives the result ",(0,r.kt)("inlineCode",{parentName:"li"},"4 + 3 + 2 + 0 = 10"))))),(0,r.kt)("h2",{id:"formal-properties-if-true-greedy-algorithm-could-be-used-to-solve-a-problem"},"formal properties if true, greedy algorithm could be used to solve a problem"),(0,r.kt)("h3",{id:"greedy-choice-property"},"Greedy Choice Property"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a global (overall) optimal solution can be reached by choosing the optimal choice at each step"),(0,r.kt)("li",{parentName:"ul"},"greedy algorithms work on problems for which it is true that every step, there is a choice that is optimal for the problem up to that step",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"and after the last step, the algorithm produces the optimal solution of the complete problem")))),(0,r.kt)("h3",{id:"optimal-substructure"},"Optimal Substructure"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a problem has an optimal substructure if an optimal solution to the entire problem contains the optimal solutions to the sub-problems",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this means that every time a choice is made, one can treat that as a sub problem"),(0,r.kt)("li",{parentName:"ul"},"an optimal substructure exists if all of the sub problems allow you to solve the larger problem as a whole",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"meaning if all of the solutions to these sub-problems combined allow you to have a full, optimal solution to the entire problem, then you can use the greedy algorithm")))))),(0,r.kt)("h2",{id:"greedy-algorithm-application"},"Greedy Algorithm application"),(0,r.kt)("h3",{id:"fractional-knapsack-problem"},"Fractional Knapsack Problem"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"this is a backpack that has the following design",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the goal is to fill the backpack with as much value as possible without going over it's capacity"),(0,r.kt)("li",{parentName:"ul"},"so how do we use a greedy algorithm to solve this problem?")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"capacity = 25\n\nItem Size Value\n0     22    19\n1     10    9\n2     9     9\n3     7     6\n")),(0,r.kt)("h4",{id:"solution-1"},"solution"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"you can select a fractional amount of any of these items",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this means that, instead of selecting one of item 1, we can select e.g. half of item 1 instead"))),(0,r.kt)("li",{parentName:"ul"},"first approach")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"select item 3\ntotal current capacity = 7\ntotal current value = 6\n\nselect item 2\ntotal current capacity = 7 + 9 = 16\ntotal current value = 6 + 9 = 15\n\nselect item 1 (this fails)\ntotal current capacity = 7 + 9 + 10 = 26\ntotal current value = 6 + 9 + 9 = 24\n\nchange to select 90% of item 1\ntotal current capacity = 7 + 9 + (10 * 0.9) = 25\ntotal current value = 6 + 9 + (9 * 0.9) = 23.1\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"second approach")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"select item 0\ntotal current capacity = 22\ntotal current value = 19\n\nselect item 2 since it has the same value as item 1 but smaller in size (this fails)\ntotal current capacity = 22 + 9 = 31\ntotal current value = 19 + 9 = 28\n\nchange to select 33% of item 1\ntotal current capacity = 22 + (9 * 0.33) = 25\ntotal current value = 19 + (9 * 0.33) = 22\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the above 2 approaches does not give the most optimal choice, as there is a better solution for this case, which is to use best value to size ratio",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"therefore the items with the best value over size ratio will the best item to select")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"capacity = 25\n\nItem Size Value Value/Size\n0     22    19    0.8636\n1     10    9     0.9\n2     9     9     1\n3     7     6     0.857\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"this shows that the best items to select goes in the following order ",(0,r.kt)("inlineCode",{parentName:"li"},"2, 1, 0, 3"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this means that we should take as much as possible from the first selection onwards")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"select item 2 (this is the best so take all of it)\ntotal current capacity = 9\ntotal current value = 9\n\nselect item 1 (this is the 2nd best so take all of it)\ntotal current capacity = 9 + 10 = 19\ntotal current value = 9 + 9 = 18\n\nselect item 0 (this is the 3rd best so take as much as possible, ~27%)\ntotal current capacity = 9 + 10 + (22 * 0.27) = 25\ntotal current value = 9 + 9 + (19 * 0.27)= 23.13\n")),(0,r.kt)("h3",{id:"knapsack-problem"},"Knapsack Problem"),(0,r.kt)("h4",{id:"using-of-greedy-algorithm-for-this-example-will-fail"},"using of greedy algorithm for this example will fail"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"use the same problem, however selecting a fractional amount of the item is no longer allowed")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"capacity = 25\n\nItem Size Value\n0     22    19\n1     10    9\n2     9     9\n3     7     6\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using the best order approach in the previous example ",(0,r.kt)("inlineCode",{parentName:"li"},"2, 1, 0"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"select item 2\ntotal current capacity = 9\ntotal current value = 9\n\nselect item 1\ntotal current capacity = 9 + 10 = 19\ntotal current value = 9 + 9 = 18\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the best answer should have been")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"select item 0\ntotal current capacity = 22\ntotal current value = 19\n")),(0,r.kt)("h5",{id:"for-this-case-using-of-dynamic-programming-might-be-a-better-solution-than-to-using-a-greedy-algorithm"},"for this case, using of dynamic programming might be a better solution than to using a greedy algorithm"))}p.isMDXComponent=!0}}]);