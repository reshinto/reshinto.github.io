"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[5542],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>u});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),m=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=m(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=m(t),u=o,v=p["".concat(c,".").concat(u)]||p[u]||d[u]||a;return t?r.createElement(v,i(i({ref:n},l),{},{components:t})):r.createElement(v,i({ref:n},l))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var m=2;m<a;m++)i[m]=t[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},96126:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var r=t(87462),o=(t(67294),t(3905));const a={},i="C++ Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Command/cPlusPlus/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Command/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Command/cPlusPlus",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Command/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Command",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/cSharp/"}},c={},m=[],l={toc:m};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"c-example"},"C++ Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n\n/**\n * Command Design Pattern\n *\n * Intent: Turns a request into a stand-alone object that contains all\n * information about the request. This transformation lets you parameterize\n * methods with different requests, delay or queue a request\'s execution, and\n * support undoable operations.\n */\n/**\n * The Command interface declares a method for executing a command.\n */\nclass Command {\n public:\n  virtual ~Command() {\n  }\n  virtual void Execute() const = 0;\n};\n/**\n * Some commands can implement simple operations on their own.\n */\nclass SimpleCommand : public Command {\n private:\n  std::string pay_load_;\n\n public:\n  explicit SimpleCommand(std::string pay_load) : pay_load_(pay_load) {\n  }\n  void Execute() const override {\n    std::cout << "SimpleCommand: See, I can do simple things like printing (" << this->pay_load_ << ")\\n";\n  }\n};\n\n/**\n * The Receiver classes contain some important business logic. They know how to\n * perform all kinds of operations, associated with carrying out a request. In\n * fact, any class may serve as a Receiver.\n */\nclass Receiver {\n public:\n  void DoSomething(const std::string &a) {\n    std::cout << "Receiver: Working on (" << a << ".)\\n";\n  }\n  void DoSomethingElse(const std::string &b) {\n    std::cout << "Receiver: Also working on (" << b << ".)\\n";\n  }\n};\n\n/**\n * However, some commands can delegate more complex operations to other objects,\n * called "receivers."\n */\nclass ComplexCommand : public Command {\n  /**\n   * @var Receiver\n   */\n private:\n  Receiver *receiver_;\n  /**\n   * Context data, required for launching the receiver\'s methods.\n   */\n  std::string a_;\n  std::string b_;\n  /**\n   * Complex commands can accept one or several receiver objects along with any\n   * context data via the constructor.\n   */\n public:\n  ComplexCommand(Receiver *receiver, std::string a, std::string b) : receiver_(receiver), a_(a), b_(b) {\n  }\n  /**\n   * Commands can delegate to any methods of a receiver.\n   */\n  void Execute() const override {\n    std::cout << "ComplexCommand: Complex stuff should be done by a receiver object.\\n";\n    this->receiver_->DoSomething(this->a_);\n    this->receiver_->DoSomethingElse(this->b_);\n  }\n};\n\n/**\n * The Invoker is associated with one or several commands. It sends a request to\n * the command.\n */\nclass Invoker {\n  /**\n   * @var Command\n   */\n private:\n  Command *on_start_;\n  /**\n   * @var Command\n   */\n  Command *on_finish_;\n  /**\n   * Initialize commands.\n   */\n public:\n  ~Invoker() {\n    delete on_start_;\n    delete on_finish_;\n  }\n\n  void SetOnStart(Command *command) {\n    this->on_start_ = command;\n  }\n  void SetOnFinish(Command *command) {\n    this->on_finish_ = command;\n  }\n  /**\n   * The Invoker does not depend on concrete command or receiver classes. The\n   * Invoker passes a request to a receiver indirectly, by executing a command.\n   */\n  void DoSomethingImportant() {\n    std::cout << "Invoker: Does anybody want something done before I begin?\\n";\n    if (this->on_start_) {\n      this->on_start_->Execute();\n    }\n    std::cout << "Invoker: ...doing something really important...\\n";\n    std::cout << "Invoker: Does anybody want something done after I finish?\\n";\n    if (this->on_finish_) {\n      this->on_finish_->Execute();\n    }\n  }\n};\n/**\n * The client code can parameterize an invoker with any commands.\n */\n\nint main() {\n  Invoker *invoker = new Invoker;\n  invoker->SetOnStart(new SimpleCommand("Say Hi!"));\n  Receiver *receiver = new Receiver;\n  invoker->SetOnFinish(new ComplexCommand(receiver, "Send email", "Save report"));\n  invoker->DoSomethingImportant();\n\n  delete invoker;\n  delete receiver;\n\n  return 0;\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Invoker: Does anybody want something done before I begin?\nSimpleCommand: See, I can do simple things like printing (Say Hi!)\nInvoker: ...doing something really important...\nInvoker: Does anybody want something done after I finish?\nComplexCommand: Complex stuff should be done by a receiver object.\nReceiver: Working on (Send email.)\nReceiver: Also working on (Save report.)\n")))}d.isMDXComponent=!0}}]);