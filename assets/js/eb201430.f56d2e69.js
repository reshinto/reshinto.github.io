"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[4095],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var a=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,i=function(e,t){if(null==e)return{};var r,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=a.createContext({}),h=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=h(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=h(r),m=i,d=u["".concat(s,".").concat(m)]||u[m]||p[m]||n;return r?a.createElement(d,o(o({ref:t},c),{},{components:r})):a.createElement(d,o({ref:t},c))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=r.length,o=new Array(n);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var h=2;h<n;h++)o[h]=r[h];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5285:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>h});var a=r(87462),i=(r(67294),r(3905));const n={},o="Peer-To-Peer Networks",l={unversionedId:"interviewPrep/system_design/17Peer-To-PeerNetworks/readme",id:"interviewPrep/system_design/17Peer-To-PeerNetworks/readme",title:"Peer-To-Peer Networks",description:"- a collection of machines referred to as peers that divide a workload between themselves to presumably complete the workload faster than would otherwise be possible",source:"@site/docs/interviewPrep/system_design/17Peer-To-PeerNetworks/readme.md",sourceDirName:"interviewPrep/system_design/17Peer-To-PeerNetworks",slug:"/interviewPrep/system_design/17Peer-To-PeerNetworks/",permalink:"/docs/interviewPrep/system_design/17Peer-To-PeerNetworks/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/system_design/17Peer-To-PeerNetworks/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Etcd leader election example",permalink:"/docs/interviewPrep/system_design/16LeaderElection/etcdExample/"},next:{title:"Polling And Streaming",permalink:"/docs/interviewPrep/system_design/18PollingAndStreaming/"}},s={},h=[{value:"Use cases",id:"use-cases",level:2},{value:"how to perform peer discovery and peer selection",id:"how-to-perform-peer-discovery-and-peer-selection",level:3},{value:"first method: using a tracker",id:"first-method-using-a-tracker",level:4},{value:"second method: using gossip protocol or epidemic protocol",id:"second-method-using-gossip-protocol-or-epidemic-protocol",level:4},{value:"technology example",id:"technology-example",level:4},{value:"Terms Used",id:"terms-used",level:2},{value:"Gossip Protocol",id:"gossip-protocol",level:3}],c={toc:h};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"peer-to-peer-networks"},"Peer-To-Peer Networks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a collection of machines referred to as peers that divide a workload between themselves to presumably complete the workload faster than would otherwise be possible"),(0,i.kt)("li",{parentName:"ul"},"often used in file-distribution systems",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"such as torrenting which basically involves 1 person or 1 machine that has a piece of data, typically a large file and spreading that file in chunks to a bunch of peers, to a bunch of other mahcines all over the world",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"then have these peers work together to obtain all of the missing pieces that they need to puzzle them back together")))))),(0,i.kt)("h2",{id:"use-cases"},"Use cases"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if designing a system where it is able to deploy or transfer large files to thousands of machines at once",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"if we are designing a system for a big tech firm with their own powerful data center",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"we can assume that our system has a total network throughput of 40 gigabits per second",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"which comes down to 5 gigabytes per second since there are 8 bits per byte"))))),(0,i.kt)("li",{parentName:"ul"},"assuming we have 1 machine, we wanna design our system such that we can deploy or transfer large files (gigabyte files) from 1 machine to 1,000 machines repeatedly",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"a use case is where you get video footage from security cameras multiple times per day, and you wanna send these video files to a 1,000 machines throughout the day"),(0,i.kt)("li",{parentName:"ul"},"another use case is where if you are deploying very large machine learning models that you wanna train on the 1,000 machines and you are doing that multiple times a day"))),(0,i.kt)("li",{parentName:"ul"},"1,000 machines will take 1,000 seconds which is 17 minutes and is quite long for this kind of operation especially if we are doing this repeatedly throughout the day",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"thus we can see that we have a bottleneck in our system"))))),(0,i.kt)("li",{parentName:"ul"},"To improve the system, instead of having only 1 machine serving the 5 GB files, we can have multiple machines for example 10",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"now when we request for the 5 GB files, we are requesting in a distributed manner from those 10 machines"),(0,i.kt)("li",{parentName:"ul"},"still have an issue, transferring 5 GB in 17 minutes / 10 is still more than a minute and is not amazing, depending on our use case it might be quite bad"),(0,i.kt)("li",{parentName:"ul"},"also we would need to replicated all the files to all 10 machines which is not optimal"))),(0,i.kt)("li",{parentName:"ul"},"another possible solution could be to sort the files and have them split up amongst the 10 machines",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"we then don't need to replicate all the files across the 10 machines"),(0,i.kt)("li",{parentName:"ul"},"however, it goes back to the initial problem where all machinese will request from the same 1 machine for that specific file thus creating a bottleneck again"))),(0,i.kt)("li",{parentName:"ul"},"The best solution for this case would be to implement the Peer-To-Peer network",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"we will have 1 machine trying to send the 5 GB file to 1,000 machines",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the solution would be instead of sending the 5 GB file to each and every 1 of the 1,000 machines, we split up this 5 GB file into very small chunks (e.g.: 1,000 5 MB files) and then send each chunk to each of our peers (in this case, 1,000 5 MB file transfer will take 1 second, transfer of 1 5 MB file will take 0.001 second)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"then we let our peers communicate with 1 another to grab the missing chunks (999 5 MB files) that they all need to create the final file (which will take 1/1000 ","*"," 999 = 0.999 seconds)"),(0,i.kt)("li",{parentName:"ul"},"let the peers build up their own total file"),(0,i.kt)("li",{parentName:"ul"},"all of the peers could simultaneously talk to each other"),(0,i.kt)("li",{parentName:"ul"},"peers are able to send their received chunks to other peers concurrently while the main machine that is sending the 1,000 5 MB files",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"however, in order for this to work, our peers need to know which peers to talk to next",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"this requires peer discovery and peer selection methods")))))))))))),(0,i.kt)("h3",{id:"how-to-perform-peer-discovery-and-peer-selection"},"how to perform peer discovery and peer selection"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"mainly have 2 primary ways of doing this")),(0,i.kt)("h4",{id:"first-method-using-a-tracker"},"first method: using a tracker"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"to have some sort of central database which orchestrates the entire peer-to-peer network or knows at all times or can figure out at any time which peer should talk to next",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"this means that while the peers are communicating with each other, it will also communicate with the central machine or database (also know as a tracker) that will tell them which peer to talk to next")))),(0,i.kt)("h4",{id:"second-method-using-gossip-protocol-or-epidemic-protocol"},"second method: using gossip protocol or epidemic protocol"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"instead of having a central database or a tracker to tell them what to do, they just talk between themselves and figure it out themselves",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"e.g.: you have a chunk that i need, and you don't seem to have that peer's chunk so go get it"))),(0,i.kt)("li",{parentName:"ul"},"every peer carries information about what peer carries what data or what chunk of the file",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"peers essentially carry mappings that map certain peers to certain chunks",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"each peer would have their own hash table where they map a peer IP address to the data chunk",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"this is referred to as a ",(0,i.kt)("inlineCode",{parentName:"li"},"distributed hash table (DHT)"))))))))),(0,i.kt)("h4",{id:"technology-example"},"technology example"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/uber/kraken"},"Kraken"))),(0,i.kt)("h2",{id:"terms-used"},"Terms Used"),(0,i.kt)("h3",{id:"gossip-protocol"},"Gossip Protocol"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"when a set of machines talk to each other in a uncoordinated manner in a cluster to spread information through a system without requiring a central source of data")))}p.isMDXComponent=!0}}]);