"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[7530],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>p});var i=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=i.createContext({}),u=function(e){var t=i.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=u(e.components);return i.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(a),p=n,h=d["".concat(o,".").concat(p)]||d[p]||m[p]||r;return a?i.createElement(h,l(l({ref:t},c),{},{components:a})):i.createElement(h,l({ref:t},c))}));function p(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var u=2;u<r;u++)l[u]=a[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4397:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var i=a(7462),n=(a(7294),a(3905));const r={},l="Asynchronous Communications",s={unversionedId:"interviewPrep/system_design/microservices/asynchronousCommunications",id:"interviewPrep/system_design/microservices/asynchronousCommunications",title:"Asynchronous Communications",description:"Example",source:"@site/docs/interviewPrep/system_design/microservices/asynchronousCommunications.md",sourceDirName:"interviewPrep/system_design/microservices",slug:"/interviewPrep/system_design/microservices/asynchronousCommunications",permalink:"/docs/interviewPrep/system_design/microservices/asynchronousCommunications",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/system_design/microservices/asynchronousCommunications.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Microservices",permalink:"/docs/interviewPrep/system_design/microservices/"},next:{title:"Kubernetes in Microservices",permalink:"/docs/interviewPrep/system_design/microservices/kubernetes"}},o={},u=[{value:"Example",id:"example",level:2},{value:"two strategies when dealing with system-to-system calls",id:"two-strategies-when-dealing-with-system-to-system-calls",level:3},{value:"traditional model which is the synchronous model (standard microservices communications)",id:"traditional-model-which-is-the-synchronous-model-standard-microservices-communications",level:4},{value:"asynchronous model of interservice communication",id:"asynchronous-model-of-interservice-communication",level:4},{value:"Pros",id:"pros",level:2},{value:"Prevent Gridlock",id:"prevent-gridlock",level:3},{value:"impact it can have when dealing with Long-Running Processes",id:"impact-it-can-have-when-dealing-with-long-running-processes",level:3},{value:"Reduce Coupling",id:"reduce-coupling",level:3},{value:"Additional Benefits",id:"additional-benefits",level:3},{value:"Trade-offs",id:"trade-offs",level:2},{value:"Complexity increases",id:"complexity-increases",level:3},{value:"Observability becomes harder",id:"observability-becomes-harder",level:3},{value:"Additional Complexity",id:"additional-complexity",level:3},{value:"Common Technologies",id:"common-technologies",level:2},{value:"Message Broker",id:"message-broker",level:3},{value:"Common Message Brokers",id:"common-message-brokers",level:3},{value:"RabbitMQ",id:"rabbitmq",level:4},{value:"Apache ActiveMQ",id:"apache-activemq",level:4},{value:"Java Message Service (JMS)",id:"java-message-service-jms",level:4},{value:"Apache Kafka",id:"apache-kafka",level:4},{value:"Cache (e.g.: Redis)",id:"cache-eg-redis",level:4},{value:"Common Terms",id:"common-terms",level:3},{value:"Producers",id:"producers",level:4},{value:"Consumers or receiver",id:"consumers-or-receiver",level:4},{value:"Dead-letter queue (DLQ)",id:"dead-letter-queue-dlq",level:4},{value:"Service Communications",id:"service-communications",level:2},{value:"Point-to-Point",id:"point-to-point",level:3},{value:"Publish-Subscribe",id:"publish-subscribe",level:3},{value:"Point-to-point async",id:"point-to-point-async",level:2},{value:"Use Cases",id:"use-cases",level:3},{value:"Considerations",id:"considerations",level:3},{value:"Publish-subscribe",id:"publish-subscribe-1",level:2},{value:"Use Cases",id:"use-cases-1",level:3},{value:"Durable Subscribers",id:"durable-subscribers",level:3},{value:"Event-driven microservices",id:"event-driven-microservices",level:2},{value:"What is it?",id:"what-is-it",level:3},{value:"Choreographed events",id:"choreographed-events",level:3},{value:"Orchestrated events",id:"orchestrated-events",level:3},{value:"Choreographed events",id:"choreographed-events-1",level:2},{value:"Uses cases",id:"uses-cases",level:3},{value:"Benefits and Trade-offs",id:"benefits-and-trade-offs",level:3},{value:"pros",id:"pros-1",level:4},{value:"cons",id:"cons",level:4},{value:"Orchestrated events",id:"orchestrated-events-1",level:2},{value:"Use Cases",id:"use-cases-2",level:3},{value:"Benefits and Trade-Offs",id:"benefits-and-trade-offs-1",level:3},{value:"pros",id:"pros-2",level:4},{value:"cons",id:"cons-1",level:4},{value:"Hybrid events",id:"hybrid-events",level:2},{value:"Not Exclusive",id:"not-exclusive",level:3},{value:"Contracts",id:"contracts",level:2},{value:"Common Architecture",id:"common-architecture",level:2},{value:"Producers",id:"producers-1",level:2},{value:"Consumers",id:"consumers",level:2},{value:"Why go through all the trouble is consumer use cases are enough?",id:"why-go-through-all-the-trouble-is-consumer-use-cases-are-enough",level:2},{value:"Log aggregation",id:"log-aggregation",level:2},{value:"what is this about?",id:"what-is-this-about",level:3},{value:"Stream Processors",id:"stream-processors",level:3},{value:"Visualization",id:"visualization",level:3},{value:"System Analytics",id:"system-analytics",level:2},{value:"Why?",id:"why",level:3},{value:"How?",id:"how",level:3},{value:"Is it worth it?",id:"is-it-worth-it",level:3},{value:"Event detection",id:"event-detection",level:2},{value:"Eventing Use Cases",id:"eventing-use-cases",level:3},{value:"Distributed data",id:"distributed-data",level:2},{value:"Why is data such a powerful use case?",id:"why-is-data-such-a-powerful-use-case",level:3},{value:"Big Uses",id:"big-uses",level:3},{value:"Eventual consistency",id:"eventual-consistency",level:2},{value:"ACID and BASE",id:"acid-and-base",level:3},{value:"High Level",id:"high-level",level:3},{value:"Trade-Offs",id:"trade-offs-1",level:3},{value:"CQRS (Command Query Responsibility Segregation)",id:"cqrs-command-query-responsibility-segregation",level:2},{value:"Data Services",id:"data-services",level:3},{value:"In Action",id:"in-action",level:3},{value:"Data migration",id:"data-migration",level:2},{value:"Migrations",id:"migrations",level:3},{value:"Consideration",id:"consideration",level:3},{value:"Model",id:"model",level:3},{value:"Data Synchronization",id:"data-synchronization",level:2},{value:"Use Cases",id:"use-cases-3",level:3},{value:"Model",id:"model-1",level:3}],c={toc:u};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"asynchronous-communications"},"Asynchronous Communications"),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("h3",{id:"two-strategies-when-dealing-with-system-to-system-calls"},"two strategies when dealing with system-to-system calls"),(0,n.kt)("h4",{id:"traditional-model-which-is-the-synchronous-model-standard-microservices-communications"},"traditional model which is the synchronous model (standard microservices communications)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"In a standard model, service-to-service communications is over HTTP using RESTful patterns"),(0,n.kt)("li",{parentName:"ul"},"The calls are synchronous in nature, meaning that the caller waits for a response",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"that response is sent after the request is fully processed"))),(0,n.kt)("li",{parentName:"ul"},"Each call becomes a blocking call that the client must wait on a success or failure indicated by status codes from the service being called"),(0,n.kt)("li",{parentName:"ul"},"As such, in this model, call paths can become deep",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"it isn't usually a big deal in small, concise operations"),(0,n.kt)("li",{parentName:"ul"},"but it can become a bottleneck for longer processes across many services")))),(0,n.kt)("h4",{id:"asynchronous-model-of-interservice-communication"},"asynchronous model of interservice communication"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"on method of implementation is over HTTP using REST",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"In this model, the client sends a call and the server immediately responds with an accepted status code"),(0,n.kt)("li",{parentName:"ul"},"The client then either polls the server or waits for a push message on a callback URL to determine if the work was done and successful or done and failed"))),(0,n.kt)("li",{parentName:"ul"},"Another method, is through the use of messaging systems",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"e.g.: Rabbit, Kafka, JMS, or others"),(0,n.kt)("li",{parentName:"ul"},"a message is put on a system and a downstream consumer works on that message"),(0,n.kt)("li",{parentName:"ul"},"Successes or failures can be communicated many different ways or not at all"),(0,n.kt)("li",{parentName:"ul"},"asynchronous communication styles can be more complex"),(0,n.kt)("li",{parentName:"ul"},"it can be very difficult to do them right"),(0,n.kt)("li",{parentName:"ul"},"but there are benefits",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"One of the biggest benefits is offloading strain on the system",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"By not having every call be a blocking call, you can leverage more processing power behind the scenes and not impact your customer"),(0,n.kt)("li",{parentName:"ul"},"not every call needs an immediate response"),(0,n.kt)("li",{parentName:"ul"},"since there is a correlation between user wait times and satisfaction, the offloading to asynchronous can improve satisfaction of users"),(0,n.kt)("li",{parentName:"ul"},"In addition, many jobs take a while to run to completion and using asynchronous communications not only off-loads strain",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"but also keeps the system as a whole healthier"))),(0,n.kt)("li",{parentName:"ul"},"Asynchronous communications, especially in workloads and dag or directed in cyclical graph workflows",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"can allow you to build a natural retries without negatively impacting performance on the processes involved")))))))))),(0,n.kt)("h2",{id:"pros"},"Pros"),(0,n.kt)("h3",{id:"prevent-gridlock"},"Prevent Gridlock"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Congestion"),(0,n.kt)("li",{parentName:"ul"},"Exponential traffic"),(0,n.kt)("li",{parentName:"ul"},"Slow services"),(0,n.kt)("li",{parentName:"ul"},"Remove synchronous calls")),(0,n.kt)("h3",{id:"impact-it-can-have-when-dealing-with-long-running-processes"},"impact it can have when dealing with Long-Running Processes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Reduce blocking"),(0,n.kt)("li",{parentName:"ul"},"natural retry"),(0,n.kt)("li",{parentName:"ul"},"no more call trees"),(0,n.kt)("li",{parentName:"ul"},"reduce risk of timeouts")),(0,n.kt)("h3",{id:"reduce-coupling"},"Reduce Coupling"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"prevent building of monolithic microservices"),(0,n.kt)("li",{parentName:"ul"},"prevent exponential traffic"),(0,n.kt)("li",{parentName:"ul"},"prevent slow services")),(0,n.kt)("h3",{id:"additional-benefits"},"Additional Benefits"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"can build better quality of service and priority"),(0,n.kt)("li",{parentName:"ul"},"Fault tolerance easier to solve"),(0,n.kt)("li",{parentName:"ul"},"response not needed immediately"),(0,n.kt)("li",{parentName:"ul"},"logging, metrics, analytics does not need blocking")),(0,n.kt)("h2",{id:"trade-offs"},"Trade-offs"),(0,n.kt)("h3",{id:"complexity-increases"},"Complexity increases"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Artifact sprawl",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"consumers of messages are individual artifacts that have their own repositories, build pipelines, deployment pipelines, and configuration management"))),(0,n.kt)("li",{parentName:"ul"},"Disconnected code paths"),(0,n.kt)("li",{parentName:"ul"},"Multiple paths")),(0,n.kt)("h3",{id:"observability-becomes-harder"},"Observability becomes harder"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"lack of immediate response"),(0,n.kt)("li",{parentName:"ul"},"log aggregation"),(0,n.kt)("li",{parentName:"ul"},"metrics correlation becomes a challenge")),(0,n.kt)("h3",{id:"additional-complexity"},"Additional Complexity"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"additional components increases"),(0,n.kt)("li",{parentName:"ul"},"operational runbooks increases"),(0,n.kt)("li",{parentName:"ul"},"issue source identification becomes difficult")),(0,n.kt)("h2",{id:"common-technologies"},"Common Technologies"),(0,n.kt)("h3",{id:"message-broker"},"Message Broker"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Heart of the system"),(0,n.kt)("li",{parentName:"ul"},"able to translate and transform incoming and outgoing messages"),(0,n.kt)("li",{parentName:"ul"},"Routing of messages",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"point to point routing"),(0,n.kt)("li",{parentName:"ul"},"inspection based routing"))),(0,n.kt)("li",{parentName:"ul"},"Aggregations",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"messages can be aggregated if required"))),(0,n.kt)("li",{parentName:"ul"},"able to handle errors")),(0,n.kt)("h3",{id:"common-message-brokers"},"Common Message Brokers"),(0,n.kt)("h4",{id:"rabbitmq"},"RabbitMQ"),(0,n.kt)("h4",{id:"apache-activemq"},"Apache ActiveMQ"),(0,n.kt)("h4",{id:"java-message-service-jms"},"Java Message Service (JMS)"),(0,n.kt)("h4",{id:"apache-kafka"},"Apache Kafka"),(0,n.kt)("h4",{id:"cache-eg-redis"},"Cache (e.g.: Redis)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"downside is Redis does not provide the robustness of the other tools")),(0,n.kt)("h3",{id:"common-terms"},"Common Terms"),(0,n.kt)("h4",{id:"producers"},"Producers"),(0,n.kt)("h4",{id:"consumers-or-receiver"},"Consumers or receiver"),(0,n.kt)("h4",{id:"dead-letter-queue-dlq"},"Dead-letter queue (DLQ)"),(0,n.kt)("h1",{id:"interservice-communications-patterns"},"Interservice Communications Patterns"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"use when in a situation where you just need to push a message to a remote system to do work, and you don't want a block on the downstream system completing its tasks")),(0,n.kt)("h2",{id:"service-communications"},"Service Communications"),(0,n.kt)("h3",{id:"point-to-point"},"Point-to-Point"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"single producer"),(0,n.kt)("li",{parentName:"ul"},"single consumer"),(0,n.kt)("li",{parentName:"ul"},"send and forget"),(0,n.kt)("li",{parentName:"ul"},"responses are another point-to-point")),(0,n.kt)("h3",{id:"publish-subscribe"},"Publish-Subscribe"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"single producer"),(0,n.kt)("li",{parentName:"ul"},"one or more consumers"),(0,n.kt)("li",{parentName:"ul"},"send and forget"),(0,n.kt)("li",{parentName:"ul"},"durable subscriptions",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"guarantees subscriber will get the message at some point in time")))),(0,n.kt)("h2",{id:"point-to-point-async"},"Point-to-point async"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"one of the most common uses of asynchronous messaging")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Producer -> Message Broker -> Consumer\n")),(0,n.kt)("h3",{id:"use-cases"},"Use Cases"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"when no response are needed"),(0,n.kt)("li",{parentName:"ul"},"when need admin task to happen"),(0,n.kt)("li",{parentName:"ul"},"out of band",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"e.g.: email: send and forget"))),(0,n.kt)("li",{parentName:"ul"},"scaling")),(0,n.kt)("h3",{id:"considerations"},"Considerations"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"wire time, is it really saving time?"),(0,n.kt)("li",{parentName:"ul"},"extra components worth it?"),(0,n.kt)("li",{parentName:"ul"},"plan for failure scenarios")),(0,n.kt)("h2",{id:"publish-subscribe-1"},"Publish-subscribe"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"producer -> Message Broker -> Subscriber\n                           -> Subscriber\n")),(0,n.kt)("h3",{id:"use-cases-1"},"Use Cases"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"when multiple responders are required",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"when flow of traffic between sites is limited on purpose to enforce good constraints across the data centers"),(0,n.kt)("li",{parentName:"ul"},"but what happens when you need more than data in sync?",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"you can federate the message broker across multiple data centers and allow triggered actions within each data center to occur in isolation"),(0,n.kt)("li",{parentName:"ul"},"Those triggered actions are often admin tasks like triggers to clean up or update search indices"),(0,n.kt)("li",{parentName:"ul"},"In this model, the central hub can publish a message and a worker in each data center can subscribe to the message"))))),(0,n.kt)("li",{parentName:"ul"},"when multiple tasks must fire across disparate systems"),(0,n.kt)("li",{parentName:"ul"},"to allow for consumer choice",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"consumers can choose not to subscribe")))),(0,n.kt)("h3",{id:"durable-subscribers"},"Durable Subscribers"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"they always get the message"),(0,n.kt)("li",{parentName:"ul"},"powerful in mission-critical operations"),(0,n.kt)("li",{parentName:"ul"},"can unregister if needed"),(0,n.kt)("li",{parentName:"ul"},"producer agnostic",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"producer doesn't know anything about the consumer")))),(0,n.kt)("h1",{id:"event-driven-microservices-pattern"},"Event-Driven Microservices Pattern"),(0,n.kt)("h2",{id:"event-driven-microservices"},"Event-driven microservices"),(0,n.kt)("h3",{id:"what-is-it"},"What is it?"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"requires a series of steps from start to goal"),(0,n.kt)("li",{parentName:"ul"},"each step is triggered from a single event"),(0,n.kt)("li",{parentName:"ul"},"move towards an end goal"),(0,n.kt)("li",{parentName:"ul"},"each steps play its own isolated role")),(0,n.kt)("h3",{id:"choreographed-events"},"Choreographed events"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"can be called a call tree"),(0,n.kt)("li",{parentName:"ul"},"step to step",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"each step does some work and passes a message down the chain"))),(0,n.kt)("li",{parentName:"ul"},"no centralized controller",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"just cascade down the pipelines"))),(0,n.kt)("li",{parentName:"ul"},"pipes",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"some trigger will be passed with sufficient data to the next step for it to do its work and so on down the call chain")))),(0,n.kt)("h3",{id:"orchestrated-events"},"Orchestrated events"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"much more common in practice than choreographed events"),(0,n.kt)("li",{parentName:"ul"},"comes from the centralized command and control"),(0,n.kt)("li",{parentName:"ul"},"still based on isolated steps"),(0,n.kt)("li",{parentName:"ul"},"each step still has a job to do")),(0,n.kt)("h2",{id:"choreographed-events-1"},"Choreographed events"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"                      Step 1\n                        ^\n                        |\n                        v\nEvent Producer -> Message Broker <-> Step 2\n                        |\n                        v\n                      Step 3\n                      \nEvent Producer\n-> Message Broker -> Step 1\n-> Message Broker -> Step 2\n-> Message Broker -> Step 3\n")),(0,n.kt)("h3",{id:"uses-cases"},"Uses cases"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"when there is distinct systems"),(0,n.kt)("li",{parentName:"ul"},"when there is alternative cascades")),(0,n.kt)("h3",{id:"benefits-and-trade-offs"},"Benefits and Trade-offs"),(0,n.kt)("h4",{id:"pros-1"},"pros"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"increased performance over orchestration",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"because don't have a centralized orchestrator, steps don't funnel through a single process"),(0,n.kt)("li",{parentName:"ul"},"performance can increase by offloading the steps to message broker"),(0,n.kt)("li",{parentName:"ul"},"each step can be optimized for its sole function"))),(0,n.kt)("li",{parentName:"ul"},"can reduce cost",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"due to reduced total cost of ownership due to performance and code complexity")))),(0,n.kt)("h4",{id:"cons"},"cons"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"reduce reliability in the system",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"because there is no central place to handle error states",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"there is more chance that a single event will fail to fire everywhere that it is needed"),(0,n.kt)("li",{parentName:"ul"},"thus need to ensure that error tracking and Dead Letter Queues exists in the message broker",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"so as to indicate the need to address errors in the workflow"))))))),(0,n.kt)("li",{parentName:"ul"},"reduce observability, increase observability complexity",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"because there is no centralized orchestrator"),(0,n.kt)("li",{parentName:"ul"},"it makes determining the status of the event more difficult"),(0,n.kt)("li",{parentName:"ul"},"have to look everywhere until you find the state of the current message to know what's going on"),(0,n.kt)("li",{parentName:"ul"},"in addition, in an asynchronous model, there is also the message broker and each DLQ to look at")))),(0,n.kt)("h2",{id:"orchestrated-events-1"},"Orchestrated events"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"more common pattern within the asyncrhonous event driven microservices model"),(0,n.kt)("li",{parentName:"ul"},"Orchestrator can also be referred as the Command and Control center")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"               call\nEvent Producer <-> Orchestrator <-> Message Broker <-> Step 1\n           polling call                            <-> Step 2\n                                                   <-> Step 3\n\nEvent Producer -> call -> Orchestrator -> Message Broker -> Step 1 \n-> Message Broker -> Orchestrator -> Event Producer \n-> polling call -> Orchestrator -> Message Broker -> Step 2\n-> Message Broker -> Orchestrator -> Event Producer \n-> polling call -> Orchestrator -> Message Broker -> Step 3\n-> Message Broker -> Orchestrator -> Event Producer \n")),(0,n.kt)("h3",{id:"use-cases-2"},"Use Cases"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"when there is sequential processing",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"step A must be completed before step B can proceed"))),(0,n.kt)("li",{parentName:"ul"},"Command workflow senario",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"to allow many Kubernetes clusters to be spun up at once through a single orchestrator call, since calls become non-blocking asynchronous messages"))),(0,n.kt)("li",{parentName:"ul"},"when a response is required")),(0,n.kt)("h3",{id:"benefits-and-trade-offs-1"},"Benefits and Trade-Offs"),(0,n.kt)("h4",{id:"pros-2"},"pros"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"increase reliability",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"can use its state to resubmit jobs that need to be processed"),(0,n.kt)("li",{parentName:"ul"},"can also build in much more robust error handling for outlier conditions"))),(0,n.kt)("li",{parentName:"ul"},"increase observability",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"central point can produce more logging and metrics that can help an operations team")))),(0,n.kt)("h4",{id:"cons-1"},"cons"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"reduced performance or choreography",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Because you have a centralized orchestrator, the steps funnel through a single process, thus decrease performance"))),(0,n.kt)("li",{parentName:"ul"},"increased cost",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"orchestrator need to keep track of state of the status responses and code paths"),(0,n.kt)("li",{parentName:"ul"},"increase total cost of ownership"),(0,n.kt)("li",{parentName:"ul"},"need to have more complex code"),(0,n.kt)("li",{parentName:"ul"},"costs in both operations and developer efficiencies")))),(0,n.kt)("h2",{id:"hybrid-events"},"Hybrid events"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"good thing about asynchronous model is that you are not forced to use a fixed pattern, hybrids are possible and efficient")),(0,n.kt)("h3",{id:"not-exclusive"},"Not Exclusive"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"still have a centralized command and control for the system as a whole"),(0,n.kt)("li",{parentName:"ul"},"can dispatch choreography events to remote systems when needed"),(0,n.kt)("li",{parentName:"ul"},"the events can either stay choreographed or convert back to internal command and control structure"),(0,n.kt)("li",{parentName:"ul"},"work gets done and the original command and control knows when everything is completed",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"knows by either directly in line or via some other polling mechanism")))),(0,n.kt)("h2",{id:"contracts"},"Contracts"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"regardless of event model, contracts between systems via the message broker are key"),(0,n.kt)("li",{parentName:"ul"},"contract must be well documented to prevent error or disjointed processes"),(0,n.kt)("li",{parentName:"ul"},"contract must be passive to change",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"changes can and do happen, but must not break downstream or upstream systems in the process"))),(0,n.kt)("li",{parentName:"ul"},"contracts must be enforced rigorously",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"so as to be resistant to change and be efficient in the processing")))),(0,n.kt)("h1",{id:"stream-data-platform"},"Stream Data Platform"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"handles streams of data"),(0,n.kt)("li",{parentName:"ul"},"all done asynchronously"),(0,n.kt)("li",{parentName:"ul"},"very useful in microservices"),(0,n.kt)("li",{parentName:"ul"},"increased complexity for a reason")),(0,n.kt)("h2",{id:"common-architecture"},"Common Architecture"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a pub/sub model with multiple publishers on the same set of topics")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Producer -                    - Consumer\nProducer -                    - Consumer\nProducer -   Message Broker   - Consumer\nProducer -                    - Consumer\n")),(0,n.kt)("h2",{id:"producers-1"},"Producers"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Applications"),(0,n.kt)("li",{parentName:"ul"},"Databases"),(0,n.kt)("li",{parentName:"ul"},"Servers"),(0,n.kt)("li",{parentName:"ul"},"Anything that producers events or logs")),(0,n.kt)("h2",{id:"consumers"},"Consumers"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Log aggregators",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"can help paint a real picture of what's going on in the system"))),(0,n.kt)("li",{parentName:"ul"},"Analytics engines",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"great use cases for streaming data"))),(0,n.kt)("li",{parentName:"ul"},"Long-term storage",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"many use cases in big data drive their data flow from a stream data platform"),(0,n.kt)("li",{parentName:"ul"},"once the set of data has been identified through analytics or other learning mechanisms",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"data can be collected and shipped to a storage for historical analysis and other uses"))))),(0,n.kt)("li",{parentName:"ul"},"Eventing engines",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"key off key analytical points and trigger downstream events usually through orchestration")))),(0,n.kt)("h2",{id:"why-go-through-all-the-trouble-is-consumer-use-cases-are-enough"},"Why go through all the trouble is consumer use cases are enough?"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"data is king"),(0,n.kt)("li",{parentName:"ul"},"business drives off data"),(0,n.kt)("li",{parentName:"ul"},"what you don't know can hurt you"),(0,n.kt)("li",{parentName:"ul"},"decision-making")),(0,n.kt)("h2",{id:"log-aggregation"},"Log aggregation"),(0,n.kt)("h3",{id:"what-is-this-about"},"what is this about?"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"message broker",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Most diagrams only focus on the log aggregation activities of the message broker itself"),(0,n.kt)("li",{parentName:"ul"},"it can aggregate logs from various systems, but in a raw format"))),(0,n.kt)("li",{parentName:"ul"},"transformations",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"not traditionally done in the stream data platform itself"),(0,n.kt)("li",{parentName:"ul"},"It is usually preferred to keep all logs in the original format so as to not lose context or metadata from the log itself",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"As such, they become disjointed"))))),(0,n.kt)("li",{parentName:"ul"},"Readability of log messages directly impacts the utilization of them"),(0,n.kt)("li",{parentName:"ul"},"log aggregation is mostly referring to is in a consumption engine",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"log messages are transformed into a common format and shipped to a system designed to provide insight and readability into the log messages")))),(0,n.kt)("h3",{id:"stream-processors"},"Stream Processors"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"can act as internal aggregators"),(0,n.kt)("li",{parentName:"ul"},"call APIs"),(0,n.kt)("li",{parentName:"ul"},"Trigger alerts"),(0,n.kt)("li",{parentName:"ul"},"Create events")),(0,n.kt)("h3",{id:"visualization"},"Visualization"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"improve human readability of log messages"),(0,n.kt)("li",{parentName:"ul"},"operations can leverage the visualization of logs when troubleshooting and inspecting system health"),(0,n.kt)("li",{parentName:"ul"},"logs can be used for debugging"),(0,n.kt)("li",{parentName:"ul"},"useful for determining if refactoring has positive or negative impacts")),(0,n.kt)("h2",{id:"system-analytics"},"System Analytics"),(0,n.kt)("h3",{id:"why"},"Why?"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"allow data to be analyzed quickly"),(0,n.kt)("li",{parentName:"ul"},"happens near real time"),(0,n.kt)("li",{parentName:"ul"},"faster than downstream"),(0,n.kt)("li",{parentName:"ul"},"quicker responses")),(0,n.kt)("h3",{id:"how"},"How?"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"write the job"),(0,n.kt)("li",{parentName:"ul"},"execute against the processed stream"),(0,n.kt)("li",{parentName:"ul"},"read the result"),(0,n.kt)("li",{parentName:"ul"},"repeast as necessary"),(0,n.kt)("li",{parentName:"ul"},"ship it")),(0,n.kt)("h3",{id:"is-it-worth-it"},"Is it worth it?"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"maturity matters"),(0,n.kt)("li",{parentName:"ul"},"insights are powerful"),(0,n.kt)("li",{parentName:"ul"},"needs dedication"),(0,n.kt)("li",{parentName:"ul"},"value isn't immediate")),(0,n.kt)("h2",{id:"event-detection"},"Event detection"),(0,n.kt)("h3",{id:"eventing-use-cases"},"Eventing Use Cases"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"stop the bad actor from occurring"),(0,n.kt)("li",{parentName:"ul"},"increase the good"),(0,n.kt)("li",{parentName:"ul"},"immediate actions")),(0,n.kt)("h1",{id:"data-flow-from-state-store-perspective"},"Data flow (from state store perspective)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"one of the biggest use case of asynchronous messaging in a microservices architecture is in data flows"),(0,n.kt)("li",{parentName:"ul"},"data flows can range from a distributed data and eventual consistency to CQRS-based data writes"),(0,n.kt)("li",{parentName:"ul"},"to improve throughput on a microservices based data services")),(0,n.kt)("h2",{id:"distributed-data"},"Distributed data"),(0,n.kt)("h3",{id:"why-is-data-such-a-powerful-use-case"},"Why is data such a powerful use case?"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"data is slow"),(0,n.kt)("li",{parentName:"ul"},"data is critical to the operation of any system"),(0,n.kt)("li",{parentName:"ul"},"data is growing")),(0,n.kt)("h3",{id:"big-uses"},"Big Uses"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"distributed data"),(0,n.kt)("li",{parentName:"ul"},"CQRS"),(0,n.kt)("li",{parentName:"ul"},"Data migrations"),(0,n.kt)("li",{parentName:"ul"},"Data synchronization")),(0,n.kt)("h2",{id:"eventual-consistency"},"Eventual consistency"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"it is a paramount concept in distributed data")),(0,n.kt)("h3",{id:"acid-and-base"},"ACID and BASE"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"ACID is a calling card of relational database management systems",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"it is what allows transactional writes and consistent reads in a database"),(0,n.kt)("li",{parentName:"ul"},"ACID, becomes painful at best in a microservices world, especially in a distributed one"),(0,n.kt)("li",{parentName:"ul"},"Atomic transactions are usually what people think of with ACID, meaning that the data is either all written or it isn't"))),(0,n.kt)("li",{parentName:"ul"},"BASE",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"we seldom care that the data is written immediately in a microservices architecture"),(0,n.kt)("li",{parentName:"ul"},"What we do care about is that the data is going to be there when we need it",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"This is the E in BASE, eventual consistency"))),(0,n.kt)("li",{parentName:"ul"},"B is basically available and S is a soft state",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"meaning the data shifts and is eventually consistent, so it is always soft and malleable, and not durable like an ACID"))),(0,n.kt)("li",{parentName:"ul"},"And the A is just part of basically"),(0,n.kt)("li",{parentName:"ul"},"This eventual consistency model allows us to speed up writes to a database with trust that the technology will distribute the data to wherever it is needed")))),(0,n.kt)("h3",{id:"high-level"},"High Level"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"           B\n          / \\\nclient - A - C\n")),(0,n.kt)("h3",{id:"trade-offs-1"},"Trade-Offs"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"latent reads is possible (stale data)"),(0,n.kt)("li",{parentName:"ul"},"communication faults"),(0,n.kt)("li",{parentName:"ul"},"catastrophic failure",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"data may not be available")))),(0,n.kt)("h2",{id:"cqrs-command-query-responsibility-segregation"},"CQRS (Command Query Responsibility Segregation)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a software pattern to improve performance for a microservices architecture"),(0,n.kt)("li",{parentName:"ul"},"it describes written data in a different model than read data"),(0,n.kt)("li",{parentName:"ul"},"can be achieved through an even-driven asynchronous architecture"),(0,n.kt)("li",{parentName:"ul"},"tends to be focused on microservices architectures but not required"),(0,n.kt)("li",{parentName:"ul"},"it is not a replacement for CRUD")),(0,n.kt)("h3",{id:"data-services"},"Data Services"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"usually operate on a single data domain"),(0,n.kt)("li",{parentName:"ul"},"usually dealing with CRUD operations in the data services",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"can be problematic in specific use cases"))),(0,n.kt)("li",{parentName:"ul"},"writes are expensive especially in a traditional RDBMS",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"we can tune a system only to a point, when the update domain is different than the read domain"))),(0,n.kt)("li",{parentName:"ul"},"reads are not immediate or cheap",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"when data services need data being read to diverge from data being written, CQRS may be of help")))),(0,n.kt)("h3",{id:"in-action"},"In Action"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Update Service -> Update Database -> Message Broker\nRead Service  <-> Read Database   <- \n")),(0,n.kt)("h2",{id:"data-migration"},"Data migration"),(0,n.kt)("h3",{id:"migrations"},"Migrations"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Moving data"),(0,n.kt)("li",{parentName:"ul"},"Transforming data"),(0,n.kt)("li",{parentName:"ul"},"Downtime consideration"),(0,n.kt)("li",{parentName:"ul"},"Orchestration")),(0,n.kt)("h3",{id:"consideration"},"Consideration"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Writes are critical"),(0,n.kt)("li",{parentName:"ul"},"Do reads do more?"),(0,n.kt)("li",{parentName:"ul"},"Transformation impact"),(0,n.kt)("li",{parentName:"ul"},"Migration time")),(0,n.kt)("h3",{id:"model"},"Model"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Original Service - Original Database\n                 /      |             \\\n           Crawler - Producer          \\\n                         \\              \\\n                       Message Broker - Consumer\n                                            \\\n                                          New Service - New Database\n")),(0,n.kt)("h2",{id:"data-synchronization"},"Data Synchronization"),(0,n.kt)("h3",{id:"use-cases-3"},"Use Cases"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"different databases"),(0,n.kt)("li",{parentName:"ul"},"different systems")),(0,n.kt)("h3",{id:"model-1"},"Model"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Source - Message Broker - Destination\n      \\                  /\n             Watcher\n")))}m.isMDXComponent=!0}}]);