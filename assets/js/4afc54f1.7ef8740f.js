"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[44130],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||i;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},75923:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(83117),a=(n(67294),n(3905));const i={},s="Swift Example",o={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Adapter/swift/readme",id:"interviewPrep/designPatterns/Structural_patterns/Adapter/swift/readme",title:"Swift Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Adapter/swift",slug:"/interviewPrep/designPatterns/Structural_patterns/Adapter/swift/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/python/example2"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/swift/example2"}},p={},c=[],l={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"swift-example"},"Swift Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'/// Adapter Design Pattern\n///\n/// Intent: Provides a unified interface that allows objects with incompatible\n/// interfaces to collaborate.\n\nimport XCTest\n\n/// The Target defines the domain-specific interface used by the client code.\nclass Target {\n\n    func request() -> String {\n        return "Target: The default target\'s behavior."\n    }\n}\n\n/// The Adaptee contains some useful behavior, but its interface is incompatible\n/// with the existing client code. The Adaptee needs some adaptation before the\n/// client code can use it.\nclass Adaptee {\n\n    public func specificRequest() -> String {\n        return ".eetpadA eht fo roivaheb laicepS"\n    }\n}\n\n/// The Adapter makes the Adaptee\'s interface compatible with the Target\'s\n/// interface.\nclass Adapter: Target {\n\n    private var adaptee: Adaptee\n\n    init(_ adaptee: Adaptee) {\n        self.adaptee = adaptee\n    }\n\n    override func request() -> String {\n        return "Adapter: (TRANSLATED) " + adaptee.specificRequest().reversed()\n    }\n}\n\n/// The client code supports all classes that follow the Target interface.\nclass Client {\n    // ...\n    static func someClientCode(target: Target) {\n        print(target.request())\n    }\n    // ...\n}\n\n/// Let\'s see how it all works together.\nclass AdapterConceptual: XCTestCase {\n\n    func testAdapterConceptual() {\n        print("Client: I can work just fine with the Target objects:")\n        Client.someClientCode(target: Target())\n\n        let adaptee = Adaptee()\n        print("Client: The Adaptee class has a weird interface. See, I don\'t understand it:")\n        print("Adaptee: " + adaptee.specificRequest())\n\n        print("Client: But I can work with it via the Adapter:")\n        Client.someClientCode(target: Adapter(adaptee))\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Client: I can work just fine with the Target objects:\nTarget: The default target's behavior.\nClient: The Adaptee class has a weird interface. See, I don't understand it:\nAdaptee: .eetpadA eht fo roivaheb laicepS\nClient: But I can work with it via the Adapter:\nAdapter: (TRANSLATED) Special behavior of the Adaptee.\n")))}d.isMDXComponent=!0}}]);