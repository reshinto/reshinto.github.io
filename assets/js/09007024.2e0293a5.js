"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[12397],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),g=p(n),h=a,d=g["".concat(c,".").concat(h)]||g[h]||m[h]||o;return n?r.createElement(d,i(i({ref:t},l),{},{components:n})):r.createElement(d,i({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},26806:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(83117),a=(n(67294),n(3905));const o={},i="TypeScript Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Memento/typescript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Memento/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Memento/typescript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Memento/typescript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/example2"},next:{title:"Observer",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/"}},c={},p=[],l={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Memento Design Pattern\n *\n * Intent: Lets you save and restore the previous state of an object without\n * revealing the details of its implementation.\n */\n\n/**\n * The Originator holds some important state that may change over time. It also\n * defines a method for saving the state inside a memento and another method for\n * restoring the state from it.\n */\nclass Originator {\n  /**\n   * For the sake of simplicity, the originator\'s state is stored inside a\n   * single variable.\n   */\n  private state: string;\n\n  constructor(state: string) {\n    this.state = state;\n    console.log(`Originator: My initial state is: ${state}`);\n  }\n\n  /**\n   * The Originator\'s business logic may affect its internal state. Therefore,\n   * the client should backup the state before launching methods of the\n   * business logic via the save() method.\n   */\n  public doSomething(): void {\n    console.log("Originator: I\'m doing something important.");\n    this.state = this.generateRandomString(30);\n    console.log(`Originator: and my state has changed to: ${this.state}`);\n  }\n\n  private generateRandomString(length: number = 10): string {\n    const charSet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";\n\n    return Array.apply(null, {length})\n      .map(() => charSet.charAt(Math.floor(Math.random() * charSet.length)))\n      .join("");\n  }\n\n  /**\n   * Saves the current state inside a memento.\n   */\n  public save(): Memento {\n    return new ConcreteMemento(this.state);\n  }\n\n  /**\n   * Restores the Originator\'s state from a memento object.\n   */\n  public restore(memento: Memento): void {\n    this.state = memento.getState();\n    console.log(`Originator: My state has changed to: ${this.state}`);\n  }\n}\n\n/**\n * The Memento interface provides a way to retrieve the memento\'s metadata, such\n * as creation date or name. However, it doesn\'t expose the Originator\'s state.\n */\ninterface Memento {\n  getState(): string;\n\n  getName(): string;\n\n  getDate(): string;\n}\n\n/**\n * The Concrete Memento contains the infrastructure for storing the Originator\'s\n * state.\n */\nclass ConcreteMemento implements Memento {\n  private state: string;\n\n  private date: string;\n\n  constructor(state: string) {\n    this.state = state;\n    this.date = new Date().toISOString().slice(0, 19).replace("T", " ");\n  }\n\n  /**\n   * The Originator uses this method when restoring its state.\n   */\n  public getState(): string {\n    return this.state;\n  }\n\n  /**\n   * The rest of the methods are used by the Caretaker to display metadata.\n   */\n  public getName(): string {\n    return `${this.date} / (${this.state.substr(0, 9)}...)`;\n  }\n\n  public getDate(): string {\n    return this.date;\n  }\n}\n\n/**\n * The Caretaker doesn\'t depend on the Concrete Memento class. Therefore, it\n * doesn\'t have access to the originator\'s state, stored inside the memento. It\n * works with all mementos via the base Memento interface.\n */\nclass Caretaker {\n  private mementos: Memento[] = [];\n\n  private originator: Originator;\n\n  constructor(originator: Originator) {\n    this.originator = originator;\n  }\n\n  public backup(): void {\n    console.log("\\nCaretaker: Saving Originator\'s state...");\n    this.mementos.push(this.originator.save());\n  }\n\n  public undo(): void {\n    if (!this.mementos.length) {\n      return;\n    }\n    const memento = this.mementos.pop();\n\n    console.log(`Caretaker: Restoring state to: ${memento.getName()}`);\n    this.originator.restore(memento);\n  }\n\n  public showHistory(): void {\n    console.log("Caretaker: Here\'s the list of mementos:");\n    for (const memento of this.mementos) {\n      console.log(memento.getName());\n    }\n  }\n}\n\n/**\n * Client code.\n */\nconst originator = new Originator("Super-duper-super-puper-super.");\nconst caretaker = new Caretaker(originator);\n\ncaretaker.backup();\noriginator.doSomething();\n\ncaretaker.backup();\noriginator.doSomething();\n\ncaretaker.backup();\noriginator.doSomething();\n\nconsole.log("");\ncaretaker.showHistory();\n\nconsole.log("\\nClient: Now, let\'s rollback!\\n");\ncaretaker.undo();\n\nconsole.log("\\nClient: Once more!\\n");\ncaretaker.undo();\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Originator: My initial state is: Super-duper-super-puper-super.\n\nCaretaker: Saving Originator's state...\nOriginator: I'm doing something important.\nOriginator: and my state has changed to: qXqxgTcLSCeLYdcgElOghOFhPGfMxo\n\nCaretaker: Saving Originator's state...\nOriginator: I'm doing something important.\nOriginator: and my state has changed to: iaVCJVryJwWwbipieensfodeMSWvUY\n\nCaretaker: Saving Originator's state...\nOriginator: I'm doing something important.\nOriginator: and my state has changed to: oSUxsOCiZEnohBMQEjwnPWJLGnwGmy\n\nCaretaker: Here's the list of mementos:\n2019-02-17 15:14:05 / (Super-dup...)\n2019-02-17 15:14:05 / (qXqxgTcLS...)\n2019-02-17 15:14:05 / (iaVCJVryJ...)\n\nClient: Now, let's rollback!\n\nCaretaker: Restoring state to: 2019-02-17 15:14:05 / (iaVCJVryJ...)\nOriginator: My state has changed to: iaVCJVryJwWwbipieensfodeMSWvUY\n\nClient: Once more!\n\nCaretaker: Restoring state to: 2019-02-17 15:14:05 / (qXqxgTcLS...)\nOriginator: My state has changed to: qXqxgTcLSCeLYdcgElOghOFhPGfMxo\n")))}m.isMDXComponent=!0}}]);