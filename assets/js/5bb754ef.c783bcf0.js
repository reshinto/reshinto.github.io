"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[2178],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=o.createContext({}),l=function(e){var t=o.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(a.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,h=u["".concat(a,".").concat(d)]||u[d]||m[d]||i;return n?o.createElement(h,s(s({ref:t},p),{},{components:n})):o.createElement(h,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var l=2;l<i;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},12102:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var o=n(83117),r=(n(67294),n(3905));const i={},s="C++ Example",c={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/cPlusPlus/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/cPlusPlus",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Visitor/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Visitor",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/cSharp/"}},a={},l=[],p={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"c-example"},"C++ Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <array>\n#include <iostream>\n#include <string>\n\n/**\n * Visitor Design Pattern\n *\n * Intent: Lets you separate algorithms from the objects on which they operate.\n */\n\n/**\n * The Visitor Interface declares a set of visiting methods that correspond to\n * component classes. The signature of a visiting method allows the visitor to\n * identify the exact class of the component that it\'s dealing with.\n */\nclass ConcreteComponentA;\nclass ConcreteComponentB;\n\nclass Visitor {\n public:\n  virtual void VisitConcreteComponentA(const ConcreteComponentA *element) const = 0;\n  virtual void VisitConcreteComponentB(const ConcreteComponentB *element) const = 0;\n};\n\n/**\n * The Component interface declares an `accept` method that should take the base\n * visitor interface as an argument.\n */\n\nclass Component {\n public:\n  virtual ~Component() {}\n  virtual void Accept(Visitor *visitor) const = 0;\n};\n\n/**\n * Each Concrete Component must implement the `Accept` method in such a way that\n * it calls the visitor\'s method corresponding to the component\'s class.\n */\nclass ConcreteComponentA : public Component {\n  /**\n   * Note that we\'re calling `visitConcreteComponentA`, which matches the\n   * current class name. This way we let the visitor know the class of the\n   * component it works with.\n   */\n public:\n  void Accept(Visitor *visitor) const override {\n    visitor->VisitConcreteComponentA(this);\n  }\n  /**\n   * Concrete Components may have special methods that don\'t exist in their base\n   * class or interface. The Visitor is still able to use these methods since\n   * it\'s aware of the component\'s concrete class.\n   */\n  std::string ExclusiveMethodOfConcreteComponentA() const {\n    return "A";\n  }\n};\n\nclass ConcreteComponentB : public Component {\n  /**\n   * Same here: visitConcreteComponentB => ConcreteComponentB\n   */\n public:\n  void Accept(Visitor *visitor) const override {\n    visitor->VisitConcreteComponentB(this);\n  }\n  std::string SpecialMethodOfConcreteComponentB() const {\n    return "B";\n  }\n};\n\n/**\n * Concrete Visitors implement several versions of the same algorithm, which can\n * work with all concrete component classes.\n *\n * You can experience the biggest benefit of the Visitor pattern when using it\n * with a complex object structure, such as a Composite tree. In this case, it\n * might be helpful to store some intermediate state of the algorithm while\n * executing visitor\'s methods over various objects of the structure.\n */\nclass ConcreteVisitor1 : public Visitor {\n public:\n  void VisitConcreteComponentA(const ConcreteComponentA *element) const override {\n    std::cout << element->ExclusiveMethodOfConcreteComponentA() << " + ConcreteVisitor1\\n";\n  }\n\n  void VisitConcreteComponentB(const ConcreteComponentB *element) const override {\n    std::cout << element->SpecialMethodOfConcreteComponentB() << " + ConcreteVisitor1\\n";\n  }\n};\n\nclass ConcreteVisitor2 : public Visitor {\n public:\n  void VisitConcreteComponentA(const ConcreteComponentA *element) const override {\n    std::cout << element->ExclusiveMethodOfConcreteComponentA() << " + ConcreteVisitor2\\n";\n  }\n  void VisitConcreteComponentB(const ConcreteComponentB *element) const override {\n    std::cout << element->SpecialMethodOfConcreteComponentB() << " + ConcreteVisitor2\\n";\n  }\n};\n/**\n * The client code can run visitor operations over any set of elements without\n * figuring out their concrete classes. The accept operation directs a call to\n * the appropriate operation in the visitor object.\n */\nvoid ClientCode(std::array<const Component *, 2> components, Visitor *visitor) {\n  // ...\n  for (const Component *comp : components) {\n    comp->Accept(visitor);\n  }\n  // ...\n}\n\nint main() {\n  std::array<const Component *, 2> components = {new ConcreteComponentA, new ConcreteComponentB};\n  std::cout << "The client code works with all visitors via the base Visitor interface:\\n";\n  ConcreteVisitor1 *visitor1 = new ConcreteVisitor1;\n  ClientCode(components, visitor1);\n  std::cout << "\\n";\n  std::cout << "It allows the same client code to work with different types of visitors:\\n";\n  ConcreteVisitor2 *visitor2 = new ConcreteVisitor2;\n  ClientCode(components, visitor2);\n\n  for (const Component *comp : components) {\n    delete comp;\n  }\n  delete visitor1;\n  delete visitor2;\n\n  return 0;\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"The client code works with all visitors via the base Visitor interface:\nA + ConcreteVisitor1\nB + ConcreteVisitor1\n\nIt allows the same client code to work with different types of visitors:\nA + ConcreteVisitor2\nB + ConcreteVisitor2\n")))}m.isMDXComponent=!0}}]);