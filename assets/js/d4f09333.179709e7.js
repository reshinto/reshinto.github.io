"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[52028],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,g=u["".concat(c,".").concat(f)]||u[f]||d[f]||i;return n?r.createElement(g,s(s({ref:t},l),{},{components:n})):r.createElement(g,s({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3397:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(83117),a=(n(67294),n(3905));const i={},s="C++ Example",o={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Adapter/cPlusPlus/readme",id:"interviewPrep/designPatterns/Structural_patterns/Adapter/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Adapter/cPlusPlus",slug:"/interviewPrep/designPatterns/Structural_patterns/Adapter/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Adapter",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Adapter/cPlusPlus/example2"}},c={},p=[],l={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-example"},"C++ Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <algorithm>\n#include <iostream>\n#include <string>\n\n/**\n * Adapter Design Pattern\n *\n * Intent: Provides a unified interface that allows objects with incompatible\n * interfaces to collaborate.\n */\n\n/**\n * The Target defines the domain-specific interface used by the client code.\n */\nclass Target {\n public:\n  virtual ~Target() = default;\n\n  virtual std::string Request() const {\n    return "Target: The default target\'s behavior.";\n  }\n};\n\n/**\n * The Adaptee contains some useful behavior, but its interface is incompatible\n * with the existing client code. The Adaptee needs some adaptation before the\n * client code can use it.\n */\nclass Adaptee {\n public:\n  std::string SpecificRequest() const {\n    return ".eetpadA eht fo roivaheb laicepS";\n  }\n};\n\n/**\n * The Adapter makes the Adaptee\'s interface compatible with the Target\'s\n * interface.\n */\nclass Adapter : public Target {\n private:\n  Adaptee *adaptee_;\n\n public:\n  Adapter(Adaptee *adaptee) : adaptee_(adaptee) {}\n  std::string Request() const override {\n    std::string to_reverse = this->adaptee_->SpecificRequest();\n    std::reverse(to_reverse.begin(), to_reverse.end());\n    return "Adapter: (TRANSLATED) " + to_reverse;\n  }\n};\n\n/**\n * The client code supports all classes that follow the Target interface.\n */\nvoid ClientCode(const Target *target) {\n  std::cout << target->Request();\n}\n\nint main() {\n  std::cout << "Client: I can work just fine with the Target objects:\\n";\n  Target *target = new Target;\n  ClientCode(target);\n  std::cout << "\\n\\n";\n  Adaptee *adaptee = new Adaptee;\n  std::cout << "Client: The Adaptee class has a weird interface. See, I don\'t understand it:\\n";\n  std::cout << "Adaptee: " << adaptee->SpecificRequest();\n  std::cout << "\\n\\n";\n  std::cout << "Client: But I can work with it via the Adapter:\\n";\n  Adapter *adapter = new Adapter(adaptee);\n  ClientCode(adapter);\n  std::cout << "\\n";\n\n  delete target;\n  delete adaptee;\n  delete adapter;\n\n  return 0;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Client: I can work just fine with the Target objects:\nTarget: The default target's behavior.\n\nClient: The Adaptee class has a weird interface. See, I don't understand it:\nAdaptee: .eetpadA eht fo roivaheb laicepS\n\nClient: But I can work with it via the Adapter:\nAdapter: (TRANSLATED) Special behavior of the Adaptee.\n")))}d.isMDXComponent=!0}}]);