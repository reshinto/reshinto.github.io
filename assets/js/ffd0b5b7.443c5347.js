"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[5072],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=s,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function u(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},74180:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(87462),s=(n(67294),n(3905));const o={},a="TypeScript Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Template/typescript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Template/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Template/typescript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Template/typescript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/swift/example2"},next:{title:"Visitor",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/"}},l={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Template Method Design Pattern\n *\n * Intent: Defines the skeleton of an algorithm in the superclass but lets\n * subclasses override specific steps of the algorithm without changing its\n * structure.\n */\n\n/**\n * The Abstract Class defines a template method that contains a skeleton of some\n * algorithm, composed of calls to (usually) abstract primitive operations.\n *\n * Concrete subclasses should implement these operations, but leave the template\n * method itself intact.\n */\nabstract class AbstractClass {\n  /**\n   * The template method defines the skeleton of an algorithm.\n   */\n  public templateMethod(): void {\n    this.baseOperation1();\n    this.requiredOperations1();\n    this.baseOperation2();\n    this.hook1();\n    this.requiredOperation2();\n    this.baseOperation3();\n    this.hook2();\n  }\n\n  /**\n   * These operations already have implementations.\n   */\n  protected baseOperation1(): void {\n    console.log("AbstractClass says: I am doing the bulk of the work");\n  }\n\n  protected baseOperation2(): void {\n    console.log(\n      "AbstractClass says: But I let subclasses override some operations"\n    );\n  }\n\n  protected baseOperation3(): void {\n    console.log(\n      "AbstractClass says: But I am doing the bulk of the work anyway"\n    );\n  }\n\n  /**\n   * These operations have to be implemented in subclasses.\n   */\n  protected abstract requiredOperations1(): void;\n\n  protected abstract requiredOperation2(): void;\n\n  /**\n   * These are "hooks." Subclasses may override them, but it\'s not mandatory\n   * since the hooks already have default (but empty) implementation. Hooks\n   * provide additional extension points in some crucial places of the\n   * algorithm.\n   */\n  protected hook1(): void {}\n\n  protected hook2(): void {}\n}\n\n/**\n * Concrete classes have to implement all abstract operations of the base class.\n * They can also override some operations with a default implementation.\n */\nclass ConcreteClass1 extends AbstractClass {\n  protected requiredOperations1(): void {\n    console.log("ConcreteClass1 says: Implemented Operation1");\n  }\n\n  protected requiredOperation2(): void {\n    console.log("ConcreteClass1 says: Implemented Operation2");\n  }\n}\n\n/**\n * Usually, concrete classes override only a fraction of base class\' operations.\n */\nclass ConcreteClass2 extends AbstractClass {\n  protected requiredOperations1(): void {\n    console.log("ConcreteClass2 says: Implemented Operation1");\n  }\n\n  protected requiredOperation2(): void {\n    console.log("ConcreteClass2 says: Implemented Operation2");\n  }\n\n  protected hook1(): void {\n    console.log("ConcreteClass2 says: Overridden Hook1");\n  }\n}\n\n/**\n * The client code calls the template method to execute the algorithm. Client\n * code does not have to know the concrete class of an object it works with, as\n * long as it works with objects through the interface of their base class.\n */\nfunction clientCode(abstractClass: AbstractClass) {\n  // ...\n  abstractClass.templateMethod();\n  // ...\n}\n\nconsole.log("Same client code can work with different subclasses:");\nclientCode(new ConcreteClass1());\nconsole.log("");\n\nconsole.log("Same client code can work with different subclasses:");\nclientCode(new ConcreteClass2());\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Same client code can work with different subclasses:\nAbstractClass says: I am doing the bulk of the work\nConcreteClass1 says: Implemented Operation1\nAbstractClass says: But I let subclasses override some operations\nConcreteClass1 says: Implemented Operation2\nAbstractClass says: But I am doing the bulk of the work anyway\n\nSame client code can work with different subclasses:\nAbstractClass says: I am doing the bulk of the work\nConcreteClass2 says: Implemented Operation1\nAbstractClass says: But I let subclasses override some operations\nConcreteClass2 says: Overridden Hook1\nConcreteClass2 says: Implemented Operation2\nAbstractClass says: But I am doing the bulk of the work anyway\n")))}d.isMDXComponent=!0}}]);