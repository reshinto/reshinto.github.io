"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9302],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var l=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=l.createContext({}),s=function(e){var n=l.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=s(e.components);return l.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},c=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,m=u(e,["components","mdxType","originalType","parentName"]),c=s(t),h=r,p=c["".concat(i,".").concat(h)]||c[h]||d[h]||a;return t?l.createElement(p,o(o({ref:n},m),{},{components:t})):l.createElement(p,o({ref:n},m))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=c;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var s=2;s<a;s++)o[s]=t[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}c.displayName="MDXCreateElement"},57688:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>u,toc:()=>s});var l=t(87462),r=(t(67294),t(3905));const a={},o="How Sum example",u={unversionedId:"interviewPrep/algorithms_and_techniques/dynamic_programming/howSum",id:"interviewPrep/algorithms_and_techniques/dynamic_programming/howSum",title:"How Sum example",description:"- explanation",source:"@site/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/howSum.md",sourceDirName:"interviewPrep/algorithms_and_techniques/dynamic_programming",slug:"/interviewPrep/algorithms_and_techniques/dynamic_programming/howSum",permalink:"/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/howSum",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/howSum.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Grid Traveler example",permalink:"/docs/interviewPrep/algorithms_and_techniques/dynamic_programming/gridTraveler"},next:{title:"Greedy Algorithm",permalink:"/docs/interviewPrep/algorithms_and_techniques/greedy_algorithms/"}},i={},s=[{value:"Naive solution",id:"naive-solution",level:2},{value:"Memoization solution",id:"memoization-solution",level:2},{value:"Tabulation solution",id:"tabulation-solution",level:2}],m={toc:s};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,l.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-sum-example"},"How Sum example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Write a function "howSum(targetSum, numbers)" that takes in a targetSum and an array of numbers as arguments\n\nThe function should return an array containing any combination of elements that add up to exactly the targetSum\nIf there is no combination that adds up to the targetSum, then return null\n\nIf there are multiple combinations possible, you may return any single one\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"explanation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Question 1: howSum(7, [5, 3, 4, 7])\nAnswer 1: [3, 4] or [7]\n\nQuestion 2: howSum(8, [2, 3, 5])\nAnswer 2: [2, 2, 2, 2] or [3, 5]\n\nQuestion 3: howSum(7, [2, 4])\nAnswer 3: null\n\nQuestion 4: howSum(0, [1, 2, 3])\nAnswer 4: []\n\nexample: howSum(7, [5, 3, 4, 7])\n\n            7\n  /      |      |     \\\n7-5=2  7-3=4  7-4=3  7-7=0\nnull  /     \\     \\    []\n  4-3=1  4-4=0  3-3=0\n  null    []     []\n\nwhen the leaf node value is 0, it returns an empty array\nthe the value that was subtracted from it's parent node is added into the array\nthis then repeats until it reaches the root node\nthe end array of values for 1 branch would be one of the answers available\nthe total number of answers is dependent on how many leaf nodes has a value of 0\nthe other base cases that are at the remaining leaf nodes should return a null value\nfor this example, the answers would be [4, 3] or [3, 4] or [7]\n")),(0,r.kt)("h2",{id:"naive-solution"},"Naive solution"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"time complexity is ",(0,r.kt)("inlineCode",{parentName:"li"},"O((n^m) * m)"),", where m = target sum, n = numbers.length"),(0,r.kt)("li",{parentName:"ul"},"space complexity is ",(0,r.kt)("inlineCode",{parentName:"li"},"O(m)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const howSum = (targetSum, numbers) => {\n  if (targetSum === 0) return [];\n  if (targetSum < 0) return null;\n\n  for (const num of numbers) {\n    const remainder = targetSum - num;\n    const remainderResult = howSum(remainder, numbers);\n    if (remainderResult !== null) {\n      return [...remainderResult, num]; // this copies an array which the worst case will be m times\n    }\n  }\n  return null;\n};\n\nconsole.log(howSum(7, [2, 3])); // [3, 2, 2]\nconsole.log(howSum(7, [5, 3, 4, 7])); // [4, 3]\nconsole.log(howSum(7, [2, 4])); // null\nconsole.log(howSum(8, [2, 3, 5])); // [2, 2, 2, 2]\nconsole.log(howSum(300, [7, 14])); // null\n")),(0,r.kt)("h2",{id:"memoization-solution"},"Memoization solution"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"time complexity is ",(0,r.kt)("inlineCode",{parentName:"li"},"O(n * m * m)"),", simplified to ",(0,r.kt)("inlineCode",{parentName:"li"},"O(n * m^2)")),(0,r.kt)("li",{parentName:"ul"},"space complexity is ",(0,r.kt)("inlineCode",{parentName:"li"},"O(m * m)"),", simplified to ",(0,r.kt)("inlineCode",{parentName:"li"},"O(m^2)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const howSum = (targetSum, numbers, memo = {}) => {\n  if (targetSum in memo) return memo[targetSum];\n  if (targetSum === 0) return [];\n  if (targetSum < 0) return null;\n\n  for (const num of numbers) {\n    const remainder = targetSum - num;\n    const remainderResult = howSum(remainder, numbers, memo);\n    if (remainderResult !== null) {\n      memo[targetSum] = [...remainderResult, num]; // sometimes values for the key would be an array\n      return memo[targetSum];\n    }\n  }\n  memo[targetSum] = null;\n  return null;\n};\n\nconsole.log(howSum(7, [2, 3])); // [3, 2, 2]\nconsole.log(howSum(7, [5, 3, 4, 7])); // [4, 3]\nconsole.log(howSum(7, [2, 4])); // null\nconsole.log(howSum(8, [2, 3, 5])); // [2, 2, 2, 2]\nconsole.log(howSum(300, [7, 14])); // null\n")),(0,r.kt)("h2",{id:"tabulation-solution"},"Tabulation solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"howSum(7, [5, 3, 4]) -> [4, 3]\n\nm = targetSum\nn = numbers.length\n\nfirst create an array the size of the target sum + 1\nset default value to be null\n\nindex:   0     1     2     3     4     5     6     7\nvalue:  null  null  null  null  null  null  null  null\n\nwhen targetSum is at 0, no sum is required to get 0, therefore return value should be []\n\nindex:   0     1     2     3     4     5     6     7\nvalue:   []  null  null  null  null  null  null  null\n\nlook at the 1st element of the array [5, 3, 4] is 5\ncurrent index is 0 and value is []\ncurrent index 0, can return 0 by not adding\nat 5 steps ahead of the current index,\nvalue can be changed to the same as current value [] and appends the current element 5 into it\nresulting to [5]\n\nindex:   0     1     2     3     4     5     6     7\nvalue:   []  null  null  null  null   [5]  null  null\n\nlook at the 2nd element of the array [5, 3, 4] is 3\ncurrent index is 0 and value is []\ncurrent index 0, can return 0 by not adding\nat 3 steps ahead of the current index,\nvalue can be copied from the current value [] and append the current element 3 into it\nresulting to [3]\n\nindex:   0     1     2     3     4     5     6     7\nvalue:   []  null  null   [3]  null   [5]  null  null\n\nlook at the 3rd element of the array [5, 3, 4] is 4\ncurrent index is 0 and value is []\ncurrent index 0, can return 0 by not adding\nat 4 steps ahead of the current index,\nvalue can be copied from the current value [] and append the current element 4 into it\nresulting to [4]\n\nindex:   0     1     2     3     4     5     6     7\nvalue:   []  null  null   [3]   [4]   [5]  null  null\n\nmove current value to the next index\nlook at the 1st element of the array [5, 3, 4] is 5\ncurrent index is 1 and value is null\nif current value is null, nothing needs to be changed\n\nindex:   0     1     2     3     4     5     6     7\nvalue:   []  null  null   [3]   [4]   [5]  null  null\n\nlook at the 1st element of the array [5, 3, 4] is 3\ncurrent index is 1 and value is null\nif current value is null, nothing needs to be changed\n\nindex:   0     1     2     3     4     5     6     7\nvalue:   []  null  null   [3]   [4]   [5]  null  null\n\nlook at the 1st element of the array [5, 3, 4] is 4\ncurrent index is 1 and value is null\nif current value is null, nothing needs to be changed\n\nindex:   0     1     2     3     4     5     6     7\nvalue:   []  null  null   [3]   [4]   [5]  null  null\n\nmove current value to the next index\nlook at the 1st element of the array [5, 3, 4] is 5\ncurrent index is 2 and value is null\nif current value is null, nothing needs to be changed\n\nindex:   0     1     2     3     4     5     6     7\nvalue:   []  null  null   [3]   [4]   [5]  null  null\n\nlook at the 1st element of the array [5, 3, 4] is 3\ncurrent index is 2 and value is null\nif current value is null, nothing needs to be changed\n\nindex:   0     1     2     3     4     5     6     7\nvalue:   []  null  null   [3]   [4]   [5]  null  null\n\nlook at the 1st element of the array [5, 3, 4] is 4\ncurrent index is 2 and value is null\nif current value is null, nothing needs to be changed\n\nindex:   0     1     2     3     4     5     6     7\nvalue:   []  null  null   [3]   [4]   [5]  null  null\n\nmove current value to the next index\nlook at the 1st element of the array [5, 3, 4] is 5\ncurrent index is 3 and value is [3]\nat 5 steps ahead of the current index,\nit is out of range, nothing needs to be changed\n\nindex:   0     1     2     3     4     5     6     7\nvalue:   []  null  null   [3]   [4]   [5]  null  null\n\nlook at the 2nd element of the array [5, 3, 4] is 3\ncurrent index is 3 and value is [3]\nat 3 steps ahead of the current index,\nvalue can be copied from the current value [3] and append the current element 3 into it\nresulting to [3, 3]\n\nindex:   0     1     2     3     4     5     6     7\nvalue:   []  null  null   [3]   [4]   [5]  [3, 3]  null\n\nlook at the 3rd element of the array [5, 3, 4] is 4\ncurrent index is 3 and value is [3]\nat 4 steps ahead of the current index,\nvalue can be copied from the current value [3] and append the current element 4 into it\nresulting to [3, 4]\n\nindex:   0     1     2     3     4     5     6      7\nvalue:   []  null  null   [3]   [4]   [5]  [3, 3] [3, 4]\n\nwe can stop here, but just for example purposes, we will continue 1 more step\nwe can continue the loop till the end and it would still provide the same valid answer\n\nmove current value to the next index\nlook at the 1st element of the array [5, 3, 4] is 5\ncurrent index is 4 and value is [4]\nat 5 steps ahead of the current index,\nit is out of range, nothing needs to be changed\n\nindex:   0     1     2     3     4     5     6      7\nvalue:   []  null  null   [3]   [4]   [5]  [3, 3] [3, 4]\n\nlook at the 2nd element of the array [5, 3, 4] is 3\ncurrent index is 4 and value is [4]\nat 3 steps ahead of the current index,\nvalue can be copied from the current value [4] and append the current element 3 into it\nresulting to [4, 3]\nnote that value at index 7 gets overwritten\n\nindex:   0     1     2     3     4     5     6      7\nvalue:   []  null  null   [3]   [4]   [5]  [3, 3] [4, 3]\n\nlook at the 3rd element of the array [5, 3, 4] is 4\ncurrent index is 4 and value is [4]\nat 4 steps ahead of the current index,\nit is out of range, nothing needs to be changed\n\nindex:   0     1     2     3     4     5     6      7\nvalue:   []  null  null   [3]   [4]   [5]  [3, 3] [4, 3]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"time complexity is ",(0,r.kt)("inlineCode",{parentName:"li"},"O(n * m * m)"),", simplified to ",(0,r.kt)("inlineCode",{parentName:"li"},"O(n * m^2)")),(0,r.kt)("li",{parentName:"ul"},"space complexity is ",(0,r.kt)("inlineCode",{parentName:"li"},"O(m * m)"),", simplified to ",(0,r.kt)("inlineCode",{parentName:"li"},"O(m^2)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const howSum = (targetSum, numbers) => {\n  const table = Array(targetSum + 1).fill(null); // space: m\n  table[0] = [];\n\n  for (let i = 0; i <= targetSum; i++) {\n    // time: m\n    if (table[i] !== null) {\n      for (const num of numbers) {\n        // time: n\n        table[i + num] = [...table[i], num]; // time & space: m\n      }\n    }\n  }\n  return table[targetSum];\n};\n\nconsole.log(howSum(7, [2, 3])); // [3, 2, 2]\nconsole.log(howSum(7, [5, 3, 4, 7])); // [4, 3]\nconsole.log(howSum(7, [2, 4])); // null\nconsole.log(howSum(8, [2, 3, 5])); // [2, 2, 2, 2]\nconsole.log(howSum(300, [7, 14])); // null\n")))}d.isMDXComponent=!0}}]);