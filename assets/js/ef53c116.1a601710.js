"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[33653],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),u=c(t),h=o,d=u["".concat(p,".").concat(h)]||u[h]||s[h]||i;return t?r.createElement(d,l(l({ref:n},m),{},{components:t})):r.createElement(d,l({ref:n},m))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=u;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},89383:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=t(83117),o=(t(67294),t(3905));const i={},l="Example 2",a={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Composite/swift/example2",id:"interviewPrep/designPatterns/Structural_patterns/Composite/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Composite/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Composite/swift",slug:"/interviewPrep/designPatterns/Structural_patterns/Composite/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Composite/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Composite/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Composite/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Composite/typescript/"}},p={},c=[],m={toc:c};function s(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"example-2"},"Example 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'import UIKit\nimport XCTest\n\nprotocol Component {\n\n    func accept<T: Theme>(theme: T)\n}\n\nextension Component where Self: UIViewController {\n\n    func accept<T: Theme>(theme: T) {\n        view.accept(theme: theme)\n        view.subviews.forEach({ $0.accept(theme: theme) })\n    }\n}\n\nextension UIView: Component {}\nextension UIViewController: Component {}\n\nextension Component where Self: UIView {\n\n    func accept<T: Theme>(theme: T) {\n\n        print("\\t\\(description): has applied \\(theme.description)")\n\n        backgroundColor = theme.backgroundColor\n    }\n}\n\nextension Component where Self: UILabel {\n\n    func accept<T: LabelTheme>(theme: T) {\n\n        print("\\t\\(description): has applied \\(theme.description)")\n\n        backgroundColor = theme.backgroundColor\n        textColor = theme.textColor\n    }\n}\n\nextension Component where Self: UIButton {\n\n    func accept<T: ButtonTheme>(theme: T) {\n\n        print("\\t\\(description): has applied \\(theme.description)")\n\n        backgroundColor = theme.backgroundColor\n        setTitleColor(theme.textColor, for: .normal)\n        setTitleColor(theme.highlightedColor, for: .highlighted)\n    }\n}\n\n\nprotocol Theme: CustomStringConvertible {\n\n    var backgroundColor: UIColor { get }\n}\n\nprotocol ButtonTheme: Theme {\n\n    var textColor: UIColor { get }\n\n    var highlightedColor: UIColor { get }\n\n    /// other properties\n}\n\nprotocol LabelTheme: Theme {\n\n    var textColor: UIColor { get }\n\n    /// other properties\n}\n\n/// Button Themes\n\nstruct DefaultButtonTheme: ButtonTheme {\n\n    var textColor = UIColor.red\n\n    var highlightedColor = UIColor.white\n\n    var backgroundColor = UIColor.orange\n\n    var description: String { return "Default Buttom Theme" }\n}\n\nstruct NightButtonTheme: ButtonTheme {\n\n    var textColor = UIColor.white\n\n    var highlightedColor = UIColor.red\n\n    var backgroundColor = UIColor.black\n\n    var description: String { return "Night Buttom Theme" }\n}\n\n/// Label Themes\n\nstruct DefaultLabelTheme: LabelTheme {\n\n    var textColor = UIColor.red\n\n    var backgroundColor = UIColor.black\n\n    var description: String { return "Default Label Theme" }\n}\n\nstruct NightLabelTheme: LabelTheme {\n\n    var textColor = UIColor.white\n\n    var backgroundColor = UIColor.black\n\n    var description: String { return "Night Label Theme" }\n}\n\n\n\nclass CompositeRealWorld: XCTestCase {\n\n    func testCompositeRealWorld() {\n\n        print("\\nClient: Applying \'default\' theme for \'UIButton\'")\n        apply(theme: DefaultButtonTheme(), for: UIButton())\n\n        print("\\nClient: Applying \'night\' theme for \'UIButton\'")\n        apply(theme: NightButtonTheme(), for: UIButton())\n\n\n        print("\\nClient: Let\'s use View Controller as a composite!")\n\n        /// Night theme\n        print("\\nClient: Applying \'night button\' theme for \'WelcomeViewController\'...")\n        apply(theme: NightButtonTheme(), for: WelcomeViewController())\n        print()\n\n        print("\\nClient: Applying \'night label\' theme for \'WelcomeViewController\'...")\n        apply(theme: NightLabelTheme(), for: WelcomeViewController())\n        print()\n\n        /// Default Theme\n        print("\\nClient: Applying \'default button\' theme for \'WelcomeViewController\'...")\n        apply(theme: DefaultButtonTheme(), for: WelcomeViewController())\n        print()\n\n        print("\\nClient: Applying \'default label\' theme for \'WelcomeViewController\'...")\n        apply(theme: DefaultLabelTheme(), for: WelcomeViewController())\n        print()\n    }\n\n    func apply<T: Theme>(theme: T, for component: Component) {\n        component.accept(theme: theme)\n    }\n}\n\nclass WelcomeViewController: UIViewController {\n\n    class ContentView: UIView {\n\n        var titleLabel = UILabel()\n        var actionButton = UIButton()\n\n        override init(frame: CGRect) {\n            super.init(frame: frame)\n            setup()\n        }\n\n        required init?(coder decoder: NSCoder) {\n            super.init(coder: decoder)\n            setup()\n        }\n\n        func setup() {\n            addSubview(titleLabel)\n            addSubview(actionButton)\n        }\n    }\n\n    override func loadView() {\n        view = ContentView()\n    }\n}\n\n/// Let\'s override a description property for the better output\n\nextension WelcomeViewController {\n\n    open override var description: String { return "WelcomeViewController" }\n}\n\nextension WelcomeViewController.ContentView {\n\n    override var description: String { return "ContentView" }\n}\n\nextension UIButton {\n\n    open override var description: String { return "UIButton" }\n}\n\nextension UILabel {\n\n    open override var description: String { return "UILabel" }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Client: Applying 'default' theme for 'UIButton'\nUIButton: has applied Default Buttom Theme\n\nClient: Applying 'night' theme for 'UIButton'\nUIButton: has applied Night Buttom Theme\n\nClient: Let's use View Controller as a composite!\n\nClient: Applying 'night button' theme for 'WelcomeViewController'...\nContentView: has applied Night Buttom Theme\nUILabel: has applied Night Buttom Theme\nUIButton: has applied Night Buttom Theme\n")))}s.isMDXComponent=!0}}]);