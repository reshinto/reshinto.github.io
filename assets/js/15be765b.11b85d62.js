"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9066],{3905:(t,e,r)=>{r.d(e,{Zo:()=>u,kt:()=>f});var n=r(67294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function c(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var i=n.createContext({}),l=function(t){var e=n.useContext(i),r=e;return t&&(r="function"==typeof t?t(e):c(c({},e),t)),r},u=function(t){var e=l(t.components);return n.createElement(i.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},p=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,i=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),p=l(r),f=a,h=p["".concat(i,".").concat(f)]||p[f]||d[f]||o;return r?n.createElement(h,c(c({ref:e},u),{},{components:r})):n.createElement(h,c({ref:e},u))}));function f(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,c=new Array(o);c[0]=p;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s.mdxType="string"==typeof t?t:a,c[1]=s;for(var l=2;l<o;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},52770:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const o={},c="Python Example",s={unversionedId:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/python/readme",id:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/python",slug:"/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/python/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/javascript/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/python/example2"}},i={},l=[],u={toc:l};function d(t){let{components:e,...r}=t;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python-example"},"Python Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'"""\nAbstract Factory Design Pattern\n\nIntent: Lets you produce families of related objects without specifying their\nconcrete classes.\n"""\n\n\nfrom __future__ import annotations\nfrom abc import ABC, abstractmethod\n\n\nclass AbstractFactory(ABC):\n    """\n    The Abstract Factory interface declares a set of methods that return\n    different abstract products. These products are called a family and are\n    related by a high-level theme or concept. Products of one family are usually\n    able to collaborate among themselves. A family of products may have several\n    variants, but the products of one variant are incompatible with products of\n    another.\n    """\n    @abstractmethod\n    def create_product_a(self) -> AbstractProductA:\n        pass\n\n    @abstractmethod\n    def create_product_b(self) -> AbstractProductB:\n        pass\n\n\nclass ConcreteFactory1(AbstractFactory):\n    """\n    Concrete Factories produce a family of products that belong to a single\n    variant. The factory guarantees that resulting products are compatible. Note\n    that signatures of the Concrete Factory\'s methods return an abstract\n    product, while inside the method a concrete product is instantiated.\n    """\n\n    def create_product_a(self) -> AbstractProductA:\n        return ConcreteProductA1()\n\n    def create_product_b(self) -> AbstractProductB:\n        return ConcreteProductB1()\n\n\nclass ConcreteFactory2(AbstractFactory):\n    """\n    Each Concrete Factory has a corresponding product variant.\n    """\n\n    def create_product_a(self) -> AbstractProductA:\n        return ConcreteProductA2()\n\n    def create_product_b(self) -> AbstractProductB:\n        return ConcreteProductB2()\n\n\nclass AbstractProductA(ABC):\n    """\n    Each distinct product of a product family should have a base interface. All\n    variants of the product must implement this interface.\n    """\n\n    @abstractmethod\n    def useful_function_a(self) -> str:\n        pass\n\n\n"""\nConcrete Products are created by corresponding Concrete Factories.\n"""\n\n\nclass ConcreteProductA1(AbstractProductA):\n    def useful_function_a(self) -> str:\n        return "The result of the product A1."\n\n\nclass ConcreteProductA2(AbstractProductA):\n    def useful_function_a(self) -> str:\n        return "The result of the product A2."\n\n\nclass AbstractProductB(ABC):\n    """\n    Here\'s the the base interface of another product. All products can interact\n    with each other, but proper interaction is possible only between products of\n    the same concrete variant.\n    """\n    @abstractmethod\n    def useful_function_b(self) -> None:\n        """\n        Product B is able to do its own thing...\n        """\n        pass\n\n    @abstractmethod\n    def another_useful_function_b(self, collaborator: AbstractProductA) -> None:\n        """\n        ...but it also can collaborate with the ProductA.\n\n        The Abstract Factory makes sure that all products it creates are of the\n        same variant and thus, compatible.\n        """\n        pass\n\n\n"""\nConcrete Products are created by corresponding Concrete Factories.\n"""\n\n\nclass ConcreteProductB1(AbstractProductB):\n    def useful_function_b(self) -> str:\n        return "The result of the product B1."\n\n    """\n    The variant, Product B1, is only able to work correctly with the variant,\n    Product A1. Nevertheless, it accepts any instance of AbstractProductA as an\n    argument.\n    """\n\n    def another_useful_function_b(self, collaborator: AbstractProductA) -> str:\n        result = collaborator.useful_function_a()\n        return f"The result of the B1 collaborating with the ({result})"\n\n\nclass ConcreteProductB2(AbstractProductB):\n    def useful_function_b(self) -> str:\n        return "The result of the product B2."\n\n    def another_useful_function_b(self, collaborator: AbstractProductA):\n        """\n        The variant, Product B2, is only able to work correctly with the\n        variant, Product A2. Nevertheless, it accepts any instance of\n        AbstractProductA as an argument.\n        """\n        result = collaborator.useful_function_a()\n        return f"The result of the B2 collaborating with the ({result})"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def client_code(factory: AbstractFactory) -> None:\n    """\n    The client code works with factories and products only through abstract\n    types: AbstractFactory and AbstractProduct. This lets you pass any factory\n    or product subclass to the client code without breaking it.\n    """\n    product_a = factory.create_product_a()\n    product_b = factory.create_product_b()\n\n    print(f"{product_b.useful_function_b()}")\n    print(f"{product_b.another_useful_function_b(product_a)}", end="")\n\n\nif __name__ == "__main__":\n    """\n    The client code can work with any concrete factory class.\n    """\n    print("Client: Testing client code with the first factory type:")\n    client_code(ConcreteFactory1())\n\n    print("\\n")\n\n    print("Client: Testing the same client code with the second factory type:")\n    client_code(ConcreteFactory2())\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Client: Testing client code with the first factory type:\nThe result of the product B1.\nThe result of the B1 collaborating with the (The result of the product A1.)\n\nClient: Testing the same client code with the second factory type:\nThe result of the product B2.\nThe result of the B2 collaborating with the (The result of the product A2.)\n")))}d.isMDXComponent=!0}}]);