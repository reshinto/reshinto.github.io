"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[87676],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),y=s(n),g=r,d=y["".concat(o,".").concat(g)]||y[g]||u[g]||i;return n?a.createElement(d,l(l({ref:t},c),{},{components:n})):a.createElement(d,l({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=y;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},72021:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=n(83117),r=(n(67294),n(3905));const i={},l="Java Example",p={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/State/java/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/State/java/readme",title:"Java Example",description:"- states",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/State/java/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/State/java",slug:"/interviewPrep/designPatterns/Behavioral_patterns/State/java/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/java/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/State/java/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/go/"},next:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/State/javascript/"}},o={},s=[],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"java-example"},"Java Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"states"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"states/LockedState.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.state.example.states;\n\nimport refactoring_guru.state.example.ui.Player;\n\n/**\n * Concrete states provide the special implementation for all interface methods.\n*/\npublic class LockedState extends State {\n\n    LockedState(Player player) {\n        super(player);\n        player.setPlaying(false);\n    }\n\n    @Override\n    public String onLock() {\n        if (player.isPlaying()) {\n            player.changeState(new ReadyState(player));\n            return "Stop playing";\n        } else {\n            return "Locked...";\n        }\n    }\n\n    @Override\n    public String onPlay() {\n        player.changeState(new ReadyState(player));\n        return "Ready";\n    }\n\n    @Override\n    public String onNext() {\n        return "Locked...";\n    }\n\n    @Override\n    public String onPrevious() {\n        return "Locked...";\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"states/PlayingState.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.state.example.states;\n\nimport refactoring_guru.state.example.ui.Player;\n\npublic class PlayingState extends State {\n\n    PlayingState(Player player) {\n        super(player);\n    }\n\n    @Override\n    public String onLock() {\n        player.changeState(new LockedState(player));\n        player.setCurrentTrackAfterStop();\n        return "Stop playing";\n    }\n\n    @Override\n    public String onPlay() {\n        player.changeState(new ReadyState(player));\n        return "Paused...";\n    }\n\n    @Override\n    public String onNext() {\n        return player.nextTrack();\n    }\n\n    @Override\n    public String onPrevious() {\n        return player.previousTrack();\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"states/ReadyState.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.state.example.states;\n\nimport refactoring_guru.state.example.ui.Player;\n\n/**\n * They can also trigger state transitions in the context.\n  */\npublic class ReadyState extends State {\n\n    public ReadyState(Player player) {\n        super(player);\n    }\n\n    @Override\n    public String onLock() {\n        player.changeState(new LockedState(player));\n        return "Locked...";\n    }\n\n    @Override\n    public String onPlay() {\n        String action = player.startPlayback();\n        player.changeState(new PlayingState(player));\n        return action;\n    }\n\n    @Override\n    public String onNext() {\n        return "Locked...";\n    }\n\n    @Override\n    public String onPrevious() {\n        return "Locked...";\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"states/State.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.state.example.states;\n\nimport refactoring_guru.state.example.ui.Player;\n\n/**\n * Common interface for all states.\n*/\npublic abstract class State {\n    Player player;\n\n    /**\n     * Context passes itself through the state constructor. This may help a\n     * state to fetch some useful context data if needed.\n     */\n    State(Player player) {\n        this.player = player;\n    }\n\n    public abstract String onLock();\n    public abstract String onPlay();\n    public abstract String onNext();\n    public abstract String onPrevious();\n}\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"ui"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"ui/Player.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.state.example.ui;\n\nimport refactoring_guru.state.example.states.ReadyState;\nimport refactoring_guru.state.example.states.State;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Player {\n    private State state;\n    private boolean playing = false;\n    private List<String> playlist = new ArrayList<>();\n    private int currentTrack = 0;\n\n    public Player() {\n        this.state = new ReadyState(this);\n        setPlaying(true);\n        for (int i = 1; i <= 12; i++) {\n            playlist.add("Track " + i);\n        }\n    }\n\n    public void changeState(State state) {\n        this.state = state;\n    }\n\n    public State getState() {\n        return state;\n    }\n\n    public void setPlaying(boolean playing) {\n        this.playing = playing;\n    }\n\n    public boolean isPlaying() {\n        return playing;\n    }\n\n    public String startPlayback() {\n        return "Playing " + playlist.get(currentTrack);\n    }\n\n    public String nextTrack() {\n        currentTrack++;\n        if (currentTrack > playlist.size() - 1) {\n            currentTrack = 0;\n        }\n        return "Playing " + playlist.get(currentTrack);\n    }\n\n    public String previousTrack() {\n        currentTrack--;\n        if (currentTrack < 0) {\n            currentTrack = playlist.size() - 1;\n        }\n        return "Playing " + playlist.get(currentTrack);\n    }\n\n    public void setCurrentTrackAfterStop() {\n        this.currentTrack = 0;\n    }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"ui/UI.java"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package refactoring_guru.state.example.ui;\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class UI {\n    private Player player;\n    private static JTextField textField = new JTextField();\n\n    public UI(Player player) {\n        this.player = player;\n    }\n\n    public void init() {\n        JFrame frame = new JFrame("Test player");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JPanel context = new JPanel();\n        context.setLayout(new BoxLayout(context, BoxLayout.Y_AXIS));\n        frame.getContentPane().add(context);\n        JPanel buttons = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        context.add(textField);\n        context.add(buttons);\n\n        // Context delegates handling user\'s input to a state object. Naturally,\n        // the outcome will depend on what state is currently active, since all\n        // states can handle the input differently.\n        JButton play = new JButton("Play");\n        play.addActionListener(e -> textField.setText(player.getState().onPlay()));\n        JButton stop = new JButton("Stop");\n        stop.addActionListener(e -> textField.setText(player.getState().onLock()));\n        JButton next = new JButton("Next");\n        next.addActionListener(e -> textField.setText(player.getState().onNext()));\n        JButton prev = new JButton("Prev");\n        prev.addActionListener(e -> textField.setText(player.getState().onPrevious()));\n        frame.setVisible(true);\n        frame.setSize(300, 100);\n        buttons.add(play);\n        buttons.add(stop);\n        buttons.add(next);\n        buttons.add(prev);\n    }\n}\n'))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Demo.java"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package refactoring_guru.state.example;\n\nimport refactoring_guru.state.example.ui.Player;\nimport refactoring_guru.state.example.ui.UI;\n\n/**\n * Demo class. Everything comes together here.\n */\npublic class Demo {\n    public static void main(String[] args) {\n        Player player = new Player();\n        UI ui = new UI(player);\n        ui.init();\n    }\n}\n")))}u.isMDXComponent=!0}}]);