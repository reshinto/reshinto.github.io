"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[7853],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(a),d=i,k=m["".concat(u,".").concat(d)]||m[d]||c[d]||r;return a?n.createElement(k,l(l({ref:t},p),{},{components:a})):n.createElement(k,l({ref:t},p))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},82331:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var n=a(87462),i=(a(67294),a(3905));const r={},l="Stacks and Queues",o={unversionedId:"interviewPrep/data_structures/10StacksAndQueues/readme",id:"interviewPrep/data_structures/10StacksAndQueues/readme",title:"Stacks and Queues",description:"- Stacks and queues could be used in order to process certain types of operations",source:"@site/docs/interviewPrep/data_structures/10StacksAndQueues/readme.md",sourceDirName:"interviewPrep/data_structures/10StacksAndQueues",slug:"/interviewPrep/data_structures/10StacksAndQueues/",permalink:"/docs/interviewPrep/data_structures/10StacksAndQueues/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/data_structures/10StacksAndQueues/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dictionary Example",permalink:"/docs/interviewPrep/data_structures/09HashTables/typescript/dictionary"},next:{title:"Deque Example",permalink:"/docs/interviewPrep/data_structures/10StacksAndQueues/typescript/deque"}},u={},s=[{value:"Stack",id:"stack",level:2},{value:"Standard operations and complexities",id:"standard-operations-and-complexities",level:3},{value:"Pushing an element onto the stack: O(1) time and space",id:"pushing-an-element-onto-the-stack-o1-time-and-space",level:4},{value:"Popping an element off the stack: O(1) time and space",id:"popping-an-element-off-the-stack-o1-time-and-space",level:4},{value:"Peeking at the element on the top of the stack: O(1) time and space",id:"peeking-at-the-element-on-the-top-of-the-stack-o1-time-and-space",level:4},{value:"Searching for an element in the stack: O(n) time, O(1) space",id:"searching-for-an-element-in-the-stack-on-time-o1-space",level:4},{value:"Max Stack",id:"max-stack",level:3},{value:"Min Stack",id:"min-stack",level:2},{value:"Queue",id:"queue",level:2},{value:"Standard operations and complexities",id:"standard-operations-and-complexities-1",level:3},{value:"Enqueuing an element into the queue: O(1) time and space",id:"enqueuing-an-element-into-the-queue-o1-time-and-space",level:4},{value:"Dequeuing an element out of the queue: O(1) time and space",id:"dequeuing-an-element-out-of-the-queue-o1-time-and-space",level:4},{value:"Peeking at the element at the front of the queue: O(1) time and space",id:"peeking-at-the-element-at-the-front-of-the-queue-o1-time-and-space",level:4},{value:"Searching for an element in the queue: O(n) time, O(1) space",id:"searching-for-an-element-in-the-queue-on-time-o1-space",level:4},{value:"Priority queue",id:"priority-queue",level:3},{value:"Double ended queue",id:"double-ended-queue",level:3}],p={toc:s};function c(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"stacks-and-queues"},"Stacks and Queues"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Stacks and queues could be used in order to process certain types of operations")),(0,i.kt)("h2",{id:"stack"},"Stack"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Stack",src:a(72553).Z,width:"628",height:"270"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"an array like data structure whose elements follow the Last In First Out (LIFO) rule"),(0,i.kt)("li",{parentName:"ul"},"a stack is often compared to a stack of books on a table",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the last book that's placed on the stack of books is the 1st 1 that's taken off the stack"))),(0,i.kt)("li",{parentName:"ul"},"a stack is typically implemented with a dynamic array or with a singly linked list"),(0,i.kt)("li",{parentName:"ul"},"example",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"we have a function that calls another function and it also calls a different function"),(0,i.kt)("li",{parentName:"ul"},"the result from the innermost functions are being returned up",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In a situation like this it's better to use a stack"))),(0,i.kt)("li",{parentName:"ul"},"We would take the uppermost function, start the execution until we reach a function call",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"At this moment we would take the state of execution of current function, put it into a stack and start execution of an inner function"),(0,i.kt)("li",{parentName:"ul"},"This operation is repeated with every inner function"),(0,i.kt)("li",{parentName:"ul"},"When the execution flow reaches a return statement, an item is removed from the stack and execution continues"))))),(0,i.kt)("li",{parentName:"ul"},"usage",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"a stack is useful for a reversal of elements",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If a string is inserted into a stack, when popped it will be reversed"))),(0,i.kt)("li",{parentName:"ul"},"Other usage of a stack would be for storage of previous operations from Command pattern",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In this case, if your commands have an undo operation, one could simply pop the last command and reverse its actions"))),(0,i.kt)("li",{parentName:"ul"},"usually implemented as a linked list or a dynamic array",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"if you need to find an element in a stack, it will take, in a worst-case O(n) time"),(0,i.kt)("li",{parentName:"ul"},"Sorting a stack is also not an easy task")))))),(0,i.kt)("h3",{id:"standard-operations-and-complexities"},"Standard operations and complexities"),(0,i.kt)("h4",{id:"pushing-an-element-onto-the-stack-o1-time-and-space"},"Pushing an element onto the stack: O(1) time and space"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"not using any additional space that grows with respect to the size of the input")),(0,i.kt)("h4",{id:"popping-an-element-off-the-stack-o1-time-and-space"},"Popping an element off the stack: O(1) time and space"),(0,i.kt)("h4",{id:"peeking-at-the-element-on-the-top-of-the-stack-o1-time-and-space"},"Peeking at the element on the top of the stack: O(1) time and space"),(0,i.kt)("h4",{id:"searching-for-an-element-in-the-stack-on-time-o1-space"},"Searching for an element in the stack: O(n) time, O(1) space"),(0,i.kt)("h3",{id:"max-stack"},"Max Stack"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"keeps track of the largest element in the stack")),(0,i.kt)("h2",{id:"min-stack"},"Min Stack"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"keeps track of the smallest element in the stack")),(0,i.kt)("h2",{id:"queue"},"Queue"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Queue",src:a(80924).Z,width:"483",height:"160"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"an array like data structure whose elements follow the First In First Out (FIFO) rule"),(0,i.kt)("li",{parentName:"ul"},"a queue is often compared to a group of people standing in line to purchase items at a store",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the 1st person to get in line is the 1st 1 to purchase items and to get out of the queue"))),(0,i.kt)("li",{parentName:"ul"},"a queue is typically implemented with a doubly linked list",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"because removing the 1st element in an array is not O(1) time"))),(0,i.kt)("li",{parentName:"ul"},"usage",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Queues are like stacks in terms of time needed for adding and removing an element"),(0,i.kt)("li",{parentName:"ul"},"Queues are implemented using double linked list")))),(0,i.kt)("h3",{id:"standard-operations-and-complexities-1"},"Standard operations and complexities"),(0,i.kt)("h4",{id:"enqueuing-an-element-into-the-queue-o1-time-and-space"},"Enqueuing an element into the queue: O(1) time and space"),(0,i.kt)("h4",{id:"dequeuing-an-element-out-of-the-queue-o1-time-and-space"},"Dequeuing an element out of the queue: O(1) time and space"),(0,i.kt)("h4",{id:"peeking-at-the-element-at-the-front-of-the-queue-o1-time-and-space"},"Peeking at the element at the front of the queue: O(1) time and space"),(0,i.kt)("h4",{id:"searching-for-an-element-in-the-queue-on-time-o1-space"},"Searching for an element in the queue: O(n) time, O(1) space"),(0,i.kt)("h3",{id:"priority-queue"},"Priority queue"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"keeps track of an element with high priority"),(0,i.kt)("li",{parentName:"ul"},"min heap is used for building a priority queue"),(0,i.kt)("li",{parentName:"ul"},"it is a data structure for maintaining a set S of elements, each with an associated value called a key"),(0,i.kt)("li",{parentName:"ul"},"A max-priority queue supports the following operations",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"INSERT(S, x)")," inserts the element x into the set S"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MAXIMUM(S)")," returns the element of S with the largest key"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"EXTRACT-MAX(S)")," removes and returns the element of S with the largest key"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"INCREASE-KEY(S, x, k)")," increases the value of element xs key to the new value k, which is assumed to be at least as large as xs current key value"))),(0,i.kt)("li",{parentName:"ul"},"This is a very good sort, but in most cases it is not the most optimal sort - reason why we are considering it is because on the basis of the heap",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"it is very good to build a queue with priority"),(0,i.kt)("li",{parentName:"ul"},"For example, where you can use this queue",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"schedule a job on the server or use an event-driven approach when modeling physical processes with great complexity"),(0,i.kt)("li",{parentName:"ul"},"For example, an event occurs with a minimum priority, it is executed, the time is recalculated, inserted into the queue, and the event we need appears at the top"),(0,i.kt)("li",{parentName:"ul"},"Also, there are queues with the highest priority or with the lowest",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"You can insert an element into it, take the maximum element, extract the maximum element, and change the priority of some element"),(0,i.kt)("li",{parentName:"ul"},"For example, processor time, there is a queue of tasks that it executes in one clock cycle, it performs a task, the priority changes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"we insert it into the queue and take it with the next priority")))))))))),(0,i.kt)("h3",{id:"double-ended-queue"},"Double ended queue"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"have both properties of a ",(0,i.kt)("inlineCode",{parentName:"li"},"queue")," and a ",(0,i.kt)("inlineCode",{parentName:"li"},"stack"))))}c.isMDXComponent=!0},72553:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/lifo-1fa3fd7275d2927fe7075e550a38e30e.png"},80924:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/queue-ecd95a0d84f2289af1415283cb60f634.jpg"}}]);