"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[39383],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),b=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=b(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=b(n),v=s,h=p["".concat(c,".").concat(v)]||p[v]||l[v]||o;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function v(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var b=2;b<o;b++)a[b]=n[b];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},39740:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>b});var r=n(83117),s=(n(67294),n(3905));const o={},a="C# Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Observer/cSharp/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Observer/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Observer/cSharp",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Observer/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Observer/go/"}},c={},b=[],u={toc:b};function l(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"c-example"},"C# Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'// Observer Design Pattern\n//\n// Intent: Lets you define a subscription mechanism to notify multiple objects\n// about any events that happen to the object they\'re observing.\n//\n// Note that there\'s a lot of different terms with similar meaning associated\n// with this pattern. Just remember that the Subject is also called the\n// Publisher and the Observer is often called the Subscriber and vice versa.\n// Also the verbs "observe", "listen" or "track" usually mean the same thing.\n\nusing System;\nusing System.Collections.Generic;\nusing System.Threading;\n\nnamespace RefactoringGuru.DesignPatterns.Observer.Conceptual\n{\n    public interface IObserver\n    {\n        // Receive update from subject\n        void Update(ISubject subject);\n    }\n\n    public interface ISubject\n    {\n        // Attach an observer to the subject.\n        void Attach(IObserver observer);\n\n        // Detach an observer from the subject.\n        void Detach(IObserver observer);\n\n        // Notify all observers about an event.\n        void Notify();\n    }\n\n    // The Subject owns some important state and notifies observers when the\n    // state changes.\n    public class Subject : ISubject\n    {\n        // For the sake of simplicity, the Subject\'s state, essential to all\n        // subscribers, is stored in this variable.\n        public int State { get; set; } = -0;\n\n        // List of subscribers. In real life, the list of subscribers can be\n        // stored more comprehensively (categorized by event type, etc.).\n        private List<IObserver> _observers = new List<IObserver>();\n\n        // The subscription management methods.\n        public void Attach(IObserver observer)\n        {\n            Console.WriteLine("Subject: Attached an observer.");\n            this._observers.Add(observer);\n        }\n\n        public void Detach(IObserver observer)\n        {\n            this._observers.Remove(observer);\n            Console.WriteLine("Subject: Detached an observer.");\n        }\n\n        // Trigger an update in each subscriber.\n        public void Notify()\n        {\n            Console.WriteLine("Subject: Notifying observers...");\n\n            foreach (var observer in _observers)\n            {\n                observer.Update(this);\n            }\n        }\n\n        // Usually, the subscription logic is only a fraction of what a Subject\n        // can really do. Subjects commonly hold some important business logic,\n        // that triggers a notification method whenever something important is\n        // about to happen (or after it).\n        public void SomeBusinessLogic()\n        {\n            Console.WriteLine("\\nSubject: I\'m doing something important.");\n            this.State = new Random().Next(0, 10);\n\n            Thread.Sleep(15);\n\n            Console.WriteLine("Subject: My state has just changed to: " + this.State);\n            this.Notify();\n        }\n    }\n\n    // Concrete Observers react to the updates issued by the Subject they had\n    // been attached to.\n    class ConcreteObserverA : IObserver\n    {\n        public void Update(ISubject subject)\n        {\n            if ((subject as Subject).State < 3)\n            {\n                Console.WriteLine("ConcreteObserverA: Reacted to the event.");\n            }\n        }\n    }\n\n    class ConcreteObserverB : IObserver\n    {\n        public void Update(ISubject subject)\n        {\n            if ((subject as Subject).State == 0 || (subject as Subject).State >= 2)\n            {\n                Console.WriteLine("ConcreteObserverB: Reacted to the event.");\n            }\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // The client code.\n            var subject = new Subject();\n            var observerA = new ConcreteObserverA();\n            subject.Attach(observerA);\n\n            var observerB = new ConcreteObserverB();\n            subject.Attach(observerB);\n\n            subject.SomeBusinessLogic();\n            subject.SomeBusinessLogic();\n\n            subject.Detach(observerB);\n\n            subject.SomeBusinessLogic();\n        }\n    }\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Subject: Attached an observer.\nSubject: Attached an observer.\n\nSubject: I'm doing something important.\nSubject: My state has just changed to: 2\nSubject: Notifying observers...\nConcreteObserverA: Reacted to the event.\nConcreteObserverB: Reacted to the event.\n\nSubject: I'm doing something important.\nSubject: My state has just changed to: 1\nSubject: Notifying observers...\nConcreteObserverA: Reacted to the event.\nSubject: Detached an observer.\n\nSubject: I'm doing something important.\nSubject: My state has just changed to: 5\nSubject: Notifying observers...\n")))}l.isMDXComponent=!0}}]);