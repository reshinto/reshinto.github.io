"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[91483],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>g});var t=r(67294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=t.createContext({}),d=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},p=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(r),g=i,m=c["".concat(l,".").concat(g)]||c[g]||u[g]||a;return r?t.createElement(m,s(s({ref:n},p),{},{components:r})):t.createElement(m,s({ref:n},p))}));function g(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=c;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var d=2;d<a;d++)s[d]=r[d];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}c.displayName="MDXCreateElement"},42199:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var t=r(83117),i=(r(67294),r(3905));const a={},s="Example 2",o={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/swift/example2",id:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/typescript/"}},l={},d=[],p={toc:d};function u(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'import Foundation\nimport UIKit\nimport XCTest\n\n\nprotocol Handler {\n\n    var next: Handler? { get }\n\n    func handle(_ request: Request) -> LocalizedError?\n}\n\nclass BaseHandler: Handler {\n\n    var next: Handler?\n\n    init(with handler: Handler? = nil) {\n        self.next = handler\n    }\n\n    func handle(_ request: Request) -> LocalizedError? {\n        return next?.handle(request)\n    }\n}\n\nclass LoginHandler: BaseHandler {\n\n    override func handle(_ request: Request) -> LocalizedError? {\n\n        guard request.email?.isEmpty == false else {\n            return AuthError.emptyEmail\n        }\n\n        guard request.password?.isEmpty == false else {\n            return AuthError.emptyPassword\n        }\n\n        return next?.handle(request)\n    }\n}\n\nclass SignUpHandler: BaseHandler {\n\n    private struct Limit {\n        static let passwordLength = 8\n    }\n\n    override func handle(_ request: Request) -> LocalizedError? {\n\n        guard request.email?.contains("@") == true else {\n            return AuthError.invalidEmail\n        }\n\n        guard (request.password?.count ?? 0) >= Limit.passwordLength else {\n            return AuthError.invalidPassword\n        }\n\n        guard request.password == request.repeatedPassword else {\n            return AuthError.differentPasswords\n        }\n\n        return next?.handle(request)\n    }\n}\n\nclass LocationHandler: BaseHandler {\n\n    override func handle(_ request: Request) -> LocalizedError? {\n        guard isLocationEnabled() else {\n            return AuthError.locationDisabled\n        }\n        return next?.handle(request)\n    }\n\n    func isLocationEnabled() -> Bool {\n        return true /// Calls special method\n    }\n}\n\nclass NotificationHandler: BaseHandler {\n\n    override func handle(_ request: Request) -> LocalizedError? {\n        guard isNotificationsEnabled() else {\n            return AuthError.notificationsDisabled\n        }\n        return next?.handle(request)\n    }\n\n    func isNotificationsEnabled() -> Bool {\n        return false /// Calls special method\n    }\n}\n\nenum AuthError: LocalizedError {\n\n    case emptyFirstName\n    case emptyLastName\n\n    case emptyEmail\n    case emptyPassword\n\n    case invalidEmail\n    case invalidPassword\n    case differentPasswords\n\n    case locationDisabled\n    case notificationsDisabled\n\n    var errorDescription: String? {\n        switch self {\n        case .emptyFirstName:\n            return "First name is empty"\n        case .emptyLastName:\n            return "Last name is empty"\n        case .emptyEmail:\n            return "Email is empty"\n        case .emptyPassword:\n            return "Password is empty"\n        case .invalidEmail:\n            return "Email is invalid"\n        case .invalidPassword:\n            return "Password is invalid"\n        case .differentPasswords:\n            return "Password and repeated password should be equal"\n        case .locationDisabled:\n            return "Please turn location services on"\n        case .notificationsDisabled:\n            return "Please turn notifications on"\n        }\n    }\n}\n\n\nprotocol Request {\n\n    var firstName: String? { get }\n    var lastName: String? { get }\n\n    var email: String? { get }\n    var password: String? { get }\n    var repeatedPassword: String? { get }\n}\n\nextension Request {\n\n    /// Default implementations\n\n    var firstName: String? { return nil }\n    var lastName: String? { return nil }\n\n    var email: String? { return nil }\n    var password: String? { return nil }\n    var repeatedPassword: String? { return nil }\n}\n\nstruct SignUpRequest: Request {\n\n    var firstName: String?\n    var lastName: String?\n\n    var email: String?\n    var password: String?\n    var repeatedPassword: String?\n}\n\nstruct LoginRequest: Request {\n\n    var email: String?\n    var password: String?\n}\n\n\n\nprotocol AuthHandlerSupportable: AnyObject {\n\n    var handler: Handler? { get set }\n}\n\nclass BaseAuthViewController: UIViewController, AuthHandlerSupportable {\n\n    /// Base class or extensions can be used to implement a base behavior\n    var handler: Handler?\n\n    init(handler: Handler) {\n        self.handler = handler\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n    }\n}\n\nclass LoginViewController: BaseAuthViewController {\n\n    func loginButtonSelected() {\n        print("Login View Controller: User selected Login button")\n\n        let request = LoginRequest(email: "smth@gmail.com", password: "123HardPass")\n\n        if let error = handler?.handle(request) {\n            print("Login View Controller: something went wrong")\n            print("Login View Controller: Error -> " + (error.errorDescription ?? ""))\n        } else {\n            print("Login View Controller: Preconditions are successfully validated")\n        }\n    }\n}\n\nclass SignUpViewController: BaseAuthViewController {\n\n    func signUpButtonSelected() {\n        print("SignUp View Controller: User selected SignUp button")\n\n        let request = SignUpRequest(firstName: "Vasya",\n                                    lastName: "Pupkin",\n                                    email: "vasya.pupkin@gmail.com",\n                                    password: "123HardPass",\n                                    repeatedPassword: "123HardPass")\n\n        if let error = handler?.handle(request) {\n            print("SignUp View Controller: something went wrong")\n            print("SignUp View Controller: Error -> " + (error.errorDescription ?? ""))\n        } else {\n            print("SignUp View Controller: Preconditions are successfully validated")\n        }\n    }\n}\n\n\n\nclass ChainOfResponsibilityRealWorld: XCTestCase {\n\n    func testChainOfResponsibilityRealWorld() {\n\n        print("Client: Let\'s test Login flow!")\n\n        let loginHandler = LoginHandler(with: LocationHandler())\n        let loginController = LoginViewController(handler: loginHandler)\n\n        loginController.loginButtonSelected()\n\n        print("\\nClient: Let\'s test SignUp flow!")\n\n        let signUpHandler = SignUpHandler(with: LocationHandler(with: NotificationHandler()))\n        let signUpController = SignUpViewController(handler: signUpHandler)\n\n        signUpController.signUpButtonSelected()\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Client: Let's test Login flow!\nLogin View Controller: User selected Login button\nLogin View Controller: Preconditions are successfully validated\n\nClient: Let's test SignUp flow!\nSignUp View Controller: User selected SignUp button\nSignUp View Controller: something went wrong\nSignUp View Controller: Error -> Please turn notifications on\n")))}u.isMDXComponent=!0}}]);