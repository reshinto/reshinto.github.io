"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[3955],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>d});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=s(t),d=o,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return t?r.createElement(f,c(c({ref:n},l),{},{components:t})):r.createElement(f,c({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},73636:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const a={},c="C# Example",i={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Decorator/cSharp/readme",id:"interviewPrep/designPatterns/Structural_patterns/Decorator/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Decorator/cSharp",slug:"/interviewPrep/designPatterns/Structural_patterns/Decorator/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/go/"}},p={},s=[],l={toc:s};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"c-example"},"C# Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'// Decorator Design Pattern\n//\n// Intent: Lets you attach new behaviors to objects by placing these objects\n// inside special wrapper objects that contain the behaviors.\n\nusing System;\n\nnamespace RefactoringGuru.DesignPatterns.Composite.Conceptual\n{\n    // The base Component interface defines operations that can be altered by\n    // decorators.\n    public abstract class Component\n    {\n        public abstract string Operation();\n    }\n\n    // Concrete Components provide default implementations of the operations.\n    // There might be several variations of these classes.\n    class ConcreteComponent : Component\n    {\n        public override string Operation()\n        {\n            return "ConcreteComponent";\n        }\n    }\n\n    // The base Decorator class follows the same interface as the other\n    // components. The primary purpose of this class is to define the wrapping\n    // interface for all concrete decorators. The default implementation of the\n    // wrapping code might include a field for storing a wrapped component and\n    // the means to initialize it.\n    abstract class Decorator : Component\n    {\n        protected Component _component;\n\n        public Decorator(Component component)\n        {\n            this._component = component;\n        }\n\n        public void SetComponent(Component component)\n        {\n            this._component = component;\n        }\n\n        // The Decorator delegates all work to the wrapped component.\n        public override string Operation()\n        {\n            if (this._component != null)\n            {\n                return this._component.Operation();\n            }\n            else\n            {\n                return string.Empty;\n            }\n        }\n    }\n\n    // Concrete Decorators call the wrapped object and alter its result in some\n    // way.\n    class ConcreteDecoratorA : Decorator\n    {\n        public ConcreteDecoratorA(Component comp) : base(comp)\n        {\n        }\n\n        // Decorators may call parent implementation of the operation, instead\n        // of calling the wrapped object directly. This approach simplifies\n        // extension of decorator classes.\n        public override string Operation()\n        {\n            return $"ConcreteDecoratorA({base.Operation()})";\n        }\n    }\n\n    // Decorators can execute their behavior either before or after the call to\n    // a wrapped object.\n    class ConcreteDecoratorB : Decorator\n    {\n        public ConcreteDecoratorB(Component comp) : base(comp)\n        {\n        }\n\n        public override string Operation()\n        {\n            return $"ConcreteDecoratorB({base.Operation()})";\n        }\n    }\n\n    public class Client\n    {\n        // The client code works with all objects using the Component interface.\n        // This way it can stay independent of the concrete classes of\n        // components it works with.\n        public void ClientCode(Component component)\n        {\n            Console.WriteLine("RESULT: " + component.Operation());\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Client client = new Client();\n\n            var simple = new ConcreteComponent();\n            Console.WriteLine("Client: I get a simple component:");\n            client.ClientCode(simple);\n            Console.WriteLine();\n\n            // ...as well as decorated ones.\n            //\n            // Note how decorators can wrap not only simple components but the\n            // other decorators as well.\n            ConcreteDecoratorA decorator1 = new ConcreteDecoratorA(simple);\n            ConcreteDecoratorB decorator2 = new ConcreteDecoratorB(decorator1);\n            Console.WriteLine("Client: Now I\'ve got a decorated component:");\n            client.ClientCode(decorator2);\n        }\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Client: I get a simple component:\nRESULT: ConcreteComponent\n\nClient: Now I've got a decorated component:\nRESULT: ConcreteDecoratorB(ConcreteDecoratorA(ConcreteComponent))\n")))}m.isMDXComponent=!0}}]);