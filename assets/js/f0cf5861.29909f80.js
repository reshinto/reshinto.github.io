"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[66410],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=d(t),c=a,f=h["".concat(s,".").concat(c)]||h[c]||p[c]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},35078:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=t(83117),a=(t(67294),t(3905));const i={},o="Python Example",l={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/python/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/python",slug:"/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/python/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/javascript/"},next:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/swift/"}},s={},d=[],u={toc:d};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python-example"},"Python Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'"""\nChain of Responsibility Design Pattern\n\nIntent: Lets you pass requests along a chain of handlers. Upon receiving a\nrequest, each handler decides either to process the request or to pass it to the\nnext handler in the chain.\n"""\n\nfrom __future__ import annotations\nfrom abc import ABC, abstractmethod\nfrom typing import Any, Optional\n\n\nclass Handler(ABC):\n    """\n    The Handler interface declares a method for building the chain of handlers.\n    It also declares a method for executing a request.\n    """\n\n    @abstractmethod\n    def set_next(self, handler: Handler) -> Handler:\n        pass\n\n    @abstractmethod\n    def handle(self, request) -> Optional[str]:\n        pass\n\n\nclass AbstractHandler(Handler):\n    """\n    The default chaining behavior can be implemented inside a base handler\n    class.\n    """\n\n    _next_handler: Handler = None\n\n    def set_next(self, handler: Handler) -> Handler:\n        self._next_handler = handler\n        # Returning a handler from here will let us link handlers in a\n        # convenient way like this:\n        # monkey.set_next(squirrel).set_next(dog)\n        return handler\n\n    @abstractmethod\n    def handle(self, request: Any) -> str:\n        if self._next_handler:\n            return self._next_handler.handle(request)\n\n        return None\n\n\n"""\nAll Concrete Handlers either handle a request or pass it to the next handler in\nthe chain.\n"""\n\n\nclass MonkeyHandler(AbstractHandler):\n    def handle(self, request: Any) -> str:\n        if request == "Banana":\n            return f"Monkey: I\'ll eat the {request}"\n        else:\n            return super().handle(request)\n\n\nclass SquirrelHandler(AbstractHandler):\n    def handle(self, request: Any) -> str:\n        if request == "Nut":\n            return f"Squirrel: I\'ll eat the {request}"\n        else:\n            return super().handle(request)\n\n\nclass DogHandler(AbstractHandler):\n    def handle(self, request: Any) -> str:\n        if request == "MeatBall":\n            return f"Dog: I\'ll eat the {request}"\n        else:\n            return super().handle(request)\n\n\ndef client_code(handler: Handler) -> None:\n    """\n    The client code is usually suited to work with a single handler. In most\n    cases, it is not even aware that the handler is part of a chain.\n    """\n\n    for food in ["Nut", "Banana", "Cup of coffee"]:\n        print(f"\\nClient: Who wants a {food}?")\n        result = handler.handle(food)\n        if result:\n            print(f"  {result}", end="")\n        else:\n            print(f"  {food} was left untouched.", end="")\n\n\nif __name__ == "__main__":\n    monkey = MonkeyHandler()\n    squirrel = SquirrelHandler()\n    dog = DogHandler()\n\n    monkey.set_next(squirrel).set_next(dog)\n\n    # The client should be able to send a request to any handler, not just the\n    # first one in the chain.\n    print("Chain: Monkey > Squirrel > Dog")\n    client_code(monkey)\n    print("\\n")\n\n    print("Subchain: Squirrel > Dog")\n    client_code(squirrel)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Chain: Monkey > Squirrel > Dog\n\nClient: Who wants a Nut?\n  Squirrel: I'll eat the Nut\nClient: Who wants a Banana?\n  Monkey: I'll eat the Banana\nClient: Who wants a Cup of coffee?\n  Cup of coffee was left untouched.\n\nSubchain: Squirrel > Dog\n\nClient: Who wants a Nut?\n  Squirrel: I'll eat the Nut\nClient: Who wants a Banana?\n  Banana was left untouched.\nClient: Who wants a Cup of coffee?\n  Cup of coffee was left untouched.\n")))}p.isMDXComponent=!0}}]);