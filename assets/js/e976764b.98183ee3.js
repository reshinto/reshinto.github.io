"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[61207],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>u});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=r,k=d["".concat(i,".").concat(u)]||d[u]||c[u]||o;return t?a.createElement(k,l(l({ref:n},m),{},{components:t})):a.createElement(k,l({ref:n},m))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},13077:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(83117),r=(t(67294),t(3905));const o={},l="Directives",s={unversionedId:"Technologies/frontend/angular/directives",id:"Technologies/frontend/angular/directives",title:"Directives",description:"- it is used to change the behavior and appearance of DOM element",source:"@site/docs/Technologies/frontend/angular/directives.md",sourceDirName:"Technologies/frontend/angular",slug:"/Technologies/frontend/angular/directives",permalink:"/docs/Technologies/frontend/angular/directives",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/Technologies/frontend/angular/directives.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Angular CLI",permalink:"/docs/Technologies/frontend/angular/cli"},next:{title:"Events",permalink:"/docs/Technologies/frontend/angular/events"}},i={},p=[{value:"Structural Directives",id:"structural-directives",level:2},{value:"<code>*ngFor</code>",id:"ngfor",level:3},{value:"parent",id:"parent",level:4},{value:"child",id:"child",level:4},{value:"<code>*ngIf</code>",id:"ngif",level:3},{value:"add-task.component.html",id:"add-taskcomponenthtml",level:4},{value:"add-task.component.ts",id:"add-taskcomponentts",level:4},{value:"<code>*ngSwitch</code>",id:"ngswitch",level:3},{value:"Attribute Directives",id:"attribute-directives",level:2},{value:"<code>ngStyle</code>",id:"ngstyle",level:3},{value:"<code>ngClass</code>",id:"ngclass",level:3},{value:"task-item.component.html",id:"task-itemcomponenthtml",level:4},{value:"task-item.component.ts",id:"task-itemcomponentts",level:4},{value:"task-item.component.css",id:"task-itemcomponentcss",level:4},{value:"<code>ngModel</code>",id:"ngmodel",level:3},{value:"app.module.ts",id:"appmodulets",level:4},{value:"add-task.component.ts",id:"add-taskcomponentts-1",level:4},{value:"add-task.component.html",id:"add-taskcomponenthtml-1",level:4},{value:"<code>ngSubmit</code>",id:"ngsubmit",level:3},{value:"parent",id:"parent-1",level:4},{value:"child",id:"child-1",level:4},{value:"Custom Directives",id:"custom-directives",level:2},{value:"generated and modified code",id:"generated-and-modified-code",level:3},{value:"sample usage code",id:"sample-usage-code",level:3},{value:"sample usage code 2, lifecycle method required if using input",id:"sample-usage-code-2-lifecycle-method-required-if-using-input",level:3}],m={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"directives"},"Directives"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it is used to change the behavior and appearance of DOM element"),(0,r.kt)("li",{parentName:"ul"},"it can implement all lifecycle hooks"),(0,r.kt)("li",{parentName:"ul"},"it cannot have template")),(0,r.kt)("h2",{id:"structural-directives"},"Structural Directives"),(0,r.kt)("h3",{id:"ngfor"},(0,r.kt)("inlineCode",{parentName:"h3"},"*ngFor")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"allows looping of array")),(0,r.kt)("h4",{id:"parent"},"parent"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"tasks.component.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {Component, OnInit} from "@angular/core";\nimport {Task} from "src/app/Task";\nimport {TASKS} from "src/app/mock-tasks";\n\n@Component({\n  selector: "app-tasks",\n  templateUrl: "./tasks.component.html",\n  styleUrls: ["./tasks.component.css"],\n})\nexport class TasksComponent implements OnInit {\n  tasks: Task[] = TASKS;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"tasks.component.html")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<app-task-item *ngFor="let task of tasks" [task]="task"> </app-task-item>\n')),(0,r.kt)("h4",{id:"child"},"child"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"task-item.component.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {Component, OnInit, Input} from "@angular/core";\nimport {Task} from "src/app/Task";\n\n@Component({\n  selector: "app-task-item",\n  templateUrl: "./task-item.component.html",\n  styleUrls: ["./task-item.component.css"],\n})\nexport class TaskItemComponent implements OnInit {\n  @Input()\n  task!: Task;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"task-item.component.html")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div class="task">\n  <h3>{{ task.text }}</h3>\n  <p>{{ task.day }}</p>\n</div>\n')),(0,r.kt)("h3",{id:"ngif"},(0,r.kt)("inlineCode",{parentName:"h3"},"*ngIf")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A structural directive that conditionally includes a template based on the value of an expression coerced to Boolean",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When the expression evaluates to true, Angular renders the template provided in a then clause, and when false or null, Angular renders the template provided in an optional else clause"),(0,r.kt)("li",{parentName:"ul"},"The default template for the else clause is blank")))),(0,r.kt)("h4",{id:"add-taskcomponenthtml"},"add-task.component.html"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"do not show form when ",(0,r.kt)("inlineCode",{parentName:"li"},"showAddTask")," is false")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<form *ngIf="showAddTask" class="add-form">\n  <div class="form-control">\n    <label for="text">Task</label>\n    <input\n      type="text"\n      name="text"\n      [(ngModel)]="text"\n      id="text"\n      placeholder="Add Task"\n    />\n  </div>\n</form>\n')),(0,r.kt)("h4",{id:"add-taskcomponentts"},"add-task.component.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {Component, OnInit, Output, EventEmitter} from "@angular/core";\nimport {Subscription} from "rxjs";\nimport {UiService} from "src/app/services/ui.service";\nimport {Task} from "src/app/Task";\n\n@Component({\n  selector: "app-add-task",\n  templateUrl: "./add-task.component.html",\n  styleUrls: ["./add-task.component.css"],\n})\nexport class AddTaskComponent implements OnInit {\n  @Output()\n  onAddTask: EventEmitter<Task> = new EventEmitter();\n  text!: string;\n  showAddTask: boolean = false;\n  subscription!: Subscription;\n\n  constructor(private uiService: UiService) {\n    this.subscription = this.uiService\n      .onToggle()\n      .subscribe((value: boolean) => (this.showAddTask = value));\n  }\n\n  ngOnInit(): void {}\n}\n')),(0,r.kt)("h3",{id:"ngswitch"},(0,r.kt)("inlineCode",{parentName:"h3"},"*ngSwitch")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"app.component.html"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<input type="text" [(ngModel)]="num" />\n<div [ngSwitch]="num">\n  <div *ngSwitchCase="\'1\'">One</div>\n  <div *ngSwitchCase="\'2\'">Two</div>\n  <div *ngSwitchCase="\'3\'">Three</div>\n  <div *ngSwitchCase="\'4\'">Four</div>\n  <div *ngSwitchCase="\'5\'">Five</div>\n  <div *ngSwitchDefault>This is Default</div>\n</div>\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"app.component.ts"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {Component} from "@angular/core";\n\n@Component({\n  selector: "app-root",\n  templateUrl: "./app.component.html",\n  styleUrls: ["./app.component.css"],\n})\nexport class AppComponent {\n  num: number = 0;\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"app.module.ts"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {NgModule} from "@angular/core";\nimport {BrowserModule} from "@angular/platform-browser";\nimport {FormsModule} from "@angular/forms";\n\nimport {AppComponent} from "./app.component";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, FormsModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n')))),(0,r.kt)("h2",{id:"attribute-directives"},"Attribute Directives"),(0,r.kt)("h3",{id:"ngstyle"},(0,r.kt)("inlineCode",{parentName:"h3"},"ngStyle")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"allow inline styling")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<button [ngStyle]=\"{ 'background-color': 'white' }\" class=\"btn\">text</button>\n")),(0,r.kt)("h3",{id:"ngclass"},(0,r.kt)("inlineCode",{parentName:"h3"},"ngClass")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Adds and removes CSS classes on an HTML element")),(0,r.kt)("h4",{id:"task-itemcomponenthtml"},"task-item.component.html"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- when task.reminder is true, reminder-class css class style will be activated--\x3e\n<div [ngClass]="{ reminder-class: task.reminder }" class="task">\n  <h3>{{ task.text }}</h3>\n  <p>{{ task.day }}</p>\n</div>\n')),(0,r.kt)("h4",{id:"task-itemcomponentts"},"task-item.component.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {Component, OnInit, Input} from "@angular/core";\nimport {Task} from "src/app/Task";\nimport {faTimes} from "@fortawesome/free-solid-svg-icons";\n\n@Component({\n  selector: "app-task-item",\n  templateUrl: "./task-item.component.html",\n  styleUrls: ["./task-item.component.css"],\n})\nexport class TaskItemComponent implements OnInit {\n  @Input()\n  task!: Task;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n')),(0,r.kt)("h4",{id:"task-itemcomponentcss"},"task-item.component.css"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},".task {\n  background: #f4f4f4;\n  margin: 5px;\n  padding: 10px 20px;\n  cursor: pointer;\n}\n\n.task.reminder-class {\n  border-left: 5px solid green;\n}\n\n.task h3 {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n")),(0,r.kt)("h3",{id:"ngmodel"},(0,r.kt)("inlineCode",{parentName:"h3"},"ngModel")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Creates a FormControl instance from a domain model and binds it to a form control element")),(0,r.kt)("h4",{id:"appmodulets"},"app.module.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {NgModule} from "@angular/core";\nimport {BrowserModule} from "@angular/platform-browser";\nimport {FormsModule} from "@angular/forms";\n\nimport {AppComponent} from "./app.component";\nimport {AddTaskComponent} from "./components/add-task/add-task.component";\n\n@NgModule({\n  declarations: [AppComponent, AddTaskComponent],\n  imports: [BrowserModule, FormsModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n')),(0,r.kt)("h4",{id:"add-taskcomponentts-1"},"add-task.component.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {Component, OnInit} from "@angular/core";\n\n@Component({\n  selector: "app-add-task",\n  templateUrl: "./add-task.component.html",\n  styleUrls: ["./add-task.component.css"],\n})\nexport class AddTaskComponent implements OnInit {\n  text!: string;\n  day!: string;\n  reminder: boolean = false;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n')),(0,r.kt)("h4",{id:"add-taskcomponenthtml-1"},"add-task.component.html"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<form class="add-form">\n  <div class="form-control">\n    <label for="text">Task</label>\n    <input\n      type="text"\n      name="text"\n      [(ngModel)]="text"\n      id="text"\n      placeholder="Add Task"\n    />\n  </div>\n  <div class="form-control">\n    <label for="day">Day & Time</label>\n    <input\n      type="text"\n      name="day"\n      [(ngModel)]="day"\n      id="day"\n      placeholder="Add Day & Time"\n    />\n  </div>\n  <div class="form-control form-control-check">\n    <label for="reminder">Set Reminder</label>\n    <input\n      type="checkbox"\n      name="reminder"\n      [(ngModel)]="reminder"\n      id="reminder"\n    />\n  </div>\n  <input type="submit" value="Save Task" class="btn btn-block" />\n</form>\n')),(0,r.kt)("h3",{id:"ngsubmit"},(0,r.kt)("inlineCode",{parentName:"h3"},"ngSubmit")),(0,r.kt)("h4",{id:"parent-1"},"parent"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"tasks.component.html")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<app-add-task (onAddTask)="addTask($event)"></app-add-task>\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"tasks.component.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {Component, OnInit} from "@angular/core";\nimport {TaskService} from "src/app/services/task.service";\nimport {Task} from "src/app/Task";\n\n@Component({\n  selector: "app-tasks",\n  templateUrl: "./tasks.component.html",\n  styleUrls: ["./tasks.component.css"],\n})\nexport class TasksComponent implements OnInit {\n  tasks: Task[] = [];\n\n  constructor(private taskService: TaskService) {}\n\n  ngOnInit(): void {}\n\n  addTask(task: Task) {\n    // adds task to backend server\n    this.taskService\n      .addTask(task)\n      .subscribe((task: Task) => this.tasks.push(task));\n  }\n}\n')),(0,r.kt)("h4",{id:"child-1"},"child"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"add-task.component.html")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<form class="add-form" (ngSubmit)="onSubmit()">\n  <div class="form-control">\n    <label for="text">Task</label>\n    <input\n      type="text"\n      name="text"\n      [(ngModel)]="text"\n      id="text"\n      placeholder="Add Task"\n    />\n  </div>\n  <input type="submit" value="Save Task" class="btn btn-block" />\n</form>\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"add-task.component.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {Component, OnInit, Output, EventEmitter} from "@angular/core";\nimport {Task} from "src/app/Task";\n\n@Component({\n  selector: "app-add-task",\n  templateUrl: "./add-task.component.html",\n  styleUrls: ["./add-task.component.css"],\n})\nexport class AddTaskComponent implements OnInit {\n  @Output()\n  onAddTask: EventEmitter<Task> = new EventEmitter();\n  text!: string;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onSubmit() {\n    if (!this.text) {\n      alert("Please add a task!");\n      return;\n    }\n\n    const newTask = {\n      text: this.text,\n    };\n\n    this.onAddTask.emit(newTask);\n\n    // reset input value\n    this.text = "";\n  }\n}\n')),(0,r.kt)("h2",{id:"custom-directives"},"Custom Directives"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cli",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"ng generate directive directives/somename")))),(0,r.kt)("h3",{id:"generated-and-modified-code"},"generated and modified code"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"src/app/directives/somename.directive.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {Directive} from "@angular/core";\n\n@Directive({\n  selector: "[appSomename]",\n})\nexport class SomenameDirective {\n  constructor() {}\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"src/app/directives/somename.directive.spec.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {SomenameDirective} from "./somename.directive";\n\ndescribe("SomenameDirective", () => {\n  it("should create an instance", () => {\n    const directive = new SomenameDirective();\n    expect(directive).toBeTruthy();\n  });\n});\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"src/app/app.module.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {NgModule} from "@angular/core";\nimport {BrowserModule} from "@angular/platform-browser";\n\nimport {AppComponent} from "./app.component";\nimport {SomenameDirective} from "./directives/somename.directive";\n\n@NgModule({\n  declarations: [AppComponent, SomenameDirective],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n')),(0,r.kt)("h3",{id:"sample-usage-code"},"sample usage code"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"lifecycle hooks works as well")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"src/app/directives/somename.directive.ts"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"method 1: ElementRef"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {Directive, ElementRef} from "@angular/core";\n\n@Directive({\n  selector: "[appSomename]",\n})\nexport class SomenameDirective {\n  constructor(el: ElementRef) {\n    const element = el.nativeElement;\n    element.style.color = "red";\n  }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"method 2: Document"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {DOCUMENT} from "@angular/common";\nimport {Directive, Inject} from "@angular/core";\n\n@Directive({\n  selector: "[appSomename]",\n})\nexport class SomenameDirective {\n  constructor(@Inject(DOCUMENT) private document: Document) {\n    const element = this.document.querySelector("p") as HTMLElement;\n    element.style.color = "red";\n  }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"method 3: ElementRef & Renderer2"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  Directive,\n  ElementRef,\n  HostListener, // used for event listeners\n  Renderer2,\n} from "@angular/core";\n\n@Directive({\n  selector: "[appSomename]",\n})\nexport class SomenameDirective {\n  constructor(el: ElementRef, private renderer: Renderer2) {\n    this.renderer.setStyle(this.el.nativeElement, "color", "red");\n  }\n\n  // used for event listener\n  // method name can be anything\n  @HostListener("mouseenter") onMouseEnter() {\n    this.renderer.setStyle(\n      this.el.nativeElement,\n      "backgroundColor",\n      "Black"\n    );\n  }\n}\n'))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"app.component.html"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<p appSomename>custom directive</p>\n")))),(0,r.kt)("h3",{id:"sample-usage-code-2-lifecycle-method-required-if-using-input"},"sample usage code 2, lifecycle method required if using input"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"src/app/directives/somename.directive.ts"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {Directive, OnInit, Input, ElementRef} from "@angular/core";\n\n@Directive({\n  selector: "[appSomename]",\n})\nexport class SomenameDirective implements OnInit {\n  @Input()\n  appSomename: string = "black";\n\n  constructor(el: ElementRef) {\n    // this will not work, only hard coding will work\n    const element = el.nativeElement;\n    element.style.color = this.appSomename;\n  }\n\n  ngOnInit(): void {\n    const element = el.nativeElement;\n    element.style.color = this.appSomename;\n  }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"app.component.html"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<p appTesting="red">custom directive</p>\n')))))}c.isMDXComponent=!0}}]);