"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[55539],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(a),c=l,k=d["".concat(p,".").concat(c)]||d[c]||u[c]||r;return a?n.createElement(k,i(i({ref:t},m),{},{components:a})):n.createElement(k,i({ref:t},m))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},49063:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var n=a(83117),l=(a(67294),a(3905));const r={},i="Python",o={unversionedId:"languageSpecific/python/readme",id:"languageSpecific/python/readme",title:"Python",description:"Table of Contents",source:"@site/docs/languageSpecific/python/readme.md",sourceDirName:"languageSpecific/python",slug:"/languageSpecific/python/",permalink:"/docs/languageSpecific/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/languageSpecific/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TypeScript",permalink:"/docs/languageSpecific/javascript/typescript"},next:{title:"Handling PIP",permalink:"/docs/languageSpecific/python/pip"}},p={},s=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Hello World",id:"hello-world",level:2},{value:"python 2",id:"python-2",level:4},{value:"python 3",id:"python-3",level:4},{value:"Comments",id:"comments",level:2},{value:"Program Entry Point",id:"program-entry-point",level:2},{value:"Collections",id:"collections",level:2},{value:"List",id:"list",level:3},{value:"Dictionary",id:"dictionary",level:3},{value:"Set",id:"set",level:3},{value:"Tuple",id:"tuple",level:3},{value:"Range",id:"range",level:3},{value:"Enumerate",id:"enumerate",level:3},{value:"Iterator",id:"iterator",level:3},{value:"Generator",id:"generator",level:3},{value:"Types",id:"types",level:2},{value:"Type",id:"type",level:3},{value:"String",id:"string",level:3},{value:"Regular Expression",id:"regular-expression",level:3},{value:"Format",id:"format",level:3},{value:"Numbers",id:"numbers",level:3},{value:"Combinatorics",id:"combinatorics",level:3},{value:"Datetime",id:"datetime",level:3},{value:"python 2",id:"python-2-1",level:4},{value:"python 3",id:"python-3-1",level:4},{value:"Syntax",id:"syntax",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Splat Operator",id:"splat-operator",level:3},{value:"Inline",id:"inline",level:3},{value:"Closure",id:"closure",level:3},{value:"Decorator",id:"decorator",level:3},{value:"Class",id:"class",level:3},{value:"Exception",id:"exception",level:3},{value:"Print",id:"print",level:3},{value:"Input",id:"input",level:3},{value:"Command Line Arguments",id:"command-line-arguments",level:3},{value:"Open",id:"open",level:3},{value:"Path",id:"path",level:3},{value:"OS Commands",id:"os-commands",level:3},{value:"Pickle",id:"pickle",level:3},{value:"CSV",id:"csv",level:3},{value:"SQLite",id:"sqlite",level:3},{value:"Bytes",id:"bytes",level:3},{value:"Struct",id:"struct",level:3},{value:"Array",id:"array",level:3},{value:"Memory View",id:"memory-view",level:3},{value:"Deque",id:"deque",level:3},{value:"Advanced",id:"advanced",level:2},{value:"Threading",id:"threading",level:3},{value:"Operator",id:"operator",level:3},{value:"Introspection",id:"introspection",level:3},{value:"Eval",id:"eval",level:3},{value:"Coroutine",id:"coroutine",level:3},{value:"Libraries",id:"libraries",level:2},{value:"Progress Bar",id:"progress-bar",level:3},{value:"Plot",id:"plot",level:3},{value:"Table",id:"table",level:3},{value:"Curses",id:"curses",level:3},{value:"Logging",id:"logging",level:3},{value:"Scraping",id:"scraping",level:3},{value:"Web",id:"web",level:3},{value:"Profile",id:"profile",level:3},{value:"Image",id:"image",level:3},{value:"Audio",id:"audio",level:3},{value:"Games",id:"games",level:3},{value:"Plotly",id:"plotly",level:3},{value:"Cython",id:"cython",level:3}],m={toc:s};function u(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"python"},"Python"),(0,l.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#hello-world"},"Hello World")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#comments"},"Comments")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#program-entry-point"},"Program Entry Point")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#collections"},"Collections"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#list"},"List")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#dictionary"},"Dictionary")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#set"},"Set")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#tuple"},"Tuple")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#range"},"Range")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#enumerate"},"Enumerate")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#iterator"},"Iterator")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#generator"},"Generator")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#types"},"Types"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#type"},"Type")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#string"},"String")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#regular-expression"},"Regular Expression")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#format"},"Format")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#numbers"},"Numbers")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#combinatorics"},"Combinatorics")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#datetime"},"Datetime")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#syntax"},"Syntax"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#arguments"},"Arguments")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#splat-operator"},"Splat Operator")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#inline"},"Inline")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#closure"},"Closure")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#decorator"},"Decorator")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#class"},"Class")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#duck-type"},"Duck Type")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#enum"},"Enum")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#exception"},"Exception")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#system"},"System"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#exit"},"Exit")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#print"},"Print")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#input"},"Input")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#command-line-arguments"},"Command Line Arguments")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#open"},"Open")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#path"},"Path")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#os-commands"},"OS Commands")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#data"},"Data"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#json"},"JSON")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#pickle"},"Pickle")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#csv"},"CSV")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#sqlite"},"SQLite")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#mysql"},"MySQL")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#bytes"},"Bytes")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#struct"},"Struct")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#array"},"Array")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#memory-view"},"Memory View")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#deque"},"Deque")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#advanced"},"Advanced"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#threading"},"Threading")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#operator"},"Operator")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#introspection"},"Introspection")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#metaprogramming"},"Metaprogramming")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#eval"},"Eval")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#coroutine"},"Coroutine")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#libraries"},"Libraries"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#progress-bar"},"Progress Bar")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#plot"},"Plot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#table"},"Table")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#curses"},"Curses")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#logging"},"Logging")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#scraping"},"Scraping")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#web"},"Web")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#profile"},"Profile")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#numpy"},"NumPy")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#image"},"Image")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#animation"},"Animation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#audio"},"Audio")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#synthesizer"},"Synthesizer")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#games"},"Games")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#pandas"},"Pandas")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#plotly"},"Plotly")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#cython"},"Cython"))))),(0,l.kt)("h2",{id:"hello-world"},"Hello World"),(0,l.kt)("h4",{id:"python-2"},"python 2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'print "Hello World"\n')),(0,l.kt)("h4",{id:"python-3"},"python 3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'print("Hello World")  # "Hello World\\n"\nprint("Hello", "World", sep="/")  # "Hello/World"\nprint("Hello World", end="")  # "Hello World"\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h2",{id:"comments"},"Comments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Single line comment\n\n"""\nmulti-line comments\n"""\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h2",{id:"program-entry-point"},"Program Entry Point"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'if __name__ === "__main__":\n    # do something\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h2",{id:"collections"},"Collections"),(0,l.kt)("h3",{id:"list"},"List"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import itertools\nimport functools\n\nlist = list[from_inclusive : to_exclusive : \xb1step_size]\n\nlist.append(el)  # Or: list += [el]\nlist.extend(collection)  # Or: list += collection\n\nlist.sort()\nlist.reverse()\nlist = sorted(collection)\niter = reversed(list)\n\nsum_of_elements  = sum(collection)\nelementwise_sum  = [sum(pair) for pair in zip(list_a, list_b)]\n\nsorted_by_second = sorted(collection, key=lambda el: el[1])\nsorted_by_both   = sorted(collection, key=lambda el: (el[1], el[0]))\n\n# Flatten list\nlist_example = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nflatter_list = list(itertools.chain.from_iterable(list_example))  # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nproduct_of_elems = functools.reduce(lambda out, el: out * el, collection)\n\nlist_of_chars    = list(str)\n\nint = list.count(el)  # Returns number of occurrences, also works on strings\n\nindex = list.index(el)  # Returns index of first occurrence or raises ValueError\n\nlist.insert(index, el)  # Inserts item at index and moves the rest to the right\n\nel = list.pop([index])  # Removes and returns item at index or from the end\n\nlist.remove(el)  # Removes first occurrence of item or raises ValueError\n\nlist.clear()  # Removes all items, also works on dictionary and set\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"dictionary"},"Dictionary"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"view = dict.keys()  # Coll. of keys that reflects changes\nview = dict.values()  # Coll. of values that reflects changes\nview = dict.items()  # Coll. of key-value tuples that reflects chgs\n\nvalue  = dict.get(key, default=None)  # Returns default if key is missing\nvalue  = dict.setdefault(key, default=None)  # Returns and writes default if key is missing\ndict = collections.defaultdict(type)  # Creates a dict with default value of type\ndict = collections.defaultdict(lambda: 1)  # Creates a dict with default value 1\n\ndict = dict(collection)  # Creates a dict from coll. of key-value pairs\ndict = dict(zip(keys, values))  # Creates a dict from two collections\ndict = dict.fromkeys(keys [, value])  # Creates a dict from collection of keys\n\ndict.update(dict)  # Adds items. Replaces ones with matching keys\nvalue = dict.pop(key)  # Removes item or raises KeyError\n{k for k, v in dict.items() if v == value}  # Returns set of keys that point to the value\n{k: v for k, v in dict.items() if k in keys}  # Returns a dictionary, filtered by keys\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Counter")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\n\ncolors = ['blue', 'blue', 'blue', 'red', 'red']\ncounter = Counter(colors)\ncounter['yellow'] += 1  # Counter({'blue': 3, 'red': 2, 'yellow': 1})\n\ncounter.most_common()[0]  # ('blue', 3)\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"set"},"Set"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"set = set()\n\nset.add(el)  # Or: set |= {el}\nset.update(collection)  # Or: set |= set\n\nset  = set.union(coll.)  # Or: set | set\nset  = set.intersection(coll.)  # Or: set & set\nset  = set.difference(coll.)  # Or: set - set\nset  = set.symmetric_difference(coll.)  # Or: set ^ set\nbool = set.issubset(coll.)  # Or: set = set\nbool = set.issuperset(coll.)  # Or: set = set\n\nel = set.pop()  # Raises KeyError if empty\nset.remove(el)  # Raises KeyError if missing\nset.discard(el)  # Doesn't raise an error\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Frozen Set",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Is immutable and hashable"),(0,l.kt)("li",{parentName:"ul"},"That means it can be used as a key in a dictionary or as an element in a set")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"frozenset = frozenset(collection)\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"tuple"},"Tuple"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tuple is an immutable and hashable list")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"tuple = ()\ntuple = (el, )\ntuple = (el_1, el_2 [, ...])\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Named Tuple",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Tuple's subclass with named elements")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from collections import namedtuple\n\nPoint = namedtuple('Point', 'x y')\n\np = Point(1, y=2)  # Point(x=1, y=2)\np[0]  # 1\n\np.x  # 1\n\ngetattr(p, 'y')  # 2\n\np._fields  # ('x', 'y')\nPoint._fields  # ('x', 'y')\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"range"},"Range"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"range = range(to_exclusive)\nrange = range(from_inclusive, to_exclusive)\nrange = range(from_inclusive, to_exclusive, \xb1step_size)\n\nfrom_inclusive = range.start\nto_exclusive   = range.stop\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"enumerate"},"Enumerate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for i, el in enumerate(collection [, i_start]):\n    ...\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"iterator"},"Iterator"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"iter = iter(collection)  # `iter(iter)` returns unmodified iterator\niter = iter(function, to_exclusive)  # A sequence of return values until 'to_exclusive'\nel   = next(iter [, default])  # Raises StopIteration or returns 'default' on end\nlist = list(iter)  # Returns a list of iterator's remaining elements\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Itertools")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from itertools import count, repeat, cycle, chain, islice\n\niter = count(start=0, step=1)  # Returns updated value endlessly. Accepts floats\niter = repeat(el [, times])  # Returns element endlessly or 'times' times\niter = cycle(collection)  # Repeats the sequence endlessly\n\niter = chain(coll_1, coll_2 [, ...])  # Empties collections in order\niter = chain.from_iterable(collection)  # Empties collections inside a collection in order\n\niter = islice(collection, to_exclusive)\niter = islice(collection, from_inclusive, to_exclusive [, +step_size])\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"generator"},"Generator"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Any function that contains a yield statement returns a generator"),(0,l.kt)("li",{parentName:"ul"},"Generators and iterators are interchangeable")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def count(start, step):\n    while True:\n        yield start\n        start += step\n\n\ncounter = count(10, 2)\nnext(counter), next(counter), next(counter)  # (10, 12, 14)\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h2",{id:"types"},"Types"),(0,l.kt)("h3",{id:"type"},"Type"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Everything is an object"),(0,l.kt)("li",{parentName:"ul"},"Every object has a type"),(0,l.kt)("li",{parentName:"ul"},"Type and class are synonymous")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"type = type(el)  # Or: el.__class__\nbool = isinstance(el, type)  # Or: issubclass(type(el), type)\n\ntype('a'), 'a'.__class__, str  # (class 'str', class 'str', class 'str')\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Some types do not have built-in names, so they must be imported")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from types import FunctionType, MethodType, LambdaType, GeneratorType\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Abstract Base Classes",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Each abstract base class specifies a set of virtual subclasses"),(0,l.kt)("li",{parentName:"ul"},"These classes are then recognized by isinstance() and issubclass() as subclasses of the ABC, although they are really not")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from collections.abc import Sequence, Collection, Iterable\n\nisinstance([1, 2, 3], Iterable)  # True\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"Sequence"),(0,l.kt)("th",{parentName:"tr",align:null},"Collection"),(0,l.kt)("th",{parentName:"tr",align:null},"Iterable"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"list, range, str"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dict, set"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"iter"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from numbers import Integral, Rational, Real, Complex, Number\n\nisinstance(123, Number)  # True\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"Integral"),(0,l.kt)("th",{parentName:"tr",align:null},"Rational"),(0,l.kt)("th",{parentName:"tr",align:null},"Real"),(0,l.kt)("th",{parentName:"tr",align:null},"Complex"),(0,l.kt)("th",{parentName:"tr",align:null},"Number"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"fractions.Fraction"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"complex"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"decimal.Decimal"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611")))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"string"},"String"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'str1 = "test string"\nstr1.capitalize()  # "Test string"\nstr1.upper()  # "TEST STRING"\nstr1.lower()  # "test string"\nstr1.title()  # "Test String"\n\n\nstr = str.strip()  # Strips all whitespace characters from both ends\nstr = str.strip(\'chars\')  # Strips all passed characters from both ends\nstr = str.lstrip()  # Strips all whitespace characters from left end\nstr = str.rstrip()  # Strips all whitespace characters from right end\n\nlist = str.split()  # Splits on one or more whitespace characters\nlist = str.split(sep=None, maxsplit=-1)  # Splits on \'sep\' str at most \'maxsplit\' times.\nlist = str.splitlines(keepends=False)  # Splits on \\n,\\r,\\r\\n. Keeps them if \'keepends\'\nstr  = str.join(coll_of_strings)  # Joins elements using string as separator\n\nbool = sub_str in str  # Checks if string contains a substring\nbool = str.startswith(sub_str)  # Pass tuple of strings for multiple options\nbool = str.endswith(sub_str)  # Pass tuple of strings for multiple options\nint = str.find(sub_str)  # Returns start index of first match or -1\nint = str.index(sub_str)  # Same but raises ValueError if missing\n\nstr = str.replace(old, new [, count])   # Replaces \'old\' with \'new\' at most \'count\' times\n\ntxt = "Hello Sam!"\nmytable = txt.maketrans("S", "P")  # Create a mapping table\n# use mapping table in the translate() method to replace any "S" characters with a "P" character\ntxt.translate(mytable)  # "Hello Pam!"\n\nstr = chr(int)  # Converts int to Unicode char\nint = ord(str)  # Converts Unicode char to int\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Property Methods")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"!#$%..."),(0,l.kt)("th",{parentName:"tr",align:null},"a-zA-Z"),(0,l.kt)("th",{parentName:"tr",align:null},"1/4 1/2 3/4"),(0,l.kt)("th",{parentName:"tr",align:null},"sup2/supsup3/supsup1/sup"),(0,l.kt)("th",{parentName:"tr",align:null},"0-9"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"isprintable()"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"isalnum()"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"isnumeric()"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"isdigit()"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"isdecimal()"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"\u2611")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'str1 = ""\nstr1.isspace()  # False\n\nstr2 = " t "\nstr2.isspace()  # False\n\nstr3 = " "\nstr3.isspace()  # True\n\n# checks for \\t\\n\\r\\f\\v...\nstr4 = " \\n"\nstr4.isspace()  # True\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"regular-expression"},"Regular Expression"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Argument ",(0,l.kt)("inlineCode",{parentName:"li"},"flags=re.IGNORECASE")," can be used with all functions"),(0,l.kt)("li",{parentName:"ul"},"Argument ",(0,l.kt)("inlineCode",{parentName:"li"},"flags=re.MULTILINE")," makes ",(0,l.kt)("inlineCode",{parentName:"li"},"^")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"$")," match the start/end of each line"),(0,l.kt)("li",{parentName:"ul"},"Argument ",(0,l.kt)("inlineCode",{parentName:"li"},"flags=re.DOTALL")," makes dot also accept the ",(0,l.kt)("inlineCode",{parentName:"li"},"\\n")),(0,l.kt)("li",{parentName:"ul"},"Use r",(0,l.kt)("inlineCode",{parentName:"li"},"\\1")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"\\\\1")," for backreference"),(0,l.kt)("li",{parentName:"ul"},"Add ",(0,l.kt)("inlineCode",{parentName:"li"},"?")," after an operator to make it non-greedy")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import re\n\nstr = re.sub(regex, new, text, count=0)  # Substitutes all occurrences with 'new'\nlist = re.findall(regex, text)  # Returns all occurrences as strings\nlist = re.split(regex, text, maxsplit=0)  # Use brackets in regex to include the matches\n\n# Search() and match() return None if they can't find a match\nMatch = re.search(regex, text)  # Searches for first occurrence of the pattern\nMatch = re.match(regex, text)  # Searches only at the beginning of the text\n\niter = re.finditer(regex, text)  # Returns all occurrences as match objects\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Match Object")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"str = Match.group()  # Returns the whole match, also group(0)\nstr = Match.group(1)  # Returns part in the first bracket\ntuple = Match.groups()  # Returns all bracketed parts\nint = Match.start()  # Returns start index of the match\nint = Match.end()  # Returns exclusive end index of the match\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Special Sequences",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"By default digits, alphanumerics and whitespaces from all alphabets are matched, unless ",(0,l.kt)("inlineCode",{parentName:"li"},"flags=re.ASCII")," argument is used"),(0,l.kt)("li",{parentName:"ul"},"Use a capital letter for negation")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"'\\d' == '[0-9]'  # Matches any digit\n'\\w' == '[a-zA-Z0-9_]'  # Matches any alphanumeric\n'\\s' == '[\\t\\n\\r\\f\\v]'  # Matches any whitespace\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"format"},"Format"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"str = f'{el_1}, {el_2}'\nstr = '{}, {}'.format(el_1, el_2)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Attributes")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from collections import namedtuple\n\nPerson = namedtuple('Person', 'name height')\nperson = Person('Jean-Luc', 187)\nf'{person.height}'  # '187'\n'{p.height}'.format(p=person)  # '187'\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"General Options")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'str = "test\nf"{str:10}"  # \'test      \'\nf"{str:^10}"  # \'   test   \'\nf"{str:10}"  # \'      test\'\nf"{str:.10}"  # \'test......\'\nf"{str:0}"  # \'test\'\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Strings",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!r")," calls object's repr() method, instead of str(), to get a string")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"f\"{'abcde'!r:10}\"  # \"'abcde'   \"\nf\"{'abcde':10.3}\"  # 'abc       '\nf\"{'abcde':.3}\"  # 'abc'\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Numbers")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"f\"{123456:10,}\"  # '   123,456'\nf\"{123456:10_}\"  # '   123_456'\nf\"{123456:+10}\"  # '   +123456'\nf\"{-123456:=10}\"  # '-   123456'\nf\"{123456:}\"  # '123456'\nf\"{-123456:}\"  # '-123456'\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Floats")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"f\"{1.23456:10.3}\"  # '      1.23'\nf\"{1.23456:10.3f}\"  # '     1.235'\nf\"{1.23456:10.3e}\"  # ' 1.235e+00'\nf\"{1.23456:10.3%}\"  # '  123.456%'\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},'f"{float}"')),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},'f"{float:f}"')),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},'f"{float:e}"')),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},'f"{float:%}"')))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0.000056789"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.6789e-05'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.000057'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.678900e-05'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.005679%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0.00056789"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.00056789'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.000568'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.678900e-04'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.056789%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0.0056789"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.0056789'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.005679'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.678900e-03'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.567890%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0.056789"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.056789'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.056789'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.678900e-02'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.678900%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0.56789"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.56789'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.567890'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.678900e-01'"),(0,l.kt)("td",{parentName:"tr",align:null},"'56.789000%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5.6789"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.6789'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.678900'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.678900e+00'"),(0,l.kt)("td",{parentName:"tr",align:null},"'567.890000%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"56.789"),(0,l.kt)("td",{parentName:"tr",align:null},"'56.789'"),(0,l.kt)("td",{parentName:"tr",align:null},"'56.789000'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.678900e+01'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5678.900000%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"567.89"),(0,l.kt)("td",{parentName:"tr",align:null},"'567.89'"),(0,l.kt)("td",{parentName:"tr",align:null},"'567.890000'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.678900e+02'"),(0,l.kt)("td",{parentName:"tr",align:null},"'56789.000000%'")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},'f"{float:.2}"')),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},'f"{float:.2f}"')),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},'f"{float:.2e}"')),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},'f"{float:.2%"')))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0.000056789"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.7e-05'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.00'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.68e-05'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.01%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0.00056789"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.00057'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.00'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.68e-04'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.06%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0.0056789"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.0057'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.01'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.68e-03'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.57%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0.056789"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.057'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.06'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.68e-02'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.68%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0.56789"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.57'"),(0,l.kt)("td",{parentName:"tr",align:null},"'0.57'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.68e-01'"),(0,l.kt)("td",{parentName:"tr",align:null},"'56.79%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5.6789"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.7'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.68'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.68e+00'"),(0,l.kt)("td",{parentName:"tr",align:null},"'567.89%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"56.789"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.7e+01'"),(0,l.kt)("td",{parentName:"tr",align:null},"'56.79'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.68e+01'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5678.90%'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"567.89"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.7e+02'"),(0,l.kt)("td",{parentName:"tr",align:null},"'567.89'"),(0,l.kt)("td",{parentName:"tr",align:null},"'5.68e+02'"),(0,l.kt)("td",{parentName:"tr",align:null},"'56789.00%'")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Ints")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"f\"{90:c}\"  # 'Z'\nf\"{90:b}\"  # '1011010'\nf\"{90:X}\"  # '5A'\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"numbers"},"Numbers"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Types",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"int(str)")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"float(str)")," raise ValueError on malformed strings"),(0,l.kt)("li",{parentName:"ul"},"Decimal numbers can be represented exactly, unlike foats where ",(0,l.kt)("inlineCode",{parentName:"li"},"1.1 + 2.2 != 3.3")),(0,l.kt)("li",{parentName:"ul"},"Precision of decimal operations is set with: ",(0,l.kt)("inlineCode",{parentName:"li"},"decimal.getcontext().prec = int"))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"int = int(float/str/bool)  # Or: math.floor(float)\nfloat = float(int/str/bool)  # Or: reale\xb1int\ncomplex = complex(real=0, imag=0)  # Or: real \xb1 realj\nFraction = fractions.Fraction(0, 1)  # Or: Fraction(numerator=0, denominator=1)\nDecimal = decimal.Decimal(str/int)  # Or: Decimal((sign, digits, exponent))\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Basic Functions")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"num = pow(num, num)  # Or: num ** num\nnum = abs(num)  # float = abs(complex)\nnum = round(num [, \xb1ndigits])  # `round(126, -1) == 130`\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Math")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from math import e, pi, inf, nan, isinf, isnan\nfrom math import cos, acos, sin, asin, tan, atan, degrees, radians\nfrom math import log, log10, log2\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Statistics")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from statistics import mean, median, variance, stdev, pvariance, pstdev\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Random")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from random import random, randint, choice, shuffle\n\nfloat = random()\nint = randint(from_inclusive, to_inclusive)\nel = choice(list)\nshuffle(list)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Bin, Hex")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"int = \xb10bbin  # Or: \xb10xhex\nint = int('\xb1bin', 2)  # Or: int('\xb1hex', 16)\nint = int('\xb10bbin', 0)  # Or: int('\xb10xhex', 0)\n'[-]0bbin' = bin(int)  # Or: hex(int)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Bitwise Operators")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"int = int & int  # And\nint = int | int  # Or\nint = int ^ int  # Xor (0 if both bits equal)\nint = int  n_bits  # Shift left ( for right)\nint = ~int  # Not (also: -int - 1)\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"combinatorics"},"Combinatorics"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Every function returns an iterator"),(0,l.kt)("li",{parentName:"ul"},"If you want to print the iterator, you need to pass it to the list() function first!")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from itertools import product, combinations, combinations_with_replacement, permutations\n\nproduct([0, 1], repeat=3)  # itertools.product object at 0x10b08ffc0\nlist(product([0, 1], repeat=3))  # [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]\n\nlist(product('ab', '12'))  # [('a', '1'), ('a', '2'), ('b', '1'), ('b', '2')]\n\nlist(combinations('abc', 2))  # [('a', 'b'), ('a', 'c'), ('b', 'c')]\n\nlist(combinations_with_replacement('abc', 2))  # [('a', 'a'), ('a', 'b'), ('a', 'c'), ('b', 'b'), ('b', 'c'), ('c', 'c')]\n\nlist(permutations('abc', 2))  # [('a', 'b'), ('a', 'c'), ('b', 'a'), ('b', 'c'), ('c', 'a'), ('c', 'b')]\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"datetime"},"Datetime"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Module 'datetime' provides 'date', 'time', 'datetime' and 'timedelta' classes",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"All are immutable and hashable"))),(0,l.kt)("li",{parentName:"ul"},"Time and datetime objects can be 'aware' (have defined timezone), or 'naive' (don't have defined timezone)"),(0,l.kt)("li",{parentName:"ul"},"If object is naive, it is presumed to be in the system's timezone")),(0,l.kt)("h4",{id:"python-2-1"},"python 2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from datetime import date, time, datetime, timedelta\nfrom dateutil.tz import UTC, tzlocal, gettz, resolve_imaginary  # included in python 2\n")),(0,l.kt)("h4",{id:"python-3-1"},"python 3"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip install python-dateutil"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from datetime import date, time, datetime, timedelta\nfrom dateutil.tz import UTC, tzlocal, gettz, resolve_imaginary  # needs to install 3rd party library\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Constructors",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"date/datetime.weekday()")," to get the day of the week (Mon == 0)"),(0,l.kt)("li",{parentName:"ul"},"'fold=1' means the second pass in case of time jumping back for one hour"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"datetime aware = resolve_imaginary(datetime aware)")," fixes datetimes that fall into the missing hour")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"date  = date(year, month, day)\ntime  = time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, fold=0)\ndatetime = datetime(year, month, day, hour=0, minute=0, second=0, ...)\ntimedelta = timedelta(days=0, seconds=0, microseconds=0, milliseconds=0,\n                        minutes=0, hours=0, weeks=0)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Now",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"To extract time use ",(0,l.kt)("inlineCode",{parentName:"li"},"datetime naive.time()"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"datetime aware.time()")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"datetime aware.timetz()"))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"date/datetime naive  = date/datetime.today()  # Current local date or naive datetime\ndatetime naive = datetime.utcnow()  # Naive datetime from current UTC time\ndatetime aware = datetime.now(tzinfo)  # Aware datetime from current tz time\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Timezone")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"tzinfo = UTC  # UTC timezone. London without DST\ntzinfo = tzlocal()  # Local timezone, also gettz()\ntzinfo = gettz('Continent/City')  # 'Continent/City_Name' timezone or None\ndatetime aware    = datetime.astimezone(tzinfo)  # Datetime, converted to passed timezone\ntime aware/datetime aware = time/datetime.replace(tzinfo=tzinfo)  # Unconverted object with new timezone\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Encode",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"ISO strings come in following forms: ",(0,l.kt)("inlineCode",{parentName:"li"},"'YYYY-MM-DD', 'HH:MM:SS.ffffff[\xb1offset]'"),", or both separated by an arbitrary character",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Offset is formatted as: ",(0,l.kt)("inlineCode",{parentName:"li"},"HH:MM")))),(0,l.kt)("li",{parentName:"ul"},"Epoch on Unix systems is: ",(0,l.kt)("inlineCode",{parentName:"li"},"'1970-01-01 00:00 UTC', '1970-01-01 01:00 CET', ..."))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"date/time/datetime = date/time/datetime.fromisoformat('iso')  # Object from ISO string. Raises ValueError\ndatetime = datetime.strptime(str, 'format')  # Datetime from str, according to format\ndate/datetime naive = date/datetime.fromordinal(int)  # date/datetime naive from days since Christ, at midnight\ndatetime naive = datetime.fromtimestamp(real)  # Local time datetime naive from seconds since Epoch\ndatetime aware = datetime.fromtimestamp(real, tz.)  # Aware datetime from seconds since Epoch\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Decode")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"str = date/time/datetime.isoformat(sep='T')  # Also timespec='auto/hours/minutes/seconds'\nstr = date/time/datetime.strftime('format')  # Custom string representation\nint = date/datetime.toordinal()  # Days since Christ, ignoring time and tz\nfloat = datetime naive.timestamp()  # Seconds since Epoch, from datetime naive in local tz\nfloat = datetime aware.timestamp()  # Seconds since Epoch, from datetime aware\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Format",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"When parsing, ",(0,l.kt)("inlineCode",{parentName:"li"},"%z")," also accepts ",(0,l.kt)("inlineCode",{parentName:"li"},"\xb1HH:MM")),(0,l.kt)("li",{parentName:"ul"},"For abbreviated weekday and month use ",(0,l.kt)("inlineCode",{parentName:"li"},"%a")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"%b"))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from datetime import datetime\n\ndt = datetime.strptime('2015-05-14 23:39:00.00 +0200', '%Y-%m-%d %H:%M:%S.%f %z')\ndt.strftime(\"%A, %dth of %B '%y, %I:%M%p %Z\")  # \"Thursday, 14th of May '15, 11:39PM UTC+02:00\"\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Arithmetics")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"date/datetime = date/datetime \xb1 timedelta  # Returned datetime can fall into missing hour\ntimedelta = date/datetime naive - date/datetime naive  # Returns the difference, ignoring time jumps\ntimedelta = datetime aware - datetime aware  # Ignores time jumps if they share tzinfo object\ntimedelta = datetime_UTC - datetime_UTC  # Convert datetimes to UTC to get the actual delta\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h2",{id:"syntax"},"Syntax"),(0,l.kt)("h3",{id:"arguments"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Inside Function Call")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"function(positional_args)  # f(0, 0)\nfunction(keyword_args)  # f(x=0, y=0)\nfunction(positional_args, keyword_args)  # f(0, y=0)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Inside Function Definition")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def f(nondefault_args):  # def f(x, y):\n    ...\n\ndef f(default_args):  # def f(x=0, y=0):\n    ...\n\n\ndef f(nondefault_args, default_args):  # def f(x, y=0):\n    ...\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"splat-operator"},"Splat Operator"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Inside Function Call",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Splat expands a collection into positional arguments, while splatty-splat expands a dictionary into keyword arguments")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# method 1\nargs = (1, 2)\nkwargs = {'x': 3, 'y': 4, 'z': 5}\nfunctionName(*args, **kwargs)\n\n# method 2\nfunctionName(1, 2, x=3, y=4, z=5)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Inside Function Definition",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def add(*a):\n    return sum(a)\n\n\nadd(1, 2, 3)  # 6\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Legal argument combinations")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def f(x, y, z):  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)\ndef f(*, x, y, z):  # f(x=1, y=2, z=3)\ndef f(x, *, y, z):  # f(x=1, y=2, z=3) | f(1, y=2, z=3)\ndef f(x, y, *, z):  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)\n\ndef f(*args):  # f(1, 2, 3)\ndef f(x, *args):  # f(1, 2, 3)\ndef f(*args, z):  # f(1, 2, z=3)\ndef f(x, *args, z):  # f(1, 2, z=3)\n\n\ndef f(**kwargs):  # f(x=1, y=2, z=3)\ndef f(x, **kwargs):  # f(x=1, y=2, z=3) | f(1, y=2, z=3)\ndef f(*, x, **kwargs):  # f(x=1, y=2, z=3)\n\ndef f(*args, **kwargs):  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)\ndef f(x, *args, **kwargs):  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)\ndef f(*args, y, **kwargs):  # f(x=1, y=2, z=3) | f(1, y=2, z=3)\ndef f(x, *args, z, **kwargs):  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Other Uses")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"list  = [*collection [, ...]]\nset   = {*collection [, ...]}\ntuple = (*collection, [...])\ndict  = {**dict [, ...]}\n\nhead, *body, tail = collection\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"inline"},"Inline"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Lambda")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"function = lambda: return_value\nfunction = lambda argument_1, argument_2: return_value\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Comprehensions")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"list = [i+1 for i in range(10)]  # [1, 2, ..., 10]\nset  = {i for i in range(10) if i  5}  # {6, 7, 8, 9}\niter = (i+5 for i in range(10))  # (5, 6, ..., 14)\ndict = {i: i*2 for i in range(10)}  # {0: 0, 1: 2, ..., 9: 18}\n\n# method 1\nout = [i+j for i in range(10) for j in range(10)]\n\n# method 2\nout = []\nfor i in range(10):\n    for j in range(10):\n        out.append(i+j)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Map, Filter, Reduce")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from functools import reduce\n\niter = map(lambda x: x + 1, range(10))  # [1, 2, ..., 10]\niter = filter(lambda x: x  5, range(10))  # {6, 7, 8, 9}\nobj  = reduce(lambda out, x: out + x, range(10))  # 45\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Any, All")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"bool = any(collection)                          # False if empty\nbool = all(el[1] for el in collection)          # True if empty\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If - Else")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"obj = expression_if_true if condition else expression_if_false\n\n[a if a else 'zero' for a in (0, 1, 2, 3)]  # ['zero', 1, 2, 3]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Namedtuple, Enum, Dataclass")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from collections import namedtuple\nfrom enum import Enum\nfrom dataclasses import make_dataclass\n\n\nPoint = namedtuple('Point', 'x y')\npoint = Point(0, 0)\n\nDirection = Enum('Direction', 'n e s w')\ndirection = Direction.n\n\nCreature = make_dataclass('Creature', ['location', 'direction'])\ncreature = Creature(Point(0, 0), Direction.n)\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"closure"},"Closure"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"have a closure in Python when:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"A nested function references a value of its enclosing function"),(0,l.kt)("li",{parentName:"ul"},"and the enclosing function returns the nested function"),(0,l.kt)("li",{parentName:"ul"},"If multiple nested functions within enclosing function reference the same value, that value gets shared"),(0,l.kt)("li",{parentName:"ul"},"To dynamically access function's first free variable use ",(0,l.kt)("inlineCode",{parentName:"li"},"function.__closure__[0].cell_contents"))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_multiplier(a):\n    def out(b):\n        return a * b\n    return out\n\n\nmultiply_by_3 = get_multiplier(3)\nmultiply_by_3(10)  # 30\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Partial",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Partial is also useful in cases when function needs to be passed as an argument",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"because it enables us to set its arguments beforehand"))),(0,l.kt)("li",{parentName:"ul"},"e.g.: ",(0,l.kt)("inlineCode",{parentName:"li"},"defaultdict(function)"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"iter(function, to_exclusive)")," and dataclass's ",(0,l.kt)("inlineCode",{parentName:"li"},"field(default_factory=function)"))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from functools import partial\nimport operator as op\n\n\nfunction = partial(function [, arg_1, arg_2, ...])\n\nmultiply_by_3 = partial(op.mul, 3)\nmultiply_by_3(10)  # 30\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Non-Local",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If variable is being assigned to anywhere in the scope, it is regarded as a local variable"),(0,l.kt)("li",{parentName:"ul"},"unless it is declared as a ",(0,l.kt)("inlineCode",{parentName:"li"},"global")," or a ",(0,l.kt)("inlineCode",{parentName:"li"},"nonlocal"))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_counter(): i= 0\n    def out():\n        nonlocal i\n        i += 1\n        return i\n    return out\n\n\ncounter = get_counter()\ncounter(), counter(), counter()  # (1, 2, 3)\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"decorator"},"Decorator"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A decorator takes a function, adds some functionality and returns it")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@decorator_name\ndef function_that_gets_passed_to_decorator():\n    ...\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Debugger Example",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Wraps is a helper decorator that copies the metadata of the passed function (func) to the function it is wrapping (out)"),(0,l.kt)("li",{parentName:"ul"},"Without it ",(0,l.kt)("inlineCode",{parentName:"li"},"add.__name__")," would return 'out'")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from functools import wraps\n\n\ndef debug(func):\n    @wraps(func)\n    def out(*args, **kwargs):\n        print(func.__name__)\n        return func(*args, **kwargs)\n    return out\n\n\n@debug\ndef add(x, y):\n    return x + y\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"LRU Cache",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Decorator that caches function's return values"),(0,l.kt)("li",{parentName:"ul"},"All function's arguments must be hashable"),(0,l.kt)("li",{parentName:"ul"},"CPython interpreter limits recursion depth to 1000 by default",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"To increase it use ",(0,l.kt)("inlineCode",{parentName:"li"},"sys.setrecursionlimit(depth)"))))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    return n if n  2 else fib(n-2) + fib(n-1)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Parametrized Decorator",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"A decorator that accepts arguments and returns a normal decorator that accepts a function")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from functools import wraps\n\n\ndef debug(print_result=False):\n    def decorator(func):\n        @wraps(func)\n        def out(*args, **kwargs):\n            result = func(*args, **kwargs)\n            print(func.__name__, result if print_result else '')\n            return result\n        return out\n    return decorator\n\n\n@debug(print_result=True)\ndef add(x, y):\n    return x + y\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"class"},"Class"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Return value of repr() should be unambiguous and of str() readable")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"If only repr() is defined, it will also be used for str()"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Test:\n    def __init__(self, a):\n        self.a = a\n    def __repr__(self):\n        class_name = self.__class__.__name__\n        return f'{class_name}({self.a!r})'\n    def __str__(self):\n        return str(self.a)\n\n    @classmethod\n    def get_class_name(cls):\n        return cls.__name__\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Str()")," use cases"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'test = Test("sample")\nprint(test)  # sample\nprint(f"{test}")  # sample\nraise Exception(test)\n"""\nTraceback (most recent call last):\n  File "/path/to/file.py", line 27, in module\n    raise Exception(test)\nException: sample\n\nshell returned 1\n"""\n')))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"import loguru  # pip install loguru\n\nloguru.logger.debug(test)  # 2022-04-04 02:43:02.509 | DEBUG    | __main__:module:28 - sample\n\n\nimport csv\n\n# open the file in the write mode\nfile = open('path/to/csv_file', 'w')\ncsv.writer(file).writerow([test])\n```\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Repr()")," use cases"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"test = Test(\"sample\")\nprint([test])  # [Test('sample')]\nprint(f'{test!r}')  # Test('sample')\n")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"import loguru  # pip install loguru\n\nloguru.logger.exception(test)\n\"\"\"\n2022-04-04 02:51:52.414 | ERROR    | __main__:module:25 - sample\nNoneType: None\n\"\"\"\n\n\nimport dataclasses\n\nZ = dataclasses.make_dataclass('Z', ['a'])\nprint(Z(test))  # Z(a=Test('sample'))\n```\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Constructor Overloading"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class name:\n    def __init__(self, a=None):\n        self.a = a\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Inheritance"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age  = age\n")))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"class Employee(Person):\n    def __init__(self, name, age, staff_num):\n        super().__init__(name, age)\n        self.staff_num = staff_num\n```\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Multiple Inheritance"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class A: pass\nclass B: pass\nclass C(A, B): pass\n\n# MRO determines the order in which parent classes are traversed when searching for a method\nC.mro()  # [class 'C', class 'A', class 'B', class 'object']\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Property"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Pythonic way of implementing getters and setters")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class MyClass:\n    @property\n    def a(self):\n        return self._a\n\n    @a.setter\n    def a(self, value):\n        self._a = value\n")))),(0,l.kt)("p",null,"  el = MyClass()\nel.a = 123\nel.a  # 123"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n- Dataclass\n\n- Decorator that automatically generates init(), repr() and eq() special methods\n- Objects can be made sortable with 'order=True' and/or immutable and hashable with 'frozen=True'\n- Function field() is needed because `attr_name: list = []` would make a list that is shared among all instances\n- Default_factory can be any callable\n\n```python\nfrom dataclasses import dataclass, field\n\n\n@dataclass(order=False, frozen=False)\nclass class_name:\n    attr_name_1: type\n    attr_name_2: type = default_value\n    attr_name_3: list/dict/set = field(default_factory=list/dict/set)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Inline"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from dataclasses import make_dataclass\n")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"class = make_dataclass('class_name', coll_of_attribute_names)\nclass = make_dataclass('class_name', coll_of_tuples)\ntuple = ('attr_name', type [, default_value])\n```\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Slots"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Mechanism that restricts objects to attributes listed in 'slots' and significantly reduces their memory footprint"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class MyClassWithSlots:\n    __slots__ = ['a']\n    def __init__(self):\n        self.a = 1\n"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Copy"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from copy import copy, deepcopy\n")))),(0,l.kt)("p",null,"  object = copy(object)\nobject = deepcopy(object)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n[back to top](#table-of-contents)\n\n### Duck Type\n\n- A duck type is an implicit type that prescribes a set of special methods\n- Any object that has those methods defined is considered a member of that duck type\n- Comparable\n\n- If `eq()` method is not overridden, it returns `id(self) == id(other)`, which is the same as 'self is other'\n- That means all objects compare not equal by default\n- Only the left side object has eq() method called, unless it returns NotImplemented, in which case the right object is consulted\n\n```python\nclass MyComparable:\n    def __init__(self, a):\n        self.a = a\n\n    def __eq__(self, other):\n        if isinstance(other, type(self)):\n            return self.a == other.a\n        return NotImplemented\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Hashable"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Hashable object needs both hash() and eq() methods and its hash value should never change")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Hashable objects that compare equal must have the same hash value, meaning default ",(0,l.kt)("inlineCode",{parentName:"p"},"hash()")," that returns ",(0,l.kt)("inlineCode",{parentName:"p"},"id(self)")," will not do")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"That is why Python automatically makes classes unhashable if you only implement ",(0,l.kt)("inlineCode",{parentName:"p"},"eq()")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class MyHashable:\n    def __init__(self, a):\n        self._a = a\n\n    @property\n    def a(self):\n        return self._a\n\n    def __eq__(self, other):\n        if isinstance(other, type(self)):\n            return self.a == other.a\n        return NotImplemented\n\n    def __hash__(self):\n        return hash(self.a)\n"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Sortable"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"With total_ordering decorator, you only need to provide eq() and one of lt(), gt(), le() or ge() special methods")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from functools import total_ordering\n\n@total_ordering\nclass MySortable:\n    def __init__(self, a):\n        self.a = a\n\n    def __eq__(self, other):\n        if isinstance(other, type(self)):\n            return self.a == other.a\n        return NotImplemented\n\n    def __lt__(self, other):\n        if isinstance(other, type(self)):\n            return self.a  other.a\n        return NotImplemented\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Iterator"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Any object that has methods next() and iter() is an iterator"),(0,l.kt)("li",{parentName:"ul"},"Next() should return next item or raise StopIteration"),(0,l.kt)("li",{parentName:"ul"},"Iter() should return 'self'"),(0,l.kt)("li",{parentName:"ul"},"Python has many different iterator objects",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Iterators returned by the iter() function, such as list_iterator and set_iterator"),(0,l.kt)("li",{parentName:"ul"},"Objects returned by the itertools module, such as count, repeat and cycle"),(0,l.kt)("li",{parentName:"ul"},"Generators returned by the generator functions and generator expressions"),(0,l.kt)("li",{parentName:"ul"},"File objects returned by the open() function, etc")))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Counter:\n    def __init__(self):\n        self.i = 0\n\n    def __next__(self):\n        self.i += 1\n        return self.i\n\n    def __iter__(self):\n        return self\n")))),(0,l.kt)("p",null,"  counter = Counter()\nnext(counter), next(counter), next(counter)  # (1, 2, 3)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n- Callable\n\n- All functions and classes have a call() method, hence are callable\n- When this cheatsheet uses `function` as an argument, it actually means `callable`\n\n```python\nclass Counter:\n    def __init__(self):\n        self.i = 0\n\n    def __call__(self):\n        self.i += 1\n        return self.i\n\n\ncounter = Counter()\ncounter(), counter(), counter()  # (1, 2, 3)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Context Manager"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Enter() should lock the resources and optionally return an object"),(0,l.kt)("li",{parentName:"ul"},"Exit() should release the resources"),(0,l.kt)("li",{parentName:"ul"},"Any exception that happens inside the with block is passed to the exit() method"),(0,l.kt)("li",{parentName:"ul"},"If it wishes to suppress the exception it must return a true value")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class MyOpen:\n    def __init__(self, filename):\n        self.filename = filename\n\n    def __enter__(self):\n        self.file = open(self.filename)\n        return self.file\n\n    def __exit__(self, exc_type, exception, traceback):\n        self.file.close()\n")))),(0,l.kt)("p",null,"  with open('test.txt', 'w') as file:\nfile.write('Hello World!')"),(0,l.kt)("p",null,"  with MyOpen('test.txt') as file:\nprint(file.read())"),(0,l.kt)("p",null,"  Hello World!"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n- Iterable\n\n- Only required method is iter()\n  - It should return an iterator of object's items\n- Contains() automatically works on any object that has iter() defined\n\n```python\nclass MyIterable:\n  def __init__(self, a):\n      self.a = a\n\n  def __iter__(self):\n      return iter(self.a)\n\n  def __contains__(self, el):\n      return el in self.a\n\n\nobj = MyIterable([1, 2, 3])\n[el for el in obj]  # [1, 2, 3]\n1 in obj  # True\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Collection"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Only required methods are iter() and len()")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class MyCollection:\n    def __init__(self, a):\n        self.a = a\n\n    def __iter__(self):\n        return iter(self.a)\n\n    def __contains__(self, el):\n        return el in self.a\n\n    def __len__(self):\n        return len(self.a)\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Sequence"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Only required methods are len() and getitem()"),(0,l.kt)("li",{parentName:"ul"},"Getitem() should return an item at index or raise IndexError"),(0,l.kt)("li",{parentName:"ul"},"Iter() and contains() automatically work on any object that has getitem() defined"),(0,l.kt)("li",{parentName:"ul"},"Reversed() automatically works on any object that has getitem() and len() defined")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class MySequence:\n    def __init__(self, a):\n        self.a = a\n\n    def __iter__(self):\n        return iter(self.a)\n\n    def __contains__(self, el):\n        return el in self.a\n\n    def __len__(self):\n        return len(self.a)\n\n    def __getitem__(self, i):\n        return self.a[i]\n\n    def __reversed__(self):\n        return reversed(self.a)\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ABC Sequence"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"It's a richer interface than the basic sequence"),(0,l.kt)("li",{parentName:"ul"},"Extending it generates iter(), contains(), reversed(), index() and count()"),(0,l.kt)("li",{parentName:"ul"},"Unlike 'abc.Iterable' and 'abc.Collection', it is not a duck type",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"That is why 'issubclass(MySequence, abc.Sequence)' would return False even if MySequence had all the methods defined")))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from collections import abc\n")))),(0,l.kt)("p",null,"  class MyAbcSequence(abc.Sequence):\ndef ",(0,l.kt)("strong",{parentName:"p"},"init"),"(self, a):\nself.a = a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"  def __len__(self):\n      return len(self.a)\n\n  def __getitem__(self, i):\n      return self.a[i]\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n- available special methods\n  - iter(), contains(), len(), getitem(), reversed(), index(), count()\n- Other ABCs that generate missing methods are: MutableSequence, Set, MutableSet, Mapping and MutableMapping\n- Names of their required methods are stored in `abc.__abstractmethods__`\n\n[back to top](#table-of-contents)\n\n### Enum\n\n- If there are no numeric values before auto(), it returns 1\n- Otherwise it returns an increment of the last numeric value\n\n```python\nfrom enum import Enum, auto\n\n\nclass enum_name(Enum):\n  member_name_1 = value_1\n  member_name_2 = value_2_a, value_2_b\n  member_name_3 = auto()\n\n\nmember = enum.member_name  # Returns a member\nmember = enum['member_name']  # Returns a member or raises KeyError\nmember = enum(value)  # Returns a member or raises ValueError\nstr = member.name  # Returns member's name\nobj = member.value  # Returns member's value\n\n\nlist_of_members = list(enum)\nmember_names = [a.name for a in enum]\nmember_values = [a.value for a in enum]\nrandom_member = random.choice(list(enum))\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_next_member(member):\n    members = list(member.__class__)\n    index = (members.index(member) + 1) % len(members)\n    return members[index]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Inline"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Cutlery = Enum('Cutlery', 'fork knife spoon')\nCutlery = Enum('Cutlery', ['fork', 'knife', 'spoon'])\nCutlery = Enum('Cutlery', {'fork': 1, 'knife': 2, 'spoon': 3})\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"User-defined functions cannot be values, so they must be wrapped"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Another solution in this particular case is to use built-in functions and",(0,l.kt)("em",{parentName:"li"},"() and or"),"() from the module operator")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from functools import partial\n")))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"LogicOp = Enum('LogicOp', {'AND': partial(lambda l, r: l and r),\n                           'OR' : partial(lambda l, r: l or r)})\n```\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"exception"},"Exception"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Basic Example"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"try:\n    code\nexcept exception:\n    code\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Complex Example"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Code inside the 'else' block will only be executed if 'try' block had no exception"),(0,l.kt)("li",{parentName:"ul"},"Code inside the 'finally' block will always be executed.")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"try:\n    code_1\nexcept exception_a:\n    code_2_a\nexcept exception_b:\n    code_2_b\nelse:\n    code_2_c\nfinally:\n    code_3\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Catching Exceptions"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Also catches subclasses of the exception"),(0,l.kt)("li",{parentName:"ul"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"traceback.print_exc()")," to print the error message to stderr")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"except exception:\nexcept exception as name:\nexcept (exception, ...):\nexcept (exception, ...) as name:\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Raising Exceptions"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"raise exception\nraise exception()\nraise exception(el [, ...])\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Re-raising caught exception",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"except exception as name:\n    ...\n    raise\n"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Exception Object"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"arguments = name.args\nexc_type = name.__class__\nfilename = name.__traceback__.tb_frame.f_code.co_filename\nfunc_name = name.__traceback__.tb_frame.f_code.co_name\nline = linecache.getline(filename, name.__traceback__.tb_lineno)\nerror_msg = traceback.format_exception(exc_type, name, name.__traceback__)\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Built-in Exceptions"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"BaseException\n \u251c\u2500\u2500 SystemExit                   # Raised by the sys.exit() function\n \u251c\u2500\u2500 KeyboardInterrupt            # Raised when the user hits the interrupt key (ctrl-c)\n \u2514\u2500\u2500 Exception                    # User-defined exceptions should be derived from this class\n      \u251c\u2500\u2500 ArithmeticError         # Base class for arithmetic errors\n      \u2502    \u2514\u2500\u2500 ZeroDivisionError  # Raised when dividing by zero\n      \u251c\u2500\u2500 AttributeError          # Raised when an attribute is missing\n      \u251c\u2500\u2500 EOFError                # Raised by input() when it hits end-of-file condition\n      \u251c\u2500\u2500 LookupError             # Raised when a look-up on a collection fails\n      \u2502    \u251c\u2500\u2500 IndexError         # Raised when a sequence index is out of range\n      \u2502    \u2514\u2500\u2500 KeyError           # Raised when a dictionary key or set element is not found\n      \u251c\u2500\u2500 NameError               # Raised when a variable name is not found\n      \u251c\u2500\u2500 OSError                 # Failures such as \u201cfile not found\u201d or \u201cdisk full\u201d\n      \u2502    \u2514\u2500\u2500 FileNotFoundError  # When a file or directory is requested but doesn't exist\n      \u251c\u2500\u2500 RuntimeError            # Raised by errors that don't fall in other categories\n      \u2502    \u2514\u2500\u2500 RecursionError     # Raised when the maximum recursion depth is exceeded\n      \u251c\u2500\u2500 StopIteration           # Raised by next() when run on an empty iterator\n      \u251c\u2500\u2500 TypeError               # Raised when an argument is of wrong type\n      \u2514\u2500\u2500 ValueError              # When an argument is of right type but inappropriate value\n           \u2514\u2500\u2500 UnicodeError       # Raised when encoding/decoding strings to/from bytes fails\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Collections and their exceptions"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"list"),(0,l.kt)("th",{parentName:"tr",align:null},"dict"),(0,l.kt)("th",{parentName:"tr",align:null},"set"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getitem()"),(0,l.kt)("td",{parentName:"tr",align:null},"IndexError"),(0,l.kt)("td",{parentName:"tr",align:null},"KeyError"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pop()"),(0,l.kt)("td",{parentName:"tr",align:null},"IndexError"),(0,l.kt)("td",{parentName:"tr",align:null},"KeyError"),(0,l.kt)("td",{parentName:"tr",align:null},"KeyError")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"remove()"),(0,l.kt)("td",{parentName:"tr",align:null},"ValueError"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"KeyError")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"index()"),(0,l.kt)("td",{parentName:"tr",align:null},"ValueError"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Useful built-in exceptions:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"raise TypeError('Argument is of wrong type!')\nraise ValueError('Argument is of right type but inappropriate value!')\nraise RuntimeError('None of above!')\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"User-defined Exceptions"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class MyError(Exception):\n    pass\n")))),(0,l.kt)("p",null,"  class MyInputError(MyError):\npass"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n[back to top](#table-of-contents)\n\n## System\n\n### Exit\n\n- Exits the interpreter by raising SystemExit exception\n\n```python\nimport sys\n\n\nsys.exit()  # Exits with exit code 0 (success)\nsys.exit(el)  # Prints to stderr and exits with 1\nsys.exit(int)  # Exits with passed exit code\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"print"},"Print"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"file=sys.stderr")," for messages about errors")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use `flush=True\u201c to forcibly flush the stream"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"print(el_1, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Pretty Print"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Levels deeper than 'depth' get replaced by '...'."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from pprint import pprint\n")))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pprint(collection, width=80, depth=None, compact=False, sort_dicts=True)\n```\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"input"},"Input"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Reads a line from user input or pipe if present",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Trailing newline gets stripped"),(0,l.kt)("li",{parentName:"ul"},"Prompt string is printed to the standard output before reading input"),(0,l.kt)("li",{parentName:"ul"},"Raises EOFError when user hits ",(0,l.kt)("inlineCode",{parentName:"li"},"EOF (ctrl-d/z)")," or input stream gets exhausted")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"str = input(prompt=None)\n")))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"command-line-arguments"},"Command Line Arguments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import sys\n\n\nscript_name = sys.argv[0]\narguments   = sys.argv[1:]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Argument Parser"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"help=str")," to set argument description")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"default=el")," to set the default value")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"type=FileType(mode)")," for files"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from argparse import ArgumentParser, FileType\n")))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"p = ArgumentParser(description=str)\np.add_argument('-short_name', '--name', action='store_true')  # Flag\np.add_argument('-short_name', '--name', type=type)  # Option\np.add_argument('name', type=type, nargs=1)  # First argument\np.add_argument('name', type=type, nargs='+')  # Remaining arguments\np.add_argument('name', type=type, nargs='*')  # Optional arguments\nargs = p.parse_args()  # Exits on error\nvalue = args.name\n```\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"open"},"Open"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Opens the file and returns a corresponding file object"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"encoding=None")," means that the default encoding is used, which is platform dependent",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Best practice is to use ",(0,l.kt)("inlineCode",{parentName:"li"},'encoding="utf-8"')," whenever possible"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"newline=None")," means all different end of line combinations are converted to '\\n' on read",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"while on write all ",(0,l.kt)("inlineCode",{parentName:"li"},"\\n")," characters are converted to system's default line separator"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'newline=""')," means no conversions take place",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"but input is still broken into chunks by readline() and readlines() on either ",(0,l.kt)("inlineCode",{parentName:"li"},"\\n"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"\\r")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"\\r\\n"))))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"file = open('path', mode='r', encoding=None, newline=None)\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Modes"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"r")," - Read (default)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"w")," - Write (truncate)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," - Write or fail if the file already exists"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"a")," - Append"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"w+")," - Read and write (truncate)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"r+")," - Read and write from the start"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"a+")," - Read and write from the end"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"t")," - Text mode (default)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"b")," - Binary mode"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Exceptions"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"FileNotFoundError")," can be raised when reading with ",(0,l.kt)("inlineCode",{parentName:"li"},"r")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"r+")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"FileExistsError")," can be raised when writing with ",(0,l.kt)("inlineCode",{parentName:"li"},"x")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"IsADirectoryError")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"PermissionError")," can be raised by any"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"OSError")," is the parent class of all listed exceptions"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"File Object"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Methods do not add or strip trailing newlines, even writelines()")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"file.seek(0)  # Moves to the start of the file\nfile.seek(offset)  # Moves \"offset\" chars/bytes from the start\nfile.seek(0, 2)  # Moves to the end of the file\nbin_file.seek(\xb1offset, anchor)  # Anchor: 0 start, 1 current position, 2 end\n\nstr/bytes = file.read(size=-1)  # Reads 'size' chars/bytes or until EOF\nstr/bytes = file.readline()  # Returns a line or empty string/bytes on EOF\nlist = file.readlines()  # Returns a list of remaining lines\nstr/bytes = next(file)  # Returns a line using buffer, do not mix\n\nfile.write(str/bytes)  # Writes a string or bytes object\nfile.writelines(collection)  # Writes a collection of strings or bytes objects\nfile.flush()  # Flushes write buffer\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Read Text from File"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def read_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return file.readlines()\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Write Text to File"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def write_to_file(filename, text):\n    with open(filename, 'w', encoding='utf-8') as file:\n        file.write(text)\n")))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"path"},"Path"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from os import getcwd, path, listdir\nfrom glob import glob\n\n\nstr = getcwd()  # Returns the current working directory\nstr = path.join(path, ...)  # Joins two or more pathname components\nstr = path.abspath(path)  # Returns absolute path\n\nstr = path.basename(path)  # Returns final component of the path\nstr = path.dirname(path)  # Returns path without the final component\ntup = path.splitext(path)  # Splits on last period of the final component\n\nlist = listdir(path='.')  # Returns filenames located at path\nlist = glob('pattern')  # Returns paths matching the wildcard pattern\n\nbool = path.exists(path)  # Or: Path.exists()\nbool = path.isfile(path)  # Or: DirEntry/Path.is_file()\nbool = path.isdir(path)  # Or: DirEntry/Path.is_dir()\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"DirEntry"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Using ",(0,l.kt)("inlineCode",{parentName:"li"},"scandir()")," instead of ",(0,l.kt)("inlineCode",{parentName:"li"},"listdir()")," can significantly increase the performance of code that also needs file type information")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from os import scandir\n")))),(0,l.kt)("p",null,"  iter = scandir(path='.')  # Returns DirEntry objects located at path\nstr = DirEntry.path  # Returns path as a string\nstr = DirEntry.name  # Returns final component as a string\nfile = open(DirEntry)  # Opens the file and returns file object"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n- Path Object\n\n```python\nfrom pathlib import Path\n\n\nPath = Path(path [, ...])  # Accepts strings, Paths and DirEntry objects\nPath = path / path [/ ...]  # One of the paths must be a Path object\n\nPath = Path()  # Returns relative cwd, also Path('.')\nPath = Path.cwd()  # Returns absolute cwd, also Path().resolve()\nPath = Path.resolve()  # Returns absolute Path without symlinks\n\nPath = Path.parent  # Returns Path without final component\nstr = Path.name  # Returns final component as a string\nstr = Path.stem  # Returns final component without extension\nstr = Path.suffix  # Returns final component's extension\ntup = Path.parts  # Returns all components as strings\n\niter = Path.iterdir()  # Returns dir contents as Path objects\niter = Path.glob('pattern')  # Returns Paths matching the wildcard pattern\n\nstr = str(Path)  # Returns path as a string\nfile = open(Path)  # Opens the file and returns file object\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"os-commands"},"OS Commands"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Files and Directories"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Paths can be either strings, Paths or DirEntry objects")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Functions report OS related errors by raising either OSError or one of its subclasses"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import os, shutil\n")))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"os.chdir(path)  # Changes the current working directory\nos.mkdir(path, mode=0o777)  # Creates a directory. Mode is in octal\n\nshutil.copy(from, to)  # Copies the file, 'to' can exist or be a dir\nshutil.copytree(from, to)  # Copies the directory, 'to' must not exist\n\nos.rename(from, to)  # Renames/moves the file or directory\nos.replace(from, to)  # Same, but overwrites 'to' if it exists\n\nos.remove(path)  # Deletes the file\nos.rmdir(path)  # Deletes the empty directory\nshutil.rmtree(path)  # Deletes the directory\n```\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Shell Commands"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import os\n")))),(0,l.kt)("p",null,"  str = os.popen('shell_command').read()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n- Sends '1 + 1' to the basic calculator and captures its output:\n\n```python\nfrom subprocess import run\n\n\nrun('bc', input='1 + 1\\n', capture_output=True, encoding='utf-8')  # CompletedProcess(args='bc', returncode=0, stdout='2\\n', stderr='')\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Sends test.in to the basic calculator running in standard mode and saves its output to test.out"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from shlex import split\n")))),(0,l.kt)("p",null,"  os.popen('echo 1 + 1  test.in')\nrun(split('bc -s'), stdin=open('test.in'), stdout=open('test.out', 'w'))  # CompletedProcess(args=","['bc', '-s']",", returncode=0)\nopen('test.out').read()  # '2\\n'"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n[back to top](#table-of-contents)\n\n## Data\n\n### JSON\n\n- Text file format for storing collections of strings and numbers\n\n```python\nimport json\n\n\nstr = json.dumps(object, ensure_ascii=True, indent=None)\nobject = json.loads(str)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Read Object from JSON File"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def read_json_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return json.load(file)\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Write Object to JSON File"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def write_to_json_file(filename, an_object):\n    with open(filename, 'w', encoding='utf-8') as file:\n        json.dump(an_object, file, ensure_ascii=False, indent=2)\n")))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"pickle"},"Pickle"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Binary file format for storing objects")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import pickle\n\n\nbytes = pickle.dumps(object)\nobject = pickle.loads(bytes)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Read Object from File"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def read_pickle_file(filename):\n    with open(filename, 'rb') as file:\n        return pickle.load(file)\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Write Object to File"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def write_to_pickle_file(filename, an_object):\n    with open(filename, 'wb') as file:\n        pickle.dump(an_object, file)\n")))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"csv"},"CSV"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Text file format for storing spreadsheets")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import csv\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Read"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"File must be opened with ",(0,l.kt)("inlineCode",{parentName:"li"},'newline=""')," argument, or newlines embedded inside quoted fields will not be interpreted correctly!")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"reader = csv.reader(file)  # Also: `dialect='excel', delimiter=','`\nlist = next(reader)  # Returns next row as a list of strings\nlist = list(reader)  # Returns list of remaining rows\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Write"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"File must be opened with ",(0,l.kt)("inlineCode",{parentName:"li"},'newline=""')," argument, or ",(0,l.kt)("inlineCode",{parentName:"li"},"\\r")," will be added in front of every ",(0,l.kt)("inlineCode",{parentName:"li"},"\\n")," on platforms that use ",(0,l.kt)("inlineCode",{parentName:"li"},"\\r\\n")," line endings!")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"writer = csv.writer(file)   # Also: `dialect='excel', delimiter=','`\nwriter.writerow(collection)  # Encodes objects using `str(el)`\nwriter.writerows(coll_of_coll)  # Appends multiple rows\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Parameters"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dialect")," - Master parameter that sets the default values"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"delimiter")," - A one-character string used to separate fields"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"quotechar")," - Character for quoting fields that contain special characters"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"doublequote")," - Whether quotechars inside fields get doubled or escaped"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"skipinitialspace")," - Whether whitespace after delimiter gets stripped"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"lineterminator")," - Specifies how writer terminates rows"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"quoting")," - Controls the amount of quoting: 0 - as necessary, 1 - all"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"escapechar")," - Character for escaping 'quotechar' if ",(0,l.kt)("inlineCode",{parentName:"li"},"doublequote")," is False"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Dialets"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"excel"),(0,l.kt)("th",{parentName:"tr",align:null},"excel-tab"),(0,l.kt)("th",{parentName:"tr",align:null},"unix"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"delimiter"),(0,l.kt)("td",{parentName:"tr",align:null},","),(0,l.kt)("td",{parentName:"tr",align:null},"\\t"),(0,l.kt)("td",{parentName:"tr",align:null},",")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"quotechar"),(0,l.kt)("td",{parentName:"tr",align:null},'"'),(0,l.kt)("td",{parentName:"tr",align:null},'"'),(0,l.kt)("td",{parentName:"tr",align:null},'"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"doublequote"),(0,l.kt)("td",{parentName:"tr",align:null},"True"),(0,l.kt)("td",{parentName:"tr",align:null},"True"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"skipinitialspace"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"lineterminator"),(0,l.kt)("td",{parentName:"tr",align:null},"\\r\\n"),(0,l.kt)("td",{parentName:"tr",align:null},"\\r\\n"),(0,l.kt)("td",{parentName:"tr",align:null},"\\n")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"quoting"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"escapechar"),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"None"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Read Rows from CSV File"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def read_csv_file(filename):\n    with open(filename, encoding='utf-8', newline='') as file:\n        return list(csv.reader(file))\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Write Rows to CSV File"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def write_to_csv_file(filename, rows):\n    with open(filename, 'w', encoding='utf-8', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(rows)\n")))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"sqlite"},"SQLite"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Server-less database engine that stores each database into a separate file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Connect"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Opens a connection to the database file"),(0,l.kt)("li",{parentName:"ul"},"Creates a new file if path doesn't exist")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import sqlite3\n")))),(0,l.kt)("p",null,"  con = sqlite3.connect('path')  # Also ':memory:'\ncon.close()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n- Read\n\n- Returned values can be of type str, int, float, bytes or None\n\n```python\ncursor = con.execute('query')  # Can raise a subclass of sqlite3.Error\ntuple = cursor.fetchone()  # Returns next row. Also next(cursor)\nlist = cursor.fetchall()  # Returns remaining rows. Also list(cursor)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Write"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"con.execute('query')\ncon.commit()\n\n# or\nwith con:\n    con.execute('query')\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Placeholders"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Passed values can be of type str, int, float, bytes, None, bool, datetime.date or datetime.datetme"),(0,l.kt)("li",{parentName:"ul"},"Bools will be stored and returned as ints and dates as ISO formatted strings")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"con.execute('query', list/tuple)  # Replaces '?'s in query with values\ncon.execute('query', dict/namedtuple)  # Replaces ':key's with values\ncon.executemany('query', coll_of_above)  # Runs execute() many times\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"In this example values are not actually saved because ",(0,l.kt)("inlineCode",{parentName:"p"},"con.commit()")," is omitted!"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import sqlite3\n")))),(0,l.kt)("p",null,"  con = sqlite3.connect('test.db')"),(0,l.kt)("p",null,"  con.execute('create table person (person_id integer primary key, name, height)')\ncon.execute('insert into person values (null, ?, ?)', ('Jean-Luc', 187)).lastrowid  # 1\ncon.execute('select * from person').fetchall()  #","[(1, 'Jean-Luc', 187)]"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n[back to top](#table-of-contents)\n\n### MySQL\n\n- Has a very similar interface with SQLite, but with differences listed below\n\n- `pip3 install mysql-connector`\n\n```python\nfrom mysql import connector\n\n\ncon = connector.connect(host=str, ...)  # `user=str, password=str, database=str\ncursor = con.cursor()  # Only cursor has execute method\n\ncursor.execute('query')  # Can raise a subclass of connector.Error\ncursor.execute('query', list/tuple)  # Replaces '%s's in query with values\ncursor.execute('query', dict/namedtuple)  # Replaces '%(key)s's with values\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"bytes"},"Bytes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Bytes object is an immutable sequence of single bytes"),(0,l.kt)("li",{parentName:"ul"},"Mutable version is called bytearray")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"bytes = b'str'  # Only accepts ASCII characters and \\x00 - \\xff\nint = bytes[index]  # Returns int in range from 0 to 255\nbytes = bytes[slice]  # Returns bytes even if it has only one element\nbytes = bytes.join(coll_of_bytes)  # Joins elements using bytes object as separator\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Encode"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"bytes = bytes(coll_of_ints)  # Ints must be in range from 0 to 255\nbytes = bytes(str, 'utf-8')  # Or: str.encode('utf-8')\nbytes = int.to_bytes(n_bytes, ...)  # `byteorder='big/little', signed=False`\nbytes = bytes.fromhex('hex')  # Hex numbers can be separated by spaces\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Decode"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"list = list(bytes)  # Returns ints in range from 0 to 255\nstr = str(bytes, 'utf-8')  # Or: bytes.decode('utf-8')\nint = int.from_bytes(bytes, ...)  # `byteorder='big/little', signed=False`\n'hex' = bytes.hex()  # Returns a string of hexadecimal numbers\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Read Bytes from File"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def read_bytes(filename):\n    with open(filename, 'rb') as file:\n        return file.read()\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Write Bytes to File"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def write_bytes(filename, bytes_obj):\n    with open(filename, 'wb') as file:\n        file.write(bytes_obj)\n")))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"struct"},"Struct"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Module that performs conversions between a sequence of numbers and a bytes object"),(0,l.kt)("li",{parentName:"ul"},"Machine\u2019s native type sizes and byte order are used by default")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from struct import pack, unpack, iter_unpack\n\n\nbytes = pack('format', num_1 [, num_2, ...])\ntuple = unpack('format', bytes)\ntuples = iter_unpack('format', bytes)\n\n# example\npack('hhl', 1, 2, 3)  # b'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03'\nunpack('hhl', b'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03')  # (1, 2, 3)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Format",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"For standard type sizes start format string with:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"=")," - native byte order"),(0,l.kt)("li",{parentName:"ul"},"`` - little-endian"),(0,l.kt)("li",{parentName:"ul"},"`` - big-endian (also '!')"))),(0,l.kt)("li",{parentName:"ul"},"Integer types. Use a capital letter for unsigned type. Standard sizes are in brackets:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," - pad byte 'b' - char (1)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"h")," - short (2) 'i' - int (4)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"l")," - long (4)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"q")," - long long (8)"))),(0,l.kt)("li",{parentName:"ul"},"Floating point types:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"f")," - float (4)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"d")," - double (8)")))))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"array"},"Array"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"List that can only hold numbers of a predefined type"),(0,l.kt)("li",{parentName:"ul"},"Available types and their sizes in bytes are listed above")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from array import array\n\n\narray = array('typecode', collection)  # Array from collection of numbers\narray = array('typecode', bytes)  # Array from bytes object\narray = array('typecode', array)  # Treats array as a sequence of numbers\nbytes = bytes(array)  # Or: array.tobytes()\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"memory-view"},"Memory View"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A sequence object that points to the memory of another object"),(0,l.kt)("li",{parentName:"ul"},"Each element can reference a single or multiple consecutive bytes, depending on format"),(0,l.kt)("li",{parentName:"ul"},"Order and number of elements can be changed with slicing.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"mview = memoryview(bytes/bytearray/array)  # Immutable if bytes, else mutable\nreal = mview[index]  # Returns an int or a float\nmview = mview[slice]  # Mview with rearranged elements\nmview = mview.cast('typecode')  # Casts memoryview to the new format\nmview.release()  # Releases the object's memory buffer\n\nbin_file.write(mview)  # Writes mview to the binary file\nbytes = bytes(mview)  # Creates a new bytes object\nbytes = bytes.join(coll_of_mviews)  # Joins mviews using bytes object as sep\narray = array('typecode', mview)  # Treats mview as a sequence of numbers\n\nlist  = list(mview)  # Returns list of ints or floats\nstr = str(mview, 'utf-8')  # Treats mview as a bytes object\nint = int.from_bytes(mview, ...)  # `byteorder='big/little', signed=False`\n'hex' = mview.hex()  # Treats mview as a bytes object\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"deque"},"Deque"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'A thread-safe list with efficient appends and pops from either side. Pronounced "deck"')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\n\ndeque = deque(collection, maxlen=None)\n\ndeque.appendleft(el)  # Opposite element is dropped if full\ndeque.extendleft(collection)  # Collection gets reversed\nel = deque.popleft()  # Raises IndexError if empty\ndeque.rotate(n=1)  # Rotates elements to the right\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h2",{id:"advanced"},"Advanced"),(0,l.kt)("h3",{id:"threading"},"Threading"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"CPython interpreter can only run a single thread at a time"),(0,l.kt)("li",{parentName:"ul"},"That is why using multiple threads won't result in a faster execution, unless at least one of the threads contains an I/O operation")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from threading import Thread, RLock, Semaphore, Event, Barrier\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Thread"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"kwargs=dict")," to pass keyword arguments to the function"),(0,l.kt)("li",{parentName:"ul"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"daemon=True"),", or the program will not be able to exit while the thread is alive")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Thread = Thread(target=function)  # Use `args=collection` to set arguments\nThread.start()  # Starts the thread\nbool = Thread.is_alive()  # Checks if thread has finished executing\nThread.join()  # Waits for thread to finish\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Lock"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"lock = RLock()\nlock.acquire()  # Waits for lock to be available\nlock.release()  # Makes the lock available again\n\n# Or\nlock = RLock()\nwith lock:\n    ...\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Semaphore, Event, Barrier"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Semaphore = Semaphore(value=1)  # Lock that can be acquired 'value' times\nEvent = Event()  # Method wait() blocks until set() is called\nBarrier = Barrier(n_times)  # Method wait() blocks until it's called 'n_times'\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Thread Pool Executor"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from concurrent.futures import ThreadPoolExecutor\n")))),(0,l.kt)("p",null,"  with ThreadPoolExecutor(max_workers=None) as executor:  # Does not exit until done\niter = executor.map(lambda x: x + 1, range(3))  # (1, 2, 3)\niter = executor.map(lambda x, y: x + y, 'abc', '123')  # ('a1', 'b2', 'c3')\nFuture = executor.submit(function ","[, arg_1, ...]",")  # Also visible outside block"),(0,l.kt)("h1",{id:"future"},"Future"),(0,l.kt)("p",null,"  bool = Future.done()  # Checks if thread has finished executing\nobj = Future.result()  # Waits for thread to finish and returns result"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n- Queue\n- A thread-safe FIFO queue\n- For LIFO queue use LifoQueue\n\n```python\nfrom queue import Queue\n\n\nQueue = Queue(maxsize=0)\n\nQueue.put(el)  # Blocks until queue stops being full\nQueue.put_nowait(el)  # Raises queue.Full exception if full\nel = Queue.get()  # Blocks until queue stops being empty\nel = Queue.get_nowait()  # Raises queue. Empty exception if empty\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"operator"},"Operator"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Module of functions that provide the functionality of operators")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from operator import add, sub, mul, truediv, floordiv, mod, pow, neg, abs\nfrom operator import eq, ne, lt, le, gt, ge\nfrom operator import and_, or_, not_\nfrom operator import itemgetter, attrgetter, methodcaller\nimport operator as op\n\n\nelementwise_sum  = map(op.add, list_a, list_b)\nsorted_by_second = sorted(collection, key=op.itemgetter(1))\nsorted_by_both = sorted(collection, key=op.itemgetter(1, 0))\nproduct_of_elems = functools.reduce(op.mul, collection)\nLogicOp = enum.Enum('LogicOp', {'AND': op.and_, 'OR' : op.or_})\nlast_el = op.methodcaller('pop')(list)\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"introspection"},"Introspection"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Inspecting code at runtime")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Variables"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"list = dir()  # Names of local variables (incl. functions)\ndict = vars()  # Dict of local variables. Also locals()\ndict = globals()  # Dict of global variables\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Attributes"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"list = dir(object)  # Names of object's attributes (incl. methods)\ndict = vars(object)  # Dict of object's fields. Also obj.__dict__\nbool = hasattr(object, 'attr_name')  # Checks if getattr() raises an error\nvalue  = getattr(object, 'attr_name')  # Raises AttributeError if attribute is missing\nsetattr(object, 'attr_name', value)    # Only works on objects with __dict__ attribute\ndelattr(object, 'attr_name')           # Equivalent to `del object.attr_name`\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Parameters"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from inspect import signature\n")))),(0,l.kt)("p",null,"  sig = signature(function)\nno_of_params = len(sig.parameters)\nparam_names = list(sig.parameters.keys())\nparam_kinds = ","[a.kind for a in sig.parameters.values()]"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n[back to top](#table-of-contents)\n\n### Metaprogramming\n\n- Code that generates code\n- Type\n\n- Type is the root class\n- If only passed an object it returns its type (class)\n  - Otherwise it creates a new class\n\n```python\nclass = type('class_name', parents_tuple, attributes_dict)\n\nZ = type('Z', (), {'a': 'abcde', 'b': 12345})\nz = Z()\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Meta Class"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"A class that creates classes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"New()")," is a class method that gets called before init()",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If it returns an instance of its class, then that instance gets passed to init() as a 'self' argument"),(0,l.kt)("li",{parentName:"ul"},"It receives the same arguments as init(), except for the first one that specifies the desired type of the returned instance (MyMetaClass in our case)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"new()")," can also be called directly, usually from a ",(0,l.kt)("inlineCode",{parentName:"li"},"new()")," method of a child class (",(0,l.kt)("inlineCode",{parentName:"li"},"def __new__(cls): return super().__new__(cls)"),")"),(0,l.kt)("li",{parentName:"ul"},"The only difference between the examples above is that ",(0,l.kt)("inlineCode",{parentName:"li"},"my_meta_class()")," returns a class of type ",(0,l.kt)("inlineCode",{parentName:"li"},"type"),", while ",(0,l.kt)("inlineCode",{parentName:"li"},"MyMetaClass()")," returns a class of type ",(0,l.kt)("inlineCode",{parentName:"li"},"MyMetaClass"))))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def my_meta_class(name, parents, attrs):\n      attrs['a'] = 'abcde'\n      return type(name, parents, attrs)\n\n# or\nclass MyMetaClass(type):\n    def __new__(cls, name, parents, attrs):\n        attrs['a'] = 'abcde'\n        return type.__new__(cls, name, parents, attrs)\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Metaclass Attribute"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Right before a class is created it checks if it has the 'metaclass' attribute defined"),(0,l.kt)("li",{parentName:"ul"},"If not, it recursively checks if any of his parents has it defined and eventually comes to type()")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class MyClass(metaclass=MyMetaClass):\n    b = 12345\n")))),(0,l.kt)("p",null,"  MyClass.a, MyClass.b  # ('abcde', 12345)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n- Type Diagram\n\n```python\ntype(MyClass) == MyMetaClass  # MyClass is an instance of MyMetaClass\ntype(MyMetaClass) == type  # MyMetaClass is an instance of type\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Inheritance Diagram")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"MyClass.__base__ == object  # MyClass is a subclass of object\nMyMetaClass.__base__ == type  # MyMetaClass is a subclass of type\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"eval"},"Eval"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from ast import literal_eval\n\n\nliteral_eval('1 + 2')  # 3\nliteral_eval('[1, 2, 3]')  # [1, 2, 3]\nliteral_eval('abs(1)')  # ValueError: malformed node or string\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"coroutine"},"Coroutine"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Coroutines have a lot in common with threads, but unlike threads, they only give up control when they call another coroutine and they don\u2019t use as much memory"),(0,l.kt)("li",{parentName:"ul"},"Coroutine definition starts with ",(0,l.kt)("inlineCode",{parentName:"li"},"async")," and its call with ",(0,l.kt)("inlineCode",{parentName:"li"},"await")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"asyncio.run(coroutine)")," is the main entry point for asynchronous programs"),(0,l.kt)("li",{parentName:"ul"},"Functions wait(), gather() and as_completed() can be used when multiple coroutines need to be started at the same time"),(0,l.kt)("li",{parentName:"ul"},"Asyncio module also provides its own Queue, Event, Lock and Semaphore classes"),(0,l.kt)("li",{parentName:"ul"},"Example",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Runs a terminal game where you control an asterisk that must avoid numbers:")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import asyncio, collections, curses, enum, random\n\n\nP = collections.namedtuple('P', 'x y')  # Position\nD = enum.Enum('D', 'n e s w')  # Direction\n\ndef main(screen):\n    curses.curs_set(0)  # Makes cursor invisible\n    screen.nodelay(True)  # Makes getch() non-blocking\n    asyncio.run(main_coroutine(screen))  # Starts running asyncio code\n\n\nasync def main_coroutine(screen):\n    state = {'*': P(0, 0), **{id_: P(30, 10) for id_ in range(10)}}\n    moves = asyncio.Queue()\n    coros = (*(random_controller(id_, moves) for id_ in range(10)),\n             human_controller(screen, moves),\n             model(moves, state, *screen.getmaxyx()),\n             view(state, screen))\n    await asyncio.wait(coros, return_when=asyncio.FIRST_COMPLETED)\n\n\nasync def random_controller(id_, moves):\n    while True:\n        moves.put_nowait((id_, random.choice(list(D))))\n        await asyncio.sleep(random.random() / 2)\n\n\nasync def human_controller(screen, moves):\n    while True:\n        ch = screen.getch()\n        key_mappings = {259: D.n, 261: D.e, 258: D.s, 260: D.w}\n        if ch in key_mappings:\n            moves.put_nowait(('*', key_mappings[ch]))\n        await asyncio.sleep(0.01)\n\n\nasync def model(moves, state, height, width):\n    while state['*'] not in {p for id_, p in state.items() if id_ != '*'}:\n        id_, d = await moves.get()\n        p      = state[id_]\n        deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}\n        new_p  = P(*[sum(a) for a in zip(p, deltas[d])])\n        if 0 = new_p.x  width-1 and 0 = new_p.y  height:\n            state[id_] = new_p\n\n\nasync def view(state, screen):\n    while True:\n        screen.clear()\n        for id_, p in state.items():\n            screen.addstr(p.y, p.x, str(id_))\n        await asyncio.sleep(0.01)\n\n\ncurses.wrapper(main)\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h2",{id:"libraries"},"Libraries"),(0,l.kt)("h3",{id:"progress-bar"},"Progress Bar"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install tqdm"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from tqdm import tqdm\nfrom time import sleep\n\n\nfor el in tqdm([1, 2, 3]):\n    sleep(0.2)\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"plot"},"Plot"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install matplotlib"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from matplotlib import pyplot\n\n\npyplot.plot(y_data [, label=str])\npyplot.plot(x_data, y_data)\npyplot.legend()  # Adds a legend\npyplot.savefig('path')  # Saves the figure\npyplot.show()  # Displays the figure\npyplot.clf()  # Clears the figure\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"table"},"Table"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Prints a CSV file as an ASCII table:"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install tabulate"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import csv, tabulate\n\n\nwith open('test.csv', encoding='utf-8', newline='') as file:\n    rows = csv.reader(file)\n    header = [a.title() for a in next(rows)]\n    table = tabulate.tabulate(rows, header)\n    print(table)\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"curses"},"Curses"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Clears the terminal, prints a message and waits for the ESC key press:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from curses import wrapper, curs_set, ascii\nfrom curses import KEY_UP, KEY_RIGHT, KEY_DOWN, KEY_LEFT\n\n\ndef main():\n    wrapper(draw)\n\n\ndef draw(screen):\n    curs_set(0)  # Makes cursor invisible\n    screen.nodelay(True)  # Makes getch() non-blocking\n    screen.clear()\n    screen.addstr(0, 0, 'Press ESC to quit.')  # Coordinates are y, x\n    while screen.getch() != ascii.ESC:\n      pass\n\n\ndef get_border(screen):\n    from collections import namedtuple\n    P = namedtuple('P', 'x y')\n    height, width = screen.getmaxyx()\n    return P(width-1, height-1)\n\n\nif __name__ == '__main__':\n    main()\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"logging"},"Logging"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install loguru")),(0,l.kt)("li",{parentName:"ul"},"Levels: ",(0,l.kt)("inlineCode",{parentName:"li"},"debug"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"info"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"success"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"warning"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"error"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"critical"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from loguru import logger\n\n\nlogger.add('debug_{time}.log', colorize=True)  # Connects a log file\nlogger.add('error_{time}.log', level='ERROR')  # Another file for errors or higher\nlogger.level('A logging message.')\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Exceptions"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Exception description, stack trace and values of variables are appended automatically")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"try:\n    ...\nexcept exception:\n    logger.exception('An error happened.')\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Rotation"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Argument that sets a condition when a new log file is created"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"int")," - Max file size in bytes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"timedelta")," - Max age of a file"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"time")," - Time of day"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - Any of above as a string: '100 MB', '1 month', 'monday at 12:00', ...")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"rotation = int|datetime.timedelta|datetime.time|str\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Retention"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Sets a condition which old log files get deleted"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"int")," - Max number of files"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"timedelta")," - Max age of a file"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - Max age as a string: '1 week, 3 days', '2 months', ...")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"retention = int|datetime.timedelta|str\n")))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"scraping"},"Scraping"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Scrapes Python's URL, version number and logo from Wikipedia page:"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install requests beautifulsoup4"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests, sys\nfrom bs4 import BeautifulSoup\n\n\nURL = 'https://en.wikipedia.org/wiki/Python_(programming_language)'\n\ntry:\n    html  = requests.get(URL).text\n    doc   = BeautifulSoup(html, 'html.parser')\n    table = doc.find('table', class_='infobox vevent')\n    rows  = table.find_all('tr')\n    link  = rows[11].find('a')['href']\n    ver   = rows[6].find('div').text.split()[0]\n    url_i = rows[0].find('img')['src']\n    image = requests.get(f'https:{url_i}').content\n    with open('test.png', 'wb') as file:\n        file.write(image)\n    print(link, ver)\nexcept requests.exceptions.ConnectionError:\n    print(\"You've got problems with connection.\", file=sys.stderr)\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"web"},"Web"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install bottle"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from bottle import run, route, static_file, template, post, request, response\nimport json\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Run"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"run(host='localhost', port=8080)  # Runs locally\nrun(host='0.0.0.0', port=80)  # Runs globally\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Static Request"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@route('/img/image')\ndef send_image(image):\n    return static_file(image, 'img_dir/', mimetype='image/png')\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Dynamic Request"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@route('/sport')\ndef send_page(sport):\n    return template('h1{{title}}/h1', title=sport)\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"REST Request"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@post('/odds/sport')\ndef odds_handler(sport):\n    team = request.forms.get('team')\n    home_odds, away_odds = 2.44, 3.29\n    response.headers['Content-Type'] = 'application/json'\n    response.headers['Cache-Control'] = 'no-cache'\n    return json.dumps([team, home_odds, away_odds])\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Test"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install requests"))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\n\n\nurl = 'http://localhost:8080/odds/football'\ndata = {'team': 'arsenal f.c.'}\nresponse = requests.post(url, data=data)\nresponse.json()  # ['arsenal f.c.', 2.44, 3.29]\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"profile"},"Profile"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Stopwatch"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from time import time\n")))),(0,l.kt)("p",null,"  start_time = time()  # Seconds since the Epoch\n...\nduration = time() - start_time"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n- High performance\n\n```python\nfrom time import perf_counter\n\n\nstart_time = perf_counter()  # Seconds since restart\n...\nduration = perf_counter() - start_time\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Timing a Snippet")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from timeit import timeit\n\n\ntimeit('\"-\".join(str(a) for a in range(100))', ... , number=10000, globals=globals(), setup='pass')  # 0.34986\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Profiling by Line"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install line_profiler memory_profiler"))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@profile\ndef main():\n    a = [*range(10000)]\n    b = {*range(10000)}\nmain()\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"kernprof -lv test.py")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"python3 -m memory_profiler test.py")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Call Graph"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Generates a PNG image of a call graph with highlighted bottlenecks"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install pycallgraph"))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from pycallgraph import output, PyCallGraph\nfrom datetime import datetime\n")))),(0,l.kt)("p",null,"  time_str = datetime.now().strftime('%Y%m%d%H%M%S')\nfilename = f'profile-{time_str}.png'\ndrawer = output.GraphvizOutput(output_file=filename)\nwith PyCallGraph(drawer):\ncode_to_be_profiled"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n[back to top](#table-of-contents)\n\n### NumPy\n\n- `pip3 install numpy`\n- Array manipulation mini-language\n- It can run up to one hundred times faster than the equivalent Python code\n- Shape is a tuple of dimension sizes\n- Axis is the index of a dimension that gets collapsed\n- The leftmost dimension has index 0\n\n```python\nimport numpy as np\n\n\narray = np.array(list)\narray = np.arange(from_inclusive, to_exclusive, \xb1step_size)\narray = np.ones(shape)\narray = np.random.randint(from_inclusive, to_exclusive, shape)\narray.shape = shape\nview = array.reshape(shape)\nview = np.broadcast_to(array, shape)\narray = array.sum(axis)\nindexes = array.argmin(axis)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Indexing"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If row and column indexes differ in shape, they are combined with broadcasting")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"el = 2d_array[0, 0]  # First element\n1d_view = 2d_array[0]  # First row\n1d_view = 2d_array[:, 0]  # First column. Also [..., 0]\n3d_view = 2d_array[None, :, :]  # Expanded by dimension of size 1\n\n1d_array = 2d_array[1d_row_indexes, 1d_column_indexes]\n2d_array = 2d_array[2d_row_indexes, 2d_column_indexes]\n2d_bools = 2d_array  0\n1d_array = 2d_array[2d_bools]\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Broadcasting"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Broadcasting is a set of rules by which NumPy functions operate on arrays of different sizes and/or dimensions")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"left = [[0.1], [0.6], [0.8]]  # Shape: (3, 1)\nright = [ 0.1 ,  0.6 ,  0.8 ]  # Shape: (3)\n")),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"If array shapes differ in length, left-pad the shorter shape with ones"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"left = [[0.1], [0.6], [0.8]]  # Shape: (3, 1)\nright = [[0.1 ,  0.6 ,  0.8]]  # Shape: (1, 3) - !\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"If any dimensions differ in size, expand the ones that have size 1 by duplicating their elements"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"left = [[0.1, 0.1, 0.1], [0.6, 0.6, 0.6], [0.8, 0.8, 0.8]]  # Shape: (3, 3) - !\nright = [[0.1, 0.6, 0.8], [0.1, 0.6, 0.8], [0.1, 0.6, 0.8]]  # Shape: (3, 3) - !\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"If neither non-matching dimension has size 1, raise an error"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Example: For each point returns index of its nearest point (","[0.1, 0.6, 0.8]"," = ","[1, 2, 1]",")"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'points = np.array([0.1, 0.6, 0.8])  # [ 0.1,  0.6,  0.8]\n\nwrapped_points = points.reshape(3, 1)\n"""\n[[ 0.1],\n[ 0.6],\n [ 0.8]]\n"""\n\ndistances = wrapped_points - points\n"""\n[[ 0. , -0.5, -0.7],\n [ 0.5,  0. , -0.2],\n [ 0.7,  0.2,  0. ]]\n"""\n\ndistances = np.abs(distances)\n"""\n[[ 0. ,  0.5,  0.7],\n [ 0.5,  0. ,  0.2],\n [ 0.7,  0.2,  0. ]]\n"""\n\ni = np.arange(3)  # [0, 1, 2]\n\ndistances[i, i] = np.inf\n"""\n[[ inf,  0.5,  0.7],\n [ 0.5,  inf,  0.2],\n [ 0.7,  0.2,  inf]]\n"""\n\ndistances.argmin(1)  # [1, 2, 1]\n')))))))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"image"},"Image"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install pillow"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from PIL import Image\n\n\nImage = Image.new('mode', (width, height))\nImage = Image.open('path')\nImage = Image.convert('mode')\nImage.save('path')\nImage.show()\n\ntuple/int = Image.getpixel((x, y))  # Returns a pixel\nImage.putpixel((x, y), tuple/int)  # Writes a pixel to the image\nImagingCore = Image.getdata()  # Returns a sequence of pixels\nImage.putdata(list/ImagingCore)  # Writes a sequence of pixels\nImage.paste(Image, (x, y))  # Writes an image to the image\n\n2d_array = np.array(Image)  # Creates NumPy array from greyscale image\n3d_array = np.array(Image)  # Creates NumPy array from color image\nImage = Image.fromarray(array)  # Creates image from NumPy array of floats\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Modes"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1")," - 1-bit pixels, black and white, stored with one pixel per byte"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"L")," - 8-bit pixels, greyscale"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RGB")," - 3x8-bit pixels, true color"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RGBA")," - 4x8-bit pixels, true color with transparency mask"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"HSV")," - 3x8-bit pixels, Hue, Saturation, Value color space"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Examples"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Creates a PNG image of a rainbow gradient"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"WIDTH, HEIGHT = 100, 100\nsize = WIDTH * HEIGHT\nhues = [255 * i/size for i in range(size)]\nimg = Image.new('HSV', (WIDTH, HEIGHT))\nimg.putdata([(int(h), 255, 255) for h in hues])\nimg.convert('RGB').save('test.png')\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Adds noise to a PNG image"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from random import randint\n")))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"add_noise = lambda value: max(0, min(255, value + randint(-20, 20)))\nimg = Image.open('test.png').convert('HSV')\nimg.putdata([(add_noise(h), s, v) for h, s, v in img.getdata()])\nimg.convert('RGB').save('test.png')\n```\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Drawing"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"fill=color")," to set the primary color"),(0,l.kt)("li",{parentName:"ul"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"outline=color")," to set the secondary color"),(0,l.kt)("li",{parentName:"ul"},"Color can be specified as a tuple, int, ",(0,l.kt)("inlineCode",{parentName:"li"},"#rrggbb")," string or a color name")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from PIL import ImageDraw\n")))),(0,l.kt)("p",null,"  ImageDraw = ImageDraw.Draw(Image)\nImageDraw.point((x, y), fill=None)\nImageDraw.line((x1, y1, x2, y2 ","[, ...]","), fill=None, width=0, joint=None)\nImageDraw.arc((x1, y1, x2, y2), from_deg, to_deg, fill=None, width=0)\nImageDraw.rectangle((x1, y1, x2, y2), fill=None, outline=None, width=0)\nImageDraw.polygon((x1, y1, x2, y2 ","[, ...]","), fill=None, outline=None)\nImageDraw.ellipse((x1, y1, x2, y2), fill=None, outline=None, width=0)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n[back to top](#table-of-contents)\n\n### Animation\n\n- `pip3 install pillow imageio`\n- Creates a GIF of a bouncing ball\n\n```python\nfrom PIL import Image, ImageDraw\nimport imageio\n\n\nWIDTH, R = 126, 10\nframes = []\n\nfor velocity in range(15):\n    y = sum(range(velocity+1))\n    frame = Image.new('L', (WIDTH, WIDTH))\n    draw  = ImageDraw.Draw(frame)\n    draw.ellipse((WIDTH/2-R, y, WIDTH/2+R, y+R*2), fill='white')\n    frames.append(frame)\n\nframes += reversed(frames[1:-1])\nimageio.mimsave('test.gif', frames, duration=0.03)\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"audio"},"Audio"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Bytes object contains a sequence of frames, each consisting of one or more samples"),(0,l.kt)("li",{parentName:"ul"},"In a stereo signal, the first sample of a frame belongs to the left channel"),(0,l.kt)("li",{parentName:"ul"},"Each sample consists of one or more bytes that, when converted to an integer, indicate the displacement of a speaker membrane at a given moment"),(0,l.kt)("li",{parentName:"ul"},"If sample width is one, then the integer should be encoded unsigned"),(0,l.kt)("li",{parentName:"ul"},"For all other sizes, the integer should be encoded signed with little-endian byte order")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import wave\n\n\nWave_read = wave.open('path', 'rb')  # Opens the WAV file\nframerate = Wave_read.getframerate()  # Number of frames per second\nnchannels = Wave_read.getnchannels()  # Number of samples per frame\nsampwidth = Wave_read.getsampwidth()  # Sample size in bytes\nnframes = Wave_read.getnframes()  # Number of frames\nparams = Wave_read.getparams()  # Immutable collection of above\nbytes = Wave_read.readframes(nframes)  # Returns next 'nframes' frames\n\nWave_write = wave.open('path', 'wb')  # Truncates existing file\nWave_write.setframerate(int)  # 44100 for CD, 48000 for video\nWave_write.setnchannels(int)  # 1 for mono, 2 for stereo\nWave_write.setsampwidth(int)  # 2 for CD quality sound\nWave_write.setparams(params)  # Sets all parameters\nWave_write.writeframes(bytes)  # Appends frames to the file\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Sample Values"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"sampwidth"),(0,l.kt)("th",{parentName:"tr",align:null},"min"),(0,l.kt)("th",{parentName:"tr",align:null},"zero"),(0,l.kt)("th",{parentName:"tr",align:null},"max"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"128"),(0,l.kt)("td",{parentName:"tr",align:null},"255")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"-32768"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"32767")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"-8388608"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"8388607")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"-2147483648"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"2147483647"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Read Float Samples from WAV File"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def read_wav_file(filename):\n    def get_int(a_bytes):\n        an_int = int.from_bytes(a_bytes, 'little', signed=width!=1)\n        return an_int - 128 * (width == 1)\n    with wave.open(filename, 'rb') as file:\n        width  = file.getsampwidth()\n        frames = file.readframes(-1)\n    byte_samples = (frames[i: i + width] for i in range(0, len(frames), width))\n    return [get_int(b) / pow(2, width * 8 - 1) for b in byte_samples]\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Write Float Samples to WAV File"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def write_to_wav_file(filename, float_samples, nchannels=1, sampwidth=2, framerate=44100):\n    def get_bytes(a_float):\n        a_float = max(-1, min(1 - 2e-16, a_float))\n        a_float += sampwidth == 1\n        a_float *= pow(2, sampwidth * 8 - 1)\n        return int(a_float).to_bytes(sampwidth, 'little', signed=sampwidth!=1)\n    with wave.open(filename, 'wb') as file:\n        file.setnchannels(nchannels)\n        file.setsampwidth(sampwidth)\n        file.setframerate(framerate)\n        file.writeframes(b''.join(get_bytes(f) for f in float_samples))\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Examples"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Saves a sine wave to a mono WAV file"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from math import pi, sin\n")))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"samples_f = (sin(i * 2 * pi * 440 / 44100) for i in range(100000))\nwrite_to_wav_file('test.wav', samples_f)\n```\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Adds noise to a mono WAV file"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from random import random\n")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"add_noise = lambda value: value + (random() - 0.5) * 0.03\nsamples_f = (add_noise(f) for f in read_wav_file('test.wav'))\nwrite_to_wav_file('test.wav', samples_f)\n```\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Plays a WAV file"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install simpleaudio"))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from simpleaudio import play_buffer\n")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"with wave.open('test.wav', 'rb') as file:\n    p = file.getparams()\n    frames = file.readframes(-1)\n    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate)\n```\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Text to Speech"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install pyttsx3"))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import pyttsx3\n")))),(0,l.kt)("p",null,"  engine = pyttsx3.init()\nengine.say('Sally sells seashells by the seashore.')\nengine.runAndWait()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n[back to top](#table-of-contents)\n\n### Synthesizer\n\n- Plays Popcorn by Gershon Kingsley\n\n- `pip3 install simpleaudio`\n\n```python\nimport simpleaudio, math, struct\nfrom itertools import chain, repeat\n\n\nF = 44100\nP1 = '71\u266a,69,,71\u266a,66,,62\u266a,66,,59\u266a,,,'\nP2 = '71\u266a,73,,74\u266a,73,,74,,71,,73\u266a,71,,73,,69,,71\u266a,69,,71,,67,,71\u266a,,,'\n\nget_pause = lambda seconds: repeat(0, int(seconds * F))\n\nsin_f = lambda i, hz: math.sin(i * 2 * math.pi * hz / F)\n\nget_wave = lambda hz, seconds: (sin_f(i, hz) for i in range(int(seconds * F)))\n\nget_hz = lambda key: 8.176 * 2 ** (int(key) / 12)\n\nparse_note = lambda note: (get_hz(note[:2]), 0.25 if '\u266a' in note else 0.125)\n\nget_samples = lambda note: get_wave(*parse_note(note)) if note else get_pause(0.125)\n\nsamples_f = chain.from_iterable(get_samples(n) for n in f'{P1}{P1}{P2}'.split(','))\n\nsamples_b = b''.join(struct.pack('h', int(f * 30000)) for f in samples_f)\n\nsimpleaudio.play_buffer(samples_b, 1, 2, F)\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"games"},"Games"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Basic Example"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install pygame"))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import pygame as pg\npg.init()\nscreen = pg.display.set_mode((500, 500))\nrect = pg.Rect(240, 240, 20, 20)\nwhile all(event.type != pg.QUIT for event in pg.event.get()):\n    deltas = {pg.K_UP: (0, -3), pg.K_RIGHT: (3, 0), pg.K_DOWN: (0, 3), pg.K_LEFT: (-3, 0)}\n    for delta in (deltas.get(i) for i, on in enumerate(pg.key.get_pressed()) if on):\n        rect = rect.move(delta) if delta else rect\n    screen.fill((0, 0, 0))\n    pg.draw.rect(screen, (255, 255, 255), rect)\n    pg.display.flip()\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Rectangle"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Object for storing rectangular coordinates")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Rect = pg.Rect(x, y, width, height)  # X and y are coordinates of topleft corner\nint = Rect.x/y/centerx/centery/...  # Top, right, bottom, left\ntup = Rect.topleft/center/...  # Topright, bottomright, bottomleft\nRect = Rect.move((x, y))  # Use move_ip() to move in place\n\nbool = Rect.collidepoint((x, y))  # Tests if a point is inside a rectangle\nbool = Rect.colliderect(Rect)  # Tests if two rectangles overlap\nint = Rect.collidelist(list_of_Rect)  # Returns index of first colliding Rect or -1\nlist = Rect.collidelistall(list_of_Rect)  # Returns indexes of all colliding Rects\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Surface"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Object for representing images")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Surf = pg.display.set_mode((width, height))  # Returns the display surface\nSurf = pg.Surface((width, height))  # Creates a new surface.\nSurf = pg.image.load('path')  # Loads the image\nSurf = Surf.subsurface(Rect)  # Returns a subsurface\n\nSurf.fill(color)  # Fills the whole surface\nSurf.set_at((x, y), color)  # Updates pixel\nSurf.blit(Surface, (x, y))  # Draws passed surface to the surface\n\nSurf = pg.transform.flip(Surf, xbool, ybool)\nSurf = pg.transform.rotate(Surf, degrees)\nSurf = pg.transform.scale(Surf, (width, height))\n\npg.draw.line(Surf, color, (x1, y1), (x2, y2), width)\npg.draw.arc(Surf, color, Rect, from_radians, to_radians)\npg.draw.rect(Surf, color, Rect)\npg.draw.polygon(Surf, color, points)\npg.draw.ellipse(Surf, color, Rect)\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Font"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Font = pg.font.SysFont('name', size, bold=False, italic=False)\nFont = pg.font.Font('path', size)\nSurf = Font.render(text, antialias, color [, background])\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Sound"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Sound = pg.mixer.Sound('path')  # Loads the WAV file\nSound.play()  # Starts playing the sound\n"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Basic Mario Brothers Example"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import collections, dataclasses, enum, io, pygame, urllib.request, itertools as it\nfrom random import randint\n")))),(0,l.kt)("p",null,"  P = collections.namedtuple('P', 'x y')  # Position\nD = enum.Enum('D', 'n e s w')  # Direction\nSIZE, MAX_SPEED = 50, P(5, 10)  # Screen size, Speed limit"),(0,l.kt)("p",null,"  def main():\ndef get_screen():\npygame.init()\nreturn pygame.display.set_mode(2 ",(0,l.kt)("em",{parentName:"p"}," [SIZE"),"16])"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"  def get_images():\n      url = 'https://gto76.github.io/python-cheatsheet/web/mario_bros.png'\n      img = pygame.image.load(io.BytesIO(urllib.request.urlopen(url).read()))\n      return [img.subsurface(get_rect(x, 0)) for x in range(img.get_width() // 16)]\n\n  def get_mario():\n      Mario = dataclasses.make_dataclass('Mario', 'rect spd facing_left frame_cycle'.split())\n      return Mario(get_rect(1, 1), P(0, 0), False, it.cycle(range(3)))\n\n  def get_tiles():\n      positions = [p for p in it.product(range(SIZE), repeat=2) if {*p} & {0, SIZE-1}] + \\\n          [(randint(1, SIZE-2), randint(2, SIZE-2)) for _ in range(SIZE**2 // 10)]\n      return [get_rect(*p) for p in positions]\n\n  def get_rect(x, y):\n      return pygame.Rect(x*16, y*16, 16, 16)\n\n  run(get_screen(), get_images(), get_mario(), get_tiles())\n")),(0,l.kt)("p",null,"  def run(screen, images, mario, tiles):\nclock = pygame.time.Clock()\nwhile all(event.type != pygame.QUIT for event in pygame.event.get()):\nkeys = {pygame.K_UP: D.n, pygame.K_RIGHT: D.e, pygame.K_DOWN: D.s, pygame.K_LEFT: D.w}\npressed = {keys.get(i) for i, on in enumerate(pygame.key.get_pressed()) if on}\nupdate_speed(mario, tiles, pressed)\nupdate_position(mario, tiles)\ndraw(screen, images, mario, tiles, pressed)\nclock.tick(28)"),(0,l.kt)("p",null,"  def update_speed(mario, tiles, pressed):\nx, y = mario.spd\nx += 2 ",(0,l.kt)("em",{parentName:"p"}," ((D.e in pressed) - (D.w in pressed))\nx -= x // abs(x) if x else 0\ny += 1 if D.s not in get_boundaries(mario.rect, tiles) else (-10 if D.n in pressed else 0)\nmario.spd = P("),"[max(-limit, min(limit, s)) for limit, s in zip(MAX_SPEED, P(x, y))]",")"),(0,l.kt)("p",null,"  def update",(0,l.kt)("em",{parentName:"p"},"position(mario, tiles):\nnew_p = mario.rect.topleft\nlarger_speed = max(abs(s) for s in mario.spd)\nfor ")," in range(larger_speed):\nmario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))\nnew_p = P(*","[a + s/larger_speed for a, s in zip(new_p, mario.spd)]",")\nmario.rect.topleft = new_p"),(0,l.kt)("p",null,"  def get_boundaries(rect, tiles):\ndeltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}\nreturn {d for d, delta in deltas.items() if rect.move(delta).collidelist(tiles) != -1}"),(0,l.kt)("p",null,"  def stop_on_collision(spd, bounds):\nreturn P(x=0 if (D.w in bounds and spd.x  0) or (D.e in bounds and spd.x  0) else spd.x,\ny=0 if (D.n in bounds and spd.y  0) or (D.s in bounds and spd.y  0) else spd.y)"),(0,l.kt)("p",null,"  def draw(screen, images, mario, tiles, pressed):\ndef get_frame_index():\nif D.s not in get_boundaries(mario.rect, tiles):\nreturn 4\nreturn next(mario.frame_cycle) if {D.w, D.e} & pressed else 6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"  screen.fill((85, 168, 255))\n  mario.facing_left = (D.w in pressed) if {D.w, D.e} & pressed else mario.facing_left\n  screen.blit(images[get_frame_index() + mario.facing_left * 9], mario.rect)\n\n  for rect in tiles:\n      screen.blit(images[18 if {*rect.topleft} & {0, (SIZE-1)*16} else 19], rect)\n\n  pygame.display.flip()\n")),(0,l.kt)("p",null,"  if ",(0,l.kt)("strong",{parentName:"p"},"name")," == '",(0,l.kt)("strong",{parentName:"p"},"main"),"':\nmain()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n[back to top](#table-of-contents)\n\n### Pandas\n\n- `pip3 install pandas`\n\n```python\nimport pandas as pd\nfrom pandas import Series, DataFrame\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Series"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Ordered dictionary with a name")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Series([1, 2], index=['x', 'y'], name='a')\n\"\"\"\nx  1\ny  2\nName: a, dtype: int64\n\"\"\"\n\nSr = Series(list)  # Assigns RangeIndex starting at 0\nSr = Series(dict)  # Takes dictionary's keys for index\nSr = Series(dict/Series, index=list)  # Only keeps items with keys specified in index\n\nel = Sr.loc[key]  # Or: Sr.iloc[index]\nSr = Sr.loc[keys]  # Or: Sr.iloc[indexes]\nSr = Sr.loc[from_key : to_key_inclusive]  # Or: Sr.iloc[from_i : to_i_exclusive]\n\nel = Sr[key/index]  # Or: Sr.key\nSr = Sr[keys/indexes]  # Or: Sr[key_range/range]\nSr = Sr[bools]  # Or: Sr.i/loc[bools]\n\nSr = Sr == el/Sr  # Returns a Series of bools\nSr = Sr +-*/ el/Sr  # Non-matching keys get value NaN\n\nSr = Sr.append(Sr)  # Or: pd.concat(coll_of_Sr)\nSr = Sr.combine_first(Sr)  # Adds items that are not yet present\nSr.update(Sr)  # Updates items that are already present\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Aggregate, Transform, Map"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The way ",(0,l.kt)("inlineCode",{parentName:"li"},"aggregate()")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"transform()")," find out whether a function accepts an element or the whole Series is by passing it a single value at first and if it raises an error, then they pass it the whole Series"),(0,l.kt)("li",{parentName:"ul"},"Last result has a hierarchical index. Use ",(0,l.kt)("inlineCode",{parentName:"li"},"Sr[key_1, key_2]")," to get its values")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"el = Sr.sum/max/mean/idxmax/all()  # Or: Sr.aggregate(agg_func)\nSr = Sr.rank/diff/cumsum/ffill/interpl()  # Or: Sr.agg/transform(trans_func)\nSr = Sr.fillna(el)  # Or: Sr.apply/agg/transform/map(map_func)\n")))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sr = Series([1, 2], index=['x', 'y'])\n\"\"\"\nx  1\ny  2\n\"\"\"\n```\n\n|               | 'sum' | ['sum'] | {'s': 'sum'} |\n| ------------- | ----- | ------- | ------------ |\n| sr.apply(...) | 3     | sum 3   | s 3          |\n| sr.agg(...)   |       |         |              |\n\n|               | 'rank' | ['rank'] | {'r': 'rank'} |\n| ------------- | ------ | -------- | ------------- |\n| sr.apply(...) |        | rank     |               |\n| sr.agg(...)   | x 1    | x1       | rx1           |\n| sr.trans(...) | y 2    | y 2      | y 2           |\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"DataFrame"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Table with labeled rows and columns")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])\n\"\"\"\n  x y\na 1 2\nb 3 4\n\"\"\"\n\nDF = DataFrame(list_of_rows)  # Rows can be either lists, dicts or series\nDF = DataFrame(dict_of_columns)  # Columns can be either lists, dicts or series\n\nel = DF.loc[row_key, column_key]  # Or: DF.iloc[row_index, column_index]\nSr/DF = DF.loc[row_key/s]  # Or: DF.iloc[row_index/es]\nSr/DF = DF.loc[:, column_key/s]  # Or: DF.iloc[:, column_index/es]\nDF = DF.loc[row_bools, column_bools]  # Or: DF.iloc[row_bools, column_bools]\n\nSr/DF = DF[column_key/s]  # Or: DF.column_key\nDF = DF[row_bools]  # Keeps rows as specified by bools\nDF = DF[DF_of_bools]  # Assigns NaN to False values\n\nDF = DF == el/Sr/DF  # Returns DataFrame of bools\nDF = DF +-*/ el/Sr/DF  # Non-matching keys get value NaN\n\nDF = DF.set_index(column_key)  # Replaces row keys with values from a column\nDF = DF.reset_index()  # Moves row keys to their own column\nDF = DF.filter('regex', axis=1)  # Only keeps columns whose key matches the regex\nDF = DF.melt(id_vars=column_key/s)  # Converts DF from wide to long format\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Merge, Join, Concat"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},'l.merge(r, on="y", how=...)')),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"outer")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"  x y z\n0 1 2 .\n1 3 4 5\n2 . 6 7\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"inner")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"x y z\n3 4 5\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"left")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"x y z\n1 2 .\n3 4 5\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Joins / Merges on column")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"also accepts left_on and right_on parameters")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"uses ",(0,l.kt)("inlineCode",{parentName:"p"},"inner")," by default")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},'l.join(r, lsuffix="l", rsuffix="r", how=...)')),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"outer")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"  x yl yr z\na 1 2  .  .\nb 3 4  4  5\nc . .  6  7\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"inner")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"x yl yr z\n3 4  4  5\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"left")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"x yl yr z\n1 2  .  .\n3 4  4  5\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Joins / Merges on row keys")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"uses ",(0,l.kt)("inlineCode",{parentName:"p"},"left")," by default")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"pd.concat([l, r], axis=0, join=...)")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"outer")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"  x y z\na 1 2 .\nb 3 4 .\nb . 4 5\nc . 6 7\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"inner")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"y\n2\n4\n4\n6\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Adds rows at the bottom")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"uses ",(0,l.kt)("inlineCode",{parentName:"p"},"outer")," by default")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"by default works the same as ",(0,l.kt)("inlineCode",{parentName:"p"},"l.append(r)"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"pd.concat([l, r], axis=1, join=...)")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"outer")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"  x y y z\na 1 2 . .\nb 3 4 4 5\nc . . 6 7\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"inner")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"x y y z\n3 4 4 5\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Adds columns at the right end")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"uses ",(0,l.kt)("inlineCode",{parentName:"p"},"outer")," by default")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"l.combine_first(r)")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"outer")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"  x y z\na 1 2 .\nb 3 4 5\nc . 6 7\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Adds missing rows and columns"))))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"l = DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])\n\"\"\"\n  x y\na 1 2\nb 3 4\n\"\"\"\n\nr = DataFrame([[4, 5], [6, 7]], index=['b', 'c'], columns=['y', 'z'])\n\"\"\"\n  y z\nb 4 5\nc 6 7\n\"\"\"\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Aggregate, Transform, Map"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"All operations operate on columns by default"),(0,l.kt)("li",{parentName:"ul"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"axis=1")," parameter to process the rows instead"),(0,l.kt)("li",{parentName:"ul"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"DF[col_key_1, col_key_2][row_key]")," to get the fifth result's values.")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Sr = DF.sum/max/mean/idxmax/all()  # Or: DF.apply/agg/transform(agg_func)\nDF = DF.rank/diff/cumsum/ffill/interpl()  # Or: DF.apply/agg/transform(trans_func)\nDF = DF.fillna(el)  # Or: DF.applymap(map_func)\n\n# example\ndf = DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])\n  x y\na 1 2\nb 3 4\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Encode, Decode"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"DF = pd.read_json/html('str/path/url')\nDF = pd.read_csv/pickle/excel('path/url')\nDF = pd.read_sql('query', connection)\nDF = pd.read_clipboard()\n\ndict = DF.to_dict(['d/l/s/sp/r/i'])\nstr  = DF.to_json/html/csv/markdown/latex([path])\nDF.to_pickle/excel(path)\nDF.to_sql('table_name', connection)\n"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"GroupBy"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Object that groups together rows of a dataframe based on the value of the passed column"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 6]], index=list(\'abc\'), columns=list(\'xyz\'))\ndf.groupby(\'z\').get_group(3)\n"""\n  x y\na 1 2\n"""\n\ndf.groupby(\'z\').get_group(6)\n"""\n  x y\nb 4 5\nc 7 8\n"""\n\nGB = DF.groupby(column_key/s)  # DF is split into groups based on passed column\nDF = GB.get_group(group_key)  # Selects a group by value of grouping column\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Aggregate, Transform, Map"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"DF = GB.sum/max/mean/idxmax/all()  # Or: GB.apply/agg(agg_func)\nDF = GB.rank/diff/cumsum/ffill()  # Or: GB.aggregate(trans_func)\nDF = GB.fillna(el)  # Or: GB.transform(map_func)\n\ngb = df.groupby('z')\n     x y z\n3: a 1 2 3\n6: b 4 5 6\n   c 7 8 6\n"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Rolling"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Object for rolling window calculations"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"R_Sr/R_DF/R_GB = Sr/DF/GB.rolling(window_size)  # Also: `min_periods=None, center=False`.\nR_Sr/R_DF = R_DF/R_GB[column_key/s]  # Or: R.column_key\nSr/DF/DF = R_Sr/R_DF/R_GB.sum/max/mean()  # Or: R.apply/agg(agg_func/str)\n")))))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"plotly"},"Plotly"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"pip3 install pandas plotly"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Covid Deaths by Continent example"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import pandas as pd\nimport plotly.express\n")))),(0,l.kt)("p",null,"  covid = pd.read_csv('",(0,l.kt)("a",{parentName:"p",href:"https://covid.ourworldindata.org/data/owid-covid-data.csv'"},"https://covid.ourworldindata.org/data/owid-covid-data.csv'"),",\nusecols=","['iso_code', 'date', 'total_deaths', 'population']",")\ncontinents = pd.read_csv('",(0,l.kt)("a",{parentName:"p",href:"https://datahub.io/JohnSnowLabs/country-and-continent-codes-'"},"https://datahub.io/JohnSnowLabs/country-and-continent-codes-'")," + \\\n'list/r/country-and-continent-codes-list-csv.csv',\nusecols=","['Three_Letter_Country_Code', 'Continent_Name']",")\ndf = pd.merge(covid, continents, left_on='iso_code', right_on='Three_Letter_Country_Code')\ndf = df.groupby(","['Continent_Name', 'date']",").sum().reset_index()\ndf","['Total Deaths per Million']"," = df.total_deaths * 1e6 / df.population\ndf = df","[('2020-03-14'  df.date) & (df.date  '2020-06-25')]","\ndf = df.rename({'date': 'Date', 'Continent_Name': 'Continent'}, axis='columns')\nplotly.express.line(df, x='Date', y='Total Deaths per Million', color='Continent').show()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n- Confirmed Covid Cases, Dow Jones, Gold, and Bitcoin Price\n\n```python\nimport pandas, datetime\nimport plotly.graph_objects as go\n\n\ndef main():\n    display_data(wrangle_data(*scrape_data()))\n\n\ndef scrape_data():\n    def scrape_yahoo(id_):\n          BASE_URL = 'https://query1.finance.yahoo.com/v7/finance/download/'\n        now  = int(datetime.datetime.now().timestamp())\n        url  = f'{BASE_URL}{id_}?period1=1579651200&period2={now}&interval=1d&events=history'\n        return pandas.read_csv(url, usecols=['Date', 'Close']).set_index('Date').Close\n\n    covid = pd.read_csv('https://covid.ourworldindata.org/data/owid-covid-data.csv',\n                        usecols=['date', 'total_cases'])\n    covid = covid.groupby('date').sum()\n    dow, gold, bitcoin = [scrape_yahoo(id_) for id_ in ('^DJI', 'GC=F', 'BTC-USD')]\n    dow.name, gold.name, bitcoin.name = 'Dow Jones', 'Gold', 'Bitcoin'\n    return covid, dow, gold, bitcoin\n\n\ndef wrangle_data(covid, dow, gold, bitcoin):\n    df = pandas.concat([covid, dow, gold, bitcoin], axis=1)\n    df = df.loc['2020-02-23':].iloc[:-2]\n    df = df.interpolate()\n    df.iloc[:, 1:] = df.rolling(10, min_periods=1, center=True).mean().iloc[:, 1:]\n    df.iloc[:, 1:] = df.iloc[:, 1:] / df.iloc[0, 1:] * 100\n    return df\n\n\ndef display_data(df):\n    def get_trace(col_name):\n        return go.Scatter(x=df.index, y=df[col_name], name=col_name, yaxis='y2')\n    traces = [get_trace(col_name) for col_name in df.columns[1:]]\n    traces.append(go.Scatter(x=df.index, y=df.total_cases, name='Total Cases', yaxis='y1'))\n    figure = go.Figure()\n    figure.add_traces(traces)\n    figure.update_layout(\n        yaxis1=dict(title='Total Cases', rangemode='tozero'),\n        yaxis2=dict(title='%', rangemode='tozero', overlaying='y', side='right'),\n        legend=dict(x=1.1)\n    ).show()\n\n\nif __name__ == '__main__':\n    main()\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#table-of-contents"},"back to top")),(0,l.kt)("h3",{id:"cython"},"Cython"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Library that compiles Python code into C"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pip3 install cython"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import pyximport; pyximport.install()\nimport cython_script\n\n\ncython_script.main()\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Definitions"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"All ",(0,l.kt)("inlineCode",{parentName:"li"},"cdef")," definitions are optional, but they contribute to the speed-up"),(0,l.kt)("li",{parentName:"ul"},"Script needs to be saved with a ",(0,l.kt)("inlineCode",{parentName:"li"},"pyx")," extension")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"cdef type var_name = el\ncdef type[n_elements] var_name = [el_1, el_2, ...]\ncdef type/void func_name(type arg_name_1, ...):\n\ncdef class class_name:\n    cdef public type attr_name\n\n    def __init__(self, type arg_name):\n        self.attr_name = arg_name\n")))),(0,l.kt)("p",null,"  cdef enum enum_name: member_name_1, member_name_2, ..."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n[back to top](#table-of-contents)\n")))}u.isMDXComponent=!0}}]);