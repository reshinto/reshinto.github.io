"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9843],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),g=a,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||i;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},19924:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const i={},o="Example 2",l={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Decorator/swift/example2",id:"interviewPrep/designPatterns/Structural_patterns/Decorator/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Decorator/swift",slug:"/interviewPrep/designPatterns/Structural_patterns/Decorator/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Decorator/typescript/"}},s={},p=[],c={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import UIKit\nimport XCTest\n\n\nprotocol ImageEditor: CustomStringConvertible {\n\n    func apply() -> UIImage\n}\n\nclass ImageDecorator: ImageEditor {\n\n    private var editor: ImageEditor\n\n    required init(_ editor: ImageEditor) {\n        self.editor = editor\n    }\n\n    func apply() -> UIImage {\n        print(editor.description + " applies changes")\n        return editor.apply()\n    }\n\n    var description: String {\n        return "ImageDecorator"\n    }\n}\n\nextension UIImage: ImageEditor {\n\n    func apply() -> UIImage {\n        return self\n    }\n\n    open override var description: String {\n        return "Image"\n    }\n}\n\n\n\nclass BaseFilter: ImageDecorator {\n\n    fileprivate var filter: CIFilter?\n\n    init(editor: ImageEditor, filterName: String) {\n        self.filter = CIFilter(name: filterName)\n        super.init(editor)\n    }\n\n    required init(_ editor: ImageEditor) {\n        super.init(editor)\n    }\n\n    override func apply() -> UIImage {\n\n        let image = super.apply()\n        let context = CIContext(options: nil)\n\n        filter?.setValue(CIImage(image: image), forKey: kCIInputImageKey)\n\n        guard let output = filter?.outputImage else { return image }\n        guard let coreImage = context.createCGImage(output, from: output.extent) else {\n            return image\n        }\n        return UIImage(cgImage: coreImage)\n    }\n\n    override var description: String {\n        return "BaseFilter"\n    }\n}\n\nclass BlurFilter: BaseFilter {\n\n    required init(_ editor: ImageEditor) {\n        super.init(editor: editor, filterName: "CIGaussianBlur")\n    }\n\n    func update(radius: Double) {\n        filter?.setValue(radius, forKey: "inputRadius")\n    }\n\n    override var description: String {\n        return "BlurFilter"\n    }\n}\n\nclass ColorFilter: BaseFilter {\n\n    required init(_ editor: ImageEditor) {\n        super.init(editor: editor, filterName: "CIColorControls")\n    }\n\n    func update(saturation: Double) {\n        filter?.setValue(saturation, forKey: "inputSaturation")\n    }\n\n    func update(brightness: Double) {\n        filter?.setValue(brightness, forKey: "inputBrightness")\n    }\n\n    func update(contrast: Double) {\n        filter?.setValue(contrast, forKey: "inputContrast")\n    }\n\n    override var description: String {\n        return "ColorFilter"\n    }\n}\n\nclass Resizer: ImageDecorator {\n\n    private var xScale: CGFloat = 0\n    private var yScale: CGFloat = 0\n    private var hasAlpha = false\n\n    convenience init(_ editor: ImageEditor, xScale: CGFloat = 0, yScale: CGFloat = 0, hasAlpha: Bool = false) {\n        self.init(editor)\n        self.xScale = xScale\n        self.yScale = yScale\n        self.hasAlpha = hasAlpha\n    }\n\n    required init(_ editor: ImageEditor) {\n        super.init(editor)\n    }\n\n    override func apply() -> UIImage {\n\n        let image = super.apply()\n\n        let size = image.size.applying(CGAffineTransform(scaleX: xScale, y: yScale))\n\n        UIGraphicsBeginImageContextWithOptions(size, !hasAlpha, UIScreen.main.scale)\n        image.draw(in: CGRect(origin: .zero, size: size))\n\n        let scaledImage = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n\n        return scaledImage ?? image\n    }\n\n    override var description: String {\n        return "Resizer"\n    }\n}\n\n\nclass DecoratorRealWorld: XCTestCase {\n\n    func testDecoratorRealWorld() {\n\n        let image = loadImage()\n\n        print("Client: set up an editors stack")\n        let resizer = Resizer(image, xScale: 0.2, yScale: 0.2)\n\n        let blurFilter = BlurFilter(resizer)\n        blurFilter.update(radius: 2)\n\n        let colorFilter = ColorFilter(blurFilter)\n        colorFilter.update(contrast: 0.53)\n        colorFilter.update(brightness: 0.12)\n        colorFilter.update(saturation: 4)\n\n        clientCode(editor: colorFilter)\n    }\n\n    func clientCode(editor: ImageEditor) {\n        let image = editor.apply()\n        /// Note. You can stop an execution in Xcode to see an image preview.\n        print("Client: all changes have been applied for \\(image)")\n    }\n}\n\nprivate extension DecoratorRealWorld {\n\n    func loadImage() -> UIImage {\n\n        let urlString = "https:// refactoring.guru/images/content-public/logos/logo-new-3x.png"\n\n        /// Note:\n        /// Do not download images the following way in a production code.\n\n        guard let url = URL(string: urlString) else {\n            fatalError("Please enter a valid URL")\n        }\n\n        guard let data = try? Data(contentsOf: url) else {\n            fatalError("Cannot load an image")\n        }\n\n        guard let image = UIImage(data: data) else {\n            fatalError("Cannot create an image from data")\n        }\n        return image\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Client: set up an editors stack\n\nBlurFilter applies changes\nResizer applies changes\nImage applies changes\n\nClient: all changes have been applied for Image\n")))}u.isMDXComponent=!0}}]);