"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8966],{3905:(n,e,i)=>{i.d(e,{Zo:()=>u,kt:()=>m});var t=i(67294);function r(n,e,i){return e in n?Object.defineProperty(n,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[e]=i,n}function o(n,e){var i=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.push.apply(i,t)}return i}function s(n){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?o(Object(i),!0).forEach((function(e){r(n,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(i,e))}))}return n}function a(n,e){if(null==n)return{};var i,t,r=function(n,e){if(null==n)return{};var i,t,r={},o=Object.keys(n);for(t=0;t<o.length;t++)i=o[t],e.indexOf(i)>=0||(r[i]=n[i]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)i=o[t],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(n,i)&&(r[i]=n[i])}return r}var l=t.createContext({}),c=function(n){var e=t.useContext(l),i=e;return n&&(i="function"==typeof n?n(e):s(s({},e),n)),i},u=function(n){var e=c(n.components);return t.createElement(l.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},f=t.forwardRef((function(n,e){var i=n.components,r=n.mdxType,o=n.originalType,l=n.parentName,u=a(n,["components","mdxType","originalType","parentName"]),f=c(i),m=r,d=f["".concat(l,".").concat(m)]||f[m]||p[m]||o;return i?t.createElement(d,s(s({ref:e},u),{},{components:i})):t.createElement(d,s({ref:e},u))}));function m(n,e){var i=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=i.length,s=new Array(o);s[0]=f;var a={};for(var l in e)hasOwnProperty.call(e,l)&&(a[l]=e[l]);a.originalType=n,a.mdxType="string"==typeof n?n:r,s[1]=a;for(var c=2;c<o;c++)s[c]=i[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,i)}f.displayName="MDXCreateElement"},17529:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var t=i(87462),r=(i(67294),i(3905));const o={},s="Example 2",a={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/example2",id:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Visitor/typescript/"}},l={},c=[],u={toc:c};function p(n){let{components:e,...i}=n;return(0,r.kt)("wrapper",(0,t.Z)({},u,i,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"example-2"},"Example 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'import Foundation\nimport XCTest\n\n\nprotocol Notification: CustomStringConvertible {\n\n    func accept(visitor: NotificationPolicy) -> Bool\n}\n\nstruct Email {\n\n    let emailOfSender: String\n\n    var description: String { return "Email" }\n}\n\nstruct SMS {\n\n    let phoneNumberOfSender: String\n\n    var description: String { return "SMS" }\n}\n\nstruct Push {\n\n    let usernameOfSender: String\n\n    var description: String { return "Push" }\n}\n\nextension Email: Notification {\n\n    func accept(visitor: NotificationPolicy) -> Bool {\n        return visitor.isTurnedOn(for: self)\n    }\n}\n\nextension SMS: Notification {\n\n    func accept(visitor: NotificationPolicy) -> Bool {\n        return visitor.isTurnedOn(for: self)\n    }\n}\n\nextension Push: Notification {\n\n    func accept(visitor: NotificationPolicy) -> Bool {\n        return visitor.isTurnedOn(for: self)\n    }\n}\n\n\nprotocol NotificationPolicy: CustomStringConvertible {\n\n    func isTurnedOn(for email: Email) -> Bool\n\n    func isTurnedOn(for sms: SMS) -> Bool\n\n    func isTurnedOn(for push: Push) -> Bool\n}\n\nclass NightPolicyVisitor: NotificationPolicy {\n\n    func isTurnedOn(for email: Email) -> Bool {\n        return false\n    }\n\n    func isTurnedOn(for sms: SMS) -> Bool {\n        return true\n    }\n\n    func isTurnedOn(for push: Push) -> Bool {\n        return false\n    }\n\n    var description: String { return "Night Policy Visitor" }\n}\n\nclass DefaultPolicyVisitor: NotificationPolicy {\n\n    func isTurnedOn(for email: Email) -> Bool {\n        return true\n    }\n\n    func isTurnedOn(for sms: SMS) -> Bool {\n        return true\n    }\n\n    func isTurnedOn(for push: Push) -> Bool {\n        return true\n    }\n\n    var description: String { return "Default Policy Visitor" }\n}\n\nclass BlackListVisitor: NotificationPolicy {\n\n    private var bannedEmails = [String]()\n    private var bannedPhones = [String]()\n    private var bannedUsernames = [String]()\n\n    init(emails: [String], phones: [String], usernames: [String]) {\n        self.bannedEmails = emails\n        self.bannedPhones = phones\n        self.bannedUsernames = usernames\n    }\n\n    func isTurnedOn(for email: Email) -> Bool {\n        return bannedEmails.contains(email.emailOfSender)\n    }\n\n    func isTurnedOn(for sms: SMS) -> Bool {\n        return bannedPhones.contains(sms.phoneNumberOfSender)\n    }\n\n    func isTurnedOn(for push: Push) -> Bool {\n        return bannedUsernames.contains(push.usernameOfSender)\n    }\n\n    var description: String { return "Black List Visitor" }\n}\n\n\n\nclass VisitorRealWorld: XCTestCase {\n\n    func testVisitorRealWorld() {\n\n        let email = Email(emailOfSender: "some@email.com")\n        let sms = SMS(phoneNumberOfSender: "+3806700000")\n        let push = Push(usernameOfSender: "Spammer")\n\n        let notifications: [Notification] = [email, sms, push]\n\n        clientCode(handle: notifications, with: DefaultPolicyVisitor())\n\n        clientCode(handle: notifications, with: NightPolicyVisitor())\n    }\n}\n\nextension VisitorRealWorld {\n\n    /// Client code traverses notifications with visitors and checks whether a\n    /// notification is in a blacklist and should be shown in accordance with a\n    /// current SilencePolicy\n\n    func clientCode(handle notifications: [Notification], with policy: NotificationPolicy) {\n\n        let blackList = createBlackList()\n\n        print("\\nClient: Using \\(policy.description) and \\(blackList.description)")\n\n        notifications.forEach { item in\n\n            guard !item.accept(visitor: blackList) else {\n                print("\\tWARNING: " + item.description + " is in a black list")\n                return\n            }\n\n            if item.accept(visitor: policy) {\n                print("\\t" + item.description + " notification will be shown")\n            } else {\n                print("\\t" + item.description + " notification will be silenced")\n            }\n        }\n    }\n\n    private func createBlackList() -> BlackListVisitor {\n        return BlackListVisitor(emails: ["banned@email.com"],\n                                phones: ["000000000", "1234325232"],\n                                usernames: ["Spammer"])\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Client: Using Default Policy Visitor and Black List Visitor\n    Email notification will be shown\n    SMS notification will be shown\n    WARNING: Push is in a black list\n\nClient: Using Night Policy Visitor and Black List Visitor\n    Email notification will be silenced\n    SMS notification will be shown\n    WARNING: Push is in a black list\n")))}p.isMDXComponent=!0}}]);