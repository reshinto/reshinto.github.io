"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[23812],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(a),d=i,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return a?n.createElement(k,l(l({ref:t},c),{},{components:a})):n.createElement(k,l({ref:t},c))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},95873:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(83117),i=(a(67294),a(3905));const r={},l="Microservices",o={unversionedId:"interviewPrep/system_design/microservices/readme",id:"interviewPrep/system_design/microservices/readme",title:"Microservices",description:"- microservices can be broken up in a way to solve a specific business need or enable a business capability",source:"@site/docs/interviewPrep/system_design/microservices/readme.md",sourceDirName:"interviewPrep/system_design/microservices",slug:"/interviewPrep/system_design/microservices/",permalink:"/docs/interviewPrep/system_design/microservices/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/system_design/microservices/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Database Scaling",permalink:"/docs/interviewPrep/system_design/memoryAndStorage/databases/database_scaling"},next:{title:"Asynchronous Communications",permalink:"/docs/interviewPrep/system_design/microservices/asynchronousCommunications"}},s={},p=[{value:"Introduction to Microservices",id:"introduction-to-microservices",level:2},{value:"Benefits of microservices",id:"benefits-of-microservices",level:3},{value:"avoid bottlenecks with scaling",id:"avoid-bottlenecks-with-scaling",level:3},{value:"Example: authentication and token management",id:"example-authentication-and-token-management",level:4},{value:"Deployment Benefits",id:"deployment-benefits",level:3},{value:"Open up to New Opportunites",id:"open-up-to-new-opportunites",level:3},{value:"Common microservices pattern",id:"common-microservices-pattern",level:3},{value:"Twelve-Factor App",id:"twelve-factor-app",level:4}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"microservices"},"Microservices"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"microservices can be broken up in a way to solve a specific business need or enable a business capability"),(0,i.kt)("li",{parentName:"ul"},"easier to justify technical work when it's related directly to a specific business need"),(0,i.kt)("li",{parentName:"ul"},"building microservices forces you to think about applications in a more modular way")),(0,i.kt)("h2",{id:"introduction-to-microservices"},"Introduction to Microservices"),(0,i.kt)("h3",{id:"benefits-of-microservices"},"Benefits of microservices"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Freedom to create, manage, and deploy individual components"),(0,i.kt)("li",{parentName:"ul"},"Reduced surface area allows easier to plug in continuous integration"),(0,i.kt)("li",{parentName:"ul"},"Enables fault tolerance and fault isolation"),(0,i.kt)("li",{parentName:"ul"},"language independence"),(0,i.kt)("li",{parentName:"ul"},"use the right language for the task at hand"),(0,i.kt)("li",{parentName:"ul"},"not pigeonholed to a single language just because the rest of the application uses it")),(0,i.kt)("h3",{id:"avoid-bottlenecks-with-scaling"},"avoid bottlenecks with scaling"),(0,i.kt)("h4",{id:"example-authentication-and-token-management"},"Example: authentication and token management"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"build login/token management"),(0,i.kt)("li",{parentName:"ul"},"APIs as a separate service"),(0,i.kt)("li",{parentName:"ul"},"Scale out independently as an app")),(0,i.kt)("h3",{id:"deployment-benefits"},"Deployment Benefits"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Get your updates to production more quickly"),(0,i.kt)("li",{parentName:"ul"},"Risk of rolling out a smaller changeset is lesser"),(0,i.kt)("li",{parentName:"ul"},"Get to play with some new ideas like blue-green or A/B deployments"),(0,i.kt)("li",{parentName:"ul"},"Ability to replace components in a more efficient way")),(0,i.kt)("h3",{id:"open-up-to-new-opportunites"},"Open up to New Opportunites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Apply microservices approach to containers and serverless paradigms"),(0,i.kt)("li",{parentName:"ul"},"Serverless paradigms and containers introduce new tooling and technologies that benefit from a microservices approach")),(0,i.kt)("h3",{id:"common-microservices-pattern"},"Common microservices pattern"),(0,i.kt)("h4",{id:"twelve-factor-app"},"Twelve-Factor App"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://12factor.net"},"Source")),(0,i.kt)("li",{parentName:"ul"},"Initially proposed to build SaaS (Software as a Service) apps for Heroku"),(0,i.kt)("li",{parentName:"ul"},"Principles translate well to cloud and container native applications",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Principle: Codebase",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"codebase must be tracked in version control and will have many deploys"))),(0,i.kt)("li",{parentName:"ol"},"Principle: Dependencies",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"dependencies are explicitly declared and isolated"))),(0,i.kt)("li",{parentName:"ol"},"Principle: Configuration",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"store configuration in the environment"))),(0,i.kt)("li",{parentName:"ol"},"Principle: Backing Services",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Treat backing services as an attached resource",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"e.g.: for internal database, or third party service"))),(0,i.kt)("li",{parentName:"ul"},"should be easy to deploy and change"))),(0,i.kt)("li",{parentName:"ol"},"Principle: Build, Release, Run",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"build, deploy, run",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"always have a build and deploy strategy"),(0,i.kt)("li",{parentName:"ul"},"build strategies for repeated builds, versioning of running system, and rollback"))))),(0,i.kt)("li",{parentName:"ol"},"Principle: Processes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Execute the application as a stateless process",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"sticky sessions need to be revisited and reimplemented"),(0,i.kt)("li",{parentName:"ul"},"might be challenging in large enterprise with architecture already in place"))))),(0,i.kt)("li",{parentName:"ol"},"Principle: Port Binding",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Expose services via port bindings"))),(0,i.kt)("li",{parentName:"ol"},"Principle: Concurrency",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Scale out with the process model"))),(0,i.kt)("li",{parentName:"ol"},"Principle: Disposability",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Quick application startup and shutdown times"))),(0,i.kt)("li",{parentName:"ol"},"Dev/prod parity",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Application is treated the same way in dev, staging, and production"))),(0,i.kt)("li",{parentName:"ol"},"Log Management",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Treated as an event stream"))),(0,i.kt)("li",{parentName:"ol"},"Admin Tasks",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Treated the same way like the rest of the application"),(0,i.kt)("li",{parentName:"ul"},"Are allowed to run against a released version")))))))}u.isMDXComponent=!0}}]);