"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[71463],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=o,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},27343:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(83117),o=(n(67294),n(3905));const a={},i="Example 2",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/example2",id:"interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Memento/swift",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/swift/"},next:{title:"TypeScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/typescript/"}},l={},c=[],p={toc:c};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"example-2"},"Example 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'import XCTest\n\nclass MementoRealWorld: XCTestCase {\n\n    /// State and Command are often used together when the previous state of the\n    /// object should be restored in case of failure of some operation.\n    ///\n    /// Note: UndoManager can be used as an alternative.\n\n    func test() {\n\n        let textView = UITextView()\n        let undoStack = UndoStack(textView)\n\n        textView.text = "First Change"\n        undoStack.save()\n\n        textView.text = "Second Change"\n        undoStack.save()\n\n        textView.text = (textView.text ?? "") + " & Third Change"\n        textView.textColor = .red\n        undoStack.save()\n\n        print(undoStack)\n\n        print("Client: Perform Undo operation 2 times\\n")\n        undoStack.undo()\n        undoStack.undo()\n\n        print(undoStack)\n    }\n}\n\nclass UndoStack: CustomStringConvertible {\n\n    private lazy var mementos = [Memento]()\n    private let textView: UITextView\n\n    init(_ textView: UITextView) {\n        self.textView = textView\n    }\n\n    func save() {\n        mementos.append(textView.memento)\n    }\n\n    func undo() {\n        guard !mementos.isEmpty else { return }\n        textView.restore(with: mementos.removeLast())\n    }\n\n    var description: String {\n        return mementos.reduce("", { $0 + $1.description })\n    }\n}\n\nprotocol Memento: CustomStringConvertible {\n\n    var text: String { get }\n    var date: Date { get }\n}\n\nextension UITextView {\n\n    var memento: Memento {\n        return TextViewMemento(text: text,\n                               textColor: textColor,\n                               selectedRange: selectedRange)\n    }\n\n    func restore(with memento: Memento) {\n        guard let textViewMemento = memento as? TextViewMemento else { return }\n\n        text = textViewMemento.text\n        textColor = textViewMemento.textColor\n        selectedRange = textViewMemento.selectedRange\n    }\n\n    struct TextViewMemento: Memento {\n\n        let text: String\n        let date = Date()\n\n        let textColor: UIColor?\n        let selectedRange: NSRange\n\n        var description: String {\n            let time = Calendar.current.dateComponents([.hour, .minute, .second, .nanosecond],\n                                                       from: date)\n            let color = String(describing: textColor)\n            return "Text: \\(text)\\n" + "Date: \\(time.description)\\n"\n                + "Color: \\(color)\\n" + "Range: \\(selectedRange)\\n\\n"\n        }\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Text: First Change\nDate: hour: 12 minute: 21 second: 50 nanosecond: 821737051 isLeapMonth: false\nColor: nil\nRange: {12, 0}\n\nText: Second Change\nDate: hour: 12 minute: 21 second: 50 nanosecond: 826483011 isLeapMonth: false\nColor: nil\nRange: {13, 0}\n\nText: Second Change & Third Change\nDate: hour: 12 minute: 21 second: 50 nanosecond: 829187035 isLeapMonth: false\nColor: Optional(UIExtendedSRGBColorSpace 1 0 0 1)\nRange: {28, 0}\n\n\nClient: Perform Undo operation 2 times\n\nText: First Change\nDate: hour: 12 minute: 21 second: 50 nanosecond: 821737051 isLeapMonth: false\nColor: nil\nRange: {12, 0}\n")))}m.isMDXComponent=!0}}]);