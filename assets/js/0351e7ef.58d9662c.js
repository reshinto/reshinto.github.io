"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9208],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var s=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),c=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?s.createElement(h,o(o({ref:t},p),{},{components:n})):s.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<a;c++)o[c]=n[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}u.displayName="MDXCreateElement"},76324:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var s=n(87462),r=(n(67294),n(3905));const a={},o="C++ Example",i={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Template/cPlusPlus/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Template/cPlusPlus/readme",title:"C++ Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/cPlusPlus/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Template/cPlusPlus",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Template/cPlusPlus/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/cPlusPlus/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/cPlusPlus/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Template",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/"},next:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Template/cSharp/"}},l={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"c-example"},"C++ Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\n/**\n * Template Method Design Pattern\n *\n * Intent: Defines the skeleton of an algorithm in the superclass but lets\n * subclasses override specific steps of the algorithm without changing its\n * structure.\n */\n/**\n * The Abstract Class defines a template method that contains a skeleton of some\n * algorithm, composed of calls to (usually) abstract primitive operations.\n *\n * Concrete subclasses should implement these operations, but leave the template\n * method itself intact.\n */\nclass AbstractClass {\n  /**\n   * The template method defines the skeleton of an algorithm.\n   */\n public:\n  void TemplateMethod() const {\n    this->BaseOperation1();\n    this->RequiredOperations1();\n    this->BaseOperation2();\n    this->Hook1();\n    this->RequiredOperation2();\n    this->BaseOperation3();\n    this->Hook2();\n  }\n  /**\n   * These operations already have implementations.\n   */\n protected:\n  void BaseOperation1() const {\n    std::cout << "AbstractClass says: I am doing the bulk of the work\\n";\n  }\n  void BaseOperation2() const {\n    std::cout << "AbstractClass says: But I let subclasses override some operations\\n";\n  }\n  void BaseOperation3() const {\n    std::cout << "AbstractClass says: But I am doing the bulk of the work anyway\\n";\n  }\n  /**\n   * These operations have to be implemented in subclasses.\n   */\n  virtual void RequiredOperations1() const = 0;\n  virtual void RequiredOperation2() const = 0;\n  /**\n   * These are "hooks." Subclasses may override them, but it\'s not mandatory\n   * since the hooks already have default (but empty) implementation. Hooks\n   * provide additional extension points in some crucial places of the\n   * algorithm.\n   */\n  virtual void Hook1() const {}\n  virtual void Hook2() const {}\n};\n/**\n * Concrete classes have to implement all abstract operations of the base class.\n * They can also override some operations with a default implementation.\n */\nclass ConcreteClass1 : public AbstractClass {\n protected:\n  void RequiredOperations1() const override {\n    std::cout << "ConcreteClass1 says: Implemented Operation1\\n";\n  }\n  void RequiredOperation2() const override {\n    std::cout << "ConcreteClass1 says: Implemented Operation2\\n";\n  }\n};\n/**\n * Usually, concrete classes override only a fraction of base class\' operations.\n */\nclass ConcreteClass2 : public AbstractClass {\n protected:\n  void RequiredOperations1() const override {\n    std::cout << "ConcreteClass2 says: Implemented Operation1\\n";\n  }\n  void RequiredOperation2() const override {\n    std::cout << "ConcreteClass2 says: Implemented Operation2\\n";\n  }\n  void Hook1() const override {\n    std::cout << "ConcreteClass2 says: Overridden Hook1\\n";\n  }\n};\n/**\n * The client code calls the template method to execute the algorithm. Client\n * code does not have to know the concrete class of an object it works with, as\n * long as it works with objects through the interface of their base class.\n */\nvoid ClientCode(AbstractClass *class_) {\n  // ...\n  class_->TemplateMethod();\n  // ...\n}\n\nint main() {\n  std::cout << "Same client code can work with different subclasses:\\n";\n  ConcreteClass1 *concreteClass1 = new ConcreteClass1;\n  ClientCode(concreteClass1);\n  std::cout << "\\n";\n  std::cout << "Same client code can work with different subclasses:\\n";\n  ConcreteClass2 *concreteClass2 = new ConcreteClass2;\n  ClientCode(concreteClass2);\n  delete concreteClass1;\n  delete concreteClass2;\n  return 0;\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Same client code can work with different subclasses:\nAbstractClass says: I am doing the bulk of the work\nConcreteClass1 says: Implemented Operation1\nAbstractClass says: But I let subclasses override some operations\nConcreteClass1 says: Implemented Operation2\nAbstractClass says: But I am doing the bulk of the work anyway\n\nSame client code can work with different subclasses:\nAbstractClass says: I am doing the bulk of the work\nConcreteClass2 says: Implemented Operation1\nAbstractClass says: But I let subclasses override some operations\nConcreteClass2 says: Overridden Hook1\nConcreteClass2 says: Implemented Operation2\nAbstractClass says: But I am doing the bulk of the work anyway\n")))}d.isMDXComponent=!0}}]);