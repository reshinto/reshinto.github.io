"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[16111],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),d=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return o.createElement(p.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=d(t),f=r,u=m["".concat(p,".").concat(f)]||m[f]||l[f]||a;return t?o.createElement(u,i(i({ref:n},c),{},{components:t})):o.createElement(u,i({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<a;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},77277:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=t(83117),r=(t(67294),t(3905));const a={},i="Python Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Mediator/python/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Mediator/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Mediator/python",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Mediator/python/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/javascript/"},next:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Mediator/swift/"}},p={},d=[],c={toc:d};function l(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-example"},"Python Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"""\nMediator Design Pattern\n\nIntent: Lets you reduce chaotic dependencies between objects. The pattern\nrestricts direct communications between the objects and forces them to\ncollaborate only via a mediator object.\n"""\n\n\nfrom __future__ import annotations\nfrom abc import ABC\n\n\nclass Mediator(ABC):\n    """\n    The Mediator interface declares a method used by components to notify the\n    mediator about various events. The Mediator may react to these events and\n    pass the execution to other components.\n    """\n\n    def notify(self, sender: object, event: str) -> None:\n        pass\n\n\nclass ConcreteMediator(Mediator):\n    def __init__(self, component1: Component1, component2: Component2) -> None:\n        self._component1 = component1\n        self._component1.mediator = self\n        self._component2 = component2\n        self._component2.mediator = self\n\n    def notify(self, sender: object, event: str) -> None:\n        if event == "A":\n            print("Mediator reacts on A and triggers following operations:")\n            self._component2.do_c()\n        elif event == "D":\n            print("Mediator reacts on D and triggers following operations:")\n            self._component1.do_b()\n            self._component2.do_c()\n\n\nclass BaseComponent:\n    """\n    The Base Component provides the basic functionality of storing a mediator\'s\n    instance inside component objects.\n    """\n\n    def __init__(self, mediator: Mediator = None) -> None:\n        self._mediator = mediator\n\n    @property\n    def mediator(self) -> Mediator:\n        return self._mediator\n\n    @mediator.setter\n    def mediator(self, mediator: Mediator) -> None:\n        self._mediator = mediator\n\n\n"""\nConcrete Components implement various functionality. They don\'t depend on other\ncomponents. They also don\'t depend on any concrete mediator classes.\n"""\n\n\nclass Component1(BaseComponent):\n    def do_a(self) -> None:\n        print("Component 1 does A.")\n        self.mediator.notify(self, "A")\n\n    def do_b(self) -> None:\n        print("Component 1 does B.")\n        self.mediator.notify(self, "B")\n\n\nclass Component2(BaseComponent):\n    def do_c(self) -> None:\n        print("Component 2 does C.")\n        self.mediator.notify(self, "C")\n\n    def do_d(self) -> None:\n        print("Component 2 does D.")\n        self.mediator.notify(self, "D")\n\n\nif __name__ == "__main__":\n    # The client code.\n    c1 = Component1()\n    c2 = Component2()\n    mediator = ConcreteMediator(c1, c2)\n\n    print("Client triggers operation A.")\n    c1.do_a()\n\n    print("\\n", end="")\n\n    print("Client triggers operation D.")\n    c2.do_d()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Client triggers operation A.\nComponent 1 does A.\nMediator reacts on A and triggers following operations:\nComponent 2 does C.\n\n\nClient triggers operation D.\nComponent 2 does D.\nMediator reacts on D and triggers following operations:\nComponent 1 does B.\nComponent 2 does C.\n")))}l.isMDXComponent=!0}}]);