"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8361],{3905:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},g=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,y=u["".concat(l,".").concat(h)]||u[h]||p[h]||o;return n?r.createElement(y,i(i({ref:t},g),{},{components:n})):r.createElement(y,i({ref:t},g))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},28639:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(83117),a=(n(67294),n(3905));const o={},i="C# Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/cSharp/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Strategy/cSharp",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Strategy/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Strategy/go/"}},l={},c=[],g={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-example"},"C# Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// Strategy Design Pattern\n//\n// Intent: Lets you define a family of algorithms, put each of them into a\n// separate class, and make their objects interchangeable.\n\nusing System;\nusing System.Collections.Generic;\n\nnamespace RefactoringGuru.DesignPatterns.Strategy.Conceptual\n{\n    // The Context defines the interface of interest to clients.\n    class Context\n    {\n        // The Context maintains a reference to one of the Strategy objects. The\n        // Context does not know the concrete class of a strategy. It should\n        // work with all strategies via the Strategy interface.\n        private IStrategy _strategy;\n\n        public Context()\n        { }\n\n        // Usually, the Context accepts a strategy through the constructor, but\n        // also provides a setter to change it at runtime.\n        public Context(IStrategy strategy)\n        {\n            this._strategy = strategy;\n        }\n\n        // Usually, the Context allows replacing a Strategy object at runtime.\n        public void SetStrategy(IStrategy strategy)\n        {\n            this._strategy = strategy;\n        }\n\n        // The Context delegates some work to the Strategy object instead of\n        // implementing multiple versions of the algorithm on its own.\n        public void DoSomeBusinessLogic()\n        {\n            Console.WriteLine("Context: Sorting data using the strategy (not sure how it\'ll do it)");\n            var result = this._strategy.DoAlgorithm(new List<string> { "a", "b", "c", "d", "e" });\n\n            string resultStr = string.Empty;\n            foreach (var element in result as List<string>)\n            {\n                resultStr += element + ",";\n            }\n\n            Console.WriteLine(resultStr);\n        }\n    }\n\n    // The Strategy interface declares operations common to all supported\n    // versions of some algorithm.\n    //\n    // The Context uses this interface to call the algorithm defined by Concrete\n    // Strategies.\n    public interface IStrategy\n    {\n        object DoAlgorithm(object data);\n    }\n\n    // Concrete Strategies implement the algorithm while following the base\n    // Strategy interface. The interface makes them interchangeable in the\n    // Context.\n    class ConcreteStrategyA : IStrategy\n    {\n        public object DoAlgorithm(object data)\n        {\n            var list = data as List<string>;\n            list.Sort();\n\n            return list;\n        }\n    }\n\n    class ConcreteStrategyB : IStrategy\n    {\n        public object DoAlgorithm(object data)\n        {\n            var list = data as List<string>;\n            list.Sort();\n            list.Reverse();\n\n            return list;\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // The client code picks a concrete strategy and passes it to the\n            // context. The client should be aware of the differences between\n            // strategies in order to make the right choice.\n            var context = new Context();\n\n            Console.WriteLine("Client: Strategy is set to normal sorting.");\n            context.SetStrategy(new ConcreteStrategyA());\n            context.DoSomeBusinessLogic();\n\n            Console.WriteLine();\n\n            Console.WriteLine("Client: Strategy is set to reverse sorting.");\n            context.SetStrategy(new ConcreteStrategyB());\n            context.DoSomeBusinessLogic();\n        }\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Client: Strategy is set to normal sorting.\nContext: Sorting data using the strategy (not sure how it'll do it)\na,b,c,d,e\n\nClient: Strategy is set to reverse sorting.\nContext: Sorting data using the strategy (not sure how it'll do it)\ne,d,c,b,a\n")))}p.isMDXComponent=!0}}]);