"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[6154],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(n),d=a,m=h["".concat(l,".").concat(d)]||h[d]||u[d]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},98641:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={},o="Chain of Responsibility design pattern",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/readme",title:"Chain of Responsibility design pattern",description:"- It allows passing of request along the chain of potential handlers until 1 of them handles the request",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility",slug:"/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/ChainOfResponsibility/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Design Patterns",permalink:"/docs/interviewPrep/designPatterns/"},next:{title:"Command pattern",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/"}},l={},p=[{value:"When to use",id:"when-to-use",level:2},{value:"Structure",id:"structure",level:2}],c={toc:p};function u(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"chain-of-responsibility-design-pattern"},"Chain of Responsibility design pattern"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"It allows passing of request along the chain of potential handlers until 1 of them handles the request"),(0,a.kt)("li",{parentName:"ul"},"it allows multiple objects to handle the request without coupling the sender class to the concrete classes of the receivers"),(0,a.kt)("li",{parentName:"ul"},"the chain can be composed dynamically at runtime with any handler that follows a standard handler interface")),(0,a.kt)("h2",{id:"when-to-use"},"When to use"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"when your program is expected to process different kinds of requests in various ways, but the exact types of requests and their sequences are unknown beforehand"),(0,a.kt)("li",{parentName:"ul"},"when it\u2019s essential to execute several handlers in a particular order"),(0,a.kt)("li",{parentName:"ul"},"when the set of handlers and their order are supposed to change at runtime")),(0,a.kt)("h2",{id:"structure"},"Structure"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Chain of Responsibility",src:n(45692).Z,width:"812",height:"892"})),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The Handler declares the interface, common for all concrete handlers."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"It usually contains just a single method for handling requests, but sometimes it may also have another method for setting the next handler on the chain."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The Base Handler is an optional class where you can put the boilerplate code that\u2019s common to all handler classes."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Usually, this class defines a field for storing a reference to the next handler."),(0,a.kt)("li",{parentName:"ul"},"The clients can build a chain by passing a handler to the constructor or setter of the previous handler."),(0,a.kt)("li",{parentName:"ul"},"The class may also implement the default handling behavior: it can pass execution to the next handler after checking for its existence."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Concrete Handlers contain the actual code for processing requests."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Upon receiving a request, each handler must decide whether to process it and, additionally, whether to pass it along the chain."),(0,a.kt)("li",{parentName:"ul"},"Handlers are usually self-contained and immutable, accepting all necessary data just once via the constructor."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The Client may compose chains just once or compose them dynamically, depending on the application\u2019s logic."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Note that a request can be sent to any handler in the chain\u2014it doesn\u2019t have to be the first one.")))))}u.isMDXComponent=!0},45692:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/chain_of_responsibility-fadbcf04b6f07f1d08d0e30f4f7abbcc.png"}}]);