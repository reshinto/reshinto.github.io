"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[62104],{3905:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>m});var r=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function c(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?c(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},c=Object.keys(n);for(r=0;r<c.length;r++)t=c[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(n);for(r=0;r<c.length;r++)t=c[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=r.createContext({}),u=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},d=function(n){var e=u(n.components);return r.createElement(l.Provider,{value:e},n.children)},s={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,c=n.originalType,l=n.parentName,d=o(n,["components","mdxType","originalType","parentName"]),f=u(t),m=a,p=f["".concat(l,".").concat(m)]||f[m]||s[m]||c;return t?r.createElement(p,i(i({ref:e},d),{},{components:t})):r.createElement(p,i({ref:e},d))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var c=t.length,i=new Array(c);i[0]=f;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=n,o.mdxType="string"==typeof n?n:a,i[1]=o;for(var u=2;u<c;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},11196:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>s,frontMatter:()=>c,metadata:()=>o,toc:()=>u});var r=t(83117),a=(t(67294),t(3905));const c={},i="Go Example",o={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Facade/go/readme",id:"interviewPrep/designPatterns/Structural_patterns/Facade/go/readme",title:"Go Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Facade/go/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Facade/go",slug:"/interviewPrep/designPatterns/Structural_patterns/Facade/go/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/go/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Facade/go/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C# Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/cSharp/"},next:{title:"Java Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Facade/java/"}},l={},u=[],d={toc:u};function s(n){let{components:e,...t}=n;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"go-example"},"Go Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\ntype account struct {\n    name string\n}\n\nfunc newAccount(accountName string) *account {\n    return &account{\n        name: accountName,\n    }\n}\n\nfunc (a *account) checkAccount(accountName string) error {\n    if a.name != accountName {\n        return fmt.Errorf("Account Name is incorrect")\n    }\n    fmt.Println("Account Verified")\n    return nil\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\ntype ledger struct {\n}\n\nfunc (s *ledger) makeEntry(accountID, txnType string, amount int) {\n    fmt.Printf("Make ledger entry for accountId %s with txnType %s for amount %d\\n", accountID, txnType, amount)\n    return\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\ntype notification struct {\n}\n\nfunc (n *notification) sendWalletCreditNotification() {\n    fmt.Println("Sending wallet credit notification")\n}\n\nfunc (n *notification) sendWalletDebitNotification() {\n    fmt.Println("Sending wallet debit notification")\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\ntype securityCode struct {\n    code int\n}\n\nfunc newSecurityCode(code int) *securityCode {\n    return &securityCode{\n        code: code,\n    }\n}\n\nfunc (s *securityCode) checkCode(incomingCode int) error {\n    if s.code != incomingCode {\n        return fmt.Errorf("Security Code is incorrect")\n    }\n    fmt.Println("SecurityCode Verified")\n    return nil\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\ntype wallet struct {\n    balance int\n}\n\nfunc newWallet() *wallet {\n    return &wallet{\n        balance: 0,\n    }\n}\n\nfunc (w *wallet) creditBalance(amount int) {\n    w.balance += amount\n    fmt.Println("Wallet balance added successfully")\n    return\n}\n\nfunc (w *wallet) debitBalance(amount int) error {\n    if w.balance < amount {\n        return fmt.Errorf("Balance is not sufficient")\n    }\n    fmt.Println("Wallet balance is Sufficient")\n    w.balance = w.balance - amount\n    return nil\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\ntype walletFacade struct {\n    account      *account\n    wallet       *wallet\n    securityCode *securityCode\n    notification *notification\n    ledger       *ledger\n}\n\nfunc newWalletFacade(accountID string, code int) *walletFacade {\n    fmt.Println("Starting create account")\n    walletFacacde := &walletFacade{\n        account:      newAccount(accountID),\n        securityCode: newSecurityCode(code),\n        wallet:       newWallet(),\n        notification: &notification{},\n        ledger:       &ledger{},\n    }\n    fmt.Println("Account created")\n    return walletFacacde\n}\n\nfunc (w *walletFacade) addMoneyToWallet(accountID string, securityCode int, amount int) error {\n    fmt.Println("Starting add money to wallet")\n    err := w.account.checkAccount(accountID)\n    if err != nil {\n        return err\n    }\n    err = w.securityCode.checkCode(securityCode)\n    if err != nil {\n        return err\n    }\n    w.wallet.creditBalance(amount)\n    w.notification.sendWalletCreditNotification()\n    w.ledger.makeEntry(accountID, "credit", amount)\n    return nil\n}\n\nfunc (w *walletFacade) deductMoneyFromWallet(accountID string, securityCode int, amount int) error {\n    fmt.Println("Starting debit money from wallet")\n    err := w.account.checkAccount(accountID)\n    if err != nil {\n        return err\n    }\n\n    err = w.securityCode.checkCode(securityCode)\n    if err != nil {\n        return err\n    }\n    err = w.wallet.debitBalance(amount)\n    if err != nil {\n        return err\n    }\n    w.notification.sendWalletDebitNotification()\n    w.ledger.makeEntry(accountID, "credit", amount)\n    return nil\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "log"\n)\n\nfunc main() {\n    fmt.Println()\n    walletFacade := newWalletFacade("abc", 1234)\n    fmt.Println()\n\n    err := walletFacade.addMoneyToWallet("abc", 1234, 10)\n    if err != nil {\n        log.Fatalf("Error: %s\\n", err.Error())\n    }\n\n    fmt.Println()\n    err = walletFacade.deductMoneyFromWallet("abc", 1234, 5)\n    if err != nil {\n        log.Fatalf("Error: %s\\n", err.Error())\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Starting create account\nAccount created\n\nStarting add money to wallet\nAccount Verified\nSecurityCode Verified\nWallet balance added successfully\nSending wallet credit notification\nMake ledger entry for accountId abc with txnType credit for amount 10\n\nStarting debit money from wallet\nAccount Verified\nSecurityCode Verified\nWallet balance is Sufficient\nSending wallet debit notification\nMake ledger entry for accountId abc with txnType debit for amount 5\n")))}s.isMDXComponent=!0}}]);