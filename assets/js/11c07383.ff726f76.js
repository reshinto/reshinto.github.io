"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[992],{3905:(e,r,n)=>{n.d(r,{Zo:()=>u,kt:()=>m});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=t.createContext({}),c=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},u=function(e){var r=c(e.components);return t.createElement(l.Provider,{value:r},e.children)},y={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,d=p["".concat(l,".").concat(m)]||p[m]||y[m]||i;return n?t.createElement(d,o(o({ref:r},u),{},{components:n})):t.createElement(d,o({ref:r},u))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5699:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>y,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var t=n(7462),a=(n(7294),n(3905));const i={},o="Monotonic Array",s={unversionedId:"interviewPrep/codingTests/medium/arrays/monotonicArray",id:"interviewPrep/codingTests/medium/arrays/monotonicArray",title:"Monotonic Array",description:"Write a function that takes in an array of integers and returns a boolean",source:"@site/docs/interviewPrep/codingTests/medium/arrays/monotonicArray.md",sourceDirName:"interviewPrep/codingTests/medium/arrays",slug:"/interviewPrep/codingTests/medium/arrays/monotonicArray",permalink:"/docs/interviewPrep/codingTests/medium/arrays/monotonicArray",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/codingTests/medium/arrays/monotonicArray.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Longest Peak",permalink:"/docs/interviewPrep/codingTests/medium/arrays/longestPeak"},next:{title:"Move Element To End",permalink:"/docs/interviewPrep/codingTests/medium/arrays/moveElementToEnd"}},l={},c=[],u={toc:c};function y(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"monotonic-array"},"Monotonic Array"),(0,a.kt)("p",null,"  Write a function that takes in an array of integers and returns a boolean\nrepresenting whether the array is monotonic."),(0,a.kt)("p",null,"  An array is said to be monotonic if its elements, from left to right, are\nentirely non-increasing or entirely non-decreasing."),(0,a.kt)("p",null,"  Non-increasing elements aren't necessarily exclusively decreasing; they simply\ndon't increase. Similarly, non-decreasing elements aren't necessarily\nexclusively increasing; they simply don't decrease."),(0,a.kt)("p",null,"  Note that empty arrays and arrays of one element are monotonic."),(0,a.kt)("p",null,"  Sample Input\n",(0,a.kt)("inlineCode",{parentName:"p"},"array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001]")),(0,a.kt)("p",null,"  Sample Output\n",(0,a.kt)("inlineCode",{parentName:"p"},"true")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def isMonotonic(array):\n  # Write your code here.\n  length = len(array)\n  if length <= 2:\n    return True\n  isEqual = True if array[0] == array[length - 1] else False\n  isIncrease = True if array[0] < array[length - 1] else False\n  isDecrease = True if array[0] > array[length - 1] else False\n  for i in range(1, length):\n    if isIncrease and array[i-1] > array[i]:\n      return False\n    elif isDecrease and array[i-1] < array[i]:\n      return False\n    elif isEqual and array[i-1] != array[i]:\n      return False\n  return True\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"function isMonotonic(array) {\n  // Write your code here.\n  const len = array.length;\n  if (len <= 2) {\n    return true;\n  }\n  let isEqual = array[0] === array[len - 1] ? true : false;\n  let isIncrease = array[0] < array[len - 1] ? true : false;\n  let isDecrease = array[0] > array[len - 1] ? true : false;\n  for (let i=1; i<len; i++) {\n    if (isIncrease && array[i-1] > array[i]) {\n      return false;\n    } else if (isDecrease && array[i-1] < array[i]) {\n      return false;\n    } else if (isEqual && array[i-1] !== array[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n")))}y.isMDXComponent=!0}}]);