"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9780],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>v});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),m=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=m(e.components);return r.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=m(t),v=o,u=d["".concat(c,".").concat(v)]||d[v]||l[v]||i;return t?r.createElement(u,a(a({ref:n},p),{},{components:t})):r.createElement(u,a({ref:n},p))}));function v(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var m=2;m<i;m++)a[m]=t[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},52429:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var r=t(83117),o=(t(67294),t(3905));const i={},a="TypeScript Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Command/typescript/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Command/typescript/readme",title:"TypeScript Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/typescript/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Command/typescript",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Command/typescript/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/typescript/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/typescript/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/swift/example2"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Command/typescript/example2"}},c={},m=[],p={toc:m};function l(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"typescript-example"},"TypeScript Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Command Design Pattern\n *\n * Intent: Turns a request into a stand-alone object that contains all\n * information about the request. This transformation lets you parameterize\n * methods with different requests, delay or queue a request\'s execution, and\n * support undoable operations.\n */\n\n/**\n * The Command interface declares a method for executing a command.\n */\ninterface Command {\n  execute(): void;\n}\n\n/**\n * Some commands can implement simple operations on their own.\n */\nclass SimpleCommand implements Command {\n  private payload: string;\n\n  constructor(payload: string) {\n    this.payload = payload;\n  }\n\n  public execute(): void {\n    console.log(\n      `SimpleCommand: See, I can do simple things like printing (${this.payload})`\n    );\n  }\n}\n\n/**\n * However, some commands can delegate more complex operations to other objects,\n * called "receivers."\n */\nclass ComplexCommand implements Command {\n  private receiver: Receiver;\n\n  /**\n   * Context data, required for launching the receiver\'s methods.\n   */\n  private a: string;\n\n  private b: string;\n\n  /**\n   * Complex commands can accept one or several receiver objects along with\n   * any context data via the constructor.\n   */\n  constructor(receiver: Receiver, a: string, b: string) {\n    this.receiver = receiver;\n    this.a = a;\n    this.b = b;\n  }\n\n  /**\n   * Commands can delegate to any methods of a receiver.\n   */\n  public execute(): void {\n    console.log(\n      "ComplexCommand: Complex stuff should be done by a receiver object."\n    );\n    this.receiver.doSomething(this.a);\n    this.receiver.doSomethingElse(this.b);\n  }\n}\n\n/**\n * The Receiver classes contain some important business logic. They know how to\n * perform all kinds of operations, associated with carrying out a request. In\n * fact, any class may serve as a Receiver.\n */\nclass Receiver {\n  public doSomething(a: string): void {\n    console.log(`Receiver: Working on (${a}.)`);\n  }\n\n  public doSomethingElse(b: string): void {\n    console.log(`Receiver: Also working on (${b}.)`);\n  }\n}\n\n/**\n * The Invoker is associated with one or several commands. It sends a request to\n * the command.\n */\nclass Invoker {\n  private onStart: Command;\n\n  private onFinish: Command;\n\n  /**\n   * Initialize commands.\n   */\n  public setOnStart(command: Command): void {\n    this.onStart = command;\n  }\n\n  public setOnFinish(command: Command): void {\n    this.onFinish = command;\n  }\n\n  /**\n   * The Invoker does not depend on concrete command or receiver classes. The\n   * Invoker passes a request to a receiver indirectly, by executing a\n   * command.\n   */\n  public doSomethingImportant(): void {\n    console.log("Invoker: Does anybody want something done before I begin?");\n    if (this.isCommand(this.onStart)) {\n      this.onStart.execute();\n    }\n\n    console.log("Invoker: ...doing something really important...");\n\n    console.log("Invoker: Does anybody want something done after I finish?");\n    if (this.isCommand(this.onFinish)) {\n      this.onFinish.execute();\n    }\n  }\n\n  private isCommand(object): object is Command {\n    return object.execute !== undefined;\n  }\n}\n\n/**\n * The client code can parameterize an invoker with any commands.\n */\nconst invoker = new Invoker();\ninvoker.setOnStart(new SimpleCommand("Say Hi!"));\nconst receiver = new Receiver();\ninvoker.setOnFinish(new ComplexCommand(receiver, "Send email", "Save report"));\n\ninvoker.doSomethingImportant();\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Invoker: Does anybody want something done before I begin?\nSimpleCommand: See, I can do simple things like printing (Say Hi!)\nInvoker: ...doing something really important...\nInvoker: Does anybody want something done after I finish?\nComplexCommand: Complex stuff should be done by a receiver object.\nReceiver: Working on (Send email.)\nReceiver: Also working on (Save report.)\n")))}l.isMDXComponent=!0}}]);