"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[92423],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(r),f=i,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||o;return r?n.createElement(m,a(a({ref:t},s),{},{components:r})):n.createElement(m,a({ref:t},s))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7182:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(83117),i=(r(67294),r(3905));const o={},a="Interface Segregation Principle",l={unversionedId:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/readme",id:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/readme",title:"Interface Segregation Principle",description:"- no client should be forced to depend on methods it does not use",source:"@site/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/readme.md",sourceDirName:"interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple",slug:"/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/",permalink:"/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/design_principles/SOLID/InterfaceSegregationPrinciple/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dependency Inversion Principle",permalink:"/docs/interviewPrep/design_principles/SOLID/DependencyInversionPrinciple/"},next:{title:"Liskov Substitution Principle",permalink:"/docs/interviewPrep/design_principles/SOLID/LiskovSubstitutionPrinciple/"}},p={},c=[{value:"Purpose",id:"purpose",level:2}],s={toc:c};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"interface-segregation-principle"},"Interface Segregation Principle"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"no client should be forced to depend on methods it does not use"),(0,i.kt)("li",{parentName:"ul"},"this helps to split interfaces that are very large into smaller and more specific ones",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"so that clients will only have to know about the methods that are of interest to them",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"also referred to as ",(0,i.kt)("inlineCode",{parentName:"li"},"role interfaces"))))))),(0,i.kt)("h2",{id:"purpose"},"Purpose"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the purpose is to",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"keep a system decoupled"),(0,i.kt)("li",{parentName:"ul"},"allow easy refactor, change, and redeploy")))))}u.isMDXComponent=!0}}]);