"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[77585],{3905:(t,e,r)=>{r.d(e,{Zo:()=>l,kt:()=>f});var n=r(67294);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function c(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var i=n.createContext({}),u=function(t){var e=n.useContext(i),r=e;return t&&(r="function"==typeof t?t(e):c(c({},e),t)),r},l=function(t){var e=u(t.components);return n.createElement(i.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},p=n.forwardRef((function(t,e){var r=t.components,o=t.mdxType,a=t.originalType,i=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),p=u(r),f=o,h=p["".concat(i,".").concat(f)]||p[f]||d[f]||a;return r?n.createElement(h,c(c({ref:e},l),{},{components:r})):n.createElement(h,c({ref:e},l))}));function f(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=r.length,c=new Array(a);c[0]=p;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s.mdxType="string"==typeof t?t:o,c[1]=s;for(var u=2;u<a;u++)c[u]=r[u];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},35934:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=r(83117),o=(r(67294),r(3905));const a={},c="Swift Example",s={unversionedId:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/readme",id:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/readme",title:"Swift Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/readme.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift",slug:"/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/python/example2"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/AbstractFactory/swift/example2"}},i={},u=[],l={toc:u};function d(t){let{components:e,...r}=t;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"swift-example"},"Swift Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'/// Abstract Factory Design Pattern\n///\n/// Intent: Lets you produce families of related objects without specifying\n/// their concrete classes.\n\nimport XCTest\n\n/// The Abstract Factory protocol declares a set of methods that return\n/// different abstract products. These products are called a family and are\n/// related by a high-level theme or concept. Products of one family are usually\n/// able to collaborate among themselves. A family of products may have several\n/// variants, but the products of one variant are incompatible with products of\n/// another.\nprotocol AbstractFactory {\n\n    func createProductA() -> AbstractProductA\n    func createProductB() -> AbstractProductB\n}\n\n/// Concrete Factories produce a family of products that belong to a single\n/// variant. The factory guarantees that resulting products are compatible. Note\n/// that signatures of the Concrete Factory\'s methods return an abstract\n/// product, while inside the method a concrete product is instantiated.\nclass ConcreteFactory1: AbstractFactory {\n\n    func createProductA() -> AbstractProductA {\n        return ConcreteProductA1()\n    }\n\n    func createProductB() -> AbstractProductB {\n        return ConcreteProductB1()\n    }\n}\n\n/// Each Concrete Factory has a corresponding product variant.\nclass ConcreteFactory2: AbstractFactory {\n\n    func createProductA() -> AbstractProductA {\n        return ConcreteProductA2()\n    }\n\n    func createProductB() -> AbstractProductB {\n        return ConcreteProductB2()\n    }\n}\n\n/// Each distinct product of a product family should have a base protocol. All\n/// variants of the product must implement this protocol.\nprotocol AbstractProductA {\n\n    func usefulFunctionA() -> String\n}\n\n/// Concrete Products are created by corresponding Concrete Factories.\nclass ConcreteProductA1: AbstractProductA {\n\n    func usefulFunctionA() -> String {\n        return "The result of the product A1."\n    }\n}\n\nclass ConcreteProductA2: AbstractProductA {\n\n    func usefulFunctionA() -> String {\n        return "The result of the product A2."\n    }\n}\n\n/// The base protocol of another product. All products can interact with each\n/// other, but proper interaction is possible only between products of the same\n/// concrete variant.\nprotocol AbstractProductB {\n\n    /// Product B is able to do its own thing...\n    func usefulFunctionB() -> String\n\n    /// ...but it also can collaborate with the ProductA.\n    ///\n    /// The Abstract Factory makes sure that all products it creates are of the\n    /// same variant and thus, compatible.\n    func anotherUsefulFunctionB(collaborator: AbstractProductA) -> String\n}\n\n/// Concrete Products are created by corresponding Concrete Factories.\nclass ConcreteProductB1: AbstractProductB {\n\n    func usefulFunctionB() -> String {\n        return "The result of the product B1."\n    }\n\n    /// This variant, Product B1, is only able to work correctly with the\n    /// variant, Product A1. Nevertheless, it accepts any instance of\n    /// AbstractProductA as an argument.\n    func anotherUsefulFunctionB(collaborator: AbstractProductA) -> String {\n        let result = collaborator.usefulFunctionA()\n        return "The result of the B1 collaborating with the (\\(result))"\n    }\n}\n\nclass ConcreteProductB2: AbstractProductB {\n\n    func usefulFunctionB() -> String {\n        return "The result of the product B2."\n    }\n\n    /// This variant, Product B2, is only able to work correctly with the\n    /// variant, Product A2. Nevertheless, it accepts any instance of\n    /// AbstractProductA as an argument.\n    func anotherUsefulFunctionB(collaborator: AbstractProductA) -> String {\n        let result = collaborator.usefulFunctionA()\n        return "The result of the B2 collaborating with the (\\(result))"\n    }\n}\n\n/// The client code works with factories and products only through abstract\n/// types: AbstractFactory and AbstractProduct. This lets you pass any factory\n/// or product subclass to the client code without breaking it.\nclass Client {\n    // ...\n    static func someClientCode(factory: AbstractFactory) {\n        let productA = factory.createProductA()\n        let productB = factory.createProductB()\n\n        print(productB.usefulFunctionB())\n        print(productB.anotherUsefulFunctionB(collaborator: productA))\n    }\n    // ...\n}\n\n/// Let\'s see how it all works together.\nclass AbstractFactoryConceptual: XCTestCase {\n\n    func testAbstractFactoryConceptual() {\n\n        /// The client code can work with any concrete factory class.\n\n        print("Client: Testing client code with the first factory type:")\n        Client.someClientCode(factory: ConcreteFactory1())\n\n        print("Client: Testing the same client code with the second factory type:")\n        Client.someClientCode(factory: ConcreteFactory2())\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Client: Testing client code with the first factory type:\nThe result of the product B1.\nThe result of the B1 collaborating with the (The result of the product A1.)\nClient: Testing the same client code with the second factory type:\nThe result of the product B2.\nThe result of the B2 collaborating with the (The result of the product A2.)\n")))}d.isMDXComponent=!0}}]);