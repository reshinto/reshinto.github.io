"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[8574],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),u=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(a),m=l,h=c["".concat(o,".").concat(m)]||c[m]||p[m]||i;return a?n.createElement(h,r(r({ref:t},d),{},{components:a})):n.createElement(h,r({ref:t},d))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:l,r[1]=s;for(var u=2;u<i;u++)r[u]=a[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2465:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=a(83117),l=(a(67294),a(3905));const i={},r="Relational Databases",s={unversionedId:"interviewPrep/system_design/12RelationalDatabases/readme",id:"interviewPrep/system_design/12RelationalDatabases/readme",title:"Relational Databases",description:"- it is a type of database that imposes on the data stored in it",source:"@site/docs/interviewPrep/system_design/12RelationalDatabases/readme.md",sourceDirName:"interviewPrep/system_design/12RelationalDatabases",slug:"/interviewPrep/system_design/12RelationalDatabases/",permalink:"/docs/interviewPrep/system_design/12RelationalDatabases/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/system_design/12RelationalDatabases/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Rendezvous Hashing example",permalink:"/docs/interviewPrep/system_design/11Hashing/rendezvousHashingExample/"},next:{title:"PostgreSQL Relational Database example",permalink:"/docs/interviewPrep/system_design/12RelationalDatabases/example/"}},o={},u=[{value:"SQL databases must use ACID transactions",id:"sql-databases-must-use-acid-transactions",level:3},{value:"Atomicity",id:"atomicity",level:4},{value:"Consistency",id:"consistency",level:4},{value:"Isolation",id:"isolation",level:4},{value:"Durability",id:"durability",level:4},{value:"Database Index",id:"database-index",level:3},{value:"Cons of using database index",id:"cons-of-using-database-index",level:4},{value:"types of indexes",id:"types-of-indexes",level:4},{value:"Terms used",id:"terms-used",level:2},{value:"Databases",id:"databases",level:3},{value:"Disk",id:"disk",level:3},{value:"Memory",id:"memory",level:3},{value:"Non-Relational Database",id:"non-relational-database",level:3},{value:"SQL (Structured Query Language)",id:"sql-structured-query-language",level:3},{value:"SQL Database",id:"sql-database",level:3},{value:"NoSQL Database",id:"nosql-database",level:3},{value:"Strong Consistency",id:"strong-consistency",level:3},{value:"Eventual Consistency",id:"eventual-consistency",level:3},{value:"Postgres",id:"postgres",level:3}],d={toc:u};function p(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"relational-databases"},"Relational Databases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"it is a type of database that imposes on the data stored in it"),(0,l.kt)("li",{parentName:"ul"},"a tabular like structure"),(0,l.kt)("li",{parentName:"ul"},"data stored in a relational database is gonna be stored in the form of tables",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"a table typcially represent a specific entity",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"rows in a table represent instances of the entities that the respective tables represent",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"rows in relational databases are often referred to as records"))),(0,l.kt)("li",{parentName:"ul"},"columns in a table represent attributes of the entities that the respective tables represent"),(0,l.kt)("li",{parentName:"ul"},"all tables stored in the relational databases are going to have defined schemas",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the specific rules and plans about how the data should be stored in them"))))),(0,l.kt)("li",{parentName:"ul"},"when dealing with a relational database, and defined a table, any entry in that table must conform to the table's schema",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"have to add an additional column if in need for additional field"))))),(0,l.kt)("li",{parentName:"ul"},"most relational database supports SQL (Structure Query Language) a databse or query language that comes with powerful querying capabilities",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"used to perform complex queries on the data stored in the database without having to load the data in memory")))),(0,l.kt)("h3",{id:"sql-databases-must-use-acid-transactions"},"SQL databases must use ACID transactions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"ACID transaction is a transaction or operation in a database that has 4 properties")),(0,l.kt)("h4",{id:"atomicity"},"Atomicity"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the operations that constitute the transaction with either all succeed or all fail"),(0,l.kt)("li",{parentName:"ul"},"there is no in-between state"),(0,l.kt)("li",{parentName:"ul"},"e.g.: a bank transfer transaction from 1 bank account to another bank account",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"during this transaction, should it fail at any point before completion, the entire transaction will fail"),(0,l.kt)("li",{parentName:"ul"},"the entire transaction is effectively rolled back"),(0,l.kt)("li",{parentName:"ul"},"only when the all operations in the transaction passes, will the entire transaction pass")))),(0,l.kt)("h4",{id:"consistency"},"Consistency"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the transaction cannot bring the database to an invalid state"),(0,l.kt)("li",{parentName:"ul"},"after the transaction is committed or rolled back",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the rules for each record will still apply, and all future transactions will take into account any past transactions in the database"),(0,l.kt)("li",{parentName:"ul"},"there will be not stale state in the database where 1 transaction has executed but another transaction doesn't know that it's executed")))),(0,l.kt)("h4",{id:"isolation"},"Isolation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the execution of multiple transactions concurrently will have the same effect as if they had been executed sequentially like in a queue")),(0,l.kt)("h4",{id:"durability"},"Durability"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"any committed transaction is written to non-volatile storage, effects of that transaction are permanent"),(0,l.kt)("li",{parentName:"ul"},"it will not be undone by a crash, power loss, or network partition")),(0,l.kt)("h3",{id:"database-index"},"Database Index"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a special auxiliary data structure can be created allow your database to perform certain queries much faster"),(0,l.kt)("li",{parentName:"ul"},"indexes can typically only exist to reference structured data, like data stored in relational databses"),(0,l.kt)("li",{parentName:"ul"},"in practice, you create an index on 1 or multiple columns in your database to greatly speed up read queries that you run very often",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"with the downside of slightly longer writes to your database, since writes have to also take place in relevant index")))),(0,l.kt)("h4",{id:"cons-of-using-database-index"},"Cons of using database index"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"because it is an auxiliary data structure, it will take up more space"),(0,l.kt)("li",{parentName:"ul"},"it also mean that whenever you write to the database or store data in the table that has a database index",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"you also need to write in the database index"),(0,l.kt)("li",{parentName:"ul"},"as a result causing the write operations to be a bit slower and take up more space")))),(0,l.kt)("h4",{id:"types-of-indexes"},"types of indexes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"each types have their own ways of implementation"),(0,l.kt)("li",{parentName:"ul"},"e.g.: bitmap indexes, reverse indexes, dense indexes")),(0,l.kt)("h2",{id:"terms-used"},"Terms used"),(0,l.kt)("h3",{id:"databases"},"Databases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"is a program that either use disk or memory to do 2 core things",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"record data and query data"))),(0,l.kt)("li",{parentName:"ul"},"they are also servers that are long lived and interact with the rest of the application through network calls",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"with protocols on top of TCP or even HTTP"))),(0,l.kt)("li",{parentName:"ul"},"some databases only keep records in memory",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"users of such databases are aware of the fact that those records may be lost forever if the machine or process dies"))),(0,l.kt)("li",{parentName:"ul"},"databases need persistence of those records and cannot use memory",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"this means that you have to write data to disk"),(0,l.kt)("li",{parentName:"ul"},"anything written to disk will remain during power loss or network partitions"))),(0,l.kt)("li",{parentName:"ul"},"since machinese die often in a large scale system",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"special disk partitions or volumes are used by the database processes"),(0,l.kt)("li",{parentName:"ul"},"those volumes can get recovered even if the machine were to go down permanently")))),(0,l.kt)("h3",{id:"disk"},"Disk"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"usually refers to either HDD (Hard-disk drive) or SSD (Solid-state drive)"),(0,l.kt)("li",{parentName:"ul"},"data written to disk will persist during power failures and general machine crashes"),(0,l.kt)("li",{parentName:"ul"},"disk is also referred to as non-volatile storage"),(0,l.kt)("li",{parentName:"ul"},"SSD is far faster than HDD but also far more expensive from a financial point of view"),(0,l.kt)("li",{parentName:"ul"},"thus HDD will typically be used for data that's rarely accessed or updated",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"but is stored for a long time"),(0,l.kt)("li",{parentName:"ul"},"SSD is used for data that's frequently accessed and updated")))),(0,l.kt)("h3",{id:"memory"},"Memory"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"short for RAM (Random Access Memory)"),(0,l.kt)("li",{parentName:"ul"},"data stored in memory will be lost when the process that has written that data dies")),(0,l.kt)("h3",{id:"non-relational-database"},"Non-Relational Database"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"in contrast with relational database (SQL databases), it is a type of databse that is free of imposed, tabular-like structure"),(0,l.kt)("li",{parentName:"ul"},"non-relational databases are often referred to as NoSQL databases"),(0,l.kt)("li",{parentName:"ul"},"1 example is ",(0,l.kt)("a",{parentName:"li",href:"https://cloud.google.com/datastore"},"Google Cloud Datastore"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"this only had ",(0,l.kt)("inlineCode",{parentName:"li"},"Eventual Consistency"))))),(0,l.kt)("h3",{id:"sql-structured-query-language"},"SQL (Structured Query Language)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"relational databases can be used using a derivative of SQL such as PostgreSQL in the case of Postgres")),(0,l.kt)("h3",{id:"sql-database"},"SQL Database"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"any database that supports SQL"),(0,l.kt)("li",{parentName:"ul"},"this term is often used synonymously with relational databse"),(0,l.kt)("li",{parentName:"ul"},"in practice, not every relational database supports SQL")),(0,l.kt)("h3",{id:"nosql-database"},"NoSQL Database"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"any databse that is not SQL compatible is called NoSQL"),(0,l.kt)("li",{parentName:"ul"},"usually comes with their own special querying language",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"usually does not support complex queries",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"although 1 could write their own python or javascript to perform complex queries",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"however, when dealing with large scale distributed system, you might have terabytes of data",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"writing a python script to query this data, would need to load that data in memory, which is pretty much impossible")))))))))),(0,l.kt)("h3",{id:"strong-consistency"},"Strong Consistency"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"usually refers to the consistency of ACID transactions as opposed to Eventual Consistency")),(0,l.kt)("h3",{id:"eventual-consistency"},"Eventual Consistency"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a consistency model which is unlike Strong Consistency"),(0,l.kt)("li",{parentName:"ul"},"in this model, reads might return a view of the system that is stale"),(0,l.kt)("li",{parentName:"ul"},"an eventually consistent datastore will give guarantees that the state of the database will eventually reflect writes within a time period (could be 10 seconds or minutes)")),(0,l.kt)("h3",{id:"postgres"},"Postgres"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a relational databse that uses a dialet of SQL called PostgresSql"),(0,l.kt)("li",{parentName:"ul"},"provides ACID transactions")))}p.isMDXComponent=!0}}]);