"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[1169],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,f=d["".concat(i,".").concat(h)]||d[h]||p[h]||a;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},15819:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={},s="Python Example",c={unversionedId:"interviewPrep/designPatterns/Structural_patterns/Proxy/python/readme",id:"interviewPrep/designPatterns/Structural_patterns/Proxy/python/readme",title:"Python Example",description:"",source:"@site/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/python/readme.md",sourceDirName:"interviewPrep/designPatterns/Structural_patterns/Proxy/python",slug:"/interviewPrep/designPatterns/Structural_patterns/Proxy/python/",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/python/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/python/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript Example",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/javascript/"},next:{title:"Example 2",permalink:"/docs/interviewPrep/designPatterns/Structural_patterns/Proxy/python/example2"}},i={},l=[],u={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"python-example"},"Python Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'"""\nProxy Design Pattern\n\nIntent: Provide a surrogate or placeholder for another object to control access\nto the original object or to add other responsibilities.\n"""\n\n\nfrom abc import ABC, abstractmethod\n\n\nclass Subject(ABC):\n    """\n    The Subject interface declares common operations for both RealSubject and\n    the Proxy. As long as the client works with RealSubject using this\n    interface, you\'ll be able to pass it a proxy instead of a real subject.\n    """\n\n    @abstractmethod\n    def request(self) -> None:\n        pass\n\n\nclass RealSubject(Subject):\n    """\n    The RealSubject contains some core business logic. Usually, RealSubjects are\n    capable of doing some useful work which may also be very slow or sensitive -\n    e.g. correcting input data. A Proxy can solve these issues without any\n    changes to the RealSubject\'s code.\n    """\n\n    def request(self) -> None:\n        print("RealSubject: Handling request.")\n\n\nclass Proxy(Subject):\n    """\n    The Proxy has an interface identical to the RealSubject.\n    """\n\n    def __init__(self, real_subject: RealSubject) -> None:\n        self._real_subject = real_subject\n\n    def request(self) -> None:\n        """\n        The most common applications of the Proxy pattern are lazy loading,\n        caching, controlling the access, logging, etc. A Proxy can perform one\n        of these things and then, depending on the result, pass the execution to\n        the same method in a linked RealSubject object.\n        """\n\n        if self.check_access():\n            self._real_subject.request()\n            self.log_access()\n\n    def check_access(self) -> bool:\n        print("Proxy: Checking access prior to firing a real request.")\n        return True\n\n    def log_access(self) -> None:\n        print("Proxy: Logging the time of request.", end="")\n\n\ndef client_code(subject: Subject) -> None:\n    """\n    The client code is supposed to work with all objects (both subjects and\n    proxies) via the Subject interface in order to support both real subjects\n    and proxies. In real life, however, clients mostly work with their real\n    subjects directly. In this case, to implement the pattern more easily, you\n    can extend your proxy from the real subject\'s class.\n    """\n\n    # ...\n\n    subject.request()\n\n    # ...\n\n\nif __name__ == "__main__":\n    print("Client: Executing the client code with a real subject:")\n    real_subject = RealSubject()\n    client_code(real_subject)\n\n    print("")\n\n    print("Client: Executing the same client code with a proxy:")\n    proxy = Proxy(real_subject)\n    client_code(proxy)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Client: Executing the client code with a real subject:\nRealSubject: Handling request.\n\nClient: Executing the same client code with a proxy:\nProxy: Checking access prior to firing a real request.\nRealSubject: Handling request.\nProxy: Logging the time of request.\n")))}p.isMDXComponent=!0}}]);