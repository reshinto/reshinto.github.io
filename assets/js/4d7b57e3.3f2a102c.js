"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[47603],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),m=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=m(a),d=r,b=u["".concat(i,".").concat(d)]||u[d]||c[d]||l;return a?n.createElement(b,s(s({ref:t},p),{},{components:a})):n.createElement(b,s({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var m=2;m<l;m++)s[m]=a[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},98092:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var n=a(83117),r=(a(67294),a(3905));const l={},s="PostgreSQL Relational Database example",o={unversionedId:"interviewPrep/system_design/storage/databases/12RelationalDatabases/example/readme",id:"interviewPrep/system_design/storage/databases/12RelationalDatabases/example/readme",title:"PostgreSQL Relational Database example",description:"how to run",source:"@site/docs/interviewPrep/system_design/storage/databases/12RelationalDatabases/example/readme.md",sourceDirName:"interviewPrep/system_design/storage/databases/12RelationalDatabases/example",slug:"/interviewPrep/system_design/storage/databases/12RelationalDatabases/example/",permalink:"/docs/interviewPrep/system_design/storage/databases/12RelationalDatabases/example/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/system_design/storage/databases/12RelationalDatabases/example/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Relational Databases",permalink:"/docs/interviewPrep/system_design/storage/databases/12RelationalDatabases/"},next:{title:"SQL Databases Scalability and Availability",permalink:"/docs/interviewPrep/system_design/storage/databases/12RelationalDatabases/scalabilityAndAvailability"}},i={},m=[{value:"how to run",id:"how-to-run",level:2},{value:"Atomicity example",id:"atomicity-example",level:2},{value:"Isolation example",id:"isolation-example",level:2},{value:"SQL code examples",id:"sql-code-examples",level:2},{value:"Tables",id:"tables",level:3},{value:"Queries",id:"queries",level:3}],p={toc:m};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"postgresql-relational-database-example"},"PostgreSQL Relational Database example"),(0,r.kt)("h2",{id:"how-to-run"},"how to run"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install postgresql",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"brew install postgresql"))),(0,r.kt)("li",{parentName:"ul"},"Start postgresql server",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"brew services start postgresql"))),(0,r.kt)("li",{parentName:"ul"},"Create database",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"createdb database_name"))),(0,r.kt)("li",{parentName:"ul"},"Load sql file into database",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"psql -d database_name -a -f tables.sql"))),(0,r.kt)("li",{parentName:"ul"},"Connect to database",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"psql -d database_name"))),(0,r.kt)("li",{parentName:"ul"},"Run queries from queries.sql by copy and paste")),(0,r.kt)("h2",{id:"atomicity-example"},"Atomicity example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"open 2 terminals, both connected to the same database"),(0,r.kt)("li",{parentName:"ul"},"1 starts the ",(0,r.kt)("inlineCode",{parentName:"li"},"BEGIN TRANSACTION")," while the other does not"),(0,r.kt)("li",{parentName:"ul"},"after updating the one that has began transaction, the other does not reflect the results",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this is because ",(0,r.kt)("inlineCode",{parentName:"li"},"COMMIT")," has not been initiated and thus the transaction has not been fully completed, displaying the atomicity feature")))),(0,r.kt)("h2",{id:"isolation-example"},"Isolation example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"open 2 terminals, both connected to the same database"),(0,r.kt)("li",{parentName:"ul"},"both start the ",(0,r.kt)("inlineCode",{parentName:"li"},"BEGIN TRANSACTION")),(0,r.kt)("li",{parentName:"ul"},"update the 1st terminal, then try updating the 2nd terminal",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the 1st terminal will be updated successfully"),(0,r.kt)("li",{parentName:"ul"},"the 2nd terminal will hang"),(0,r.kt)("li",{parentName:"ul"},"this means that transactions could be run concurrently, but effectively they will be executed sequentially"))),(0,r.kt)("li",{parentName:"ul"},"2nd terminal will only complete after the 1st terminal perform a ",(0,r.kt)("inlineCode",{parentName:"li"},"COMMIT;"))),(0,r.kt)("h2",{id:"sql-code-examples"},"SQL code examples"),(0,r.kt)("h3",{id:"tables"},"Tables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE payments (\n    customer_name varchar(128),\n    processed_at date,\n    amount int\n);\n\nCREATE TABLE balances (\n    username varchar(128),\n    balance int\n);\n\nCREATE TABLE large_table (\n    random_int int\n);\n\nINSERT INTO payments VALUES ('clement', '2019-12-15', 10);\nINSERT INTO payments VALUES ('antoine', '2020-01-01', 100);\nINSERT INTO payments VALUES ('clement', '2020-01-02', 10);\nINSERT INTO payments VALUES ('antoine', '2020-01-02', 100);\nINSERT INTO payments VALUES ('antoine', '2020-01-03', 100);\nINSERT INTO payments VALUES ('simon', '2020-02-05', 1000);\nINSERT INTO payments VALUES ('antoine', '2020-02-01', 100);\nINSERT INTO payments VALUES ('clement', '2020-02-03', 10);\nINSERT INTO payments VALUES ('meghan', '2020-01-12', 80);\nINSERT INTO payments VALUES ('meghan', '2020-01-13', 70);\nINSERT INTO payments VALUES ('meghan', '2020-01-14', 90);\nINSERT INTO payments VALUES ('alex', '2019-12-11', 10);\nINSERT INTO payments VALUES ('clement', '2020-02-01', 10);\nINSERT INTO payments VALUES ('marli', '2020-01-18', 10);\nINSERT INTO payments VALUES ('alex', '2019-12-15', 10);\nINSERT INTO payments VALUES ('marli', '2020-01-25', 10);\nINSERT INTO payments VALUES ('marli', '2020-02-02', 10);\n\nINSERT INTO balances VALUES ('antoine', 0);\nINSERT INTO balances VALUES ('clement', 1000);\n\nINSERT INTO large_table (random_int)\nSELECT round(random() * 1000000000)\nFROM generate_series(1, 50000000) s(i);\n")),(0,r.kt)("h3",{id:"queries"},"Queries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"/*\nPowerful Queries\n*/\n\n-- Sum the number of payments for each user.\nSELECT customer_name, count(*)\nFROM payments\nGROUP BY customer_name\nORDER BY count DESC;\n\n-- Sum the payment amounts for each month.\nSELECT sum(amount), extract(year from processed_at) as year, extract(month from processed_at) as month\nFROM payments\nGROUP BY month, year\nORDER BY sum DESC;\n\n-- Sum the payment amounts for each month for each user.\nSELECT customer_name, sum(amount), extract(year from processed_at) as year, extract(month from processed_at) as month\nFROM payments\nGROUP BY customer_name, month, year\nORDER BY customer_name DESC;\n\n-- Find the largest single-user payments for each month.\nSELECT max(amount), year, month\nFROM (\n    SELECT customer_name, sum(amount) as amount, extract(year from processed_at) as year, extract(month from processed_at) as month\n    FROM payments\n    GROUP BY customer_name, month, year\n) AS monthly_sums\nGROUP BY year, month;\n\n/*\nTransaction\n*/\n\n-- Transfer 100 from Clement to Antoine.\nBEGIN TRANSACTION;\nUPDATE balances SET balance = balance - 100 WHERE username = 'clement';\nUPDATE balances SET balance = balance + 100 WHERE username = 'antoine';\nCOMMIT;\n\n/*\nIndexes\n\ndemonstrates database indexes\n*/\n\n-- Find the 10 largest ints.\nSELECT * FROM large_table ORDER BY random_int DESC LIMIT 10;\n\n-- Create an index on the ints in the table.\nCREATE INDEX large_table_random_int_idx ON large_table(random_int);\n")))}c.isMDXComponent=!0}}]);