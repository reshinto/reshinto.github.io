"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[9421],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>d});var n=t(7294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),d=i,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return t?n.createElement(h,a(a({ref:r},u),{},{components:t})):n.createElement(h,a({ref:r},u))}));function d(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=p;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3551:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=t(7462),i=(t(7294),t(3905));const o={},a="Divide & Conquer algorithms",l={unversionedId:"interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/readme",id:"interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/readme",title:"Divide & Conquer algorithms",description:"1. Divide problem into several smaller subproblems",source:"@site/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/readme.md",sourceDirName:"interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms",slug:"/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/",permalink:"/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Missing Number",permalink:"/docs/interviewPrep/algorithms_and_techniques/bitwise/missingNumber"},next:{title:"Binary Search",permalink:"/docs/interviewPrep/algorithms_and_techniques/divide_&_conquer_algorithms/binarySearch"}},s={},c=[],u={toc:c};function m(e){let{components:r,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"divide--conquer-algorithms"},"Divide & Conquer algorithms"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Divide problem into several smaller subproblems",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"normally, the subproblems are similar to the original"))),(0,i.kt)("li",{parentName:"ol"},"Conquer the subproblems by solving them recursively",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"base case: solve small enough problems by brute force"))),(0,i.kt)("li",{parentName:"ol"},"Combine the solutions to get a solution to the subproblems",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"and finally a solution to the original problem"))),(0,i.kt)("li",{parentName:"ol"},"Divide and Conquer algorithms are normally ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/reshinto/Basic_technologies_revision/tree/master/algorithms_and_techniques/recursion"},"recursive"))))}m.isMDXComponent=!0}}]);