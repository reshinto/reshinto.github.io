"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[45767],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=r.createContext({}),l=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(m.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=l(t),h=a,d=g["".concat(m,".").concat(h)]||g[h]||p[h]||i;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},78351:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(83117),a=(t(67294),t(3905));const i={},o="C# Example",s={unversionedId:"interviewPrep/designPatterns/Behavioral_patterns/Memento/cSharp/readme",id:"interviewPrep/designPatterns/Behavioral_patterns/Memento/cSharp/readme",title:"C# Example",description:"Example",source:"@site/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/cSharp/readme.md",sourceDirName:"interviewPrep/designPatterns/Behavioral_patterns/Memento/cSharp",slug:"/interviewPrep/designPatterns/Behavioral_patterns/Memento/cSharp/",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/cSharp/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/cSharp/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/cPlusPlus/"},next:{title:"Go Example",permalink:"/docs/interviewPrep/designPatterns/Behavioral_patterns/Memento/go/"}},m={},l=[],c={toc:l};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-example"},"C# Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// Memento Design Pattern\n//\n// Intent: Lets you save and restore the previous state of an object without\n// revealing the details of its implementation.\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\n\nnamespace RefactoringGuru.DesignPatterns.Memento.Conceptual\n{\n    // The Originator holds some important state that may change over time. It\n    // also defines a method for saving the state inside a memento and another\n    // method for restoring the state from it.\n    class Originator\n    {\n        // For the sake of simplicity, the originator\'s state is stored inside a\n        // single variable.\n        private string _state;\n\n        public Originator(string state)\n        {\n            this._state = state;\n            Console.WriteLine("Originator: My initial state is: " + state);\n        }\n\n        // The Originator\'s business logic may affect its internal state.\n        // Therefore, the client should backup the state before launching\n        // methods of the business logic via the save() method.\n        public void DoSomething()\n        {\n            Console.WriteLine("Originator: I\'m doing something important.");\n            this._state = this.GenerateRandomString(30);\n            Console.WriteLine($"Originator: and my state has changed to: {_state}");\n        }\n\n        private string GenerateRandomString(int length = 10)\n        {\n            string allowedSymbols = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";\n            string result = string.Empty;\n\n            while (length > 0)\n            {\n                result += allowedSymbols[new Random().Next(0, allowedSymbols.Length)];\n\n                Thread.Sleep(12);\n\n                length--;\n            }\n\n            return result;\n        }\n\n        // Saves the current state inside a memento.\n        public IMemento Save()\n        {\n            return new ConcreteMemento(this._state);\n        }\n\n        // Restores the Originator\'s state from a memento object.\n        public void Restore(IMemento memento)\n        {\n            if (!(memento is ConcreteMemento))\n            {\n                throw new Exception("Unknown memento class " + memento.ToString());\n            }\n\n            this._state = memento.GetState();\n            Console.Write($"Originator: My state has changed to: {_state}");\n        }\n    }\n\n    // The Memento interface provides a way to retrieve the memento\'s metadata,\n    // such as creation date or name. However, it doesn\'t expose the\n    // Originator\'s state.\n    public interface IMemento\n    {\n        string GetName();\n\n        string GetState();\n\n        DateTime GetDate();\n    }\n\n    // The Concrete Memento contains the infrastructure for storing the\n    // Originator\'s state.\n    class ConcreteMemento : IMemento\n    {\n        private string _state;\n\n        private DateTime _date;\n\n        public ConcreteMemento(string state)\n        {\n            this._state = state;\n            this._date = DateTime.Now;\n        }\n\n        // The Originator uses this method when restoring its state.\n        public string GetState()\n        {\n            return this._state;\n        }\n\n        // The rest of the methods are used by the Caretaker to display\n        // metadata.\n        public string GetName()\n        {\n            return $"{this._date} / ({this._state.Substring(0, 9)})...";\n        }\n\n        public DateTime GetDate()\n        {\n            return this._date;\n        }\n    }\n\n    // The Caretaker doesn\'t depend on the Concrete Memento class. Therefore, it\n    // doesn\'t have access to the originator\'s state, stored inside the memento.\n    // It works with all mementos via the base Memento interface.\n    class Caretaker\n    {\n        private List<IMemento> _mementos = new List<IMemento>();\n\n        private Originator _originator = null;\n\n        public Caretaker(Originator originator)\n        {\n            this._originator = originator;\n        }\n\n        public void Backup()\n        {\n            Console.WriteLine("\\nCaretaker: Saving Originator\'s state...");\n            this._mementos.Add(this._originator.Save());\n        }\n\n        public void Undo()\n        {\n            if (this._mementos.Count == 0)\n            {\n                return;\n            }\n\n            var memento = this._mementos.Last();\n            this._mementos.Remove(memento);\n\n            Console.WriteLine("Caretaker: Restoring state to: " + memento.GetName());\n\n            try\n            {\n                this._originator.Restore(memento);\n            }\n            catch (Exception)\n            {\n                this.Undo();\n            }\n        }\n\n        public void ShowHistory()\n        {\n            Console.WriteLine("Caretaker: Here\'s the list of mementos:");\n\n            foreach (var memento in this._mementos)\n            {\n                Console.WriteLine(memento.GetName());\n            }\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Client code.\n            Originator originator = new Originator("Super-duper-super-puper-super.");\n            Caretaker caretaker = new Caretaker(originator);\n\n            caretaker.Backup();\n            originator.DoSomething();\n\n            caretaker.Backup();\n            originator.DoSomething();\n\n            caretaker.Backup();\n            originator.DoSomething();\n\n            Console.WriteLine();\n            caretaker.ShowHistory();\n\n            Console.WriteLine("\\nClient: Now, let\'s rollback!\\n");\n            caretaker.Undo();\n\n            Console.WriteLine("\\n\\nClient: Once more!\\n");\n            caretaker.Undo();\n\n            Console.WriteLine();\n        }\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Originator: My initial state is: Super-duper-super-puper-super.\n\nCaretaker: Saving Originator's state...\nOriginator: I'm doing something important.\nOriginator: and my state has changed to: oGyQIIatlDDWNgYYqJATTmdwnnGZQj\n\nCaretaker: Saving Originator's state...\nOriginator: I'm doing something important.\nOriginator: and my state has changed to: jBtMDDWogzzRJbTTmEwOOhZrjjBULe\n\nCaretaker: Saving Originator's state...\nOriginator: I'm doing something important.\nOriginator: and my state has changed to: exoHyyRkbuuNEXOhhArKccUmexPPHZ\n\nCaretaker: Here's the list of mementos:\n12.06.2018 15:52:45 / (Super-dup...)\n12.06.2018 15:52:46 / (oGyQIIatl...)\n12.06.2018 15:52:46 / (jBtMDDWog...)\n\nClient: Now, let's rollback!\n\nCaretaker: Restoring state to: 12.06.2018 15:52:46 / (jBtMDDWog...)\nOriginator: My state has changed to: jBtMDDWogzzRJbTTmEwOOhZrjjBULe\n\nClient: Once more!\n\nCaretaker: Restoring state to: 12.06.2018 15:52:46 / (oGyQIIatl...)\nOriginator: My state has changed to: oGyQIIatlDDWNgYYqJATTmdwnnGZQj\n")))}p.isMDXComponent=!0}}]);