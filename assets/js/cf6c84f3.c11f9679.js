"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[54336],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(a),d=r,k=m["".concat(s,".").concat(d)]||m[d]||p[d]||l;return a?n.createElement(k,i(i({ref:t},u),{},{components:a})):n.createElement(k,i({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},93211:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=a(83117),r=(a(67294),a(3905));const l={},i="Java Database Connectivity (JDBC)",o={unversionedId:"Technologies/database/RDBMS/JDBC/readme",id:"Technologies/database/RDBMS/JDBC/readme",title:"Java Database Connectivity (JDBC)",description:"- an API for client-side access to a database",source:"@site/docs/Technologies/database/RDBMS/JDBC/readme.md",sourceDirName:"Technologies/database/RDBMS/JDBC",slug:"/Technologies/database/RDBMS/JDBC/",permalink:"/docs/Technologies/database/RDBMS/JDBC/",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/Technologies/database/RDBMS/JDBC/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Relational Database Management System (RDBMS)",permalink:"/docs/Technologies/database/RDBMS/"},next:{title:"Django database setting",permalink:"/docs/Technologies/database/SQL/djangoDatabaseSettings"}},s={},c=[{value:"Basic Flow",id:"basic-flow",level:2},{value:"Features",id:"features",level:2},{value:"Universal Data Access",id:"universal-data-access",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Terminology of JDBC",id:"terminology-of-jdbc",level:2},{value:"Connections",id:"connections",level:3},{value:"Executions",id:"executions",level:3},{value:"Transactions",id:"transactions",level:3}],u={toc:c};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"java-database-connectivity-jdbc"},"Java Database Connectivity (JDBC)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"an API for client-side access to a database"),(0,r.kt)("li",{parentName:"ul"},"specifically RDBMS focused")),(0,r.kt)("h2",{id:"basic-flow"},"Basic Flow"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Mount Driver -> Create Connection -> Execute SQL -> Commit / Rollback -> Close Connection\n")),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("h3",{id:"universal-data-access"},"Universal Data Access"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"hot swappable"),(0,r.kt)("li",{parentName:"ul"},"standard SQL"),(0,r.kt)("li",{parentName:"ul"},"JDBC drivers available"),(0,r.kt)("li",{parentName:"ul"},"can run the same code against 2 different databases in theory")),(0,r.kt)("h3",{id:"exceptions"},"Exceptions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"all JDBC operations throw a SQLException"),(0,r.kt)("li",{parentName:"ul"},"name exception",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"you have to catch it or throw it"))),(0,r.kt)("li",{parentName:"ul"},"standardized SQLSTATE code is available"),(0,r.kt)("li",{parentName:"ul"},"ErrorCode is available but is vendor specific in most cases")),(0,r.kt)("h2",{id:"terminology-of-jdbc"},"Terminology of JDBC"),(0,r.kt)("h3",{id:"connections"},"Connections"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"DriverManager"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a class that interacts with the driver for creating connections"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"DataSource"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a modern class that interacts with the driver for creating connections"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Connection"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a class that the developer interacts with that manages the actual communication between the client and the server")))),(0,r.kt)("h3",{id:"executions"},"Executions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Statement"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the representation SQL to be executed against the database"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ResultSet"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the response from the database in a logical tabular form"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"PreparedStatement"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"an extension of statement that is used for precompiled statements (with inputs)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CallableStatement"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"an extension of PreparedStatement that references stored procedures in the database (with inputs and outputs)")))),(0,r.kt)("h3",{id:"transactions"},"Transactions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Auto-commit"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a function of a database driver where each statement is immediately readable by all processes once executed in the RDBMS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Transaction"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a series of statements that must be executed completely or not at all before any other process can read them"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Rollback"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a mechanism by which all statements of a transaction are removed from the database such that it appears to all current and future processes as never having occurred")))))}p.isMDXComponent=!0}}]);