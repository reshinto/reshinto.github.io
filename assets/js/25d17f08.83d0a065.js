"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[25110],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(n),g=a,d=m["".concat(s,".").concat(g)]||m[g]||u[g]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},40393:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(83117),a=(n(67294),n(3905));const o={},i="Example 2",p={unversionedId:"interviewPrep/designPatterns/Creational_patterns/Prototype/swift/example2",id:"interviewPrep/designPatterns/Creational_patterns/Prototype/swift/example2",title:"Example 2",description:"",source:"@site/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/swift/example2.md",sourceDirName:"interviewPrep/designPatterns/Creational_patterns/Prototype/swift",slug:"/interviewPrep/designPatterns/Creational_patterns/Prototype/swift/example2",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/swift/example2",draft:!1,editUrl:"https://github.com/reshinto/reshinto.github.io/blob/dev/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/swift/example2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift Example",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/swift/"},next:{title:"TypeScript",permalink:"/docs/interviewPrep/designPatterns/Creational_patterns/Prototype/typescript/"}},s={},l=[],c={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'import XCTest\n\nclass PrototypeRealWorld: XCTestCase {\n\n    func testPrototypeRealWorld() {\n\n        let author = Author(id: 10, username: "Ivan_83")\n        let page = Page(title: "My First Page", contents: "Hello world!", author: author)\n\n        page.add(comment: Comment(message: "Keep it up!"))\n\n        /// Since NSCopying returns Any, the copied object should be unwrapped.\n        guard let anotherPage = page.copy() as? Page else {\n            XCTFail("Page was not copied")\n            return\n        }\n\n        /// Comments should be empty as it is a new page.\n        XCTAssert(anotherPage.comments.isEmpty)\n\n        /// Note that the author is now referencing two objects.\n        XCTAssert(author.pagesCount == 2)\n\n        print("Original title: " + page.title)\n        print("Copied title: " + anotherPage.title)\n        print("Count of pages: " + String(author.pagesCount))\n    }\n}\n\nprivate class Author {\n\n    private var id: Int\n    private var username: String\n    private var pages = [Page]()\n\n    init(id: Int, username: String) {\n        self.id = id\n        self.username = username\n    }\n\n    func add(page: Page) {\n        pages.append(page)\n    }\n\n    var pagesCount: Int {\n        return pages.count\n    }\n}\n\nprivate class Page: NSCopying {\n\n    private(set) var title: String\n    private(set) var contents: String\n    private weak var author: Author?\n    private(set) var comments = [Comment]()\n\n    init(title: String, contents: String, author: Author?) {\n        self.title = title\n        self.contents = contents\n        self.author = author\n        author?.add(page: self)\n    }\n\n    func add(comment: Comment) {\n        comments.append(comment)\n    }\n\n    /// MARK: - NSCopying\n\n    func copy(with zone: NSZone? = nil) -> Any {\n        return Page(title: "Copy of \'" + title + "\'", contents: contents, author: author)\n    }\n}\n\nprivate struct Comment {\n\n    let date = Date()\n    let message: String\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Original title: My First Page\nCopied title: Copy of 'My First Page'\nCount of pages: 2\n")))}u.isMDXComponent=!0}}]);